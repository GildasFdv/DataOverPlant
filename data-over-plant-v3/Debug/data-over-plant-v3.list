
data-over-plant-v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007d24  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08007ed0  08007ed0  00008ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f54  08007f54  00009010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007f54  08007f54  00008f54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f5c  08007f5c  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f5c  08007f5c  00008f5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f60  08007f60  00008f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08007f64  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009010  2**0
                  CONTENTS
 10 .bss          000006ac  20000010  20000010  00009010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006bc  200006bc  00009010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c05b  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000378f  00000000  00000000  0002509b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001998  00000000  00000000  00028830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000140c  00000000  00000000  0002a1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000272e7  00000000  00000000  0002b5d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ef12  00000000  00000000  000528bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8a6d  00000000  00000000  000717cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015a23a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006e7c  00000000  00000000  0015a280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  001610fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08007eb8 	.word	0x08007eb8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	08007eb8 	.word	0x08007eb8

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b988 	b.w	8000524 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	468e      	mov	lr, r1
 8000234:	4604      	mov	r4, r0
 8000236:	4688      	mov	r8, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d962      	bls.n	8000308 <__udivmoddi4+0xdc>
 8000242:	fab2 f682 	clz	r6, r2
 8000246:	b14e      	cbz	r6, 800025c <__udivmoddi4+0x30>
 8000248:	f1c6 0320 	rsb	r3, r6, #32
 800024c:	fa01 f806 	lsl.w	r8, r1, r6
 8000250:	fa20 f303 	lsr.w	r3, r0, r3
 8000254:	40b7      	lsls	r7, r6
 8000256:	ea43 0808 	orr.w	r8, r3, r8
 800025a:	40b4      	lsls	r4, r6
 800025c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000260:	fa1f fc87 	uxth.w	ip, r7
 8000264:	fbb8 f1fe 	udiv	r1, r8, lr
 8000268:	0c23      	lsrs	r3, r4, #16
 800026a:	fb0e 8811 	mls	r8, lr, r1, r8
 800026e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000272:	fb01 f20c 	mul.w	r2, r1, ip
 8000276:	429a      	cmp	r2, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x62>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000280:	f080 80ea 	bcs.w	8000458 <__udivmoddi4+0x22c>
 8000284:	429a      	cmp	r2, r3
 8000286:	f240 80e7 	bls.w	8000458 <__udivmoddi4+0x22c>
 800028a:	3902      	subs	r1, #2
 800028c:	443b      	add	r3, r7
 800028e:	1a9a      	subs	r2, r3, r2
 8000290:	b2a3      	uxth	r3, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800029e:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a2:	459c      	cmp	ip, r3
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0x8e>
 80002a6:	18fb      	adds	r3, r7, r3
 80002a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ac:	f080 80d6 	bcs.w	800045c <__udivmoddi4+0x230>
 80002b0:	459c      	cmp	ip, r3
 80002b2:	f240 80d3 	bls.w	800045c <__udivmoddi4+0x230>
 80002b6:	443b      	add	r3, r7
 80002b8:	3802      	subs	r0, #2
 80002ba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002be:	eba3 030c 	sub.w	r3, r3, ip
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11d      	cbz	r5, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40f3      	lsrs	r3, r6
 80002c8:	2200      	movs	r2, #0
 80002ca:	e9c5 3200 	strd	r3, r2, [r5]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d905      	bls.n	80002e2 <__udivmoddi4+0xb6>
 80002d6:	b10d      	cbz	r5, 80002dc <__udivmoddi4+0xb0>
 80002d8:	e9c5 0100 	strd	r0, r1, [r5]
 80002dc:	2100      	movs	r1, #0
 80002de:	4608      	mov	r0, r1
 80002e0:	e7f5      	b.n	80002ce <__udivmoddi4+0xa2>
 80002e2:	fab3 f183 	clz	r1, r3
 80002e6:	2900      	cmp	r1, #0
 80002e8:	d146      	bne.n	8000378 <__udivmoddi4+0x14c>
 80002ea:	4573      	cmp	r3, lr
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xc8>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 8105 	bhi.w	80004fe <__udivmoddi4+0x2d2>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	4690      	mov	r8, r2
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e5      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000302:	e9c5 4800 	strd	r4, r8, [r5]
 8000306:	e7e2      	b.n	80002ce <__udivmoddi4+0xa2>
 8000308:	2a00      	cmp	r2, #0
 800030a:	f000 8090 	beq.w	800042e <__udivmoddi4+0x202>
 800030e:	fab2 f682 	clz	r6, r2
 8000312:	2e00      	cmp	r6, #0
 8000314:	f040 80a4 	bne.w	8000460 <__udivmoddi4+0x234>
 8000318:	1a8a      	subs	r2, r1, r2
 800031a:	0c03      	lsrs	r3, r0, #16
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	b280      	uxth	r0, r0
 8000322:	b2bc      	uxth	r4, r7
 8000324:	2101      	movs	r1, #1
 8000326:	fbb2 fcfe 	udiv	ip, r2, lr
 800032a:	fb0e 221c 	mls	r2, lr, ip, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb04 f20c 	mul.w	r2, r4, ip
 8000336:	429a      	cmp	r2, r3
 8000338:	d907      	bls.n	800034a <__udivmoddi4+0x11e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x11c>
 8000342:	429a      	cmp	r2, r3
 8000344:	f200 80e0 	bhi.w	8000508 <__udivmoddi4+0x2dc>
 8000348:	46c4      	mov	ip, r8
 800034a:	1a9b      	subs	r3, r3, r2
 800034c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000350:	fb0e 3312 	mls	r3, lr, r2, r3
 8000354:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000358:	fb02 f404 	mul.w	r4, r2, r4
 800035c:	429c      	cmp	r4, r3
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x144>
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	f102 30ff 	add.w	r0, r2, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x142>
 8000368:	429c      	cmp	r4, r3
 800036a:	f200 80ca 	bhi.w	8000502 <__udivmoddi4+0x2d6>
 800036e:	4602      	mov	r2, r0
 8000370:	1b1b      	subs	r3, r3, r4
 8000372:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000376:	e7a5      	b.n	80002c4 <__udivmoddi4+0x98>
 8000378:	f1c1 0620 	rsb	r6, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 f706 	lsr.w	r7, r2, r6
 8000382:	431f      	orrs	r7, r3
 8000384:	fa0e f401 	lsl.w	r4, lr, r1
 8000388:	fa20 f306 	lsr.w	r3, r0, r6
 800038c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000390:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	fa1f fc87 	uxth.w	ip, r7
 800039e:	fbbe f0f9 	udiv	r0, lr, r9
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	fb09 ee10 	mls	lr, r9, r0, lr
 80003a8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003ac:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	fa02 f201 	lsl.w	r2, r2, r1
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x1a0>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 3aff 	add.w	sl, r0, #4294967295
 80003be:	f080 809c 	bcs.w	80004fa <__udivmoddi4+0x2ce>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8099 	bls.w	80004fa <__udivmoddi4+0x2ce>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	fa1f fe83 	uxth.w	lr, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e4:	45a4      	cmp	ip, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1ce>
 80003e8:	193c      	adds	r4, r7, r4
 80003ea:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ee:	f080 8082 	bcs.w	80004f6 <__udivmoddi4+0x2ca>
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d97f      	bls.n	80004f6 <__udivmoddi4+0x2ca>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	443c      	add	r4, r7
 80003fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003fe:	eba4 040c 	sub.w	r4, r4, ip
 8000402:	fba0 ec02 	umull	lr, ip, r0, r2
 8000406:	4564      	cmp	r4, ip
 8000408:	4673      	mov	r3, lr
 800040a:	46e1      	mov	r9, ip
 800040c:	d362      	bcc.n	80004d4 <__udivmoddi4+0x2a8>
 800040e:	d05f      	beq.n	80004d0 <__udivmoddi4+0x2a4>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x1fe>
 8000412:	ebb8 0203 	subs.w	r2, r8, r3
 8000416:	eb64 0409 	sbc.w	r4, r4, r9
 800041a:	fa04 f606 	lsl.w	r6, r4, r6
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431e      	orrs	r6, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c5 6400 	strd	r6, r4, [r5]
 800042a:	2100      	movs	r1, #0
 800042c:	e74f      	b.n	80002ce <__udivmoddi4+0xa2>
 800042e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000432:	0c01      	lsrs	r1, r0, #16
 8000434:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000438:	b280      	uxth	r0, r0
 800043a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800043e:	463b      	mov	r3, r7
 8000440:	4638      	mov	r0, r7
 8000442:	463c      	mov	r4, r7
 8000444:	46b8      	mov	r8, r7
 8000446:	46be      	mov	lr, r7
 8000448:	2620      	movs	r6, #32
 800044a:	fbb1 f1f7 	udiv	r1, r1, r7
 800044e:	eba2 0208 	sub.w	r2, r2, r8
 8000452:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000456:	e766      	b.n	8000326 <__udivmoddi4+0xfa>
 8000458:	4601      	mov	r1, r0
 800045a:	e718      	b.n	800028e <__udivmoddi4+0x62>
 800045c:	4610      	mov	r0, r2
 800045e:	e72c      	b.n	80002ba <__udivmoddi4+0x8e>
 8000460:	f1c6 0220 	rsb	r2, r6, #32
 8000464:	fa2e f302 	lsr.w	r3, lr, r2
 8000468:	40b7      	lsls	r7, r6
 800046a:	40b1      	lsls	r1, r6
 800046c:	fa20 f202 	lsr.w	r2, r0, r2
 8000470:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000474:	430a      	orrs	r2, r1
 8000476:	fbb3 f8fe 	udiv	r8, r3, lr
 800047a:	b2bc      	uxth	r4, r7
 800047c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000480:	0c11      	lsrs	r1, r2, #16
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb08 f904 	mul.w	r9, r8, r4
 800048a:	40b0      	lsls	r0, r6
 800048c:	4589      	cmp	r9, r1
 800048e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000492:	b280      	uxth	r0, r0
 8000494:	d93e      	bls.n	8000514 <__udivmoddi4+0x2e8>
 8000496:	1879      	adds	r1, r7, r1
 8000498:	f108 3cff 	add.w	ip, r8, #4294967295
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x276>
 800049e:	4589      	cmp	r9, r1
 80004a0:	d81f      	bhi.n	80004e2 <__udivmoddi4+0x2b6>
 80004a2:	eba1 0109 	sub.w	r1, r1, r9
 80004a6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004aa:	fb09 f804 	mul.w	r8, r9, r4
 80004ae:	fb0e 1119 	mls	r1, lr, r9, r1
 80004b2:	b292      	uxth	r2, r2
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d229      	bcs.n	8000510 <__udivmoddi4+0x2e4>
 80004bc:	18ba      	adds	r2, r7, r2
 80004be:	f109 31ff 	add.w	r1, r9, #4294967295
 80004c2:	d2c4      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c4:	4542      	cmp	r2, r8
 80004c6:	d2c2      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c8:	f1a9 0102 	sub.w	r1, r9, #2
 80004cc:	443a      	add	r2, r7
 80004ce:	e7be      	b.n	800044e <__udivmoddi4+0x222>
 80004d0:	45f0      	cmp	r8, lr
 80004d2:	d29d      	bcs.n	8000410 <__udivmoddi4+0x1e4>
 80004d4:	ebbe 0302 	subs.w	r3, lr, r2
 80004d8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004dc:	3801      	subs	r0, #1
 80004de:	46e1      	mov	r9, ip
 80004e0:	e796      	b.n	8000410 <__udivmoddi4+0x1e4>
 80004e2:	eba7 0909 	sub.w	r9, r7, r9
 80004e6:	4449      	add	r1, r9
 80004e8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004ec:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f0:	fb09 f804 	mul.w	r8, r9, r4
 80004f4:	e7db      	b.n	80004ae <__udivmoddi4+0x282>
 80004f6:	4673      	mov	r3, lr
 80004f8:	e77f      	b.n	80003fa <__udivmoddi4+0x1ce>
 80004fa:	4650      	mov	r0, sl
 80004fc:	e766      	b.n	80003cc <__udivmoddi4+0x1a0>
 80004fe:	4608      	mov	r0, r1
 8000500:	e6fd      	b.n	80002fe <__udivmoddi4+0xd2>
 8000502:	443b      	add	r3, r7
 8000504:	3a02      	subs	r2, #2
 8000506:	e733      	b.n	8000370 <__udivmoddi4+0x144>
 8000508:	f1ac 0c02 	sub.w	ip, ip, #2
 800050c:	443b      	add	r3, r7
 800050e:	e71c      	b.n	800034a <__udivmoddi4+0x11e>
 8000510:	4649      	mov	r1, r9
 8000512:	e79c      	b.n	800044e <__udivmoddi4+0x222>
 8000514:	eba1 0109 	sub.w	r1, r1, r9
 8000518:	46c4      	mov	ip, r8
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	e7c4      	b.n	80004ae <__udivmoddi4+0x282>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <set_led3>:
#include "led.h"
#include "main.h"


void set_led3()
{
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_SET);
 800052c:	2201      	movs	r2, #1
 800052e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000532:	4802      	ldr	r0, [pc, #8]	@ (800053c <set_led3+0x14>)
 8000534:	f001 ff2c 	bl	8002390 <HAL_GPIO_WritePin>
}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}
 800053c:	40021800 	.word	0x40021800

08000540 <reset_led3>:

void reset_led3()
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800054a:	4802      	ldr	r0, [pc, #8]	@ (8000554 <reset_led3+0x14>)
 800054c:	f001 ff20 	bl	8002390 <HAL_GPIO_WritePin>
}
 8000550:	bf00      	nop
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40021800 	.word	0x40021800

08000558 <reset_led4>:
{
	HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_SET);
}

void reset_led4()
{
 8000558:	b580      	push	{r7, lr}
 800055a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_RESET);
 800055c:	2200      	movs	r2, #0
 800055e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000562:	4802      	ldr	r0, [pc, #8]	@ (800056c <reset_led4+0x14>)
 8000564:	f001 ff14 	bl	8002390 <HAL_GPIO_WritePin>
}
 8000568:	bf00      	nop
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40021800 	.word	0x40021800

08000570 <init_lora_transmitter>:
 */

#include "lora.h"

void init_lora_transmitter()
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
	// Mettre en veille (obligatoire avant les changements de mode)
	write_register(0x01, 0x80); // Sleep mode + LoRa
 8000576:	2180      	movs	r1, #128	@ 0x80
 8000578:	2001      	movs	r0, #1
 800057a:	f000 f8bd 	bl	80006f8 <write_register>

	// Choisir fréquence (ici pour 868 MHz)
	write_register(0x06, 0xD9); // RegFrfMsb = 868 MHz
 800057e:	21d9      	movs	r1, #217	@ 0xd9
 8000580:	2006      	movs	r0, #6
 8000582:	f000 f8b9 	bl	80006f8 <write_register>
	write_register(0x07, 0x06);
 8000586:	2106      	movs	r1, #6
 8000588:	2007      	movs	r0, #7
 800058a:	f000 f8b5 	bl	80006f8 <write_register>
	write_register(0x08, 0x66);
 800058e:	2166      	movs	r1, #102	@ 0x66
 8000590:	2008      	movs	r0, #8
 8000592:	f000 f8b1 	bl	80006f8 <write_register>

	// Puissance d’émission (PA_BOOST, 17 dBm)
	//write_register(0x09, 0x8F); // RegPaConfig

	// 0 000 0000
	write_register(0x09, 0x00); // RegPaConfig: PA_SELECT=1 (PA_BOOST), OutputPower=0 (minimum)
 8000596:	2100      	movs	r1, #0
 8000598:	2009      	movs	r0, #9
 800059a:	f000 f8ad 	bl	80006f8 <write_register>

	// Paramètres LoRa (BW=125 kHz, CR=4/5, SF=7)
	write_register(0x1D, 0x72); // RegModemConfig1: BW=125kHz, CR=4/5, explicit header
 800059e:	2172      	movs	r1, #114	@ 0x72
 80005a0:	201d      	movs	r0, #29
 80005a2:	f000 f8a9 	bl	80006f8 <write_register>
	write_register(0x1E, 0x74); // RegModemConfig2: SF=7, CRC On
 80005a6:	2174      	movs	r1, #116	@ 0x74
 80005a8:	201e      	movs	r0, #30
 80005aa:	f000 f8a5 	bl	80006f8 <write_register>
	write_register(0x26, 0x04); // RegModemConfig3: LowDataRateOptimize=OFF
 80005ae:	2104      	movs	r1, #4
 80005b0:	2026      	movs	r0, #38	@ 0x26
 80005b2:	f000 f8a1 	bl	80006f8 <write_register>

	// Configuration de la FIFO
	write_register(0x0E, 0x80); // RegFifoTxBaseAddr
 80005b6:	2180      	movs	r1, #128	@ 0x80
 80005b8:	200e      	movs	r0, #14
 80005ba:	f000 f89d 	bl	80006f8 <write_register>
	write_register(0x0D, 0x80); // RegFifoAddrPtr
 80005be:	2180      	movs	r1, #128	@ 0x80
 80005c0:	200d      	movs	r0, #13
 80005c2:	f000 f899 	bl	80006f8 <write_register>
	unsigned char size = 7;
 80005c6:	2307      	movs	r3, #7
 80005c8:	71fb      	strb	r3, [r7, #7]
	write_register(0x22, size); // RegPayloadLength (taille du message)
 80005ca:	79fb      	ldrb	r3, [r7, #7]
 80005cc:	4619      	mov	r1, r3
 80005ce:	2022      	movs	r0, #34	@ 0x22
 80005d0:	f000 f892 	bl	80006f8 <write_register>
	/*for (int i = 0; i < size; i++) {
	  write_register(0x00, TX_Buffer[i]); // RegFifo
	}*/

	// Passage en mode émetteur
	write_register(0x01, 0x83); // TX mode + LoRa
 80005d4:	2183      	movs	r1, #131	@ 0x83
 80005d6:	2001      	movs	r0, #1
 80005d8:	f000 f88e 	bl	80006f8 <write_register>
}
 80005dc:	bf00      	nop
 80005de:	3708      	adds	r7, #8
 80005e0:	46bd      	mov	sp, r7
 80005e2:	bd80      	pop	{r7, pc}

080005e4 <init_lora>:

    serial_print("Module LoRa initialisé en mode réception\r\n");
}

void init_lora(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
#ifdef TRANSMITTER
	init_lora_transmitter();
 80005e8:	f7ff ffc2 	bl	8000570 <init_lora_transmitter>
#endif
#ifdef RECEIVER
	init_lora_receiver();
#endif
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}

080005f0 <lora_reset>:

void lora_reset(void)
{
 80005f0:	b580      	push	{r7, lr}
 80005f2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_RESET);
 80005f4:	2200      	movs	r2, #0
 80005f6:	2108      	movs	r1, #8
 80005f8:	4807      	ldr	r0, [pc, #28]	@ (8000618 <lora_reset+0x28>)
 80005fa:	f001 fec9 	bl	8002390 <HAL_GPIO_WritePin>
    HAL_Delay(10); // maintenir RESET à 0 pendant 10ms
 80005fe:	200a      	movs	r0, #10
 8000600:	f001 fa0c 	bl	8001a1c <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 8000604:	2201      	movs	r2, #1
 8000606:	2108      	movs	r1, #8
 8000608:	4803      	ldr	r0, [pc, #12]	@ (8000618 <lora_reset+0x28>)
 800060a:	f001 fec1 	bl	8002390 <HAL_GPIO_WritePin>
    HAL_Delay(10); // attendre encore un peu après le relâchement
 800060e:	200a      	movs	r0, #10
 8000610:	f001 fa04 	bl	8001a1c <HAL_Delay>
}
 8000614:	bf00      	nop
 8000616:	bd80      	pop	{r7, pc}
 8000618:	40020800 	.word	0x40020800

0800061c <lora_version>:

uint8_t lora_version(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	b082      	sub	sp, #8
 8000620:	af00      	add	r7, sp, #0
	uint8_t version = read_register(0x42);
 8000622:	2042      	movs	r0, #66	@ 0x42
 8000624:	f000 f892 	bl	800074c <read_register>
 8000628:	4603      	mov	r3, r0
 800062a:	71fb      	strb	r3, [r7, #7]

	return version;
 800062c:	79fb      	ldrb	r3, [r7, #7]
}
 800062e:	4618      	mov	r0, r3
 8000630:	3708      	adds	r7, #8
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}

08000636 <lora_status>:

uint8_t lora_status(void)
{
 8000636:	b580      	push	{r7, lr}
 8000638:	af00      	add	r7, sp, #0
    return read_register(0x12); // RegIrqFlags
 800063a:	2012      	movs	r0, #18
 800063c:	f000 f886 	bl	800074c <read_register>
 8000640:	4603      	mov	r3, r0
}
 8000642:	4618      	mov	r0, r3
 8000644:	bd80      	pop	{r7, pc}

08000646 <lora_clear_irq>:

void lora_clear_irq(void)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	af00      	add	r7, sp, #0
    write_register(0x12, 0xFF); // Effacer tous les drapeaux d'interruption
 800064a:	21ff      	movs	r1, #255	@ 0xff
 800064c:	2012      	movs	r0, #18
 800064e:	f000 f853 	bl	80006f8 <write_register>
}
 8000652:	bf00      	nop
 8000654:	bd80      	pop	{r7, pc}

08000656 <lora_is_tx_done>:

char lora_is_tx_done(void)
{
 8000656:	b580      	push	{r7, lr}
 8000658:	af00      	add	r7, sp, #0
    return (lora_status() & 0x08) != 0; // Vérifie le drapeau TxDone
 800065a:	f7ff ffec 	bl	8000636 <lora_status>
 800065e:	4603      	mov	r3, r0
 8000660:	f003 0308 	and.w	r3, r3, #8
 8000664:	2b00      	cmp	r3, #0
 8000666:	bf14      	ite	ne
 8000668:	2301      	movne	r3, #1
 800066a:	2300      	moveq	r3, #0
 800066c:	b2db      	uxtb	r3, r3
}
 800066e:	4618      	mov	r0, r3
 8000670:	bd80      	pop	{r7, pc}

08000672 <send_lora_packet>:

void send_lora_packet(const uint8_t* data, uint8_t size)
{
 8000672:	b580      	push	{r7, lr}
 8000674:	b084      	sub	sp, #16
 8000676:	af00      	add	r7, sp, #0
 8000678:	6078      	str	r0, [r7, #4]
 800067a:	460b      	mov	r3, r1
 800067c:	70fb      	strb	r3, [r7, #3]
    // Mettre en mode veille
    write_register(0x01, 0x81);  // Standby mode + LoRa
 800067e:	2181      	movs	r1, #129	@ 0x81
 8000680:	2001      	movs	r0, #1
 8000682:	f000 f839 	bl	80006f8 <write_register>

    // Configurer le pointeur FIFO pour l'écriture
    write_register(0x0D, 0x80);  // RegFifoAddrPtr
 8000686:	2180      	movs	r1, #128	@ 0x80
 8000688:	200d      	movs	r0, #13
 800068a:	f000 f835 	bl	80006f8 <write_register>

    // Écrire les données dans la FIFO
    for (int i = 0; i < size; i++) {
 800068e:	2300      	movs	r3, #0
 8000690:	60fb      	str	r3, [r7, #12]
 8000692:	e00a      	b.n	80006aa <send_lora_packet+0x38>
        write_register(0x00, data[i]);  // RegFifo
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	687a      	ldr	r2, [r7, #4]
 8000698:	4413      	add	r3, r2
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	4619      	mov	r1, r3
 800069e:	2000      	movs	r0, #0
 80006a0:	f000 f82a 	bl	80006f8 <write_register>
    for (int i = 0; i < size; i++) {
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	3301      	adds	r3, #1
 80006a8:	60fb      	str	r3, [r7, #12]
 80006aa:	78fb      	ldrb	r3, [r7, #3]
 80006ac:	68fa      	ldr	r2, [r7, #12]
 80006ae:	429a      	cmp	r2, r3
 80006b0:	dbf0      	blt.n	8000694 <send_lora_packet+0x22>
    }

    // Définir la taille des données
    write_register(0x22, size);  // RegPayloadLength
 80006b2:	78fb      	ldrb	r3, [r7, #3]
 80006b4:	4619      	mov	r1, r3
 80006b6:	2022      	movs	r0, #34	@ 0x22
 80006b8:	f000 f81e 	bl	80006f8 <write_register>

    // Démarrer la transmission
    write_register(0x01, 0x83);  // TX mode + LoRa
 80006bc:	2183      	movs	r1, #131	@ 0x83
 80006be:	2001      	movs	r0, #1
 80006c0:	f000 f81a 	bl	80006f8 <write_register>
}
 80006c4:	bf00      	nop
 80006c6:	3710      	adds	r7, #16
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <serial_print>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void serial_print(char* str)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80006d4:	6878      	ldr	r0, [r7, #4]
 80006d6:	f7ff fd89 	bl	80001ec <strlen>
 80006da:	4603      	mov	r3, r0
 80006dc:	b29a      	uxth	r2, r3
 80006de:	f04f 33ff 	mov.w	r3, #4294967295
 80006e2:	6879      	ldr	r1, [r7, #4]
 80006e4:	4803      	ldr	r0, [pc, #12]	@ (80006f4 <serial_print+0x28>)
 80006e6:	f006 fb1b 	bl	8006d20 <HAL_UART_Transmit>
}
 80006ea:	bf00      	nop
 80006ec:	3708      	adds	r7, #8
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000210 	.word	0x20000210

080006f8 <write_register>:

void write_register(uint8_t addr, uint8_t value)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	b084      	sub	sp, #16
 80006fc:	af00      	add	r7, sp, #0
 80006fe:	4603      	mov	r3, r0
 8000700:	460a      	mov	r2, r1
 8000702:	71fb      	strb	r3, [r7, #7]
 8000704:	4613      	mov	r3, r2
 8000706:	71bb      	strb	r3, [r7, #6]
    uint8_t data[2];
    data[0] = addr | 0x80; // bit 7 à 1 pour écriture
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800070e:	b2db      	uxtb	r3, r3
 8000710:	733b      	strb	r3, [r7, #12]
    data[1] = value;
 8000712:	79bb      	ldrb	r3, [r7, #6]
 8000714:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET); // NSS low
 8000716:	2200      	movs	r2, #0
 8000718:	2140      	movs	r1, #64	@ 0x40
 800071a:	480a      	ldr	r0, [pc, #40]	@ (8000744 <write_register+0x4c>)
 800071c:	f001 fe38 	bl	8002390 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi5, data, 2, HAL_MAX_DELAY);
 8000720:	f107 010c 	add.w	r1, r7, #12
 8000724:	f04f 33ff 	mov.w	r3, #4294967295
 8000728:	2202      	movs	r2, #2
 800072a:	4807      	ldr	r0, [pc, #28]	@ (8000748 <write_register+0x50>)
 800072c:	f005 f8e9 	bl	8005902 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);   // NSS high
 8000730:	2201      	movs	r2, #1
 8000732:	2140      	movs	r1, #64	@ 0x40
 8000734:	4803      	ldr	r0, [pc, #12]	@ (8000744 <write_register+0x4c>)
 8000736:	f001 fe2b 	bl	8002390 <HAL_GPIO_WritePin>
}
 800073a:	bf00      	nop
 800073c:	3710      	adds	r7, #16
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40021400 	.word	0x40021400
 8000748:	20000170 	.word	0x20000170

0800074c <read_register>:

uint8_t read_register(uint8_t addr)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b084      	sub	sp, #16
 8000750:	af00      	add	r7, sp, #0
 8000752:	4603      	mov	r3, r0
 8000754:	71fb      	strb	r3, [r7, #7]
    uint8_t value = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	73fb      	strb	r3, [r7, #15]
    uint8_t reg_addr = addr & 0x7F; // bit 7 à 0 pour lecture (mask pour s'assurer que le bit 7 est à 0)
 800075a:	79fb      	ldrb	r3, [r7, #7]
 800075c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000760:	b2db      	uxtb	r3, r3
 8000762:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET); // NSS low
 8000764:	2200      	movs	r2, #0
 8000766:	2140      	movs	r1, #64	@ 0x40
 8000768:	480e      	ldr	r0, [pc, #56]	@ (80007a4 <read_register+0x58>)
 800076a:	f001 fe11 	bl	8002390 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi5, &reg_addr, 1, HAL_MAX_DELAY); // Envoyer l'adresse du registre
 800076e:	f107 010e 	add.w	r1, r7, #14
 8000772:	f04f 33ff 	mov.w	r3, #4294967295
 8000776:	2201      	movs	r2, #1
 8000778:	480b      	ldr	r0, [pc, #44]	@ (80007a8 <read_register+0x5c>)
 800077a:	f005 f8c2 	bl	8005902 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi5, &value, 1, HAL_MAX_DELAY);     // Lire la valeur du registre
 800077e:	f107 010f 	add.w	r1, r7, #15
 8000782:	f04f 33ff 	mov.w	r3, #4294967295
 8000786:	2201      	movs	r2, #1
 8000788:	4807      	ldr	r0, [pc, #28]	@ (80007a8 <read_register+0x5c>)
 800078a:	f005 f9fe 	bl	8005b8a <HAL_SPI_Receive>
    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);   // NSS high
 800078e:	2201      	movs	r2, #1
 8000790:	2140      	movs	r1, #64	@ 0x40
 8000792:	4804      	ldr	r0, [pc, #16]	@ (80007a4 <read_register+0x58>)
 8000794:	f001 fdfc 	bl	8002390 <HAL_GPIO_WritePin>

    return value;
 8000798:	7bfb      	ldrb	r3, [r7, #15]
}
 800079a:	4618      	mov	r0, r3
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40021400 	.word	0x40021400
 80007a8:	20000170 	.word	0x20000170

080007ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b082      	sub	sp, #8
 80007b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b2:	f001 f8f1 	bl	8001998 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b6:	f000 f84f 	bl	8000858 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007ba:	f000 fae9 	bl	8000d90 <MX_GPIO_Init>
  MX_CRC_Init();
 80007be:	f000 f8b5 	bl	800092c <MX_CRC_Init>
  MX_DMA2D_Init();
 80007c2:	f000 f8c7 	bl	8000954 <MX_DMA2D_Init>
  MX_FMC_Init();
 80007c6:	f000 fa93 	bl	8000cf0 <MX_FMC_Init>
  MX_I2C3_Init();
 80007ca:	f000 f8f5 	bl	80009b8 <MX_I2C3_Init>
  MX_LTDC_Init();
 80007ce:	f000 f933 	bl	8000a38 <MX_LTDC_Init>
  MX_SPI5_Init();
 80007d2:	f000 f9b1 	bl	8000b38 <MX_SPI5_Init>
  MX_TIM1_Init();
 80007d6:	f000 f9e5 	bl	8000ba4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80007da:	f000 fa33 	bl	8000c44 <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 80007de:	f000 fa5b 	bl	8000c98 <MX_USB_OTG_HS_HCD_Init>
  /* USER CODE BEGIN 2 */
  reset_led4();
 80007e2:	f7ff feb9 	bl	8000558 <reset_led4>
  reset_led3();
 80007e6:	f7ff feab 	bl	8000540 <reset_led3>
    }
    int tick = HAL_GetTick();
#endif

#ifdef TRANSMITTER
  lora_reset();
 80007ea:	f7ff ff01 	bl	80005f0 <lora_reset>
  HAL_Delay(10);
 80007ee:	200a      	movs	r0, #10
 80007f0:	f001 f914 	bl	8001a1c <HAL_Delay>

  uint8_t version = lora_version();
 80007f4:	f7ff ff12 	bl	800061c <lora_version>
 80007f8:	4603      	mov	r3, r0
 80007fa:	71fb      	strb	r3, [r7, #7]
  if (version == 0x12) {
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	2b12      	cmp	r3, #18
 8000800:	d115      	bne.n	800082e <main+0x82>
	  set_led3();
 8000802:	f7ff fe91 	bl	8000528 <set_led3>
      serial_print("Initialisation du module LoRa...\r\n");
 8000806:	4810      	ldr	r0, [pc, #64]	@ (8000848 <main+0x9c>)
 8000808:	f7ff ff60 	bl	80006cc <serial_print>

      // Préparation pour la transmission
      init_lora();  // Initialiser le module et envoyer les données
 800080c:	f7ff feea 	bl	80005e4 <init_lora>

      // Attendre que la transmission soit terminée
      while (!lora_is_tx_done()) {
 8000810:	e002      	b.n	8000818 <main+0x6c>
          HAL_Delay(10);
 8000812:	200a      	movs	r0, #10
 8000814:	f001 f902 	bl	8001a1c <HAL_Delay>
      while (!lora_is_tx_done()) {
 8000818:	f7ff ff1d 	bl	8000656 <lora_is_tx_done>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d0f7      	beq.n	8000812 <main+0x66>
      }

      serial_print("Transmission terminee!\r\n");
 8000822:	480a      	ldr	r0, [pc, #40]	@ (800084c <main+0xa0>)
 8000824:	f7ff ff52 	bl	80006cc <serial_print>

      // Effacer les drapeaux d'interruption
      lora_clear_irq();
 8000828:	f7ff ff0d 	bl	8000646 <lora_clear_irq>
 800082c:	e002      	b.n	8000834 <main+0x88>
  } else {
      serial_print("Module LoRa non detecte ou incompatible\r\n");
 800082e:	4808      	ldr	r0, [pc, #32]	@ (8000850 <main+0xa4>)
 8000830:	f7ff ff4c 	bl	80006cc <serial_print>
#ifdef TRANSMITTER
	//uint32_t current_time = HAL_GetTick();

	// Vérifier si le module est prêt (pas en train d'émettre)
	//if (!(read_register(0x01) & 0x07)) {  // Vérifier si le module est en mode veille
	  send_lora_packet(TX_Buffer, sizeof(TX_Buffer) - 1);  // Ignorer le zéro terminal
 8000834:	2101      	movs	r1, #1
 8000836:	4807      	ldr	r0, [pc, #28]	@ (8000854 <main+0xa8>)
 8000838:	f7ff ff1b 	bl	8000672 <send_lora_packet>
	  HAL_Delay(100);
 800083c:	2064      	movs	r0, #100	@ 0x64
 800083e:	f001 f8ed 	bl	8001a1c <HAL_Delay>
	  send_lora_packet(TX_Buffer, sizeof(TX_Buffer) - 1);  // Ignorer le zéro terminal
 8000842:	bf00      	nop
 8000844:	e7f6      	b.n	8000834 <main+0x88>
 8000846:	bf00      	nop
 8000848:	08007ed0 	.word	0x08007ed0
 800084c:	08007ef4 	.word	0x08007ef4
 8000850:	08007f10 	.word	0x08007f10
 8000854:	20000000 	.word	0x20000000

08000858 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b094      	sub	sp, #80	@ 0x50
 800085c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085e:	f107 0320 	add.w	r3, r7, #32
 8000862:	2230      	movs	r2, #48	@ 0x30
 8000864:	2100      	movs	r1, #0
 8000866:	4618      	mov	r0, r3
 8000868:	f007 fafa 	bl	8007e60 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	2200      	movs	r2, #0
 8000872:	601a      	str	r2, [r3, #0]
 8000874:	605a      	str	r2, [r3, #4]
 8000876:	609a      	str	r2, [r3, #8]
 8000878:	60da      	str	r2, [r3, #12]
 800087a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800087c:	2300      	movs	r3, #0
 800087e:	60bb      	str	r3, [r7, #8]
 8000880:	4b28      	ldr	r3, [pc, #160]	@ (8000924 <SystemClock_Config+0xcc>)
 8000882:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000884:	4a27      	ldr	r2, [pc, #156]	@ (8000924 <SystemClock_Config+0xcc>)
 8000886:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800088a:	6413      	str	r3, [r2, #64]	@ 0x40
 800088c:	4b25      	ldr	r3, [pc, #148]	@ (8000924 <SystemClock_Config+0xcc>)
 800088e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000890:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000894:	60bb      	str	r3, [r7, #8]
 8000896:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000898:	2300      	movs	r3, #0
 800089a:	607b      	str	r3, [r7, #4]
 800089c:	4b22      	ldr	r3, [pc, #136]	@ (8000928 <SystemClock_Config+0xd0>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008a4:	4a20      	ldr	r2, [pc, #128]	@ (8000928 <SystemClock_Config+0xd0>)
 80008a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008aa:	6013      	str	r3, [r2, #0]
 80008ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000928 <SystemClock_Config+0xd0>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80008b8:	2301      	movs	r3, #1
 80008ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80008bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c2:	2302      	movs	r3, #2
 80008c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80008c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80008ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80008cc:	2304      	movs	r3, #4
 80008ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80008d0:	2348      	movs	r3, #72	@ 0x48
 80008d2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80008d4:	2302      	movs	r3, #2
 80008d6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80008d8:	2303      	movs	r3, #3
 80008da:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008dc:	f107 0320 	add.w	r3, r7, #32
 80008e0:	4618      	mov	r0, r3
 80008e2:	f004 f8c7 	bl	8004a74 <HAL_RCC_OscConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80008ec:	f000 fb86 	bl	8000ffc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f0:	230f      	movs	r3, #15
 80008f2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f4:	2302      	movs	r3, #2
 80008f6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000900:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000902:	2300      	movs	r3, #0
 8000904:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000906:	f107 030c 	add.w	r3, r7, #12
 800090a:	2102      	movs	r1, #2
 800090c:	4618      	mov	r0, r3
 800090e:	f004 fb29 	bl	8004f64 <HAL_RCC_ClockConfig>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d001      	beq.n	800091c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000918:	f000 fb70 	bl	8000ffc <Error_Handler>
  }
}
 800091c:	bf00      	nop
 800091e:	3750      	adds	r7, #80	@ 0x50
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40023800 	.word	0x40023800
 8000928:	40007000 	.word	0x40007000

0800092c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000930:	4b06      	ldr	r3, [pc, #24]	@ (800094c <MX_CRC_Init+0x20>)
 8000932:	4a07      	ldr	r2, [pc, #28]	@ (8000950 <MX_CRC_Init+0x24>)
 8000934:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	@ (800094c <MX_CRC_Init+0x20>)
 8000938:	f001 f976 	bl	8001c28 <HAL_CRC_Init>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000942:	f000 fb5b 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	2000002c 	.word	0x2000002c
 8000950:	40023000 	.word	0x40023000

08000954 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000958:	4b15      	ldr	r3, [pc, #84]	@ (80009b0 <MX_DMA2D_Init+0x5c>)
 800095a:	4a16      	ldr	r2, [pc, #88]	@ (80009b4 <MX_DMA2D_Init+0x60>)
 800095c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800095e:	4b14      	ldr	r3, [pc, #80]	@ (80009b0 <MX_DMA2D_Init+0x5c>)
 8000960:	2200      	movs	r2, #0
 8000962:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000964:	4b12      	ldr	r3, [pc, #72]	@ (80009b0 <MX_DMA2D_Init+0x5c>)
 8000966:	2200      	movs	r2, #0
 8000968:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800096a:	4b11      	ldr	r3, [pc, #68]	@ (80009b0 <MX_DMA2D_Init+0x5c>)
 800096c:	2200      	movs	r2, #0
 800096e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000970:	4b0f      	ldr	r3, [pc, #60]	@ (80009b0 <MX_DMA2D_Init+0x5c>)
 8000972:	2200      	movs	r2, #0
 8000974:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000976:	4b0e      	ldr	r3, [pc, #56]	@ (80009b0 <MX_DMA2D_Init+0x5c>)
 8000978:	2200      	movs	r2, #0
 800097a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800097c:	4b0c      	ldr	r3, [pc, #48]	@ (80009b0 <MX_DMA2D_Init+0x5c>)
 800097e:	2200      	movs	r2, #0
 8000980:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000982:	4b0b      	ldr	r3, [pc, #44]	@ (80009b0 <MX_DMA2D_Init+0x5c>)
 8000984:	2200      	movs	r2, #0
 8000986:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000988:	4809      	ldr	r0, [pc, #36]	@ (80009b0 <MX_DMA2D_Init+0x5c>)
 800098a:	f001 f969 	bl	8001c60 <HAL_DMA2D_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000994:	f000 fb32 	bl	8000ffc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000998:	2101      	movs	r1, #1
 800099a:	4805      	ldr	r0, [pc, #20]	@ (80009b0 <MX_DMA2D_Init+0x5c>)
 800099c:	f001 faba 	bl	8001f14 <HAL_DMA2D_ConfigLayer>
 80009a0:	4603      	mov	r3, r0
 80009a2:	2b00      	cmp	r3, #0
 80009a4:	d001      	beq.n	80009aa <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80009a6:	f000 fb29 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80009aa:	bf00      	nop
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	20000034 	.word	0x20000034
 80009b4:	4002b000 	.word	0x4002b000

080009b8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80009bc:	4b1b      	ldr	r3, [pc, #108]	@ (8000a2c <MX_I2C3_Init+0x74>)
 80009be:	4a1c      	ldr	r2, [pc, #112]	@ (8000a30 <MX_I2C3_Init+0x78>)
 80009c0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80009c2:	4b1a      	ldr	r3, [pc, #104]	@ (8000a2c <MX_I2C3_Init+0x74>)
 80009c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000a34 <MX_I2C3_Init+0x7c>)
 80009c6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009c8:	4b18      	ldr	r3, [pc, #96]	@ (8000a2c <MX_I2C3_Init+0x74>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80009ce:	4b17      	ldr	r3, [pc, #92]	@ (8000a2c <MX_I2C3_Init+0x74>)
 80009d0:	2200      	movs	r2, #0
 80009d2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009d4:	4b15      	ldr	r3, [pc, #84]	@ (8000a2c <MX_I2C3_Init+0x74>)
 80009d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80009da:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009dc:	4b13      	ldr	r3, [pc, #76]	@ (8000a2c <MX_I2C3_Init+0x74>)
 80009de:	2200      	movs	r2, #0
 80009e0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80009e2:	4b12      	ldr	r3, [pc, #72]	@ (8000a2c <MX_I2C3_Init+0x74>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009e8:	4b10      	ldr	r3, [pc, #64]	@ (8000a2c <MX_I2C3_Init+0x74>)
 80009ea:	2200      	movs	r2, #0
 80009ec:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009ee:	4b0f      	ldr	r3, [pc, #60]	@ (8000a2c <MX_I2C3_Init+0x74>)
 80009f0:	2200      	movs	r2, #0
 80009f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80009f4:	480d      	ldr	r0, [pc, #52]	@ (8000a2c <MX_I2C3_Init+0x74>)
 80009f6:	f003 fb15 	bl	8004024 <HAL_I2C_Init>
 80009fa:	4603      	mov	r3, r0
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d001      	beq.n	8000a04 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000a00:	f000 fafc 	bl	8000ffc <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a04:	2100      	movs	r1, #0
 8000a06:	4809      	ldr	r0, [pc, #36]	@ (8000a2c <MX_I2C3_Init+0x74>)
 8000a08:	f003 fc50 	bl	80042ac <HAL_I2CEx_ConfigAnalogFilter>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d001      	beq.n	8000a16 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000a12:	f000 faf3 	bl	8000ffc <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000a16:	2100      	movs	r1, #0
 8000a18:	4804      	ldr	r0, [pc, #16]	@ (8000a2c <MX_I2C3_Init+0x74>)
 8000a1a:	f003 fc83 	bl	8004324 <HAL_I2CEx_ConfigDigitalFilter>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000a24:	f000 faea 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000a28:	bf00      	nop
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	20000074 	.word	0x20000074
 8000a30:	40005c00 	.word	0x40005c00
 8000a34:	000186a0 	.word	0x000186a0

08000a38 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000a38:	b580      	push	{r7, lr}
 8000a3a:	b08e      	sub	sp, #56	@ 0x38
 8000a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000a3e:	1d3b      	adds	r3, r7, #4
 8000a40:	2234      	movs	r2, #52	@ 0x34
 8000a42:	2100      	movs	r1, #0
 8000a44:	4618      	mov	r0, r3
 8000a46:	f007 fa0b 	bl	8007e60 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000a4a:	4b39      	ldr	r3, [pc, #228]	@ (8000b30 <MX_LTDC_Init+0xf8>)
 8000a4c:	4a39      	ldr	r2, [pc, #228]	@ (8000b34 <MX_LTDC_Init+0xfc>)
 8000a4e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000a50:	4b37      	ldr	r3, [pc, #220]	@ (8000b30 <MX_LTDC_Init+0xf8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000a56:	4b36      	ldr	r3, [pc, #216]	@ (8000b30 <MX_LTDC_Init+0xf8>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000a5c:	4b34      	ldr	r3, [pc, #208]	@ (8000b30 <MX_LTDC_Init+0xf8>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000a62:	4b33      	ldr	r3, [pc, #204]	@ (8000b30 <MX_LTDC_Init+0xf8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000a68:	4b31      	ldr	r3, [pc, #196]	@ (8000b30 <MX_LTDC_Init+0xf8>)
 8000a6a:	2209      	movs	r2, #9
 8000a6c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000a6e:	4b30      	ldr	r3, [pc, #192]	@ (8000b30 <MX_LTDC_Init+0xf8>)
 8000a70:	2201      	movs	r2, #1
 8000a72:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000a74:	4b2e      	ldr	r3, [pc, #184]	@ (8000b30 <MX_LTDC_Init+0xf8>)
 8000a76:	221d      	movs	r2, #29
 8000a78:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000a7a:	4b2d      	ldr	r3, [pc, #180]	@ (8000b30 <MX_LTDC_Init+0xf8>)
 8000a7c:	2203      	movs	r2, #3
 8000a7e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000a80:	4b2b      	ldr	r3, [pc, #172]	@ (8000b30 <MX_LTDC_Init+0xf8>)
 8000a82:	f240 120d 	movw	r2, #269	@ 0x10d
 8000a86:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000a88:	4b29      	ldr	r3, [pc, #164]	@ (8000b30 <MX_LTDC_Init+0xf8>)
 8000a8a:	f240 1243 	movw	r2, #323	@ 0x143
 8000a8e:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 8000a90:	4b27      	ldr	r3, [pc, #156]	@ (8000b30 <MX_LTDC_Init+0xf8>)
 8000a92:	f240 1217 	movw	r2, #279	@ 0x117
 8000a96:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000a98:	4b25      	ldr	r3, [pc, #148]	@ (8000b30 <MX_LTDC_Init+0xf8>)
 8000a9a:	f240 1247 	movw	r2, #327	@ 0x147
 8000a9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000aa0:	4b23      	ldr	r3, [pc, #140]	@ (8000b30 <MX_LTDC_Init+0xf8>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000aa8:	4b21      	ldr	r3, [pc, #132]	@ (8000b30 <MX_LTDC_Init+0xf8>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000ab0:	4b1f      	ldr	r3, [pc, #124]	@ (8000b30 <MX_LTDC_Init+0xf8>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000ab8:	481d      	ldr	r0, [pc, #116]	@ (8000b30 <MX_LTDC_Init+0xf8>)
 8000aba:	f003 fc73 	bl	80043a4 <HAL_LTDC_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000ac4:	f000 fa9a 	bl	8000ffc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000ac8:	2300      	movs	r3, #0
 8000aca:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000acc:	23f0      	movs	r3, #240	@ 0xf0
 8000ace:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000ad4:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000ad8:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000ada:	2302      	movs	r3, #2
 8000adc:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000ade:	23ff      	movs	r3, #255	@ 0xff
 8000ae0:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000ae6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000aea:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000aec:	2307      	movs	r3, #7
 8000aee:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000af0:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000af4:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 8000af6:	23f0      	movs	r3, #240	@ 0xf0
 8000af8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 8000afa:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000afe:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000b00:	2300      	movs	r3, #0
 8000b02:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000b06:	2300      	movs	r3, #0
 8000b08:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	2200      	movs	r2, #0
 8000b16:	4619      	mov	r1, r3
 8000b18:	4805      	ldr	r0, [pc, #20]	@ (8000b30 <MX_LTDC_Init+0xf8>)
 8000b1a:	f003 fdd5 	bl	80046c8 <HAL_LTDC_ConfigLayer>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000b24:	f000 fa6a 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	3738      	adds	r7, #56	@ 0x38
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bd80      	pop	{r7, pc}
 8000b30:	200000c8 	.word	0x200000c8
 8000b34:	40016800 	.word	0x40016800

08000b38 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000b3c:	4b17      	ldr	r3, [pc, #92]	@ (8000b9c <MX_SPI5_Init+0x64>)
 8000b3e:	4a18      	ldr	r2, [pc, #96]	@ (8000ba0 <MX_SPI5_Init+0x68>)
 8000b40:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000b42:	4b16      	ldr	r3, [pc, #88]	@ (8000b9c <MX_SPI5_Init+0x64>)
 8000b44:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000b48:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000b4a:	4b14      	ldr	r3, [pc, #80]	@ (8000b9c <MX_SPI5_Init+0x64>)
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b50:	4b12      	ldr	r3, [pc, #72]	@ (8000b9c <MX_SPI5_Init+0x64>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b56:	4b11      	ldr	r3, [pc, #68]	@ (8000b9c <MX_SPI5_Init+0x64>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8000b9c <MX_SPI5_Init+0x64>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	@ (8000b9c <MX_SPI5_Init+0x64>)
 8000b64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b68:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b9c <MX_SPI5_Init+0x64>)
 8000b6c:	2218      	movs	r2, #24
 8000b6e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b70:	4b0a      	ldr	r3, [pc, #40]	@ (8000b9c <MX_SPI5_Init+0x64>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b76:	4b09      	ldr	r3, [pc, #36]	@ (8000b9c <MX_SPI5_Init+0x64>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b7c:	4b07      	ldr	r3, [pc, #28]	@ (8000b9c <MX_SPI5_Init+0x64>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000b82:	4b06      	ldr	r3, [pc, #24]	@ (8000b9c <MX_SPI5_Init+0x64>)
 8000b84:	220a      	movs	r2, #10
 8000b86:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000b88:	4804      	ldr	r0, [pc, #16]	@ (8000b9c <MX_SPI5_Init+0x64>)
 8000b8a:	f004 fe31 	bl	80057f0 <HAL_SPI_Init>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000b94:	f000 fa32 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000b98:	bf00      	nop
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	20000170 	.word	0x20000170
 8000ba0:	40015000 	.word	0x40015000

08000ba4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000baa:	f107 0308 	add.w	r3, r7, #8
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bb8:	463b      	mov	r3, r7
 8000bba:	2200      	movs	r2, #0
 8000bbc:	601a      	str	r2, [r3, #0]
 8000bbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000bc0:	4b1e      	ldr	r3, [pc, #120]	@ (8000c3c <MX_TIM1_Init+0x98>)
 8000bc2:	4a1f      	ldr	r2, [pc, #124]	@ (8000c40 <MX_TIM1_Init+0x9c>)
 8000bc4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000bc6:	4b1d      	ldr	r3, [pc, #116]	@ (8000c3c <MX_TIM1_Init+0x98>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8000c3c <MX_TIM1_Init+0x98>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000bd2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c3c <MX_TIM1_Init+0x98>)
 8000bd4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bd8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bda:	4b18      	ldr	r3, [pc, #96]	@ (8000c3c <MX_TIM1_Init+0x98>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000be0:	4b16      	ldr	r3, [pc, #88]	@ (8000c3c <MX_TIM1_Init+0x98>)
 8000be2:	2200      	movs	r2, #0
 8000be4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000be6:	4b15      	ldr	r3, [pc, #84]	@ (8000c3c <MX_TIM1_Init+0x98>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bec:	4813      	ldr	r0, [pc, #76]	@ (8000c3c <MX_TIM1_Init+0x98>)
 8000bee:	f005 fbd1 	bl	8006394 <HAL_TIM_Base_Init>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d001      	beq.n	8000bfc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000bf8:	f000 fa00 	bl	8000ffc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bfc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000c02:	f107 0308 	add.w	r3, r7, #8
 8000c06:	4619      	mov	r1, r3
 8000c08:	480c      	ldr	r0, [pc, #48]	@ (8000c3c <MX_TIM1_Init+0x98>)
 8000c0a:	f005 fd73 	bl	80066f4 <HAL_TIM_ConfigClockSource>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000c14:	f000 f9f2 	bl	8000ffc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000c20:	463b      	mov	r3, r7
 8000c22:	4619      	mov	r1, r3
 8000c24:	4805      	ldr	r0, [pc, #20]	@ (8000c3c <MX_TIM1_Init+0x98>)
 8000c26:	f005 ff9b 	bl	8006b60 <HAL_TIMEx_MasterConfigSynchronization>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000c30:	f000 f9e4 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c34:	bf00      	nop
 8000c36:	3718      	adds	r7, #24
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	200001c8 	.word	0x200001c8
 8000c40:	40010000 	.word	0x40010000

08000c44 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c48:	4b11      	ldr	r3, [pc, #68]	@ (8000c90 <MX_USART1_UART_Init+0x4c>)
 8000c4a:	4a12      	ldr	r2, [pc, #72]	@ (8000c94 <MX_USART1_UART_Init+0x50>)
 8000c4c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c4e:	4b10      	ldr	r3, [pc, #64]	@ (8000c90 <MX_USART1_UART_Init+0x4c>)
 8000c50:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000c54:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c56:	4b0e      	ldr	r3, [pc, #56]	@ (8000c90 <MX_USART1_UART_Init+0x4c>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c5c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c90 <MX_USART1_UART_Init+0x4c>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c62:	4b0b      	ldr	r3, [pc, #44]	@ (8000c90 <MX_USART1_UART_Init+0x4c>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c68:	4b09      	ldr	r3, [pc, #36]	@ (8000c90 <MX_USART1_UART_Init+0x4c>)
 8000c6a:	220c      	movs	r2, #12
 8000c6c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c6e:	4b08      	ldr	r3, [pc, #32]	@ (8000c90 <MX_USART1_UART_Init+0x4c>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c74:	4b06      	ldr	r3, [pc, #24]	@ (8000c90 <MX_USART1_UART_Init+0x4c>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c7a:	4805      	ldr	r0, [pc, #20]	@ (8000c90 <MX_USART1_UART_Init+0x4c>)
 8000c7c:	f006 f800 	bl	8006c80 <HAL_UART_Init>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c86:	f000 f9b9 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000210 	.word	0x20000210
 8000c94:	40011000 	.word	0x40011000

08000c98 <MX_USB_OTG_HS_HCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_HCD_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000c9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ce8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000c9e:	4a13      	ldr	r2, [pc, #76]	@ (8000cec <MX_USB_OTG_HS_HCD_Init+0x54>)
 8000ca0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8000ca2:	4b11      	ldr	r3, [pc, #68]	@ (8000ce8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000ca4:	220c      	movs	r2, #12
 8000ca6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8000ca8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ce8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000caa:	2201      	movs	r2, #1
 8000cac:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000cae:	4b0e      	ldr	r3, [pc, #56]	@ (8000ce8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8000cb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ce8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000cb6:	2202      	movs	r2, #2
 8000cb8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000cba:	4b0b      	ldr	r3, [pc, #44]	@ (8000ce8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000cc0:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000cc6:	4b08      	ldr	r3, [pc, #32]	@ (8000ce8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000ccc:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8000cd2:	4805      	ldr	r0, [pc, #20]	@ (8000ce8 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000cd4:	f001 fb75 	bl	80023c2 <HAL_HCD_Init>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d001      	beq.n	8000ce2 <MX_USB_OTG_HS_HCD_Init+0x4a>
  {
    Error_Handler();
 8000cde:	f000 f98d 	bl	8000ffc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000ce2:	bf00      	nop
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20000258 	.word	0x20000258
 8000cec:	40040000 	.word	0x40040000

08000cf0 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b088      	sub	sp, #32
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]
 8000d04:	615a      	str	r2, [r3, #20]
 8000d06:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000d08:	4b1f      	ldr	r3, [pc, #124]	@ (8000d88 <MX_FMC_Init+0x98>)
 8000d0a:	4a20      	ldr	r2, [pc, #128]	@ (8000d8c <MX_FMC_Init+0x9c>)
 8000d0c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000d88 <MX_FMC_Init+0x98>)
 8000d10:	2201      	movs	r2, #1
 8000d12:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000d14:	4b1c      	ldr	r3, [pc, #112]	@ (8000d88 <MX_FMC_Init+0x98>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000d1a:	4b1b      	ldr	r3, [pc, #108]	@ (8000d88 <MX_FMC_Init+0x98>)
 8000d1c:	2204      	movs	r2, #4
 8000d1e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000d20:	4b19      	ldr	r3, [pc, #100]	@ (8000d88 <MX_FMC_Init+0x98>)
 8000d22:	2210      	movs	r2, #16
 8000d24:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000d26:	4b18      	ldr	r3, [pc, #96]	@ (8000d88 <MX_FMC_Init+0x98>)
 8000d28:	2240      	movs	r2, #64	@ 0x40
 8000d2a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000d2c:	4b16      	ldr	r3, [pc, #88]	@ (8000d88 <MX_FMC_Init+0x98>)
 8000d2e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000d32:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000d34:	4b14      	ldr	r3, [pc, #80]	@ (8000d88 <MX_FMC_Init+0x98>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000d3a:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <MX_FMC_Init+0x98>)
 8000d3c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000d40:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000d42:	4b11      	ldr	r3, [pc, #68]	@ (8000d88 <MX_FMC_Init+0x98>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000d48:	4b0f      	ldr	r3, [pc, #60]	@ (8000d88 <MX_FMC_Init+0x98>)
 8000d4a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d4e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000d50:	2302      	movs	r3, #2
 8000d52:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000d54:	2307      	movs	r3, #7
 8000d56:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000d58:	2304      	movs	r3, #4
 8000d5a:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000d5c:	2307      	movs	r3, #7
 8000d5e:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000d60:	2303      	movs	r3, #3
 8000d62:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000d64:	2302      	movs	r3, #2
 8000d66:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000d68:	2302      	movs	r3, #2
 8000d6a:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	4619      	mov	r1, r3
 8000d70:	4805      	ldr	r0, [pc, #20]	@ (8000d88 <MX_FMC_Init+0x98>)
 8000d72:	f004 fd09 	bl	8005788 <HAL_SDRAM_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000d7c:	f000 f93e 	bl	8000ffc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000d80:	bf00      	nop
 8000d82:	3720      	adds	r7, #32
 8000d84:	46bd      	mov	sp, r7
 8000d86:	bd80      	pop	{r7, pc}
 8000d88:	20000638 	.word	0x20000638
 8000d8c:	a0000140 	.word	0xa0000140

08000d90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b08e      	sub	sp, #56	@ 0x38
 8000d94:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	601a      	str	r2, [r3, #0]
 8000d9e:	605a      	str	r2, [r3, #4]
 8000da0:	609a      	str	r2, [r3, #8]
 8000da2:	60da      	str	r2, [r3, #12]
 8000da4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	623b      	str	r3, [r7, #32]
 8000daa:	4b84      	ldr	r3, [pc, #528]	@ (8000fbc <MX_GPIO_Init+0x22c>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	4a83      	ldr	r2, [pc, #524]	@ (8000fbc <MX_GPIO_Init+0x22c>)
 8000db0:	f043 0304 	orr.w	r3, r3, #4
 8000db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db6:	4b81      	ldr	r3, [pc, #516]	@ (8000fbc <MX_GPIO_Init+0x22c>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	f003 0304 	and.w	r3, r3, #4
 8000dbe:	623b      	str	r3, [r7, #32]
 8000dc0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	61fb      	str	r3, [r7, #28]
 8000dc6:	4b7d      	ldr	r3, [pc, #500]	@ (8000fbc <MX_GPIO_Init+0x22c>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	4a7c      	ldr	r2, [pc, #496]	@ (8000fbc <MX_GPIO_Init+0x22c>)
 8000dcc:	f043 0320 	orr.w	r3, r3, #32
 8000dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd2:	4b7a      	ldr	r3, [pc, #488]	@ (8000fbc <MX_GPIO_Init+0x22c>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	f003 0320 	and.w	r3, r3, #32
 8000dda:	61fb      	str	r3, [r7, #28]
 8000ddc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	61bb      	str	r3, [r7, #24]
 8000de2:	4b76      	ldr	r3, [pc, #472]	@ (8000fbc <MX_GPIO_Init+0x22c>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	4a75      	ldr	r2, [pc, #468]	@ (8000fbc <MX_GPIO_Init+0x22c>)
 8000de8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dee:	4b73      	ldr	r3, [pc, #460]	@ (8000fbc <MX_GPIO_Init+0x22c>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000df6:	61bb      	str	r3, [r7, #24]
 8000df8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	617b      	str	r3, [r7, #20]
 8000dfe:	4b6f      	ldr	r3, [pc, #444]	@ (8000fbc <MX_GPIO_Init+0x22c>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e02:	4a6e      	ldr	r2, [pc, #440]	@ (8000fbc <MX_GPIO_Init+0x22c>)
 8000e04:	f043 0301 	orr.w	r3, r3, #1
 8000e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0a:	4b6c      	ldr	r3, [pc, #432]	@ (8000fbc <MX_GPIO_Init+0x22c>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0e:	f003 0301 	and.w	r3, r3, #1
 8000e12:	617b      	str	r3, [r7, #20]
 8000e14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	613b      	str	r3, [r7, #16]
 8000e1a:	4b68      	ldr	r3, [pc, #416]	@ (8000fbc <MX_GPIO_Init+0x22c>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e1e:	4a67      	ldr	r2, [pc, #412]	@ (8000fbc <MX_GPIO_Init+0x22c>)
 8000e20:	f043 0302 	orr.w	r3, r3, #2
 8000e24:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e26:	4b65      	ldr	r3, [pc, #404]	@ (8000fbc <MX_GPIO_Init+0x22c>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e2a:	f003 0302 	and.w	r3, r3, #2
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e32:	2300      	movs	r3, #0
 8000e34:	60fb      	str	r3, [r7, #12]
 8000e36:	4b61      	ldr	r3, [pc, #388]	@ (8000fbc <MX_GPIO_Init+0x22c>)
 8000e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e3a:	4a60      	ldr	r2, [pc, #384]	@ (8000fbc <MX_GPIO_Init+0x22c>)
 8000e3c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000e40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e42:	4b5e      	ldr	r3, [pc, #376]	@ (8000fbc <MX_GPIO_Init+0x22c>)
 8000e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000e4a:	60fb      	str	r3, [r7, #12]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000e4e:	2300      	movs	r3, #0
 8000e50:	60bb      	str	r3, [r7, #8]
 8000e52:	4b5a      	ldr	r3, [pc, #360]	@ (8000fbc <MX_GPIO_Init+0x22c>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	4a59      	ldr	r2, [pc, #356]	@ (8000fbc <MX_GPIO_Init+0x22c>)
 8000e58:	f043 0310 	orr.w	r3, r3, #16
 8000e5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e5e:	4b57      	ldr	r3, [pc, #348]	@ (8000fbc <MX_GPIO_Init+0x22c>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	f003 0310 	and.w	r3, r3, #16
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	607b      	str	r3, [r7, #4]
 8000e6e:	4b53      	ldr	r3, [pc, #332]	@ (8000fbc <MX_GPIO_Init+0x22c>)
 8000e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e72:	4a52      	ldr	r2, [pc, #328]	@ (8000fbc <MX_GPIO_Init+0x22c>)
 8000e74:	f043 0308 	orr.w	r3, r3, #8
 8000e78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e7a:	4b50      	ldr	r3, [pc, #320]	@ (8000fbc <MX_GPIO_Init+0x22c>)
 8000e7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e7e:	f003 0308 	and.w	r3, r3, #8
 8000e82:	607b      	str	r3, [r7, #4]
 8000e84:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e86:	2200      	movs	r2, #0
 8000e88:	2140      	movs	r1, #64	@ 0x40
 8000e8a:	484d      	ldr	r0, [pc, #308]	@ (8000fc0 <MX_GPIO_Init+0x230>)
 8000e8c:	f001 fa80 	bl	8002390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|GPIO_PIN_3|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000e90:	2200      	movs	r2, #0
 8000e92:	211e      	movs	r1, #30
 8000e94:	484b      	ldr	r0, [pc, #300]	@ (8000fc4 <MX_GPIO_Init+0x234>)
 8000e96:	f001 fa7b 	bl	8002390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	2180      	movs	r1, #128	@ 0x80
 8000e9e:	484a      	ldr	r0, [pc, #296]	@ (8000fc8 <MX_GPIO_Init+0x238>)
 8000ea0:	f001 fa76 	bl	8002390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000eaa:	4848      	ldr	r0, [pc, #288]	@ (8000fcc <MX_GPIO_Init+0x23c>)
 8000eac:	f001 fa70 	bl	8002390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000eb6:	4846      	ldr	r0, [pc, #280]	@ (8000fd0 <MX_GPIO_Init+0x240>)
 8000eb8:	f001 fa6a 	bl	8002390 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ebc:	2340      	movs	r3, #64	@ 0x40
 8000ebe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ecc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	483b      	ldr	r0, [pc, #236]	@ (8000fc0 <MX_GPIO_Init+0x230>)
 8000ed4:	f001 f8b0 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin PC3 OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|GPIO_PIN_3|OTG_FS_PSO_Pin;
 8000ed8:	231e      	movs	r3, #30
 8000eda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000edc:	2301      	movs	r3, #1
 8000ede:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ee8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eec:	4619      	mov	r1, r3
 8000eee:	4835      	ldr	r0, [pc, #212]	@ (8000fc4 <MX_GPIO_Init+0x234>)
 8000ef0:	f001 f8a2 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000ef4:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000ef8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000efa:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000efe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f00:	2300      	movs	r3, #0
 8000f02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f08:	4619      	mov	r1, r3
 8000f0a:	482f      	ldr	r0, [pc, #188]	@ (8000fc8 <MX_GPIO_Init+0x238>)
 8000f0c:	f001 f894 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000f10:	2380      	movs	r3, #128	@ 0x80
 8000f12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f14:	2301      	movs	r3, #1
 8000f16:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000f20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f24:	4619      	mov	r1, r3
 8000f26:	4828      	ldr	r0, [pc, #160]	@ (8000fc8 <MX_GPIO_Init+0x238>)
 8000f28:	f001 f886 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000f2c:	2320      	movs	r3, #32
 8000f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f30:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000f34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f36:	2300      	movs	r3, #0
 8000f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000f3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f3e:	4619      	mov	r1, r3
 8000f40:	4820      	ldr	r0, [pc, #128]	@ (8000fc4 <MX_GPIO_Init+0x234>)
 8000f42:	f001 f879 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000f46:	2304      	movs	r3, #4
 8000f48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000f52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f56:	4619      	mov	r1, r3
 8000f58:	481e      	ldr	r0, [pc, #120]	@ (8000fd4 <MX_GPIO_Init+0x244>)
 8000f5a:	f001 f86d 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000f5e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f64:	2300      	movs	r3, #0
 8000f66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000f6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f70:	4619      	mov	r1, r3
 8000f72:	4816      	ldr	r0, [pc, #88]	@ (8000fcc <MX_GPIO_Init+0x23c>)
 8000f74:	f001 f860 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000f78:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000f7c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7e:	2301      	movs	r3, #1
 8000f80:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f86:	2300      	movs	r3, #0
 8000f88:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f8e:	4619      	mov	r1, r3
 8000f90:	480e      	ldr	r0, [pc, #56]	@ (8000fcc <MX_GPIO_Init+0x23c>)
 8000f92:	f001 f851 	bl	8002038 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000f96:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000fa8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fac:	4619      	mov	r1, r3
 8000fae:	4808      	ldr	r0, [pc, #32]	@ (8000fd0 <MX_GPIO_Init+0x240>)
 8000fb0:	f001 f842 	bl	8002038 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000fb4:	bf00      	nop
 8000fb6:	3738      	adds	r7, #56	@ 0x38
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	40023800 	.word	0x40023800
 8000fc0:	40021400 	.word	0x40021400
 8000fc4:	40020800 	.word	0x40020800
 8000fc8:	40020000 	.word	0x40020000
 8000fcc:	40020c00 	.word	0x40020c00
 8000fd0:	40021800 	.word	0x40021800
 8000fd4:	40020400 	.word	0x40020400

08000fd8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a04      	ldr	r2, [pc, #16]	@ (8000ff8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000fe6:	4293      	cmp	r3, r2
 8000fe8:	d101      	bne.n	8000fee <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000fea:	f000 fcf7 	bl	80019dc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000fee:	bf00      	nop
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40001000 	.word	0x40001000

08000ffc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001000:	b672      	cpsid	i
}
 8001002:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001004:	bf00      	nop
 8001006:	e7fd      	b.n	8001004 <Error_Handler+0x8>

08001008 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	607b      	str	r3, [r7, #4]
 8001012:	4b10      	ldr	r3, [pc, #64]	@ (8001054 <HAL_MspInit+0x4c>)
 8001014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001016:	4a0f      	ldr	r2, [pc, #60]	@ (8001054 <HAL_MspInit+0x4c>)
 8001018:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800101c:	6453      	str	r3, [r2, #68]	@ 0x44
 800101e:	4b0d      	ldr	r3, [pc, #52]	@ (8001054 <HAL_MspInit+0x4c>)
 8001020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001022:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001026:	607b      	str	r3, [r7, #4]
 8001028:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	603b      	str	r3, [r7, #0]
 800102e:	4b09      	ldr	r3, [pc, #36]	@ (8001054 <HAL_MspInit+0x4c>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001032:	4a08      	ldr	r2, [pc, #32]	@ (8001054 <HAL_MspInit+0x4c>)
 8001034:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001038:	6413      	str	r3, [r2, #64]	@ 0x40
 800103a:	4b06      	ldr	r3, [pc, #24]	@ (8001054 <HAL_MspInit+0x4c>)
 800103c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800103e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001042:	603b      	str	r3, [r7, #0]
 8001044:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001046:	bf00      	nop
 8001048:	370c      	adds	r7, #12
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	40023800 	.word	0x40023800

08001058 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001058:	b480      	push	{r7}
 800105a:	b085      	sub	sp, #20
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a0b      	ldr	r2, [pc, #44]	@ (8001094 <HAL_CRC_MspInit+0x3c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d10d      	bne.n	8001086 <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800106a:	2300      	movs	r3, #0
 800106c:	60fb      	str	r3, [r7, #12]
 800106e:	4b0a      	ldr	r3, [pc, #40]	@ (8001098 <HAL_CRC_MspInit+0x40>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	4a09      	ldr	r2, [pc, #36]	@ (8001098 <HAL_CRC_MspInit+0x40>)
 8001074:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001078:	6313      	str	r3, [r2, #48]	@ 0x30
 800107a:	4b07      	ldr	r3, [pc, #28]	@ (8001098 <HAL_CRC_MspInit+0x40>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8001086:	bf00      	nop
 8001088:	3714      	adds	r7, #20
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40023000 	.word	0x40023000
 8001098:	40023800 	.word	0x40023800

0800109c <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a0e      	ldr	r2, [pc, #56]	@ (80010e4 <HAL_DMA2D_MspInit+0x48>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d115      	bne.n	80010da <HAL_DMA2D_MspInit+0x3e>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	4b0d      	ldr	r3, [pc, #52]	@ (80010e8 <HAL_DMA2D_MspInit+0x4c>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b6:	4a0c      	ldr	r2, [pc, #48]	@ (80010e8 <HAL_DMA2D_MspInit+0x4c>)
 80010b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80010bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010be:	4b0a      	ldr	r3, [pc, #40]	@ (80010e8 <HAL_DMA2D_MspInit+0x4c>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 80010ca:	2200      	movs	r2, #0
 80010cc:	2105      	movs	r1, #5
 80010ce:	205a      	movs	r0, #90	@ 0x5a
 80010d0:	f000 fd80 	bl	8001bd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 80010d4:	205a      	movs	r0, #90	@ 0x5a
 80010d6:	f000 fd99 	bl	8001c0c <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	4002b000 	.word	0x4002b000
 80010e8:	40023800 	.word	0x40023800

080010ec <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b08a      	sub	sp, #40	@ 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f4:	f107 0314 	add.w	r3, r7, #20
 80010f8:	2200      	movs	r2, #0
 80010fa:	601a      	str	r2, [r3, #0]
 80010fc:	605a      	str	r2, [r3, #4]
 80010fe:	609a      	str	r2, [r3, #8]
 8001100:	60da      	str	r2, [r3, #12]
 8001102:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a29      	ldr	r2, [pc, #164]	@ (80011b0 <HAL_I2C_MspInit+0xc4>)
 800110a:	4293      	cmp	r3, r2
 800110c:	d14b      	bne.n	80011a6 <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
 8001112:	4b28      	ldr	r3, [pc, #160]	@ (80011b4 <HAL_I2C_MspInit+0xc8>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001116:	4a27      	ldr	r2, [pc, #156]	@ (80011b4 <HAL_I2C_MspInit+0xc8>)
 8001118:	f043 0304 	orr.w	r3, r3, #4
 800111c:	6313      	str	r3, [r2, #48]	@ 0x30
 800111e:	4b25      	ldr	r3, [pc, #148]	@ (80011b4 <HAL_I2C_MspInit+0xc8>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	f003 0304 	and.w	r3, r3, #4
 8001126:	613b      	str	r3, [r7, #16]
 8001128:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	60fb      	str	r3, [r7, #12]
 800112e:	4b21      	ldr	r3, [pc, #132]	@ (80011b4 <HAL_I2C_MspInit+0xc8>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001132:	4a20      	ldr	r2, [pc, #128]	@ (80011b4 <HAL_I2C_MspInit+0xc8>)
 8001134:	f043 0301 	orr.w	r3, r3, #1
 8001138:	6313      	str	r3, [r2, #48]	@ 0x30
 800113a:	4b1e      	ldr	r3, [pc, #120]	@ (80011b4 <HAL_I2C_MspInit+0xc8>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001146:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800114a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800114c:	2312      	movs	r3, #18
 800114e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001150:	2301      	movs	r3, #1
 8001152:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001154:	2300      	movs	r3, #0
 8001156:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001158:	2304      	movs	r3, #4
 800115a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	4619      	mov	r1, r3
 8001162:	4815      	ldr	r0, [pc, #84]	@ (80011b8 <HAL_I2C_MspInit+0xcc>)
 8001164:	f000 ff68 	bl	8002038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001168:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800116c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800116e:	2312      	movs	r3, #18
 8001170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001172:	2301      	movs	r3, #1
 8001174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001176:	2300      	movs	r3, #0
 8001178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800117a:	2304      	movs	r3, #4
 800117c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800117e:	f107 0314 	add.w	r3, r7, #20
 8001182:	4619      	mov	r1, r3
 8001184:	480d      	ldr	r0, [pc, #52]	@ (80011bc <HAL_I2C_MspInit+0xd0>)
 8001186:	f000 ff57 	bl	8002038 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
 800118e:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <HAL_I2C_MspInit+0xc8>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001192:	4a08      	ldr	r2, [pc, #32]	@ (80011b4 <HAL_I2C_MspInit+0xc8>)
 8001194:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001198:	6413      	str	r3, [r2, #64]	@ 0x40
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <HAL_I2C_MspInit+0xc8>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 80011a6:	bf00      	nop
 80011a8:	3728      	adds	r7, #40	@ 0x28
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40005c00 	.word	0x40005c00
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40020800 	.word	0x40020800
 80011bc:	40020000 	.word	0x40020000

080011c0 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b09a      	sub	sp, #104	@ 0x68
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
 80011d0:	605a      	str	r2, [r3, #4]
 80011d2:	609a      	str	r2, [r3, #8]
 80011d4:	60da      	str	r2, [r3, #12]
 80011d6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80011d8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011dc:	2230      	movs	r2, #48	@ 0x30
 80011de:	2100      	movs	r1, #0
 80011e0:	4618      	mov	r0, r3
 80011e2:	f006 fe3d 	bl	8007e60 <memset>
  if(hltdc->Instance==LTDC)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	4a85      	ldr	r2, [pc, #532]	@ (8001400 <HAL_LTDC_MspInit+0x240>)
 80011ec:	4293      	cmp	r3, r2
 80011ee:	f040 8102 	bne.w	80013f6 <HAL_LTDC_MspInit+0x236>

    /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011f2:	2308      	movs	r3, #8
 80011f4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80011f6:	2332      	movs	r3, #50	@ 0x32
 80011f8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80011fa:	2302      	movs	r3, #2
 80011fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80011fe:	2300      	movs	r3, #0
 8001200:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001202:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001206:	4618      	mov	r0, r3
 8001208:	f004 f8fe 	bl	8005408 <HAL_RCCEx_PeriphCLKConfig>
 800120c:	4603      	mov	r3, r0
 800120e:	2b00      	cmp	r3, #0
 8001210:	d001      	beq.n	8001216 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001212:	f7ff fef3 	bl	8000ffc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	623b      	str	r3, [r7, #32]
 800121a:	4b7a      	ldr	r3, [pc, #488]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121e:	4a79      	ldr	r2, [pc, #484]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 8001220:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001224:	6453      	str	r3, [r2, #68]	@ 0x44
 8001226:	4b77      	ldr	r3, [pc, #476]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800122e:	623b      	str	r3, [r7, #32]
 8001230:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	61fb      	str	r3, [r7, #28]
 8001236:	4b73      	ldr	r3, [pc, #460]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	4a72      	ldr	r2, [pc, #456]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 800123c:	f043 0320 	orr.w	r3, r3, #32
 8001240:	6313      	str	r3, [r2, #48]	@ 0x30
 8001242:	4b70      	ldr	r3, [pc, #448]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	f003 0320 	and.w	r3, r3, #32
 800124a:	61fb      	str	r3, [r7, #28]
 800124c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	61bb      	str	r3, [r7, #24]
 8001252:	4b6c      	ldr	r3, [pc, #432]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	4a6b      	ldr	r2, [pc, #428]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 8001258:	f043 0301 	orr.w	r3, r3, #1
 800125c:	6313      	str	r3, [r2, #48]	@ 0x30
 800125e:	4b69      	ldr	r3, [pc, #420]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	61bb      	str	r3, [r7, #24]
 8001268:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800126a:	2300      	movs	r3, #0
 800126c:	617b      	str	r3, [r7, #20]
 800126e:	4b65      	ldr	r3, [pc, #404]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	4a64      	ldr	r2, [pc, #400]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 8001274:	f043 0302 	orr.w	r3, r3, #2
 8001278:	6313      	str	r3, [r2, #48]	@ 0x30
 800127a:	4b62      	ldr	r3, [pc, #392]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	f003 0302 	and.w	r3, r3, #2
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001286:	2300      	movs	r3, #0
 8001288:	613b      	str	r3, [r7, #16]
 800128a:	4b5e      	ldr	r3, [pc, #376]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	4a5d      	ldr	r2, [pc, #372]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 8001290:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001294:	6313      	str	r3, [r2, #48]	@ 0x30
 8001296:	4b5b      	ldr	r3, [pc, #364]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a2:	2300      	movs	r3, #0
 80012a4:	60fb      	str	r3, [r7, #12]
 80012a6:	4b57      	ldr	r3, [pc, #348]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	4a56      	ldr	r2, [pc, #344]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 80012ac:	f043 0304 	orr.w	r3, r3, #4
 80012b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012b2:	4b54      	ldr	r3, [pc, #336]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	f003 0304 	and.w	r3, r3, #4
 80012ba:	60fb      	str	r3, [r7, #12]
 80012bc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
 80012c2:	4b50      	ldr	r3, [pc, #320]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	4a4f      	ldr	r2, [pc, #316]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 80012c8:	f043 0308 	orr.w	r3, r3, #8
 80012cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ce:	4b4d      	ldr	r3, [pc, #308]	@ (8001404 <HAL_LTDC_MspInit+0x244>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	f003 0308 	and.w	r3, r3, #8
 80012d6:	60bb      	str	r3, [r7, #8]
 80012d8:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 80012da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012de:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	2302      	movs	r3, #2
 80012e2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e4:	2300      	movs	r3, #0
 80012e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e8:	2300      	movs	r3, #0
 80012ea:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012ec:	230e      	movs	r3, #14
 80012ee:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80012f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012f4:	4619      	mov	r1, r3
 80012f6:	4844      	ldr	r0, [pc, #272]	@ (8001408 <HAL_LTDC_MspInit+0x248>)
 80012f8:	f000 fe9e 	bl	8002038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80012fc:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001300:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001302:	2302      	movs	r3, #2
 8001304:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001306:	2300      	movs	r3, #0
 8001308:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800130a:	2300      	movs	r3, #0
 800130c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800130e:	230e      	movs	r3, #14
 8001310:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001312:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001316:	4619      	mov	r1, r3
 8001318:	483c      	ldr	r0, [pc, #240]	@ (800140c <HAL_LTDC_MspInit+0x24c>)
 800131a:	f000 fe8d 	bl	8002038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800131e:	2303      	movs	r3, #3
 8001320:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001322:	2302      	movs	r3, #2
 8001324:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001326:	2300      	movs	r3, #0
 8001328:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800132a:	2300      	movs	r3, #0
 800132c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800132e:	2309      	movs	r3, #9
 8001330:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001332:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001336:	4619      	mov	r1, r3
 8001338:	4835      	ldr	r0, [pc, #212]	@ (8001410 <HAL_LTDC_MspInit+0x250>)
 800133a:	f000 fe7d 	bl	8002038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800133e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001342:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001344:	2302      	movs	r3, #2
 8001346:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001348:	2300      	movs	r3, #0
 800134a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800134c:	2300      	movs	r3, #0
 800134e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001350:	230e      	movs	r3, #14
 8001352:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001354:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001358:	4619      	mov	r1, r3
 800135a:	482d      	ldr	r0, [pc, #180]	@ (8001410 <HAL_LTDC_MspInit+0x250>)
 800135c:	f000 fe6c 	bl	8002038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001360:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001364:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001366:	2302      	movs	r3, #2
 8001368:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800136a:	2300      	movs	r3, #0
 800136c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800136e:	2300      	movs	r3, #0
 8001370:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001372:	230e      	movs	r3, #14
 8001374:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001376:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800137a:	4619      	mov	r1, r3
 800137c:	4825      	ldr	r0, [pc, #148]	@ (8001414 <HAL_LTDC_MspInit+0x254>)
 800137e:	f000 fe5b 	bl	8002038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001382:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001386:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001388:	2302      	movs	r3, #2
 800138a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138c:	2300      	movs	r3, #0
 800138e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001390:	2300      	movs	r3, #0
 8001392:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001394:	230e      	movs	r3, #14
 8001396:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001398:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800139c:	4619      	mov	r1, r3
 800139e:	481e      	ldr	r0, [pc, #120]	@ (8001418 <HAL_LTDC_MspInit+0x258>)
 80013a0:	f000 fe4a 	bl	8002038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80013a4:	2348      	movs	r3, #72	@ 0x48
 80013a6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a8:	2302      	movs	r3, #2
 80013aa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80013b4:	230e      	movs	r3, #14
 80013b6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013b8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013bc:	4619      	mov	r1, r3
 80013be:	4817      	ldr	r0, [pc, #92]	@ (800141c <HAL_LTDC_MspInit+0x25c>)
 80013c0:	f000 fe3a 	bl	8002038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80013c4:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80013c8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ca:	2302      	movs	r3, #2
 80013cc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2300      	movs	r3, #0
 80013d4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80013d6:	2309      	movs	r3, #9
 80013d8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013da:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013de:	4619      	mov	r1, r3
 80013e0:	480c      	ldr	r0, [pc, #48]	@ (8001414 <HAL_LTDC_MspInit+0x254>)
 80013e2:	f000 fe29 	bl	8002038 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2105      	movs	r1, #5
 80013ea:	2058      	movs	r0, #88	@ 0x58
 80013ec:	f000 fbf2 	bl	8001bd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80013f0:	2058      	movs	r0, #88	@ 0x58
 80013f2:	f000 fc0b 	bl	8001c0c <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 80013f6:	bf00      	nop
 80013f8:	3768      	adds	r7, #104	@ 0x68
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40016800 	.word	0x40016800
 8001404:	40023800 	.word	0x40023800
 8001408:	40021400 	.word	0x40021400
 800140c:	40020000 	.word	0x40020000
 8001410:	40020400 	.word	0x40020400
 8001414:	40021800 	.word	0x40021800
 8001418:	40020800 	.word	0x40020800
 800141c:	40020c00 	.word	0x40020c00

08001420 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08a      	sub	sp, #40	@ 0x28
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001428:	f107 0314 	add.w	r3, r7, #20
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
 8001430:	605a      	str	r2, [r3, #4]
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	60da      	str	r2, [r3, #12]
 8001436:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	4a19      	ldr	r2, [pc, #100]	@ (80014a4 <HAL_SPI_MspInit+0x84>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d12c      	bne.n	800149c <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI5_MspInit 0 */

    /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001442:	2300      	movs	r3, #0
 8001444:	613b      	str	r3, [r7, #16]
 8001446:	4b18      	ldr	r3, [pc, #96]	@ (80014a8 <HAL_SPI_MspInit+0x88>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144a:	4a17      	ldr	r2, [pc, #92]	@ (80014a8 <HAL_SPI_MspInit+0x88>)
 800144c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001450:	6453      	str	r3, [r2, #68]	@ 0x44
 8001452:	4b15      	ldr	r3, [pc, #84]	@ (80014a8 <HAL_SPI_MspInit+0x88>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001456:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800145a:	613b      	str	r3, [r7, #16]
 800145c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800145e:	2300      	movs	r3, #0
 8001460:	60fb      	str	r3, [r7, #12]
 8001462:	4b11      	ldr	r3, [pc, #68]	@ (80014a8 <HAL_SPI_MspInit+0x88>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001466:	4a10      	ldr	r2, [pc, #64]	@ (80014a8 <HAL_SPI_MspInit+0x88>)
 8001468:	f043 0320 	orr.w	r3, r3, #32
 800146c:	6313      	str	r3, [r2, #48]	@ 0x30
 800146e:	4b0e      	ldr	r3, [pc, #56]	@ (80014a8 <HAL_SPI_MspInit+0x88>)
 8001470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001472:	f003 0320 	and.w	r3, r3, #32
 8001476:	60fb      	str	r3, [r7, #12]
 8001478:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800147a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800147e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001480:	2302      	movs	r3, #2
 8001482:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001488:	2300      	movs	r3, #0
 800148a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800148c:	2305      	movs	r3, #5
 800148e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001490:	f107 0314 	add.w	r3, r7, #20
 8001494:	4619      	mov	r1, r3
 8001496:	4805      	ldr	r0, [pc, #20]	@ (80014ac <HAL_SPI_MspInit+0x8c>)
 8001498:	f000 fdce 	bl	8002038 <HAL_GPIO_Init>

    /* USER CODE END SPI5_MspInit 1 */

  }

}
 800149c:	bf00      	nop
 800149e:	3728      	adds	r7, #40	@ 0x28
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	40015000 	.word	0x40015000
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40021400 	.word	0x40021400

080014b0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4a0b      	ldr	r2, [pc, #44]	@ (80014ec <HAL_TIM_Base_MspInit+0x3c>)
 80014be:	4293      	cmp	r3, r2
 80014c0:	d10d      	bne.n	80014de <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
 80014c6:	4b0a      	ldr	r3, [pc, #40]	@ (80014f0 <HAL_TIM_Base_MspInit+0x40>)
 80014c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ca:	4a09      	ldr	r2, [pc, #36]	@ (80014f0 <HAL_TIM_Base_MspInit+0x40>)
 80014cc:	f043 0301 	orr.w	r3, r3, #1
 80014d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014d2:	4b07      	ldr	r3, [pc, #28]	@ (80014f0 <HAL_TIM_Base_MspInit+0x40>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d6:	f003 0301 	and.w	r3, r3, #1
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80014de:	bf00      	nop
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	40010000 	.word	0x40010000
 80014f0:	40023800 	.word	0x40023800

080014f4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b08a      	sub	sp, #40	@ 0x28
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fc:	f107 0314 	add.w	r3, r7, #20
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	4a19      	ldr	r2, [pc, #100]	@ (8001578 <HAL_UART_MspInit+0x84>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d12c      	bne.n	8001570 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]
 800151a:	4b18      	ldr	r3, [pc, #96]	@ (800157c <HAL_UART_MspInit+0x88>)
 800151c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800151e:	4a17      	ldr	r2, [pc, #92]	@ (800157c <HAL_UART_MspInit+0x88>)
 8001520:	f043 0310 	orr.w	r3, r3, #16
 8001524:	6453      	str	r3, [r2, #68]	@ 0x44
 8001526:	4b15      	ldr	r3, [pc, #84]	@ (800157c <HAL_UART_MspInit+0x88>)
 8001528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800152a:	f003 0310 	and.w	r3, r3, #16
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60fb      	str	r3, [r7, #12]
 8001536:	4b11      	ldr	r3, [pc, #68]	@ (800157c <HAL_UART_MspInit+0x88>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	4a10      	ldr	r2, [pc, #64]	@ (800157c <HAL_UART_MspInit+0x88>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6313      	str	r3, [r2, #48]	@ 0x30
 8001542:	4b0e      	ldr	r3, [pc, #56]	@ (800157c <HAL_UART_MspInit+0x88>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800154e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001552:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001554:	2302      	movs	r3, #2
 8001556:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001558:	2300      	movs	r3, #0
 800155a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155c:	2303      	movs	r3, #3
 800155e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001560:	2307      	movs	r3, #7
 8001562:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	4619      	mov	r1, r3
 800156a:	4805      	ldr	r0, [pc, #20]	@ (8001580 <HAL_UART_MspInit+0x8c>)
 800156c:	f000 fd64 	bl	8002038 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001570:	bf00      	nop
 8001572:	3728      	adds	r7, #40	@ 0x28
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	40011000 	.word	0x40011000
 800157c:	40023800 	.word	0x40023800
 8001580:	40020000 	.word	0x40020000

08001584 <HAL_HCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hhcd: HCD handle pointer
  * @retval None
  */
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	@ 0x28
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800158c:	f107 0314 	add.w	r3, r7, #20
 8001590:	2200      	movs	r2, #0
 8001592:	601a      	str	r2, [r3, #0]
 8001594:	605a      	str	r2, [r3, #4]
 8001596:	609a      	str	r2, [r3, #8]
 8001598:	60da      	str	r2, [r3, #12]
 800159a:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_HS)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a24      	ldr	r2, [pc, #144]	@ (8001634 <HAL_HCD_MspInit+0xb0>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d141      	bne.n	800162a <HAL_HCD_MspInit+0xa6>
  {
    /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015a6:	2300      	movs	r3, #0
 80015a8:	613b      	str	r3, [r7, #16]
 80015aa:	4b23      	ldr	r3, [pc, #140]	@ (8001638 <HAL_HCD_MspInit+0xb4>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ae:	4a22      	ldr	r2, [pc, #136]	@ (8001638 <HAL_HCD_MspInit+0xb4>)
 80015b0:	f043 0302 	orr.w	r3, r3, #2
 80015b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80015b6:	4b20      	ldr	r3, [pc, #128]	@ (8001638 <HAL_HCD_MspInit+0xb4>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ba:	f003 0302 	and.w	r3, r3, #2
 80015be:	613b      	str	r3, [r7, #16]
 80015c0:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 80015c2:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 80015c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c8:	2302      	movs	r3, #2
 80015ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	2300      	movs	r3, #0
 80015d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80015d4:	230c      	movs	r3, #12
 80015d6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	4619      	mov	r1, r3
 80015de:	4817      	ldr	r0, [pc, #92]	@ (800163c <HAL_HCD_MspInit+0xb8>)
 80015e0:	f000 fd2a 	bl	8002038 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80015e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80015e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ea:	2300      	movs	r3, #0
 80015ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	4810      	ldr	r0, [pc, #64]	@ (800163c <HAL_HCD_MspInit+0xb8>)
 80015fa:	f000 fd1d 	bl	8002038 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	4b0d      	ldr	r3, [pc, #52]	@ (8001638 <HAL_HCD_MspInit+0xb4>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001606:	4a0c      	ldr	r2, [pc, #48]	@ (8001638 <HAL_HCD_MspInit+0xb4>)
 8001608:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800160c:	6313      	str	r3, [r2, #48]	@ 0x30
 800160e:	4b0a      	ldr	r3, [pc, #40]	@ (8001638 <HAL_HCD_MspInit+0xb4>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001612:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800161a:	2200      	movs	r2, #0
 800161c:	2100      	movs	r1, #0
 800161e:	204d      	movs	r0, #77	@ 0x4d
 8001620:	f000 fad8 	bl	8001bd4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8001624:	204d      	movs	r0, #77	@ 0x4d
 8001626:	f000 faf1 	bl	8001c0c <HAL_NVIC_EnableIRQ>

    /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 800162a:	bf00      	nop
 800162c:	3728      	adds	r7, #40	@ 0x28
 800162e:	46bd      	mov	sp, r7
 8001630:	bd80      	pop	{r7, pc}
 8001632:	bf00      	nop
 8001634:	40040000 	.word	0x40040000
 8001638:	40023800 	.word	0x40023800
 800163c:	40020400 	.word	0x40020400

08001640 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]
 800164c:	605a      	str	r2, [r3, #4]
 800164e:	609a      	str	r2, [r3, #8]
 8001650:	60da      	str	r2, [r3, #12]
 8001652:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001654:	4b3b      	ldr	r3, [pc, #236]	@ (8001744 <HAL_FMC_MspInit+0x104>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2b00      	cmp	r3, #0
 800165a:	d16f      	bne.n	800173c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800165c:	4b39      	ldr	r3, [pc, #228]	@ (8001744 <HAL_FMC_MspInit+0x104>)
 800165e:	2201      	movs	r2, #1
 8001660:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	603b      	str	r3, [r7, #0]
 8001666:	4b38      	ldr	r3, [pc, #224]	@ (8001748 <HAL_FMC_MspInit+0x108>)
 8001668:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800166a:	4a37      	ldr	r2, [pc, #220]	@ (8001748 <HAL_FMC_MspInit+0x108>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6393      	str	r3, [r2, #56]	@ 0x38
 8001672:	4b35      	ldr	r3, [pc, #212]	@ (8001748 <HAL_FMC_MspInit+0x108>)
 8001674:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	603b      	str	r3, [r7, #0]
 800167c:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800167e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8001682:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168c:	2303      	movs	r3, #3
 800168e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001690:	230c      	movs	r3, #12
 8001692:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001694:	1d3b      	adds	r3, r7, #4
 8001696:	4619      	mov	r1, r3
 8001698:	482c      	ldr	r0, [pc, #176]	@ (800174c <HAL_FMC_MspInit+0x10c>)
 800169a:	f000 fccd 	bl	8002038 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800169e:	2301      	movs	r3, #1
 80016a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016aa:	2303      	movs	r3, #3
 80016ac:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016ae:	230c      	movs	r3, #12
 80016b0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	4619      	mov	r1, r3
 80016b6:	4826      	ldr	r0, [pc, #152]	@ (8001750 <HAL_FMC_MspInit+0x110>)
 80016b8:	f000 fcbe 	bl	8002038 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80016bc:	f248 1333 	movw	r3, #33075	@ 0x8133
 80016c0:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016c2:	2302      	movs	r3, #2
 80016c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ca:	2303      	movs	r3, #3
 80016cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016ce:	230c      	movs	r3, #12
 80016d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016d2:	1d3b      	adds	r3, r7, #4
 80016d4:	4619      	mov	r1, r3
 80016d6:	481f      	ldr	r0, [pc, #124]	@ (8001754 <HAL_FMC_MspInit+0x114>)
 80016d8:	f000 fcae 	bl	8002038 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80016dc:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80016e0:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e2:	2302      	movs	r3, #2
 80016e4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ea:	2303      	movs	r3, #3
 80016ec:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016ee:	230c      	movs	r3, #12
 80016f0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016f2:	1d3b      	adds	r3, r7, #4
 80016f4:	4619      	mov	r1, r3
 80016f6:	4818      	ldr	r0, [pc, #96]	@ (8001758 <HAL_FMC_MspInit+0x118>)
 80016f8:	f000 fc9e 	bl	8002038 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80016fc:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001700:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001702:	2302      	movs	r3, #2
 8001704:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001706:	2300      	movs	r3, #0
 8001708:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800170a:	2303      	movs	r3, #3
 800170c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800170e:	230c      	movs	r3, #12
 8001710:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	4619      	mov	r1, r3
 8001716:	4811      	ldr	r0, [pc, #68]	@ (800175c <HAL_FMC_MspInit+0x11c>)
 8001718:	f000 fc8e 	bl	8002038 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 800171c:	2360      	movs	r3, #96	@ 0x60
 800171e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001720:	2302      	movs	r3, #2
 8001722:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001728:	2303      	movs	r3, #3
 800172a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800172c:	230c      	movs	r3, #12
 800172e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001730:	1d3b      	adds	r3, r7, #4
 8001732:	4619      	mov	r1, r3
 8001734:	480a      	ldr	r0, [pc, #40]	@ (8001760 <HAL_FMC_MspInit+0x120>)
 8001736:	f000 fc7f 	bl	8002038 <HAL_GPIO_Init>
 800173a:	e000      	b.n	800173e <HAL_FMC_MspInit+0xfe>
    return;
 800173c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	2000066c 	.word	0x2000066c
 8001748:	40023800 	.word	0x40023800
 800174c:	40021400 	.word	0x40021400
 8001750:	40020800 	.word	0x40020800
 8001754:	40021800 	.word	0x40021800
 8001758:	40021000 	.word	0x40021000
 800175c:	40020c00 	.word	0x40020c00
 8001760:	40020400 	.word	0x40020400

08001764 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001764:	b580      	push	{r7, lr}
 8001766:	b082      	sub	sp, #8
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800176c:	f7ff ff68 	bl	8001640 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001770:	bf00      	nop
 8001772:	3708      	adds	r7, #8
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}

08001778 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b08e      	sub	sp, #56	@ 0x38
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001780:	2300      	movs	r3, #0
 8001782:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001784:	2300      	movs	r3, #0
 8001786:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	4b33      	ldr	r3, [pc, #204]	@ (800185c <HAL_InitTick+0xe4>)
 800178e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001790:	4a32      	ldr	r2, [pc, #200]	@ (800185c <HAL_InitTick+0xe4>)
 8001792:	f043 0310 	orr.w	r3, r3, #16
 8001796:	6413      	str	r3, [r2, #64]	@ 0x40
 8001798:	4b30      	ldr	r3, [pc, #192]	@ (800185c <HAL_InitTick+0xe4>)
 800179a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800179c:	f003 0310 	and.w	r3, r3, #16
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017a4:	f107 0210 	add.w	r2, r7, #16
 80017a8:	f107 0314 	add.w	r3, r7, #20
 80017ac:	4611      	mov	r1, r2
 80017ae:	4618      	mov	r0, r3
 80017b0:	f003 fdf8 	bl	80053a4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80017b4:	6a3b      	ldr	r3, [r7, #32]
 80017b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80017b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d103      	bne.n	80017c6 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017be:	f003 fdc9 	bl	8005354 <HAL_RCC_GetPCLK1Freq>
 80017c2:	6378      	str	r0, [r7, #52]	@ 0x34
 80017c4:	e004      	b.n	80017d0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80017c6:	f003 fdc5 	bl	8005354 <HAL_RCC_GetPCLK1Freq>
 80017ca:	4603      	mov	r3, r0
 80017cc:	005b      	lsls	r3, r3, #1
 80017ce:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80017d2:	4a23      	ldr	r2, [pc, #140]	@ (8001860 <HAL_InitTick+0xe8>)
 80017d4:	fba2 2303 	umull	r2, r3, r2, r3
 80017d8:	0c9b      	lsrs	r3, r3, #18
 80017da:	3b01      	subs	r3, #1
 80017dc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80017de:	4b21      	ldr	r3, [pc, #132]	@ (8001864 <HAL_InitTick+0xec>)
 80017e0:	4a21      	ldr	r2, [pc, #132]	@ (8001868 <HAL_InitTick+0xf0>)
 80017e2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80017e4:	4b1f      	ldr	r3, [pc, #124]	@ (8001864 <HAL_InitTick+0xec>)
 80017e6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017ea:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80017ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001864 <HAL_InitTick+0xec>)
 80017ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017f0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017f2:	4b1c      	ldr	r3, [pc, #112]	@ (8001864 <HAL_InitTick+0xec>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f8:	4b1a      	ldr	r3, [pc, #104]	@ (8001864 <HAL_InitTick+0xec>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017fe:	4b19      	ldr	r3, [pc, #100]	@ (8001864 <HAL_InitTick+0xec>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001804:	4817      	ldr	r0, [pc, #92]	@ (8001864 <HAL_InitTick+0xec>)
 8001806:	f004 fdc5 	bl	8006394 <HAL_TIM_Base_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001810:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001814:	2b00      	cmp	r3, #0
 8001816:	d11b      	bne.n	8001850 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001818:	4812      	ldr	r0, [pc, #72]	@ (8001864 <HAL_InitTick+0xec>)
 800181a:	f004 fe0b 	bl	8006434 <HAL_TIM_Base_Start_IT>
 800181e:	4603      	mov	r3, r0
 8001820:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001824:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001828:	2b00      	cmp	r3, #0
 800182a:	d111      	bne.n	8001850 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800182c:	2036      	movs	r0, #54	@ 0x36
 800182e:	f000 f9ed 	bl	8001c0c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2b0f      	cmp	r3, #15
 8001836:	d808      	bhi.n	800184a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001838:	2200      	movs	r2, #0
 800183a:	6879      	ldr	r1, [r7, #4]
 800183c:	2036      	movs	r0, #54	@ 0x36
 800183e:	f000 f9c9 	bl	8001bd4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001842:	4a0a      	ldr	r2, [pc, #40]	@ (800186c <HAL_InitTick+0xf4>)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6013      	str	r3, [r2, #0]
 8001848:	e002      	b.n	8001850 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001850:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001854:	4618      	mov	r0, r3
 8001856:	3738      	adds	r7, #56	@ 0x38
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	40023800 	.word	0x40023800
 8001860:	431bde83 	.word	0x431bde83
 8001864:	20000670 	.word	0x20000670
 8001868:	40001000 	.word	0x40001000
 800186c:	20000008 	.word	0x20000008

08001870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001874:	bf00      	nop
 8001876:	e7fd      	b.n	8001874 <NMI_Handler+0x4>

08001878 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800187c:	bf00      	nop
 800187e:	e7fd      	b.n	800187c <HardFault_Handler+0x4>

08001880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001884:	bf00      	nop
 8001886:	e7fd      	b.n	8001884 <MemManage_Handler+0x4>

08001888 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <BusFault_Handler+0x4>

08001890 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001894:	bf00      	nop
 8001896:	e7fd      	b.n	8001894 <UsageFault_Handler+0x4>

08001898 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr

080018a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a6:	b480      	push	{r7}
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018aa:	bf00      	nop
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr

080018c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c2:	b480      	push	{r7}
 80018c4:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr

080018d0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80018d4:	4802      	ldr	r0, [pc, #8]	@ (80018e0 <TIM6_DAC_IRQHandler+0x10>)
 80018d6:	f004 fe1d 	bl	8006514 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000670 	.word	0x20000670

080018e4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80018e8:	4802      	ldr	r0, [pc, #8]	@ (80018f4 <OTG_HS_IRQHandler+0x10>)
 80018ea:	f000 fdd1 	bl	8002490 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80018ee:	bf00      	nop
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	20000258 	.word	0x20000258

080018f8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80018fc:	4802      	ldr	r0, [pc, #8]	@ (8001908 <LTDC_IRQHandler+0x10>)
 80018fe:	f002 fe21 	bl	8004544 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8001902:	bf00      	nop
 8001904:	bd80      	pop	{r7, pc}
 8001906:	bf00      	nop
 8001908:	200000c8 	.word	0x200000c8

0800190c <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001910:	4802      	ldr	r0, [pc, #8]	@ (800191c <DMA2D_IRQHandler+0x10>)
 8001912:	f000 f9ee 	bl	8001cf2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 8001916:	bf00      	nop
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20000034 	.word	0x20000034

08001920 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001924:	4b06      	ldr	r3, [pc, #24]	@ (8001940 <SystemInit+0x20>)
 8001926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800192a:	4a05      	ldr	r2, [pc, #20]	@ (8001940 <SystemInit+0x20>)
 800192c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001930:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001934:	bf00      	nop
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001944:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800197c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001948:	f7ff ffea 	bl	8001920 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800194c:	480c      	ldr	r0, [pc, #48]	@ (8001980 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800194e:	490d      	ldr	r1, [pc, #52]	@ (8001984 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001950:	4a0d      	ldr	r2, [pc, #52]	@ (8001988 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001952:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001954:	e002      	b.n	800195c <LoopCopyDataInit>

08001956 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001956:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001958:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800195a:	3304      	adds	r3, #4

0800195c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800195c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800195e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001960:	d3f9      	bcc.n	8001956 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001962:	4a0a      	ldr	r2, [pc, #40]	@ (800198c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001964:	4c0a      	ldr	r4, [pc, #40]	@ (8001990 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001966:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001968:	e001      	b.n	800196e <LoopFillZerobss>

0800196a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800196a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800196c:	3204      	adds	r2, #4

0800196e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800196e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001970:	d3fb      	bcc.n	800196a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001972:	f006 fa7d 	bl	8007e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001976:	f7fe ff19 	bl	80007ac <main>
  bx  lr    
 800197a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800197c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001980:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001984:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001988:	08007f64 	.word	0x08007f64
  ldr r2, =_sbss
 800198c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001990:	200006bc 	.word	0x200006bc

08001994 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001994:	e7fe      	b.n	8001994 <ADC_IRQHandler>
	...

08001998 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800199c:	4b0e      	ldr	r3, [pc, #56]	@ (80019d8 <HAL_Init+0x40>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a0d      	ldr	r2, [pc, #52]	@ (80019d8 <HAL_Init+0x40>)
 80019a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80019a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80019a8:	4b0b      	ldr	r3, [pc, #44]	@ (80019d8 <HAL_Init+0x40>)
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a0a      	ldr	r2, [pc, #40]	@ (80019d8 <HAL_Init+0x40>)
 80019ae:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80019b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019b4:	4b08      	ldr	r3, [pc, #32]	@ (80019d8 <HAL_Init+0x40>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a07      	ldr	r2, [pc, #28]	@ (80019d8 <HAL_Init+0x40>)
 80019ba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80019be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019c0:	2003      	movs	r0, #3
 80019c2:	f000 f8fc 	bl	8001bbe <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019c6:	200f      	movs	r0, #15
 80019c8:	f7ff fed6 	bl	8001778 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019cc:	f7ff fb1c 	bl	8001008 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	40023c00 	.word	0x40023c00

080019dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019e0:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <HAL_IncTick+0x20>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	461a      	mov	r2, r3
 80019e6:	4b06      	ldr	r3, [pc, #24]	@ (8001a00 <HAL_IncTick+0x24>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4413      	add	r3, r2
 80019ec:	4a04      	ldr	r2, [pc, #16]	@ (8001a00 <HAL_IncTick+0x24>)
 80019ee:	6013      	str	r3, [r2, #0]
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	2000000c 	.word	0x2000000c
 8001a00:	200006b8 	.word	0x200006b8

08001a04 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return uwTick;
 8001a08:	4b03      	ldr	r3, [pc, #12]	@ (8001a18 <HAL_GetTick+0x14>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a14:	4770      	bx	lr
 8001a16:	bf00      	nop
 8001a18:	200006b8 	.word	0x200006b8

08001a1c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a24:	f7ff ffee 	bl	8001a04 <HAL_GetTick>
 8001a28:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a34:	d005      	beq.n	8001a42 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a36:	4b0a      	ldr	r3, [pc, #40]	@ (8001a60 <HAL_Delay+0x44>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	461a      	mov	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4413      	add	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a42:	bf00      	nop
 8001a44:	f7ff ffde 	bl	8001a04 <HAL_GetTick>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	1ad3      	subs	r3, r2, r3
 8001a4e:	68fa      	ldr	r2, [r7, #12]
 8001a50:	429a      	cmp	r2, r3
 8001a52:	d8f7      	bhi.n	8001a44 <HAL_Delay+0x28>
  {
  }
}
 8001a54:	bf00      	nop
 8001a56:	bf00      	nop
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	2000000c 	.word	0x2000000c

08001a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a64:	b480      	push	{r7}
 8001a66:	b085      	sub	sp, #20
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	f003 0307 	and.w	r3, r3, #7
 8001a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a74:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a7a:	68ba      	ldr	r2, [r7, #8]
 8001a7c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a80:	4013      	ands	r3, r2
 8001a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a8c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a96:	4a04      	ldr	r2, [pc, #16]	@ (8001aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	60d3      	str	r3, [r2, #12]
}
 8001a9c:	bf00      	nop
 8001a9e:	3714      	adds	r7, #20
 8001aa0:	46bd      	mov	sp, r7
 8001aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa6:	4770      	bx	lr
 8001aa8:	e000ed00 	.word	0xe000ed00

08001aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001aac:	b480      	push	{r7}
 8001aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab0:	4b04      	ldr	r3, [pc, #16]	@ (8001ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	0a1b      	lsrs	r3, r3, #8
 8001ab6:	f003 0307 	and.w	r3, r3, #7
}
 8001aba:	4618      	mov	r0, r3
 8001abc:	46bd      	mov	sp, r7
 8001abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac2:	4770      	bx	lr
 8001ac4:	e000ed00 	.word	0xe000ed00

08001ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b083      	sub	sp, #12
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	4603      	mov	r3, r0
 8001ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	db0b      	blt.n	8001af2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ada:	79fb      	ldrb	r3, [r7, #7]
 8001adc:	f003 021f 	and.w	r2, r3, #31
 8001ae0:	4907      	ldr	r1, [pc, #28]	@ (8001b00 <__NVIC_EnableIRQ+0x38>)
 8001ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae6:	095b      	lsrs	r3, r3, #5
 8001ae8:	2001      	movs	r0, #1
 8001aea:	fa00 f202 	lsl.w	r2, r0, r2
 8001aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
 8001afe:	bf00      	nop
 8001b00:	e000e100 	.word	0xe000e100

08001b04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b083      	sub	sp, #12
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	6039      	str	r1, [r7, #0]
 8001b0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	db0a      	blt.n	8001b2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	b2da      	uxtb	r2, r3
 8001b1c:	490c      	ldr	r1, [pc, #48]	@ (8001b50 <__NVIC_SetPriority+0x4c>)
 8001b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b22:	0112      	lsls	r2, r2, #4
 8001b24:	b2d2      	uxtb	r2, r2
 8001b26:	440b      	add	r3, r1
 8001b28:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b2c:	e00a      	b.n	8001b44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	b2da      	uxtb	r2, r3
 8001b32:	4908      	ldr	r1, [pc, #32]	@ (8001b54 <__NVIC_SetPriority+0x50>)
 8001b34:	79fb      	ldrb	r3, [r7, #7]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	3b04      	subs	r3, #4
 8001b3c:	0112      	lsls	r2, r2, #4
 8001b3e:	b2d2      	uxtb	r2, r2
 8001b40:	440b      	add	r3, r1
 8001b42:	761a      	strb	r2, [r3, #24]
}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	e000e100 	.word	0xe000e100
 8001b54:	e000ed00 	.word	0xe000ed00

08001b58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b089      	sub	sp, #36	@ 0x24
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 0307 	and.w	r3, r3, #7
 8001b6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	f1c3 0307 	rsb	r3, r3, #7
 8001b72:	2b04      	cmp	r3, #4
 8001b74:	bf28      	it	cs
 8001b76:	2304      	movcs	r3, #4
 8001b78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b7a:	69fb      	ldr	r3, [r7, #28]
 8001b7c:	3304      	adds	r3, #4
 8001b7e:	2b06      	cmp	r3, #6
 8001b80:	d902      	bls.n	8001b88 <NVIC_EncodePriority+0x30>
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3b03      	subs	r3, #3
 8001b86:	e000      	b.n	8001b8a <NVIC_EncodePriority+0x32>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b8c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	fa02 f303 	lsl.w	r3, r2, r3
 8001b96:	43da      	mvns	r2, r3
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	401a      	ands	r2, r3
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba0:	f04f 31ff 	mov.w	r1, #4294967295
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	fa01 f303 	lsl.w	r3, r1, r3
 8001baa:	43d9      	mvns	r1, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb0:	4313      	orrs	r3, r2
         );
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3724      	adds	r7, #36	@ 0x24
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr

08001bbe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bc6:	6878      	ldr	r0, [r7, #4]
 8001bc8:	f7ff ff4c 	bl	8001a64 <__NVIC_SetPriorityGrouping>
}
 8001bcc:	bf00      	nop
 8001bce:	3708      	adds	r7, #8
 8001bd0:	46bd      	mov	sp, r7
 8001bd2:	bd80      	pop	{r7, pc}

08001bd4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b086      	sub	sp, #24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	4603      	mov	r3, r0
 8001bdc:	60b9      	str	r1, [r7, #8]
 8001bde:	607a      	str	r2, [r7, #4]
 8001be0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001be6:	f7ff ff61 	bl	8001aac <__NVIC_GetPriorityGrouping>
 8001bea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bec:	687a      	ldr	r2, [r7, #4]
 8001bee:	68b9      	ldr	r1, [r7, #8]
 8001bf0:	6978      	ldr	r0, [r7, #20]
 8001bf2:	f7ff ffb1 	bl	8001b58 <NVIC_EncodePriority>
 8001bf6:	4602      	mov	r2, r0
 8001bf8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bfc:	4611      	mov	r1, r2
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7ff ff80 	bl	8001b04 <__NVIC_SetPriority>
}
 8001c04:	bf00      	nop
 8001c06:	3718      	adds	r7, #24
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	bd80      	pop	{r7, pc}

08001c0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	f7ff ff54 	bl	8001ac8 <__NVIC_EnableIRQ>
}
 8001c20:	bf00      	nop
 8001c22:	3708      	adds	r7, #8
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e00e      	b.n	8001c58 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	795b      	ldrb	r3, [r3, #5]
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d105      	bne.n	8001c50 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f7ff fa04 	bl	8001058 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2201      	movs	r2, #1
 8001c54:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001c56:	2300      	movs	r3, #0
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}

08001c60 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b082      	sub	sp, #8
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d101      	bne.n	8001c72 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e03b      	b.n	8001cea <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d106      	bne.n	8001c8c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001c86:	6878      	ldr	r0, [r7, #4]
 8001c88:	f7ff fa08 	bl	800109c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	2202      	movs	r2, #2
 8001c90:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685a      	ldr	r2, [r3, #4]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cb0:	f023 0107 	bic.w	r1, r3, #7
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cc6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001cca:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cce:	687a      	ldr	r2, [r7, #4]
 8001cd0:	68d1      	ldr	r1, [r2, #12]
 8001cd2:	687a      	ldr	r2, [r7, #4]
 8001cd4:	6812      	ldr	r2, [r2, #0]
 8001cd6:	430b      	orrs	r3, r1
 8001cd8:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	2200      	movs	r2, #0
 8001cde:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8001ce8:	2300      	movs	r3, #0
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	3708      	adds	r7, #8
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}

08001cf2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001cf2:	b580      	push	{r7, lr}
 8001cf4:	b084      	sub	sp, #16
 8001cf6:	af00      	add	r7, sp, #0
 8001cf8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	f003 0301 	and.w	r3, r3, #1
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d026      	beq.n	8001d62 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d021      	beq.n	8001d62 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001d2c:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d32:	f043 0201 	orr.w	r2, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	2201      	movs	r2, #1
 8001d40:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	2204      	movs	r2, #4
 8001d46:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	f003 0320 	and.w	r3, r3, #32
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d026      	beq.n	8001dba <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d021      	beq.n	8001dba <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001d84:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2220      	movs	r2, #32
 8001d8c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d92:	f043 0202 	orr.w	r2, r3, #2
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2204      	movs	r2, #4
 8001d9e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	695b      	ldr	r3, [r3, #20]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d026      	beq.n	8001e12 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001dc4:	68bb      	ldr	r3, [r7, #8]
 8001dc6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d021      	beq.n	8001e12 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ddc:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	2208      	movs	r2, #8
 8001de4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001dea:	f043 0204 	orr.w	r2, r3, #4
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2204      	movs	r2, #4
 8001df6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	695b      	ldr	r3, [r3, #20]
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d003      	beq.n	8001e12 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	695b      	ldr	r3, [r3, #20]
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d013      	beq.n	8001e44 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d00e      	beq.n	8001e44 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e34:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	2204      	movs	r2, #4
 8001e3c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f853 	bl	8001eea <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f003 0302 	and.w	r3, r3, #2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d024      	beq.n	8001e98 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001e4e:	68bb      	ldr	r3, [r7, #8]
 8001e50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d01f      	beq.n	8001e98 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001e66:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2200      	movs	r2, #0
 8001e84:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	691b      	ldr	r3, [r3, #16]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	f003 0310 	and.w	r3, r3, #16
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d01f      	beq.n	8001ee2 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d01a      	beq.n	8001ee2 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001eba:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	2210      	movs	r2, #16
 8001ec2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	2201      	movs	r2, #1
 8001ed0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001edc:	6878      	ldr	r0, [r7, #4]
 8001ede:	f000 f80e 	bl	8001efe <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001ee2:	bf00      	nop
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}

08001eea <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001eea:	b480      	push	{r7}
 8001eec:	b083      	sub	sp, #12
 8001eee:	af00      	add	r7, sp, #0
 8001ef0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001ef2:	bf00      	nop
 8001ef4:	370c      	adds	r7, #12
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr

08001efe <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
	...

08001f14 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001f14:	b480      	push	{r7}
 8001f16:	b087      	sub	sp, #28
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
 8001f1c:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001f2c:	2b01      	cmp	r3, #1
 8001f2e:	d101      	bne.n	8001f34 <HAL_DMA2D_ConfigLayer+0x20>
 8001f30:	2302      	movs	r3, #2
 8001f32:	e079      	b.n	8002028 <HAL_DMA2D_ConfigLayer+0x114>
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2201      	movs	r2, #1
 8001f38:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2202      	movs	r2, #2
 8001f40:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	011b      	lsls	r3, r3, #4
 8001f48:	3318      	adds	r3, #24
 8001f4a:	687a      	ldr	r2, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	041b      	lsls	r3, r3, #16
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001f5e:	4b35      	ldr	r3, [pc, #212]	@ (8002034 <HAL_DMA2D_ConfigLayer+0x120>)
 8001f60:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	2b0a      	cmp	r3, #10
 8001f68:	d003      	beq.n	8001f72 <HAL_DMA2D_ConfigLayer+0x5e>
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	2b09      	cmp	r3, #9
 8001f70:	d107      	bne.n	8001f82 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	68db      	ldr	r3, [r3, #12]
 8001f76:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001f7a:	697a      	ldr	r2, [r7, #20]
 8001f7c:	4313      	orrs	r3, r2
 8001f7e:	617b      	str	r3, [r7, #20]
 8001f80:	e005      	b.n	8001f8e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	68db      	ldr	r3, [r3, #12]
 8001f86:	061b      	lsls	r3, r3, #24
 8001f88:	697a      	ldr	r2, [r7, #20]
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d120      	bne.n	8001fd6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	43db      	mvns	r3, r3
 8001f9e:	ea02 0103 	and.w	r1, r2, r3
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	697a      	ldr	r2, [r7, #20]
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	6812      	ldr	r2, [r2, #0]
 8001fb4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001fb6:	693b      	ldr	r3, [r7, #16]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	2b0a      	cmp	r3, #10
 8001fbc:	d003      	beq.n	8001fc6 <HAL_DMA2D_ConfigLayer+0xb2>
 8001fbe:	693b      	ldr	r3, [r7, #16]
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2b09      	cmp	r3, #9
 8001fc4:	d127      	bne.n	8002016 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001fd2:	629a      	str	r2, [r3, #40]	@ 0x28
 8001fd4:	e01f      	b.n	8002016 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	69da      	ldr	r2, [r3, #28]
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	ea02 0103 	and.w	r1, r2, r3
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	697a      	ldr	r2, [r7, #20]
 8001fea:	430a      	orrs	r2, r1
 8001fec:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	693a      	ldr	r2, [r7, #16]
 8001ff4:	6812      	ldr	r2, [r2, #0]
 8001ff6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001ff8:	693b      	ldr	r3, [r7, #16]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	2b0a      	cmp	r3, #10
 8001ffe:	d003      	beq.n	8002008 <HAL_DMA2D_ConfigLayer+0xf4>
 8002000:	693b      	ldr	r3, [r7, #16]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	2b09      	cmp	r3, #9
 8002006:	d106      	bne.n	8002016 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	68da      	ldr	r2, [r3, #12]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8002014:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8002026:	2300      	movs	r3, #0
}
 8002028:	4618      	mov	r0, r3
 800202a:	371c      	adds	r7, #28
 800202c:	46bd      	mov	sp, r7
 800202e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002032:	4770      	bx	lr
 8002034:	ff03000f 	.word	0xff03000f

08002038 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002038:	b480      	push	{r7}
 800203a:	b089      	sub	sp, #36	@ 0x24
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002042:	2300      	movs	r3, #0
 8002044:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800204a:	2300      	movs	r3, #0
 800204c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	e177      	b.n	8002344 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002054:	2201      	movs	r2, #1
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	fa02 f303 	lsl.w	r3, r2, r3
 800205c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	697a      	ldr	r2, [r7, #20]
 8002064:	4013      	ands	r3, r2
 8002066:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002068:	693a      	ldr	r2, [r7, #16]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	429a      	cmp	r2, r3
 800206e:	f040 8166 	bne.w	800233e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	f003 0303 	and.w	r3, r3, #3
 800207a:	2b01      	cmp	r3, #1
 800207c:	d005      	beq.n	800208a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	685b      	ldr	r3, [r3, #4]
 8002082:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002086:	2b02      	cmp	r3, #2
 8002088:	d130      	bne.n	80020ec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689b      	ldr	r3, [r3, #8]
 800208e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	2203      	movs	r2, #3
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43db      	mvns	r3, r3
 800209c:	69ba      	ldr	r2, [r7, #24]
 800209e:	4013      	ands	r3, r2
 80020a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	68da      	ldr	r2, [r3, #12]
 80020a6:	69fb      	ldr	r3, [r7, #28]
 80020a8:	005b      	lsls	r3, r3, #1
 80020aa:	fa02 f303 	lsl.w	r3, r2, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4313      	orrs	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	69ba      	ldr	r2, [r7, #24]
 80020b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020c0:	2201      	movs	r2, #1
 80020c2:	69fb      	ldr	r3, [r7, #28]
 80020c4:	fa02 f303 	lsl.w	r3, r2, r3
 80020c8:	43db      	mvns	r3, r3
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	4013      	ands	r3, r2
 80020ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	091b      	lsrs	r3, r3, #4
 80020d6:	f003 0201 	and.w	r2, r3, #1
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	fa02 f303 	lsl.w	r3, r2, r3
 80020e0:	69ba      	ldr	r2, [r7, #24]
 80020e2:	4313      	orrs	r3, r2
 80020e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	685b      	ldr	r3, [r3, #4]
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d017      	beq.n	8002128 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020fe:	69fb      	ldr	r3, [r7, #28]
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	2203      	movs	r2, #3
 8002104:	fa02 f303 	lsl.w	r3, r2, r3
 8002108:	43db      	mvns	r3, r3
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	689a      	ldr	r2, [r3, #8]
 8002114:	69fb      	ldr	r3, [r7, #28]
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	fa02 f303 	lsl.w	r3, r2, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4313      	orrs	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	69ba      	ldr	r2, [r7, #24]
 8002126:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d123      	bne.n	800217c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002134:	69fb      	ldr	r3, [r7, #28]
 8002136:	08da      	lsrs	r2, r3, #3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	3208      	adds	r2, #8
 800213c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002140:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002142:	69fb      	ldr	r3, [r7, #28]
 8002144:	f003 0307 	and.w	r3, r3, #7
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	220f      	movs	r2, #15
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	691a      	ldr	r2, [r3, #16]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	f003 0307 	and.w	r3, r3, #7
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	08da      	lsrs	r2, r3, #3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	3208      	adds	r2, #8
 8002176:	69b9      	ldr	r1, [r7, #24]
 8002178:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	005b      	lsls	r3, r3, #1
 8002186:	2203      	movs	r2, #3
 8002188:	fa02 f303 	lsl.w	r3, r2, r3
 800218c:	43db      	mvns	r3, r3
 800218e:	69ba      	ldr	r2, [r7, #24]
 8002190:	4013      	ands	r3, r2
 8002192:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	f003 0203 	and.w	r2, r3, #3
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	005b      	lsls	r3, r3, #1
 80021a0:	fa02 f303 	lsl.w	r3, r2, r3
 80021a4:	69ba      	ldr	r2, [r7, #24]
 80021a6:	4313      	orrs	r3, r2
 80021a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	69ba      	ldr	r2, [r7, #24]
 80021ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	f000 80c0 	beq.w	800233e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021be:	2300      	movs	r3, #0
 80021c0:	60fb      	str	r3, [r7, #12]
 80021c2:	4b66      	ldr	r3, [pc, #408]	@ (800235c <HAL_GPIO_Init+0x324>)
 80021c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c6:	4a65      	ldr	r2, [pc, #404]	@ (800235c <HAL_GPIO_Init+0x324>)
 80021c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ce:	4b63      	ldr	r3, [pc, #396]	@ (800235c <HAL_GPIO_Init+0x324>)
 80021d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021d6:	60fb      	str	r3, [r7, #12]
 80021d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021da:	4a61      	ldr	r2, [pc, #388]	@ (8002360 <HAL_GPIO_Init+0x328>)
 80021dc:	69fb      	ldr	r3, [r7, #28]
 80021de:	089b      	lsrs	r3, r3, #2
 80021e0:	3302      	adds	r3, #2
 80021e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	f003 0303 	and.w	r3, r3, #3
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	220f      	movs	r2, #15
 80021f2:	fa02 f303 	lsl.w	r3, r2, r3
 80021f6:	43db      	mvns	r3, r3
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	4013      	ands	r3, r2
 80021fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a58      	ldr	r2, [pc, #352]	@ (8002364 <HAL_GPIO_Init+0x32c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d037      	beq.n	8002276 <HAL_GPIO_Init+0x23e>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a57      	ldr	r2, [pc, #348]	@ (8002368 <HAL_GPIO_Init+0x330>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d031      	beq.n	8002272 <HAL_GPIO_Init+0x23a>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a56      	ldr	r2, [pc, #344]	@ (800236c <HAL_GPIO_Init+0x334>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d02b      	beq.n	800226e <HAL_GPIO_Init+0x236>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	4a55      	ldr	r2, [pc, #340]	@ (8002370 <HAL_GPIO_Init+0x338>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d025      	beq.n	800226a <HAL_GPIO_Init+0x232>
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	4a54      	ldr	r2, [pc, #336]	@ (8002374 <HAL_GPIO_Init+0x33c>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d01f      	beq.n	8002266 <HAL_GPIO_Init+0x22e>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4a53      	ldr	r2, [pc, #332]	@ (8002378 <HAL_GPIO_Init+0x340>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d019      	beq.n	8002262 <HAL_GPIO_Init+0x22a>
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a52      	ldr	r2, [pc, #328]	@ (800237c <HAL_GPIO_Init+0x344>)
 8002232:	4293      	cmp	r3, r2
 8002234:	d013      	beq.n	800225e <HAL_GPIO_Init+0x226>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	4a51      	ldr	r2, [pc, #324]	@ (8002380 <HAL_GPIO_Init+0x348>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d00d      	beq.n	800225a <HAL_GPIO_Init+0x222>
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	4a50      	ldr	r2, [pc, #320]	@ (8002384 <HAL_GPIO_Init+0x34c>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d007      	beq.n	8002256 <HAL_GPIO_Init+0x21e>
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4a4f      	ldr	r2, [pc, #316]	@ (8002388 <HAL_GPIO_Init+0x350>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d101      	bne.n	8002252 <HAL_GPIO_Init+0x21a>
 800224e:	2309      	movs	r3, #9
 8002250:	e012      	b.n	8002278 <HAL_GPIO_Init+0x240>
 8002252:	230a      	movs	r3, #10
 8002254:	e010      	b.n	8002278 <HAL_GPIO_Init+0x240>
 8002256:	2308      	movs	r3, #8
 8002258:	e00e      	b.n	8002278 <HAL_GPIO_Init+0x240>
 800225a:	2307      	movs	r3, #7
 800225c:	e00c      	b.n	8002278 <HAL_GPIO_Init+0x240>
 800225e:	2306      	movs	r3, #6
 8002260:	e00a      	b.n	8002278 <HAL_GPIO_Init+0x240>
 8002262:	2305      	movs	r3, #5
 8002264:	e008      	b.n	8002278 <HAL_GPIO_Init+0x240>
 8002266:	2304      	movs	r3, #4
 8002268:	e006      	b.n	8002278 <HAL_GPIO_Init+0x240>
 800226a:	2303      	movs	r3, #3
 800226c:	e004      	b.n	8002278 <HAL_GPIO_Init+0x240>
 800226e:	2302      	movs	r3, #2
 8002270:	e002      	b.n	8002278 <HAL_GPIO_Init+0x240>
 8002272:	2301      	movs	r3, #1
 8002274:	e000      	b.n	8002278 <HAL_GPIO_Init+0x240>
 8002276:	2300      	movs	r3, #0
 8002278:	69fa      	ldr	r2, [r7, #28]
 800227a:	f002 0203 	and.w	r2, r2, #3
 800227e:	0092      	lsls	r2, r2, #2
 8002280:	4093      	lsls	r3, r2
 8002282:	69ba      	ldr	r2, [r7, #24]
 8002284:	4313      	orrs	r3, r2
 8002286:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002288:	4935      	ldr	r1, [pc, #212]	@ (8002360 <HAL_GPIO_Init+0x328>)
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	089b      	lsrs	r3, r3, #2
 800228e:	3302      	adds	r3, #2
 8002290:	69ba      	ldr	r2, [r7, #24]
 8002292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002296:	4b3d      	ldr	r3, [pc, #244]	@ (800238c <HAL_GPIO_Init+0x354>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	43db      	mvns	r3, r3
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	4013      	ands	r3, r2
 80022a4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	685b      	ldr	r3, [r3, #4]
 80022aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d003      	beq.n	80022ba <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80022b2:	69ba      	ldr	r2, [r7, #24]
 80022b4:	693b      	ldr	r3, [r7, #16]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ba:	4a34      	ldr	r2, [pc, #208]	@ (800238c <HAL_GPIO_Init+0x354>)
 80022bc:	69bb      	ldr	r3, [r7, #24]
 80022be:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022c0:	4b32      	ldr	r3, [pc, #200]	@ (800238c <HAL_GPIO_Init+0x354>)
 80022c2:	68db      	ldr	r3, [r3, #12]
 80022c4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	43db      	mvns	r3, r3
 80022ca:	69ba      	ldr	r2, [r7, #24]
 80022cc:	4013      	ands	r3, r2
 80022ce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80022dc:	69ba      	ldr	r2, [r7, #24]
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022e4:	4a29      	ldr	r2, [pc, #164]	@ (800238c <HAL_GPIO_Init+0x354>)
 80022e6:	69bb      	ldr	r3, [r7, #24]
 80022e8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022ea:	4b28      	ldr	r3, [pc, #160]	@ (800238c <HAL_GPIO_Init+0x354>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	43db      	mvns	r3, r3
 80022f4:	69ba      	ldr	r2, [r7, #24]
 80022f6:	4013      	ands	r3, r2
 80022f8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	4313      	orrs	r3, r2
 800230c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800230e:	4a1f      	ldr	r2, [pc, #124]	@ (800238c <HAL_GPIO_Init+0x354>)
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002314:	4b1d      	ldr	r3, [pc, #116]	@ (800238c <HAL_GPIO_Init+0x354>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	43db      	mvns	r3, r3
 800231e:	69ba      	ldr	r2, [r7, #24]
 8002320:	4013      	ands	r3, r2
 8002322:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800232c:	2b00      	cmp	r3, #0
 800232e:	d003      	beq.n	8002338 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	693b      	ldr	r3, [r7, #16]
 8002334:	4313      	orrs	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002338:	4a14      	ldr	r2, [pc, #80]	@ (800238c <HAL_GPIO_Init+0x354>)
 800233a:	69bb      	ldr	r3, [r7, #24]
 800233c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800233e:	69fb      	ldr	r3, [r7, #28]
 8002340:	3301      	adds	r3, #1
 8002342:	61fb      	str	r3, [r7, #28]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	2b0f      	cmp	r3, #15
 8002348:	f67f ae84 	bls.w	8002054 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800234c:	bf00      	nop
 800234e:	bf00      	nop
 8002350:	3724      	adds	r7, #36	@ 0x24
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40023800 	.word	0x40023800
 8002360:	40013800 	.word	0x40013800
 8002364:	40020000 	.word	0x40020000
 8002368:	40020400 	.word	0x40020400
 800236c:	40020800 	.word	0x40020800
 8002370:	40020c00 	.word	0x40020c00
 8002374:	40021000 	.word	0x40021000
 8002378:	40021400 	.word	0x40021400
 800237c:	40021800 	.word	0x40021800
 8002380:	40021c00 	.word	0x40021c00
 8002384:	40022000 	.word	0x40022000
 8002388:	40022400 	.word	0x40022400
 800238c:	40013c00 	.word	0x40013c00

08002390 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	460b      	mov	r3, r1
 800239a:	807b      	strh	r3, [r7, #2]
 800239c:	4613      	mov	r3, r2
 800239e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80023a0:	787b      	ldrb	r3, [r7, #1]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d003      	beq.n	80023ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80023a6:	887a      	ldrh	r2, [r7, #2]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80023ac:	e003      	b.n	80023b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80023ae:	887b      	ldrh	r3, [r7, #2]
 80023b0:	041a      	lsls	r2, r3, #16
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	619a      	str	r2, [r3, #24]
}
 80023b6:	bf00      	nop
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b086      	sub	sp, #24
 80023c6:	af02      	add	r7, sp, #8
 80023c8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d101      	bne.n	80023d4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80023d0:	2301      	movs	r3, #1
 80023d2:	e059      	b.n	8002488 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d106      	bne.n	80023f4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2200      	movs	r2, #0
 80023ea:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80023ee:	6878      	ldr	r0, [r7, #4]
 80023f0:	f7ff f8c8 	bl	8001584 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2203      	movs	r2, #3
 80023f8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002402:	d102      	bne.n	800240a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2200      	movs	r2, #0
 8002408:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f005 f96c 	bl	80076ec <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6818      	ldr	r0, [r3, #0]
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	7c1a      	ldrb	r2, [r3, #16]
 800241c:	f88d 2000 	strb.w	r2, [sp]
 8002420:	3304      	adds	r3, #4
 8002422:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002424:	f005 f8fe 	bl	8007624 <USB_CoreInit>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d005      	beq.n	800243a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2202      	movs	r2, #2
 8002432:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e026      	b.n	8002488 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	2101      	movs	r1, #1
 8002440:	4618      	mov	r0, r3
 8002442:	f005 f964 	bl	800770e <USB_SetCurrentMode>
 8002446:	4603      	mov	r3, r0
 8002448:	2b00      	cmp	r3, #0
 800244a:	d005      	beq.n	8002458 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2202      	movs	r2, #2
 8002450:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e017      	b.n	8002488 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6818      	ldr	r0, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	7c1a      	ldrb	r2, [r3, #16]
 8002460:	f88d 2000 	strb.w	r2, [sp]
 8002464:	3304      	adds	r3, #4
 8002466:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002468:	f005 fac8 	bl	80079fc <USB_HostInit>
 800246c:	4603      	mov	r3, r0
 800246e:	2b00      	cmp	r3, #0
 8002470:	d005      	beq.n	800247e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2202      	movs	r2, #2
 8002476:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	e004      	b.n	8002488 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3710      	adds	r7, #16
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}

08002490 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b086      	sub	sp, #24
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4618      	mov	r0, r3
 80024a8:	f005 fa69 	bl	800797e <USB_GetMode>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	f040 80fb 	bne.w	80026aa <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f005 fa2c 	bl	8007916 <USB_ReadInterrupts>
 80024be:	4603      	mov	r3, r0
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	f000 80f1 	beq.w	80026a8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f005 fa23 	bl	8007916 <USB_ReadInterrupts>
 80024d0:	4603      	mov	r3, r0
 80024d2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80024d6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80024da:	d104      	bne.n	80024e6 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80024e4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f005 fa13 	bl	8007916 <USB_ReadInterrupts>
 80024f0:	4603      	mov	r3, r0
 80024f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80024fa:	d104      	bne.n	8002506 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002504:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4618      	mov	r0, r3
 800250c:	f005 fa03 	bl	8007916 <USB_ReadInterrupts>
 8002510:	4603      	mov	r3, r0
 8002512:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002516:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800251a:	d104      	bne.n	8002526 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002524:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4618      	mov	r0, r3
 800252c:	f005 f9f3 	bl	8007916 <USB_ReadInterrupts>
 8002530:	4603      	mov	r3, r0
 8002532:	f003 0302 	and.w	r3, r3, #2
 8002536:	2b02      	cmp	r3, #2
 8002538:	d103      	bne.n	8002542 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	2202      	movs	r2, #2
 8002540:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f005 f9e5 	bl	8007916 <USB_ReadInterrupts>
 800254c:	4603      	mov	r3, r0
 800254e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002552:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002556:	d120      	bne.n	800259a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002560:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	f003 0301 	and.w	r3, r3, #1
 800256e:	2b00      	cmp	r3, #0
 8002570:	d113      	bne.n	800259a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002572:	2110      	movs	r1, #16
 8002574:	6938      	ldr	r0, [r7, #16]
 8002576:	f005 f916 	bl	80077a6 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800257a:	6938      	ldr	r0, [r7, #16]
 800257c:	f005 f945 	bl	800780a <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	7a5b      	ldrb	r3, [r3, #9]
 8002584:	2b02      	cmp	r3, #2
 8002586:	d105      	bne.n	8002594 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	2101      	movs	r1, #1
 800258e:	4618      	mov	r0, r3
 8002590:	f005 faf8 	bl	8007b84 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 f89f 	bl	80026d8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4618      	mov	r0, r3
 80025a0:	f005 f9b9 	bl	8007916 <USB_ReadInterrupts>
 80025a4:	4603      	mov	r3, r0
 80025a6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80025aa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80025ae:	d102      	bne.n	80025b6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f001 fcc4 	bl	8003f3e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4618      	mov	r0, r3
 80025bc:	f005 f9ab 	bl	8007916 <USB_ReadInterrupts>
 80025c0:	4603      	mov	r3, r0
 80025c2:	f003 0308 	and.w	r3, r3, #8
 80025c6:	2b08      	cmp	r3, #8
 80025c8:	d106      	bne.n	80025d8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f870 	bl	80026b0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2208      	movs	r2, #8
 80025d6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4618      	mov	r0, r3
 80025de:	f005 f99a 	bl	8007916 <USB_ReadInterrupts>
 80025e2:	4603      	mov	r3, r0
 80025e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025e8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80025ec:	d139      	bne.n	8002662 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f005 fb03 	bl	8007bfe <USB_HC_ReadInterrupt>
 80025f8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	e025      	b.n	800264c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002600:	697b      	ldr	r3, [r7, #20]
 8002602:	f003 030f 	and.w	r3, r3, #15
 8002606:	68ba      	ldr	r2, [r7, #8]
 8002608:	fa22 f303 	lsr.w	r3, r2, r3
 800260c:	f003 0301 	and.w	r3, r3, #1
 8002610:	2b00      	cmp	r3, #0
 8002612:	d018      	beq.n	8002646 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	015a      	lsls	r2, r3, #5
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	4413      	add	r3, r2
 800261c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002626:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800262a:	d106      	bne.n	800263a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	b2db      	uxtb	r3, r3
 8002630:	4619      	mov	r1, r3
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f87c 	bl	8002730 <HCD_HC_IN_IRQHandler>
 8002638:	e005      	b.n	8002646 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	b2db      	uxtb	r3, r3
 800263e:	4619      	mov	r1, r3
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f000 fede 	bl	8003402 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	3301      	adds	r3, #1
 800264a:	617b      	str	r3, [r7, #20]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	795b      	ldrb	r3, [r3, #5]
 8002650:	461a      	mov	r2, r3
 8002652:	697b      	ldr	r3, [r7, #20]
 8002654:	4293      	cmp	r3, r2
 8002656:	d3d3      	bcc.n	8002600 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002660:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f005 f955 	bl	8007916 <USB_ReadInterrupts>
 800266c:	4603      	mov	r3, r0
 800266e:	f003 0310 	and.w	r3, r3, #16
 8002672:	2b10      	cmp	r3, #16
 8002674:	d101      	bne.n	800267a <HAL_HCD_IRQHandler+0x1ea>
 8002676:	2301      	movs	r3, #1
 8002678:	e000      	b.n	800267c <HAL_HCD_IRQHandler+0x1ec>
 800267a:	2300      	movs	r3, #0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d014      	beq.n	80026aa <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	699a      	ldr	r2, [r3, #24]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f022 0210 	bic.w	r2, r2, #16
 800268e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f001 fb75 	bl	8003d80 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	699a      	ldr	r2, [r3, #24]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f042 0210 	orr.w	r2, r2, #16
 80026a4:	619a      	str	r2, [r3, #24]
 80026a6:	e000      	b.n	80026aa <HAL_HCD_IRQHandler+0x21a>
      return;
 80026a8:	bf00      	nop
    }
  }
}
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}

080026b0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 80026cc:	bf00      	nop
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 80026f4:	bf00      	nop
 80026f6:	370c      	adds	r7, #12
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002708:	bf00      	nop
 800270a:	370c      	adds	r7, #12
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8002714:	b480      	push	{r7}
 8002716:	b083      	sub	sp, #12
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	460b      	mov	r3, r1
 800271e:	70fb      	strb	r3, [r7, #3]
 8002720:	4613      	mov	r3, r2
 8002722:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr

08002730 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b086      	sub	sp, #24
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	78fa      	ldrb	r2, [r7, #3]
 800274c:	4611      	mov	r1, r2
 800274e:	4618      	mov	r0, r3
 8002750:	f005 f8f4 	bl	800793c <USB_ReadChInterrupts>
 8002754:	4603      	mov	r3, r0
 8002756:	f003 0304 	and.w	r3, r3, #4
 800275a:	2b04      	cmp	r3, #4
 800275c:	d11a      	bne.n	8002794 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800275e:	78fb      	ldrb	r3, [r7, #3]
 8002760:	015a      	lsls	r2, r3, #5
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4413      	add	r3, r2
 8002766:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800276a:	461a      	mov	r2, r3
 800276c:	2304      	movs	r3, #4
 800276e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002770:	78fa      	ldrb	r2, [r7, #3]
 8002772:	6879      	ldr	r1, [r7, #4]
 8002774:	4613      	mov	r3, r2
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	1a9b      	subs	r3, r3, r2
 800277a:	009b      	lsls	r3, r3, #2
 800277c:	440b      	add	r3, r1
 800277e:	334d      	adds	r3, #77	@ 0x4d
 8002780:	2207      	movs	r2, #7
 8002782:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	78fa      	ldrb	r2, [r7, #3]
 800278a:	4611      	mov	r1, r2
 800278c:	4618      	mov	r0, r3
 800278e:	f005 fa47 	bl	8007c20 <USB_HC_Halt>
 8002792:	e09e      	b.n	80028d2 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	78fa      	ldrb	r2, [r7, #3]
 800279a:	4611      	mov	r1, r2
 800279c:	4618      	mov	r0, r3
 800279e:	f005 f8cd 	bl	800793c <USB_ReadChInterrupts>
 80027a2:	4603      	mov	r3, r0
 80027a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80027ac:	d11b      	bne.n	80027e6 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80027ae:	78fb      	ldrb	r3, [r7, #3]
 80027b0:	015a      	lsls	r2, r3, #5
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	4413      	add	r3, r2
 80027b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027ba:	461a      	mov	r2, r3
 80027bc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80027c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80027c2:	78fa      	ldrb	r2, [r7, #3]
 80027c4:	6879      	ldr	r1, [r7, #4]
 80027c6:	4613      	mov	r3, r2
 80027c8:	011b      	lsls	r3, r3, #4
 80027ca:	1a9b      	subs	r3, r3, r2
 80027cc:	009b      	lsls	r3, r3, #2
 80027ce:	440b      	add	r3, r1
 80027d0:	334d      	adds	r3, #77	@ 0x4d
 80027d2:	2208      	movs	r2, #8
 80027d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	78fa      	ldrb	r2, [r7, #3]
 80027dc:	4611      	mov	r1, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f005 fa1e 	bl	8007c20 <USB_HC_Halt>
 80027e4:	e075      	b.n	80028d2 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	78fa      	ldrb	r2, [r7, #3]
 80027ec:	4611      	mov	r1, r2
 80027ee:	4618      	mov	r0, r3
 80027f0:	f005 f8a4 	bl	800793c <USB_ReadChInterrupts>
 80027f4:	4603      	mov	r3, r0
 80027f6:	f003 0308 	and.w	r3, r3, #8
 80027fa:	2b08      	cmp	r3, #8
 80027fc:	d11a      	bne.n	8002834 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80027fe:	78fb      	ldrb	r3, [r7, #3]
 8002800:	015a      	lsls	r2, r3, #5
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4413      	add	r3, r2
 8002806:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800280a:	461a      	mov	r2, r3
 800280c:	2308      	movs	r3, #8
 800280e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002810:	78fa      	ldrb	r2, [r7, #3]
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	4613      	mov	r3, r2
 8002816:	011b      	lsls	r3, r3, #4
 8002818:	1a9b      	subs	r3, r3, r2
 800281a:	009b      	lsls	r3, r3, #2
 800281c:	440b      	add	r3, r1
 800281e:	334d      	adds	r3, #77	@ 0x4d
 8002820:	2206      	movs	r2, #6
 8002822:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	78fa      	ldrb	r2, [r7, #3]
 800282a:	4611      	mov	r1, r2
 800282c:	4618      	mov	r0, r3
 800282e:	f005 f9f7 	bl	8007c20 <USB_HC_Halt>
 8002832:	e04e      	b.n	80028d2 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	78fa      	ldrb	r2, [r7, #3]
 800283a:	4611      	mov	r1, r2
 800283c:	4618      	mov	r0, r3
 800283e:	f005 f87d 	bl	800793c <USB_ReadChInterrupts>
 8002842:	4603      	mov	r3, r0
 8002844:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002848:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800284c:	d11b      	bne.n	8002886 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800284e:	78fb      	ldrb	r3, [r7, #3]
 8002850:	015a      	lsls	r2, r3, #5
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	4413      	add	r3, r2
 8002856:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800285a:	461a      	mov	r2, r3
 800285c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002860:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002862:	78fa      	ldrb	r2, [r7, #3]
 8002864:	6879      	ldr	r1, [r7, #4]
 8002866:	4613      	mov	r3, r2
 8002868:	011b      	lsls	r3, r3, #4
 800286a:	1a9b      	subs	r3, r3, r2
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	440b      	add	r3, r1
 8002870:	334d      	adds	r3, #77	@ 0x4d
 8002872:	2209      	movs	r2, #9
 8002874:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	78fa      	ldrb	r2, [r7, #3]
 800287c:	4611      	mov	r1, r2
 800287e:	4618      	mov	r0, r3
 8002880:	f005 f9ce 	bl	8007c20 <USB_HC_Halt>
 8002884:	e025      	b.n	80028d2 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	78fa      	ldrb	r2, [r7, #3]
 800288c:	4611      	mov	r1, r2
 800288e:	4618      	mov	r0, r3
 8002890:	f005 f854 	bl	800793c <USB_ReadChInterrupts>
 8002894:	4603      	mov	r3, r0
 8002896:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800289a:	2b80      	cmp	r3, #128	@ 0x80
 800289c:	d119      	bne.n	80028d2 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800289e:	78fb      	ldrb	r3, [r7, #3]
 80028a0:	015a      	lsls	r2, r3, #5
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	4413      	add	r3, r2
 80028a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028aa:	461a      	mov	r2, r3
 80028ac:	2380      	movs	r3, #128	@ 0x80
 80028ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80028b0:	78fa      	ldrb	r2, [r7, #3]
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	334d      	adds	r3, #77	@ 0x4d
 80028c0:	2207      	movs	r2, #7
 80028c2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	78fa      	ldrb	r2, [r7, #3]
 80028ca:	4611      	mov	r1, r2
 80028cc:	4618      	mov	r0, r3
 80028ce:	f005 f9a7 	bl	8007c20 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	78fa      	ldrb	r2, [r7, #3]
 80028d8:	4611      	mov	r1, r2
 80028da:	4618      	mov	r0, r3
 80028dc:	f005 f82e 	bl	800793c <USB_ReadChInterrupts>
 80028e0:	4603      	mov	r3, r0
 80028e2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028ea:	d112      	bne.n	8002912 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	78fa      	ldrb	r2, [r7, #3]
 80028f2:	4611      	mov	r1, r2
 80028f4:	4618      	mov	r0, r3
 80028f6:	f005 f993 	bl	8007c20 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80028fa:	78fb      	ldrb	r3, [r7, #3]
 80028fc:	015a      	lsls	r2, r3, #5
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	4413      	add	r3, r2
 8002902:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002906:	461a      	mov	r2, r3
 8002908:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800290c:	6093      	str	r3, [r2, #8]
 800290e:	f000 bd75 	b.w	80033fc <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	78fa      	ldrb	r2, [r7, #3]
 8002918:	4611      	mov	r1, r2
 800291a:	4618      	mov	r0, r3
 800291c:	f005 f80e 	bl	800793c <USB_ReadChInterrupts>
 8002920:	4603      	mov	r3, r0
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b01      	cmp	r3, #1
 8002928:	f040 8128 	bne.w	8002b7c <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800292c:	78fb      	ldrb	r3, [r7, #3]
 800292e:	015a      	lsls	r2, r3, #5
 8002930:	693b      	ldr	r3, [r7, #16]
 8002932:	4413      	add	r3, r2
 8002934:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002938:	461a      	mov	r2, r3
 800293a:	2320      	movs	r3, #32
 800293c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800293e:	78fa      	ldrb	r2, [r7, #3]
 8002940:	6879      	ldr	r1, [r7, #4]
 8002942:	4613      	mov	r3, r2
 8002944:	011b      	lsls	r3, r3, #4
 8002946:	1a9b      	subs	r3, r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	440b      	add	r3, r1
 800294c:	331b      	adds	r3, #27
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d119      	bne.n	8002988 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002954:	78fa      	ldrb	r2, [r7, #3]
 8002956:	6879      	ldr	r1, [r7, #4]
 8002958:	4613      	mov	r3, r2
 800295a:	011b      	lsls	r3, r3, #4
 800295c:	1a9b      	subs	r3, r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	440b      	add	r3, r1
 8002962:	331b      	adds	r3, #27
 8002964:	2200      	movs	r2, #0
 8002966:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002968:	78fb      	ldrb	r3, [r7, #3]
 800296a:	015a      	lsls	r2, r3, #5
 800296c:	693b      	ldr	r3, [r7, #16]
 800296e:	4413      	add	r3, r2
 8002970:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002974:	685b      	ldr	r3, [r3, #4]
 8002976:	78fa      	ldrb	r2, [r7, #3]
 8002978:	0151      	lsls	r1, r2, #5
 800297a:	693a      	ldr	r2, [r7, #16]
 800297c:	440a      	add	r2, r1
 800297e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002982:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002986:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	799b      	ldrb	r3, [r3, #6]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d01b      	beq.n	80029c8 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002990:	78fa      	ldrb	r2, [r7, #3]
 8002992:	6879      	ldr	r1, [r7, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	011b      	lsls	r3, r3, #4
 8002998:	1a9b      	subs	r3, r3, r2
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	440b      	add	r3, r1
 800299e:	3330      	adds	r3, #48	@ 0x30
 80029a0:	6819      	ldr	r1, [r3, #0]
 80029a2:	78fb      	ldrb	r3, [r7, #3]
 80029a4:	015a      	lsls	r2, r3, #5
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	4413      	add	r3, r2
 80029aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029ae:	691b      	ldr	r3, [r3, #16]
 80029b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029b4:	78fa      	ldrb	r2, [r7, #3]
 80029b6:	1ac9      	subs	r1, r1, r3
 80029b8:	6878      	ldr	r0, [r7, #4]
 80029ba:	4613      	mov	r3, r2
 80029bc:	011b      	lsls	r3, r3, #4
 80029be:	1a9b      	subs	r3, r3, r2
 80029c0:	009b      	lsls	r3, r3, #2
 80029c2:	4403      	add	r3, r0
 80029c4:	3338      	adds	r3, #56	@ 0x38
 80029c6:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80029c8:	78fa      	ldrb	r2, [r7, #3]
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	1a9b      	subs	r3, r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	334d      	adds	r3, #77	@ 0x4d
 80029d8:	2201      	movs	r2, #1
 80029da:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80029dc:	78fa      	ldrb	r2, [r7, #3]
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	4613      	mov	r3, r2
 80029e2:	011b      	lsls	r3, r3, #4
 80029e4:	1a9b      	subs	r3, r3, r2
 80029e6:	009b      	lsls	r3, r3, #2
 80029e8:	440b      	add	r3, r1
 80029ea:	3344      	adds	r3, #68	@ 0x44
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80029f0:	78fb      	ldrb	r3, [r7, #3]
 80029f2:	015a      	lsls	r2, r3, #5
 80029f4:	693b      	ldr	r3, [r7, #16]
 80029f6:	4413      	add	r3, r2
 80029f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029fc:	461a      	mov	r2, r3
 80029fe:	2301      	movs	r3, #1
 8002a00:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a02:	78fa      	ldrb	r2, [r7, #3]
 8002a04:	6879      	ldr	r1, [r7, #4]
 8002a06:	4613      	mov	r3, r2
 8002a08:	011b      	lsls	r3, r3, #4
 8002a0a:	1a9b      	subs	r3, r3, r2
 8002a0c:	009b      	lsls	r3, r3, #2
 8002a0e:	440b      	add	r3, r1
 8002a10:	3326      	adds	r3, #38	@ 0x26
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d00a      	beq.n	8002a2e <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a18:	78fa      	ldrb	r2, [r7, #3]
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	1a9b      	subs	r3, r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	3326      	adds	r3, #38	@ 0x26
 8002a28:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a2a:	2b02      	cmp	r3, #2
 8002a2c:	d110      	bne.n	8002a50 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	78fa      	ldrb	r2, [r7, #3]
 8002a34:	4611      	mov	r1, r2
 8002a36:	4618      	mov	r0, r3
 8002a38:	f005 f8f2 	bl	8007c20 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002a3c:	78fb      	ldrb	r3, [r7, #3]
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	693b      	ldr	r3, [r7, #16]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a48:	461a      	mov	r2, r3
 8002a4a:	2310      	movs	r3, #16
 8002a4c:	6093      	str	r3, [r2, #8]
 8002a4e:	e03d      	b.n	8002acc <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002a50:	78fa      	ldrb	r2, [r7, #3]
 8002a52:	6879      	ldr	r1, [r7, #4]
 8002a54:	4613      	mov	r3, r2
 8002a56:	011b      	lsls	r3, r3, #4
 8002a58:	1a9b      	subs	r3, r3, r2
 8002a5a:	009b      	lsls	r3, r3, #2
 8002a5c:	440b      	add	r3, r1
 8002a5e:	3326      	adds	r3, #38	@ 0x26
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	2b03      	cmp	r3, #3
 8002a64:	d00a      	beq.n	8002a7c <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002a66:	78fa      	ldrb	r2, [r7, #3]
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	011b      	lsls	r3, r3, #4
 8002a6e:	1a9b      	subs	r3, r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	440b      	add	r3, r1
 8002a74:	3326      	adds	r3, #38	@ 0x26
 8002a76:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d127      	bne.n	8002acc <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	78fa      	ldrb	r2, [r7, #3]
 8002a8c:	0151      	lsls	r1, r2, #5
 8002a8e:	693a      	ldr	r2, [r7, #16]
 8002a90:	440a      	add	r2, r1
 8002a92:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a96:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002a9a:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002a9c:	78fa      	ldrb	r2, [r7, #3]
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	1a9b      	subs	r3, r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	334c      	adds	r3, #76	@ 0x4c
 8002aac:	2201      	movs	r2, #1
 8002aae:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002ab0:	78fa      	ldrb	r2, [r7, #3]
 8002ab2:	6879      	ldr	r1, [r7, #4]
 8002ab4:	4613      	mov	r3, r2
 8002ab6:	011b      	lsls	r3, r3, #4
 8002ab8:	1a9b      	subs	r3, r3, r2
 8002aba:	009b      	lsls	r3, r3, #2
 8002abc:	440b      	add	r3, r1
 8002abe:	334c      	adds	r3, #76	@ 0x4c
 8002ac0:	781a      	ldrb	r2, [r3, #0]
 8002ac2:	78fb      	ldrb	r3, [r7, #3]
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	6878      	ldr	r0, [r7, #4]
 8002ac8:	f7ff fe24 	bl	8002714 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	799b      	ldrb	r3, [r3, #6]
 8002ad0:	2b01      	cmp	r3, #1
 8002ad2:	d13b      	bne.n	8002b4c <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002ad4:	78fa      	ldrb	r2, [r7, #3]
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	011b      	lsls	r3, r3, #4
 8002adc:	1a9b      	subs	r3, r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	3338      	adds	r3, #56	@ 0x38
 8002ae4:	6819      	ldr	r1, [r3, #0]
 8002ae6:	78fa      	ldrb	r2, [r7, #3]
 8002ae8:	6878      	ldr	r0, [r7, #4]
 8002aea:	4613      	mov	r3, r2
 8002aec:	011b      	lsls	r3, r3, #4
 8002aee:	1a9b      	subs	r3, r3, r2
 8002af0:	009b      	lsls	r3, r3, #2
 8002af2:	4403      	add	r3, r0
 8002af4:	3328      	adds	r3, #40	@ 0x28
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	440b      	add	r3, r1
 8002afa:	1e59      	subs	r1, r3, #1
 8002afc:	78fa      	ldrb	r2, [r7, #3]
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	011b      	lsls	r3, r3, #4
 8002b04:	1a9b      	subs	r3, r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	4403      	add	r3, r0
 8002b0a:	3328      	adds	r3, #40	@ 0x28
 8002b0c:	881b      	ldrh	r3, [r3, #0]
 8002b0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 8470 	beq.w	80033fc <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002b1c:	78fa      	ldrb	r2, [r7, #3]
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	4613      	mov	r3, r2
 8002b22:	011b      	lsls	r3, r3, #4
 8002b24:	1a9b      	subs	r3, r3, r2
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	333c      	adds	r3, #60	@ 0x3c
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	78fa      	ldrb	r2, [r7, #3]
 8002b30:	f083 0301 	eor.w	r3, r3, #1
 8002b34:	b2d8      	uxtb	r0, r3
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	4613      	mov	r3, r2
 8002b3a:	011b      	lsls	r3, r3, #4
 8002b3c:	1a9b      	subs	r3, r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	440b      	add	r3, r1
 8002b42:	333c      	adds	r3, #60	@ 0x3c
 8002b44:	4602      	mov	r2, r0
 8002b46:	701a      	strb	r2, [r3, #0]
 8002b48:	f000 bc58 	b.w	80033fc <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002b4c:	78fa      	ldrb	r2, [r7, #3]
 8002b4e:	6879      	ldr	r1, [r7, #4]
 8002b50:	4613      	mov	r3, r2
 8002b52:	011b      	lsls	r3, r3, #4
 8002b54:	1a9b      	subs	r3, r3, r2
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	440b      	add	r3, r1
 8002b5a:	333c      	adds	r3, #60	@ 0x3c
 8002b5c:	781b      	ldrb	r3, [r3, #0]
 8002b5e:	78fa      	ldrb	r2, [r7, #3]
 8002b60:	f083 0301 	eor.w	r3, r3, #1
 8002b64:	b2d8      	uxtb	r0, r3
 8002b66:	6879      	ldr	r1, [r7, #4]
 8002b68:	4613      	mov	r3, r2
 8002b6a:	011b      	lsls	r3, r3, #4
 8002b6c:	1a9b      	subs	r3, r3, r2
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	440b      	add	r3, r1
 8002b72:	333c      	adds	r3, #60	@ 0x3c
 8002b74:	4602      	mov	r2, r0
 8002b76:	701a      	strb	r2, [r3, #0]
 8002b78:	f000 bc40 	b.w	80033fc <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	78fa      	ldrb	r2, [r7, #3]
 8002b82:	4611      	mov	r1, r2
 8002b84:	4618      	mov	r0, r3
 8002b86:	f004 fed9 	bl	800793c <USB_ReadChInterrupts>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	f003 0320 	and.w	r3, r3, #32
 8002b90:	2b20      	cmp	r3, #32
 8002b92:	d131      	bne.n	8002bf8 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002b94:	78fb      	ldrb	r3, [r7, #3]
 8002b96:	015a      	lsls	r2, r3, #5
 8002b98:	693b      	ldr	r3, [r7, #16]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	2320      	movs	r3, #32
 8002ba4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002ba6:	78fa      	ldrb	r2, [r7, #3]
 8002ba8:	6879      	ldr	r1, [r7, #4]
 8002baa:	4613      	mov	r3, r2
 8002bac:	011b      	lsls	r3, r3, #4
 8002bae:	1a9b      	subs	r3, r3, r2
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	331a      	adds	r3, #26
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	f040 841f 	bne.w	80033fc <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002bbe:	78fa      	ldrb	r2, [r7, #3]
 8002bc0:	6879      	ldr	r1, [r7, #4]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	011b      	lsls	r3, r3, #4
 8002bc6:	1a9b      	subs	r3, r3, r2
 8002bc8:	009b      	lsls	r3, r3, #2
 8002bca:	440b      	add	r3, r1
 8002bcc:	331b      	adds	r3, #27
 8002bce:	2201      	movs	r2, #1
 8002bd0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002bd2:	78fa      	ldrb	r2, [r7, #3]
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	011b      	lsls	r3, r3, #4
 8002bda:	1a9b      	subs	r3, r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	440b      	add	r3, r1
 8002be0:	334d      	adds	r3, #77	@ 0x4d
 8002be2:	2203      	movs	r2, #3
 8002be4:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	78fa      	ldrb	r2, [r7, #3]
 8002bec:	4611      	mov	r1, r2
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f005 f816 	bl	8007c20 <USB_HC_Halt>
 8002bf4:	f000 bc02 	b.w	80033fc <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	78fa      	ldrb	r2, [r7, #3]
 8002bfe:	4611      	mov	r1, r2
 8002c00:	4618      	mov	r0, r3
 8002c02:	f004 fe9b 	bl	800793c <USB_ReadChInterrupts>
 8002c06:	4603      	mov	r3, r0
 8002c08:	f003 0302 	and.w	r3, r3, #2
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	f040 8305 	bne.w	800321c <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002c12:	78fb      	ldrb	r3, [r7, #3]
 8002c14:	015a      	lsls	r2, r3, #5
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4413      	add	r3, r2
 8002c1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c1e:	461a      	mov	r2, r3
 8002c20:	2302      	movs	r3, #2
 8002c22:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002c24:	78fa      	ldrb	r2, [r7, #3]
 8002c26:	6879      	ldr	r1, [r7, #4]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	1a9b      	subs	r3, r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	440b      	add	r3, r1
 8002c32:	334d      	adds	r3, #77	@ 0x4d
 8002c34:	781b      	ldrb	r3, [r3, #0]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d114      	bne.n	8002c64 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c3a:	78fa      	ldrb	r2, [r7, #3]
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	011b      	lsls	r3, r3, #4
 8002c42:	1a9b      	subs	r3, r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	440b      	add	r3, r1
 8002c48:	334d      	adds	r3, #77	@ 0x4d
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002c4e:	78fa      	ldrb	r2, [r7, #3]
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	1a9b      	subs	r3, r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	334c      	adds	r3, #76	@ 0x4c
 8002c5e:	2201      	movs	r2, #1
 8002c60:	701a      	strb	r2, [r3, #0]
 8002c62:	e2cc      	b.n	80031fe <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002c64:	78fa      	ldrb	r2, [r7, #3]
 8002c66:	6879      	ldr	r1, [r7, #4]
 8002c68:	4613      	mov	r3, r2
 8002c6a:	011b      	lsls	r3, r3, #4
 8002c6c:	1a9b      	subs	r3, r3, r2
 8002c6e:	009b      	lsls	r3, r3, #2
 8002c70:	440b      	add	r3, r1
 8002c72:	334d      	adds	r3, #77	@ 0x4d
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b06      	cmp	r3, #6
 8002c78:	d114      	bne.n	8002ca4 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c7a:	78fa      	ldrb	r2, [r7, #3]
 8002c7c:	6879      	ldr	r1, [r7, #4]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	011b      	lsls	r3, r3, #4
 8002c82:	1a9b      	subs	r3, r3, r2
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	440b      	add	r3, r1
 8002c88:	334d      	adds	r3, #77	@ 0x4d
 8002c8a:	2202      	movs	r2, #2
 8002c8c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002c8e:	78fa      	ldrb	r2, [r7, #3]
 8002c90:	6879      	ldr	r1, [r7, #4]
 8002c92:	4613      	mov	r3, r2
 8002c94:	011b      	lsls	r3, r3, #4
 8002c96:	1a9b      	subs	r3, r3, r2
 8002c98:	009b      	lsls	r3, r3, #2
 8002c9a:	440b      	add	r3, r1
 8002c9c:	334c      	adds	r3, #76	@ 0x4c
 8002c9e:	2205      	movs	r2, #5
 8002ca0:	701a      	strb	r2, [r3, #0]
 8002ca2:	e2ac      	b.n	80031fe <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002ca4:	78fa      	ldrb	r2, [r7, #3]
 8002ca6:	6879      	ldr	r1, [r7, #4]
 8002ca8:	4613      	mov	r3, r2
 8002caa:	011b      	lsls	r3, r3, #4
 8002cac:	1a9b      	subs	r3, r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	334d      	adds	r3, #77	@ 0x4d
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	2b07      	cmp	r3, #7
 8002cb8:	d00b      	beq.n	8002cd2 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002cba:	78fa      	ldrb	r2, [r7, #3]
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	011b      	lsls	r3, r3, #4
 8002cc2:	1a9b      	subs	r3, r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	334d      	adds	r3, #77	@ 0x4d
 8002cca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002ccc:	2b09      	cmp	r3, #9
 8002cce:	f040 80a6 	bne.w	8002e1e <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	1a9b      	subs	r3, r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	334d      	adds	r3, #77	@ 0x4d
 8002ce2:	2202      	movs	r2, #2
 8002ce4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002ce6:	78fa      	ldrb	r2, [r7, #3]
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	011b      	lsls	r3, r3, #4
 8002cee:	1a9b      	subs	r3, r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	3344      	adds	r3, #68	@ 0x44
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	1c59      	adds	r1, r3, #1
 8002cfa:	6878      	ldr	r0, [r7, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	011b      	lsls	r3, r3, #4
 8002d00:	1a9b      	subs	r3, r3, r2
 8002d02:	009b      	lsls	r3, r3, #2
 8002d04:	4403      	add	r3, r0
 8002d06:	3344      	adds	r3, #68	@ 0x44
 8002d08:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002d0a:	78fa      	ldrb	r2, [r7, #3]
 8002d0c:	6879      	ldr	r1, [r7, #4]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	011b      	lsls	r3, r3, #4
 8002d12:	1a9b      	subs	r3, r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	440b      	add	r3, r1
 8002d18:	3344      	adds	r3, #68	@ 0x44
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d943      	bls.n	8002da8 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002d20:	78fa      	ldrb	r2, [r7, #3]
 8002d22:	6879      	ldr	r1, [r7, #4]
 8002d24:	4613      	mov	r3, r2
 8002d26:	011b      	lsls	r3, r3, #4
 8002d28:	1a9b      	subs	r3, r3, r2
 8002d2a:	009b      	lsls	r3, r3, #2
 8002d2c:	440b      	add	r3, r1
 8002d2e:	3344      	adds	r3, #68	@ 0x44
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002d34:	78fa      	ldrb	r2, [r7, #3]
 8002d36:	6879      	ldr	r1, [r7, #4]
 8002d38:	4613      	mov	r3, r2
 8002d3a:	011b      	lsls	r3, r3, #4
 8002d3c:	1a9b      	subs	r3, r3, r2
 8002d3e:	009b      	lsls	r3, r3, #2
 8002d40:	440b      	add	r3, r1
 8002d42:	331a      	adds	r3, #26
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d123      	bne.n	8002d92 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002d4a:	78fa      	ldrb	r2, [r7, #3]
 8002d4c:	6879      	ldr	r1, [r7, #4]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	011b      	lsls	r3, r3, #4
 8002d52:	1a9b      	subs	r3, r3, r2
 8002d54:	009b      	lsls	r3, r3, #2
 8002d56:	440b      	add	r3, r1
 8002d58:	331b      	adds	r3, #27
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002d5e:	78fa      	ldrb	r2, [r7, #3]
 8002d60:	6879      	ldr	r1, [r7, #4]
 8002d62:	4613      	mov	r3, r2
 8002d64:	011b      	lsls	r3, r3, #4
 8002d66:	1a9b      	subs	r3, r3, r2
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	440b      	add	r3, r1
 8002d6c:	331c      	adds	r3, #28
 8002d6e:	2200      	movs	r2, #0
 8002d70:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d72:	78fb      	ldrb	r3, [r7, #3]
 8002d74:	015a      	lsls	r2, r3, #5
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4413      	add	r3, r2
 8002d7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	78fa      	ldrb	r2, [r7, #3]
 8002d82:	0151      	lsls	r1, r2, #5
 8002d84:	693a      	ldr	r2, [r7, #16]
 8002d86:	440a      	add	r2, r1
 8002d88:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d8c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d90:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002d92:	78fa      	ldrb	r2, [r7, #3]
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	4613      	mov	r3, r2
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	1a9b      	subs	r3, r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	334c      	adds	r3, #76	@ 0x4c
 8002da2:	2204      	movs	r2, #4
 8002da4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002da6:	e229      	b.n	80031fc <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002da8:	78fa      	ldrb	r2, [r7, #3]
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	4613      	mov	r3, r2
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	1a9b      	subs	r3, r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	334c      	adds	r3, #76	@ 0x4c
 8002db8:	2202      	movs	r2, #2
 8002dba:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002dbc:	78fa      	ldrb	r2, [r7, #3]
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	1a9b      	subs	r3, r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	3326      	adds	r3, #38	@ 0x26
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00b      	beq.n	8002dea <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002dd2:	78fa      	ldrb	r2, [r7, #3]
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	4613      	mov	r3, r2
 8002dd8:	011b      	lsls	r3, r3, #4
 8002dda:	1a9b      	subs	r3, r3, r2
 8002ddc:	009b      	lsls	r3, r3, #2
 8002dde:	440b      	add	r3, r1
 8002de0:	3326      	adds	r3, #38	@ 0x26
 8002de2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002de4:	2b02      	cmp	r3, #2
 8002de6:	f040 8209 	bne.w	80031fc <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002dea:	78fb      	ldrb	r3, [r7, #3]
 8002dec:	015a      	lsls	r2, r3, #5
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	4413      	add	r3, r2
 8002df2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002e00:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e08:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002e0a:	78fb      	ldrb	r3, [r7, #3]
 8002e0c:	015a      	lsls	r2, r3, #5
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	4413      	add	r3, r2
 8002e12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e16:	461a      	mov	r2, r3
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e1c:	e1ee      	b.n	80031fc <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002e1e:	78fa      	ldrb	r2, [r7, #3]
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	4613      	mov	r3, r2
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	1a9b      	subs	r3, r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	334d      	adds	r3, #77	@ 0x4d
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b05      	cmp	r3, #5
 8002e32:	f040 80c8 	bne.w	8002fc6 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e36:	78fa      	ldrb	r2, [r7, #3]
 8002e38:	6879      	ldr	r1, [r7, #4]
 8002e3a:	4613      	mov	r3, r2
 8002e3c:	011b      	lsls	r3, r3, #4
 8002e3e:	1a9b      	subs	r3, r3, r2
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	440b      	add	r3, r1
 8002e44:	334d      	adds	r3, #77	@ 0x4d
 8002e46:	2202      	movs	r2, #2
 8002e48:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002e4a:	78fa      	ldrb	r2, [r7, #3]
 8002e4c:	6879      	ldr	r1, [r7, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	011b      	lsls	r3, r3, #4
 8002e52:	1a9b      	subs	r3, r3, r2
 8002e54:	009b      	lsls	r3, r3, #2
 8002e56:	440b      	add	r3, r1
 8002e58:	331b      	adds	r3, #27
 8002e5a:	781b      	ldrb	r3, [r3, #0]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	f040 81ce 	bne.w	80031fe <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	1a9b      	subs	r3, r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	440b      	add	r3, r1
 8002e70:	3326      	adds	r3, #38	@ 0x26
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	2b03      	cmp	r3, #3
 8002e76:	d16b      	bne.n	8002f50 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002e78:	78fa      	ldrb	r2, [r7, #3]
 8002e7a:	6879      	ldr	r1, [r7, #4]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	011b      	lsls	r3, r3, #4
 8002e80:	1a9b      	subs	r3, r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	440b      	add	r3, r1
 8002e86:	3348      	adds	r3, #72	@ 0x48
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	1c59      	adds	r1, r3, #1
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	4403      	add	r3, r0
 8002e98:	3348      	adds	r3, #72	@ 0x48
 8002e9a:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002e9c:	78fa      	ldrb	r2, [r7, #3]
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	1a9b      	subs	r3, r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	3348      	adds	r3, #72	@ 0x48
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2b02      	cmp	r3, #2
 8002eb0:	d943      	bls.n	8002f3a <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002eb2:	78fa      	ldrb	r2, [r7, #3]
 8002eb4:	6879      	ldr	r1, [r7, #4]
 8002eb6:	4613      	mov	r3, r2
 8002eb8:	011b      	lsls	r3, r3, #4
 8002eba:	1a9b      	subs	r3, r3, r2
 8002ebc:	009b      	lsls	r3, r3, #2
 8002ebe:	440b      	add	r3, r1
 8002ec0:	3348      	adds	r3, #72	@ 0x48
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002ec6:	78fa      	ldrb	r2, [r7, #3]
 8002ec8:	6879      	ldr	r1, [r7, #4]
 8002eca:	4613      	mov	r3, r2
 8002ecc:	011b      	lsls	r3, r3, #4
 8002ece:	1a9b      	subs	r3, r3, r2
 8002ed0:	009b      	lsls	r3, r3, #2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	331b      	adds	r3, #27
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002eda:	78fa      	ldrb	r2, [r7, #3]
 8002edc:	6879      	ldr	r1, [r7, #4]
 8002ede:	4613      	mov	r3, r2
 8002ee0:	011b      	lsls	r3, r3, #4
 8002ee2:	1a9b      	subs	r3, r3, r2
 8002ee4:	009b      	lsls	r3, r3, #2
 8002ee6:	440b      	add	r3, r1
 8002ee8:	3344      	adds	r3, #68	@ 0x44
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	2b02      	cmp	r3, #2
 8002eee:	d809      	bhi.n	8002f04 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002ef0:	78fa      	ldrb	r2, [r7, #3]
 8002ef2:	6879      	ldr	r1, [r7, #4]
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	011b      	lsls	r3, r3, #4
 8002ef8:	1a9b      	subs	r3, r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	331c      	adds	r3, #28
 8002f00:	2201      	movs	r2, #1
 8002f02:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002f04:	78fb      	ldrb	r3, [r7, #3]
 8002f06:	015a      	lsls	r2, r3, #5
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	4413      	add	r3, r2
 8002f0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	78fa      	ldrb	r2, [r7, #3]
 8002f14:	0151      	lsls	r1, r2, #5
 8002f16:	693a      	ldr	r2, [r7, #16]
 8002f18:	440a      	add	r2, r1
 8002f1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f22:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002f24:	78fa      	ldrb	r2, [r7, #3]
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	011b      	lsls	r3, r3, #4
 8002f2c:	1a9b      	subs	r3, r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	334c      	adds	r3, #76	@ 0x4c
 8002f34:	2204      	movs	r2, #4
 8002f36:	701a      	strb	r2, [r3, #0]
 8002f38:	e014      	b.n	8002f64 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f3a:	78fa      	ldrb	r2, [r7, #3]
 8002f3c:	6879      	ldr	r1, [r7, #4]
 8002f3e:	4613      	mov	r3, r2
 8002f40:	011b      	lsls	r3, r3, #4
 8002f42:	1a9b      	subs	r3, r3, r2
 8002f44:	009b      	lsls	r3, r3, #2
 8002f46:	440b      	add	r3, r1
 8002f48:	334c      	adds	r3, #76	@ 0x4c
 8002f4a:	2202      	movs	r2, #2
 8002f4c:	701a      	strb	r2, [r3, #0]
 8002f4e:	e009      	b.n	8002f64 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f50:	78fa      	ldrb	r2, [r7, #3]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	1a9b      	subs	r3, r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	334c      	adds	r3, #76	@ 0x4c
 8002f60:	2202      	movs	r2, #2
 8002f62:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f64:	78fa      	ldrb	r2, [r7, #3]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	1a9b      	subs	r3, r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	3326      	adds	r3, #38	@ 0x26
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d00b      	beq.n	8002f92 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002f7a:	78fa      	ldrb	r2, [r7, #3]
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	1a9b      	subs	r3, r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	3326      	adds	r3, #38	@ 0x26
 8002f8a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f8c:	2b02      	cmp	r3, #2
 8002f8e:	f040 8136 	bne.w	80031fe <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	015a      	lsls	r2, r3, #5
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	4413      	add	r3, r2
 8002f9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002fa8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002fb0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002fb2:	78fb      	ldrb	r3, [r7, #3]
 8002fb4:	015a      	lsls	r2, r3, #5
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	4413      	add	r3, r2
 8002fba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fbe:	461a      	mov	r2, r3
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6013      	str	r3, [r2, #0]
 8002fc4:	e11b      	b.n	80031fe <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002fc6:	78fa      	ldrb	r2, [r7, #3]
 8002fc8:	6879      	ldr	r1, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	011b      	lsls	r3, r3, #4
 8002fce:	1a9b      	subs	r3, r3, r2
 8002fd0:	009b      	lsls	r3, r3, #2
 8002fd2:	440b      	add	r3, r1
 8002fd4:	334d      	adds	r3, #77	@ 0x4d
 8002fd6:	781b      	ldrb	r3, [r3, #0]
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	f040 8081 	bne.w	80030e0 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002fde:	78fa      	ldrb	r2, [r7, #3]
 8002fe0:	6879      	ldr	r1, [r7, #4]
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	011b      	lsls	r3, r3, #4
 8002fe6:	1a9b      	subs	r3, r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	334d      	adds	r3, #77	@ 0x4d
 8002fee:	2202      	movs	r2, #2
 8002ff0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002ff2:	78fa      	ldrb	r2, [r7, #3]
 8002ff4:	6879      	ldr	r1, [r7, #4]
 8002ff6:	4613      	mov	r3, r2
 8002ff8:	011b      	lsls	r3, r3, #4
 8002ffa:	1a9b      	subs	r3, r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	440b      	add	r3, r1
 8003000:	331b      	adds	r3, #27
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b01      	cmp	r3, #1
 8003006:	f040 80fa 	bne.w	80031fe <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800300a:	78fa      	ldrb	r2, [r7, #3]
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	1a9b      	subs	r3, r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	334c      	adds	r3, #76	@ 0x4c
 800301a:	2202      	movs	r2, #2
 800301c:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800301e:	78fb      	ldrb	r3, [r7, #3]
 8003020:	015a      	lsls	r2, r3, #5
 8003022:	693b      	ldr	r3, [r7, #16]
 8003024:	4413      	add	r3, r2
 8003026:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	78fa      	ldrb	r2, [r7, #3]
 800302e:	0151      	lsls	r1, r2, #5
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	440a      	add	r2, r1
 8003034:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003038:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800303c:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800303e:	78fb      	ldrb	r3, [r7, #3]
 8003040:	015a      	lsls	r2, r3, #5
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4413      	add	r3, r2
 8003046:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800304a:	68db      	ldr	r3, [r3, #12]
 800304c:	78fa      	ldrb	r2, [r7, #3]
 800304e:	0151      	lsls	r1, r2, #5
 8003050:	693a      	ldr	r2, [r7, #16]
 8003052:	440a      	add	r2, r1
 8003054:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003058:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800305c:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800305e:	78fb      	ldrb	r3, [r7, #3]
 8003060:	015a      	lsls	r2, r3, #5
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	4413      	add	r3, r2
 8003066:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	78fa      	ldrb	r2, [r7, #3]
 800306e:	0151      	lsls	r1, r2, #5
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	440a      	add	r2, r1
 8003074:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003078:	f023 0320 	bic.w	r3, r3, #32
 800307c:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800307e:	78fa      	ldrb	r2, [r7, #3]
 8003080:	6879      	ldr	r1, [r7, #4]
 8003082:	4613      	mov	r3, r2
 8003084:	011b      	lsls	r3, r3, #4
 8003086:	1a9b      	subs	r3, r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	440b      	add	r3, r1
 800308c:	3326      	adds	r3, #38	@ 0x26
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d00b      	beq.n	80030ac <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003094:	78fa      	ldrb	r2, [r7, #3]
 8003096:	6879      	ldr	r1, [r7, #4]
 8003098:	4613      	mov	r3, r2
 800309a:	011b      	lsls	r3, r3, #4
 800309c:	1a9b      	subs	r3, r3, r2
 800309e:	009b      	lsls	r3, r3, #2
 80030a0:	440b      	add	r3, r1
 80030a2:	3326      	adds	r3, #38	@ 0x26
 80030a4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030a6:	2b02      	cmp	r3, #2
 80030a8:	f040 80a9 	bne.w	80031fe <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80030ac:	78fb      	ldrb	r3, [r7, #3]
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	693b      	ldr	r3, [r7, #16]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80030c2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80030ca:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80030cc:	78fb      	ldrb	r3, [r7, #3]
 80030ce:	015a      	lsls	r2, r3, #5
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	4413      	add	r3, r2
 80030d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030d8:	461a      	mov	r2, r3
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6013      	str	r3, [r2, #0]
 80030de:	e08e      	b.n	80031fe <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80030e0:	78fa      	ldrb	r2, [r7, #3]
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	1a9b      	subs	r3, r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	334d      	adds	r3, #77	@ 0x4d
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b04      	cmp	r3, #4
 80030f4:	d143      	bne.n	800317e <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030f6:	78fa      	ldrb	r2, [r7, #3]
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	4613      	mov	r3, r2
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	1a9b      	subs	r3, r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	440b      	add	r3, r1
 8003104:	334d      	adds	r3, #77	@ 0x4d
 8003106:	2202      	movs	r2, #2
 8003108:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800310a:	78fa      	ldrb	r2, [r7, #3]
 800310c:	6879      	ldr	r1, [r7, #4]
 800310e:	4613      	mov	r3, r2
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	1a9b      	subs	r3, r3, r2
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	440b      	add	r3, r1
 8003118:	334c      	adds	r3, #76	@ 0x4c
 800311a:	2202      	movs	r2, #2
 800311c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800311e:	78fa      	ldrb	r2, [r7, #3]
 8003120:	6879      	ldr	r1, [r7, #4]
 8003122:	4613      	mov	r3, r2
 8003124:	011b      	lsls	r3, r3, #4
 8003126:	1a9b      	subs	r3, r3, r2
 8003128:	009b      	lsls	r3, r3, #2
 800312a:	440b      	add	r3, r1
 800312c:	3326      	adds	r3, #38	@ 0x26
 800312e:	781b      	ldrb	r3, [r3, #0]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d00a      	beq.n	800314a <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003134:	78fa      	ldrb	r2, [r7, #3]
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	1a9b      	subs	r3, r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	3326      	adds	r3, #38	@ 0x26
 8003144:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003146:	2b02      	cmp	r3, #2
 8003148:	d159      	bne.n	80031fe <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800314a:	78fb      	ldrb	r3, [r7, #3]
 800314c:	015a      	lsls	r2, r3, #5
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	4413      	add	r3, r2
 8003152:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003160:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003168:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800316a:	78fb      	ldrb	r3, [r7, #3]
 800316c:	015a      	lsls	r2, r3, #5
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	4413      	add	r3, r2
 8003172:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003176:	461a      	mov	r2, r3
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	6013      	str	r3, [r2, #0]
 800317c:	e03f      	b.n	80031fe <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800317e:	78fa      	ldrb	r2, [r7, #3]
 8003180:	6879      	ldr	r1, [r7, #4]
 8003182:	4613      	mov	r3, r2
 8003184:	011b      	lsls	r3, r3, #4
 8003186:	1a9b      	subs	r3, r3, r2
 8003188:	009b      	lsls	r3, r3, #2
 800318a:	440b      	add	r3, r1
 800318c:	334d      	adds	r3, #77	@ 0x4d
 800318e:	781b      	ldrb	r3, [r3, #0]
 8003190:	2b08      	cmp	r3, #8
 8003192:	d126      	bne.n	80031e2 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003194:	78fa      	ldrb	r2, [r7, #3]
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	334d      	adds	r3, #77	@ 0x4d
 80031a4:	2202      	movs	r2, #2
 80031a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80031a8:	78fa      	ldrb	r2, [r7, #3]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	1a9b      	subs	r3, r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	3344      	adds	r3, #68	@ 0x44
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	1c59      	adds	r1, r3, #1
 80031bc:	6878      	ldr	r0, [r7, #4]
 80031be:	4613      	mov	r3, r2
 80031c0:	011b      	lsls	r3, r3, #4
 80031c2:	1a9b      	subs	r3, r3, r2
 80031c4:	009b      	lsls	r3, r3, #2
 80031c6:	4403      	add	r3, r0
 80031c8:	3344      	adds	r3, #68	@ 0x44
 80031ca:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80031cc:	78fa      	ldrb	r2, [r7, #3]
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	4613      	mov	r3, r2
 80031d2:	011b      	lsls	r3, r3, #4
 80031d4:	1a9b      	subs	r3, r3, r2
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	334c      	adds	r3, #76	@ 0x4c
 80031dc:	2204      	movs	r2, #4
 80031de:	701a      	strb	r2, [r3, #0]
 80031e0:	e00d      	b.n	80031fe <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80031e2:	78fa      	ldrb	r2, [r7, #3]
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	1a9b      	subs	r3, r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	334d      	adds	r3, #77	@ 0x4d
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	f000 8100 	beq.w	80033fa <HCD_HC_IN_IRQHandler+0xcca>
 80031fa:	e000      	b.n	80031fe <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80031fc:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80031fe:	78fa      	ldrb	r2, [r7, #3]
 8003200:	6879      	ldr	r1, [r7, #4]
 8003202:	4613      	mov	r3, r2
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	1a9b      	subs	r3, r3, r2
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	440b      	add	r3, r1
 800320c:	334c      	adds	r3, #76	@ 0x4c
 800320e:	781a      	ldrb	r2, [r3, #0]
 8003210:	78fb      	ldrb	r3, [r7, #3]
 8003212:	4619      	mov	r1, r3
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7ff fa7d 	bl	8002714 <HAL_HCD_HC_NotifyURBChange_Callback>
 800321a:	e0ef      	b.n	80033fc <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	78fa      	ldrb	r2, [r7, #3]
 8003222:	4611      	mov	r1, r2
 8003224:	4618      	mov	r0, r3
 8003226:	f004 fb89 	bl	800793c <USB_ReadChInterrupts>
 800322a:	4603      	mov	r3, r0
 800322c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003230:	2b40      	cmp	r3, #64	@ 0x40
 8003232:	d12f      	bne.n	8003294 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003234:	78fb      	ldrb	r3, [r7, #3]
 8003236:	015a      	lsls	r2, r3, #5
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	4413      	add	r3, r2
 800323c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003240:	461a      	mov	r2, r3
 8003242:	2340      	movs	r3, #64	@ 0x40
 8003244:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8003246:	78fa      	ldrb	r2, [r7, #3]
 8003248:	6879      	ldr	r1, [r7, #4]
 800324a:	4613      	mov	r3, r2
 800324c:	011b      	lsls	r3, r3, #4
 800324e:	1a9b      	subs	r3, r3, r2
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	440b      	add	r3, r1
 8003254:	334d      	adds	r3, #77	@ 0x4d
 8003256:	2205      	movs	r2, #5
 8003258:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800325a:	78fa      	ldrb	r2, [r7, #3]
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	4613      	mov	r3, r2
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	1a9b      	subs	r3, r3, r2
 8003264:	009b      	lsls	r3, r3, #2
 8003266:	440b      	add	r3, r1
 8003268:	331a      	adds	r3, #26
 800326a:	781b      	ldrb	r3, [r3, #0]
 800326c:	2b00      	cmp	r3, #0
 800326e:	d109      	bne.n	8003284 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003270:	78fa      	ldrb	r2, [r7, #3]
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	4613      	mov	r3, r2
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	1a9b      	subs	r3, r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	3344      	adds	r3, #68	@ 0x44
 8003280:	2200      	movs	r2, #0
 8003282:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	78fa      	ldrb	r2, [r7, #3]
 800328a:	4611      	mov	r1, r2
 800328c:	4618      	mov	r0, r3
 800328e:	f004 fcc7 	bl	8007c20 <USB_HC_Halt>
 8003292:	e0b3      	b.n	80033fc <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	78fa      	ldrb	r2, [r7, #3]
 800329a:	4611      	mov	r1, r2
 800329c:	4618      	mov	r0, r3
 800329e:	f004 fb4d 	bl	800793c <USB_ReadChInterrupts>
 80032a2:	4603      	mov	r3, r0
 80032a4:	f003 0310 	and.w	r3, r3, #16
 80032a8:	2b10      	cmp	r3, #16
 80032aa:	f040 80a7 	bne.w	80033fc <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80032ae:	78fa      	ldrb	r2, [r7, #3]
 80032b0:	6879      	ldr	r1, [r7, #4]
 80032b2:	4613      	mov	r3, r2
 80032b4:	011b      	lsls	r3, r3, #4
 80032b6:	1a9b      	subs	r3, r3, r2
 80032b8:	009b      	lsls	r3, r3, #2
 80032ba:	440b      	add	r3, r1
 80032bc:	3326      	adds	r3, #38	@ 0x26
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b03      	cmp	r3, #3
 80032c2:	d11b      	bne.n	80032fc <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80032c4:	78fa      	ldrb	r2, [r7, #3]
 80032c6:	6879      	ldr	r1, [r7, #4]
 80032c8:	4613      	mov	r3, r2
 80032ca:	011b      	lsls	r3, r3, #4
 80032cc:	1a9b      	subs	r3, r3, r2
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	440b      	add	r3, r1
 80032d2:	3344      	adds	r3, #68	@ 0x44
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80032d8:	78fa      	ldrb	r2, [r7, #3]
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	4613      	mov	r3, r2
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	1a9b      	subs	r3, r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	440b      	add	r3, r1
 80032e6:	334d      	adds	r3, #77	@ 0x4d
 80032e8:	2204      	movs	r2, #4
 80032ea:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	78fa      	ldrb	r2, [r7, #3]
 80032f2:	4611      	mov	r1, r2
 80032f4:	4618      	mov	r0, r3
 80032f6:	f004 fc93 	bl	8007c20 <USB_HC_Halt>
 80032fa:	e03f      	b.n	800337c <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032fc:	78fa      	ldrb	r2, [r7, #3]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	1a9b      	subs	r3, r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	3326      	adds	r3, #38	@ 0x26
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00a      	beq.n	8003328 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003312:	78fa      	ldrb	r2, [r7, #3]
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	1a9b      	subs	r3, r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	440b      	add	r3, r1
 8003320:	3326      	adds	r3, #38	@ 0x26
 8003322:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003324:	2b02      	cmp	r3, #2
 8003326:	d129      	bne.n	800337c <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003328:	78fa      	ldrb	r2, [r7, #3]
 800332a:	6879      	ldr	r1, [r7, #4]
 800332c:	4613      	mov	r3, r2
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	1a9b      	subs	r3, r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	440b      	add	r3, r1
 8003336:	3344      	adds	r3, #68	@ 0x44
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	799b      	ldrb	r3, [r3, #6]
 8003340:	2b00      	cmp	r3, #0
 8003342:	d00a      	beq.n	800335a <HCD_HC_IN_IRQHandler+0xc2a>
 8003344:	78fa      	ldrb	r2, [r7, #3]
 8003346:	6879      	ldr	r1, [r7, #4]
 8003348:	4613      	mov	r3, r2
 800334a:	011b      	lsls	r3, r3, #4
 800334c:	1a9b      	subs	r3, r3, r2
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	440b      	add	r3, r1
 8003352:	331b      	adds	r3, #27
 8003354:	781b      	ldrb	r3, [r3, #0]
 8003356:	2b01      	cmp	r3, #1
 8003358:	d110      	bne.n	800337c <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800335a:	78fa      	ldrb	r2, [r7, #3]
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	1a9b      	subs	r3, r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	440b      	add	r3, r1
 8003368:	334d      	adds	r3, #77	@ 0x4d
 800336a:	2204      	movs	r2, #4
 800336c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	78fa      	ldrb	r2, [r7, #3]
 8003374:	4611      	mov	r1, r2
 8003376:	4618      	mov	r0, r3
 8003378:	f004 fc52 	bl	8007c20 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800337c:	78fa      	ldrb	r2, [r7, #3]
 800337e:	6879      	ldr	r1, [r7, #4]
 8003380:	4613      	mov	r3, r2
 8003382:	011b      	lsls	r3, r3, #4
 8003384:	1a9b      	subs	r3, r3, r2
 8003386:	009b      	lsls	r3, r3, #2
 8003388:	440b      	add	r3, r1
 800338a:	331b      	adds	r3, #27
 800338c:	781b      	ldrb	r3, [r3, #0]
 800338e:	2b01      	cmp	r3, #1
 8003390:	d129      	bne.n	80033e6 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003392:	78fa      	ldrb	r2, [r7, #3]
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	1a9b      	subs	r3, r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	331b      	adds	r3, #27
 80033a2:	2200      	movs	r2, #0
 80033a4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80033a6:	78fb      	ldrb	r3, [r7, #3]
 80033a8:	015a      	lsls	r2, r3, #5
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	4413      	add	r3, r2
 80033ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	78fa      	ldrb	r2, [r7, #3]
 80033b6:	0151      	lsls	r1, r2, #5
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	440a      	add	r2, r1
 80033bc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80033c0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033c4:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80033c6:	78fb      	ldrb	r3, [r7, #3]
 80033c8:	015a      	lsls	r2, r3, #5
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	4413      	add	r3, r2
 80033ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	78fa      	ldrb	r2, [r7, #3]
 80033d6:	0151      	lsls	r1, r2, #5
 80033d8:	693a      	ldr	r2, [r7, #16]
 80033da:	440a      	add	r2, r1
 80033dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80033e0:	f043 0320 	orr.w	r3, r3, #32
 80033e4:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80033e6:	78fb      	ldrb	r3, [r7, #3]
 80033e8:	015a      	lsls	r2, r3, #5
 80033ea:	693b      	ldr	r3, [r7, #16]
 80033ec:	4413      	add	r3, r2
 80033ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033f2:	461a      	mov	r2, r3
 80033f4:	2310      	movs	r3, #16
 80033f6:	6093      	str	r3, [r2, #8]
 80033f8:	e000      	b.n	80033fc <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80033fa:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}

08003402 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003402:	b580      	push	{r7, lr}
 8003404:	b086      	sub	sp, #24
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
 800340a:	460b      	mov	r3, r1
 800340c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	78fa      	ldrb	r2, [r7, #3]
 800341e:	4611      	mov	r1, r2
 8003420:	4618      	mov	r0, r3
 8003422:	f004 fa8b 	bl	800793c <USB_ReadChInterrupts>
 8003426:	4603      	mov	r3, r0
 8003428:	f003 0304 	and.w	r3, r3, #4
 800342c:	2b04      	cmp	r3, #4
 800342e:	d11b      	bne.n	8003468 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003430:	78fb      	ldrb	r3, [r7, #3]
 8003432:	015a      	lsls	r2, r3, #5
 8003434:	693b      	ldr	r3, [r7, #16]
 8003436:	4413      	add	r3, r2
 8003438:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800343c:	461a      	mov	r2, r3
 800343e:	2304      	movs	r3, #4
 8003440:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8003442:	78fa      	ldrb	r2, [r7, #3]
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	4613      	mov	r3, r2
 8003448:	011b      	lsls	r3, r3, #4
 800344a:	1a9b      	subs	r3, r3, r2
 800344c:	009b      	lsls	r3, r3, #2
 800344e:	440b      	add	r3, r1
 8003450:	334d      	adds	r3, #77	@ 0x4d
 8003452:	2207      	movs	r2, #7
 8003454:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	4611      	mov	r1, r2
 800345e:	4618      	mov	r0, r3
 8003460:	f004 fbde 	bl	8007c20 <USB_HC_Halt>
 8003464:	f000 bc89 	b.w	8003d7a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	78fa      	ldrb	r2, [r7, #3]
 800346e:	4611      	mov	r1, r2
 8003470:	4618      	mov	r0, r3
 8003472:	f004 fa63 	bl	800793c <USB_ReadChInterrupts>
 8003476:	4603      	mov	r3, r0
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b20      	cmp	r3, #32
 800347e:	f040 8082 	bne.w	8003586 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003482:	78fb      	ldrb	r3, [r7, #3]
 8003484:	015a      	lsls	r2, r3, #5
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	4413      	add	r3, r2
 800348a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800348e:	461a      	mov	r2, r3
 8003490:	2320      	movs	r3, #32
 8003492:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003494:	78fa      	ldrb	r2, [r7, #3]
 8003496:	6879      	ldr	r1, [r7, #4]
 8003498:	4613      	mov	r3, r2
 800349a:	011b      	lsls	r3, r3, #4
 800349c:	1a9b      	subs	r3, r3, r2
 800349e:	009b      	lsls	r3, r3, #2
 80034a0:	440b      	add	r3, r1
 80034a2:	3319      	adds	r3, #25
 80034a4:	781b      	ldrb	r3, [r3, #0]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d124      	bne.n	80034f4 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80034aa:	78fa      	ldrb	r2, [r7, #3]
 80034ac:	6879      	ldr	r1, [r7, #4]
 80034ae:	4613      	mov	r3, r2
 80034b0:	011b      	lsls	r3, r3, #4
 80034b2:	1a9b      	subs	r3, r3, r2
 80034b4:	009b      	lsls	r3, r3, #2
 80034b6:	440b      	add	r3, r1
 80034b8:	3319      	adds	r3, #25
 80034ba:	2200      	movs	r2, #0
 80034bc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80034be:	78fa      	ldrb	r2, [r7, #3]
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	011b      	lsls	r3, r3, #4
 80034c6:	1a9b      	subs	r3, r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	334c      	adds	r3, #76	@ 0x4c
 80034ce:	2202      	movs	r2, #2
 80034d0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80034d2:	78fa      	ldrb	r2, [r7, #3]
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	1a9b      	subs	r3, r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	334d      	adds	r3, #77	@ 0x4d
 80034e2:	2203      	movs	r2, #3
 80034e4:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	78fa      	ldrb	r2, [r7, #3]
 80034ec:	4611      	mov	r1, r2
 80034ee:	4618      	mov	r0, r3
 80034f0:	f004 fb96 	bl	8007c20 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80034f4:	78fa      	ldrb	r2, [r7, #3]
 80034f6:	6879      	ldr	r1, [r7, #4]
 80034f8:	4613      	mov	r3, r2
 80034fa:	011b      	lsls	r3, r3, #4
 80034fc:	1a9b      	subs	r3, r3, r2
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	440b      	add	r3, r1
 8003502:	331a      	adds	r3, #26
 8003504:	781b      	ldrb	r3, [r3, #0]
 8003506:	2b01      	cmp	r3, #1
 8003508:	f040 8437 	bne.w	8003d7a <HCD_HC_OUT_IRQHandler+0x978>
 800350c:	78fa      	ldrb	r2, [r7, #3]
 800350e:	6879      	ldr	r1, [r7, #4]
 8003510:	4613      	mov	r3, r2
 8003512:	011b      	lsls	r3, r3, #4
 8003514:	1a9b      	subs	r3, r3, r2
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	440b      	add	r3, r1
 800351a:	331b      	adds	r3, #27
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	2b00      	cmp	r3, #0
 8003520:	f040 842b 	bne.w	8003d7a <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003524:	78fa      	ldrb	r2, [r7, #3]
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	4613      	mov	r3, r2
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	1a9b      	subs	r3, r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	3326      	adds	r3, #38	@ 0x26
 8003534:	781b      	ldrb	r3, [r3, #0]
 8003536:	2b01      	cmp	r3, #1
 8003538:	d009      	beq.n	800354e <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 800353a:	78fa      	ldrb	r2, [r7, #3]
 800353c:	6879      	ldr	r1, [r7, #4]
 800353e:	4613      	mov	r3, r2
 8003540:	011b      	lsls	r3, r3, #4
 8003542:	1a9b      	subs	r3, r3, r2
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	440b      	add	r3, r1
 8003548:	331b      	adds	r3, #27
 800354a:	2201      	movs	r2, #1
 800354c:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800354e:	78fa      	ldrb	r2, [r7, #3]
 8003550:	6879      	ldr	r1, [r7, #4]
 8003552:	4613      	mov	r3, r2
 8003554:	011b      	lsls	r3, r3, #4
 8003556:	1a9b      	subs	r3, r3, r2
 8003558:	009b      	lsls	r3, r3, #2
 800355a:	440b      	add	r3, r1
 800355c:	334d      	adds	r3, #77	@ 0x4d
 800355e:	2203      	movs	r2, #3
 8003560:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	78fa      	ldrb	r2, [r7, #3]
 8003568:	4611      	mov	r1, r2
 800356a:	4618      	mov	r0, r3
 800356c:	f004 fb58 	bl	8007c20 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003570:	78fa      	ldrb	r2, [r7, #3]
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	1a9b      	subs	r3, r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	3344      	adds	r3, #68	@ 0x44
 8003580:	2200      	movs	r2, #0
 8003582:	601a      	str	r2, [r3, #0]
 8003584:	e3f9      	b.n	8003d7a <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	78fa      	ldrb	r2, [r7, #3]
 800358c:	4611      	mov	r1, r2
 800358e:	4618      	mov	r0, r3
 8003590:	f004 f9d4 	bl	800793c <USB_ReadChInterrupts>
 8003594:	4603      	mov	r3, r0
 8003596:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800359a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800359e:	d111      	bne.n	80035c4 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80035a0:	78fb      	ldrb	r3, [r7, #3]
 80035a2:	015a      	lsls	r2, r3, #5
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	4413      	add	r3, r2
 80035a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ac:	461a      	mov	r2, r3
 80035ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80035b2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	78fa      	ldrb	r2, [r7, #3]
 80035ba:	4611      	mov	r1, r2
 80035bc:	4618      	mov	r0, r3
 80035be:	f004 fb2f 	bl	8007c20 <USB_HC_Halt>
 80035c2:	e3da      	b.n	8003d7a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	78fa      	ldrb	r2, [r7, #3]
 80035ca:	4611      	mov	r1, r2
 80035cc:	4618      	mov	r0, r3
 80035ce:	f004 f9b5 	bl	800793c <USB_ReadChInterrupts>
 80035d2:	4603      	mov	r3, r0
 80035d4:	f003 0301 	and.w	r3, r3, #1
 80035d8:	2b01      	cmp	r3, #1
 80035da:	d168      	bne.n	80036ae <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80035dc:	78fa      	ldrb	r2, [r7, #3]
 80035de:	6879      	ldr	r1, [r7, #4]
 80035e0:	4613      	mov	r3, r2
 80035e2:	011b      	lsls	r3, r3, #4
 80035e4:	1a9b      	subs	r3, r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	3344      	adds	r3, #68	@ 0x44
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	78fa      	ldrb	r2, [r7, #3]
 80035f6:	4611      	mov	r1, r2
 80035f8:	4618      	mov	r0, r3
 80035fa:	f004 f99f 	bl	800793c <USB_ReadChInterrupts>
 80035fe:	4603      	mov	r3, r0
 8003600:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003604:	2b40      	cmp	r3, #64	@ 0x40
 8003606:	d112      	bne.n	800362e <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003608:	78fa      	ldrb	r2, [r7, #3]
 800360a:	6879      	ldr	r1, [r7, #4]
 800360c:	4613      	mov	r3, r2
 800360e:	011b      	lsls	r3, r3, #4
 8003610:	1a9b      	subs	r3, r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	440b      	add	r3, r1
 8003616:	3319      	adds	r3, #25
 8003618:	2201      	movs	r2, #1
 800361a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800361c:	78fb      	ldrb	r3, [r7, #3]
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	4413      	add	r3, r2
 8003624:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003628:	461a      	mov	r2, r3
 800362a:	2340      	movs	r3, #64	@ 0x40
 800362c:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800362e:	78fa      	ldrb	r2, [r7, #3]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	331b      	adds	r3, #27
 800363e:	781b      	ldrb	r3, [r3, #0]
 8003640:	2b00      	cmp	r3, #0
 8003642:	d019      	beq.n	8003678 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003644:	78fa      	ldrb	r2, [r7, #3]
 8003646:	6879      	ldr	r1, [r7, #4]
 8003648:	4613      	mov	r3, r2
 800364a:	011b      	lsls	r3, r3, #4
 800364c:	1a9b      	subs	r3, r3, r2
 800364e:	009b      	lsls	r3, r3, #2
 8003650:	440b      	add	r3, r1
 8003652:	331b      	adds	r3, #27
 8003654:	2200      	movs	r2, #0
 8003656:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003658:	78fb      	ldrb	r3, [r7, #3]
 800365a:	015a      	lsls	r2, r3, #5
 800365c:	693b      	ldr	r3, [r7, #16]
 800365e:	4413      	add	r3, r2
 8003660:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003664:	685b      	ldr	r3, [r3, #4]
 8003666:	78fa      	ldrb	r2, [r7, #3]
 8003668:	0151      	lsls	r1, r2, #5
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	440a      	add	r2, r1
 800366e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003672:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003676:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003678:	78fb      	ldrb	r3, [r7, #3]
 800367a:	015a      	lsls	r2, r3, #5
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	4413      	add	r3, r2
 8003680:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003684:	461a      	mov	r2, r3
 8003686:	2301      	movs	r3, #1
 8003688:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800368a:	78fa      	ldrb	r2, [r7, #3]
 800368c:	6879      	ldr	r1, [r7, #4]
 800368e:	4613      	mov	r3, r2
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	1a9b      	subs	r3, r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	440b      	add	r3, r1
 8003698:	334d      	adds	r3, #77	@ 0x4d
 800369a:	2201      	movs	r2, #1
 800369c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	78fa      	ldrb	r2, [r7, #3]
 80036a4:	4611      	mov	r1, r2
 80036a6:	4618      	mov	r0, r3
 80036a8:	f004 faba 	bl	8007c20 <USB_HC_Halt>
 80036ac:	e365      	b.n	8003d7a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	78fa      	ldrb	r2, [r7, #3]
 80036b4:	4611      	mov	r1, r2
 80036b6:	4618      	mov	r0, r3
 80036b8:	f004 f940 	bl	800793c <USB_ReadChInterrupts>
 80036bc:	4603      	mov	r3, r0
 80036be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036c2:	2b40      	cmp	r3, #64	@ 0x40
 80036c4:	d139      	bne.n	800373a <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80036c6:	78fa      	ldrb	r2, [r7, #3]
 80036c8:	6879      	ldr	r1, [r7, #4]
 80036ca:	4613      	mov	r3, r2
 80036cc:	011b      	lsls	r3, r3, #4
 80036ce:	1a9b      	subs	r3, r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	440b      	add	r3, r1
 80036d4:	334d      	adds	r3, #77	@ 0x4d
 80036d6:	2205      	movs	r2, #5
 80036d8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80036da:	78fa      	ldrb	r2, [r7, #3]
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	4613      	mov	r3, r2
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	440b      	add	r3, r1
 80036e8:	331a      	adds	r3, #26
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d109      	bne.n	8003704 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80036f0:	78fa      	ldrb	r2, [r7, #3]
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	1a9b      	subs	r3, r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	3319      	adds	r3, #25
 8003700:	2201      	movs	r2, #1
 8003702:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003704:	78fa      	ldrb	r2, [r7, #3]
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	1a9b      	subs	r3, r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	3344      	adds	r3, #68	@ 0x44
 8003714:	2200      	movs	r2, #0
 8003716:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	78fa      	ldrb	r2, [r7, #3]
 800371e:	4611      	mov	r1, r2
 8003720:	4618      	mov	r0, r3
 8003722:	f004 fa7d 	bl	8007c20 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003726:	78fb      	ldrb	r3, [r7, #3]
 8003728:	015a      	lsls	r2, r3, #5
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	4413      	add	r3, r2
 800372e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003732:	461a      	mov	r2, r3
 8003734:	2340      	movs	r3, #64	@ 0x40
 8003736:	6093      	str	r3, [r2, #8]
 8003738:	e31f      	b.n	8003d7a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	78fa      	ldrb	r2, [r7, #3]
 8003740:	4611      	mov	r1, r2
 8003742:	4618      	mov	r0, r3
 8003744:	f004 f8fa 	bl	800793c <USB_ReadChInterrupts>
 8003748:	4603      	mov	r3, r0
 800374a:	f003 0308 	and.w	r3, r3, #8
 800374e:	2b08      	cmp	r3, #8
 8003750:	d11a      	bne.n	8003788 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003752:	78fb      	ldrb	r3, [r7, #3]
 8003754:	015a      	lsls	r2, r3, #5
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	4413      	add	r3, r2
 800375a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800375e:	461a      	mov	r2, r3
 8003760:	2308      	movs	r3, #8
 8003762:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003764:	78fa      	ldrb	r2, [r7, #3]
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	4613      	mov	r3, r2
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	1a9b      	subs	r3, r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	440b      	add	r3, r1
 8003772:	334d      	adds	r3, #77	@ 0x4d
 8003774:	2206      	movs	r2, #6
 8003776:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	78fa      	ldrb	r2, [r7, #3]
 800377e:	4611      	mov	r1, r2
 8003780:	4618      	mov	r0, r3
 8003782:	f004 fa4d 	bl	8007c20 <USB_HC_Halt>
 8003786:	e2f8      	b.n	8003d7a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	78fa      	ldrb	r2, [r7, #3]
 800378e:	4611      	mov	r1, r2
 8003790:	4618      	mov	r0, r3
 8003792:	f004 f8d3 	bl	800793c <USB_ReadChInterrupts>
 8003796:	4603      	mov	r3, r0
 8003798:	f003 0310 	and.w	r3, r3, #16
 800379c:	2b10      	cmp	r3, #16
 800379e:	d144      	bne.n	800382a <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80037a0:	78fa      	ldrb	r2, [r7, #3]
 80037a2:	6879      	ldr	r1, [r7, #4]
 80037a4:	4613      	mov	r3, r2
 80037a6:	011b      	lsls	r3, r3, #4
 80037a8:	1a9b      	subs	r3, r3, r2
 80037aa:	009b      	lsls	r3, r3, #2
 80037ac:	440b      	add	r3, r1
 80037ae:	3344      	adds	r3, #68	@ 0x44
 80037b0:	2200      	movs	r2, #0
 80037b2:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80037b4:	78fa      	ldrb	r2, [r7, #3]
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	4613      	mov	r3, r2
 80037ba:	011b      	lsls	r3, r3, #4
 80037bc:	1a9b      	subs	r3, r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	334d      	adds	r3, #77	@ 0x4d
 80037c4:	2204      	movs	r2, #4
 80037c6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80037c8:	78fa      	ldrb	r2, [r7, #3]
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	4613      	mov	r3, r2
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	1a9b      	subs	r3, r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	3319      	adds	r3, #25
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d114      	bne.n	8003808 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80037de:	78fa      	ldrb	r2, [r7, #3]
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	4613      	mov	r3, r2
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	1a9b      	subs	r3, r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	440b      	add	r3, r1
 80037ec:	3318      	adds	r3, #24
 80037ee:	781b      	ldrb	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d109      	bne.n	8003808 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80037f4:	78fa      	ldrb	r2, [r7, #3]
 80037f6:	6879      	ldr	r1, [r7, #4]
 80037f8:	4613      	mov	r3, r2
 80037fa:	011b      	lsls	r3, r3, #4
 80037fc:	1a9b      	subs	r3, r3, r2
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	440b      	add	r3, r1
 8003802:	3319      	adds	r3, #25
 8003804:	2201      	movs	r2, #1
 8003806:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	78fa      	ldrb	r2, [r7, #3]
 800380e:	4611      	mov	r1, r2
 8003810:	4618      	mov	r0, r3
 8003812:	f004 fa05 	bl	8007c20 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003816:	78fb      	ldrb	r3, [r7, #3]
 8003818:	015a      	lsls	r2, r3, #5
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	4413      	add	r3, r2
 800381e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003822:	461a      	mov	r2, r3
 8003824:	2310      	movs	r3, #16
 8003826:	6093      	str	r3, [r2, #8]
 8003828:	e2a7      	b.n	8003d7a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	78fa      	ldrb	r2, [r7, #3]
 8003830:	4611      	mov	r1, r2
 8003832:	4618      	mov	r0, r3
 8003834:	f004 f882 	bl	800793c <USB_ReadChInterrupts>
 8003838:	4603      	mov	r3, r0
 800383a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800383e:	2b80      	cmp	r3, #128	@ 0x80
 8003840:	f040 8083 	bne.w	800394a <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	799b      	ldrb	r3, [r3, #6]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d111      	bne.n	8003870 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800384c:	78fa      	ldrb	r2, [r7, #3]
 800384e:	6879      	ldr	r1, [r7, #4]
 8003850:	4613      	mov	r3, r2
 8003852:	011b      	lsls	r3, r3, #4
 8003854:	1a9b      	subs	r3, r3, r2
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	440b      	add	r3, r1
 800385a:	334d      	adds	r3, #77	@ 0x4d
 800385c:	2207      	movs	r2, #7
 800385e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	78fa      	ldrb	r2, [r7, #3]
 8003866:	4611      	mov	r1, r2
 8003868:	4618      	mov	r0, r3
 800386a:	f004 f9d9 	bl	8007c20 <USB_HC_Halt>
 800386e:	e062      	b.n	8003936 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003870:	78fa      	ldrb	r2, [r7, #3]
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	4613      	mov	r3, r2
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	1a9b      	subs	r3, r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	440b      	add	r3, r1
 800387e:	3344      	adds	r3, #68	@ 0x44
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	1c59      	adds	r1, r3, #1
 8003884:	6878      	ldr	r0, [r7, #4]
 8003886:	4613      	mov	r3, r2
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	1a9b      	subs	r3, r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4403      	add	r3, r0
 8003890:	3344      	adds	r3, #68	@ 0x44
 8003892:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003894:	78fa      	ldrb	r2, [r7, #3]
 8003896:	6879      	ldr	r1, [r7, #4]
 8003898:	4613      	mov	r3, r2
 800389a:	011b      	lsls	r3, r3, #4
 800389c:	1a9b      	subs	r3, r3, r2
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	440b      	add	r3, r1
 80038a2:	3344      	adds	r3, #68	@ 0x44
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2b02      	cmp	r3, #2
 80038a8:	d922      	bls.n	80038f0 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80038aa:	78fa      	ldrb	r2, [r7, #3]
 80038ac:	6879      	ldr	r1, [r7, #4]
 80038ae:	4613      	mov	r3, r2
 80038b0:	011b      	lsls	r3, r3, #4
 80038b2:	1a9b      	subs	r3, r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	440b      	add	r3, r1
 80038b8:	3344      	adds	r3, #68	@ 0x44
 80038ba:	2200      	movs	r2, #0
 80038bc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80038be:	78fa      	ldrb	r2, [r7, #3]
 80038c0:	6879      	ldr	r1, [r7, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	011b      	lsls	r3, r3, #4
 80038c6:	1a9b      	subs	r3, r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	440b      	add	r3, r1
 80038cc:	334c      	adds	r3, #76	@ 0x4c
 80038ce:	2204      	movs	r2, #4
 80038d0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80038d2:	78fa      	ldrb	r2, [r7, #3]
 80038d4:	6879      	ldr	r1, [r7, #4]
 80038d6:	4613      	mov	r3, r2
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	1a9b      	subs	r3, r3, r2
 80038dc:	009b      	lsls	r3, r3, #2
 80038de:	440b      	add	r3, r1
 80038e0:	334c      	adds	r3, #76	@ 0x4c
 80038e2:	781a      	ldrb	r2, [r3, #0]
 80038e4:	78fb      	ldrb	r3, [r7, #3]
 80038e6:	4619      	mov	r1, r3
 80038e8:	6878      	ldr	r0, [r7, #4]
 80038ea:	f7fe ff13 	bl	8002714 <HAL_HCD_HC_NotifyURBChange_Callback>
 80038ee:	e022      	b.n	8003936 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80038f0:	78fa      	ldrb	r2, [r7, #3]
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	4613      	mov	r3, r2
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	1a9b      	subs	r3, r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	334c      	adds	r3, #76	@ 0x4c
 8003900:	2202      	movs	r2, #2
 8003902:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003904:	78fb      	ldrb	r3, [r7, #3]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	693b      	ldr	r3, [r7, #16]
 800390a:	4413      	add	r3, r2
 800390c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800391a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003922:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003924:	78fb      	ldrb	r3, [r7, #3]
 8003926:	015a      	lsls	r2, r3, #5
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	4413      	add	r3, r2
 800392c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003930:	461a      	mov	r2, r3
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003936:	78fb      	ldrb	r3, [r7, #3]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	4413      	add	r3, r2
 800393e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003942:	461a      	mov	r2, r3
 8003944:	2380      	movs	r3, #128	@ 0x80
 8003946:	6093      	str	r3, [r2, #8]
 8003948:	e217      	b.n	8003d7a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	78fa      	ldrb	r2, [r7, #3]
 8003950:	4611      	mov	r1, r2
 8003952:	4618      	mov	r0, r3
 8003954:	f003 fff2 	bl	800793c <USB_ReadChInterrupts>
 8003958:	4603      	mov	r3, r0
 800395a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800395e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003962:	d11b      	bne.n	800399c <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003964:	78fa      	ldrb	r2, [r7, #3]
 8003966:	6879      	ldr	r1, [r7, #4]
 8003968:	4613      	mov	r3, r2
 800396a:	011b      	lsls	r3, r3, #4
 800396c:	1a9b      	subs	r3, r3, r2
 800396e:	009b      	lsls	r3, r3, #2
 8003970:	440b      	add	r3, r1
 8003972:	334d      	adds	r3, #77	@ 0x4d
 8003974:	2209      	movs	r2, #9
 8003976:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	78fa      	ldrb	r2, [r7, #3]
 800397e:	4611      	mov	r1, r2
 8003980:	4618      	mov	r0, r3
 8003982:	f004 f94d 	bl	8007c20 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003986:	78fb      	ldrb	r3, [r7, #3]
 8003988:	015a      	lsls	r2, r3, #5
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	4413      	add	r3, r2
 800398e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003992:	461a      	mov	r2, r3
 8003994:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003998:	6093      	str	r3, [r2, #8]
 800399a:	e1ee      	b.n	8003d7a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	78fa      	ldrb	r2, [r7, #3]
 80039a2:	4611      	mov	r1, r2
 80039a4:	4618      	mov	r0, r3
 80039a6:	f003 ffc9 	bl	800793c <USB_ReadChInterrupts>
 80039aa:	4603      	mov	r3, r0
 80039ac:	f003 0302 	and.w	r3, r3, #2
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	f040 81df 	bne.w	8003d74 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80039b6:	78fb      	ldrb	r3, [r7, #3]
 80039b8:	015a      	lsls	r2, r3, #5
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	4413      	add	r3, r2
 80039be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039c2:	461a      	mov	r2, r3
 80039c4:	2302      	movs	r3, #2
 80039c6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	6879      	ldr	r1, [r7, #4]
 80039cc:	4613      	mov	r3, r2
 80039ce:	011b      	lsls	r3, r3, #4
 80039d0:	1a9b      	subs	r3, r3, r2
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	334d      	adds	r3, #77	@ 0x4d
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	2b01      	cmp	r3, #1
 80039dc:	f040 8093 	bne.w	8003b06 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80039e0:	78fa      	ldrb	r2, [r7, #3]
 80039e2:	6879      	ldr	r1, [r7, #4]
 80039e4:	4613      	mov	r3, r2
 80039e6:	011b      	lsls	r3, r3, #4
 80039e8:	1a9b      	subs	r3, r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	440b      	add	r3, r1
 80039ee:	334d      	adds	r3, #77	@ 0x4d
 80039f0:	2202      	movs	r2, #2
 80039f2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80039f4:	78fa      	ldrb	r2, [r7, #3]
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	4613      	mov	r3, r2
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	1a9b      	subs	r3, r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	334c      	adds	r3, #76	@ 0x4c
 8003a04:	2201      	movs	r2, #1
 8003a06:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003a08:	78fa      	ldrb	r2, [r7, #3]
 8003a0a:	6879      	ldr	r1, [r7, #4]
 8003a0c:	4613      	mov	r3, r2
 8003a0e:	011b      	lsls	r3, r3, #4
 8003a10:	1a9b      	subs	r3, r3, r2
 8003a12:	009b      	lsls	r3, r3, #2
 8003a14:	440b      	add	r3, r1
 8003a16:	3326      	adds	r3, #38	@ 0x26
 8003a18:	781b      	ldrb	r3, [r3, #0]
 8003a1a:	2b02      	cmp	r3, #2
 8003a1c:	d00b      	beq.n	8003a36 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003a1e:	78fa      	ldrb	r2, [r7, #3]
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	4613      	mov	r3, r2
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	1a9b      	subs	r3, r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	440b      	add	r3, r1
 8003a2c:	3326      	adds	r3, #38	@ 0x26
 8003a2e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003a30:	2b03      	cmp	r3, #3
 8003a32:	f040 8190 	bne.w	8003d56 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	799b      	ldrb	r3, [r3, #6]
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d115      	bne.n	8003a6a <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003a3e:	78fa      	ldrb	r2, [r7, #3]
 8003a40:	6879      	ldr	r1, [r7, #4]
 8003a42:	4613      	mov	r3, r2
 8003a44:	011b      	lsls	r3, r3, #4
 8003a46:	1a9b      	subs	r3, r3, r2
 8003a48:	009b      	lsls	r3, r3, #2
 8003a4a:	440b      	add	r3, r1
 8003a4c:	333d      	adds	r3, #61	@ 0x3d
 8003a4e:	781b      	ldrb	r3, [r3, #0]
 8003a50:	78fa      	ldrb	r2, [r7, #3]
 8003a52:	f083 0301 	eor.w	r3, r3, #1
 8003a56:	b2d8      	uxtb	r0, r3
 8003a58:	6879      	ldr	r1, [r7, #4]
 8003a5a:	4613      	mov	r3, r2
 8003a5c:	011b      	lsls	r3, r3, #4
 8003a5e:	1a9b      	subs	r3, r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	440b      	add	r3, r1
 8003a64:	333d      	adds	r3, #61	@ 0x3d
 8003a66:	4602      	mov	r2, r0
 8003a68:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	799b      	ldrb	r3, [r3, #6]
 8003a6e:	2b01      	cmp	r3, #1
 8003a70:	f040 8171 	bne.w	8003d56 <HCD_HC_OUT_IRQHandler+0x954>
 8003a74:	78fa      	ldrb	r2, [r7, #3]
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	011b      	lsls	r3, r3, #4
 8003a7c:	1a9b      	subs	r3, r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	3334      	adds	r3, #52	@ 0x34
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	f000 8165 	beq.w	8003d56 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003a8c:	78fa      	ldrb	r2, [r7, #3]
 8003a8e:	6879      	ldr	r1, [r7, #4]
 8003a90:	4613      	mov	r3, r2
 8003a92:	011b      	lsls	r3, r3, #4
 8003a94:	1a9b      	subs	r3, r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	3334      	adds	r3, #52	@ 0x34
 8003a9c:	6819      	ldr	r1, [r3, #0]
 8003a9e:	78fa      	ldrb	r2, [r7, #3]
 8003aa0:	6878      	ldr	r0, [r7, #4]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	1a9b      	subs	r3, r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4403      	add	r3, r0
 8003aac:	3328      	adds	r3, #40	@ 0x28
 8003aae:	881b      	ldrh	r3, [r3, #0]
 8003ab0:	440b      	add	r3, r1
 8003ab2:	1e59      	subs	r1, r3, #1
 8003ab4:	78fa      	ldrb	r2, [r7, #3]
 8003ab6:	6878      	ldr	r0, [r7, #4]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	011b      	lsls	r3, r3, #4
 8003abc:	1a9b      	subs	r3, r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	4403      	add	r3, r0
 8003ac2:	3328      	adds	r3, #40	@ 0x28
 8003ac4:	881b      	ldrh	r3, [r3, #0]
 8003ac6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003aca:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	f000 813f 	beq.w	8003d56 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003ad8:	78fa      	ldrb	r2, [r7, #3]
 8003ada:	6879      	ldr	r1, [r7, #4]
 8003adc:	4613      	mov	r3, r2
 8003ade:	011b      	lsls	r3, r3, #4
 8003ae0:	1a9b      	subs	r3, r3, r2
 8003ae2:	009b      	lsls	r3, r3, #2
 8003ae4:	440b      	add	r3, r1
 8003ae6:	333d      	adds	r3, #61	@ 0x3d
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	78fa      	ldrb	r2, [r7, #3]
 8003aec:	f083 0301 	eor.w	r3, r3, #1
 8003af0:	b2d8      	uxtb	r0, r3
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	4613      	mov	r3, r2
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	1a9b      	subs	r3, r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	440b      	add	r3, r1
 8003afe:	333d      	adds	r3, #61	@ 0x3d
 8003b00:	4602      	mov	r2, r0
 8003b02:	701a      	strb	r2, [r3, #0]
 8003b04:	e127      	b.n	8003d56 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003b06:	78fa      	ldrb	r2, [r7, #3]
 8003b08:	6879      	ldr	r1, [r7, #4]
 8003b0a:	4613      	mov	r3, r2
 8003b0c:	011b      	lsls	r3, r3, #4
 8003b0e:	1a9b      	subs	r3, r3, r2
 8003b10:	009b      	lsls	r3, r3, #2
 8003b12:	440b      	add	r3, r1
 8003b14:	334d      	adds	r3, #77	@ 0x4d
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	2b03      	cmp	r3, #3
 8003b1a:	d120      	bne.n	8003b5e <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b1c:	78fa      	ldrb	r2, [r7, #3]
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	1a9b      	subs	r3, r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	334d      	adds	r3, #77	@ 0x4d
 8003b2c:	2202      	movs	r2, #2
 8003b2e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003b30:	78fa      	ldrb	r2, [r7, #3]
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	4613      	mov	r3, r2
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	1a9b      	subs	r3, r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	331b      	adds	r3, #27
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	2b01      	cmp	r3, #1
 8003b44:	f040 8107 	bne.w	8003d56 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b48:	78fa      	ldrb	r2, [r7, #3]
 8003b4a:	6879      	ldr	r1, [r7, #4]
 8003b4c:	4613      	mov	r3, r2
 8003b4e:	011b      	lsls	r3, r3, #4
 8003b50:	1a9b      	subs	r3, r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	440b      	add	r3, r1
 8003b56:	334c      	adds	r3, #76	@ 0x4c
 8003b58:	2202      	movs	r2, #2
 8003b5a:	701a      	strb	r2, [r3, #0]
 8003b5c:	e0fb      	b.n	8003d56 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003b5e:	78fa      	ldrb	r2, [r7, #3]
 8003b60:	6879      	ldr	r1, [r7, #4]
 8003b62:	4613      	mov	r3, r2
 8003b64:	011b      	lsls	r3, r3, #4
 8003b66:	1a9b      	subs	r3, r3, r2
 8003b68:	009b      	lsls	r3, r3, #2
 8003b6a:	440b      	add	r3, r1
 8003b6c:	334d      	adds	r3, #77	@ 0x4d
 8003b6e:	781b      	ldrb	r3, [r3, #0]
 8003b70:	2b04      	cmp	r3, #4
 8003b72:	d13a      	bne.n	8003bea <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b74:	78fa      	ldrb	r2, [r7, #3]
 8003b76:	6879      	ldr	r1, [r7, #4]
 8003b78:	4613      	mov	r3, r2
 8003b7a:	011b      	lsls	r3, r3, #4
 8003b7c:	1a9b      	subs	r3, r3, r2
 8003b7e:	009b      	lsls	r3, r3, #2
 8003b80:	440b      	add	r3, r1
 8003b82:	334d      	adds	r3, #77	@ 0x4d
 8003b84:	2202      	movs	r2, #2
 8003b86:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b88:	78fa      	ldrb	r2, [r7, #3]
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	1a9b      	subs	r3, r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	334c      	adds	r3, #76	@ 0x4c
 8003b98:	2202      	movs	r2, #2
 8003b9a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003b9c:	78fa      	ldrb	r2, [r7, #3]
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	011b      	lsls	r3, r3, #4
 8003ba4:	1a9b      	subs	r3, r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	331b      	adds	r3, #27
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	2b01      	cmp	r3, #1
 8003bb0:	f040 80d1 	bne.w	8003d56 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003bb4:	78fa      	ldrb	r2, [r7, #3]
 8003bb6:	6879      	ldr	r1, [r7, #4]
 8003bb8:	4613      	mov	r3, r2
 8003bba:	011b      	lsls	r3, r3, #4
 8003bbc:	1a9b      	subs	r3, r3, r2
 8003bbe:	009b      	lsls	r3, r3, #2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	331b      	adds	r3, #27
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003bc8:	78fb      	ldrb	r3, [r7, #3]
 8003bca:	015a      	lsls	r2, r3, #5
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	78fa      	ldrb	r2, [r7, #3]
 8003bd8:	0151      	lsls	r1, r2, #5
 8003bda:	693a      	ldr	r2, [r7, #16]
 8003bdc:	440a      	add	r2, r1
 8003bde:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003be2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003be6:	6053      	str	r3, [r2, #4]
 8003be8:	e0b5      	b.n	8003d56 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003bea:	78fa      	ldrb	r2, [r7, #3]
 8003bec:	6879      	ldr	r1, [r7, #4]
 8003bee:	4613      	mov	r3, r2
 8003bf0:	011b      	lsls	r3, r3, #4
 8003bf2:	1a9b      	subs	r3, r3, r2
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	440b      	add	r3, r1
 8003bf8:	334d      	adds	r3, #77	@ 0x4d
 8003bfa:	781b      	ldrb	r3, [r3, #0]
 8003bfc:	2b05      	cmp	r3, #5
 8003bfe:	d114      	bne.n	8003c2a <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c00:	78fa      	ldrb	r2, [r7, #3]
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	4613      	mov	r3, r2
 8003c06:	011b      	lsls	r3, r3, #4
 8003c08:	1a9b      	subs	r3, r3, r2
 8003c0a:	009b      	lsls	r3, r3, #2
 8003c0c:	440b      	add	r3, r1
 8003c0e:	334d      	adds	r3, #77	@ 0x4d
 8003c10:	2202      	movs	r2, #2
 8003c12:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003c14:	78fa      	ldrb	r2, [r7, #3]
 8003c16:	6879      	ldr	r1, [r7, #4]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	1a9b      	subs	r3, r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	440b      	add	r3, r1
 8003c22:	334c      	adds	r3, #76	@ 0x4c
 8003c24:	2202      	movs	r2, #2
 8003c26:	701a      	strb	r2, [r3, #0]
 8003c28:	e095      	b.n	8003d56 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003c2a:	78fa      	ldrb	r2, [r7, #3]
 8003c2c:	6879      	ldr	r1, [r7, #4]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	011b      	lsls	r3, r3, #4
 8003c32:	1a9b      	subs	r3, r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	440b      	add	r3, r1
 8003c38:	334d      	adds	r3, #77	@ 0x4d
 8003c3a:	781b      	ldrb	r3, [r3, #0]
 8003c3c:	2b06      	cmp	r3, #6
 8003c3e:	d114      	bne.n	8003c6a <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c40:	78fa      	ldrb	r2, [r7, #3]
 8003c42:	6879      	ldr	r1, [r7, #4]
 8003c44:	4613      	mov	r3, r2
 8003c46:	011b      	lsls	r3, r3, #4
 8003c48:	1a9b      	subs	r3, r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	440b      	add	r3, r1
 8003c4e:	334d      	adds	r3, #77	@ 0x4d
 8003c50:	2202      	movs	r2, #2
 8003c52:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003c54:	78fa      	ldrb	r2, [r7, #3]
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	011b      	lsls	r3, r3, #4
 8003c5c:	1a9b      	subs	r3, r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	440b      	add	r3, r1
 8003c62:	334c      	adds	r3, #76	@ 0x4c
 8003c64:	2205      	movs	r2, #5
 8003c66:	701a      	strb	r2, [r3, #0]
 8003c68:	e075      	b.n	8003d56 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003c6a:	78fa      	ldrb	r2, [r7, #3]
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	011b      	lsls	r3, r3, #4
 8003c72:	1a9b      	subs	r3, r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	440b      	add	r3, r1
 8003c78:	334d      	adds	r3, #77	@ 0x4d
 8003c7a:	781b      	ldrb	r3, [r3, #0]
 8003c7c:	2b07      	cmp	r3, #7
 8003c7e:	d00a      	beq.n	8003c96 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003c80:	78fa      	ldrb	r2, [r7, #3]
 8003c82:	6879      	ldr	r1, [r7, #4]
 8003c84:	4613      	mov	r3, r2
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	1a9b      	subs	r3, r3, r2
 8003c8a:	009b      	lsls	r3, r3, #2
 8003c8c:	440b      	add	r3, r1
 8003c8e:	334d      	adds	r3, #77	@ 0x4d
 8003c90:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003c92:	2b09      	cmp	r3, #9
 8003c94:	d170      	bne.n	8003d78 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c96:	78fa      	ldrb	r2, [r7, #3]
 8003c98:	6879      	ldr	r1, [r7, #4]
 8003c9a:	4613      	mov	r3, r2
 8003c9c:	011b      	lsls	r3, r3, #4
 8003c9e:	1a9b      	subs	r3, r3, r2
 8003ca0:	009b      	lsls	r3, r3, #2
 8003ca2:	440b      	add	r3, r1
 8003ca4:	334d      	adds	r3, #77	@ 0x4d
 8003ca6:	2202      	movs	r2, #2
 8003ca8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003caa:	78fa      	ldrb	r2, [r7, #3]
 8003cac:	6879      	ldr	r1, [r7, #4]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	1a9b      	subs	r3, r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	440b      	add	r3, r1
 8003cb8:	3344      	adds	r3, #68	@ 0x44
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	1c59      	adds	r1, r3, #1
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	1a9b      	subs	r3, r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4403      	add	r3, r0
 8003cca:	3344      	adds	r3, #68	@ 0x44
 8003ccc:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003cce:	78fa      	ldrb	r2, [r7, #3]
 8003cd0:	6879      	ldr	r1, [r7, #4]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	011b      	lsls	r3, r3, #4
 8003cd6:	1a9b      	subs	r3, r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	440b      	add	r3, r1
 8003cdc:	3344      	adds	r3, #68	@ 0x44
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	2b02      	cmp	r3, #2
 8003ce2:	d914      	bls.n	8003d0e <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003ce4:	78fa      	ldrb	r2, [r7, #3]
 8003ce6:	6879      	ldr	r1, [r7, #4]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	1a9b      	subs	r3, r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	440b      	add	r3, r1
 8003cf2:	3344      	adds	r3, #68	@ 0x44
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003cf8:	78fa      	ldrb	r2, [r7, #3]
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	1a9b      	subs	r3, r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	440b      	add	r3, r1
 8003d06:	334c      	adds	r3, #76	@ 0x4c
 8003d08:	2204      	movs	r2, #4
 8003d0a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d0c:	e022      	b.n	8003d54 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d0e:	78fa      	ldrb	r2, [r7, #3]
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	4613      	mov	r3, r2
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	1a9b      	subs	r3, r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	440b      	add	r3, r1
 8003d1c:	334c      	adds	r3, #76	@ 0x4c
 8003d1e:	2202      	movs	r2, #2
 8003d20:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003d22:	78fb      	ldrb	r3, [r7, #3]
 8003d24:	015a      	lsls	r2, r3, #5
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	4413      	add	r3, r2
 8003d2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d38:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003d40:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003d42:	78fb      	ldrb	r3, [r7, #3]
 8003d44:	015a      	lsls	r2, r3, #5
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	4413      	add	r3, r2
 8003d4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d4e:	461a      	mov	r2, r3
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d54:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003d56:	78fa      	ldrb	r2, [r7, #3]
 8003d58:	6879      	ldr	r1, [r7, #4]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	011b      	lsls	r3, r3, #4
 8003d5e:	1a9b      	subs	r3, r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	440b      	add	r3, r1
 8003d64:	334c      	adds	r3, #76	@ 0x4c
 8003d66:	781a      	ldrb	r2, [r3, #0]
 8003d68:	78fb      	ldrb	r3, [r7, #3]
 8003d6a:	4619      	mov	r1, r3
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f7fe fcd1 	bl	8002714 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003d72:	e002      	b.n	8003d7a <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003d74:	bf00      	nop
 8003d76:	e000      	b.n	8003d7a <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003d78:	bf00      	nop
  }
}
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}

08003d80 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b08a      	sub	sp, #40	@ 0x28
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d90:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	6a1b      	ldr	r3, [r3, #32]
 8003d98:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003d9a:	69fb      	ldr	r3, [r7, #28]
 8003d9c:	f003 030f 	and.w	r3, r3, #15
 8003da0:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	0c5b      	lsrs	r3, r3, #17
 8003da6:	f003 030f 	and.w	r3, r3, #15
 8003daa:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	091b      	lsrs	r3, r3, #4
 8003db0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003db4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d004      	beq.n	8003dc6 <HCD_RXQLVL_IRQHandler+0x46>
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	2b05      	cmp	r3, #5
 8003dc0:	f000 80b6 	beq.w	8003f30 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003dc4:	e0b7      	b.n	8003f36 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	f000 80b3 	beq.w	8003f34 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003dce:	6879      	ldr	r1, [r7, #4]
 8003dd0:	69ba      	ldr	r2, [r7, #24]
 8003dd2:	4613      	mov	r3, r2
 8003dd4:	011b      	lsls	r3, r3, #4
 8003dd6:	1a9b      	subs	r3, r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	440b      	add	r3, r1
 8003ddc:	332c      	adds	r3, #44	@ 0x2c
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	f000 80a7 	beq.w	8003f34 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003de6:	6879      	ldr	r1, [r7, #4]
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	4613      	mov	r3, r2
 8003dec:	011b      	lsls	r3, r3, #4
 8003dee:	1a9b      	subs	r3, r3, r2
 8003df0:	009b      	lsls	r3, r3, #2
 8003df2:	440b      	add	r3, r1
 8003df4:	3338      	adds	r3, #56	@ 0x38
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	18d1      	adds	r1, r2, r3
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	69ba      	ldr	r2, [r7, #24]
 8003e00:	4613      	mov	r3, r2
 8003e02:	011b      	lsls	r3, r3, #4
 8003e04:	1a9b      	subs	r3, r3, r2
 8003e06:	009b      	lsls	r3, r3, #2
 8003e08:	4403      	add	r3, r0
 8003e0a:	3334      	adds	r3, #52	@ 0x34
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4299      	cmp	r1, r3
 8003e10:	f200 8083 	bhi.w	8003f1a <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6818      	ldr	r0, [r3, #0]
 8003e18:	6879      	ldr	r1, [r7, #4]
 8003e1a:	69ba      	ldr	r2, [r7, #24]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	1a9b      	subs	r3, r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	440b      	add	r3, r1
 8003e26:	332c      	adds	r3, #44	@ 0x2c
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	693a      	ldr	r2, [r7, #16]
 8003e2c:	b292      	uxth	r2, r2
 8003e2e:	4619      	mov	r1, r3
 8003e30:	f003 fd19 	bl	8007866 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003e34:	6879      	ldr	r1, [r7, #4]
 8003e36:	69ba      	ldr	r2, [r7, #24]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	1a9b      	subs	r3, r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	440b      	add	r3, r1
 8003e42:	332c      	adds	r3, #44	@ 0x2c
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	18d1      	adds	r1, r2, r3
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	1a9b      	subs	r3, r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4403      	add	r3, r0
 8003e58:	332c      	adds	r3, #44	@ 0x2c
 8003e5a:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003e5c:	6879      	ldr	r1, [r7, #4]
 8003e5e:	69ba      	ldr	r2, [r7, #24]
 8003e60:	4613      	mov	r3, r2
 8003e62:	011b      	lsls	r3, r3, #4
 8003e64:	1a9b      	subs	r3, r3, r2
 8003e66:	009b      	lsls	r3, r3, #2
 8003e68:	440b      	add	r3, r1
 8003e6a:	3338      	adds	r3, #56	@ 0x38
 8003e6c:	681a      	ldr	r2, [r3, #0]
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	18d1      	adds	r1, r2, r3
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	4613      	mov	r3, r2
 8003e78:	011b      	lsls	r3, r3, #4
 8003e7a:	1a9b      	subs	r3, r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4403      	add	r3, r0
 8003e80:	3338      	adds	r3, #56	@ 0x38
 8003e82:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003e84:	69bb      	ldr	r3, [r7, #24]
 8003e86:	015a      	lsls	r2, r3, #5
 8003e88:	6a3b      	ldr	r3, [r7, #32]
 8003e8a:	4413      	add	r3, r2
 8003e8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	0cdb      	lsrs	r3, r3, #19
 8003e94:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e98:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003e9a:	6879      	ldr	r1, [r7, #4]
 8003e9c:	69ba      	ldr	r2, [r7, #24]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	1a9b      	subs	r3, r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	3328      	adds	r3, #40	@ 0x28
 8003eaa:	881b      	ldrh	r3, [r3, #0]
 8003eac:	461a      	mov	r2, r3
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d13f      	bne.n	8003f34 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d03c      	beq.n	8003f34 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003eba:	69bb      	ldr	r3, [r7, #24]
 8003ebc:	015a      	lsls	r2, r3, #5
 8003ebe:	6a3b      	ldr	r3, [r7, #32]
 8003ec0:	4413      	add	r3, r2
 8003ec2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003ed0:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ed8:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003eda:	69bb      	ldr	r3, [r7, #24]
 8003edc:	015a      	lsls	r2, r3, #5
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ee6:	461a      	mov	r2, r3
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003eec:	6879      	ldr	r1, [r7, #4]
 8003eee:	69ba      	ldr	r2, [r7, #24]
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	011b      	lsls	r3, r3, #4
 8003ef4:	1a9b      	subs	r3, r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	440b      	add	r3, r1
 8003efa:	333c      	adds	r3, #60	@ 0x3c
 8003efc:	781b      	ldrb	r3, [r3, #0]
 8003efe:	f083 0301 	eor.w	r3, r3, #1
 8003f02:	b2d8      	uxtb	r0, r3
 8003f04:	6879      	ldr	r1, [r7, #4]
 8003f06:	69ba      	ldr	r2, [r7, #24]
 8003f08:	4613      	mov	r3, r2
 8003f0a:	011b      	lsls	r3, r3, #4
 8003f0c:	1a9b      	subs	r3, r3, r2
 8003f0e:	009b      	lsls	r3, r3, #2
 8003f10:	440b      	add	r3, r1
 8003f12:	333c      	adds	r3, #60	@ 0x3c
 8003f14:	4602      	mov	r2, r0
 8003f16:	701a      	strb	r2, [r3, #0]
      break;
 8003f18:	e00c      	b.n	8003f34 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003f1a:	6879      	ldr	r1, [r7, #4]
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	4613      	mov	r3, r2
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	1a9b      	subs	r3, r3, r2
 8003f24:	009b      	lsls	r3, r3, #2
 8003f26:	440b      	add	r3, r1
 8003f28:	334c      	adds	r3, #76	@ 0x4c
 8003f2a:	2204      	movs	r2, #4
 8003f2c:	701a      	strb	r2, [r3, #0]
      break;
 8003f2e:	e001      	b.n	8003f34 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003f30:	bf00      	nop
 8003f32:	e000      	b.n	8003f36 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003f34:	bf00      	nop
  }
}
 8003f36:	bf00      	nop
 8003f38:	3728      	adds	r7, #40	@ 0x28
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bd80      	pop	{r7, pc}

08003f3e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003f3e:	b580      	push	{r7, lr}
 8003f40:	b086      	sub	sp, #24
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003f6a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	f003 0302 	and.w	r3, r3, #2
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d10b      	bne.n	8003f8e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b01      	cmp	r3, #1
 8003f7e:	d102      	bne.n	8003f86 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003f80:	6878      	ldr	r0, [r7, #4]
 8003f82:	f7fe fb9f 	bl	80026c4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	f043 0302 	orr.w	r3, r3, #2
 8003f8c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f003 0308 	and.w	r3, r3, #8
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d132      	bne.n	8003ffe <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	f043 0308 	orr.w	r3, r3, #8
 8003f9e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d126      	bne.n	8003ff8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	7a5b      	ldrb	r3, [r3, #9]
 8003fae:	2b02      	cmp	r3, #2
 8003fb0:	d113      	bne.n	8003fda <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003fb8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003fbc:	d106      	bne.n	8003fcc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	2102      	movs	r1, #2
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f003 fddd 	bl	8007b84 <USB_InitFSLSPClkSel>
 8003fca:	e011      	b.n	8003ff0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2101      	movs	r1, #1
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f003 fdd6 	bl	8007b84 <USB_InitFSLSPClkSel>
 8003fd8:	e00a      	b.n	8003ff0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	79db      	ldrb	r3, [r3, #7]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d106      	bne.n	8003ff0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003fe2:	693b      	ldr	r3, [r7, #16]
 8003fe4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003fe8:	461a      	mov	r2, r3
 8003fea:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003fee:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003ff0:	6878      	ldr	r0, [r7, #4]
 8003ff2:	f7fe fb7b 	bl	80026ec <HAL_HCD_PortEnabled_Callback>
 8003ff6:	e002      	b.n	8003ffe <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f7fe fb81 	bl	8002700 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f003 0320 	and.w	r3, r3, #32
 8004004:	2b20      	cmp	r3, #32
 8004006:	d103      	bne.n	8004010 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	f043 0320 	orr.w	r3, r3, #32
 800400e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004016:	461a      	mov	r2, r3
 8004018:	68bb      	ldr	r3, [r7, #8]
 800401a:	6013      	str	r3, [r2, #0]
}
 800401c:	bf00      	nop
 800401e:	3718      	adds	r7, #24
 8004020:	46bd      	mov	sp, r7
 8004022:	bd80      	pop	{r7, pc}

08004024 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e12b      	b.n	800428e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800403c:	b2db      	uxtb	r3, r3
 800403e:	2b00      	cmp	r3, #0
 8004040:	d106      	bne.n	8004050 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2200      	movs	r2, #0
 8004046:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f7fd f84e 	bl	80010ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2224      	movs	r2, #36	@ 0x24
 8004054:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	681a      	ldr	r2, [r3, #0]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f022 0201 	bic.w	r2, r2, #1
 8004066:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004076:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	681a      	ldr	r2, [r3, #0]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004086:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004088:	f001 f964 	bl	8005354 <HAL_RCC_GetPCLK1Freq>
 800408c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	685b      	ldr	r3, [r3, #4]
 8004092:	4a81      	ldr	r2, [pc, #516]	@ (8004298 <HAL_I2C_Init+0x274>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d807      	bhi.n	80040a8 <HAL_I2C_Init+0x84>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	4a80      	ldr	r2, [pc, #512]	@ (800429c <HAL_I2C_Init+0x278>)
 800409c:	4293      	cmp	r3, r2
 800409e:	bf94      	ite	ls
 80040a0:	2301      	movls	r3, #1
 80040a2:	2300      	movhi	r3, #0
 80040a4:	b2db      	uxtb	r3, r3
 80040a6:	e006      	b.n	80040b6 <HAL_I2C_Init+0x92>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4a7d      	ldr	r2, [pc, #500]	@ (80042a0 <HAL_I2C_Init+0x27c>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	bf94      	ite	ls
 80040b0:	2301      	movls	r3, #1
 80040b2:	2300      	movhi	r3, #0
 80040b4:	b2db      	uxtb	r3, r3
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e0e7      	b.n	800428e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	4a78      	ldr	r2, [pc, #480]	@ (80042a4 <HAL_I2C_Init+0x280>)
 80040c2:	fba2 2303 	umull	r2, r3, r2, r3
 80040c6:	0c9b      	lsrs	r3, r3, #18
 80040c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	68ba      	ldr	r2, [r7, #8]
 80040da:	430a      	orrs	r2, r1
 80040dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	6a1b      	ldr	r3, [r3, #32]
 80040e4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	685b      	ldr	r3, [r3, #4]
 80040ec:	4a6a      	ldr	r2, [pc, #424]	@ (8004298 <HAL_I2C_Init+0x274>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d802      	bhi.n	80040f8 <HAL_I2C_Init+0xd4>
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	3301      	adds	r3, #1
 80040f6:	e009      	b.n	800410c <HAL_I2C_Init+0xe8>
 80040f8:	68bb      	ldr	r3, [r7, #8]
 80040fa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80040fe:	fb02 f303 	mul.w	r3, r2, r3
 8004102:	4a69      	ldr	r2, [pc, #420]	@ (80042a8 <HAL_I2C_Init+0x284>)
 8004104:	fba2 2303 	umull	r2, r3, r2, r3
 8004108:	099b      	lsrs	r3, r3, #6
 800410a:	3301      	adds	r3, #1
 800410c:	687a      	ldr	r2, [r7, #4]
 800410e:	6812      	ldr	r2, [r2, #0]
 8004110:	430b      	orrs	r3, r1
 8004112:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	69db      	ldr	r3, [r3, #28]
 800411a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800411e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	495c      	ldr	r1, [pc, #368]	@ (8004298 <HAL_I2C_Init+0x274>)
 8004128:	428b      	cmp	r3, r1
 800412a:	d819      	bhi.n	8004160 <HAL_I2C_Init+0x13c>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	1e59      	subs	r1, r3, #1
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	fbb1 f3f3 	udiv	r3, r1, r3
 800413a:	1c59      	adds	r1, r3, #1
 800413c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004140:	400b      	ands	r3, r1
 8004142:	2b00      	cmp	r3, #0
 8004144:	d00a      	beq.n	800415c <HAL_I2C_Init+0x138>
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	1e59      	subs	r1, r3, #1
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	685b      	ldr	r3, [r3, #4]
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	fbb1 f3f3 	udiv	r3, r1, r3
 8004154:	3301      	adds	r3, #1
 8004156:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800415a:	e051      	b.n	8004200 <HAL_I2C_Init+0x1dc>
 800415c:	2304      	movs	r3, #4
 800415e:	e04f      	b.n	8004200 <HAL_I2C_Init+0x1dc>
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	689b      	ldr	r3, [r3, #8]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d111      	bne.n	800418c <HAL_I2C_Init+0x168>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	1e58      	subs	r0, r3, #1
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6859      	ldr	r1, [r3, #4]
 8004170:	460b      	mov	r3, r1
 8004172:	005b      	lsls	r3, r3, #1
 8004174:	440b      	add	r3, r1
 8004176:	fbb0 f3f3 	udiv	r3, r0, r3
 800417a:	3301      	adds	r3, #1
 800417c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004180:	2b00      	cmp	r3, #0
 8004182:	bf0c      	ite	eq
 8004184:	2301      	moveq	r3, #1
 8004186:	2300      	movne	r3, #0
 8004188:	b2db      	uxtb	r3, r3
 800418a:	e012      	b.n	80041b2 <HAL_I2C_Init+0x18e>
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	1e58      	subs	r0, r3, #1
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6859      	ldr	r1, [r3, #4]
 8004194:	460b      	mov	r3, r1
 8004196:	009b      	lsls	r3, r3, #2
 8004198:	440b      	add	r3, r1
 800419a:	0099      	lsls	r1, r3, #2
 800419c:	440b      	add	r3, r1
 800419e:	fbb0 f3f3 	udiv	r3, r0, r3
 80041a2:	3301      	adds	r3, #1
 80041a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	bf0c      	ite	eq
 80041ac:	2301      	moveq	r3, #1
 80041ae:	2300      	movne	r3, #0
 80041b0:	b2db      	uxtb	r3, r3
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d001      	beq.n	80041ba <HAL_I2C_Init+0x196>
 80041b6:	2301      	movs	r3, #1
 80041b8:	e022      	b.n	8004200 <HAL_I2C_Init+0x1dc>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d10e      	bne.n	80041e0 <HAL_I2C_Init+0x1bc>
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	1e58      	subs	r0, r3, #1
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6859      	ldr	r1, [r3, #4]
 80041ca:	460b      	mov	r3, r1
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	440b      	add	r3, r1
 80041d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80041d4:	3301      	adds	r3, #1
 80041d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041da:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80041de:	e00f      	b.n	8004200 <HAL_I2C_Init+0x1dc>
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	1e58      	subs	r0, r3, #1
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	6859      	ldr	r1, [r3, #4]
 80041e8:	460b      	mov	r3, r1
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	440b      	add	r3, r1
 80041ee:	0099      	lsls	r1, r3, #2
 80041f0:	440b      	add	r3, r1
 80041f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80041f6:	3301      	adds	r3, #1
 80041f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041fc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004200:	6879      	ldr	r1, [r7, #4]
 8004202:	6809      	ldr	r1, [r1, #0]
 8004204:	4313      	orrs	r3, r2
 8004206:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	69da      	ldr	r2, [r3, #28]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	431a      	orrs	r2, r3
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	689b      	ldr	r3, [r3, #8]
 800422a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800422e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	6911      	ldr	r1, [r2, #16]
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	68d2      	ldr	r2, [r2, #12]
 800423a:	4311      	orrs	r1, r2
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	6812      	ldr	r2, [r2, #0]
 8004240:	430b      	orrs	r3, r1
 8004242:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	68db      	ldr	r3, [r3, #12]
 800424a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	695a      	ldr	r2, [r3, #20]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	699b      	ldr	r3, [r3, #24]
 8004256:	431a      	orrs	r2, r3
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f042 0201 	orr.w	r2, r2, #1
 800426e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2220      	movs	r2, #32
 800427a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800428c:	2300      	movs	r3, #0
}
 800428e:	4618      	mov	r0, r3
 8004290:	3710      	adds	r7, #16
 8004292:	46bd      	mov	sp, r7
 8004294:	bd80      	pop	{r7, pc}
 8004296:	bf00      	nop
 8004298:	000186a0 	.word	0x000186a0
 800429c:	001e847f 	.word	0x001e847f
 80042a0:	003d08ff 	.word	0x003d08ff
 80042a4:	431bde83 	.word	0x431bde83
 80042a8:	10624dd3 	.word	0x10624dd3

080042ac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b083      	sub	sp, #12
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b20      	cmp	r3, #32
 80042c0:	d129      	bne.n	8004316 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2224      	movs	r2, #36	@ 0x24
 80042c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	681a      	ldr	r2, [r3, #0]
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f022 0201 	bic.w	r2, r2, #1
 80042d8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0210 	bic.w	r2, r2, #16
 80042e8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	430a      	orrs	r2, r1
 80042f8:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	681a      	ldr	r2, [r3, #0]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f042 0201 	orr.w	r2, r2, #1
 8004308:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	2220      	movs	r2, #32
 800430e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004312:	2300      	movs	r3, #0
 8004314:	e000      	b.n	8004318 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004316:	2302      	movs	r3, #2
  }
}
 8004318:	4618      	mov	r0, r3
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004324:	b480      	push	{r7}
 8004326:	b085      	sub	sp, #20
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800432e:	2300      	movs	r3, #0
 8004330:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b20      	cmp	r3, #32
 800433c:	d12a      	bne.n	8004394 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2224      	movs	r2, #36	@ 0x24
 8004342:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f022 0201 	bic.w	r2, r2, #1
 8004354:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800435e:	89fb      	ldrh	r3, [r7, #14]
 8004360:	f023 030f 	bic.w	r3, r3, #15
 8004364:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	b29a      	uxth	r2, r3
 800436a:	89fb      	ldrh	r3, [r7, #14]
 800436c:	4313      	orrs	r3, r2
 800436e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	89fa      	ldrh	r2, [r7, #14]
 8004376:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f042 0201 	orr.w	r2, r2, #1
 8004386:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	2220      	movs	r2, #32
 800438c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004390:	2300      	movs	r3, #0
 8004392:	e000      	b.n	8004396 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004394:	2302      	movs	r3, #2
  }
}
 8004396:	4618      	mov	r0, r3
 8004398:	3714      	adds	r7, #20
 800439a:	46bd      	mov	sp, r7
 800439c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a0:	4770      	bx	lr
	...

080043a4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d101      	bne.n	80043b6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80043b2:	2301      	movs	r3, #1
 80043b4:	e0bf      	b.n	8004536 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d106      	bne.n	80043d0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2200      	movs	r2, #0
 80043c6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7fc fef8 	bl	80011c0 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2202      	movs	r2, #2
 80043d4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	699a      	ldr	r2, [r3, #24]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 80043e6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6999      	ldr	r1, [r3, #24]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	685a      	ldr	r2, [r3, #4]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80043fc:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	430a      	orrs	r2, r1
 800440a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	6899      	ldr	r1, [r3, #8]
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	4b4a      	ldr	r3, [pc, #296]	@ (8004540 <HAL_LTDC_Init+0x19c>)
 8004418:	400b      	ands	r3, r1
 800441a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	695b      	ldr	r3, [r3, #20]
 8004420:	041b      	lsls	r3, r3, #16
 8004422:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	6899      	ldr	r1, [r3, #8]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	699a      	ldr	r2, [r3, #24]
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	431a      	orrs	r2, r3
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	430a      	orrs	r2, r1
 8004438:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68d9      	ldr	r1, [r3, #12]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	4b3e      	ldr	r3, [pc, #248]	@ (8004540 <HAL_LTDC_Init+0x19c>)
 8004446:	400b      	ands	r3, r1
 8004448:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	69db      	ldr	r3, [r3, #28]
 800444e:	041b      	lsls	r3, r3, #16
 8004450:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	68d9      	ldr	r1, [r3, #12]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a1a      	ldr	r2, [r3, #32]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	431a      	orrs	r2, r3
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	430a      	orrs	r2, r1
 8004466:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	6919      	ldr	r1, [r3, #16]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681a      	ldr	r2, [r3, #0]
 8004472:	4b33      	ldr	r3, [pc, #204]	@ (8004540 <HAL_LTDC_Init+0x19c>)
 8004474:	400b      	ands	r3, r1
 8004476:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800447c:	041b      	lsls	r3, r3, #16
 800447e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6919      	ldr	r1, [r3, #16]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	431a      	orrs	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	6959      	ldr	r1, [r3, #20]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681a      	ldr	r2, [r3, #0]
 80044a0:	4b27      	ldr	r3, [pc, #156]	@ (8004540 <HAL_LTDC_Init+0x19c>)
 80044a2:	400b      	ands	r3, r1
 80044a4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044aa:	041b      	lsls	r3, r3, #16
 80044ac:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	6959      	ldr	r1, [r3, #20]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	431a      	orrs	r2, r3
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044ca:	021b      	lsls	r3, r3, #8
 80044cc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 80044d4:	041b      	lsls	r3, r3, #16
 80044d6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 80044e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80044ee:	68ba      	ldr	r2, [r7, #8]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80044fa:	431a      	orrs	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	430a      	orrs	r2, r1
 8004502:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f042 0206 	orr.w	r2, r2, #6
 8004512:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699a      	ldr	r2, [r3, #24]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0201 	orr.w	r2, r2, #1
 8004522:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2201      	movs	r2, #1
 8004530:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8004534:	2300      	movs	r3, #0
}
 8004536:	4618      	mov	r0, r3
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	f000f800 	.word	0xf000f800

08004544 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b084      	sub	sp, #16
 8004548:	af00      	add	r7, sp, #0
 800454a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004552:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800455a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f003 0304 	and.w	r3, r3, #4
 8004562:	2b00      	cmp	r3, #0
 8004564:	d023      	beq.n	80045ae <HAL_LTDC_IRQHandler+0x6a>
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	f003 0304 	and.w	r3, r3, #4
 800456c:	2b00      	cmp	r3, #0
 800456e:	d01e      	beq.n	80045ae <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f022 0204 	bic.w	r2, r2, #4
 800457e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2204      	movs	r2, #4
 8004586:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800458e:	f043 0201 	orr.w	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2204      	movs	r2, #4
 800459c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 f86f 	bl	800468c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f003 0302 	and.w	r3, r3, #2
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d023      	beq.n	8004600 <HAL_LTDC_IRQHandler+0xbc>
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d01e      	beq.n	8004600 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 0202 	bic.w	r2, r2, #2
 80045d0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2202      	movs	r2, #2
 80045d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80045e0:	f043 0202 	orr.w	r2, r3, #2
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2204      	movs	r2, #4
 80045ee:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f846 	bl	800468c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d01b      	beq.n	8004642 <HAL_LTDC_IRQHandler+0xfe>
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	f003 0301 	and.w	r3, r3, #1
 8004610:	2b00      	cmp	r3, #0
 8004612:	d016      	beq.n	8004642 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0201 	bic.w	r2, r2, #1
 8004622:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	2201      	movs	r2, #1
 800462a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2201      	movs	r2, #1
 8004630:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800463c:	6878      	ldr	r0, [r7, #4]
 800463e:	f000 f82f 	bl	80046a0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f003 0308 	and.w	r3, r3, #8
 8004648:	2b00      	cmp	r3, #0
 800464a:	d01b      	beq.n	8004684 <HAL_LTDC_IRQHandler+0x140>
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	f003 0308 	and.w	r3, r3, #8
 8004652:	2b00      	cmp	r3, #0
 8004654:	d016      	beq.n	8004684 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f022 0208 	bic.w	r2, r2, #8
 8004664:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2208      	movs	r2, #8
 800466c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f000 f818 	bl	80046b4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004684:	bf00      	nop
 8004686:	3710      	adds	r7, #16
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}

0800468c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800468c:	b480      	push	{r7}
 800468e:	b083      	sub	sp, #12
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004694:	bf00      	nop
 8004696:	370c      	adds	r7, #12
 8004698:	46bd      	mov	sp, r7
 800469a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469e:	4770      	bx	lr

080046a0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b083      	sub	sp, #12
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80046bc:	bf00      	nop
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80046c8:	b5b0      	push	{r4, r5, r7, lr}
 80046ca:	b084      	sub	sp, #16
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	60f8      	str	r0, [r7, #12]
 80046d0:	60b9      	str	r1, [r7, #8]
 80046d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80046da:	2b01      	cmp	r3, #1
 80046dc:	d101      	bne.n	80046e2 <HAL_LTDC_ConfigLayer+0x1a>
 80046de:	2302      	movs	r3, #2
 80046e0:	e02c      	b.n	800473c <HAL_LTDC_ConfigLayer+0x74>
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2201      	movs	r2, #1
 80046e6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2202      	movs	r2, #2
 80046ee:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80046f2:	68fa      	ldr	r2, [r7, #12]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2134      	movs	r1, #52	@ 0x34
 80046f8:	fb01 f303 	mul.w	r3, r1, r3
 80046fc:	4413      	add	r3, r2
 80046fe:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	4614      	mov	r4, r2
 8004706:	461d      	mov	r5, r3
 8004708:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800470a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800470c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800470e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004714:	682b      	ldr	r3, [r5, #0]
 8004716:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004718:	687a      	ldr	r2, [r7, #4]
 800471a:	68b9      	ldr	r1, [r7, #8]
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 f811 	bl	8004744 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	2201      	movs	r2, #1
 8004728:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2201      	movs	r2, #1
 800472e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	3710      	adds	r7, #16
 8004740:	46bd      	mov	sp, r7
 8004742:	bdb0      	pop	{r4, r5, r7, pc}

08004744 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004744:	b480      	push	{r7}
 8004746:	b089      	sub	sp, #36	@ 0x24
 8004748:	af00      	add	r7, sp, #0
 800474a:	60f8      	str	r0, [r7, #12]
 800474c:	60b9      	str	r1, [r7, #8]
 800474e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	68db      	ldr	r3, [r3, #12]
 800475a:	0c1b      	lsrs	r3, r3, #16
 800475c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004760:	4413      	add	r3, r2
 8004762:	041b      	lsls	r3, r3, #16
 8004764:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	461a      	mov	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	01db      	lsls	r3, r3, #7
 8004770:	4413      	add	r3, r2
 8004772:	3384      	adds	r3, #132	@ 0x84
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	6812      	ldr	r2, [r2, #0]
 800477a:	4611      	mov	r1, r2
 800477c:	687a      	ldr	r2, [r7, #4]
 800477e:	01d2      	lsls	r2, r2, #7
 8004780:	440a      	add	r2, r1
 8004782:	3284      	adds	r2, #132	@ 0x84
 8004784:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004788:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	68db      	ldr	r3, [r3, #12]
 8004794:	0c1b      	lsrs	r3, r3, #16
 8004796:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800479a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800479c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4619      	mov	r1, r3
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	01db      	lsls	r3, r3, #7
 80047a8:	440b      	add	r3, r1
 80047aa:	3384      	adds	r3, #132	@ 0x84
 80047ac:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80047b2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80047b4:	68bb      	ldr	r3, [r7, #8]
 80047b6:	68da      	ldr	r2, [r3, #12]
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047c2:	4413      	add	r3, r2
 80047c4:	041b      	lsls	r3, r3, #16
 80047c6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	461a      	mov	r2, r3
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	01db      	lsls	r3, r3, #7
 80047d2:	4413      	add	r3, r2
 80047d4:	3384      	adds	r3, #132	@ 0x84
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	6812      	ldr	r2, [r2, #0]
 80047dc:	4611      	mov	r1, r2
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	01d2      	lsls	r2, r2, #7
 80047e2:	440a      	add	r2, r1
 80047e4:	3284      	adds	r2, #132	@ 0x84
 80047e6:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80047ea:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	689a      	ldr	r2, [r3, #8]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	68db      	ldr	r3, [r3, #12]
 80047f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047fa:	4413      	add	r3, r2
 80047fc:	1c5a      	adds	r2, r3, #1
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4619      	mov	r1, r3
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	01db      	lsls	r3, r3, #7
 8004808:	440b      	add	r3, r1
 800480a:	3384      	adds	r3, #132	@ 0x84
 800480c:	4619      	mov	r1, r3
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	4313      	orrs	r3, r2
 8004812:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	461a      	mov	r2, r3
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	01db      	lsls	r3, r3, #7
 800481e:	4413      	add	r3, r2
 8004820:	3384      	adds	r3, #132	@ 0x84
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	68fa      	ldr	r2, [r7, #12]
 8004826:	6812      	ldr	r2, [r2, #0]
 8004828:	4611      	mov	r1, r2
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	01d2      	lsls	r2, r2, #7
 800482e:	440a      	add	r2, r1
 8004830:	3284      	adds	r2, #132	@ 0x84
 8004832:	f023 0307 	bic.w	r3, r3, #7
 8004836:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	461a      	mov	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	01db      	lsls	r3, r3, #7
 8004842:	4413      	add	r3, r2
 8004844:	3384      	adds	r3, #132	@ 0x84
 8004846:	461a      	mov	r2, r3
 8004848:	68bb      	ldr	r3, [r7, #8]
 800484a:	691b      	ldr	r3, [r3, #16]
 800484c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004854:	021b      	lsls	r3, r3, #8
 8004856:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004858:	68bb      	ldr	r3, [r7, #8]
 800485a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800485e:	041b      	lsls	r3, r3, #16
 8004860:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004862:	68bb      	ldr	r3, [r7, #8]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	061b      	lsls	r3, r3, #24
 8004868:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	461a      	mov	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	01db      	lsls	r3, r3, #7
 8004874:	4413      	add	r3, r2
 8004876:	3384      	adds	r3, #132	@ 0x84
 8004878:	699b      	ldr	r3, [r3, #24]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	461a      	mov	r2, r3
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	01db      	lsls	r3, r3, #7
 8004884:	4413      	add	r3, r2
 8004886:	3384      	adds	r3, #132	@ 0x84
 8004888:	461a      	mov	r2, r3
 800488a:	2300      	movs	r3, #0
 800488c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004894:	461a      	mov	r2, r3
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	431a      	orrs	r2, r3
 800489a:	69bb      	ldr	r3, [r7, #24]
 800489c:	431a      	orrs	r2, r3
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	4619      	mov	r1, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	01db      	lsls	r3, r3, #7
 80048a8:	440b      	add	r3, r1
 80048aa:	3384      	adds	r3, #132	@ 0x84
 80048ac:	4619      	mov	r1, r3
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	4313      	orrs	r3, r2
 80048b2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	461a      	mov	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	01db      	lsls	r3, r3, #7
 80048be:	4413      	add	r3, r2
 80048c0:	3384      	adds	r3, #132	@ 0x84
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	6812      	ldr	r2, [r2, #0]
 80048c8:	4611      	mov	r1, r2
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	01d2      	lsls	r2, r2, #7
 80048ce:	440a      	add	r2, r1
 80048d0:	3284      	adds	r2, #132	@ 0x84
 80048d2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80048d6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	461a      	mov	r2, r3
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	01db      	lsls	r3, r3, #7
 80048e2:	4413      	add	r3, r2
 80048e4:	3384      	adds	r3, #132	@ 0x84
 80048e6:	461a      	mov	r2, r3
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	695b      	ldr	r3, [r3, #20]
 80048ec:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	461a      	mov	r2, r3
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	01db      	lsls	r3, r3, #7
 80048f8:	4413      	add	r3, r2
 80048fa:	3384      	adds	r3, #132	@ 0x84
 80048fc:	69db      	ldr	r3, [r3, #28]
 80048fe:	68fa      	ldr	r2, [r7, #12]
 8004900:	6812      	ldr	r2, [r2, #0]
 8004902:	4611      	mov	r1, r2
 8004904:	687a      	ldr	r2, [r7, #4]
 8004906:	01d2      	lsls	r2, r2, #7
 8004908:	440a      	add	r2, r1
 800490a:	3284      	adds	r2, #132	@ 0x84
 800490c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004910:	f023 0307 	bic.w	r3, r3, #7
 8004914:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	69da      	ldr	r2, [r3, #28]
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	6a1b      	ldr	r3, [r3, #32]
 800491e:	68f9      	ldr	r1, [r7, #12]
 8004920:	6809      	ldr	r1, [r1, #0]
 8004922:	4608      	mov	r0, r1
 8004924:	6879      	ldr	r1, [r7, #4]
 8004926:	01c9      	lsls	r1, r1, #7
 8004928:	4401      	add	r1, r0
 800492a:	3184      	adds	r1, #132	@ 0x84
 800492c:	4313      	orrs	r3, r2
 800492e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	461a      	mov	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	01db      	lsls	r3, r3, #7
 800493a:	4413      	add	r3, r2
 800493c:	3384      	adds	r3, #132	@ 0x84
 800493e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	461a      	mov	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	01db      	lsls	r3, r3, #7
 800494a:	4413      	add	r3, r2
 800494c:	3384      	adds	r3, #132	@ 0x84
 800494e:	461a      	mov	r2, r3
 8004950:	2300      	movs	r3, #0
 8004952:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	461a      	mov	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	01db      	lsls	r3, r3, #7
 800495e:	4413      	add	r3, r2
 8004960:	3384      	adds	r3, #132	@ 0x84
 8004962:	461a      	mov	r2, r3
 8004964:	68bb      	ldr	r3, [r7, #8]
 8004966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004968:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d102      	bne.n	8004978 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004972:	2304      	movs	r3, #4
 8004974:	61fb      	str	r3, [r7, #28]
 8004976:	e01b      	b.n	80049b0 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	691b      	ldr	r3, [r3, #16]
 800497c:	2b01      	cmp	r3, #1
 800497e:	d102      	bne.n	8004986 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004980:	2303      	movs	r3, #3
 8004982:	61fb      	str	r3, [r7, #28]
 8004984:	e014      	b.n	80049b0 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	2b04      	cmp	r3, #4
 800498c:	d00b      	beq.n	80049a6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004992:	2b02      	cmp	r3, #2
 8004994:	d007      	beq.n	80049a6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800499a:	2b03      	cmp	r3, #3
 800499c:	d003      	beq.n	80049a6 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800499e:	68bb      	ldr	r3, [r7, #8]
 80049a0:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80049a2:	2b07      	cmp	r3, #7
 80049a4:	d102      	bne.n	80049ac <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 80049a6:	2302      	movs	r3, #2
 80049a8:	61fb      	str	r3, [r7, #28]
 80049aa:	e001      	b.n	80049b0 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 80049ac:	2301      	movs	r3, #1
 80049ae:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	461a      	mov	r2, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	01db      	lsls	r3, r3, #7
 80049ba:	4413      	add	r3, r2
 80049bc:	3384      	adds	r3, #132	@ 0x84
 80049be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049c0:	68fa      	ldr	r2, [r7, #12]
 80049c2:	6812      	ldr	r2, [r2, #0]
 80049c4:	4611      	mov	r1, r2
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	01d2      	lsls	r2, r2, #7
 80049ca:	440a      	add	r2, r1
 80049cc:	3284      	adds	r2, #132	@ 0x84
 80049ce:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 80049d2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049d8:	69fa      	ldr	r2, [r7, #28]
 80049da:	fb02 f303 	mul.w	r3, r2, r3
 80049de:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	6859      	ldr	r1, [r3, #4]
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	1acb      	subs	r3, r1, r3
 80049ea:	69f9      	ldr	r1, [r7, #28]
 80049ec:	fb01 f303 	mul.w	r3, r1, r3
 80049f0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80049f2:	68f9      	ldr	r1, [r7, #12]
 80049f4:	6809      	ldr	r1, [r1, #0]
 80049f6:	4608      	mov	r0, r1
 80049f8:	6879      	ldr	r1, [r7, #4]
 80049fa:	01c9      	lsls	r1, r1, #7
 80049fc:	4401      	add	r1, r0
 80049fe:	3184      	adds	r1, #132	@ 0x84
 8004a00:	4313      	orrs	r3, r2
 8004a02:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	461a      	mov	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	01db      	lsls	r3, r3, #7
 8004a0e:	4413      	add	r3, r2
 8004a10:	3384      	adds	r3, #132	@ 0x84
 8004a12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a14:	68fa      	ldr	r2, [r7, #12]
 8004a16:	6812      	ldr	r2, [r2, #0]
 8004a18:	4611      	mov	r1, r2
 8004a1a:	687a      	ldr	r2, [r7, #4]
 8004a1c:	01d2      	lsls	r2, r2, #7
 8004a1e:	440a      	add	r2, r1
 8004a20:	3284      	adds	r2, #132	@ 0x84
 8004a22:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004a26:	f023 0307 	bic.w	r3, r3, #7
 8004a2a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	461a      	mov	r2, r3
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	01db      	lsls	r3, r3, #7
 8004a36:	4413      	add	r3, r2
 8004a38:	3384      	adds	r3, #132	@ 0x84
 8004a3a:	461a      	mov	r2, r3
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a40:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	461a      	mov	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	01db      	lsls	r3, r3, #7
 8004a4c:	4413      	add	r3, r2
 8004a4e:	3384      	adds	r3, #132	@ 0x84
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	6812      	ldr	r2, [r2, #0]
 8004a56:	4611      	mov	r1, r2
 8004a58:	687a      	ldr	r2, [r7, #4]
 8004a5a:	01d2      	lsls	r2, r2, #7
 8004a5c:	440a      	add	r2, r1
 8004a5e:	3284      	adds	r2, #132	@ 0x84
 8004a60:	f043 0301 	orr.w	r3, r3, #1
 8004a64:	6013      	str	r3, [r2, #0]
}
 8004a66:	bf00      	nop
 8004a68:	3724      	adds	r7, #36	@ 0x24
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr
	...

08004a74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b086      	sub	sp, #24
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d101      	bne.n	8004a86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a82:	2301      	movs	r3, #1
 8004a84:	e267      	b.n	8004f56 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d075      	beq.n	8004b7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a92:	4b88      	ldr	r3, [pc, #544]	@ (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004a94:	689b      	ldr	r3, [r3, #8]
 8004a96:	f003 030c 	and.w	r3, r3, #12
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	d00c      	beq.n	8004ab8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a9e:	4b85      	ldr	r3, [pc, #532]	@ (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004aa6:	2b08      	cmp	r3, #8
 8004aa8:	d112      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004aaa:	4b82      	ldr	r3, [pc, #520]	@ (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ab2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ab6:	d10b      	bne.n	8004ad0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ab8:	4b7e      	ldr	r3, [pc, #504]	@ (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d05b      	beq.n	8004b7c <HAL_RCC_OscConfig+0x108>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d157      	bne.n	8004b7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e242      	b.n	8004f56 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004ad8:	d106      	bne.n	8004ae8 <HAL_RCC_OscConfig+0x74>
 8004ada:	4b76      	ldr	r3, [pc, #472]	@ (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4a75      	ldr	r2, [pc, #468]	@ (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004ae0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ae4:	6013      	str	r3, [r2, #0]
 8004ae6:	e01d      	b.n	8004b24 <HAL_RCC_OscConfig+0xb0>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004af0:	d10c      	bne.n	8004b0c <HAL_RCC_OscConfig+0x98>
 8004af2:	4b70      	ldr	r3, [pc, #448]	@ (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	4a6f      	ldr	r2, [pc, #444]	@ (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004af8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	4b6d      	ldr	r3, [pc, #436]	@ (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	4a6c      	ldr	r2, [pc, #432]	@ (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004b04:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004b08:	6013      	str	r3, [r2, #0]
 8004b0a:	e00b      	b.n	8004b24 <HAL_RCC_OscConfig+0xb0>
 8004b0c:	4b69      	ldr	r3, [pc, #420]	@ (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a68      	ldr	r2, [pc, #416]	@ (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004b12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004b16:	6013      	str	r3, [r2, #0]
 8004b18:	4b66      	ldr	r3, [pc, #408]	@ (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a65      	ldr	r2, [pc, #404]	@ (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004b1e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004b22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	685b      	ldr	r3, [r3, #4]
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d013      	beq.n	8004b54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b2c:	f7fc ff6a 	bl	8001a04 <HAL_GetTick>
 8004b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b32:	e008      	b.n	8004b46 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b34:	f7fc ff66 	bl	8001a04 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	693b      	ldr	r3, [r7, #16]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	2b64      	cmp	r3, #100	@ 0x64
 8004b40:	d901      	bls.n	8004b46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004b42:	2303      	movs	r3, #3
 8004b44:	e207      	b.n	8004f56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b46:	4b5b      	ldr	r3, [pc, #364]	@ (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d0f0      	beq.n	8004b34 <HAL_RCC_OscConfig+0xc0>
 8004b52:	e014      	b.n	8004b7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b54:	f7fc ff56 	bl	8001a04 <HAL_GetTick>
 8004b58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b5a:	e008      	b.n	8004b6e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b5c:	f7fc ff52 	bl	8001a04 <HAL_GetTick>
 8004b60:	4602      	mov	r2, r0
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	1ad3      	subs	r3, r2, r3
 8004b66:	2b64      	cmp	r3, #100	@ 0x64
 8004b68:	d901      	bls.n	8004b6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b6a:	2303      	movs	r3, #3
 8004b6c:	e1f3      	b.n	8004f56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b6e:	4b51      	ldr	r3, [pc, #324]	@ (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d1f0      	bne.n	8004b5c <HAL_RCC_OscConfig+0xe8>
 8004b7a:	e000      	b.n	8004b7e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d063      	beq.n	8004c52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b8a:	4b4a      	ldr	r3, [pc, #296]	@ (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	f003 030c 	and.w	r3, r3, #12
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00b      	beq.n	8004bae <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b96:	4b47      	ldr	r3, [pc, #284]	@ (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004b98:	689b      	ldr	r3, [r3, #8]
 8004b9a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b9e:	2b08      	cmp	r3, #8
 8004ba0:	d11c      	bne.n	8004bdc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ba2:	4b44      	ldr	r3, [pc, #272]	@ (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d116      	bne.n	8004bdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bae:	4b41      	ldr	r3, [pc, #260]	@ (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d005      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x152>
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	68db      	ldr	r3, [r3, #12]
 8004bbe:	2b01      	cmp	r3, #1
 8004bc0:	d001      	beq.n	8004bc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e1c7      	b.n	8004f56 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bc6:	4b3b      	ldr	r3, [pc, #236]	@ (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	00db      	lsls	r3, r3, #3
 8004bd4:	4937      	ldr	r1, [pc, #220]	@ (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004bd6:	4313      	orrs	r3, r2
 8004bd8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004bda:	e03a      	b.n	8004c52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d020      	beq.n	8004c26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004be4:	4b34      	ldr	r3, [pc, #208]	@ (8004cb8 <HAL_RCC_OscConfig+0x244>)
 8004be6:	2201      	movs	r2, #1
 8004be8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bea:	f7fc ff0b 	bl	8001a04 <HAL_GetTick>
 8004bee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bf0:	e008      	b.n	8004c04 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004bf2:	f7fc ff07 	bl	8001a04 <HAL_GetTick>
 8004bf6:	4602      	mov	r2, r0
 8004bf8:	693b      	ldr	r3, [r7, #16]
 8004bfa:	1ad3      	subs	r3, r2, r3
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d901      	bls.n	8004c04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e1a8      	b.n	8004f56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c04:	4b2b      	ldr	r3, [pc, #172]	@ (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d0f0      	beq.n	8004bf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c10:	4b28      	ldr	r3, [pc, #160]	@ (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	00db      	lsls	r3, r3, #3
 8004c1e:	4925      	ldr	r1, [pc, #148]	@ (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	600b      	str	r3, [r1, #0]
 8004c24:	e015      	b.n	8004c52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c26:	4b24      	ldr	r3, [pc, #144]	@ (8004cb8 <HAL_RCC_OscConfig+0x244>)
 8004c28:	2200      	movs	r2, #0
 8004c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c2c:	f7fc feea 	bl	8001a04 <HAL_GetTick>
 8004c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c32:	e008      	b.n	8004c46 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c34:	f7fc fee6 	bl	8001a04 <HAL_GetTick>
 8004c38:	4602      	mov	r2, r0
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	1ad3      	subs	r3, r2, r3
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d901      	bls.n	8004c46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004c42:	2303      	movs	r3, #3
 8004c44:	e187      	b.n	8004f56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c46:	4b1b      	ldr	r3, [pc, #108]	@ (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f003 0302 	and.w	r3, r3, #2
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1f0      	bne.n	8004c34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f003 0308 	and.w	r3, r3, #8
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d036      	beq.n	8004ccc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d016      	beq.n	8004c94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c66:	4b15      	ldr	r3, [pc, #84]	@ (8004cbc <HAL_RCC_OscConfig+0x248>)
 8004c68:	2201      	movs	r2, #1
 8004c6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c6c:	f7fc feca 	bl	8001a04 <HAL_GetTick>
 8004c70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c72:	e008      	b.n	8004c86 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c74:	f7fc fec6 	bl	8001a04 <HAL_GetTick>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	693b      	ldr	r3, [r7, #16]
 8004c7c:	1ad3      	subs	r3, r2, r3
 8004c7e:	2b02      	cmp	r3, #2
 8004c80:	d901      	bls.n	8004c86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c82:	2303      	movs	r3, #3
 8004c84:	e167      	b.n	8004f56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c86:	4b0b      	ldr	r3, [pc, #44]	@ (8004cb4 <HAL_RCC_OscConfig+0x240>)
 8004c88:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c8a:	f003 0302 	and.w	r3, r3, #2
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d0f0      	beq.n	8004c74 <HAL_RCC_OscConfig+0x200>
 8004c92:	e01b      	b.n	8004ccc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c94:	4b09      	ldr	r3, [pc, #36]	@ (8004cbc <HAL_RCC_OscConfig+0x248>)
 8004c96:	2200      	movs	r2, #0
 8004c98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c9a:	f7fc feb3 	bl	8001a04 <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ca0:	e00e      	b.n	8004cc0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ca2:	f7fc feaf 	bl	8001a04 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d907      	bls.n	8004cc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e150      	b.n	8004f56 <HAL_RCC_OscConfig+0x4e2>
 8004cb4:	40023800 	.word	0x40023800
 8004cb8:	42470000 	.word	0x42470000
 8004cbc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004cc0:	4b88      	ldr	r3, [pc, #544]	@ (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004cc2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004cc4:	f003 0302 	and.w	r3, r3, #2
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d1ea      	bne.n	8004ca2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f003 0304 	and.w	r3, r3, #4
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 8097 	beq.w	8004e08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004cda:	2300      	movs	r3, #0
 8004cdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004cde:	4b81      	ldr	r3, [pc, #516]	@ (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ce2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d10f      	bne.n	8004d0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004cea:	2300      	movs	r3, #0
 8004cec:	60bb      	str	r3, [r7, #8]
 8004cee:	4b7d      	ldr	r3, [pc, #500]	@ (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004cf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cf2:	4a7c      	ldr	r2, [pc, #496]	@ (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004cf4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cf8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004cfa:	4b7a      	ldr	r3, [pc, #488]	@ (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004d02:	60bb      	str	r3, [r7, #8]
 8004d04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d06:	2301      	movs	r3, #1
 8004d08:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d0a:	4b77      	ldr	r3, [pc, #476]	@ (8004ee8 <HAL_RCC_OscConfig+0x474>)
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d118      	bne.n	8004d48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d16:	4b74      	ldr	r3, [pc, #464]	@ (8004ee8 <HAL_RCC_OscConfig+0x474>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	4a73      	ldr	r2, [pc, #460]	@ (8004ee8 <HAL_RCC_OscConfig+0x474>)
 8004d1c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004d20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d22:	f7fc fe6f 	bl	8001a04 <HAL_GetTick>
 8004d26:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d28:	e008      	b.n	8004d3c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d2a:	f7fc fe6b 	bl	8001a04 <HAL_GetTick>
 8004d2e:	4602      	mov	r2, r0
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	1ad3      	subs	r3, r2, r3
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d901      	bls.n	8004d3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004d38:	2303      	movs	r3, #3
 8004d3a:	e10c      	b.n	8004f56 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d3c:	4b6a      	ldr	r3, [pc, #424]	@ (8004ee8 <HAL_RCC_OscConfig+0x474>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d0f0      	beq.n	8004d2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d106      	bne.n	8004d5e <HAL_RCC_OscConfig+0x2ea>
 8004d50:	4b64      	ldr	r3, [pc, #400]	@ (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004d52:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d54:	4a63      	ldr	r2, [pc, #396]	@ (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004d56:	f043 0301 	orr.w	r3, r3, #1
 8004d5a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d5c:	e01c      	b.n	8004d98 <HAL_RCC_OscConfig+0x324>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	2b05      	cmp	r3, #5
 8004d64:	d10c      	bne.n	8004d80 <HAL_RCC_OscConfig+0x30c>
 8004d66:	4b5f      	ldr	r3, [pc, #380]	@ (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004d68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d6a:	4a5e      	ldr	r2, [pc, #376]	@ (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004d6c:	f043 0304 	orr.w	r3, r3, #4
 8004d70:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d72:	4b5c      	ldr	r3, [pc, #368]	@ (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004d74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d76:	4a5b      	ldr	r2, [pc, #364]	@ (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004d78:	f043 0301 	orr.w	r3, r3, #1
 8004d7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d7e:	e00b      	b.n	8004d98 <HAL_RCC_OscConfig+0x324>
 8004d80:	4b58      	ldr	r3, [pc, #352]	@ (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004d82:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d84:	4a57      	ldr	r2, [pc, #348]	@ (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004d86:	f023 0301 	bic.w	r3, r3, #1
 8004d8a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d8c:	4b55      	ldr	r3, [pc, #340]	@ (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004d8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d90:	4a54      	ldr	r2, [pc, #336]	@ (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004d92:	f023 0304 	bic.w	r3, r3, #4
 8004d96:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689b      	ldr	r3, [r3, #8]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d015      	beq.n	8004dcc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004da0:	f7fc fe30 	bl	8001a04 <HAL_GetTick>
 8004da4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004da6:	e00a      	b.n	8004dbe <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004da8:	f7fc fe2c 	bl	8001a04 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d901      	bls.n	8004dbe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004dba:	2303      	movs	r3, #3
 8004dbc:	e0cb      	b.n	8004f56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dbe:	4b49      	ldr	r3, [pc, #292]	@ (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004dc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dc2:	f003 0302 	and.w	r3, r3, #2
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d0ee      	beq.n	8004da8 <HAL_RCC_OscConfig+0x334>
 8004dca:	e014      	b.n	8004df6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dcc:	f7fc fe1a 	bl	8001a04 <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dd2:	e00a      	b.n	8004dea <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dd4:	f7fc fe16 	bl	8001a04 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d901      	bls.n	8004dea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e0b5      	b.n	8004f56 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004dea:	4b3e      	ldr	r3, [pc, #248]	@ (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004dec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004dee:	f003 0302 	and.w	r3, r3, #2
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d1ee      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004df6:	7dfb      	ldrb	r3, [r7, #23]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d105      	bne.n	8004e08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dfc:	4b39      	ldr	r3, [pc, #228]	@ (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004dfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e00:	4a38      	ldr	r2, [pc, #224]	@ (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004e02:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004e06:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	699b      	ldr	r3, [r3, #24]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	f000 80a1 	beq.w	8004f54 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004e12:	4b34      	ldr	r3, [pc, #208]	@ (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f003 030c 	and.w	r3, r3, #12
 8004e1a:	2b08      	cmp	r3, #8
 8004e1c:	d05c      	beq.n	8004ed8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	699b      	ldr	r3, [r3, #24]
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d141      	bne.n	8004eaa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e26:	4b31      	ldr	r3, [pc, #196]	@ (8004eec <HAL_RCC_OscConfig+0x478>)
 8004e28:	2200      	movs	r2, #0
 8004e2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e2c:	f7fc fdea 	bl	8001a04 <HAL_GetTick>
 8004e30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e32:	e008      	b.n	8004e46 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e34:	f7fc fde6 	bl	8001a04 <HAL_GetTick>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	693b      	ldr	r3, [r7, #16]
 8004e3c:	1ad3      	subs	r3, r2, r3
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d901      	bls.n	8004e46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e087      	b.n	8004f56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e46:	4b27      	ldr	r3, [pc, #156]	@ (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d1f0      	bne.n	8004e34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	69da      	ldr	r2, [r3, #28]
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a1b      	ldr	r3, [r3, #32]
 8004e5a:	431a      	orrs	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e60:	019b      	lsls	r3, r3, #6
 8004e62:	431a      	orrs	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e68:	085b      	lsrs	r3, r3, #1
 8004e6a:	3b01      	subs	r3, #1
 8004e6c:	041b      	lsls	r3, r3, #16
 8004e6e:	431a      	orrs	r2, r3
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e74:	061b      	lsls	r3, r3, #24
 8004e76:	491b      	ldr	r1, [pc, #108]	@ (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e7c:	4b1b      	ldr	r3, [pc, #108]	@ (8004eec <HAL_RCC_OscConfig+0x478>)
 8004e7e:	2201      	movs	r2, #1
 8004e80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e82:	f7fc fdbf 	bl	8001a04 <HAL_GetTick>
 8004e86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e88:	e008      	b.n	8004e9c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e8a:	f7fc fdbb 	bl	8001a04 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	2b02      	cmp	r3, #2
 8004e96:	d901      	bls.n	8004e9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e98:	2303      	movs	r3, #3
 8004e9a:	e05c      	b.n	8004f56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e9c:	4b11      	ldr	r3, [pc, #68]	@ (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d0f0      	beq.n	8004e8a <HAL_RCC_OscConfig+0x416>
 8004ea8:	e054      	b.n	8004f54 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004eaa:	4b10      	ldr	r3, [pc, #64]	@ (8004eec <HAL_RCC_OscConfig+0x478>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004eb0:	f7fc fda8 	bl	8001a04 <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb8:	f7fc fda4 	bl	8001a04 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e045      	b.n	8004f56 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eca:	4b06      	ldr	r3, [pc, #24]	@ (8004ee4 <HAL_RCC_OscConfig+0x470>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1f0      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x444>
 8004ed6:	e03d      	b.n	8004f54 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	699b      	ldr	r3, [r3, #24]
 8004edc:	2b01      	cmp	r3, #1
 8004ede:	d107      	bne.n	8004ef0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e038      	b.n	8004f56 <HAL_RCC_OscConfig+0x4e2>
 8004ee4:	40023800 	.word	0x40023800
 8004ee8:	40007000 	.word	0x40007000
 8004eec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8004f60 <HAL_RCC_OscConfig+0x4ec>)
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	2b01      	cmp	r3, #1
 8004efc:	d028      	beq.n	8004f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d121      	bne.n	8004f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f16:	429a      	cmp	r2, r3
 8004f18:	d11a      	bne.n	8004f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f1a:	68fa      	ldr	r2, [r7, #12]
 8004f1c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004f20:	4013      	ands	r3, r2
 8004f22:	687a      	ldr	r2, [r7, #4]
 8004f24:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004f26:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d111      	bne.n	8004f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f36:	085b      	lsrs	r3, r3, #1
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004f3c:	429a      	cmp	r2, r3
 8004f3e:	d107      	bne.n	8004f50 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004f4c:	429a      	cmp	r2, r3
 8004f4e:	d001      	beq.n	8004f54 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	e000      	b.n	8004f56 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f54:	2300      	movs	r3, #0
}
 8004f56:	4618      	mov	r0, r3
 8004f58:	3718      	adds	r7, #24
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
 8004f5e:	bf00      	nop
 8004f60:	40023800 	.word	0x40023800

08004f64 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b084      	sub	sp, #16
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d101      	bne.n	8004f78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f74:	2301      	movs	r3, #1
 8004f76:	e0cc      	b.n	8005112 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f78:	4b68      	ldr	r3, [pc, #416]	@ (800511c <HAL_RCC_ClockConfig+0x1b8>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 030f 	and.w	r3, r3, #15
 8004f80:	683a      	ldr	r2, [r7, #0]
 8004f82:	429a      	cmp	r2, r3
 8004f84:	d90c      	bls.n	8004fa0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f86:	4b65      	ldr	r3, [pc, #404]	@ (800511c <HAL_RCC_ClockConfig+0x1b8>)
 8004f88:	683a      	ldr	r2, [r7, #0]
 8004f8a:	b2d2      	uxtb	r2, r2
 8004f8c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f8e:	4b63      	ldr	r3, [pc, #396]	@ (800511c <HAL_RCC_ClockConfig+0x1b8>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 030f 	and.w	r3, r3, #15
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d001      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e0b8      	b.n	8005112 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0302 	and.w	r3, r3, #2
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d020      	beq.n	8004fee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f003 0304 	and.w	r3, r3, #4
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d005      	beq.n	8004fc4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004fb8:	4b59      	ldr	r3, [pc, #356]	@ (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 8004fba:	689b      	ldr	r3, [r3, #8]
 8004fbc:	4a58      	ldr	r2, [pc, #352]	@ (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 8004fbe:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004fc2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	f003 0308 	and.w	r3, r3, #8
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d005      	beq.n	8004fdc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004fd0:	4b53      	ldr	r3, [pc, #332]	@ (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	4a52      	ldr	r2, [pc, #328]	@ (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004fda:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004fdc:	4b50      	ldr	r3, [pc, #320]	@ (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	494d      	ldr	r1, [pc, #308]	@ (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 8004fea:	4313      	orrs	r3, r2
 8004fec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f003 0301 	and.w	r3, r3, #1
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d044      	beq.n	8005084 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d107      	bne.n	8005012 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005002:	4b47      	ldr	r3, [pc, #284]	@ (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800500a:	2b00      	cmp	r3, #0
 800500c:	d119      	bne.n	8005042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800500e:	2301      	movs	r3, #1
 8005010:	e07f      	b.n	8005112 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	2b02      	cmp	r3, #2
 8005018:	d003      	beq.n	8005022 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800501e:	2b03      	cmp	r3, #3
 8005020:	d107      	bne.n	8005032 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005022:	4b3f      	ldr	r3, [pc, #252]	@ (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d109      	bne.n	8005042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800502e:	2301      	movs	r3, #1
 8005030:	e06f      	b.n	8005112 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005032:	4b3b      	ldr	r3, [pc, #236]	@ (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d101      	bne.n	8005042 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e067      	b.n	8005112 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005042:	4b37      	ldr	r3, [pc, #220]	@ (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f023 0203 	bic.w	r2, r3, #3
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	4934      	ldr	r1, [pc, #208]	@ (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 8005050:	4313      	orrs	r3, r2
 8005052:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005054:	f7fc fcd6 	bl	8001a04 <HAL_GetTick>
 8005058:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800505a:	e00a      	b.n	8005072 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800505c:	f7fc fcd2 	bl	8001a04 <HAL_GetTick>
 8005060:	4602      	mov	r2, r0
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	f241 3288 	movw	r2, #5000	@ 0x1388
 800506a:	4293      	cmp	r3, r2
 800506c:	d901      	bls.n	8005072 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800506e:	2303      	movs	r3, #3
 8005070:	e04f      	b.n	8005112 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005072:	4b2b      	ldr	r3, [pc, #172]	@ (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	f003 020c 	and.w	r2, r3, #12
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	009b      	lsls	r3, r3, #2
 8005080:	429a      	cmp	r2, r3
 8005082:	d1eb      	bne.n	800505c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005084:	4b25      	ldr	r3, [pc, #148]	@ (800511c <HAL_RCC_ClockConfig+0x1b8>)
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f003 030f 	and.w	r3, r3, #15
 800508c:	683a      	ldr	r2, [r7, #0]
 800508e:	429a      	cmp	r2, r3
 8005090:	d20c      	bcs.n	80050ac <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005092:	4b22      	ldr	r3, [pc, #136]	@ (800511c <HAL_RCC_ClockConfig+0x1b8>)
 8005094:	683a      	ldr	r2, [r7, #0]
 8005096:	b2d2      	uxtb	r2, r2
 8005098:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800509a:	4b20      	ldr	r3, [pc, #128]	@ (800511c <HAL_RCC_ClockConfig+0x1b8>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f003 030f 	and.w	r3, r3, #15
 80050a2:	683a      	ldr	r2, [r7, #0]
 80050a4:	429a      	cmp	r2, r3
 80050a6:	d001      	beq.n	80050ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e032      	b.n	8005112 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f003 0304 	and.w	r3, r3, #4
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d008      	beq.n	80050ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80050b8:	4b19      	ldr	r3, [pc, #100]	@ (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	68db      	ldr	r3, [r3, #12]
 80050c4:	4916      	ldr	r1, [pc, #88]	@ (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0308 	and.w	r3, r3, #8
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d009      	beq.n	80050ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80050d6:	4b12      	ldr	r3, [pc, #72]	@ (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 80050d8:	689b      	ldr	r3, [r3, #8]
 80050da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	691b      	ldr	r3, [r3, #16]
 80050e2:	00db      	lsls	r3, r3, #3
 80050e4:	490e      	ldr	r1, [pc, #56]	@ (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 80050e6:	4313      	orrs	r3, r2
 80050e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80050ea:	f000 f821 	bl	8005130 <HAL_RCC_GetSysClockFreq>
 80050ee:	4602      	mov	r2, r0
 80050f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005120 <HAL_RCC_ClockConfig+0x1bc>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	091b      	lsrs	r3, r3, #4
 80050f6:	f003 030f 	and.w	r3, r3, #15
 80050fa:	490a      	ldr	r1, [pc, #40]	@ (8005124 <HAL_RCC_ClockConfig+0x1c0>)
 80050fc:	5ccb      	ldrb	r3, [r1, r3]
 80050fe:	fa22 f303 	lsr.w	r3, r2, r3
 8005102:	4a09      	ldr	r2, [pc, #36]	@ (8005128 <HAL_RCC_ClockConfig+0x1c4>)
 8005104:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005106:	4b09      	ldr	r3, [pc, #36]	@ (800512c <HAL_RCC_ClockConfig+0x1c8>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4618      	mov	r0, r3
 800510c:	f7fc fb34 	bl	8001778 <HAL_InitTick>

  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
 800511a:	bf00      	nop
 800511c:	40023c00 	.word	0x40023c00
 8005120:	40023800 	.word	0x40023800
 8005124:	08007f3c 	.word	0x08007f3c
 8005128:	20000004 	.word	0x20000004
 800512c:	20000008 	.word	0x20000008

08005130 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005130:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005134:	b094      	sub	sp, #80	@ 0x50
 8005136:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800513c:	2300      	movs	r3, #0
 800513e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005140:	2300      	movs	r3, #0
 8005142:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005144:	2300      	movs	r3, #0
 8005146:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005148:	4b79      	ldr	r3, [pc, #484]	@ (8005330 <HAL_RCC_GetSysClockFreq+0x200>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 030c 	and.w	r3, r3, #12
 8005150:	2b08      	cmp	r3, #8
 8005152:	d00d      	beq.n	8005170 <HAL_RCC_GetSysClockFreq+0x40>
 8005154:	2b08      	cmp	r3, #8
 8005156:	f200 80e1 	bhi.w	800531c <HAL_RCC_GetSysClockFreq+0x1ec>
 800515a:	2b00      	cmp	r3, #0
 800515c:	d002      	beq.n	8005164 <HAL_RCC_GetSysClockFreq+0x34>
 800515e:	2b04      	cmp	r3, #4
 8005160:	d003      	beq.n	800516a <HAL_RCC_GetSysClockFreq+0x3a>
 8005162:	e0db      	b.n	800531c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005164:	4b73      	ldr	r3, [pc, #460]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x204>)
 8005166:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005168:	e0db      	b.n	8005322 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800516a:	4b73      	ldr	r3, [pc, #460]	@ (8005338 <HAL_RCC_GetSysClockFreq+0x208>)
 800516c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800516e:	e0d8      	b.n	8005322 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005170:	4b6f      	ldr	r3, [pc, #444]	@ (8005330 <HAL_RCC_GetSysClockFreq+0x200>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005178:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800517a:	4b6d      	ldr	r3, [pc, #436]	@ (8005330 <HAL_RCC_GetSysClockFreq+0x200>)
 800517c:	685b      	ldr	r3, [r3, #4]
 800517e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005182:	2b00      	cmp	r3, #0
 8005184:	d063      	beq.n	800524e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005186:	4b6a      	ldr	r3, [pc, #424]	@ (8005330 <HAL_RCC_GetSysClockFreq+0x200>)
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	099b      	lsrs	r3, r3, #6
 800518c:	2200      	movs	r2, #0
 800518e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005190:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005194:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005198:	633b      	str	r3, [r7, #48]	@ 0x30
 800519a:	2300      	movs	r3, #0
 800519c:	637b      	str	r3, [r7, #52]	@ 0x34
 800519e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80051a2:	4622      	mov	r2, r4
 80051a4:	462b      	mov	r3, r5
 80051a6:	f04f 0000 	mov.w	r0, #0
 80051aa:	f04f 0100 	mov.w	r1, #0
 80051ae:	0159      	lsls	r1, r3, #5
 80051b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051b4:	0150      	lsls	r0, r2, #5
 80051b6:	4602      	mov	r2, r0
 80051b8:	460b      	mov	r3, r1
 80051ba:	4621      	mov	r1, r4
 80051bc:	1a51      	subs	r1, r2, r1
 80051be:	6139      	str	r1, [r7, #16]
 80051c0:	4629      	mov	r1, r5
 80051c2:	eb63 0301 	sbc.w	r3, r3, r1
 80051c6:	617b      	str	r3, [r7, #20]
 80051c8:	f04f 0200 	mov.w	r2, #0
 80051cc:	f04f 0300 	mov.w	r3, #0
 80051d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80051d4:	4659      	mov	r1, fp
 80051d6:	018b      	lsls	r3, r1, #6
 80051d8:	4651      	mov	r1, sl
 80051da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80051de:	4651      	mov	r1, sl
 80051e0:	018a      	lsls	r2, r1, #6
 80051e2:	4651      	mov	r1, sl
 80051e4:	ebb2 0801 	subs.w	r8, r2, r1
 80051e8:	4659      	mov	r1, fp
 80051ea:	eb63 0901 	sbc.w	r9, r3, r1
 80051ee:	f04f 0200 	mov.w	r2, #0
 80051f2:	f04f 0300 	mov.w	r3, #0
 80051f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005202:	4690      	mov	r8, r2
 8005204:	4699      	mov	r9, r3
 8005206:	4623      	mov	r3, r4
 8005208:	eb18 0303 	adds.w	r3, r8, r3
 800520c:	60bb      	str	r3, [r7, #8]
 800520e:	462b      	mov	r3, r5
 8005210:	eb49 0303 	adc.w	r3, r9, r3
 8005214:	60fb      	str	r3, [r7, #12]
 8005216:	f04f 0200 	mov.w	r2, #0
 800521a:	f04f 0300 	mov.w	r3, #0
 800521e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005222:	4629      	mov	r1, r5
 8005224:	024b      	lsls	r3, r1, #9
 8005226:	4621      	mov	r1, r4
 8005228:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800522c:	4621      	mov	r1, r4
 800522e:	024a      	lsls	r2, r1, #9
 8005230:	4610      	mov	r0, r2
 8005232:	4619      	mov	r1, r3
 8005234:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005236:	2200      	movs	r2, #0
 8005238:	62bb      	str	r3, [r7, #40]	@ 0x28
 800523a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800523c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005240:	f7fa ffdc 	bl	80001fc <__aeabi_uldivmod>
 8005244:	4602      	mov	r2, r0
 8005246:	460b      	mov	r3, r1
 8005248:	4613      	mov	r3, r2
 800524a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800524c:	e058      	b.n	8005300 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800524e:	4b38      	ldr	r3, [pc, #224]	@ (8005330 <HAL_RCC_GetSysClockFreq+0x200>)
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	099b      	lsrs	r3, r3, #6
 8005254:	2200      	movs	r2, #0
 8005256:	4618      	mov	r0, r3
 8005258:	4611      	mov	r1, r2
 800525a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800525e:	623b      	str	r3, [r7, #32]
 8005260:	2300      	movs	r3, #0
 8005262:	627b      	str	r3, [r7, #36]	@ 0x24
 8005264:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005268:	4642      	mov	r2, r8
 800526a:	464b      	mov	r3, r9
 800526c:	f04f 0000 	mov.w	r0, #0
 8005270:	f04f 0100 	mov.w	r1, #0
 8005274:	0159      	lsls	r1, r3, #5
 8005276:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800527a:	0150      	lsls	r0, r2, #5
 800527c:	4602      	mov	r2, r0
 800527e:	460b      	mov	r3, r1
 8005280:	4641      	mov	r1, r8
 8005282:	ebb2 0a01 	subs.w	sl, r2, r1
 8005286:	4649      	mov	r1, r9
 8005288:	eb63 0b01 	sbc.w	fp, r3, r1
 800528c:	f04f 0200 	mov.w	r2, #0
 8005290:	f04f 0300 	mov.w	r3, #0
 8005294:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005298:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800529c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80052a0:	ebb2 040a 	subs.w	r4, r2, sl
 80052a4:	eb63 050b 	sbc.w	r5, r3, fp
 80052a8:	f04f 0200 	mov.w	r2, #0
 80052ac:	f04f 0300 	mov.w	r3, #0
 80052b0:	00eb      	lsls	r3, r5, #3
 80052b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80052b6:	00e2      	lsls	r2, r4, #3
 80052b8:	4614      	mov	r4, r2
 80052ba:	461d      	mov	r5, r3
 80052bc:	4643      	mov	r3, r8
 80052be:	18e3      	adds	r3, r4, r3
 80052c0:	603b      	str	r3, [r7, #0]
 80052c2:	464b      	mov	r3, r9
 80052c4:	eb45 0303 	adc.w	r3, r5, r3
 80052c8:	607b      	str	r3, [r7, #4]
 80052ca:	f04f 0200 	mov.w	r2, #0
 80052ce:	f04f 0300 	mov.w	r3, #0
 80052d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80052d6:	4629      	mov	r1, r5
 80052d8:	028b      	lsls	r3, r1, #10
 80052da:	4621      	mov	r1, r4
 80052dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80052e0:	4621      	mov	r1, r4
 80052e2:	028a      	lsls	r2, r1, #10
 80052e4:	4610      	mov	r0, r2
 80052e6:	4619      	mov	r1, r3
 80052e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80052ea:	2200      	movs	r2, #0
 80052ec:	61bb      	str	r3, [r7, #24]
 80052ee:	61fa      	str	r2, [r7, #28]
 80052f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052f4:	f7fa ff82 	bl	80001fc <__aeabi_uldivmod>
 80052f8:	4602      	mov	r2, r0
 80052fa:	460b      	mov	r3, r1
 80052fc:	4613      	mov	r3, r2
 80052fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005300:	4b0b      	ldr	r3, [pc, #44]	@ (8005330 <HAL_RCC_GetSysClockFreq+0x200>)
 8005302:	685b      	ldr	r3, [r3, #4]
 8005304:	0c1b      	lsrs	r3, r3, #16
 8005306:	f003 0303 	and.w	r3, r3, #3
 800530a:	3301      	adds	r3, #1
 800530c:	005b      	lsls	r3, r3, #1
 800530e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005310:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005312:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005314:	fbb2 f3f3 	udiv	r3, r2, r3
 8005318:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800531a:	e002      	b.n	8005322 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800531c:	4b05      	ldr	r3, [pc, #20]	@ (8005334 <HAL_RCC_GetSysClockFreq+0x204>)
 800531e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005320:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005322:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005324:	4618      	mov	r0, r3
 8005326:	3750      	adds	r7, #80	@ 0x50
 8005328:	46bd      	mov	sp, r7
 800532a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800532e:	bf00      	nop
 8005330:	40023800 	.word	0x40023800
 8005334:	00f42400 	.word	0x00f42400
 8005338:	007a1200 	.word	0x007a1200

0800533c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800533c:	b480      	push	{r7}
 800533e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005340:	4b03      	ldr	r3, [pc, #12]	@ (8005350 <HAL_RCC_GetHCLKFreq+0x14>)
 8005342:	681b      	ldr	r3, [r3, #0]
}
 8005344:	4618      	mov	r0, r3
 8005346:	46bd      	mov	sp, r7
 8005348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800534c:	4770      	bx	lr
 800534e:	bf00      	nop
 8005350:	20000004 	.word	0x20000004

08005354 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005358:	f7ff fff0 	bl	800533c <HAL_RCC_GetHCLKFreq>
 800535c:	4602      	mov	r2, r0
 800535e:	4b05      	ldr	r3, [pc, #20]	@ (8005374 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005360:	689b      	ldr	r3, [r3, #8]
 8005362:	0a9b      	lsrs	r3, r3, #10
 8005364:	f003 0307 	and.w	r3, r3, #7
 8005368:	4903      	ldr	r1, [pc, #12]	@ (8005378 <HAL_RCC_GetPCLK1Freq+0x24>)
 800536a:	5ccb      	ldrb	r3, [r1, r3]
 800536c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005370:	4618      	mov	r0, r3
 8005372:	bd80      	pop	{r7, pc}
 8005374:	40023800 	.word	0x40023800
 8005378:	08007f4c 	.word	0x08007f4c

0800537c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005380:	f7ff ffdc 	bl	800533c <HAL_RCC_GetHCLKFreq>
 8005384:	4602      	mov	r2, r0
 8005386:	4b05      	ldr	r3, [pc, #20]	@ (800539c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	0b5b      	lsrs	r3, r3, #13
 800538c:	f003 0307 	and.w	r3, r3, #7
 8005390:	4903      	ldr	r1, [pc, #12]	@ (80053a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005392:	5ccb      	ldrb	r3, [r1, r3]
 8005394:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005398:	4618      	mov	r0, r3
 800539a:	bd80      	pop	{r7, pc}
 800539c:	40023800 	.word	0x40023800
 80053a0:	08007f4c 	.word	0x08007f4c

080053a4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
 80053ac:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	220f      	movs	r2, #15
 80053b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80053b4:	4b12      	ldr	r3, [pc, #72]	@ (8005400 <HAL_RCC_GetClockConfig+0x5c>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f003 0203 	and.w	r2, r3, #3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80053c0:	4b0f      	ldr	r3, [pc, #60]	@ (8005400 <HAL_RCC_GetClockConfig+0x5c>)
 80053c2:	689b      	ldr	r3, [r3, #8]
 80053c4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80053cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005400 <HAL_RCC_GetClockConfig+0x5c>)
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80053d8:	4b09      	ldr	r3, [pc, #36]	@ (8005400 <HAL_RCC_GetClockConfig+0x5c>)
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	08db      	lsrs	r3, r3, #3
 80053de:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80053e6:	4b07      	ldr	r3, [pc, #28]	@ (8005404 <HAL_RCC_GetClockConfig+0x60>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 020f 	and.w	r2, r3, #15
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	601a      	str	r2, [r3, #0]
}
 80053f2:	bf00      	nop
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	40023800 	.word	0x40023800
 8005404:	40023c00 	.word	0x40023c00

08005408 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
 800540e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005410:	2300      	movs	r3, #0
 8005412:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005414:	2300      	movs	r3, #0
 8005416:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	2b00      	cmp	r3, #0
 8005422:	d10b      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800542c:	2b00      	cmp	r3, #0
 800542e:	d105      	bne.n	800543c <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8005438:	2b00      	cmp	r3, #0
 800543a:	d075      	beq.n	8005528 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800543c:	4b91      	ldr	r3, [pc, #580]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800543e:	2200      	movs	r2, #0
 8005440:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005442:	f7fc fadf 	bl	8001a04 <HAL_GetTick>
 8005446:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005448:	e008      	b.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800544a:	f7fc fadb 	bl	8001a04 <HAL_GetTick>
 800544e:	4602      	mov	r2, r0
 8005450:	697b      	ldr	r3, [r7, #20]
 8005452:	1ad3      	subs	r3, r2, r3
 8005454:	2b02      	cmp	r3, #2
 8005456:	d901      	bls.n	800545c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005458:	2303      	movs	r3, #3
 800545a:	e189      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800545c:	4b8a      	ldr	r3, [pc, #552]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005464:	2b00      	cmp	r3, #0
 8005466:	d1f0      	bne.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f003 0301 	and.w	r3, r3, #1
 8005470:	2b00      	cmp	r3, #0
 8005472:	d009      	beq.n	8005488 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	685b      	ldr	r3, [r3, #4]
 8005478:	019a      	lsls	r2, r3, #6
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	071b      	lsls	r3, r3, #28
 8005480:	4981      	ldr	r1, [pc, #516]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005482:	4313      	orrs	r3, r2
 8005484:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f003 0302 	and.w	r3, r3, #2
 8005490:	2b00      	cmp	r3, #0
 8005492:	d01f      	beq.n	80054d4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005494:	4b7c      	ldr	r3, [pc, #496]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005496:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800549a:	0f1b      	lsrs	r3, r3, #28
 800549c:	f003 0307 	and.w	r3, r3, #7
 80054a0:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	019a      	lsls	r2, r3, #6
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	061b      	lsls	r3, r3, #24
 80054ae:	431a      	orrs	r2, r3
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	071b      	lsls	r3, r3, #28
 80054b4:	4974      	ldr	r1, [pc, #464]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054b6:	4313      	orrs	r3, r2
 80054b8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80054bc:	4b72      	ldr	r3, [pc, #456]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80054c2:	f023 021f 	bic.w	r2, r3, #31
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	69db      	ldr	r3, [r3, #28]
 80054ca:	3b01      	subs	r3, #1
 80054cc:	496e      	ldr	r1, [pc, #440]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054ce:	4313      	orrs	r3, r2
 80054d0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d00d      	beq.n	80054fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	019a      	lsls	r2, r3, #6
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	061b      	lsls	r3, r3, #24
 80054ec:	431a      	orrs	r2, r3
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	689b      	ldr	r3, [r3, #8]
 80054f2:	071b      	lsls	r3, r3, #28
 80054f4:	4964      	ldr	r1, [pc, #400]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80054fc:	4b61      	ldr	r3, [pc, #388]	@ (8005684 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80054fe:	2201      	movs	r2, #1
 8005500:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005502:	f7fc fa7f 	bl	8001a04 <HAL_GetTick>
 8005506:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005508:	e008      	b.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800550a:	f7fc fa7b 	bl	8001a04 <HAL_GetTick>
 800550e:	4602      	mov	r2, r0
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	2b02      	cmp	r3, #2
 8005516:	d901      	bls.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005518:	2303      	movs	r3, #3
 800551a:	e129      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800551c:	4b5a      	ldr	r3, [pc, #360]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d0f0      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f003 0304 	and.w	r3, r3, #4
 8005530:	2b00      	cmp	r3, #0
 8005532:	d105      	bne.n	8005540 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 800553c:	2b00      	cmp	r3, #0
 800553e:	d079      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005540:	4b52      	ldr	r3, [pc, #328]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005546:	f7fc fa5d 	bl	8001a04 <HAL_GetTick>
 800554a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800554c:	e008      	b.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800554e:	f7fc fa59 	bl	8001a04 <HAL_GetTick>
 8005552:	4602      	mov	r2, r0
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	1ad3      	subs	r3, r2, r3
 8005558:	2b02      	cmp	r3, #2
 800555a:	d901      	bls.n	8005560 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800555c:	2303      	movs	r3, #3
 800555e:	e107      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005560:	4b49      	ldr	r3, [pc, #292]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005568:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800556c:	d0ef      	beq.n	800554e <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f003 0304 	and.w	r3, r3, #4
 8005576:	2b00      	cmp	r3, #0
 8005578:	d020      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800557a:	4b43      	ldr	r3, [pc, #268]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800557c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005580:	0f1b      	lsrs	r3, r3, #28
 8005582:	f003 0307 	and.w	r3, r3, #7
 8005586:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	691b      	ldr	r3, [r3, #16]
 800558c:	019a      	lsls	r2, r3, #6
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	061b      	lsls	r3, r3, #24
 8005594:	431a      	orrs	r2, r3
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	071b      	lsls	r3, r3, #28
 800559a:	493b      	ldr	r1, [pc, #236]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800559c:	4313      	orrs	r3, r2
 800559e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80055a2:	4b39      	ldr	r3, [pc, #228]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055a8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	6a1b      	ldr	r3, [r3, #32]
 80055b0:	3b01      	subs	r3, #1
 80055b2:	021b      	lsls	r3, r3, #8
 80055b4:	4934      	ldr	r1, [pc, #208]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f003 0308 	and.w	r3, r3, #8
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d01e      	beq.n	8005606 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80055c8:	4b2f      	ldr	r3, [pc, #188]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80055ce:	0e1b      	lsrs	r3, r3, #24
 80055d0:	f003 030f 	and.w	r3, r3, #15
 80055d4:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	019a      	lsls	r2, r3, #6
 80055dc:	693b      	ldr	r3, [r7, #16]
 80055de:	061b      	lsls	r3, r3, #24
 80055e0:	431a      	orrs	r2, r3
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	699b      	ldr	r3, [r3, #24]
 80055e6:	071b      	lsls	r3, r3, #28
 80055e8:	4927      	ldr	r1, [pc, #156]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055ea:	4313      	orrs	r3, r2
 80055ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80055f0:	4b25      	ldr	r3, [pc, #148]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055f6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055fe:	4922      	ldr	r1, [pc, #136]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005600:	4313      	orrs	r3, r2
 8005602:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005606:	4b21      	ldr	r3, [pc, #132]	@ (800568c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005608:	2201      	movs	r2, #1
 800560a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800560c:	f7fc f9fa 	bl	8001a04 <HAL_GetTick>
 8005610:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005612:	e008      	b.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005614:	f7fc f9f6 	bl	8001a04 <HAL_GetTick>
 8005618:	4602      	mov	r2, r0
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	1ad3      	subs	r3, r2, r3
 800561e:	2b02      	cmp	r3, #2
 8005620:	d901      	bls.n	8005626 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005622:	2303      	movs	r3, #3
 8005624:	e0a4      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005626:	4b18      	ldr	r3, [pc, #96]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800562e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005632:	d1ef      	bne.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0320 	and.w	r3, r3, #32
 800563c:	2b00      	cmp	r3, #0
 800563e:	f000 808b 	beq.w	8005758 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005642:	2300      	movs	r3, #0
 8005644:	60fb      	str	r3, [r7, #12]
 8005646:	4b10      	ldr	r3, [pc, #64]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005648:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800564a:	4a0f      	ldr	r2, [pc, #60]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800564c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005650:	6413      	str	r3, [r2, #64]	@ 0x40
 8005652:	4b0d      	ldr	r3, [pc, #52]	@ (8005688 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005656:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800565a:	60fb      	str	r3, [r7, #12]
 800565c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800565e:	4b0c      	ldr	r3, [pc, #48]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	4a0b      	ldr	r2, [pc, #44]	@ (8005690 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005664:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005668:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800566a:	f7fc f9cb 	bl	8001a04 <HAL_GetTick>
 800566e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005670:	e010      	b.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005672:	f7fc f9c7 	bl	8001a04 <HAL_GetTick>
 8005676:	4602      	mov	r2, r0
 8005678:	697b      	ldr	r3, [r7, #20]
 800567a:	1ad3      	subs	r3, r2, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d909      	bls.n	8005694 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005680:	2303      	movs	r3, #3
 8005682:	e075      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005684:	42470068 	.word	0x42470068
 8005688:	40023800 	.word	0x40023800
 800568c:	42470070 	.word	0x42470070
 8005690:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005694:	4b38      	ldr	r3, [pc, #224]	@ (8005778 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800569c:	2b00      	cmp	r3, #0
 800569e:	d0e8      	beq.n	8005672 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80056a0:	4b36      	ldr	r3, [pc, #216]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056a8:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80056aa:	693b      	ldr	r3, [r7, #16]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d02f      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x308>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	429a      	cmp	r2, r3
 80056bc:	d028      	beq.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80056be:	4b2f      	ldr	r3, [pc, #188]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056c6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80056c8:	4b2d      	ldr	r3, [pc, #180]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80056ca:	2201      	movs	r2, #1
 80056cc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80056ce:	4b2c      	ldr	r3, [pc, #176]	@ (8005780 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 80056d0:	2200      	movs	r2, #0
 80056d2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80056d4:	4a29      	ldr	r2, [pc, #164]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80056da:	4b28      	ldr	r3, [pc, #160]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056de:	f003 0301 	and.w	r3, r3, #1
 80056e2:	2b01      	cmp	r3, #1
 80056e4:	d114      	bne.n	8005710 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80056e6:	f7fc f98d 	bl	8001a04 <HAL_GetTick>
 80056ea:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ec:	e00a      	b.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80056ee:	f7fc f989 	bl	8001a04 <HAL_GetTick>
 80056f2:	4602      	mov	r2, r0
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	1ad3      	subs	r3, r2, r3
 80056f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056fc:	4293      	cmp	r3, r2
 80056fe:	d901      	bls.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	e035      	b.n	8005770 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005704:	4b1d      	ldr	r3, [pc, #116]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005708:	f003 0302 	and.w	r3, r3, #2
 800570c:	2b00      	cmp	r3, #0
 800570e:	d0ee      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005714:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005718:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800571c:	d10d      	bne.n	800573a <HAL_RCCEx_PeriphCLKConfig+0x332>
 800571e:	4b17      	ldr	r3, [pc, #92]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800572a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800572e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005732:	4912      	ldr	r1, [pc, #72]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005734:	4313      	orrs	r3, r2
 8005736:	608b      	str	r3, [r1, #8]
 8005738:	e005      	b.n	8005746 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 800573a:	4b10      	ldr	r3, [pc, #64]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	4a0f      	ldr	r2, [pc, #60]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005740:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005744:	6093      	str	r3, [r2, #8]
 8005746:	4b0d      	ldr	r3, [pc, #52]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005748:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800574e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005752:	490a      	ldr	r1, [pc, #40]	@ (800577c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005754:	4313      	orrs	r3, r2
 8005756:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 0310 	and.w	r3, r3, #16
 8005760:	2b00      	cmp	r3, #0
 8005762:	d004      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800576a:	4b06      	ldr	r3, [pc, #24]	@ (8005784 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800576c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800576e:	2300      	movs	r3, #0
}
 8005770:	4618      	mov	r0, r3
 8005772:	3718      	adds	r7, #24
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	40007000 	.word	0x40007000
 800577c:	40023800 	.word	0x40023800
 8005780:	42470e40 	.word	0x42470e40
 8005784:	424711e0 	.word	0x424711e0

08005788 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b082      	sub	sp, #8
 800578c:	af00      	add	r7, sp, #0
 800578e:	6078      	str	r0, [r7, #4]
 8005790:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2b00      	cmp	r3, #0
 8005796:	d101      	bne.n	800579c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005798:	2301      	movs	r3, #1
 800579a:	e025      	b.n	80057e8 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80057a2:	b2db      	uxtb	r3, r3
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d106      	bne.n	80057b6 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f7fb ffd7 	bl	8001764 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	2202      	movs	r2, #2
 80057ba:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681a      	ldr	r2, [r3, #0]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	3304      	adds	r3, #4
 80057c6:	4619      	mov	r1, r3
 80057c8:	4610      	mov	r0, r2
 80057ca:	f001 fe65 	bl	8007498 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6818      	ldr	r0, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	461a      	mov	r2, r3
 80057d8:	6839      	ldr	r1, [r7, #0]
 80057da:	f001 feba 	bl	8007552 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3708      	adds	r7, #8
 80057ec:	46bd      	mov	sp, r7
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b082      	sub	sp, #8
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e07b      	b.n	80058fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005806:	2b00      	cmp	r3, #0
 8005808:	d108      	bne.n	800581c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	685b      	ldr	r3, [r3, #4]
 800580e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005812:	d009      	beq.n	8005828 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2200      	movs	r2, #0
 8005818:	61da      	str	r2, [r3, #28]
 800581a:	e005      	b.n	8005828 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2200      	movs	r2, #0
 8005826:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005834:	b2db      	uxtb	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d106      	bne.n	8005848 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7fb fdec 	bl	8001420 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2202      	movs	r2, #2
 800584c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	681a      	ldr	r2, [r3, #0]
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800585e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	685b      	ldr	r3, [r3, #4]
 8005864:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	689b      	ldr	r3, [r3, #8]
 800586c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005870:	431a      	orrs	r2, r3
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800587a:	431a      	orrs	r2, r3
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	691b      	ldr	r3, [r3, #16]
 8005880:	f003 0302 	and.w	r3, r3, #2
 8005884:	431a      	orrs	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	695b      	ldr	r3, [r3, #20]
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	431a      	orrs	r2, r3
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	699b      	ldr	r3, [r3, #24]
 8005894:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005898:	431a      	orrs	r2, r3
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	69db      	ldr	r3, [r3, #28]
 800589e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80058a2:	431a      	orrs	r2, r3
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a1b      	ldr	r3, [r3, #32]
 80058a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ac:	ea42 0103 	orr.w	r1, r2, r3
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058b4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	430a      	orrs	r2, r1
 80058be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	699b      	ldr	r3, [r3, #24]
 80058c4:	0c1b      	lsrs	r3, r3, #16
 80058c6:	f003 0104 	and.w	r1, r3, #4
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80058ce:	f003 0210 	and.w	r2, r3, #16
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	430a      	orrs	r2, r1
 80058d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	69da      	ldr	r2, [r3, #28]
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80058e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2200      	movs	r2, #0
 80058ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2201      	movs	r2, #1
 80058f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80058f8:	2300      	movs	r3, #0
}
 80058fa:	4618      	mov	r0, r3
 80058fc:	3708      	adds	r7, #8
 80058fe:	46bd      	mov	sp, r7
 8005900:	bd80      	pop	{r7, pc}

08005902 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005902:	b580      	push	{r7, lr}
 8005904:	b088      	sub	sp, #32
 8005906:	af00      	add	r7, sp, #0
 8005908:	60f8      	str	r0, [r7, #12]
 800590a:	60b9      	str	r1, [r7, #8]
 800590c:	603b      	str	r3, [r7, #0]
 800590e:	4613      	mov	r3, r2
 8005910:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005912:	f7fc f877 	bl	8001a04 <HAL_GetTick>
 8005916:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005918:	88fb      	ldrh	r3, [r7, #6]
 800591a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005922:	b2db      	uxtb	r3, r3
 8005924:	2b01      	cmp	r3, #1
 8005926:	d001      	beq.n	800592c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005928:	2302      	movs	r3, #2
 800592a:	e12a      	b.n	8005b82 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800592c:	68bb      	ldr	r3, [r7, #8]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d002      	beq.n	8005938 <HAL_SPI_Transmit+0x36>
 8005932:	88fb      	ldrh	r3, [r7, #6]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d101      	bne.n	800593c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e122      	b.n	8005b82 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005942:	2b01      	cmp	r3, #1
 8005944:	d101      	bne.n	800594a <HAL_SPI_Transmit+0x48>
 8005946:	2302      	movs	r3, #2
 8005948:	e11b      	b.n	8005b82 <HAL_SPI_Transmit+0x280>
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	2203      	movs	r2, #3
 8005956:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	2200      	movs	r2, #0
 800595e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	68ba      	ldr	r2, [r7, #8]
 8005964:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	88fa      	ldrh	r2, [r7, #6]
 800596a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	88fa      	ldrh	r2, [r7, #6]
 8005970:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	2200      	movs	r2, #0
 8005976:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2200      	movs	r2, #0
 8005982:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	2200      	movs	r2, #0
 8005988:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2200      	movs	r2, #0
 800598e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	689b      	ldr	r3, [r3, #8]
 8005994:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005998:	d10f      	bne.n	80059ba <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80059a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681a      	ldr	r2, [r3, #0]
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059c4:	2b40      	cmp	r3, #64	@ 0x40
 80059c6:	d007      	beq.n	80059d8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	681a      	ldr	r2, [r3, #0]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80059e0:	d152      	bne.n	8005a88 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d002      	beq.n	80059f0 <HAL_SPI_Transmit+0xee>
 80059ea:	8b7b      	ldrh	r3, [r7, #26]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d145      	bne.n	8005a7c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059f4:	881a      	ldrh	r2, [r3, #0]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a00:	1c9a      	adds	r2, r3, #2
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a0a:	b29b      	uxth	r3, r3
 8005a0c:	3b01      	subs	r3, #1
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005a14:	e032      	b.n	8005a7c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f003 0302 	and.w	r3, r3, #2
 8005a20:	2b02      	cmp	r3, #2
 8005a22:	d112      	bne.n	8005a4a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a28:	881a      	ldrh	r2, [r3, #0]
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a34:	1c9a      	adds	r2, r3, #2
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a3e:	b29b      	uxth	r3, r3
 8005a40:	3b01      	subs	r3, #1
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005a48:	e018      	b.n	8005a7c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a4a:	f7fb ffdb 	bl	8001a04 <HAL_GetTick>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	69fb      	ldr	r3, [r7, #28]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	683a      	ldr	r2, [r7, #0]
 8005a56:	429a      	cmp	r2, r3
 8005a58:	d803      	bhi.n	8005a62 <HAL_SPI_Transmit+0x160>
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a60:	d102      	bne.n	8005a68 <HAL_SPI_Transmit+0x166>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d109      	bne.n	8005a7c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2201      	movs	r2, #1
 8005a6c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	2200      	movs	r2, #0
 8005a74:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e082      	b.n	8005b82 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a80:	b29b      	uxth	r3, r3
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1c7      	bne.n	8005a16 <HAL_SPI_Transmit+0x114>
 8005a86:	e053      	b.n	8005b30 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d002      	beq.n	8005a96 <HAL_SPI_Transmit+0x194>
 8005a90:	8b7b      	ldrh	r3, [r7, #26]
 8005a92:	2b01      	cmp	r3, #1
 8005a94:	d147      	bne.n	8005b26 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	330c      	adds	r3, #12
 8005aa0:	7812      	ldrb	r2, [r2, #0]
 8005aa2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005aa8:	1c5a      	adds	r2, r3, #1
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ab2:	b29b      	uxth	r3, r3
 8005ab4:	3b01      	subs	r3, #1
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005abc:	e033      	b.n	8005b26 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	f003 0302 	and.w	r3, r3, #2
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d113      	bne.n	8005af4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	330c      	adds	r3, #12
 8005ad6:	7812      	ldrb	r2, [r2, #0]
 8005ad8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ade:	1c5a      	adds	r2, r3, #1
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ae8:	b29b      	uxth	r3, r3
 8005aea:	3b01      	subs	r3, #1
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005af2:	e018      	b.n	8005b26 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005af4:	f7fb ff86 	bl	8001a04 <HAL_GetTick>
 8005af8:	4602      	mov	r2, r0
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	1ad3      	subs	r3, r2, r3
 8005afe:	683a      	ldr	r2, [r7, #0]
 8005b00:	429a      	cmp	r2, r3
 8005b02:	d803      	bhi.n	8005b0c <HAL_SPI_Transmit+0x20a>
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b0a:	d102      	bne.n	8005b12 <HAL_SPI_Transmit+0x210>
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d109      	bne.n	8005b26 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	2201      	movs	r2, #1
 8005b16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e02d      	b.n	8005b82 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005b2a:	b29b      	uxth	r3, r3
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d1c6      	bne.n	8005abe <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005b30:	69fa      	ldr	r2, [r7, #28]
 8005b32:	6839      	ldr	r1, [r7, #0]
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f000 fbd9 	bl	80062ec <SPI_EndRxTxTransaction>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d002      	beq.n	8005b46 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2220      	movs	r2, #32
 8005b44:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d10a      	bne.n	8005b64 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005b4e:	2300      	movs	r3, #0
 8005b50:	617b      	str	r3, [r7, #20]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	68db      	ldr	r3, [r3, #12]
 8005b58:	617b      	str	r3, [r7, #20]
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	689b      	ldr	r3, [r3, #8]
 8005b60:	617b      	str	r3, [r7, #20]
 8005b62:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d001      	beq.n	8005b80 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e000      	b.n	8005b82 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005b80:	2300      	movs	r3, #0
  }
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3720      	adds	r7, #32
 8005b86:	46bd      	mov	sp, r7
 8005b88:	bd80      	pop	{r7, pc}

08005b8a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b088      	sub	sp, #32
 8005b8e:	af02      	add	r7, sp, #8
 8005b90:	60f8      	str	r0, [r7, #12]
 8005b92:	60b9      	str	r1, [r7, #8]
 8005b94:	603b      	str	r3, [r7, #0]
 8005b96:	4613      	mov	r3, r2
 8005b98:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b01      	cmp	r3, #1
 8005ba4:	d001      	beq.n	8005baa <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005ba6:	2302      	movs	r3, #2
 8005ba8:	e104      	b.n	8005db4 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	685b      	ldr	r3, [r3, #4]
 8005bae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005bb2:	d112      	bne.n	8005bda <HAL_SPI_Receive+0x50>
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10e      	bne.n	8005bda <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2204      	movs	r2, #4
 8005bc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005bc4:	88fa      	ldrh	r2, [r7, #6]
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	9300      	str	r3, [sp, #0]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	68ba      	ldr	r2, [r7, #8]
 8005bce:	68b9      	ldr	r1, [r7, #8]
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f000 f8f3 	bl	8005dbc <HAL_SPI_TransmitReceive>
 8005bd6:	4603      	mov	r3, r0
 8005bd8:	e0ec      	b.n	8005db4 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005bda:	f7fb ff13 	bl	8001a04 <HAL_GetTick>
 8005bde:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d002      	beq.n	8005bec <HAL_SPI_Receive+0x62>
 8005be6:	88fb      	ldrh	r3, [r7, #6]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d101      	bne.n	8005bf0 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005bec:	2301      	movs	r3, #1
 8005bee:	e0e1      	b.n	8005db4 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005bf6:	2b01      	cmp	r3, #1
 8005bf8:	d101      	bne.n	8005bfe <HAL_SPI_Receive+0x74>
 8005bfa:	2302      	movs	r3, #2
 8005bfc:	e0da      	b.n	8005db4 <HAL_SPI_Receive+0x22a>
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	2204      	movs	r2, #4
 8005c0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2200      	movs	r2, #0
 8005c12:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	68ba      	ldr	r2, [r7, #8]
 8005c18:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	88fa      	ldrh	r2, [r7, #6]
 8005c1e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	88fa      	ldrh	r2, [r7, #6]
 8005c24:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	2200      	movs	r2, #0
 8005c30:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2200      	movs	r2, #0
 8005c36:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2200      	movs	r2, #0
 8005c42:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	689b      	ldr	r3, [r3, #8]
 8005c48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005c4c:	d10f      	bne.n	8005c6e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	681a      	ldr	r2, [r3, #0]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c5c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005c6c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c78:	2b40      	cmp	r3, #64	@ 0x40
 8005c7a:	d007      	beq.n	8005c8c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c8a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d170      	bne.n	8005d76 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005c94:	e035      	b.n	8005d02 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f003 0301 	and.w	r3, r3, #1
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d115      	bne.n	8005cd0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f103 020c 	add.w	r2, r3, #12
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cb0:	7812      	ldrb	r2, [r2, #0]
 8005cb2:	b2d2      	uxtb	r2, r2
 8005cb4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cba:	1c5a      	adds	r2, r3, #1
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cc4:	b29b      	uxth	r3, r3
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005cce:	e018      	b.n	8005d02 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cd0:	f7fb fe98 	bl	8001a04 <HAL_GetTick>
 8005cd4:	4602      	mov	r2, r0
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	1ad3      	subs	r3, r2, r3
 8005cda:	683a      	ldr	r2, [r7, #0]
 8005cdc:	429a      	cmp	r2, r3
 8005cde:	d803      	bhi.n	8005ce8 <HAL_SPI_Receive+0x15e>
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce6:	d102      	bne.n	8005cee <HAL_SPI_Receive+0x164>
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d109      	bne.n	8005d02 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2201      	movs	r2, #1
 8005cf2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005cfe:	2303      	movs	r3, #3
 8005d00:	e058      	b.n	8005db4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d06:	b29b      	uxth	r3, r3
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d1c4      	bne.n	8005c96 <HAL_SPI_Receive+0x10c>
 8005d0c:	e038      	b.n	8005d80 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	689b      	ldr	r3, [r3, #8]
 8005d14:	f003 0301 	and.w	r3, r3, #1
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d113      	bne.n	8005d44 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68da      	ldr	r2, [r3, #12]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d26:	b292      	uxth	r2, r2
 8005d28:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d2e:	1c9a      	adds	r2, r3, #2
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d38:	b29b      	uxth	r3, r3
 8005d3a:	3b01      	subs	r3, #1
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005d42:	e018      	b.n	8005d76 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005d44:	f7fb fe5e 	bl	8001a04 <HAL_GetTick>
 8005d48:	4602      	mov	r2, r0
 8005d4a:	697b      	ldr	r3, [r7, #20]
 8005d4c:	1ad3      	subs	r3, r2, r3
 8005d4e:	683a      	ldr	r2, [r7, #0]
 8005d50:	429a      	cmp	r2, r3
 8005d52:	d803      	bhi.n	8005d5c <HAL_SPI_Receive+0x1d2>
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d5a:	d102      	bne.n	8005d62 <HAL_SPI_Receive+0x1d8>
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d109      	bne.n	8005d76 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2201      	movs	r2, #1
 8005d66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2200      	movs	r2, #0
 8005d6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e01e      	b.n	8005db4 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d1c6      	bne.n	8005d0e <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d80:	697a      	ldr	r2, [r7, #20]
 8005d82:	6839      	ldr	r1, [r7, #0]
 8005d84:	68f8      	ldr	r0, [r7, #12]
 8005d86:	f000 fa4b 	bl	8006220 <SPI_EndRxTransaction>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d002      	beq.n	8005d96 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2220      	movs	r2, #32
 8005d94:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d001      	beq.n	8005db2 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005dae:	2301      	movs	r3, #1
 8005db0:	e000      	b.n	8005db4 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005db2:	2300      	movs	r3, #0
  }
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	3718      	adds	r7, #24
 8005db8:	46bd      	mov	sp, r7
 8005dba:	bd80      	pop	{r7, pc}

08005dbc <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b08a      	sub	sp, #40	@ 0x28
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	60f8      	str	r0, [r7, #12]
 8005dc4:	60b9      	str	r1, [r7, #8]
 8005dc6:	607a      	str	r2, [r7, #4]
 8005dc8:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dce:	f7fb fe19 	bl	8001a04 <HAL_GetTick>
 8005dd2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005dda:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	685b      	ldr	r3, [r3, #4]
 8005de0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005de2:	887b      	ldrh	r3, [r7, #2]
 8005de4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005de6:	7ffb      	ldrb	r3, [r7, #31]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d00c      	beq.n	8005e06 <HAL_SPI_TransmitReceive+0x4a>
 8005dec:	69bb      	ldr	r3, [r7, #24]
 8005dee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005df2:	d106      	bne.n	8005e02 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d102      	bne.n	8005e02 <HAL_SPI_TransmitReceive+0x46>
 8005dfc:	7ffb      	ldrb	r3, [r7, #31]
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	d001      	beq.n	8005e06 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005e02:	2302      	movs	r3, #2
 8005e04:	e17f      	b.n	8006106 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d005      	beq.n	8005e18 <HAL_SPI_TransmitReceive+0x5c>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d002      	beq.n	8005e18 <HAL_SPI_TransmitReceive+0x5c>
 8005e12:	887b      	ldrh	r3, [r7, #2]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d101      	bne.n	8005e1c <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005e18:	2301      	movs	r3, #1
 8005e1a:	e174      	b.n	8006106 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005e22:	2b01      	cmp	r3, #1
 8005e24:	d101      	bne.n	8005e2a <HAL_SPI_TransmitReceive+0x6e>
 8005e26:	2302      	movs	r3, #2
 8005e28:	e16d      	b.n	8006106 <HAL_SPI_TransmitReceive+0x34a>
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e38:	b2db      	uxtb	r3, r3
 8005e3a:	2b04      	cmp	r3, #4
 8005e3c:	d003      	beq.n	8005e46 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	2205      	movs	r2, #5
 8005e42:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	687a      	ldr	r2, [r7, #4]
 8005e50:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	887a      	ldrh	r2, [r7, #2]
 8005e56:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	887a      	ldrh	r2, [r7, #2]
 8005e5c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	68ba      	ldr	r2, [r7, #8]
 8005e62:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	887a      	ldrh	r2, [r7, #2]
 8005e68:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	887a      	ldrh	r2, [r7, #2]
 8005e6e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2200      	movs	r2, #0
 8005e74:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e86:	2b40      	cmp	r3, #64	@ 0x40
 8005e88:	d007      	beq.n	8005e9a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681a      	ldr	r2, [r3, #0]
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e98:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	68db      	ldr	r3, [r3, #12]
 8005e9e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005ea2:	d17e      	bne.n	8005fa2 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d002      	beq.n	8005eb2 <HAL_SPI_TransmitReceive+0xf6>
 8005eac:	8afb      	ldrh	r3, [r7, #22]
 8005eae:	2b01      	cmp	r3, #1
 8005eb0:	d16c      	bne.n	8005f8c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb6:	881a      	ldrh	r2, [r3, #0]
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ec2:	1c9a      	adds	r2, r3, #2
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ecc:	b29b      	uxth	r3, r3
 8005ece:	3b01      	subs	r3, #1
 8005ed0:	b29a      	uxth	r2, r3
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ed6:	e059      	b.n	8005f8c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d11b      	bne.n	8005f1e <HAL_SPI_TransmitReceive+0x162>
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005eea:	b29b      	uxth	r3, r3
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d016      	beq.n	8005f1e <HAL_SPI_TransmitReceive+0x162>
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d113      	bne.n	8005f1e <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005efa:	881a      	ldrh	r2, [r3, #0]
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f06:	1c9a      	adds	r2, r3, #2
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f10:	b29b      	uxth	r3, r3
 8005f12:	3b01      	subs	r3, #1
 8005f14:	b29a      	uxth	r2, r3
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f003 0301 	and.w	r3, r3, #1
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	d119      	bne.n	8005f60 <HAL_SPI_TransmitReceive+0x1a4>
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d014      	beq.n	8005f60 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	68da      	ldr	r2, [r3, #12]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f40:	b292      	uxth	r2, r2
 8005f42:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f48:	1c9a      	adds	r2, r3, #2
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	3b01      	subs	r3, #1
 8005f56:	b29a      	uxth	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f60:	f7fb fd50 	bl	8001a04 <HAL_GetTick>
 8005f64:	4602      	mov	r2, r0
 8005f66:	6a3b      	ldr	r3, [r7, #32]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d80d      	bhi.n	8005f8c <HAL_SPI_TransmitReceive+0x1d0>
 8005f70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f76:	d009      	beq.n	8005f8c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	2201      	movs	r2, #1
 8005f7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005f88:	2303      	movs	r3, #3
 8005f8a:	e0bc      	b.n	8006106 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f90:	b29b      	uxth	r3, r3
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d1a0      	bne.n	8005ed8 <HAL_SPI_TransmitReceive+0x11c>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d19b      	bne.n	8005ed8 <HAL_SPI_TransmitReceive+0x11c>
 8005fa0:	e082      	b.n	80060a8 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d002      	beq.n	8005fb0 <HAL_SPI_TransmitReceive+0x1f4>
 8005faa:	8afb      	ldrh	r3, [r7, #22]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d171      	bne.n	8006094 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	330c      	adds	r3, #12
 8005fba:	7812      	ldrb	r2, [r2, #0]
 8005fbc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fc2:	1c5a      	adds	r2, r3, #1
 8005fc4:	68fb      	ldr	r3, [r7, #12]
 8005fc6:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fcc:	b29b      	uxth	r3, r3
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	b29a      	uxth	r2, r3
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005fd6:	e05d      	b.n	8006094 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	f003 0302 	and.w	r3, r3, #2
 8005fe2:	2b02      	cmp	r3, #2
 8005fe4:	d11c      	bne.n	8006020 <HAL_SPI_TransmitReceive+0x264>
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fea:	b29b      	uxth	r3, r3
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d017      	beq.n	8006020 <HAL_SPI_TransmitReceive+0x264>
 8005ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff2:	2b01      	cmp	r3, #1
 8005ff4:	d114      	bne.n	8006020 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	330c      	adds	r3, #12
 8006000:	7812      	ldrb	r2, [r2, #0]
 8006002:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006008:	1c5a      	adds	r2, r3, #1
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006012:	b29b      	uxth	r3, r3
 8006014:	3b01      	subs	r3, #1
 8006016:	b29a      	uxth	r2, r3
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800601c:	2300      	movs	r3, #0
 800601e:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	689b      	ldr	r3, [r3, #8]
 8006026:	f003 0301 	and.w	r3, r3, #1
 800602a:	2b01      	cmp	r3, #1
 800602c:	d119      	bne.n	8006062 <HAL_SPI_TransmitReceive+0x2a6>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006032:	b29b      	uxth	r3, r3
 8006034:	2b00      	cmp	r3, #0
 8006036:	d014      	beq.n	8006062 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68da      	ldr	r2, [r3, #12]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006042:	b2d2      	uxtb	r2, r2
 8006044:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800604a:	1c5a      	adds	r2, r3, #1
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006054:	b29b      	uxth	r3, r3
 8006056:	3b01      	subs	r3, #1
 8006058:	b29a      	uxth	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800605e:	2301      	movs	r3, #1
 8006060:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006062:	f7fb fccf 	bl	8001a04 <HAL_GetTick>
 8006066:	4602      	mov	r2, r0
 8006068:	6a3b      	ldr	r3, [r7, #32]
 800606a:	1ad3      	subs	r3, r2, r3
 800606c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800606e:	429a      	cmp	r2, r3
 8006070:	d803      	bhi.n	800607a <HAL_SPI_TransmitReceive+0x2be>
 8006072:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006074:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006078:	d102      	bne.n	8006080 <HAL_SPI_TransmitReceive+0x2c4>
 800607a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800607c:	2b00      	cmp	r3, #0
 800607e:	d109      	bne.n	8006094 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	2201      	movs	r2, #1
 8006084:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2200      	movs	r2, #0
 800608c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e038      	b.n	8006106 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006098:	b29b      	uxth	r3, r3
 800609a:	2b00      	cmp	r3, #0
 800609c:	d19c      	bne.n	8005fd8 <HAL_SPI_TransmitReceive+0x21c>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060a2:	b29b      	uxth	r3, r3
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d197      	bne.n	8005fd8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80060a8:	6a3a      	ldr	r2, [r7, #32]
 80060aa:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f000 f91d 	bl	80062ec <SPI_EndRxTxTransaction>
 80060b2:	4603      	mov	r3, r0
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d008      	beq.n	80060ca <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	2220      	movs	r2, #32
 80060bc:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	2200      	movs	r2, #0
 80060c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80060c6:	2301      	movs	r3, #1
 80060c8:	e01d      	b.n	8006106 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d10a      	bne.n	80060e8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80060d2:	2300      	movs	r3, #0
 80060d4:	613b      	str	r3, [r7, #16]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68db      	ldr	r3, [r3, #12]
 80060dc:	613b      	str	r3, [r7, #16]
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	689b      	ldr	r3, [r3, #8]
 80060e4:	613b      	str	r3, [r7, #16]
 80060e6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2201      	movs	r2, #1
 80060ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d001      	beq.n	8006104 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006100:	2301      	movs	r3, #1
 8006102:	e000      	b.n	8006106 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006104:	2300      	movs	r3, #0
  }
}
 8006106:	4618      	mov	r0, r3
 8006108:	3728      	adds	r7, #40	@ 0x28
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
	...

08006110 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b088      	sub	sp, #32
 8006114:	af00      	add	r7, sp, #0
 8006116:	60f8      	str	r0, [r7, #12]
 8006118:	60b9      	str	r1, [r7, #8]
 800611a:	603b      	str	r3, [r7, #0]
 800611c:	4613      	mov	r3, r2
 800611e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006120:	f7fb fc70 	bl	8001a04 <HAL_GetTick>
 8006124:	4602      	mov	r2, r0
 8006126:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006128:	1a9b      	subs	r3, r3, r2
 800612a:	683a      	ldr	r2, [r7, #0]
 800612c:	4413      	add	r3, r2
 800612e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006130:	f7fb fc68 	bl	8001a04 <HAL_GetTick>
 8006134:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006136:	4b39      	ldr	r3, [pc, #228]	@ (800621c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	015b      	lsls	r3, r3, #5
 800613c:	0d1b      	lsrs	r3, r3, #20
 800613e:	69fa      	ldr	r2, [r7, #28]
 8006140:	fb02 f303 	mul.w	r3, r2, r3
 8006144:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006146:	e054      	b.n	80061f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006148:	683b      	ldr	r3, [r7, #0]
 800614a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614e:	d050      	beq.n	80061f2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006150:	f7fb fc58 	bl	8001a04 <HAL_GetTick>
 8006154:	4602      	mov	r2, r0
 8006156:	69bb      	ldr	r3, [r7, #24]
 8006158:	1ad3      	subs	r3, r2, r3
 800615a:	69fa      	ldr	r2, [r7, #28]
 800615c:	429a      	cmp	r2, r3
 800615e:	d902      	bls.n	8006166 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006160:	69fb      	ldr	r3, [r7, #28]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d13d      	bne.n	80061e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	685a      	ldr	r2, [r3, #4]
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006174:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	685b      	ldr	r3, [r3, #4]
 800617a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800617e:	d111      	bne.n	80061a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	689b      	ldr	r3, [r3, #8]
 8006184:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006188:	d004      	beq.n	8006194 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006192:	d107      	bne.n	80061a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	681a      	ldr	r2, [r3, #0]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061ac:	d10f      	bne.n	80061ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	681a      	ldr	r2, [r3, #0]
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80061bc:	601a      	str	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80061cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80061de:	2303      	movs	r3, #3
 80061e0:	e017      	b.n	8006212 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d101      	bne.n	80061ec <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80061e8:	2300      	movs	r3, #0
 80061ea:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	3b01      	subs	r3, #1
 80061f0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	689a      	ldr	r2, [r3, #8]
 80061f8:	68bb      	ldr	r3, [r7, #8]
 80061fa:	4013      	ands	r3, r2
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	429a      	cmp	r2, r3
 8006200:	bf0c      	ite	eq
 8006202:	2301      	moveq	r3, #1
 8006204:	2300      	movne	r3, #0
 8006206:	b2db      	uxtb	r3, r3
 8006208:	461a      	mov	r2, r3
 800620a:	79fb      	ldrb	r3, [r7, #7]
 800620c:	429a      	cmp	r2, r3
 800620e:	d19b      	bne.n	8006148 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3720      	adds	r7, #32
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	20000004 	.word	0x20000004

08006220 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b086      	sub	sp, #24
 8006224:	af02      	add	r7, sp, #8
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	685b      	ldr	r3, [r3, #4]
 8006230:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006234:	d111      	bne.n	800625a <SPI_EndRxTransaction+0x3a>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	689b      	ldr	r3, [r3, #8]
 800623a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800623e:	d004      	beq.n	800624a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	689b      	ldr	r3, [r3, #8]
 8006244:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006248:	d107      	bne.n	800625a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006258:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006262:	d12a      	bne.n	80062ba <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800626c:	d012      	beq.n	8006294 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	9300      	str	r3, [sp, #0]
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	2200      	movs	r2, #0
 8006276:	2180      	movs	r1, #128	@ 0x80
 8006278:	68f8      	ldr	r0, [r7, #12]
 800627a:	f7ff ff49 	bl	8006110 <SPI_WaitFlagStateUntilTimeout>
 800627e:	4603      	mov	r3, r0
 8006280:	2b00      	cmp	r3, #0
 8006282:	d02d      	beq.n	80062e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006288:	f043 0220 	orr.w	r2, r3, #32
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006290:	2303      	movs	r3, #3
 8006292:	e026      	b.n	80062e2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	68bb      	ldr	r3, [r7, #8]
 800629a:	2200      	movs	r2, #0
 800629c:	2101      	movs	r1, #1
 800629e:	68f8      	ldr	r0, [r7, #12]
 80062a0:	f7ff ff36 	bl	8006110 <SPI_WaitFlagStateUntilTimeout>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d01a      	beq.n	80062e0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062ae:	f043 0220 	orr.w	r2, r3, #32
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80062b6:	2303      	movs	r3, #3
 80062b8:	e013      	b.n	80062e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	9300      	str	r3, [sp, #0]
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	2200      	movs	r2, #0
 80062c2:	2101      	movs	r1, #1
 80062c4:	68f8      	ldr	r0, [r7, #12]
 80062c6:	f7ff ff23 	bl	8006110 <SPI_WaitFlagStateUntilTimeout>
 80062ca:	4603      	mov	r3, r0
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d007      	beq.n	80062e0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062d4:	f043 0220 	orr.w	r2, r3, #32
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	e000      	b.n	80062e2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80062e0:	2300      	movs	r3, #0
}
 80062e2:	4618      	mov	r0, r3
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}
	...

080062ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b088      	sub	sp, #32
 80062f0:	af02      	add	r7, sp, #8
 80062f2:	60f8      	str	r0, [r7, #12]
 80062f4:	60b9      	str	r1, [r7, #8]
 80062f6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	9300      	str	r3, [sp, #0]
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	2201      	movs	r2, #1
 8006300:	2102      	movs	r1, #2
 8006302:	68f8      	ldr	r0, [r7, #12]
 8006304:	f7ff ff04 	bl	8006110 <SPI_WaitFlagStateUntilTimeout>
 8006308:	4603      	mov	r3, r0
 800630a:	2b00      	cmp	r3, #0
 800630c:	d007      	beq.n	800631e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006312:	f043 0220 	orr.w	r2, r3, #32
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e032      	b.n	8006384 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800631e:	4b1b      	ldr	r3, [pc, #108]	@ (800638c <SPI_EndRxTxTransaction+0xa0>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a1b      	ldr	r2, [pc, #108]	@ (8006390 <SPI_EndRxTxTransaction+0xa4>)
 8006324:	fba2 2303 	umull	r2, r3, r2, r3
 8006328:	0d5b      	lsrs	r3, r3, #21
 800632a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800632e:	fb02 f303 	mul.w	r3, r2, r3
 8006332:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	685b      	ldr	r3, [r3, #4]
 8006338:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800633c:	d112      	bne.n	8006364 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	9300      	str	r3, [sp, #0]
 8006342:	68bb      	ldr	r3, [r7, #8]
 8006344:	2200      	movs	r2, #0
 8006346:	2180      	movs	r1, #128	@ 0x80
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f7ff fee1 	bl	8006110 <SPI_WaitFlagStateUntilTimeout>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d016      	beq.n	8006382 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006358:	f043 0220 	orr.w	r2, r3, #32
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006360:	2303      	movs	r3, #3
 8006362:	e00f      	b.n	8006384 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00a      	beq.n	8006380 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	3b01      	subs	r3, #1
 800636e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	689b      	ldr	r3, [r3, #8]
 8006376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800637a:	2b80      	cmp	r3, #128	@ 0x80
 800637c:	d0f2      	beq.n	8006364 <SPI_EndRxTxTransaction+0x78>
 800637e:	e000      	b.n	8006382 <SPI_EndRxTxTransaction+0x96>
        break;
 8006380:	bf00      	nop
  }

  return HAL_OK;
 8006382:	2300      	movs	r3, #0
}
 8006384:	4618      	mov	r0, r3
 8006386:	3718      	adds	r7, #24
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}
 800638c:	20000004 	.word	0x20000004
 8006390:	165e9f81 	.word	0x165e9f81

08006394 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006394:	b580      	push	{r7, lr}
 8006396:	b082      	sub	sp, #8
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d101      	bne.n	80063a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80063a2:	2301      	movs	r3, #1
 80063a4:	e041      	b.n	800642a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063ac:	b2db      	uxtb	r3, r3
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d106      	bne.n	80063c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2200      	movs	r2, #0
 80063b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f7fb f878 	bl	80014b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2202      	movs	r2, #2
 80063c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	3304      	adds	r3, #4
 80063d0:	4619      	mov	r1, r3
 80063d2:	4610      	mov	r0, r2
 80063d4:	f000 fa7e 	bl	80068d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2201      	movs	r2, #1
 80063dc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	2201      	movs	r2, #1
 80063e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2201      	movs	r2, #1
 80063ec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2201      	movs	r2, #1
 80063fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2201      	movs	r2, #1
 8006414:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2201      	movs	r2, #1
 800641c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2201      	movs	r2, #1
 8006424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006428:	2300      	movs	r3, #0
}
 800642a:	4618      	mov	r0, r3
 800642c:	3708      	adds	r7, #8
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
	...

08006434 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006434:	b480      	push	{r7}
 8006436:	b085      	sub	sp, #20
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006442:	b2db      	uxtb	r3, r3
 8006444:	2b01      	cmp	r3, #1
 8006446:	d001      	beq.n	800644c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	e04e      	b.n	80064ea <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2202      	movs	r2, #2
 8006450:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	68da      	ldr	r2, [r3, #12]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f042 0201 	orr.w	r2, r2, #1
 8006462:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	4a23      	ldr	r2, [pc, #140]	@ (80064f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d022      	beq.n	80064b4 <HAL_TIM_Base_Start_IT+0x80>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006476:	d01d      	beq.n	80064b4 <HAL_TIM_Base_Start_IT+0x80>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a1f      	ldr	r2, [pc, #124]	@ (80064fc <HAL_TIM_Base_Start_IT+0xc8>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d018      	beq.n	80064b4 <HAL_TIM_Base_Start_IT+0x80>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	4a1e      	ldr	r2, [pc, #120]	@ (8006500 <HAL_TIM_Base_Start_IT+0xcc>)
 8006488:	4293      	cmp	r3, r2
 800648a:	d013      	beq.n	80064b4 <HAL_TIM_Base_Start_IT+0x80>
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a1c      	ldr	r2, [pc, #112]	@ (8006504 <HAL_TIM_Base_Start_IT+0xd0>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d00e      	beq.n	80064b4 <HAL_TIM_Base_Start_IT+0x80>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a1b      	ldr	r2, [pc, #108]	@ (8006508 <HAL_TIM_Base_Start_IT+0xd4>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d009      	beq.n	80064b4 <HAL_TIM_Base_Start_IT+0x80>
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	4a19      	ldr	r2, [pc, #100]	@ (800650c <HAL_TIM_Base_Start_IT+0xd8>)
 80064a6:	4293      	cmp	r3, r2
 80064a8:	d004      	beq.n	80064b4 <HAL_TIM_Base_Start_IT+0x80>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	4a18      	ldr	r2, [pc, #96]	@ (8006510 <HAL_TIM_Base_Start_IT+0xdc>)
 80064b0:	4293      	cmp	r3, r2
 80064b2:	d111      	bne.n	80064d8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	689b      	ldr	r3, [r3, #8]
 80064ba:	f003 0307 	and.w	r3, r3, #7
 80064be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2b06      	cmp	r3, #6
 80064c4:	d010      	beq.n	80064e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f042 0201 	orr.w	r2, r2, #1
 80064d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064d6:	e007      	b.n	80064e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	f042 0201 	orr.w	r2, r2, #1
 80064e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3714      	adds	r7, #20
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	40010000 	.word	0x40010000
 80064fc:	40000400 	.word	0x40000400
 8006500:	40000800 	.word	0x40000800
 8006504:	40000c00 	.word	0x40000c00
 8006508:	40010400 	.word	0x40010400
 800650c:	40014000 	.word	0x40014000
 8006510:	40001800 	.word	0x40001800

08006514 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b084      	sub	sp, #16
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	f003 0302 	and.w	r3, r3, #2
 8006532:	2b00      	cmp	r3, #0
 8006534:	d020      	beq.n	8006578 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f003 0302 	and.w	r3, r3, #2
 800653c:	2b00      	cmp	r3, #0
 800653e:	d01b      	beq.n	8006578 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f06f 0202 	mvn.w	r2, #2
 8006548:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2201      	movs	r2, #1
 800654e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	699b      	ldr	r3, [r3, #24]
 8006556:	f003 0303 	and.w	r3, r3, #3
 800655a:	2b00      	cmp	r3, #0
 800655c:	d003      	beq.n	8006566 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f999 	bl	8006896 <HAL_TIM_IC_CaptureCallback>
 8006564:	e005      	b.n	8006572 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f98b 	bl	8006882 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 f99c 	bl	80068aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	f003 0304 	and.w	r3, r3, #4
 800657e:	2b00      	cmp	r3, #0
 8006580:	d020      	beq.n	80065c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f003 0304 	and.w	r3, r3, #4
 8006588:	2b00      	cmp	r3, #0
 800658a:	d01b      	beq.n	80065c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f06f 0204 	mvn.w	r2, #4
 8006594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2202      	movs	r2, #2
 800659a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	699b      	ldr	r3, [r3, #24]
 80065a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f973 	bl	8006896 <HAL_TIM_IC_CaptureCallback>
 80065b0:	e005      	b.n	80065be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f965 	bl	8006882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f976 	bl	80068aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	f003 0308 	and.w	r3, r3, #8
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d020      	beq.n	8006610 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f003 0308 	and.w	r3, r3, #8
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d01b      	beq.n	8006610 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f06f 0208 	mvn.w	r2, #8
 80065e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2204      	movs	r2, #4
 80065e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	69db      	ldr	r3, [r3, #28]
 80065ee:	f003 0303 	and.w	r3, r3, #3
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d003      	beq.n	80065fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 f94d 	bl	8006896 <HAL_TIM_IC_CaptureCallback>
 80065fc:	e005      	b.n	800660a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f000 f93f 	bl	8006882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006604:	6878      	ldr	r0, [r7, #4]
 8006606:	f000 f950 	bl	80068aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	f003 0310 	and.w	r3, r3, #16
 8006616:	2b00      	cmp	r3, #0
 8006618:	d020      	beq.n	800665c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	f003 0310 	and.w	r3, r3, #16
 8006620:	2b00      	cmp	r3, #0
 8006622:	d01b      	beq.n	800665c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f06f 0210 	mvn.w	r2, #16
 800662c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2208      	movs	r2, #8
 8006632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	69db      	ldr	r3, [r3, #28]
 800663a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800663e:	2b00      	cmp	r3, #0
 8006640:	d003      	beq.n	800664a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 f927 	bl	8006896 <HAL_TIM_IC_CaptureCallback>
 8006648:	e005      	b.n	8006656 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 f919 	bl	8006882 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 f92a 	bl	80068aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800665c:	68bb      	ldr	r3, [r7, #8]
 800665e:	f003 0301 	and.w	r3, r3, #1
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00c      	beq.n	8006680 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	f003 0301 	and.w	r3, r3, #1
 800666c:	2b00      	cmp	r3, #0
 800666e:	d007      	beq.n	8006680 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f06f 0201 	mvn.w	r2, #1
 8006678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800667a:	6878      	ldr	r0, [r7, #4]
 800667c:	f7fa fcac 	bl	8000fd8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006686:	2b00      	cmp	r3, #0
 8006688:	d00c      	beq.n	80066a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006690:	2b00      	cmp	r3, #0
 8006692:	d007      	beq.n	80066a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800669c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 fae4 	bl	8006c6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00c      	beq.n	80066c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d007      	beq.n	80066c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80066c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f8fb 	bl	80068be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	f003 0320 	and.w	r3, r3, #32
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d00c      	beq.n	80066ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	f003 0320 	and.w	r3, r3, #32
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d007      	beq.n	80066ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f06f 0220 	mvn.w	r2, #32
 80066e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80066e6:	6878      	ldr	r0, [r7, #4]
 80066e8:	f000 fab6 	bl	8006c58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80066ec:	bf00      	nop
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066fe:	2300      	movs	r3, #0
 8006700:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006708:	2b01      	cmp	r3, #1
 800670a:	d101      	bne.n	8006710 <HAL_TIM_ConfigClockSource+0x1c>
 800670c:	2302      	movs	r3, #2
 800670e:	e0b4      	b.n	800687a <HAL_TIM_ConfigClockSource+0x186>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2201      	movs	r2, #1
 8006714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2202      	movs	r2, #2
 800671c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	689b      	ldr	r3, [r3, #8]
 8006726:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800672e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006730:	68bb      	ldr	r3, [r7, #8]
 8006732:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006736:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	68ba      	ldr	r2, [r7, #8]
 800673e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006748:	d03e      	beq.n	80067c8 <HAL_TIM_ConfigClockSource+0xd4>
 800674a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800674e:	f200 8087 	bhi.w	8006860 <HAL_TIM_ConfigClockSource+0x16c>
 8006752:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006756:	f000 8086 	beq.w	8006866 <HAL_TIM_ConfigClockSource+0x172>
 800675a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800675e:	d87f      	bhi.n	8006860 <HAL_TIM_ConfigClockSource+0x16c>
 8006760:	2b70      	cmp	r3, #112	@ 0x70
 8006762:	d01a      	beq.n	800679a <HAL_TIM_ConfigClockSource+0xa6>
 8006764:	2b70      	cmp	r3, #112	@ 0x70
 8006766:	d87b      	bhi.n	8006860 <HAL_TIM_ConfigClockSource+0x16c>
 8006768:	2b60      	cmp	r3, #96	@ 0x60
 800676a:	d050      	beq.n	800680e <HAL_TIM_ConfigClockSource+0x11a>
 800676c:	2b60      	cmp	r3, #96	@ 0x60
 800676e:	d877      	bhi.n	8006860 <HAL_TIM_ConfigClockSource+0x16c>
 8006770:	2b50      	cmp	r3, #80	@ 0x50
 8006772:	d03c      	beq.n	80067ee <HAL_TIM_ConfigClockSource+0xfa>
 8006774:	2b50      	cmp	r3, #80	@ 0x50
 8006776:	d873      	bhi.n	8006860 <HAL_TIM_ConfigClockSource+0x16c>
 8006778:	2b40      	cmp	r3, #64	@ 0x40
 800677a:	d058      	beq.n	800682e <HAL_TIM_ConfigClockSource+0x13a>
 800677c:	2b40      	cmp	r3, #64	@ 0x40
 800677e:	d86f      	bhi.n	8006860 <HAL_TIM_ConfigClockSource+0x16c>
 8006780:	2b30      	cmp	r3, #48	@ 0x30
 8006782:	d064      	beq.n	800684e <HAL_TIM_ConfigClockSource+0x15a>
 8006784:	2b30      	cmp	r3, #48	@ 0x30
 8006786:	d86b      	bhi.n	8006860 <HAL_TIM_ConfigClockSource+0x16c>
 8006788:	2b20      	cmp	r3, #32
 800678a:	d060      	beq.n	800684e <HAL_TIM_ConfigClockSource+0x15a>
 800678c:	2b20      	cmp	r3, #32
 800678e:	d867      	bhi.n	8006860 <HAL_TIM_ConfigClockSource+0x16c>
 8006790:	2b00      	cmp	r3, #0
 8006792:	d05c      	beq.n	800684e <HAL_TIM_ConfigClockSource+0x15a>
 8006794:	2b10      	cmp	r3, #16
 8006796:	d05a      	beq.n	800684e <HAL_TIM_ConfigClockSource+0x15a>
 8006798:	e062      	b.n	8006860 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80067aa:	f000 f9b9 	bl	8006b20 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	689b      	ldr	r3, [r3, #8]
 80067b4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067b6:	68bb      	ldr	r3, [r7, #8]
 80067b8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80067bc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	609a      	str	r2, [r3, #8]
      break;
 80067c6:	e04f      	b.n	8006868 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80067d8:	f000 f9a2 	bl	8006b20 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	689a      	ldr	r2, [r3, #8]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80067ea:	609a      	str	r2, [r3, #8]
      break;
 80067ec:	e03c      	b.n	8006868 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067fa:	461a      	mov	r2, r3
 80067fc:	f000 f916 	bl	8006a2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2150      	movs	r1, #80	@ 0x50
 8006806:	4618      	mov	r0, r3
 8006808:	f000 f96f 	bl	8006aea <TIM_ITRx_SetConfig>
      break;
 800680c:	e02c      	b.n	8006868 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006816:	683b      	ldr	r3, [r7, #0]
 8006818:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800681a:	461a      	mov	r2, r3
 800681c:	f000 f935 	bl	8006a8a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2160      	movs	r1, #96	@ 0x60
 8006826:	4618      	mov	r0, r3
 8006828:	f000 f95f 	bl	8006aea <TIM_ITRx_SetConfig>
      break;
 800682c:	e01c      	b.n	8006868 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006836:	683b      	ldr	r3, [r7, #0]
 8006838:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800683a:	461a      	mov	r2, r3
 800683c:	f000 f8f6 	bl	8006a2c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2140      	movs	r1, #64	@ 0x40
 8006846:	4618      	mov	r0, r3
 8006848:	f000 f94f 	bl	8006aea <TIM_ITRx_SetConfig>
      break;
 800684c:	e00c      	b.n	8006868 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	683b      	ldr	r3, [r7, #0]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	4619      	mov	r1, r3
 8006858:	4610      	mov	r0, r2
 800685a:	f000 f946 	bl	8006aea <TIM_ITRx_SetConfig>
      break;
 800685e:	e003      	b.n	8006868 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	73fb      	strb	r3, [r7, #15]
      break;
 8006864:	e000      	b.n	8006868 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006866:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2201      	movs	r2, #1
 800686c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006878:	7bfb      	ldrb	r3, [r7, #15]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}

08006882 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006882:	b480      	push	{r7}
 8006884:	b083      	sub	sp, #12
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800688a:	bf00      	nop
 800688c:	370c      	adds	r7, #12
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006896:	b480      	push	{r7}
 8006898:	b083      	sub	sp, #12
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800689e:	bf00      	nop
 80068a0:	370c      	adds	r7, #12
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068aa:	b480      	push	{r7}
 80068ac:	b083      	sub	sp, #12
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068b2:	bf00      	nop
 80068b4:	370c      	adds	r7, #12
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068be:	b480      	push	{r7}
 80068c0:	b083      	sub	sp, #12
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068c6:	bf00      	nop
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr
	...

080068d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80068d4:	b480      	push	{r7}
 80068d6:	b085      	sub	sp, #20
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
 80068dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a46      	ldr	r2, [pc, #280]	@ (8006a00 <TIM_Base_SetConfig+0x12c>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d013      	beq.n	8006914 <TIM_Base_SetConfig+0x40>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068f2:	d00f      	beq.n	8006914 <TIM_Base_SetConfig+0x40>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a43      	ldr	r2, [pc, #268]	@ (8006a04 <TIM_Base_SetConfig+0x130>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d00b      	beq.n	8006914 <TIM_Base_SetConfig+0x40>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a42      	ldr	r2, [pc, #264]	@ (8006a08 <TIM_Base_SetConfig+0x134>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d007      	beq.n	8006914 <TIM_Base_SetConfig+0x40>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a41      	ldr	r2, [pc, #260]	@ (8006a0c <TIM_Base_SetConfig+0x138>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d003      	beq.n	8006914 <TIM_Base_SetConfig+0x40>
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	4a40      	ldr	r2, [pc, #256]	@ (8006a10 <TIM_Base_SetConfig+0x13c>)
 8006910:	4293      	cmp	r3, r2
 8006912:	d108      	bne.n	8006926 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800691a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	68fa      	ldr	r2, [r7, #12]
 8006922:	4313      	orrs	r3, r2
 8006924:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a35      	ldr	r2, [pc, #212]	@ (8006a00 <TIM_Base_SetConfig+0x12c>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d02b      	beq.n	8006986 <TIM_Base_SetConfig+0xb2>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006934:	d027      	beq.n	8006986 <TIM_Base_SetConfig+0xb2>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a32      	ldr	r2, [pc, #200]	@ (8006a04 <TIM_Base_SetConfig+0x130>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d023      	beq.n	8006986 <TIM_Base_SetConfig+0xb2>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a31      	ldr	r2, [pc, #196]	@ (8006a08 <TIM_Base_SetConfig+0x134>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d01f      	beq.n	8006986 <TIM_Base_SetConfig+0xb2>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a30      	ldr	r2, [pc, #192]	@ (8006a0c <TIM_Base_SetConfig+0x138>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d01b      	beq.n	8006986 <TIM_Base_SetConfig+0xb2>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a2f      	ldr	r2, [pc, #188]	@ (8006a10 <TIM_Base_SetConfig+0x13c>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d017      	beq.n	8006986 <TIM_Base_SetConfig+0xb2>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a2e      	ldr	r2, [pc, #184]	@ (8006a14 <TIM_Base_SetConfig+0x140>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d013      	beq.n	8006986 <TIM_Base_SetConfig+0xb2>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a2d      	ldr	r2, [pc, #180]	@ (8006a18 <TIM_Base_SetConfig+0x144>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d00f      	beq.n	8006986 <TIM_Base_SetConfig+0xb2>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a2c      	ldr	r2, [pc, #176]	@ (8006a1c <TIM_Base_SetConfig+0x148>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d00b      	beq.n	8006986 <TIM_Base_SetConfig+0xb2>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a2b      	ldr	r2, [pc, #172]	@ (8006a20 <TIM_Base_SetConfig+0x14c>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d007      	beq.n	8006986 <TIM_Base_SetConfig+0xb2>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a2a      	ldr	r2, [pc, #168]	@ (8006a24 <TIM_Base_SetConfig+0x150>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d003      	beq.n	8006986 <TIM_Base_SetConfig+0xb2>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a29      	ldr	r2, [pc, #164]	@ (8006a28 <TIM_Base_SetConfig+0x154>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d108      	bne.n	8006998 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800698c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	68fa      	ldr	r2, [r7, #12]
 8006994:	4313      	orrs	r3, r2
 8006996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	695b      	ldr	r3, [r3, #20]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	68fa      	ldr	r2, [r7, #12]
 80069aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	689a      	ldr	r2, [r3, #8]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069b4:	683b      	ldr	r3, [r7, #0]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a10      	ldr	r2, [pc, #64]	@ (8006a00 <TIM_Base_SetConfig+0x12c>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d003      	beq.n	80069cc <TIM_Base_SetConfig+0xf8>
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	4a12      	ldr	r2, [pc, #72]	@ (8006a10 <TIM_Base_SetConfig+0x13c>)
 80069c8:	4293      	cmp	r3, r2
 80069ca:	d103      	bne.n	80069d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069cc:	683b      	ldr	r3, [r7, #0]
 80069ce:	691a      	ldr	r2, [r3, #16]
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	2201      	movs	r2, #1
 80069d8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	691b      	ldr	r3, [r3, #16]
 80069de:	f003 0301 	and.w	r3, r3, #1
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d105      	bne.n	80069f2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	691b      	ldr	r3, [r3, #16]
 80069ea:	f023 0201 	bic.w	r2, r3, #1
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	611a      	str	r2, [r3, #16]
  }
}
 80069f2:	bf00      	nop
 80069f4:	3714      	adds	r7, #20
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
 80069fe:	bf00      	nop
 8006a00:	40010000 	.word	0x40010000
 8006a04:	40000400 	.word	0x40000400
 8006a08:	40000800 	.word	0x40000800
 8006a0c:	40000c00 	.word	0x40000c00
 8006a10:	40010400 	.word	0x40010400
 8006a14:	40014000 	.word	0x40014000
 8006a18:	40014400 	.word	0x40014400
 8006a1c:	40014800 	.word	0x40014800
 8006a20:	40001800 	.word	0x40001800
 8006a24:	40001c00 	.word	0x40001c00
 8006a28:	40002000 	.word	0x40002000

08006a2c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a2c:	b480      	push	{r7}
 8006a2e:	b087      	sub	sp, #28
 8006a30:	af00      	add	r7, sp, #0
 8006a32:	60f8      	str	r0, [r7, #12]
 8006a34:	60b9      	str	r1, [r7, #8]
 8006a36:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	6a1b      	ldr	r3, [r3, #32]
 8006a3c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	6a1b      	ldr	r3, [r3, #32]
 8006a42:	f023 0201 	bic.w	r2, r3, #1
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	699b      	ldr	r3, [r3, #24]
 8006a4e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a56:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	011b      	lsls	r3, r3, #4
 8006a5c:	693a      	ldr	r2, [r7, #16]
 8006a5e:	4313      	orrs	r3, r2
 8006a60:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a62:	697b      	ldr	r3, [r7, #20]
 8006a64:	f023 030a 	bic.w	r3, r3, #10
 8006a68:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	693a      	ldr	r2, [r7, #16]
 8006a76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	697a      	ldr	r2, [r7, #20]
 8006a7c:	621a      	str	r2, [r3, #32]
}
 8006a7e:	bf00      	nop
 8006a80:	371c      	adds	r7, #28
 8006a82:	46bd      	mov	sp, r7
 8006a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a88:	4770      	bx	lr

08006a8a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a8a:	b480      	push	{r7}
 8006a8c:	b087      	sub	sp, #28
 8006a8e:	af00      	add	r7, sp, #0
 8006a90:	60f8      	str	r0, [r7, #12]
 8006a92:	60b9      	str	r1, [r7, #8]
 8006a94:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6a1b      	ldr	r3, [r3, #32]
 8006a9a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	6a1b      	ldr	r3, [r3, #32]
 8006aa0:	f023 0210 	bic.w	r2, r3, #16
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	699b      	ldr	r3, [r3, #24]
 8006aac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006aae:	693b      	ldr	r3, [r7, #16]
 8006ab0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ab4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	031b      	lsls	r3, r3, #12
 8006aba:	693a      	ldr	r2, [r7, #16]
 8006abc:	4313      	orrs	r3, r2
 8006abe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006ac6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	011b      	lsls	r3, r3, #4
 8006acc:	697a      	ldr	r2, [r7, #20]
 8006ace:	4313      	orrs	r3, r2
 8006ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	693a      	ldr	r2, [r7, #16]
 8006ad6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	621a      	str	r2, [r3, #32]
}
 8006ade:	bf00      	nop
 8006ae0:	371c      	adds	r7, #28
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b085      	sub	sp, #20
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	689b      	ldr	r3, [r3, #8]
 8006af8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b00:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b02:	683a      	ldr	r2, [r7, #0]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	4313      	orrs	r3, r2
 8006b08:	f043 0307 	orr.w	r3, r3, #7
 8006b0c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	609a      	str	r2, [r3, #8]
}
 8006b14:	bf00      	nop
 8006b16:	3714      	adds	r7, #20
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b087      	sub	sp, #28
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	60b9      	str	r1, [r7, #8]
 8006b2a:	607a      	str	r2, [r7, #4]
 8006b2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b34:	697b      	ldr	r3, [r7, #20]
 8006b36:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b3a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	021a      	lsls	r2, r3, #8
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	431a      	orrs	r2, r3
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	4313      	orrs	r3, r2
 8006b48:	697a      	ldr	r2, [r7, #20]
 8006b4a:	4313      	orrs	r3, r2
 8006b4c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	697a      	ldr	r2, [r7, #20]
 8006b52:	609a      	str	r2, [r3, #8]
}
 8006b54:	bf00      	nop
 8006b56:	371c      	adds	r7, #28
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5e:	4770      	bx	lr

08006b60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b085      	sub	sp, #20
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d101      	bne.n	8006b78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b74:	2302      	movs	r3, #2
 8006b76:	e05a      	b.n	8006c2e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2201      	movs	r2, #1
 8006b7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2202      	movs	r2, #2
 8006b84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	689b      	ldr	r3, [r3, #8]
 8006b96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006ba0:	683b      	ldr	r3, [r7, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	68fa      	ldr	r2, [r7, #12]
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	68fa      	ldr	r2, [r7, #12]
 8006bb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	4a21      	ldr	r2, [pc, #132]	@ (8006c3c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	d022      	beq.n	8006c02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006bc4:	d01d      	beq.n	8006c02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a1d      	ldr	r2, [pc, #116]	@ (8006c40 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d018      	beq.n	8006c02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	4a1b      	ldr	r2, [pc, #108]	@ (8006c44 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	d013      	beq.n	8006c02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	681b      	ldr	r3, [r3, #0]
 8006bde:	4a1a      	ldr	r2, [pc, #104]	@ (8006c48 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d00e      	beq.n	8006c02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a18      	ldr	r2, [pc, #96]	@ (8006c4c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006bea:	4293      	cmp	r3, r2
 8006bec:	d009      	beq.n	8006c02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	4a17      	ldr	r2, [pc, #92]	@ (8006c50 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d004      	beq.n	8006c02 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	4a15      	ldr	r2, [pc, #84]	@ (8006c54 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d10c      	bne.n	8006c1c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006c02:	68bb      	ldr	r3, [r7, #8]
 8006c04:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006c08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006c0a:	683b      	ldr	r3, [r7, #0]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	68ba      	ldr	r2, [r7, #8]
 8006c10:	4313      	orrs	r3, r2
 8006c12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	68ba      	ldr	r2, [r7, #8]
 8006c1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006c2c:	2300      	movs	r3, #0
}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	3714      	adds	r7, #20
 8006c32:	46bd      	mov	sp, r7
 8006c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c38:	4770      	bx	lr
 8006c3a:	bf00      	nop
 8006c3c:	40010000 	.word	0x40010000
 8006c40:	40000400 	.word	0x40000400
 8006c44:	40000800 	.word	0x40000800
 8006c48:	40000c00 	.word	0x40000c00
 8006c4c:	40010400 	.word	0x40010400
 8006c50:	40014000 	.word	0x40014000
 8006c54:	40001800 	.word	0x40001800

08006c58 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b083      	sub	sp, #12
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c60:	bf00      	nop
 8006c62:	370c      	adds	r7, #12
 8006c64:	46bd      	mov	sp, r7
 8006c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6a:	4770      	bx	lr

08006c6c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c6c:	b480      	push	{r7}
 8006c6e:	b083      	sub	sp, #12
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr

08006c80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d101      	bne.n	8006c92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e042      	b.n	8006d18 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d106      	bne.n	8006cac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f7fa fc24 	bl	80014f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2224      	movs	r2, #36	@ 0x24
 8006cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68da      	ldr	r2, [r3, #12]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006cc2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006cc4:	6878      	ldr	r0, [r7, #4]
 8006cc6:	f000 f973 	bl	8006fb0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	691a      	ldr	r2, [r3, #16]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006cd8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	695a      	ldr	r2, [r3, #20]
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006ce8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68da      	ldr	r2, [r3, #12]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006cf8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2220      	movs	r2, #32
 8006d04:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2220      	movs	r2, #32
 8006d0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	2200      	movs	r2, #0
 8006d14:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3708      	adds	r7, #8
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006d20:	b580      	push	{r7, lr}
 8006d22:	b08a      	sub	sp, #40	@ 0x28
 8006d24:	af02      	add	r7, sp, #8
 8006d26:	60f8      	str	r0, [r7, #12]
 8006d28:	60b9      	str	r1, [r7, #8]
 8006d2a:	603b      	str	r3, [r7, #0]
 8006d2c:	4613      	mov	r3, r2
 8006d2e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006d30:	2300      	movs	r3, #0
 8006d32:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	2b20      	cmp	r3, #32
 8006d3e:	d175      	bne.n	8006e2c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d002      	beq.n	8006d4c <HAL_UART_Transmit+0x2c>
 8006d46:	88fb      	ldrh	r3, [r7, #6]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d101      	bne.n	8006d50 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	e06e      	b.n	8006e2e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2221      	movs	r2, #33	@ 0x21
 8006d5a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006d5e:	f7fa fe51 	bl	8001a04 <HAL_GetTick>
 8006d62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	88fa      	ldrh	r2, [r7, #6]
 8006d68:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	88fa      	ldrh	r2, [r7, #6]
 8006d6e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006d78:	d108      	bne.n	8006d8c <HAL_UART_Transmit+0x6c>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	691b      	ldr	r3, [r3, #16]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d104      	bne.n	8006d8c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006d82:	2300      	movs	r3, #0
 8006d84:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	61bb      	str	r3, [r7, #24]
 8006d8a:	e003      	b.n	8006d94 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006d90:	2300      	movs	r3, #0
 8006d92:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006d94:	e02e      	b.n	8006df4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006d96:	683b      	ldr	r3, [r7, #0]
 8006d98:	9300      	str	r3, [sp, #0]
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	2180      	movs	r1, #128	@ 0x80
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f000 f848 	bl	8006e36 <UART_WaitOnFlagUntilTimeout>
 8006da6:	4603      	mov	r3, r0
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d005      	beq.n	8006db8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	2220      	movs	r2, #32
 8006db0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006db4:	2303      	movs	r3, #3
 8006db6:	e03a      	b.n	8006e2e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006db8:	69fb      	ldr	r3, [r7, #28]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d10b      	bne.n	8006dd6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	881b      	ldrh	r3, [r3, #0]
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006dcc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006dce:	69bb      	ldr	r3, [r7, #24]
 8006dd0:	3302      	adds	r3, #2
 8006dd2:	61bb      	str	r3, [r7, #24]
 8006dd4:	e007      	b.n	8006de6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	781a      	ldrb	r2, [r3, #0]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006de0:	69fb      	ldr	r3, [r7, #28]
 8006de2:	3301      	adds	r3, #1
 8006de4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006dea:	b29b      	uxth	r3, r3
 8006dec:	3b01      	subs	r3, #1
 8006dee:	b29a      	uxth	r2, r3
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d1cb      	bne.n	8006d96 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	9300      	str	r3, [sp, #0]
 8006e02:	697b      	ldr	r3, [r7, #20]
 8006e04:	2200      	movs	r2, #0
 8006e06:	2140      	movs	r1, #64	@ 0x40
 8006e08:	68f8      	ldr	r0, [r7, #12]
 8006e0a:	f000 f814 	bl	8006e36 <UART_WaitOnFlagUntilTimeout>
 8006e0e:	4603      	mov	r3, r0
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d005      	beq.n	8006e20 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2220      	movs	r2, #32
 8006e18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8006e1c:	2303      	movs	r3, #3
 8006e1e:	e006      	b.n	8006e2e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	2220      	movs	r2, #32
 8006e24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	e000      	b.n	8006e2e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8006e2c:	2302      	movs	r3, #2
  }
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3720      	adds	r7, #32
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b086      	sub	sp, #24
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	60f8      	str	r0, [r7, #12]
 8006e3e:	60b9      	str	r1, [r7, #8]
 8006e40:	603b      	str	r3, [r7, #0]
 8006e42:	4613      	mov	r3, r2
 8006e44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e46:	e03b      	b.n	8006ec0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e48:	6a3b      	ldr	r3, [r7, #32]
 8006e4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e4e:	d037      	beq.n	8006ec0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e50:	f7fa fdd8 	bl	8001a04 <HAL_GetTick>
 8006e54:	4602      	mov	r2, r0
 8006e56:	683b      	ldr	r3, [r7, #0]
 8006e58:	1ad3      	subs	r3, r2, r3
 8006e5a:	6a3a      	ldr	r2, [r7, #32]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d302      	bcc.n	8006e66 <UART_WaitOnFlagUntilTimeout+0x30>
 8006e60:	6a3b      	ldr	r3, [r7, #32]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d101      	bne.n	8006e6a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e03a      	b.n	8006ee0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68db      	ldr	r3, [r3, #12]
 8006e70:	f003 0304 	and.w	r3, r3, #4
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d023      	beq.n	8006ec0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006e78:	68bb      	ldr	r3, [r7, #8]
 8006e7a:	2b80      	cmp	r3, #128	@ 0x80
 8006e7c:	d020      	beq.n	8006ec0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8006e7e:	68bb      	ldr	r3, [r7, #8]
 8006e80:	2b40      	cmp	r3, #64	@ 0x40
 8006e82:	d01d      	beq.n	8006ec0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f003 0308 	and.w	r3, r3, #8
 8006e8e:	2b08      	cmp	r3, #8
 8006e90:	d116      	bne.n	8006ec0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006e92:	2300      	movs	r3, #0
 8006e94:	617b      	str	r3, [r7, #20]
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	681b      	ldr	r3, [r3, #0]
 8006e9c:	617b      	str	r3, [r7, #20]
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	617b      	str	r3, [r7, #20]
 8006ea6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ea8:	68f8      	ldr	r0, [r7, #12]
 8006eaa:	f000 f81d 	bl	8006ee8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	2208      	movs	r2, #8
 8006eb2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e00f      	b.n	8006ee0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681a      	ldr	r2, [r3, #0]
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	4013      	ands	r3, r2
 8006eca:	68ba      	ldr	r2, [r7, #8]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	bf0c      	ite	eq
 8006ed0:	2301      	moveq	r3, #1
 8006ed2:	2300      	movne	r3, #0
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	461a      	mov	r2, r3
 8006ed8:	79fb      	ldrb	r3, [r7, #7]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d0b4      	beq.n	8006e48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ede:	2300      	movs	r3, #0
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3718      	adds	r7, #24
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b095      	sub	sp, #84	@ 0x54
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	330c      	adds	r3, #12
 8006ef6:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ef8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006efa:	e853 3f00 	ldrex	r3, [r3]
 8006efe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006f00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006f06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	330c      	adds	r3, #12
 8006f0e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006f10:	643a      	str	r2, [r7, #64]	@ 0x40
 8006f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f14:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006f16:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006f18:	e841 2300 	strex	r3, r2, [r1]
 8006f1c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d1e5      	bne.n	8006ef0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	3314      	adds	r3, #20
 8006f2a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f2c:	6a3b      	ldr	r3, [r7, #32]
 8006f2e:	e853 3f00 	ldrex	r3, [r3]
 8006f32:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f34:	69fb      	ldr	r3, [r7, #28]
 8006f36:	f023 0301 	bic.w	r3, r3, #1
 8006f3a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	3314      	adds	r3, #20
 8006f42:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f44:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f46:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f48:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f4c:	e841 2300 	strex	r3, r2, [r1]
 8006f50:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d1e5      	bne.n	8006f24 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d119      	bne.n	8006f94 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	330c      	adds	r3, #12
 8006f66:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	e853 3f00 	ldrex	r3, [r3]
 8006f6e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	f023 0310 	bic.w	r3, r3, #16
 8006f76:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	330c      	adds	r3, #12
 8006f7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006f80:	61ba      	str	r2, [r7, #24]
 8006f82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f84:	6979      	ldr	r1, [r7, #20]
 8006f86:	69ba      	ldr	r2, [r7, #24]
 8006f88:	e841 2300 	strex	r3, r2, [r1]
 8006f8c:	613b      	str	r3, [r7, #16]
   return(result);
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d1e5      	bne.n	8006f60 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2220      	movs	r2, #32
 8006f98:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006fa2:	bf00      	nop
 8006fa4:	3754      	adds	r7, #84	@ 0x54
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fac:	4770      	bx	lr
	...

08006fb0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006fb4:	b0c0      	sub	sp, #256	@ 0x100
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	691b      	ldr	r3, [r3, #16]
 8006fc4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006fc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fcc:	68d9      	ldr	r1, [r3, #12]
 8006fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fd2:	681a      	ldr	r2, [r3, #0]
 8006fd4:	ea40 0301 	orr.w	r3, r0, r1
 8006fd8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fde:	689a      	ldr	r2, [r3, #8]
 8006fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fe4:	691b      	ldr	r3, [r3, #16]
 8006fe6:	431a      	orrs	r2, r3
 8006fe8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fec:	695b      	ldr	r3, [r3, #20]
 8006fee:	431a      	orrs	r2, r3
 8006ff0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ff4:	69db      	ldr	r3, [r3, #28]
 8006ff6:	4313      	orrs	r3, r2
 8006ff8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007008:	f021 010c 	bic.w	r1, r1, #12
 800700c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007010:	681a      	ldr	r2, [r3, #0]
 8007012:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007016:	430b      	orrs	r3, r1
 8007018:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800701a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800702a:	6999      	ldr	r1, [r3, #24]
 800702c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	ea40 0301 	orr.w	r3, r0, r1
 8007036:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007038:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800703c:	681a      	ldr	r2, [r3, #0]
 800703e:	4b8f      	ldr	r3, [pc, #572]	@ (800727c <UART_SetConfig+0x2cc>)
 8007040:	429a      	cmp	r2, r3
 8007042:	d005      	beq.n	8007050 <UART_SetConfig+0xa0>
 8007044:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007048:	681a      	ldr	r2, [r3, #0]
 800704a:	4b8d      	ldr	r3, [pc, #564]	@ (8007280 <UART_SetConfig+0x2d0>)
 800704c:	429a      	cmp	r2, r3
 800704e:	d104      	bne.n	800705a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007050:	f7fe f994 	bl	800537c <HAL_RCC_GetPCLK2Freq>
 8007054:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007058:	e003      	b.n	8007062 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800705a:	f7fe f97b 	bl	8005354 <HAL_RCC_GetPCLK1Freq>
 800705e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007062:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007066:	69db      	ldr	r3, [r3, #28]
 8007068:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800706c:	f040 810c 	bne.w	8007288 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007070:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007074:	2200      	movs	r2, #0
 8007076:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800707a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800707e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007082:	4622      	mov	r2, r4
 8007084:	462b      	mov	r3, r5
 8007086:	1891      	adds	r1, r2, r2
 8007088:	65b9      	str	r1, [r7, #88]	@ 0x58
 800708a:	415b      	adcs	r3, r3
 800708c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800708e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007092:	4621      	mov	r1, r4
 8007094:	eb12 0801 	adds.w	r8, r2, r1
 8007098:	4629      	mov	r1, r5
 800709a:	eb43 0901 	adc.w	r9, r3, r1
 800709e:	f04f 0200 	mov.w	r2, #0
 80070a2:	f04f 0300 	mov.w	r3, #0
 80070a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80070aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80070ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80070b2:	4690      	mov	r8, r2
 80070b4:	4699      	mov	r9, r3
 80070b6:	4623      	mov	r3, r4
 80070b8:	eb18 0303 	adds.w	r3, r8, r3
 80070bc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80070c0:	462b      	mov	r3, r5
 80070c2:	eb49 0303 	adc.w	r3, r9, r3
 80070c6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80070ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80070d6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80070da:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80070de:	460b      	mov	r3, r1
 80070e0:	18db      	adds	r3, r3, r3
 80070e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80070e4:	4613      	mov	r3, r2
 80070e6:	eb42 0303 	adc.w	r3, r2, r3
 80070ea:	657b      	str	r3, [r7, #84]	@ 0x54
 80070ec:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80070f0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80070f4:	f7f9 f882 	bl	80001fc <__aeabi_uldivmod>
 80070f8:	4602      	mov	r2, r0
 80070fa:	460b      	mov	r3, r1
 80070fc:	4b61      	ldr	r3, [pc, #388]	@ (8007284 <UART_SetConfig+0x2d4>)
 80070fe:	fba3 2302 	umull	r2, r3, r3, r2
 8007102:	095b      	lsrs	r3, r3, #5
 8007104:	011c      	lsls	r4, r3, #4
 8007106:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800710a:	2200      	movs	r2, #0
 800710c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007110:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007114:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007118:	4642      	mov	r2, r8
 800711a:	464b      	mov	r3, r9
 800711c:	1891      	adds	r1, r2, r2
 800711e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007120:	415b      	adcs	r3, r3
 8007122:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007124:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007128:	4641      	mov	r1, r8
 800712a:	eb12 0a01 	adds.w	sl, r2, r1
 800712e:	4649      	mov	r1, r9
 8007130:	eb43 0b01 	adc.w	fp, r3, r1
 8007134:	f04f 0200 	mov.w	r2, #0
 8007138:	f04f 0300 	mov.w	r3, #0
 800713c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007140:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007144:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007148:	4692      	mov	sl, r2
 800714a:	469b      	mov	fp, r3
 800714c:	4643      	mov	r3, r8
 800714e:	eb1a 0303 	adds.w	r3, sl, r3
 8007152:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007156:	464b      	mov	r3, r9
 8007158:	eb4b 0303 	adc.w	r3, fp, r3
 800715c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	2200      	movs	r2, #0
 8007168:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800716c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007170:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007174:	460b      	mov	r3, r1
 8007176:	18db      	adds	r3, r3, r3
 8007178:	643b      	str	r3, [r7, #64]	@ 0x40
 800717a:	4613      	mov	r3, r2
 800717c:	eb42 0303 	adc.w	r3, r2, r3
 8007180:	647b      	str	r3, [r7, #68]	@ 0x44
 8007182:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007186:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800718a:	f7f9 f837 	bl	80001fc <__aeabi_uldivmod>
 800718e:	4602      	mov	r2, r0
 8007190:	460b      	mov	r3, r1
 8007192:	4611      	mov	r1, r2
 8007194:	4b3b      	ldr	r3, [pc, #236]	@ (8007284 <UART_SetConfig+0x2d4>)
 8007196:	fba3 2301 	umull	r2, r3, r3, r1
 800719a:	095b      	lsrs	r3, r3, #5
 800719c:	2264      	movs	r2, #100	@ 0x64
 800719e:	fb02 f303 	mul.w	r3, r2, r3
 80071a2:	1acb      	subs	r3, r1, r3
 80071a4:	00db      	lsls	r3, r3, #3
 80071a6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80071aa:	4b36      	ldr	r3, [pc, #216]	@ (8007284 <UART_SetConfig+0x2d4>)
 80071ac:	fba3 2302 	umull	r2, r3, r3, r2
 80071b0:	095b      	lsrs	r3, r3, #5
 80071b2:	005b      	lsls	r3, r3, #1
 80071b4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80071b8:	441c      	add	r4, r3
 80071ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80071be:	2200      	movs	r2, #0
 80071c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80071c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80071c8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80071cc:	4642      	mov	r2, r8
 80071ce:	464b      	mov	r3, r9
 80071d0:	1891      	adds	r1, r2, r2
 80071d2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80071d4:	415b      	adcs	r3, r3
 80071d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80071d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80071dc:	4641      	mov	r1, r8
 80071de:	1851      	adds	r1, r2, r1
 80071e0:	6339      	str	r1, [r7, #48]	@ 0x30
 80071e2:	4649      	mov	r1, r9
 80071e4:	414b      	adcs	r3, r1
 80071e6:	637b      	str	r3, [r7, #52]	@ 0x34
 80071e8:	f04f 0200 	mov.w	r2, #0
 80071ec:	f04f 0300 	mov.w	r3, #0
 80071f0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80071f4:	4659      	mov	r1, fp
 80071f6:	00cb      	lsls	r3, r1, #3
 80071f8:	4651      	mov	r1, sl
 80071fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80071fe:	4651      	mov	r1, sl
 8007200:	00ca      	lsls	r2, r1, #3
 8007202:	4610      	mov	r0, r2
 8007204:	4619      	mov	r1, r3
 8007206:	4603      	mov	r3, r0
 8007208:	4642      	mov	r2, r8
 800720a:	189b      	adds	r3, r3, r2
 800720c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007210:	464b      	mov	r3, r9
 8007212:	460a      	mov	r2, r1
 8007214:	eb42 0303 	adc.w	r3, r2, r3
 8007218:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800721c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	2200      	movs	r2, #0
 8007224:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007228:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800722c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007230:	460b      	mov	r3, r1
 8007232:	18db      	adds	r3, r3, r3
 8007234:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007236:	4613      	mov	r3, r2
 8007238:	eb42 0303 	adc.w	r3, r2, r3
 800723c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800723e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007242:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007246:	f7f8 ffd9 	bl	80001fc <__aeabi_uldivmod>
 800724a:	4602      	mov	r2, r0
 800724c:	460b      	mov	r3, r1
 800724e:	4b0d      	ldr	r3, [pc, #52]	@ (8007284 <UART_SetConfig+0x2d4>)
 8007250:	fba3 1302 	umull	r1, r3, r3, r2
 8007254:	095b      	lsrs	r3, r3, #5
 8007256:	2164      	movs	r1, #100	@ 0x64
 8007258:	fb01 f303 	mul.w	r3, r1, r3
 800725c:	1ad3      	subs	r3, r2, r3
 800725e:	00db      	lsls	r3, r3, #3
 8007260:	3332      	adds	r3, #50	@ 0x32
 8007262:	4a08      	ldr	r2, [pc, #32]	@ (8007284 <UART_SetConfig+0x2d4>)
 8007264:	fba2 2303 	umull	r2, r3, r2, r3
 8007268:	095b      	lsrs	r3, r3, #5
 800726a:	f003 0207 	and.w	r2, r3, #7
 800726e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4422      	add	r2, r4
 8007276:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007278:	e106      	b.n	8007488 <UART_SetConfig+0x4d8>
 800727a:	bf00      	nop
 800727c:	40011000 	.word	0x40011000
 8007280:	40011400 	.word	0x40011400
 8007284:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007288:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800728c:	2200      	movs	r2, #0
 800728e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007292:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007296:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800729a:	4642      	mov	r2, r8
 800729c:	464b      	mov	r3, r9
 800729e:	1891      	adds	r1, r2, r2
 80072a0:	6239      	str	r1, [r7, #32]
 80072a2:	415b      	adcs	r3, r3
 80072a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80072a6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80072aa:	4641      	mov	r1, r8
 80072ac:	1854      	adds	r4, r2, r1
 80072ae:	4649      	mov	r1, r9
 80072b0:	eb43 0501 	adc.w	r5, r3, r1
 80072b4:	f04f 0200 	mov.w	r2, #0
 80072b8:	f04f 0300 	mov.w	r3, #0
 80072bc:	00eb      	lsls	r3, r5, #3
 80072be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80072c2:	00e2      	lsls	r2, r4, #3
 80072c4:	4614      	mov	r4, r2
 80072c6:	461d      	mov	r5, r3
 80072c8:	4643      	mov	r3, r8
 80072ca:	18e3      	adds	r3, r4, r3
 80072cc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80072d0:	464b      	mov	r3, r9
 80072d2:	eb45 0303 	adc.w	r3, r5, r3
 80072d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80072da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80072de:	685b      	ldr	r3, [r3, #4]
 80072e0:	2200      	movs	r2, #0
 80072e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80072e6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80072ea:	f04f 0200 	mov.w	r2, #0
 80072ee:	f04f 0300 	mov.w	r3, #0
 80072f2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80072f6:	4629      	mov	r1, r5
 80072f8:	008b      	lsls	r3, r1, #2
 80072fa:	4621      	mov	r1, r4
 80072fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007300:	4621      	mov	r1, r4
 8007302:	008a      	lsls	r2, r1, #2
 8007304:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007308:	f7f8 ff78 	bl	80001fc <__aeabi_uldivmod>
 800730c:	4602      	mov	r2, r0
 800730e:	460b      	mov	r3, r1
 8007310:	4b60      	ldr	r3, [pc, #384]	@ (8007494 <UART_SetConfig+0x4e4>)
 8007312:	fba3 2302 	umull	r2, r3, r3, r2
 8007316:	095b      	lsrs	r3, r3, #5
 8007318:	011c      	lsls	r4, r3, #4
 800731a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800731e:	2200      	movs	r2, #0
 8007320:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007324:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007328:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800732c:	4642      	mov	r2, r8
 800732e:	464b      	mov	r3, r9
 8007330:	1891      	adds	r1, r2, r2
 8007332:	61b9      	str	r1, [r7, #24]
 8007334:	415b      	adcs	r3, r3
 8007336:	61fb      	str	r3, [r7, #28]
 8007338:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800733c:	4641      	mov	r1, r8
 800733e:	1851      	adds	r1, r2, r1
 8007340:	6139      	str	r1, [r7, #16]
 8007342:	4649      	mov	r1, r9
 8007344:	414b      	adcs	r3, r1
 8007346:	617b      	str	r3, [r7, #20]
 8007348:	f04f 0200 	mov.w	r2, #0
 800734c:	f04f 0300 	mov.w	r3, #0
 8007350:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007354:	4659      	mov	r1, fp
 8007356:	00cb      	lsls	r3, r1, #3
 8007358:	4651      	mov	r1, sl
 800735a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800735e:	4651      	mov	r1, sl
 8007360:	00ca      	lsls	r2, r1, #3
 8007362:	4610      	mov	r0, r2
 8007364:	4619      	mov	r1, r3
 8007366:	4603      	mov	r3, r0
 8007368:	4642      	mov	r2, r8
 800736a:	189b      	adds	r3, r3, r2
 800736c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007370:	464b      	mov	r3, r9
 8007372:	460a      	mov	r2, r1
 8007374:	eb42 0303 	adc.w	r3, r2, r3
 8007378:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800737c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007386:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007388:	f04f 0200 	mov.w	r2, #0
 800738c:	f04f 0300 	mov.w	r3, #0
 8007390:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007394:	4649      	mov	r1, r9
 8007396:	008b      	lsls	r3, r1, #2
 8007398:	4641      	mov	r1, r8
 800739a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800739e:	4641      	mov	r1, r8
 80073a0:	008a      	lsls	r2, r1, #2
 80073a2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80073a6:	f7f8 ff29 	bl	80001fc <__aeabi_uldivmod>
 80073aa:	4602      	mov	r2, r0
 80073ac:	460b      	mov	r3, r1
 80073ae:	4611      	mov	r1, r2
 80073b0:	4b38      	ldr	r3, [pc, #224]	@ (8007494 <UART_SetConfig+0x4e4>)
 80073b2:	fba3 2301 	umull	r2, r3, r3, r1
 80073b6:	095b      	lsrs	r3, r3, #5
 80073b8:	2264      	movs	r2, #100	@ 0x64
 80073ba:	fb02 f303 	mul.w	r3, r2, r3
 80073be:	1acb      	subs	r3, r1, r3
 80073c0:	011b      	lsls	r3, r3, #4
 80073c2:	3332      	adds	r3, #50	@ 0x32
 80073c4:	4a33      	ldr	r2, [pc, #204]	@ (8007494 <UART_SetConfig+0x4e4>)
 80073c6:	fba2 2303 	umull	r2, r3, r2, r3
 80073ca:	095b      	lsrs	r3, r3, #5
 80073cc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80073d0:	441c      	add	r4, r3
 80073d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80073d6:	2200      	movs	r2, #0
 80073d8:	673b      	str	r3, [r7, #112]	@ 0x70
 80073da:	677a      	str	r2, [r7, #116]	@ 0x74
 80073dc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80073e0:	4642      	mov	r2, r8
 80073e2:	464b      	mov	r3, r9
 80073e4:	1891      	adds	r1, r2, r2
 80073e6:	60b9      	str	r1, [r7, #8]
 80073e8:	415b      	adcs	r3, r3
 80073ea:	60fb      	str	r3, [r7, #12]
 80073ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80073f0:	4641      	mov	r1, r8
 80073f2:	1851      	adds	r1, r2, r1
 80073f4:	6039      	str	r1, [r7, #0]
 80073f6:	4649      	mov	r1, r9
 80073f8:	414b      	adcs	r3, r1
 80073fa:	607b      	str	r3, [r7, #4]
 80073fc:	f04f 0200 	mov.w	r2, #0
 8007400:	f04f 0300 	mov.w	r3, #0
 8007404:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007408:	4659      	mov	r1, fp
 800740a:	00cb      	lsls	r3, r1, #3
 800740c:	4651      	mov	r1, sl
 800740e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007412:	4651      	mov	r1, sl
 8007414:	00ca      	lsls	r2, r1, #3
 8007416:	4610      	mov	r0, r2
 8007418:	4619      	mov	r1, r3
 800741a:	4603      	mov	r3, r0
 800741c:	4642      	mov	r2, r8
 800741e:	189b      	adds	r3, r3, r2
 8007420:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007422:	464b      	mov	r3, r9
 8007424:	460a      	mov	r2, r1
 8007426:	eb42 0303 	adc.w	r3, r2, r3
 800742a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800742c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	663b      	str	r3, [r7, #96]	@ 0x60
 8007436:	667a      	str	r2, [r7, #100]	@ 0x64
 8007438:	f04f 0200 	mov.w	r2, #0
 800743c:	f04f 0300 	mov.w	r3, #0
 8007440:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007444:	4649      	mov	r1, r9
 8007446:	008b      	lsls	r3, r1, #2
 8007448:	4641      	mov	r1, r8
 800744a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800744e:	4641      	mov	r1, r8
 8007450:	008a      	lsls	r2, r1, #2
 8007452:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007456:	f7f8 fed1 	bl	80001fc <__aeabi_uldivmod>
 800745a:	4602      	mov	r2, r0
 800745c:	460b      	mov	r3, r1
 800745e:	4b0d      	ldr	r3, [pc, #52]	@ (8007494 <UART_SetConfig+0x4e4>)
 8007460:	fba3 1302 	umull	r1, r3, r3, r2
 8007464:	095b      	lsrs	r3, r3, #5
 8007466:	2164      	movs	r1, #100	@ 0x64
 8007468:	fb01 f303 	mul.w	r3, r1, r3
 800746c:	1ad3      	subs	r3, r2, r3
 800746e:	011b      	lsls	r3, r3, #4
 8007470:	3332      	adds	r3, #50	@ 0x32
 8007472:	4a08      	ldr	r2, [pc, #32]	@ (8007494 <UART_SetConfig+0x4e4>)
 8007474:	fba2 2303 	umull	r2, r3, r2, r3
 8007478:	095b      	lsrs	r3, r3, #5
 800747a:	f003 020f 	and.w	r2, r3, #15
 800747e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4422      	add	r2, r4
 8007486:	609a      	str	r2, [r3, #8]
}
 8007488:	bf00      	nop
 800748a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800748e:	46bd      	mov	sp, r7
 8007490:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007494:	51eb851f 	.word	0x51eb851f

08007498 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007498:	b480      	push	{r7}
 800749a:	b083      	sub	sp, #12
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d123      	bne.n	80074f2 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80074b2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80074b6:	683a      	ldr	r2, [r7, #0]
 80074b8:	6851      	ldr	r1, [r2, #4]
 80074ba:	683a      	ldr	r2, [r7, #0]
 80074bc:	6892      	ldr	r2, [r2, #8]
 80074be:	4311      	orrs	r1, r2
 80074c0:	683a      	ldr	r2, [r7, #0]
 80074c2:	68d2      	ldr	r2, [r2, #12]
 80074c4:	4311      	orrs	r1, r2
 80074c6:	683a      	ldr	r2, [r7, #0]
 80074c8:	6912      	ldr	r2, [r2, #16]
 80074ca:	4311      	orrs	r1, r2
 80074cc:	683a      	ldr	r2, [r7, #0]
 80074ce:	6952      	ldr	r2, [r2, #20]
 80074d0:	4311      	orrs	r1, r2
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	6992      	ldr	r2, [r2, #24]
 80074d6:	4311      	orrs	r1, r2
 80074d8:	683a      	ldr	r2, [r7, #0]
 80074da:	69d2      	ldr	r2, [r2, #28]
 80074dc:	4311      	orrs	r1, r2
 80074de:	683a      	ldr	r2, [r7, #0]
 80074e0:	6a12      	ldr	r2, [r2, #32]
 80074e2:	4311      	orrs	r1, r2
 80074e4:	683a      	ldr	r2, [r7, #0]
 80074e6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80074e8:	430a      	orrs	r2, r1
 80074ea:	431a      	orrs	r2, r3
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	601a      	str	r2, [r3, #0]
 80074f0:	e028      	b.n	8007544 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	69d9      	ldr	r1, [r3, #28]
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	6a1b      	ldr	r3, [r3, #32]
 8007502:	4319      	orrs	r1, r3
 8007504:	683b      	ldr	r3, [r7, #0]
 8007506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007508:	430b      	orrs	r3, r1
 800750a:	431a      	orrs	r2, r3
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	685b      	ldr	r3, [r3, #4]
 8007514:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007518:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800751c:	683a      	ldr	r2, [r7, #0]
 800751e:	6851      	ldr	r1, [r2, #4]
 8007520:	683a      	ldr	r2, [r7, #0]
 8007522:	6892      	ldr	r2, [r2, #8]
 8007524:	4311      	orrs	r1, r2
 8007526:	683a      	ldr	r2, [r7, #0]
 8007528:	68d2      	ldr	r2, [r2, #12]
 800752a:	4311      	orrs	r1, r2
 800752c:	683a      	ldr	r2, [r7, #0]
 800752e:	6912      	ldr	r2, [r2, #16]
 8007530:	4311      	orrs	r1, r2
 8007532:	683a      	ldr	r2, [r7, #0]
 8007534:	6952      	ldr	r2, [r2, #20]
 8007536:	4311      	orrs	r1, r2
 8007538:	683a      	ldr	r2, [r7, #0]
 800753a:	6992      	ldr	r2, [r2, #24]
 800753c:	430a      	orrs	r2, r1
 800753e:	431a      	orrs	r2, r3
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007544:	2300      	movs	r3, #0
}
 8007546:	4618      	mov	r0, r3
 8007548:	370c      	adds	r7, #12
 800754a:	46bd      	mov	sp, r7
 800754c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007550:	4770      	bx	lr

08007552 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007552:	b480      	push	{r7}
 8007554:	b085      	sub	sp, #20
 8007556:	af00      	add	r7, sp, #0
 8007558:	60f8      	str	r0, [r7, #12]
 800755a:	60b9      	str	r1, [r7, #8]
 800755c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d128      	bne.n	80075b6 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	689b      	ldr	r3, [r3, #8]
 8007568:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800756c:	68bb      	ldr	r3, [r7, #8]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	1e59      	subs	r1, r3, #1
 8007572:	68bb      	ldr	r3, [r7, #8]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	3b01      	subs	r3, #1
 8007578:	011b      	lsls	r3, r3, #4
 800757a:	4319      	orrs	r1, r3
 800757c:	68bb      	ldr	r3, [r7, #8]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	3b01      	subs	r3, #1
 8007582:	021b      	lsls	r3, r3, #8
 8007584:	4319      	orrs	r1, r3
 8007586:	68bb      	ldr	r3, [r7, #8]
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	3b01      	subs	r3, #1
 800758c:	031b      	lsls	r3, r3, #12
 800758e:	4319      	orrs	r1, r3
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	691b      	ldr	r3, [r3, #16]
 8007594:	3b01      	subs	r3, #1
 8007596:	041b      	lsls	r3, r3, #16
 8007598:	4319      	orrs	r1, r3
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	695b      	ldr	r3, [r3, #20]
 800759e:	3b01      	subs	r3, #1
 80075a0:	051b      	lsls	r3, r3, #20
 80075a2:	4319      	orrs	r1, r3
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	699b      	ldr	r3, [r3, #24]
 80075a8:	3b01      	subs	r3, #1
 80075aa:	061b      	lsls	r3, r3, #24
 80075ac:	430b      	orrs	r3, r1
 80075ae:	431a      	orrs	r2, r3
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	609a      	str	r2, [r3, #8]
 80075b4:	e02f      	b.n	8007616 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80075be:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80075c2:	68ba      	ldr	r2, [r7, #8]
 80075c4:	68d2      	ldr	r2, [r2, #12]
 80075c6:	3a01      	subs	r2, #1
 80075c8:	0311      	lsls	r1, r2, #12
 80075ca:	68ba      	ldr	r2, [r7, #8]
 80075cc:	6952      	ldr	r2, [r2, #20]
 80075ce:	3a01      	subs	r2, #1
 80075d0:	0512      	lsls	r2, r2, #20
 80075d2:	430a      	orrs	r2, r1
 80075d4:	431a      	orrs	r2, r3
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	68db      	ldr	r3, [r3, #12]
 80075de:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	1e59      	subs	r1, r3, #1
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	3b01      	subs	r3, #1
 80075ee:	011b      	lsls	r3, r3, #4
 80075f0:	4319      	orrs	r1, r3
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	3b01      	subs	r3, #1
 80075f8:	021b      	lsls	r3, r3, #8
 80075fa:	4319      	orrs	r1, r3
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	691b      	ldr	r3, [r3, #16]
 8007600:	3b01      	subs	r3, #1
 8007602:	041b      	lsls	r3, r3, #16
 8007604:	4319      	orrs	r1, r3
 8007606:	68bb      	ldr	r3, [r7, #8]
 8007608:	699b      	ldr	r3, [r3, #24]
 800760a:	3b01      	subs	r3, #1
 800760c:	061b      	lsls	r3, r3, #24
 800760e:	430b      	orrs	r3, r1
 8007610:	431a      	orrs	r2, r3
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3714      	adds	r7, #20
 800761c:	46bd      	mov	sp, r7
 800761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007622:	4770      	bx	lr

08007624 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007624:	b084      	sub	sp, #16
 8007626:	b580      	push	{r7, lr}
 8007628:	b084      	sub	sp, #16
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
 800762e:	f107 001c 	add.w	r0, r7, #28
 8007632:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007636:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800763a:	2b01      	cmp	r3, #1
 800763c:	d123      	bne.n	8007686 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007642:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	68db      	ldr	r3, [r3, #12]
 800764e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007652:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007656:	687a      	ldr	r2, [r7, #4]
 8007658:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	68db      	ldr	r3, [r3, #12]
 800765e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007666:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800766a:	2b01      	cmp	r3, #1
 800766c:	d105      	bne.n	800767a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	68db      	ldr	r3, [r3, #12]
 8007672:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 f98d 	bl	800799a <USB_CoreReset>
 8007680:	4603      	mov	r3, r0
 8007682:	73fb      	strb	r3, [r7, #15]
 8007684:	e01b      	b.n	80076be <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007692:	6878      	ldr	r0, [r7, #4]
 8007694:	f000 f981 	bl	800799a <USB_CoreReset>
 8007698:	4603      	mov	r3, r0
 800769a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800769c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d106      	bne.n	80076b2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076a8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80076b0:	e005      	b.n	80076be <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076b6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80076be:	7fbb      	ldrb	r3, [r7, #30]
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d10b      	bne.n	80076dc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f043 0206 	orr.w	r2, r3, #6
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	f043 0220 	orr.w	r2, r3, #32
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80076dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80076de:	4618      	mov	r0, r3
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80076e8:	b004      	add	sp, #16
 80076ea:	4770      	bx	lr

080076ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80076ec:	b480      	push	{r7}
 80076ee:	b083      	sub	sp, #12
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f023 0201 	bic.w	r2, r3, #1
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007700:	2300      	movs	r3, #0
}
 8007702:	4618      	mov	r0, r3
 8007704:	370c      	adds	r7, #12
 8007706:	46bd      	mov	sp, r7
 8007708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770c:	4770      	bx	lr

0800770e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800770e:	b580      	push	{r7, lr}
 8007710:	b084      	sub	sp, #16
 8007712:	af00      	add	r7, sp, #0
 8007714:	6078      	str	r0, [r7, #4]
 8007716:	460b      	mov	r3, r1
 8007718:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800771a:	2300      	movs	r3, #0
 800771c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800772a:	78fb      	ldrb	r3, [r7, #3]
 800772c:	2b01      	cmp	r3, #1
 800772e:	d115      	bne.n	800775c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	68db      	ldr	r3, [r3, #12]
 8007734:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800773c:	200a      	movs	r0, #10
 800773e:	f7fa f96d 	bl	8001a1c <HAL_Delay>
      ms += 10U;
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	330a      	adds	r3, #10
 8007746:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 f918 	bl	800797e <USB_GetMode>
 800774e:	4603      	mov	r3, r0
 8007750:	2b01      	cmp	r3, #1
 8007752:	d01e      	beq.n	8007792 <USB_SetCurrentMode+0x84>
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2bc7      	cmp	r3, #199	@ 0xc7
 8007758:	d9f0      	bls.n	800773c <USB_SetCurrentMode+0x2e>
 800775a:	e01a      	b.n	8007792 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800775c:	78fb      	ldrb	r3, [r7, #3]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d115      	bne.n	800778e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800776e:	200a      	movs	r0, #10
 8007770:	f7fa f954 	bl	8001a1c <HAL_Delay>
      ms += 10U;
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	330a      	adds	r3, #10
 8007778:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f000 f8ff 	bl	800797e <USB_GetMode>
 8007780:	4603      	mov	r3, r0
 8007782:	2b00      	cmp	r3, #0
 8007784:	d005      	beq.n	8007792 <USB_SetCurrentMode+0x84>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	2bc7      	cmp	r3, #199	@ 0xc7
 800778a:	d9f0      	bls.n	800776e <USB_SetCurrentMode+0x60>
 800778c:	e001      	b.n	8007792 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
 8007790:	e005      	b.n	800779e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	2bc8      	cmp	r3, #200	@ 0xc8
 8007796:	d101      	bne.n	800779c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007798:	2301      	movs	r3, #1
 800779a:	e000      	b.n	800779e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800779c:	2300      	movs	r3, #0
}
 800779e:	4618      	mov	r0, r3
 80077a0:	3710      	adds	r7, #16
 80077a2:	46bd      	mov	sp, r7
 80077a4:	bd80      	pop	{r7, pc}

080077a6 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80077a6:	b480      	push	{r7}
 80077a8:	b085      	sub	sp, #20
 80077aa:	af00      	add	r7, sp, #0
 80077ac:	6078      	str	r0, [r7, #4]
 80077ae:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80077b0:	2300      	movs	r3, #0
 80077b2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	3301      	adds	r3, #1
 80077b8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077c0:	d901      	bls.n	80077c6 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80077c2:	2303      	movs	r3, #3
 80077c4:	e01b      	b.n	80077fe <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	daf2      	bge.n	80077b4 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80077ce:	2300      	movs	r3, #0
 80077d0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80077d2:	683b      	ldr	r3, [r7, #0]
 80077d4:	019b      	lsls	r3, r3, #6
 80077d6:	f043 0220 	orr.w	r2, r3, #32
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	3301      	adds	r3, #1
 80077e2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077e4:	68fb      	ldr	r3, [r7, #12]
 80077e6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077ea:	d901      	bls.n	80077f0 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80077ec:	2303      	movs	r3, #3
 80077ee:	e006      	b.n	80077fe <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	691b      	ldr	r3, [r3, #16]
 80077f4:	f003 0320 	and.w	r3, r3, #32
 80077f8:	2b20      	cmp	r3, #32
 80077fa:	d0f0      	beq.n	80077de <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80077fc:	2300      	movs	r3, #0
}
 80077fe:	4618      	mov	r0, r3
 8007800:	3714      	adds	r7, #20
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr

0800780a <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800780a:	b480      	push	{r7}
 800780c:	b085      	sub	sp, #20
 800780e:	af00      	add	r7, sp, #0
 8007810:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007812:	2300      	movs	r3, #0
 8007814:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	3301      	adds	r3, #1
 800781a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007822:	d901      	bls.n	8007828 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007824:	2303      	movs	r3, #3
 8007826:	e018      	b.n	800785a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	691b      	ldr	r3, [r3, #16]
 800782c:	2b00      	cmp	r3, #0
 800782e:	daf2      	bge.n	8007816 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007830:	2300      	movs	r3, #0
 8007832:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2210      	movs	r2, #16
 8007838:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	3301      	adds	r3, #1
 800783e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007846:	d901      	bls.n	800784c <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007848:	2303      	movs	r3, #3
 800784a:	e006      	b.n	800785a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	f003 0310 	and.w	r3, r3, #16
 8007854:	2b10      	cmp	r3, #16
 8007856:	d0f0      	beq.n	800783a <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007858:	2300      	movs	r3, #0
}
 800785a:	4618      	mov	r0, r3
 800785c:	3714      	adds	r7, #20
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007866:	b480      	push	{r7}
 8007868:	b08b      	sub	sp, #44	@ 0x2c
 800786a:	af00      	add	r7, sp, #0
 800786c:	60f8      	str	r0, [r7, #12]
 800786e:	60b9      	str	r1, [r7, #8]
 8007870:	4613      	mov	r3, r2
 8007872:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800787c:	88fb      	ldrh	r3, [r7, #6]
 800787e:	089b      	lsrs	r3, r3, #2
 8007880:	b29b      	uxth	r3, r3
 8007882:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8007884:	88fb      	ldrh	r3, [r7, #6]
 8007886:	f003 0303 	and.w	r3, r3, #3
 800788a:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800788c:	2300      	movs	r3, #0
 800788e:	623b      	str	r3, [r7, #32]
 8007890:	e014      	b.n	80078bc <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8007892:	69bb      	ldr	r3, [r7, #24]
 8007894:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789c:	601a      	str	r2, [r3, #0]
    pDest++;
 800789e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a0:	3301      	adds	r3, #1
 80078a2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80078a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078a6:	3301      	adds	r3, #1
 80078a8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80078aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ac:	3301      	adds	r3, #1
 80078ae:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80078b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078b2:	3301      	adds	r3, #1
 80078b4:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80078b6:	6a3b      	ldr	r3, [r7, #32]
 80078b8:	3301      	adds	r3, #1
 80078ba:	623b      	str	r3, [r7, #32]
 80078bc:	6a3a      	ldr	r2, [r7, #32]
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	429a      	cmp	r2, r3
 80078c2:	d3e6      	bcc.n	8007892 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80078c4:	8bfb      	ldrh	r3, [r7, #30]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d01e      	beq.n	8007908 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80078ca:	2300      	movs	r3, #0
 80078cc:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80078ce:	69bb      	ldr	r3, [r7, #24]
 80078d0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80078d4:	461a      	mov	r2, r3
 80078d6:	f107 0310 	add.w	r3, r7, #16
 80078da:	6812      	ldr	r2, [r2, #0]
 80078dc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80078de:	693a      	ldr	r2, [r7, #16]
 80078e0:	6a3b      	ldr	r3, [r7, #32]
 80078e2:	b2db      	uxtb	r3, r3
 80078e4:	00db      	lsls	r3, r3, #3
 80078e6:	fa22 f303 	lsr.w	r3, r2, r3
 80078ea:	b2da      	uxtb	r2, r3
 80078ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078ee:	701a      	strb	r2, [r3, #0]
      i++;
 80078f0:	6a3b      	ldr	r3, [r7, #32]
 80078f2:	3301      	adds	r3, #1
 80078f4:	623b      	str	r3, [r7, #32]
      pDest++;
 80078f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80078f8:	3301      	adds	r3, #1
 80078fa:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80078fc:	8bfb      	ldrh	r3, [r7, #30]
 80078fe:	3b01      	subs	r3, #1
 8007900:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007902:	8bfb      	ldrh	r3, [r7, #30]
 8007904:	2b00      	cmp	r3, #0
 8007906:	d1ea      	bne.n	80078de <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800790a:	4618      	mov	r0, r3
 800790c:	372c      	adds	r7, #44	@ 0x2c
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr

08007916 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007916:	b480      	push	{r7}
 8007918:	b085      	sub	sp, #20
 800791a:	af00      	add	r7, sp, #0
 800791c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	695b      	ldr	r3, [r3, #20]
 8007922:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	699b      	ldr	r3, [r3, #24]
 8007928:	68fa      	ldr	r2, [r7, #12]
 800792a:	4013      	ands	r3, r2
 800792c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800792e:	68fb      	ldr	r3, [r7, #12]
}
 8007930:	4618      	mov	r0, r3
 8007932:	3714      	adds	r7, #20
 8007934:	46bd      	mov	sp, r7
 8007936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793a:	4770      	bx	lr

0800793c <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800793c:	b480      	push	{r7}
 800793e:	b085      	sub	sp, #20
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
 8007944:	460b      	mov	r3, r1
 8007946:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800794c:	78fb      	ldrb	r3, [r7, #3]
 800794e:	015a      	lsls	r2, r3, #5
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	4413      	add	r3, r2
 8007954:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007958:	689b      	ldr	r3, [r3, #8]
 800795a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800795c:	78fb      	ldrb	r3, [r7, #3]
 800795e:	015a      	lsls	r2, r3, #5
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	4413      	add	r3, r2
 8007964:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007968:	68db      	ldr	r3, [r3, #12]
 800796a:	68ba      	ldr	r2, [r7, #8]
 800796c:	4013      	ands	r3, r2
 800796e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007970:	68bb      	ldr	r3, [r7, #8]
}
 8007972:	4618      	mov	r0, r3
 8007974:	3714      	adds	r7, #20
 8007976:	46bd      	mov	sp, r7
 8007978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797c:	4770      	bx	lr

0800797e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800797e:	b480      	push	{r7}
 8007980:	b083      	sub	sp, #12
 8007982:	af00      	add	r7, sp, #0
 8007984:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	695b      	ldr	r3, [r3, #20]
 800798a:	f003 0301 	and.w	r3, r3, #1
}
 800798e:	4618      	mov	r0, r3
 8007990:	370c      	adds	r7, #12
 8007992:	46bd      	mov	sp, r7
 8007994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007998:	4770      	bx	lr

0800799a <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800799a:	b480      	push	{r7}
 800799c:	b085      	sub	sp, #20
 800799e:	af00      	add	r7, sp, #0
 80079a0:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80079a2:	2300      	movs	r3, #0
 80079a4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	3301      	adds	r3, #1
 80079aa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079b2:	d901      	bls.n	80079b8 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80079b4:	2303      	movs	r3, #3
 80079b6:	e01b      	b.n	80079f0 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	691b      	ldr	r3, [r3, #16]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	daf2      	bge.n	80079a6 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80079c0:	2300      	movs	r3, #0
 80079c2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	691b      	ldr	r3, [r3, #16]
 80079c8:	f043 0201 	orr.w	r2, r3, #1
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	3301      	adds	r3, #1
 80079d4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80079dc:	d901      	bls.n	80079e2 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80079de:	2303      	movs	r3, #3
 80079e0:	e006      	b.n	80079f0 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	691b      	ldr	r3, [r3, #16]
 80079e6:	f003 0301 	and.w	r3, r3, #1
 80079ea:	2b01      	cmp	r3, #1
 80079ec:	d0f0      	beq.n	80079d0 <USB_CoreReset+0x36>

  return HAL_OK;
 80079ee:	2300      	movs	r3, #0
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3714      	adds	r7, #20
 80079f4:	46bd      	mov	sp, r7
 80079f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fa:	4770      	bx	lr

080079fc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80079fc:	b084      	sub	sp, #16
 80079fe:	b580      	push	{r7, lr}
 8007a00:	b086      	sub	sp, #24
 8007a02:	af00      	add	r7, sp, #0
 8007a04:	6078      	str	r0, [r7, #4]
 8007a06:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007a0a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	2300      	movs	r3, #0
 8007a20:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a26:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a32:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a3e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	68db      	ldr	r3, [r3, #12]
 8007a4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	d119      	bne.n	8007a86 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007a52:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007a56:	2b01      	cmp	r3, #1
 8007a58:	d10a      	bne.n	8007a70 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	68fa      	ldr	r2, [r7, #12]
 8007a64:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007a68:	f043 0304 	orr.w	r3, r3, #4
 8007a6c:	6013      	str	r3, [r2, #0]
 8007a6e:	e014      	b.n	8007a9a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	68fa      	ldr	r2, [r7, #12]
 8007a7a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007a7e:	f023 0304 	bic.w	r3, r3, #4
 8007a82:	6013      	str	r3, [r2, #0]
 8007a84:	e009      	b.n	8007a9a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007a94:	f023 0304 	bic.w	r3, r3, #4
 8007a98:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007a9a:	2110      	movs	r1, #16
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f7ff fe82 	bl	80077a6 <USB_FlushTxFifo>
 8007aa2:	4603      	mov	r3, r0
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d001      	beq.n	8007aac <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f7ff feac 	bl	800780a <USB_FlushRxFifo>
 8007ab2:	4603      	mov	r3, r0
 8007ab4:	2b00      	cmp	r3, #0
 8007ab6:	d001      	beq.n	8007abc <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007abc:	2300      	movs	r3, #0
 8007abe:	613b      	str	r3, [r7, #16]
 8007ac0:	e015      	b.n	8007aee <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	015a      	lsls	r2, r3, #5
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	4413      	add	r3, r2
 8007aca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ace:	461a      	mov	r2, r3
 8007ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ad4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	015a      	lsls	r2, r3, #5
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	4413      	add	r3, r2
 8007ade:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ae2:	461a      	mov	r2, r3
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007ae8:	693b      	ldr	r3, [r7, #16]
 8007aea:	3301      	adds	r3, #1
 8007aec:	613b      	str	r3, [r7, #16]
 8007aee:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007af2:	461a      	mov	r2, r3
 8007af4:	693b      	ldr	r3, [r7, #16]
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d3e3      	bcc.n	8007ac2 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	f04f 32ff 	mov.w	r2, #4294967295
 8007b06:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	4a18      	ldr	r2, [pc, #96]	@ (8007b6c <USB_HostInit+0x170>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d10b      	bne.n	8007b28 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007b16:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	4a15      	ldr	r2, [pc, #84]	@ (8007b70 <USB_HostInit+0x174>)
 8007b1c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	4a14      	ldr	r2, [pc, #80]	@ (8007b74 <USB_HostInit+0x178>)
 8007b22:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8007b26:	e009      	b.n	8007b3c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2280      	movs	r2, #128	@ 0x80
 8007b2c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	4a11      	ldr	r2, [pc, #68]	@ (8007b78 <USB_HostInit+0x17c>)
 8007b32:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	4a11      	ldr	r2, [pc, #68]	@ (8007b7c <USB_HostInit+0x180>)
 8007b38:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007b3c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d105      	bne.n	8007b50 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	699b      	ldr	r3, [r3, #24]
 8007b48:	f043 0210 	orr.w	r2, r3, #16
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	699a      	ldr	r2, [r3, #24]
 8007b54:	4b0a      	ldr	r3, [pc, #40]	@ (8007b80 <USB_HostInit+0x184>)
 8007b56:	4313      	orrs	r3, r2
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007b5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b5e:	4618      	mov	r0, r3
 8007b60:	3718      	adds	r7, #24
 8007b62:	46bd      	mov	sp, r7
 8007b64:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b68:	b004      	add	sp, #16
 8007b6a:	4770      	bx	lr
 8007b6c:	40040000 	.word	0x40040000
 8007b70:	01000200 	.word	0x01000200
 8007b74:	00e00300 	.word	0x00e00300
 8007b78:	00600080 	.word	0x00600080
 8007b7c:	004000e0 	.word	0x004000e0
 8007b80:	a3200008 	.word	0xa3200008

08007b84 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	68fa      	ldr	r2, [r7, #12]
 8007b9e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007ba2:	f023 0303 	bic.w	r3, r3, #3
 8007ba6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	78fb      	ldrb	r3, [r7, #3]
 8007bb2:	f003 0303 	and.w	r3, r3, #3
 8007bb6:	68f9      	ldr	r1, [r7, #12]
 8007bb8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007bbc:	4313      	orrs	r3, r2
 8007bbe:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007bc0:	78fb      	ldrb	r3, [r7, #3]
 8007bc2:	2b01      	cmp	r3, #1
 8007bc4:	d107      	bne.n	8007bd6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007bcc:	461a      	mov	r2, r3
 8007bce:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007bd2:	6053      	str	r3, [r2, #4]
 8007bd4:	e00c      	b.n	8007bf0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007bd6:	78fb      	ldrb	r3, [r7, #3]
 8007bd8:	2b02      	cmp	r3, #2
 8007bda:	d107      	bne.n	8007bec <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007be2:	461a      	mov	r2, r3
 8007be4:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007be8:	6053      	str	r3, [r2, #4]
 8007bea:	e001      	b.n	8007bf0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8007bec:	2301      	movs	r3, #1
 8007bee:	e000      	b.n	8007bf2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007bf0:	2300      	movs	r3, #0
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3714      	adds	r7, #20
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfc:	4770      	bx	lr

08007bfe <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007bfe:	b480      	push	{r7}
 8007c00:	b085      	sub	sp, #20
 8007c02:	af00      	add	r7, sp, #0
 8007c04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c10:	695b      	ldr	r3, [r3, #20]
 8007c12:	b29b      	uxth	r3, r3
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3714      	adds	r7, #20
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b089      	sub	sp, #36	@ 0x24
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
 8007c28:	460b      	mov	r3, r1
 8007c2a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007c30:	78fb      	ldrb	r3, [r7, #3]
 8007c32:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007c34:	2300      	movs	r3, #0
 8007c36:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007c38:	69bb      	ldr	r3, [r7, #24]
 8007c3a:	015a      	lsls	r2, r3, #5
 8007c3c:	69fb      	ldr	r3, [r7, #28]
 8007c3e:	4413      	add	r3, r2
 8007c40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	0c9b      	lsrs	r3, r3, #18
 8007c48:	f003 0303 	and.w	r3, r3, #3
 8007c4c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	015a      	lsls	r2, r3, #5
 8007c52:	69fb      	ldr	r3, [r7, #28]
 8007c54:	4413      	add	r3, r2
 8007c56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	0fdb      	lsrs	r3, r3, #31
 8007c5e:	f003 0301 	and.w	r3, r3, #1
 8007c62:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007c64:	69bb      	ldr	r3, [r7, #24]
 8007c66:	015a      	lsls	r2, r3, #5
 8007c68:	69fb      	ldr	r3, [r7, #28]
 8007c6a:	4413      	add	r3, r2
 8007c6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c70:	685b      	ldr	r3, [r3, #4]
 8007c72:	0fdb      	lsrs	r3, r3, #31
 8007c74:	f003 0301 	and.w	r3, r3, #1
 8007c78:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	689b      	ldr	r3, [r3, #8]
 8007c7e:	f003 0320 	and.w	r3, r3, #32
 8007c82:	2b20      	cmp	r3, #32
 8007c84:	d10d      	bne.n	8007ca2 <USB_HC_Halt+0x82>
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d10a      	bne.n	8007ca2 <USB_HC_Halt+0x82>
 8007c8c:	693b      	ldr	r3, [r7, #16]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d005      	beq.n	8007c9e <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	2b01      	cmp	r3, #1
 8007c96:	d002      	beq.n	8007c9e <USB_HC_Halt+0x7e>
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	2b03      	cmp	r3, #3
 8007c9c:	d101      	bne.n	8007ca2 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007c9e:	2300      	movs	r3, #0
 8007ca0:	e0d8      	b.n	8007e54 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007ca2:	697b      	ldr	r3, [r7, #20]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d002      	beq.n	8007cae <USB_HC_Halt+0x8e>
 8007ca8:	697b      	ldr	r3, [r7, #20]
 8007caa:	2b02      	cmp	r3, #2
 8007cac:	d173      	bne.n	8007d96 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007cae:	69bb      	ldr	r3, [r7, #24]
 8007cb0:	015a      	lsls	r2, r3, #5
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	4413      	add	r3, r2
 8007cb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	69ba      	ldr	r2, [r7, #24]
 8007cbe:	0151      	lsls	r1, r2, #5
 8007cc0:	69fa      	ldr	r2, [r7, #28]
 8007cc2:	440a      	add	r2, r1
 8007cc4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cc8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ccc:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	689b      	ldr	r3, [r3, #8]
 8007cd2:	f003 0320 	and.w	r3, r3, #32
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d14a      	bne.n	8007d70 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cde:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d133      	bne.n	8007d4e <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007ce6:	69bb      	ldr	r3, [r7, #24]
 8007ce8:	015a      	lsls	r2, r3, #5
 8007cea:	69fb      	ldr	r3, [r7, #28]
 8007cec:	4413      	add	r3, r2
 8007cee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	69ba      	ldr	r2, [r7, #24]
 8007cf6:	0151      	lsls	r1, r2, #5
 8007cf8:	69fa      	ldr	r2, [r7, #28]
 8007cfa:	440a      	add	r2, r1
 8007cfc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007d04:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007d06:	69bb      	ldr	r3, [r7, #24]
 8007d08:	015a      	lsls	r2, r3, #5
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	4413      	add	r3, r2
 8007d0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	69ba      	ldr	r2, [r7, #24]
 8007d16:	0151      	lsls	r1, r2, #5
 8007d18:	69fa      	ldr	r2, [r7, #28]
 8007d1a:	440a      	add	r2, r1
 8007d1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d20:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007d24:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	3301      	adds	r3, #1
 8007d2a:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007d32:	d82e      	bhi.n	8007d92 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007d34:	69bb      	ldr	r3, [r7, #24]
 8007d36:	015a      	lsls	r2, r3, #5
 8007d38:	69fb      	ldr	r3, [r7, #28]
 8007d3a:	4413      	add	r3, r2
 8007d3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007d46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007d4a:	d0ec      	beq.n	8007d26 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007d4c:	e081      	b.n	8007e52 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007d4e:	69bb      	ldr	r3, [r7, #24]
 8007d50:	015a      	lsls	r2, r3, #5
 8007d52:	69fb      	ldr	r3, [r7, #28]
 8007d54:	4413      	add	r3, r2
 8007d56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	69ba      	ldr	r2, [r7, #24]
 8007d5e:	0151      	lsls	r1, r2, #5
 8007d60:	69fa      	ldr	r2, [r7, #28]
 8007d62:	440a      	add	r2, r1
 8007d64:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d68:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007d6c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007d6e:	e070      	b.n	8007e52 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007d70:	69bb      	ldr	r3, [r7, #24]
 8007d72:	015a      	lsls	r2, r3, #5
 8007d74:	69fb      	ldr	r3, [r7, #28]
 8007d76:	4413      	add	r3, r2
 8007d78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	69ba      	ldr	r2, [r7, #24]
 8007d80:	0151      	lsls	r1, r2, #5
 8007d82:	69fa      	ldr	r2, [r7, #28]
 8007d84:	440a      	add	r2, r1
 8007d86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d8a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007d8e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007d90:	e05f      	b.n	8007e52 <USB_HC_Halt+0x232>
            break;
 8007d92:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007d94:	e05d      	b.n	8007e52 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007d96:	69bb      	ldr	r3, [r7, #24]
 8007d98:	015a      	lsls	r2, r3, #5
 8007d9a:	69fb      	ldr	r3, [r7, #28]
 8007d9c:	4413      	add	r3, r2
 8007d9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	69ba      	ldr	r2, [r7, #24]
 8007da6:	0151      	lsls	r1, r2, #5
 8007da8:	69fa      	ldr	r2, [r7, #28]
 8007daa:	440a      	add	r2, r1
 8007dac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007db0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007db4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007db6:	69fb      	ldr	r3, [r7, #28]
 8007db8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d133      	bne.n	8007e2e <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	015a      	lsls	r2, r3, #5
 8007dca:	69fb      	ldr	r3, [r7, #28]
 8007dcc:	4413      	add	r3, r2
 8007dce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	69ba      	ldr	r2, [r7, #24]
 8007dd6:	0151      	lsls	r1, r2, #5
 8007dd8:	69fa      	ldr	r2, [r7, #28]
 8007dda:	440a      	add	r2, r1
 8007ddc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007de0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007de4:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007de6:	69bb      	ldr	r3, [r7, #24]
 8007de8:	015a      	lsls	r2, r3, #5
 8007dea:	69fb      	ldr	r3, [r7, #28]
 8007dec:	4413      	add	r3, r2
 8007dee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	69ba      	ldr	r2, [r7, #24]
 8007df6:	0151      	lsls	r1, r2, #5
 8007df8:	69fa      	ldr	r2, [r7, #28]
 8007dfa:	440a      	add	r2, r1
 8007dfc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e00:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007e04:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	3301      	adds	r3, #1
 8007e0a:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007e12:	d81d      	bhi.n	8007e50 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007e14:	69bb      	ldr	r3, [r7, #24]
 8007e16:	015a      	lsls	r2, r3, #5
 8007e18:	69fb      	ldr	r3, [r7, #28]
 8007e1a:	4413      	add	r3, r2
 8007e1c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e2a:	d0ec      	beq.n	8007e06 <USB_HC_Halt+0x1e6>
 8007e2c:	e011      	b.n	8007e52 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	015a      	lsls	r2, r3, #5
 8007e32:	69fb      	ldr	r3, [r7, #28]
 8007e34:	4413      	add	r3, r2
 8007e36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	69ba      	ldr	r2, [r7, #24]
 8007e3e:	0151      	lsls	r1, r2, #5
 8007e40:	69fa      	ldr	r2, [r7, #28]
 8007e42:	440a      	add	r2, r1
 8007e44:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007e48:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007e4c:	6013      	str	r3, [r2, #0]
 8007e4e:	e000      	b.n	8007e52 <USB_HC_Halt+0x232>
          break;
 8007e50:	bf00      	nop
    }
  }

  return HAL_OK;
 8007e52:	2300      	movs	r3, #0
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3724      	adds	r7, #36	@ 0x24
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5e:	4770      	bx	lr

08007e60 <memset>:
 8007e60:	4402      	add	r2, r0
 8007e62:	4603      	mov	r3, r0
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d100      	bne.n	8007e6a <memset+0xa>
 8007e68:	4770      	bx	lr
 8007e6a:	f803 1b01 	strb.w	r1, [r3], #1
 8007e6e:	e7f9      	b.n	8007e64 <memset+0x4>

08007e70 <__libc_init_array>:
 8007e70:	b570      	push	{r4, r5, r6, lr}
 8007e72:	4d0d      	ldr	r5, [pc, #52]	@ (8007ea8 <__libc_init_array+0x38>)
 8007e74:	4c0d      	ldr	r4, [pc, #52]	@ (8007eac <__libc_init_array+0x3c>)
 8007e76:	1b64      	subs	r4, r4, r5
 8007e78:	10a4      	asrs	r4, r4, #2
 8007e7a:	2600      	movs	r6, #0
 8007e7c:	42a6      	cmp	r6, r4
 8007e7e:	d109      	bne.n	8007e94 <__libc_init_array+0x24>
 8007e80:	4d0b      	ldr	r5, [pc, #44]	@ (8007eb0 <__libc_init_array+0x40>)
 8007e82:	4c0c      	ldr	r4, [pc, #48]	@ (8007eb4 <__libc_init_array+0x44>)
 8007e84:	f000 f818 	bl	8007eb8 <_init>
 8007e88:	1b64      	subs	r4, r4, r5
 8007e8a:	10a4      	asrs	r4, r4, #2
 8007e8c:	2600      	movs	r6, #0
 8007e8e:	42a6      	cmp	r6, r4
 8007e90:	d105      	bne.n	8007e9e <__libc_init_array+0x2e>
 8007e92:	bd70      	pop	{r4, r5, r6, pc}
 8007e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e98:	4798      	blx	r3
 8007e9a:	3601      	adds	r6, #1
 8007e9c:	e7ee      	b.n	8007e7c <__libc_init_array+0xc>
 8007e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ea2:	4798      	blx	r3
 8007ea4:	3601      	adds	r6, #1
 8007ea6:	e7f2      	b.n	8007e8e <__libc_init_array+0x1e>
 8007ea8:	08007f5c 	.word	0x08007f5c
 8007eac:	08007f5c 	.word	0x08007f5c
 8007eb0:	08007f5c 	.word	0x08007f5c
 8007eb4:	08007f60 	.word	0x08007f60

08007eb8 <_init>:
 8007eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eba:	bf00      	nop
 8007ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ebe:	bc08      	pop	{r3}
 8007ec0:	469e      	mov	lr, r3
 8007ec2:	4770      	bx	lr

08007ec4 <_fini>:
 8007ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ec6:	bf00      	nop
 8007ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eca:	bc08      	pop	{r3}
 8007ecc:	469e      	mov	lr, r3
 8007ece:	4770      	bx	lr
