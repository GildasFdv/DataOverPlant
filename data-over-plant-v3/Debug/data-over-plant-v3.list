
data-over-plant-v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a44  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08007bf0  08007bf0  00008bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c08  08007c08  00009010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007c08  08007c08  00008c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c10  08007c10  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c10  08007c10  00008c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007c14  08007c14  00008c14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08007c18  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009010  2**0
                  CONTENTS
 10 .bss          000006ac  20000010  20000010  00009010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006bc  200006bc  00009010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c27c  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003828  00000000  00000000  000252bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019c8  00000000  00000000  00028ae8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001430  00000000  00000000  0002a4b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000275a7  00000000  00000000  0002b8e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f102  00000000  00000000  00052e87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9141  00000000  00000000  00071f89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015b0ca  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006f70  00000000  00000000  0015b110  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000073  00000000  00000000  00162080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08007bd8 	.word	0x08007bd8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	08007bd8 	.word	0x08007bd8

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <set_led3>:
#include "led.h"
#include "main.h"


void set_led3()
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_SET);
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000522:	4802      	ldr	r0, [pc, #8]	@ (800052c <set_led3+0x14>)
 8000524:	f001 ff0c 	bl	8002340 <HAL_GPIO_WritePin>
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40021800 	.word	0x40021800

08000530 <reset_led3>:

void reset_led3()
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800053a:	4802      	ldr	r0, [pc, #8]	@ (8000544 <reset_led3+0x14>)
 800053c:	f001 ff00 	bl	8002340 <HAL_GPIO_WritePin>
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40021800 	.word	0x40021800

08000548 <reset_led4>:
{
	HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_SET);
}

void reset_led4()
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000552:	4802      	ldr	r0, [pc, #8]	@ (800055c <reset_led4+0x14>)
 8000554:	f001 fef4 	bl	8002340 <HAL_GPIO_WritePin>
}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40021800 	.word	0x40021800

08000560 <init_lora_transmitter>:
 */

#include "lora.h"

void init_lora_transmitter()
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
	// Mettre en veille (obligatoire avant les changements de mode)
	write_register(0x01, 0x80); // Sleep mode + LoRa
 8000566:	2180      	movs	r1, #128	@ 0x80
 8000568:	2001      	movs	r0, #1
 800056a:	f000 f88b 	bl	8000684 <write_register>

	// Choisir fréquence (ici pour 868 MHz)
	write_register(0x06, 0xD9); // RegFrfMsb = 868 MHz
 800056e:	21d9      	movs	r1, #217	@ 0xd9
 8000570:	2006      	movs	r0, #6
 8000572:	f000 f887 	bl	8000684 <write_register>
	write_register(0x07, 0x06);
 8000576:	2106      	movs	r1, #6
 8000578:	2007      	movs	r0, #7
 800057a:	f000 f883 	bl	8000684 <write_register>
	write_register(0x08, 0x66);
 800057e:	2166      	movs	r1, #102	@ 0x66
 8000580:	2008      	movs	r0, #8
 8000582:	f000 f87f 	bl	8000684 <write_register>

	// Puissance d’émission (PA_BOOST, 17 dBm)
	//write_register(0x09, 0x8F); // RegPaConfig

	// 0 000 0000
	write_register(0x09, 0x00); // RegPaConfig: PA_SELECT=1 (PA_BOOST), OutputPower=0 (minimum)
 8000586:	2100      	movs	r1, #0
 8000588:	2009      	movs	r0, #9
 800058a:	f000 f87b 	bl	8000684 <write_register>

	// Paramètres LoRa (BW=125 kHz, CR=4/5, SF=7)
	write_register(0x1D, 0x72); // RegModemConfig1: BW=125kHz, CR=4/5, explicit header
 800058e:	2172      	movs	r1, #114	@ 0x72
 8000590:	201d      	movs	r0, #29
 8000592:	f000 f877 	bl	8000684 <write_register>
	write_register(0x1E, 0x74); // RegModemConfig2: SF=7, CRC On
 8000596:	2174      	movs	r1, #116	@ 0x74
 8000598:	201e      	movs	r0, #30
 800059a:	f000 f873 	bl	8000684 <write_register>
	write_register(0x26, 0x04); // RegModemConfig3: LowDataRateOptimize=OFF
 800059e:	2104      	movs	r1, #4
 80005a0:	2026      	movs	r0, #38	@ 0x26
 80005a2:	f000 f86f 	bl	8000684 <write_register>

	// Configuration de la FIFO
	write_register(0x0E, 0x80); // RegFifoTxBaseAddr
 80005a6:	2180      	movs	r1, #128	@ 0x80
 80005a8:	200e      	movs	r0, #14
 80005aa:	f000 f86b 	bl	8000684 <write_register>
	write_register(0x0D, 0x80); // RegFifoAddrPtr
 80005ae:	2180      	movs	r1, #128	@ 0x80
 80005b0:	200d      	movs	r0, #13
 80005b2:	f000 f867 	bl	8000684 <write_register>
	unsigned char size = 7;
 80005b6:	2307      	movs	r3, #7
 80005b8:	71fb      	strb	r3, [r7, #7]
	write_register(0x22, size); // RegPayloadLength (taille du message)
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	4619      	mov	r1, r3
 80005be:	2022      	movs	r0, #34	@ 0x22
 80005c0:	f000 f860 	bl	8000684 <write_register>
	/*for (int i = 0; i < size; i++) {
	  write_register(0x00, TX_Buffer[i]); // RegFifo
	}*/

	// Passage en mode émetteur
	write_register(0x01, 0x83); // TX mode + LoRa
 80005c4:	2183      	movs	r1, #131	@ 0x83
 80005c6:	2001      	movs	r0, #1
 80005c8:	f000 f85c 	bl	8000684 <write_register>
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <init_lora>:

    serial_print("Module LoRa initialisé en mode réception\r\n");
}

void init_lora(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
#ifdef TRANSMITTER
	init_lora_transmitter();
 80005d8:	f7ff ffc2 	bl	8000560 <init_lora_transmitter>
#endif
#ifdef RECEIVER
	init_lora_receiver();
#endif
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}

080005e0 <lora_reset>:

void lora_reset(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005ea:	4808      	ldr	r0, [pc, #32]	@ (800060c <lora_reset+0x2c>)
 80005ec:	f001 fea8 	bl	8002340 <HAL_GPIO_WritePin>
    HAL_Delay(10); // maintenir RESET à 0 pendant 10ms
 80005f0:	200a      	movs	r0, #10
 80005f2:	f001 f9eb 	bl	80019cc <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 80005f6:	2201      	movs	r2, #1
 80005f8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80005fc:	4803      	ldr	r0, [pc, #12]	@ (800060c <lora_reset+0x2c>)
 80005fe:	f001 fe9f 	bl	8002340 <HAL_GPIO_WritePin>
    HAL_Delay(10); // attendre encore un peu après le relâchement
 8000602:	200a      	movs	r0, #10
 8000604:	f001 f9e2 	bl	80019cc <HAL_Delay>
}
 8000608:	bf00      	nop
 800060a:	bd80      	pop	{r7, pc}
 800060c:	40021400 	.word	0x40021400

08000610 <lora_version>:

uint8_t lora_version(void)
{
 8000610:	b580      	push	{r7, lr}
 8000612:	b082      	sub	sp, #8
 8000614:	af00      	add	r7, sp, #0
	uint8_t version = read_register(0x42);
 8000616:	2042      	movs	r0, #66	@ 0x42
 8000618:	f000 f85e 	bl	80006d8 <read_register>
 800061c:	4603      	mov	r3, r0
 800061e:	71fb      	strb	r3, [r7, #7]

	return version;
 8000620:	79fb      	ldrb	r3, [r7, #7]
}
 8000622:	4618      	mov	r0, r3
 8000624:	3708      	adds	r7, #8
 8000626:	46bd      	mov	sp, r7
 8000628:	bd80      	pop	{r7, pc}

0800062a <send_lora_packet>:
{
    return (lora_status() & 0x08) != 0; // Vérifie le drapeau TxDone
}

void send_lora_packet(const uint8_t* data, uint8_t size)
{
 800062a:	b580      	push	{r7, lr}
 800062c:	b084      	sub	sp, #16
 800062e:	af00      	add	r7, sp, #0
 8000630:	6078      	str	r0, [r7, #4]
 8000632:	460b      	mov	r3, r1
 8000634:	70fb      	strb	r3, [r7, #3]
    // Mettre en mode veille
    write_register(0x01, 0x81);  // Standby mode + LoRa
 8000636:	2181      	movs	r1, #129	@ 0x81
 8000638:	2001      	movs	r0, #1
 800063a:	f000 f823 	bl	8000684 <write_register>

    // Configurer le pointeur FIFO pour l'écriture
    write_register(0x0D, 0x80);  // RegFifoAddrPtr
 800063e:	2180      	movs	r1, #128	@ 0x80
 8000640:	200d      	movs	r0, #13
 8000642:	f000 f81f 	bl	8000684 <write_register>

    // Écrire les données dans la FIFO
    for (int i = 0; i < size; i++) {
 8000646:	2300      	movs	r3, #0
 8000648:	60fb      	str	r3, [r7, #12]
 800064a:	e00a      	b.n	8000662 <send_lora_packet+0x38>
        write_register(0x00, data[i]);  // RegFifo
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	4413      	add	r3, r2
 8000652:	781b      	ldrb	r3, [r3, #0]
 8000654:	4619      	mov	r1, r3
 8000656:	2000      	movs	r0, #0
 8000658:	f000 f814 	bl	8000684 <write_register>
    for (int i = 0; i < size; i++) {
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	3301      	adds	r3, #1
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	78fb      	ldrb	r3, [r7, #3]
 8000664:	68fa      	ldr	r2, [r7, #12]
 8000666:	429a      	cmp	r2, r3
 8000668:	dbf0      	blt.n	800064c <send_lora_packet+0x22>
    }

    // Définir la taille des données
    write_register(0x22, size);  // RegPayloadLength
 800066a:	78fb      	ldrb	r3, [r7, #3]
 800066c:	4619      	mov	r1, r3
 800066e:	2022      	movs	r0, #34	@ 0x22
 8000670:	f000 f808 	bl	8000684 <write_register>

    // Démarrer la transmission
    write_register(0x01, 0x83);  // TX mode + LoRa
 8000674:	2183      	movs	r1, #131	@ 0x83
 8000676:	2001      	movs	r0, #1
 8000678:	f000 f804 	bl	8000684 <write_register>
}
 800067c:	bf00      	nop
 800067e:	3710      	adds	r7, #16
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <write_register>:
		serial_printf(" %d", array[i]);
	}
	serial_print("]\r\n");
}

void write_register(uint8_t addr, uint8_t value) {
 8000684:	b580      	push	{r7, lr}
 8000686:	b084      	sub	sp, #16
 8000688:	af00      	add	r7, sp, #0
 800068a:	4603      	mov	r3, r0
 800068c:	460a      	mov	r2, r1
 800068e:	71fb      	strb	r3, [r7, #7]
 8000690:	4613      	mov	r3, r2
 8000692:	71bb      	strb	r3, [r7, #6]
	uint8_t data[2];
	data[0] = addr | 0x80; // bit 7 à 1 pour écriture
 8000694:	79fb      	ldrb	r3, [r7, #7]
 8000696:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800069a:	b2db      	uxtb	r3, r3
 800069c:	733b      	strb	r3, [r7, #12]
	data[1] = value;
 800069e:	79bb      	ldrb	r3, [r7, #6]
 80006a0:	737b      	strb	r3, [r7, #13]

	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET); // NSS low
 80006a2:	2200      	movs	r2, #0
 80006a4:	2140      	movs	r1, #64	@ 0x40
 80006a6:	480a      	ldr	r0, [pc, #40]	@ (80006d0 <write_register+0x4c>)
 80006a8:	f001 fe4a 	bl	8002340 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, data, 2, HAL_MAX_DELAY);
 80006ac:	f107 010c 	add.w	r1, r7, #12
 80006b0:	f04f 33ff 	mov.w	r3, #4294967295
 80006b4:	2202      	movs	r2, #2
 80006b6:	4807      	ldr	r0, [pc, #28]	@ (80006d4 <write_register+0x50>)
 80006b8:	f005 f8fb 	bl	80058b2 <HAL_SPI_Transmit>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET); // NSS high
 80006bc:	2201      	movs	r2, #1
 80006be:	2140      	movs	r1, #64	@ 0x40
 80006c0:	4803      	ldr	r0, [pc, #12]	@ (80006d0 <write_register+0x4c>)
 80006c2:	f001 fe3d 	bl	8002340 <HAL_GPIO_WritePin>
}
 80006c6:	bf00      	nop
 80006c8:	3710      	adds	r7, #16
 80006ca:	46bd      	mov	sp, r7
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	40021400 	.word	0x40021400
 80006d4:	20000170 	.word	0x20000170

080006d8 <read_register>:

uint8_t read_register(uint8_t addr) {
 80006d8:	b580      	push	{r7, lr}
 80006da:	b084      	sub	sp, #16
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
	uint8_t value = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	73fb      	strb	r3, [r7, #15]
	uint8_t reg_addr = addr & 0x7F; // bit 7 à 0 pour lecture (mask pour s'assurer que le bit 7 est à 0)
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006ec:	b2db      	uxtb	r3, r3
 80006ee:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET); // NSS low
 80006f0:	2200      	movs	r2, #0
 80006f2:	2140      	movs	r1, #64	@ 0x40
 80006f4:	480e      	ldr	r0, [pc, #56]	@ (8000730 <read_register+0x58>)
 80006f6:	f001 fe23 	bl	8002340 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &reg_addr, 1, HAL_MAX_DELAY); // Envoyer l'adresse du registre
 80006fa:	f107 010e 	add.w	r1, r7, #14
 80006fe:	f04f 33ff 	mov.w	r3, #4294967295
 8000702:	2201      	movs	r2, #1
 8000704:	480b      	ldr	r0, [pc, #44]	@ (8000734 <read_register+0x5c>)
 8000706:	f005 f8d4 	bl	80058b2 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi5, &value, 1, HAL_MAX_DELAY); // Lire la valeur du registre
 800070a:	f107 010f 	add.w	r1, r7, #15
 800070e:	f04f 33ff 	mov.w	r3, #4294967295
 8000712:	2201      	movs	r2, #1
 8000714:	4807      	ldr	r0, [pc, #28]	@ (8000734 <read_register+0x5c>)
 8000716:	f005 fa10 	bl	8005b3a <HAL_SPI_Receive>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET); // NSS high
 800071a:	2201      	movs	r2, #1
 800071c:	2140      	movs	r1, #64	@ 0x40
 800071e:	4804      	ldr	r0, [pc, #16]	@ (8000730 <read_register+0x58>)
 8000720:	f001 fe0e 	bl	8002340 <HAL_GPIO_WritePin>

	return value;
 8000724:	7bfb      	ldrb	r3, [r7, #15]
}
 8000726:	4618      	mov	r0, r3
 8000728:	3710      	adds	r7, #16
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40021400 	.word	0x40021400
 8000734:	20000170 	.word	0x20000170

08000738 <ensure_lora_init>:

void ensure_lora_init() {
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
	bool lora_init = false;
 800073e:	2300      	movs	r3, #0
 8000740:	71fb      	strb	r3, [r7, #7]
	reset_led3();
 8000742:	f7ff fef5 	bl	8000530 <reset_led3>

	while (!lora_init) {
 8000746:	e014      	b.n	8000772 <ensure_lora_init+0x3a>
		lora_reset();
 8000748:	f7ff ff4a 	bl	80005e0 <lora_reset>
		HAL_Delay(10);
 800074c:	200a      	movs	r0, #10
 800074e:	f001 f93d 	bl	80019cc <HAL_Delay>

		uint8_t version = lora_version();
 8000752:	f7ff ff5d 	bl	8000610 <lora_version>
 8000756:	4603      	mov	r3, r0
 8000758:	71bb      	strb	r3, [r7, #6]
		if (version == 0x12) {
 800075a:	79bb      	ldrb	r3, [r7, #6]
 800075c:	2b12      	cmp	r3, #18
 800075e:	d106      	bne.n	800076e <ensure_lora_init+0x36>
			set_led3();
 8000760:	f7ff feda 	bl	8000518 <set_led3>
			init_lora();
 8000764:	f7ff ff36 	bl	80005d4 <init_lora>
			lora_init = true;
 8000768:	2301      	movs	r3, #1
 800076a:	71fb      	strb	r3, [r7, #7]
 800076c:	e001      	b.n	8000772 <ensure_lora_init+0x3a>
		} else {
			reset_led3();
 800076e:	f7ff fedf 	bl	8000530 <reset_led3>
	while (!lora_init) {
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	f083 0301 	eor.w	r3, r3, #1
 8000778:	b2db      	uxtb	r3, r3
 800077a:	2b00      	cmp	r3, #0
 800077c:	d1e4      	bne.n	8000748 <ensure_lora_init+0x10>
		}
	}
}
 800077e:	bf00      	nop
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800078c:	f001 f8dc 	bl	8001948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000790:	f000 f82a 	bl	80007e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000794:	f000 fac4 	bl	8000d20 <MX_GPIO_Init>
  MX_CRC_Init();
 8000798:	f000 f890 	bl	80008bc <MX_CRC_Init>
  MX_DMA2D_Init();
 800079c:	f000 f8a2 	bl	80008e4 <MX_DMA2D_Init>
  MX_FMC_Init();
 80007a0:	f000 fa6e 	bl	8000c80 <MX_FMC_Init>
  MX_I2C3_Init();
 80007a4:	f000 f8d0 	bl	8000948 <MX_I2C3_Init>
  MX_LTDC_Init();
 80007a8:	f000 f90e 	bl	80009c8 <MX_LTDC_Init>
  MX_SPI5_Init();
 80007ac:	f000 f98c 	bl	8000ac8 <MX_SPI5_Init>
  MX_TIM1_Init();
 80007b0:	f000 f9c0 	bl	8000b34 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80007b4:	f000 fa0e 	bl	8000bd4 <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 80007b8:	f000 fa36 	bl	8000c28 <MX_USB_OTG_HS_HCD_Init>
  /* USER CODE BEGIN 2 */
	reset_led4();
 80007bc:	f7ff fec4 	bl	8000548 <reset_led4>
	reset_led3();
 80007c0:	f7ff feb6 	bl	8000530 <reset_led3>

	ensure_lora_init();
 80007c4:	f7ff ffb8 	bl	8000738 <ensure_lora_init>
	HAL_Delay(10 * 1000);
 80007c8:	f242 7010 	movw	r0, #10000	@ 0x2710
 80007cc:	f001 f8fe 	bl	80019cc <HAL_Delay>
	while (1) {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
#ifdef TRANSMITTER
	send_lora_packet(TX_Buffer, sizeof(TX_Buffer) - 1);  // Ignorer le zéro terminal
 80007d0:	2101      	movs	r1, #1
 80007d2:	4804      	ldr	r0, [pc, #16]	@ (80007e4 <main+0x5c>)
 80007d4:	f7ff ff29 	bl	800062a <send_lora_packet>
	HAL_Delay(25);
 80007d8:	2019      	movs	r0, #25
 80007da:	f001 f8f7 	bl	80019cc <HAL_Delay>
	send_lora_packet(TX_Buffer, sizeof(TX_Buffer) - 1);  // Ignorer le zéro terminal
 80007de:	bf00      	nop
 80007e0:	e7f6      	b.n	80007d0 <main+0x48>
 80007e2:	bf00      	nop
 80007e4:	20000000 	.word	0x20000000

080007e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b094      	sub	sp, #80	@ 0x50
 80007ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007ee:	f107 0320 	add.w	r3, r7, #32
 80007f2:	2230      	movs	r2, #48	@ 0x30
 80007f4:	2100      	movs	r1, #0
 80007f6:	4618      	mov	r0, r3
 80007f8:	f007 f9c2 	bl	8007b80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007fc:	f107 030c 	add.w	r3, r7, #12
 8000800:	2200      	movs	r2, #0
 8000802:	601a      	str	r2, [r3, #0]
 8000804:	605a      	str	r2, [r3, #4]
 8000806:	609a      	str	r2, [r3, #8]
 8000808:	60da      	str	r2, [r3, #12]
 800080a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800080c:	2300      	movs	r3, #0
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	4b28      	ldr	r3, [pc, #160]	@ (80008b4 <SystemClock_Config+0xcc>)
 8000812:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000814:	4a27      	ldr	r2, [pc, #156]	@ (80008b4 <SystemClock_Config+0xcc>)
 8000816:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800081a:	6413      	str	r3, [r2, #64]	@ 0x40
 800081c:	4b25      	ldr	r3, [pc, #148]	@ (80008b4 <SystemClock_Config+0xcc>)
 800081e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000820:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000824:	60bb      	str	r3, [r7, #8]
 8000826:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000828:	2300      	movs	r3, #0
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	4b22      	ldr	r3, [pc, #136]	@ (80008b8 <SystemClock_Config+0xd0>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000834:	4a20      	ldr	r2, [pc, #128]	@ (80008b8 <SystemClock_Config+0xd0>)
 8000836:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800083a:	6013      	str	r3, [r2, #0]
 800083c:	4b1e      	ldr	r3, [pc, #120]	@ (80008b8 <SystemClock_Config+0xd0>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000844:	607b      	str	r3, [r7, #4]
 8000846:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000848:	2301      	movs	r3, #1
 800084a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800084c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000850:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000852:	2302      	movs	r3, #2
 8000854:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000856:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800085a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800085c:	2304      	movs	r3, #4
 800085e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000860:	2348      	movs	r3, #72	@ 0x48
 8000862:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000864:	2302      	movs	r3, #2
 8000866:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000868:	2303      	movs	r3, #3
 800086a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800086c:	f107 0320 	add.w	r3, r7, #32
 8000870:	4618      	mov	r0, r3
 8000872:	f004 f8d7 	bl	8004a24 <HAL_RCC_OscConfig>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800087c:	f000 fb96 	bl	8000fac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000880:	230f      	movs	r3, #15
 8000882:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000884:	2302      	movs	r3, #2
 8000886:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000888:	2300      	movs	r3, #0
 800088a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800088c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000890:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000892:	2300      	movs	r3, #0
 8000894:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000896:	f107 030c 	add.w	r3, r7, #12
 800089a:	2102      	movs	r1, #2
 800089c:	4618      	mov	r0, r3
 800089e:	f004 fb39 	bl	8004f14 <HAL_RCC_ClockConfig>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008a8:	f000 fb80 	bl	8000fac <Error_Handler>
  }
}
 80008ac:	bf00      	nop
 80008ae:	3750      	adds	r7, #80	@ 0x50
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40023800 	.word	0x40023800
 80008b8:	40007000 	.word	0x40007000

080008bc <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008c0:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <MX_CRC_Init+0x20>)
 80008c2:	4a07      	ldr	r2, [pc, #28]	@ (80008e0 <MX_CRC_Init+0x24>)
 80008c4:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008c6:	4805      	ldr	r0, [pc, #20]	@ (80008dc <MX_CRC_Init+0x20>)
 80008c8:	f001 f986 	bl	8001bd8 <HAL_CRC_Init>
 80008cc:	4603      	mov	r3, r0
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d001      	beq.n	80008d6 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80008d2:	f000 fb6b 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000002c 	.word	0x2000002c
 80008e0:	40023000 	.word	0x40023000

080008e4 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80008e4:	b580      	push	{r7, lr}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008e8:	4b15      	ldr	r3, [pc, #84]	@ (8000940 <MX_DMA2D_Init+0x5c>)
 80008ea:	4a16      	ldr	r2, [pc, #88]	@ (8000944 <MX_DMA2D_Init+0x60>)
 80008ec:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008ee:	4b14      	ldr	r3, [pc, #80]	@ (8000940 <MX_DMA2D_Init+0x5c>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80008f4:	4b12      	ldr	r3, [pc, #72]	@ (8000940 <MX_DMA2D_Init+0x5c>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008fa:	4b11      	ldr	r3, [pc, #68]	@ (8000940 <MX_DMA2D_Init+0x5c>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000900:	4b0f      	ldr	r3, [pc, #60]	@ (8000940 <MX_DMA2D_Init+0x5c>)
 8000902:	2200      	movs	r2, #0
 8000904:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000906:	4b0e      	ldr	r3, [pc, #56]	@ (8000940 <MX_DMA2D_Init+0x5c>)
 8000908:	2200      	movs	r2, #0
 800090a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800090c:	4b0c      	ldr	r3, [pc, #48]	@ (8000940 <MX_DMA2D_Init+0x5c>)
 800090e:	2200      	movs	r2, #0
 8000910:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000912:	4b0b      	ldr	r3, [pc, #44]	@ (8000940 <MX_DMA2D_Init+0x5c>)
 8000914:	2200      	movs	r2, #0
 8000916:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000918:	4809      	ldr	r0, [pc, #36]	@ (8000940 <MX_DMA2D_Init+0x5c>)
 800091a:	f001 f979 	bl	8001c10 <HAL_DMA2D_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000924:	f000 fb42 	bl	8000fac <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000928:	2101      	movs	r1, #1
 800092a:	4805      	ldr	r0, [pc, #20]	@ (8000940 <MX_DMA2D_Init+0x5c>)
 800092c:	f001 faca 	bl	8001ec4 <HAL_DMA2D_ConfigLayer>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d001      	beq.n	800093a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000936:	f000 fb39 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000034 	.word	0x20000034
 8000944:	4002b000 	.word	0x4002b000

08000948 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800094c:	4b1b      	ldr	r3, [pc, #108]	@ (80009bc <MX_I2C3_Init+0x74>)
 800094e:	4a1c      	ldr	r2, [pc, #112]	@ (80009c0 <MX_I2C3_Init+0x78>)
 8000950:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000952:	4b1a      	ldr	r3, [pc, #104]	@ (80009bc <MX_I2C3_Init+0x74>)
 8000954:	4a1b      	ldr	r2, [pc, #108]	@ (80009c4 <MX_I2C3_Init+0x7c>)
 8000956:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000958:	4b18      	ldr	r3, [pc, #96]	@ (80009bc <MX_I2C3_Init+0x74>)
 800095a:	2200      	movs	r2, #0
 800095c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800095e:	4b17      	ldr	r3, [pc, #92]	@ (80009bc <MX_I2C3_Init+0x74>)
 8000960:	2200      	movs	r2, #0
 8000962:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000964:	4b15      	ldr	r3, [pc, #84]	@ (80009bc <MX_I2C3_Init+0x74>)
 8000966:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800096a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800096c:	4b13      	ldr	r3, [pc, #76]	@ (80009bc <MX_I2C3_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000972:	4b12      	ldr	r3, [pc, #72]	@ (80009bc <MX_I2C3_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000978:	4b10      	ldr	r3, [pc, #64]	@ (80009bc <MX_I2C3_Init+0x74>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800097e:	4b0f      	ldr	r3, [pc, #60]	@ (80009bc <MX_I2C3_Init+0x74>)
 8000980:	2200      	movs	r2, #0
 8000982:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000984:	480d      	ldr	r0, [pc, #52]	@ (80009bc <MX_I2C3_Init+0x74>)
 8000986:	f003 fb25 	bl	8003fd4 <HAL_I2C_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000990:	f000 fb0c 	bl	8000fac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000994:	2100      	movs	r1, #0
 8000996:	4809      	ldr	r0, [pc, #36]	@ (80009bc <MX_I2C3_Init+0x74>)
 8000998:	f003 fc60 	bl	800425c <HAL_I2CEx_ConfigAnalogFilter>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d001      	beq.n	80009a6 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80009a2:	f000 fb03 	bl	8000fac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80009a6:	2100      	movs	r1, #0
 80009a8:	4804      	ldr	r0, [pc, #16]	@ (80009bc <MX_I2C3_Init+0x74>)
 80009aa:	f003 fc93 	bl	80042d4 <HAL_I2CEx_ConfigDigitalFilter>
 80009ae:	4603      	mov	r3, r0
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d001      	beq.n	80009b8 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80009b4:	f000 fafa 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80009b8:	bf00      	nop
 80009ba:	bd80      	pop	{r7, pc}
 80009bc:	20000074 	.word	0x20000074
 80009c0:	40005c00 	.word	0x40005c00
 80009c4:	000186a0 	.word	0x000186a0

080009c8 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08e      	sub	sp, #56	@ 0x38
 80009cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80009ce:	1d3b      	adds	r3, r7, #4
 80009d0:	2234      	movs	r2, #52	@ 0x34
 80009d2:	2100      	movs	r1, #0
 80009d4:	4618      	mov	r0, r3
 80009d6:	f007 f8d3 	bl	8007b80 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80009da:	4b39      	ldr	r3, [pc, #228]	@ (8000ac0 <MX_LTDC_Init+0xf8>)
 80009dc:	4a39      	ldr	r2, [pc, #228]	@ (8000ac4 <MX_LTDC_Init+0xfc>)
 80009de:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80009e0:	4b37      	ldr	r3, [pc, #220]	@ (8000ac0 <MX_LTDC_Init+0xf8>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80009e6:	4b36      	ldr	r3, [pc, #216]	@ (8000ac0 <MX_LTDC_Init+0xf8>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80009ec:	4b34      	ldr	r3, [pc, #208]	@ (8000ac0 <MX_LTDC_Init+0xf8>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80009f2:	4b33      	ldr	r3, [pc, #204]	@ (8000ac0 <MX_LTDC_Init+0xf8>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80009f8:	4b31      	ldr	r3, [pc, #196]	@ (8000ac0 <MX_LTDC_Init+0xf8>)
 80009fa:	2209      	movs	r2, #9
 80009fc:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80009fe:	4b30      	ldr	r3, [pc, #192]	@ (8000ac0 <MX_LTDC_Init+0xf8>)
 8000a00:	2201      	movs	r2, #1
 8000a02:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000a04:	4b2e      	ldr	r3, [pc, #184]	@ (8000ac0 <MX_LTDC_Init+0xf8>)
 8000a06:	221d      	movs	r2, #29
 8000a08:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000a0a:	4b2d      	ldr	r3, [pc, #180]	@ (8000ac0 <MX_LTDC_Init+0xf8>)
 8000a0c:	2203      	movs	r2, #3
 8000a0e:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000a10:	4b2b      	ldr	r3, [pc, #172]	@ (8000ac0 <MX_LTDC_Init+0xf8>)
 8000a12:	f240 120d 	movw	r2, #269	@ 0x10d
 8000a16:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000a18:	4b29      	ldr	r3, [pc, #164]	@ (8000ac0 <MX_LTDC_Init+0xf8>)
 8000a1a:	f240 1243 	movw	r2, #323	@ 0x143
 8000a1e:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 8000a20:	4b27      	ldr	r3, [pc, #156]	@ (8000ac0 <MX_LTDC_Init+0xf8>)
 8000a22:	f240 1217 	movw	r2, #279	@ 0x117
 8000a26:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000a28:	4b25      	ldr	r3, [pc, #148]	@ (8000ac0 <MX_LTDC_Init+0xf8>)
 8000a2a:	f240 1247 	movw	r2, #327	@ 0x147
 8000a2e:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000a30:	4b23      	ldr	r3, [pc, #140]	@ (8000ac0 <MX_LTDC_Init+0xf8>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000a38:	4b21      	ldr	r3, [pc, #132]	@ (8000ac0 <MX_LTDC_Init+0xf8>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000a40:	4b1f      	ldr	r3, [pc, #124]	@ (8000ac0 <MX_LTDC_Init+0xf8>)
 8000a42:	2200      	movs	r2, #0
 8000a44:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000a48:	481d      	ldr	r0, [pc, #116]	@ (8000ac0 <MX_LTDC_Init+0xf8>)
 8000a4a:	f003 fc83 	bl	8004354 <HAL_LTDC_Init>
 8000a4e:	4603      	mov	r3, r0
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d001      	beq.n	8000a58 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000a54:	f000 faaa 	bl	8000fac <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000a5c:	23f0      	movs	r3, #240	@ 0xf0
 8000a5e:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000a64:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a68:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000a6e:	23ff      	movs	r3, #255	@ 0xff
 8000a70:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000a72:	2300      	movs	r3, #0
 8000a74:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000a76:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a7a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000a7c:	2307      	movs	r3, #7
 8000a7e:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000a80:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000a84:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 8000a86:	23f0      	movs	r3, #240	@ 0xf0
 8000a88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 8000a8a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a8e:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000a90:	2300      	movs	r3, #0
 8000a92:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4805      	ldr	r0, [pc, #20]	@ (8000ac0 <MX_LTDC_Init+0xf8>)
 8000aaa:	f003 fde5 	bl	8004678 <HAL_LTDC_ConfigLayer>
 8000aae:	4603      	mov	r3, r0
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000ab4:	f000 fa7a 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000ab8:	bf00      	nop
 8000aba:	3738      	adds	r7, #56	@ 0x38
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	200000c8 	.word	0x200000c8
 8000ac4:	40016800 	.word	0x40016800

08000ac8 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000acc:	4b17      	ldr	r3, [pc, #92]	@ (8000b2c <MX_SPI5_Init+0x64>)
 8000ace:	4a18      	ldr	r2, [pc, #96]	@ (8000b30 <MX_SPI5_Init+0x68>)
 8000ad0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000ad2:	4b16      	ldr	r3, [pc, #88]	@ (8000b2c <MX_SPI5_Init+0x64>)
 8000ad4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ad8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000ada:	4b14      	ldr	r3, [pc, #80]	@ (8000b2c <MX_SPI5_Init+0x64>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ae0:	4b12      	ldr	r3, [pc, #72]	@ (8000b2c <MX_SPI5_Init+0x64>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ae6:	4b11      	ldr	r3, [pc, #68]	@ (8000b2c <MX_SPI5_Init+0x64>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000aec:	4b0f      	ldr	r3, [pc, #60]	@ (8000b2c <MX_SPI5_Init+0x64>)
 8000aee:	2200      	movs	r2, #0
 8000af0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000af2:	4b0e      	ldr	r3, [pc, #56]	@ (8000b2c <MX_SPI5_Init+0x64>)
 8000af4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000af8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000afa:	4b0c      	ldr	r3, [pc, #48]	@ (8000b2c <MX_SPI5_Init+0x64>)
 8000afc:	2218      	movs	r2, #24
 8000afe:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b00:	4b0a      	ldr	r3, [pc, #40]	@ (8000b2c <MX_SPI5_Init+0x64>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b06:	4b09      	ldr	r3, [pc, #36]	@ (8000b2c <MX_SPI5_Init+0x64>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b0c:	4b07      	ldr	r3, [pc, #28]	@ (8000b2c <MX_SPI5_Init+0x64>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000b12:	4b06      	ldr	r3, [pc, #24]	@ (8000b2c <MX_SPI5_Init+0x64>)
 8000b14:	220a      	movs	r2, #10
 8000b16:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000b18:	4804      	ldr	r0, [pc, #16]	@ (8000b2c <MX_SPI5_Init+0x64>)
 8000b1a:	f004 fe41 	bl	80057a0 <HAL_SPI_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000b24:	f000 fa42 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000b28:	bf00      	nop
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000170 	.word	0x20000170
 8000b30:	40015000 	.word	0x40015000

08000b34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b086      	sub	sp, #24
 8000b38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b3a:	f107 0308 	add.w	r3, r7, #8
 8000b3e:	2200      	movs	r2, #0
 8000b40:	601a      	str	r2, [r3, #0]
 8000b42:	605a      	str	r2, [r3, #4]
 8000b44:	609a      	str	r2, [r3, #8]
 8000b46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b48:	463b      	mov	r3, r7
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	601a      	str	r2, [r3, #0]
 8000b4e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b50:	4b1e      	ldr	r3, [pc, #120]	@ (8000bcc <MX_TIM1_Init+0x98>)
 8000b52:	4a1f      	ldr	r2, [pc, #124]	@ (8000bd0 <MX_TIM1_Init+0x9c>)
 8000b54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b56:	4b1d      	ldr	r3, [pc, #116]	@ (8000bcc <MX_TIM1_Init+0x98>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b5c:	4b1b      	ldr	r3, [pc, #108]	@ (8000bcc <MX_TIM1_Init+0x98>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b62:	4b1a      	ldr	r3, [pc, #104]	@ (8000bcc <MX_TIM1_Init+0x98>)
 8000b64:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b68:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b6a:	4b18      	ldr	r3, [pc, #96]	@ (8000bcc <MX_TIM1_Init+0x98>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b70:	4b16      	ldr	r3, [pc, #88]	@ (8000bcc <MX_TIM1_Init+0x98>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b76:	4b15      	ldr	r3, [pc, #84]	@ (8000bcc <MX_TIM1_Init+0x98>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b7c:	4813      	ldr	r0, [pc, #76]	@ (8000bcc <MX_TIM1_Init+0x98>)
 8000b7e:	f005 fbe1 	bl	8006344 <HAL_TIM_Base_Init>
 8000b82:	4603      	mov	r3, r0
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d001      	beq.n	8000b8c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000b88:	f000 fa10 	bl	8000fac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b90:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b92:	f107 0308 	add.w	r3, r7, #8
 8000b96:	4619      	mov	r1, r3
 8000b98:	480c      	ldr	r0, [pc, #48]	@ (8000bcc <MX_TIM1_Init+0x98>)
 8000b9a:	f005 fd83 	bl	80066a4 <HAL_TIM_ConfigClockSource>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000ba4:	f000 fa02 	bl	8000fac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ba8:	2300      	movs	r3, #0
 8000baa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bac:	2300      	movs	r3, #0
 8000bae:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bb0:	463b      	mov	r3, r7
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	4805      	ldr	r0, [pc, #20]	@ (8000bcc <MX_TIM1_Init+0x98>)
 8000bb6:	f005 ffab 	bl	8006b10 <HAL_TIMEx_MasterConfigSynchronization>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d001      	beq.n	8000bc4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000bc0:	f000 f9f4 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bc4:	bf00      	nop
 8000bc6:	3718      	adds	r7, #24
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	200001c8 	.word	0x200001c8
 8000bd0:	40010000 	.word	0x40010000

08000bd4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bd8:	4b11      	ldr	r3, [pc, #68]	@ (8000c20 <MX_USART1_UART_Init+0x4c>)
 8000bda:	4a12      	ldr	r2, [pc, #72]	@ (8000c24 <MX_USART1_UART_Init+0x50>)
 8000bdc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bde:	4b10      	ldr	r3, [pc, #64]	@ (8000c20 <MX_USART1_UART_Init+0x4c>)
 8000be0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000be4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000be6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c20 <MX_USART1_UART_Init+0x4c>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bec:	4b0c      	ldr	r3, [pc, #48]	@ (8000c20 <MX_USART1_UART_Init+0x4c>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bf2:	4b0b      	ldr	r3, [pc, #44]	@ (8000c20 <MX_USART1_UART_Init+0x4c>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bf8:	4b09      	ldr	r3, [pc, #36]	@ (8000c20 <MX_USART1_UART_Init+0x4c>)
 8000bfa:	220c      	movs	r2, #12
 8000bfc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bfe:	4b08      	ldr	r3, [pc, #32]	@ (8000c20 <MX_USART1_UART_Init+0x4c>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c04:	4b06      	ldr	r3, [pc, #24]	@ (8000c20 <MX_USART1_UART_Init+0x4c>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c0a:	4805      	ldr	r0, [pc, #20]	@ (8000c20 <MX_USART1_UART_Init+0x4c>)
 8000c0c:	f006 f810 	bl	8006c30 <HAL_UART_Init>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c16:	f000 f9c9 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	20000210 	.word	0x20000210
 8000c24:	40011000 	.word	0x40011000

08000c28 <MX_USB_OTG_HS_HCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_HCD_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000c2c:	4b12      	ldr	r3, [pc, #72]	@ (8000c78 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000c2e:	4a13      	ldr	r2, [pc, #76]	@ (8000c7c <MX_USB_OTG_HS_HCD_Init+0x54>)
 8000c30:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8000c32:	4b11      	ldr	r3, [pc, #68]	@ (8000c78 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000c34:	220c      	movs	r2, #12
 8000c36:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8000c38:	4b0f      	ldr	r3, [pc, #60]	@ (8000c78 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000c3e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c78 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8000c44:	4b0c      	ldr	r3, [pc, #48]	@ (8000c78 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000c46:	2202      	movs	r2, #2
 8000c48:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000c4a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c78 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000c50:	4b09      	ldr	r3, [pc, #36]	@ (8000c78 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000c56:	4b08      	ldr	r3, [pc, #32]	@ (8000c78 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000c5c:	4b06      	ldr	r3, [pc, #24]	@ (8000c78 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8000c62:	4805      	ldr	r0, [pc, #20]	@ (8000c78 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000c64:	f001 fb85 	bl	8002372 <HAL_HCD_Init>
 8000c68:	4603      	mov	r3, r0
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_USB_OTG_HS_HCD_Init+0x4a>
  {
    Error_Handler();
 8000c6e:	f000 f99d 	bl	8000fac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000258 	.word	0x20000258
 8000c7c:	40040000 	.word	0x40040000

08000c80 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b088      	sub	sp, #32
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000c86:	1d3b      	adds	r3, r7, #4
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
 8000c8c:	605a      	str	r2, [r3, #4]
 8000c8e:	609a      	str	r2, [r3, #8]
 8000c90:	60da      	str	r2, [r3, #12]
 8000c92:	611a      	str	r2, [r3, #16]
 8000c94:	615a      	str	r2, [r3, #20]
 8000c96:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000c98:	4b1f      	ldr	r3, [pc, #124]	@ (8000d18 <MX_FMC_Init+0x98>)
 8000c9a:	4a20      	ldr	r2, [pc, #128]	@ (8000d1c <MX_FMC_Init+0x9c>)
 8000c9c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8000d18 <MX_FMC_Init+0x98>)
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000ca4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d18 <MX_FMC_Init+0x98>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8000caa:	4b1b      	ldr	r3, [pc, #108]	@ (8000d18 <MX_FMC_Init+0x98>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000cb0:	4b19      	ldr	r3, [pc, #100]	@ (8000d18 <MX_FMC_Init+0x98>)
 8000cb2:	2210      	movs	r2, #16
 8000cb4:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000cb6:	4b18      	ldr	r3, [pc, #96]	@ (8000d18 <MX_FMC_Init+0x98>)
 8000cb8:	2240      	movs	r2, #64	@ 0x40
 8000cba:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000cbc:	4b16      	ldr	r3, [pc, #88]	@ (8000d18 <MX_FMC_Init+0x98>)
 8000cbe:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000cc2:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000cc4:	4b14      	ldr	r3, [pc, #80]	@ (8000d18 <MX_FMC_Init+0x98>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000cca:	4b13      	ldr	r3, [pc, #76]	@ (8000d18 <MX_FMC_Init+0x98>)
 8000ccc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000cd0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000cd2:	4b11      	ldr	r3, [pc, #68]	@ (8000d18 <MX_FMC_Init+0x98>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000cd8:	4b0f      	ldr	r3, [pc, #60]	@ (8000d18 <MX_FMC_Init+0x98>)
 8000cda:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cde:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000ce4:	2307      	movs	r3, #7
 8000ce6:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000ce8:	2304      	movs	r3, #4
 8000cea:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000cec:	2307      	movs	r3, #7
 8000cee:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000cf0:	2303      	movs	r3, #3
 8000cf2:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000cf4:	2302      	movs	r3, #2
 8000cf6:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4805      	ldr	r0, [pc, #20]	@ (8000d18 <MX_FMC_Init+0x98>)
 8000d02:	f004 fd19 	bl	8005738 <HAL_SDRAM_Init>
 8000d06:	4603      	mov	r3, r0
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d001      	beq.n	8000d10 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000d0c:	f000 f94e 	bl	8000fac <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000d10:	bf00      	nop
 8000d12:	3720      	adds	r7, #32
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000638 	.word	0x20000638
 8000d1c:	a0000140 	.word	0xa0000140

08000d20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08e      	sub	sp, #56	@ 0x38
 8000d24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
 8000d34:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	623b      	str	r3, [r7, #32]
 8000d3a:	4b8b      	ldr	r3, [pc, #556]	@ (8000f68 <MX_GPIO_Init+0x248>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	4a8a      	ldr	r2, [pc, #552]	@ (8000f68 <MX_GPIO_Init+0x248>)
 8000d40:	f043 0310 	orr.w	r3, r3, #16
 8000d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d46:	4b88      	ldr	r3, [pc, #544]	@ (8000f68 <MX_GPIO_Init+0x248>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	f003 0310 	and.w	r3, r3, #16
 8000d4e:	623b      	str	r3, [r7, #32]
 8000d50:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
 8000d56:	4b84      	ldr	r3, [pc, #528]	@ (8000f68 <MX_GPIO_Init+0x248>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	4a83      	ldr	r2, [pc, #524]	@ (8000f68 <MX_GPIO_Init+0x248>)
 8000d5c:	f043 0304 	orr.w	r3, r3, #4
 8000d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d62:	4b81      	ldr	r3, [pc, #516]	@ (8000f68 <MX_GPIO_Init+0x248>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	f003 0304 	and.w	r3, r3, #4
 8000d6a:	61fb      	str	r3, [r7, #28]
 8000d6c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d6e:	2300      	movs	r3, #0
 8000d70:	61bb      	str	r3, [r7, #24]
 8000d72:	4b7d      	ldr	r3, [pc, #500]	@ (8000f68 <MX_GPIO_Init+0x248>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	4a7c      	ldr	r2, [pc, #496]	@ (8000f68 <MX_GPIO_Init+0x248>)
 8000d78:	f043 0320 	orr.w	r3, r3, #32
 8000d7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7e:	4b7a      	ldr	r3, [pc, #488]	@ (8000f68 <MX_GPIO_Init+0x248>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d82:	f003 0320 	and.w	r3, r3, #32
 8000d86:	61bb      	str	r3, [r7, #24]
 8000d88:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	4b76      	ldr	r3, [pc, #472]	@ (8000f68 <MX_GPIO_Init+0x248>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	4a75      	ldr	r2, [pc, #468]	@ (8000f68 <MX_GPIO_Init+0x248>)
 8000d94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d9a:	4b73      	ldr	r3, [pc, #460]	@ (8000f68 <MX_GPIO_Init+0x248>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000da2:	617b      	str	r3, [r7, #20]
 8000da4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	613b      	str	r3, [r7, #16]
 8000daa:	4b6f      	ldr	r3, [pc, #444]	@ (8000f68 <MX_GPIO_Init+0x248>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	4a6e      	ldr	r2, [pc, #440]	@ (8000f68 <MX_GPIO_Init+0x248>)
 8000db0:	f043 0301 	orr.w	r3, r3, #1
 8000db4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db6:	4b6c      	ldr	r3, [pc, #432]	@ (8000f68 <MX_GPIO_Init+0x248>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	613b      	str	r3, [r7, #16]
 8000dc0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	60fb      	str	r3, [r7, #12]
 8000dc6:	4b68      	ldr	r3, [pc, #416]	@ (8000f68 <MX_GPIO_Init+0x248>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	4a67      	ldr	r2, [pc, #412]	@ (8000f68 <MX_GPIO_Init+0x248>)
 8000dcc:	f043 0302 	orr.w	r3, r3, #2
 8000dd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dd2:	4b65      	ldr	r3, [pc, #404]	@ (8000f68 <MX_GPIO_Init+0x248>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd6:	f003 0302 	and.w	r3, r3, #2
 8000dda:	60fb      	str	r3, [r7, #12]
 8000ddc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dde:	2300      	movs	r3, #0
 8000de0:	60bb      	str	r3, [r7, #8]
 8000de2:	4b61      	ldr	r3, [pc, #388]	@ (8000f68 <MX_GPIO_Init+0x248>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	4a60      	ldr	r2, [pc, #384]	@ (8000f68 <MX_GPIO_Init+0x248>)
 8000de8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000dec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dee:	4b5e      	ldr	r3, [pc, #376]	@ (8000f68 <MX_GPIO_Init+0x248>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000df6:	60bb      	str	r3, [r7, #8]
 8000df8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	607b      	str	r3, [r7, #4]
 8000dfe:	4b5a      	ldr	r3, [pc, #360]	@ (8000f68 <MX_GPIO_Init+0x248>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e02:	4a59      	ldr	r2, [pc, #356]	@ (8000f68 <MX_GPIO_Init+0x248>)
 8000e04:	f043 0308 	orr.w	r3, r3, #8
 8000e08:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0a:	4b57      	ldr	r3, [pc, #348]	@ (8000f68 <MX_GPIO_Init+0x248>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e0e:	f003 0308 	and.w	r3, r3, #8
 8000e12:	607b      	str	r3, [r7, #4]
 8000e14:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_11|GPIO_PIN_13, GPIO_PIN_RESET);
 8000e16:	2200      	movs	r2, #0
 8000e18:	f44f 5121 	mov.w	r1, #10304	@ 0x2840
 8000e1c:	4853      	ldr	r0, [pc, #332]	@ (8000f6c <MX_GPIO_Init+0x24c>)
 8000e1e:	f001 fa8f 	bl	8002340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|GPIO_PIN_3|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	211e      	movs	r1, #30
 8000e26:	4852      	ldr	r0, [pc, #328]	@ (8000f70 <MX_GPIO_Init+0x250>)
 8000e28:	f001 fa8a 	bl	8002340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	2180      	movs	r1, #128	@ 0x80
 8000e30:	4850      	ldr	r0, [pc, #320]	@ (8000f74 <MX_GPIO_Init+0x254>)
 8000e32:	f001 fa85 	bl	8002340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000e36:	2200      	movs	r2, #0
 8000e38:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000e3c:	484e      	ldr	r0, [pc, #312]	@ (8000f78 <MX_GPIO_Init+0x258>)
 8000e3e:	f001 fa7f 	bl	8002340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000e42:	2200      	movs	r2, #0
 8000e44:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000e48:	484c      	ldr	r0, [pc, #304]	@ (8000f7c <MX_GPIO_Init+0x25c>)
 8000e4a:	f001 fa79 	bl	8002340 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e4e:	2308      	movs	r3, #8
 8000e50:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e52:	2303      	movs	r3, #3
 8000e54:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e56:	2300      	movs	r3, #0
 8000e58:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000e5a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4847      	ldr	r0, [pc, #284]	@ (8000f80 <MX_GPIO_Init+0x260>)
 8000e62:	f001 f8c1 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF11 PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_11|GPIO_PIN_13;
 8000e66:	f44f 5321 	mov.w	r3, #10304	@ 0x2840
 8000e6a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e74:	2300      	movs	r3, #0
 8000e76:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e7c:	4619      	mov	r1, r3
 8000e7e:	483b      	ldr	r0, [pc, #236]	@ (8000f6c <MX_GPIO_Init+0x24c>)
 8000e80:	f001 f8b2 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin PC3 OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|GPIO_PIN_3|OTG_FS_PSO_Pin;
 8000e84:	231e      	movs	r3, #30
 8000e86:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e88:	2301      	movs	r3, #1
 8000e8a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e90:	2300      	movs	r3, #0
 8000e92:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e98:	4619      	mov	r1, r3
 8000e9a:	4835      	ldr	r0, [pc, #212]	@ (8000f70 <MX_GPIO_Init+0x250>)
 8000e9c:	f001 f8a4 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000ea0:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000ea4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ea6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eac:	2300      	movs	r3, #0
 8000eae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eb0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	482f      	ldr	r0, [pc, #188]	@ (8000f74 <MX_GPIO_Init+0x254>)
 8000eb8:	f001 f896 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000ebc:	2380      	movs	r3, #128	@ 0x80
 8000ebe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ec0:	2301      	movs	r3, #1
 8000ec2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000ecc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ed0:	4619      	mov	r1, r3
 8000ed2:	4828      	ldr	r0, [pc, #160]	@ (8000f74 <MX_GPIO_Init+0x254>)
 8000ed4:	f001 f888 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000ed8:	2320      	movs	r3, #32
 8000eda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000edc:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000ee6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000eea:	4619      	mov	r1, r3
 8000eec:	4820      	ldr	r0, [pc, #128]	@ (8000f70 <MX_GPIO_Init+0x250>)
 8000eee:	f001 f87b 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ef2:	2304      	movs	r3, #4
 8000ef4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efa:	2300      	movs	r3, #0
 8000efc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000efe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f02:	4619      	mov	r1, r3
 8000f04:	481f      	ldr	r0, [pc, #124]	@ (8000f84 <MX_GPIO_Init+0x264>)
 8000f06:	f001 f86f 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000f0a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f10:	2300      	movs	r3, #0
 8000f12:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000f18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4816      	ldr	r0, [pc, #88]	@ (8000f78 <MX_GPIO_Init+0x258>)
 8000f20:	f001 f862 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000f24:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000f28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f2a:	2301      	movs	r3, #1
 8000f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f32:	2300      	movs	r3, #0
 8000f34:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	480e      	ldr	r0, [pc, #56]	@ (8000f78 <MX_GPIO_Init+0x258>)
 8000f3e:	f001 f853 	bl	8001fe8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000f42:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000f46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f48:	2301      	movs	r3, #1
 8000f4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f50:	2300      	movs	r3, #0
 8000f52:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f58:	4619      	mov	r1, r3
 8000f5a:	4808      	ldr	r0, [pc, #32]	@ (8000f7c <MX_GPIO_Init+0x25c>)
 8000f5c:	f001 f844 	bl	8001fe8 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f60:	bf00      	nop
 8000f62:	3738      	adds	r7, #56	@ 0x38
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40021400 	.word	0x40021400
 8000f70:	40020800 	.word	0x40020800
 8000f74:	40020000 	.word	0x40020000
 8000f78:	40020c00 	.word	0x40020c00
 8000f7c:	40021800 	.word	0x40021800
 8000f80:	40021000 	.word	0x40021000
 8000f84:	40020400 	.word	0x40020400

08000f88 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a04      	ldr	r2, [pc, #16]	@ (8000fa8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d101      	bne.n	8000f9e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000f9a:	f000 fcf7 	bl	800198c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40001000 	.word	0x40001000

08000fac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fb0:	b672      	cpsid	i
}
 8000fb2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000fb4:	bf00      	nop
 8000fb6:	e7fd      	b.n	8000fb4 <Error_Handler+0x8>

08000fb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	4b10      	ldr	r3, [pc, #64]	@ (8001004 <HAL_MspInit+0x4c>)
 8000fc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fc6:	4a0f      	ldr	r2, [pc, #60]	@ (8001004 <HAL_MspInit+0x4c>)
 8000fc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fce:	4b0d      	ldr	r3, [pc, #52]	@ (8001004 <HAL_MspInit+0x4c>)
 8000fd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	603b      	str	r3, [r7, #0]
 8000fde:	4b09      	ldr	r3, [pc, #36]	@ (8001004 <HAL_MspInit+0x4c>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe2:	4a08      	ldr	r2, [pc, #32]	@ (8001004 <HAL_MspInit+0x4c>)
 8000fe4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fe8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fea:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <HAL_MspInit+0x4c>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ff2:	603b      	str	r3, [r7, #0]
 8000ff4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ff6:	bf00      	nop
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	40023800 	.word	0x40023800

08001008 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001008:	b480      	push	{r7}
 800100a:	b085      	sub	sp, #20
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a0b      	ldr	r2, [pc, #44]	@ (8001044 <HAL_CRC_MspInit+0x3c>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d10d      	bne.n	8001036 <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	60fb      	str	r3, [r7, #12]
 800101e:	4b0a      	ldr	r3, [pc, #40]	@ (8001048 <HAL_CRC_MspInit+0x40>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	4a09      	ldr	r2, [pc, #36]	@ (8001048 <HAL_CRC_MspInit+0x40>)
 8001024:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001028:	6313      	str	r3, [r2, #48]	@ 0x30
 800102a:	4b07      	ldr	r3, [pc, #28]	@ (8001048 <HAL_CRC_MspInit+0x40>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8001036:	bf00      	nop
 8001038:	3714      	adds	r7, #20
 800103a:	46bd      	mov	sp, r7
 800103c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001040:	4770      	bx	lr
 8001042:	bf00      	nop
 8001044:	40023000 	.word	0x40023000
 8001048:	40023800 	.word	0x40023800

0800104c <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a0e      	ldr	r2, [pc, #56]	@ (8001094 <HAL_DMA2D_MspInit+0x48>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d115      	bne.n	800108a <HAL_DMA2D_MspInit+0x3e>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	4b0d      	ldr	r3, [pc, #52]	@ (8001098 <HAL_DMA2D_MspInit+0x4c>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	4a0c      	ldr	r2, [pc, #48]	@ (8001098 <HAL_DMA2D_MspInit+0x4c>)
 8001068:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800106c:	6313      	str	r3, [r2, #48]	@ 0x30
 800106e:	4b0a      	ldr	r3, [pc, #40]	@ (8001098 <HAL_DMA2D_MspInit+0x4c>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001076:	60fb      	str	r3, [r7, #12]
 8001078:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2105      	movs	r1, #5
 800107e:	205a      	movs	r0, #90	@ 0x5a
 8001080:	f000 fd80 	bl	8001b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001084:	205a      	movs	r0, #90	@ 0x5a
 8001086:	f000 fd99 	bl	8001bbc <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800108a:	bf00      	nop
 800108c:	3710      	adds	r7, #16
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	4002b000 	.word	0x4002b000
 8001098:	40023800 	.word	0x40023800

0800109c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	@ 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a29      	ldr	r2, [pc, #164]	@ (8001160 <HAL_I2C_MspInit+0xc4>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d14b      	bne.n	8001156 <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b28      	ldr	r3, [pc, #160]	@ (8001164 <HAL_I2C_MspInit+0xc8>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010c6:	4a27      	ldr	r2, [pc, #156]	@ (8001164 <HAL_I2C_MspInit+0xc8>)
 80010c8:	f043 0304 	orr.w	r3, r3, #4
 80010cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ce:	4b25      	ldr	r3, [pc, #148]	@ (8001164 <HAL_I2C_MspInit+0xc8>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010d2:	f003 0304 	and.w	r3, r3, #4
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b21      	ldr	r3, [pc, #132]	@ (8001164 <HAL_I2C_MspInit+0xc8>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	4a20      	ldr	r2, [pc, #128]	@ (8001164 <HAL_I2C_MspInit+0xc8>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ea:	4b1e      	ldr	r3, [pc, #120]	@ (8001164 <HAL_I2C_MspInit+0xc8>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80010f6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010fc:	2312      	movs	r3, #18
 80010fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001100:	2301      	movs	r3, #1
 8001102:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001104:	2300      	movs	r3, #0
 8001106:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001108:	2304      	movs	r3, #4
 800110a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 800110c:	f107 0314 	add.w	r3, r7, #20
 8001110:	4619      	mov	r1, r3
 8001112:	4815      	ldr	r0, [pc, #84]	@ (8001168 <HAL_I2C_MspInit+0xcc>)
 8001114:	f000 ff68 	bl	8001fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001118:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800111c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800111e:	2312      	movs	r3, #18
 8001120:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001122:	2301      	movs	r3, #1
 8001124:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001126:	2300      	movs	r3, #0
 8001128:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800112a:	2304      	movs	r3, #4
 800112c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4619      	mov	r1, r3
 8001134:	480d      	ldr	r0, [pc, #52]	@ (800116c <HAL_I2C_MspInit+0xd0>)
 8001136:	f000 ff57 	bl	8001fe8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	60bb      	str	r3, [r7, #8]
 800113e:	4b09      	ldr	r3, [pc, #36]	@ (8001164 <HAL_I2C_MspInit+0xc8>)
 8001140:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001142:	4a08      	ldr	r2, [pc, #32]	@ (8001164 <HAL_I2C_MspInit+0xc8>)
 8001144:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001148:	6413      	str	r3, [r2, #64]	@ 0x40
 800114a:	4b06      	ldr	r3, [pc, #24]	@ (8001164 <HAL_I2C_MspInit+0xc8>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800114e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001152:	60bb      	str	r3, [r7, #8]
 8001154:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8001156:	bf00      	nop
 8001158:	3728      	adds	r7, #40	@ 0x28
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	40005c00 	.word	0x40005c00
 8001164:	40023800 	.word	0x40023800
 8001168:	40020800 	.word	0x40020800
 800116c:	40020000 	.word	0x40020000

08001170 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b09a      	sub	sp, #104	@ 0x68
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001178:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800117c:	2200      	movs	r2, #0
 800117e:	601a      	str	r2, [r3, #0]
 8001180:	605a      	str	r2, [r3, #4]
 8001182:	609a      	str	r2, [r3, #8]
 8001184:	60da      	str	r2, [r3, #12]
 8001186:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001188:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800118c:	2230      	movs	r2, #48	@ 0x30
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f006 fcf5 	bl	8007b80 <memset>
  if(hltdc->Instance==LTDC)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	4a85      	ldr	r2, [pc, #532]	@ (80013b0 <HAL_LTDC_MspInit+0x240>)
 800119c:	4293      	cmp	r3, r2
 800119e:	f040 8102 	bne.w	80013a6 <HAL_LTDC_MspInit+0x236>

    /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80011a2:	2308      	movs	r3, #8
 80011a4:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 80011a6:	2332      	movs	r3, #50	@ 0x32
 80011a8:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 80011aa:	2302      	movs	r3, #2
 80011ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 80011ae:	2300      	movs	r3, #0
 80011b0:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011b6:	4618      	mov	r0, r3
 80011b8:	f004 f8fe 	bl	80053b8 <HAL_RCCEx_PeriphCLKConfig>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 80011c2:	f7ff fef3 	bl	8000fac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	623b      	str	r3, [r7, #32]
 80011ca:	4b7a      	ldr	r3, [pc, #488]	@ (80013b4 <HAL_LTDC_MspInit+0x244>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ce:	4a79      	ldr	r2, [pc, #484]	@ (80013b4 <HAL_LTDC_MspInit+0x244>)
 80011d0:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80011d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011d6:	4b77      	ldr	r3, [pc, #476]	@ (80013b4 <HAL_LTDC_MspInit+0x244>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011da:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80011de:	623b      	str	r3, [r7, #32]
 80011e0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011e2:	2300      	movs	r3, #0
 80011e4:	61fb      	str	r3, [r7, #28]
 80011e6:	4b73      	ldr	r3, [pc, #460]	@ (80013b4 <HAL_LTDC_MspInit+0x244>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	4a72      	ldr	r2, [pc, #456]	@ (80013b4 <HAL_LTDC_MspInit+0x244>)
 80011ec:	f043 0320 	orr.w	r3, r3, #32
 80011f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011f2:	4b70      	ldr	r3, [pc, #448]	@ (80013b4 <HAL_LTDC_MspInit+0x244>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	f003 0320 	and.w	r3, r3, #32
 80011fa:	61fb      	str	r3, [r7, #28]
 80011fc:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	61bb      	str	r3, [r7, #24]
 8001202:	4b6c      	ldr	r3, [pc, #432]	@ (80013b4 <HAL_LTDC_MspInit+0x244>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	4a6b      	ldr	r2, [pc, #428]	@ (80013b4 <HAL_LTDC_MspInit+0x244>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6313      	str	r3, [r2, #48]	@ 0x30
 800120e:	4b69      	ldr	r3, [pc, #420]	@ (80013b4 <HAL_LTDC_MspInit+0x244>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	f003 0301 	and.w	r3, r3, #1
 8001216:	61bb      	str	r3, [r7, #24]
 8001218:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	617b      	str	r3, [r7, #20]
 800121e:	4b65      	ldr	r3, [pc, #404]	@ (80013b4 <HAL_LTDC_MspInit+0x244>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	4a64      	ldr	r2, [pc, #400]	@ (80013b4 <HAL_LTDC_MspInit+0x244>)
 8001224:	f043 0302 	orr.w	r3, r3, #2
 8001228:	6313      	str	r3, [r2, #48]	@ 0x30
 800122a:	4b62      	ldr	r3, [pc, #392]	@ (80013b4 <HAL_LTDC_MspInit+0x244>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	617b      	str	r3, [r7, #20]
 8001234:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001236:	2300      	movs	r3, #0
 8001238:	613b      	str	r3, [r7, #16]
 800123a:	4b5e      	ldr	r3, [pc, #376]	@ (80013b4 <HAL_LTDC_MspInit+0x244>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123e:	4a5d      	ldr	r2, [pc, #372]	@ (80013b4 <HAL_LTDC_MspInit+0x244>)
 8001240:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001244:	6313      	str	r3, [r2, #48]	@ 0x30
 8001246:	4b5b      	ldr	r3, [pc, #364]	@ (80013b4 <HAL_LTDC_MspInit+0x244>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800124e:	613b      	str	r3, [r7, #16]
 8001250:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	4b57      	ldr	r3, [pc, #348]	@ (80013b4 <HAL_LTDC_MspInit+0x244>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800125a:	4a56      	ldr	r2, [pc, #344]	@ (80013b4 <HAL_LTDC_MspInit+0x244>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	6313      	str	r3, [r2, #48]	@ 0x30
 8001262:	4b54      	ldr	r3, [pc, #336]	@ (80013b4 <HAL_LTDC_MspInit+0x244>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	60fb      	str	r3, [r7, #12]
 800126c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800126e:	2300      	movs	r3, #0
 8001270:	60bb      	str	r3, [r7, #8]
 8001272:	4b50      	ldr	r3, [pc, #320]	@ (80013b4 <HAL_LTDC_MspInit+0x244>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001276:	4a4f      	ldr	r2, [pc, #316]	@ (80013b4 <HAL_LTDC_MspInit+0x244>)
 8001278:	f043 0308 	orr.w	r3, r3, #8
 800127c:	6313      	str	r3, [r2, #48]	@ 0x30
 800127e:	4b4d      	ldr	r3, [pc, #308]	@ (80013b4 <HAL_LTDC_MspInit+0x244>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	f003 0308 	and.w	r3, r3, #8
 8001286:	60bb      	str	r3, [r7, #8]
 8001288:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800128a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800128e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001290:	2302      	movs	r3, #2
 8001292:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001298:	2300      	movs	r3, #0
 800129a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800129c:	230e      	movs	r3, #14
 800129e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80012a0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012a4:	4619      	mov	r1, r3
 80012a6:	4844      	ldr	r0, [pc, #272]	@ (80013b8 <HAL_LTDC_MspInit+0x248>)
 80012a8:	f000 fe9e 	bl	8001fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80012ac:	f641 0358 	movw	r3, #6232	@ 0x1858
 80012b0:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2300      	movs	r3, #0
 80012bc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012be:	230e      	movs	r3, #14
 80012c0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012c6:	4619      	mov	r1, r3
 80012c8:	483c      	ldr	r0, [pc, #240]	@ (80013bc <HAL_LTDC_MspInit+0x24c>)
 80012ca:	f000 fe8d 	bl	8001fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80012ce:	2303      	movs	r3, #3
 80012d0:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d2:	2302      	movs	r3, #2
 80012d4:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d6:	2300      	movs	r3, #0
 80012d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012da:	2300      	movs	r3, #0
 80012dc:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80012de:	2309      	movs	r3, #9
 80012e0:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012e6:	4619      	mov	r1, r3
 80012e8:	4835      	ldr	r0, [pc, #212]	@ (80013c0 <HAL_LTDC_MspInit+0x250>)
 80012ea:	f000 fe7d 	bl	8001fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80012ee:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80012f2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2302      	movs	r3, #2
 80012f6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f8:	2300      	movs	r3, #0
 80012fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012fc:	2300      	movs	r3, #0
 80012fe:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001300:	230e      	movs	r3, #14
 8001302:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001304:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001308:	4619      	mov	r1, r3
 800130a:	482d      	ldr	r0, [pc, #180]	@ (80013c0 <HAL_LTDC_MspInit+0x250>)
 800130c:	f000 fe6c 	bl	8001fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8001310:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001314:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001316:	2302      	movs	r3, #2
 8001318:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131a:	2300      	movs	r3, #0
 800131c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800131e:	2300      	movs	r3, #0
 8001320:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001322:	230e      	movs	r3, #14
 8001324:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001326:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800132a:	4619      	mov	r1, r3
 800132c:	4825      	ldr	r0, [pc, #148]	@ (80013c4 <HAL_LTDC_MspInit+0x254>)
 800132e:	f000 fe5b 	bl	8001fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001332:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001336:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001338:	2302      	movs	r3, #2
 800133a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133c:	2300      	movs	r3, #0
 800133e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001340:	2300      	movs	r3, #0
 8001342:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001344:	230e      	movs	r3, #14
 8001346:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001348:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800134c:	4619      	mov	r1, r3
 800134e:	481e      	ldr	r0, [pc, #120]	@ (80013c8 <HAL_LTDC_MspInit+0x258>)
 8001350:	f000 fe4a 	bl	8001fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001354:	2348      	movs	r3, #72	@ 0x48
 8001356:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	2302      	movs	r3, #2
 800135a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	2300      	movs	r3, #0
 8001362:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001364:	230e      	movs	r3, #14
 8001366:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001368:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800136c:	4619      	mov	r1, r3
 800136e:	4817      	ldr	r0, [pc, #92]	@ (80013cc <HAL_LTDC_MspInit+0x25c>)
 8001370:	f000 fe3a 	bl	8001fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001374:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001378:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800137a:	2302      	movs	r3, #2
 800137c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137e:	2300      	movs	r3, #0
 8001380:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001382:	2300      	movs	r3, #0
 8001384:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001386:	2309      	movs	r3, #9
 8001388:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800138a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800138e:	4619      	mov	r1, r3
 8001390:	480c      	ldr	r0, [pc, #48]	@ (80013c4 <HAL_LTDC_MspInit+0x254>)
 8001392:	f000 fe29 	bl	8001fe8 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001396:	2200      	movs	r2, #0
 8001398:	2105      	movs	r1, #5
 800139a:	2058      	movs	r0, #88	@ 0x58
 800139c:	f000 fbf2 	bl	8001b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80013a0:	2058      	movs	r0, #88	@ 0x58
 80013a2:	f000 fc0b 	bl	8001bbc <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 80013a6:	bf00      	nop
 80013a8:	3768      	adds	r7, #104	@ 0x68
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	40016800 	.word	0x40016800
 80013b4:	40023800 	.word	0x40023800
 80013b8:	40021400 	.word	0x40021400
 80013bc:	40020000 	.word	0x40020000
 80013c0:	40020400 	.word	0x40020400
 80013c4:	40021800 	.word	0x40021800
 80013c8:	40020800 	.word	0x40020800
 80013cc:	40020c00 	.word	0x40020c00

080013d0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08a      	sub	sp, #40	@ 0x28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d8:	f107 0314 	add.w	r3, r7, #20
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
 80013e0:	605a      	str	r2, [r3, #4]
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	60da      	str	r2, [r3, #12]
 80013e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a19      	ldr	r2, [pc, #100]	@ (8001454 <HAL_SPI_MspInit+0x84>)
 80013ee:	4293      	cmp	r3, r2
 80013f0:	d12c      	bne.n	800144c <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI5_MspInit 0 */

    /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	613b      	str	r3, [r7, #16]
 80013f6:	4b18      	ldr	r3, [pc, #96]	@ (8001458 <HAL_SPI_MspInit+0x88>)
 80013f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013fa:	4a17      	ldr	r2, [pc, #92]	@ (8001458 <HAL_SPI_MspInit+0x88>)
 80013fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001400:	6453      	str	r3, [r2, #68]	@ 0x44
 8001402:	4b15      	ldr	r3, [pc, #84]	@ (8001458 <HAL_SPI_MspInit+0x88>)
 8001404:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001406:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800140a:	613b      	str	r3, [r7, #16]
 800140c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	60fb      	str	r3, [r7, #12]
 8001412:	4b11      	ldr	r3, [pc, #68]	@ (8001458 <HAL_SPI_MspInit+0x88>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	4a10      	ldr	r2, [pc, #64]	@ (8001458 <HAL_SPI_MspInit+0x88>)
 8001418:	f043 0320 	orr.w	r3, r3, #32
 800141c:	6313      	str	r3, [r2, #48]	@ 0x30
 800141e:	4b0e      	ldr	r3, [pc, #56]	@ (8001458 <HAL_SPI_MspInit+0x88>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	f003 0320 	and.w	r3, r3, #32
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800142a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800142e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001430:	2302      	movs	r3, #2
 8001432:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001434:	2300      	movs	r3, #0
 8001436:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001438:	2300      	movs	r3, #0
 800143a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800143c:	2305      	movs	r3, #5
 800143e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001440:	f107 0314 	add.w	r3, r7, #20
 8001444:	4619      	mov	r1, r3
 8001446:	4805      	ldr	r0, [pc, #20]	@ (800145c <HAL_SPI_MspInit+0x8c>)
 8001448:	f000 fdce 	bl	8001fe8 <HAL_GPIO_Init>

    /* USER CODE END SPI5_MspInit 1 */

  }

}
 800144c:	bf00      	nop
 800144e:	3728      	adds	r7, #40	@ 0x28
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40015000 	.word	0x40015000
 8001458:	40023800 	.word	0x40023800
 800145c:	40021400 	.word	0x40021400

08001460 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a0b      	ldr	r2, [pc, #44]	@ (800149c <HAL_TIM_Base_MspInit+0x3c>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d10d      	bne.n	800148e <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b0a      	ldr	r3, [pc, #40]	@ (80014a0 <HAL_TIM_Base_MspInit+0x40>)
 8001478:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147a:	4a09      	ldr	r2, [pc, #36]	@ (80014a0 <HAL_TIM_Base_MspInit+0x40>)
 800147c:	f043 0301 	orr.w	r3, r3, #1
 8001480:	6453      	str	r3, [r2, #68]	@ 0x44
 8001482:	4b07      	ldr	r3, [pc, #28]	@ (80014a0 <HAL_TIM_Base_MspInit+0x40>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800148e:	bf00      	nop
 8001490:	3714      	adds	r7, #20
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr
 800149a:	bf00      	nop
 800149c:	40010000 	.word	0x40010000
 80014a0:	40023800 	.word	0x40023800

080014a4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08a      	sub	sp, #40	@ 0x28
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a19      	ldr	r2, [pc, #100]	@ (8001528 <HAL_UART_MspInit+0x84>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d12c      	bne.n	8001520 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	4b18      	ldr	r3, [pc, #96]	@ (800152c <HAL_UART_MspInit+0x88>)
 80014cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014ce:	4a17      	ldr	r2, [pc, #92]	@ (800152c <HAL_UART_MspInit+0x88>)
 80014d0:	f043 0310 	orr.w	r3, r3, #16
 80014d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80014d6:	4b15      	ldr	r3, [pc, #84]	@ (800152c <HAL_UART_MspInit+0x88>)
 80014d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014da:	f003 0310 	and.w	r3, r3, #16
 80014de:	613b      	str	r3, [r7, #16]
 80014e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014e2:	2300      	movs	r3, #0
 80014e4:	60fb      	str	r3, [r7, #12]
 80014e6:	4b11      	ldr	r3, [pc, #68]	@ (800152c <HAL_UART_MspInit+0x88>)
 80014e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ea:	4a10      	ldr	r2, [pc, #64]	@ (800152c <HAL_UART_MspInit+0x88>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014f2:	4b0e      	ldr	r3, [pc, #56]	@ (800152c <HAL_UART_MspInit+0x88>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	60fb      	str	r3, [r7, #12]
 80014fc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80014fe:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001502:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001504:	2302      	movs	r3, #2
 8001506:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001508:	2300      	movs	r3, #0
 800150a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800150c:	2303      	movs	r3, #3
 800150e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001510:	2307      	movs	r3, #7
 8001512:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4619      	mov	r1, r3
 800151a:	4805      	ldr	r0, [pc, #20]	@ (8001530 <HAL_UART_MspInit+0x8c>)
 800151c:	f000 fd64 	bl	8001fe8 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001520:	bf00      	nop
 8001522:	3728      	adds	r7, #40	@ 0x28
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}
 8001528:	40011000 	.word	0x40011000
 800152c:	40023800 	.word	0x40023800
 8001530:	40020000 	.word	0x40020000

08001534 <HAL_HCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hhcd: HCD handle pointer
  * @retval None
  */
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	@ 0x28
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_HS)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a24      	ldr	r2, [pc, #144]	@ (80015e4 <HAL_HCD_MspInit+0xb0>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d141      	bne.n	80015da <HAL_HCD_MspInit+0xa6>
  {
    /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	4b23      	ldr	r3, [pc, #140]	@ (80015e8 <HAL_HCD_MspInit+0xb4>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800155e:	4a22      	ldr	r2, [pc, #136]	@ (80015e8 <HAL_HCD_MspInit+0xb4>)
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	6313      	str	r3, [r2, #48]	@ 0x30
 8001566:	4b20      	ldr	r3, [pc, #128]	@ (80015e8 <HAL_HCD_MspInit+0xb4>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001572:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001576:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2300      	movs	r3, #0
 8001582:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8001584:	230c      	movs	r3, #12
 8001586:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001588:	f107 0314 	add.w	r3, r7, #20
 800158c:	4619      	mov	r1, r3
 800158e:	4817      	ldr	r0, [pc, #92]	@ (80015ec <HAL_HCD_MspInit+0xb8>)
 8001590:	f000 fd2a 	bl	8001fe8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8001594:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001598:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	4619      	mov	r1, r3
 80015a8:	4810      	ldr	r0, [pc, #64]	@ (80015ec <HAL_HCD_MspInit+0xb8>)
 80015aa:	f000 fd1d 	bl	8001fe8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b0d      	ldr	r3, [pc, #52]	@ (80015e8 <HAL_HCD_MspInit+0xb4>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	4a0c      	ldr	r2, [pc, #48]	@ (80015e8 <HAL_HCD_MspInit+0xb4>)
 80015b8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80015bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015be:	4b0a      	ldr	r3, [pc, #40]	@ (80015e8 <HAL_HCD_MspInit+0xb4>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80015ca:	2200      	movs	r2, #0
 80015cc:	2100      	movs	r1, #0
 80015ce:	204d      	movs	r0, #77	@ 0x4d
 80015d0:	f000 fad8 	bl	8001b84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80015d4:	204d      	movs	r0, #77	@ 0x4d
 80015d6:	f000 faf1 	bl	8001bbc <HAL_NVIC_EnableIRQ>

    /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 80015da:	bf00      	nop
 80015dc:	3728      	adds	r7, #40	@ 0x28
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	40040000 	.word	0x40040000
 80015e8:	40023800 	.word	0x40023800
 80015ec:	40020400 	.word	0x40020400

080015f0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80015f6:	1d3b      	adds	r3, r7, #4
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001604:	4b3b      	ldr	r3, [pc, #236]	@ (80016f4 <HAL_FMC_MspInit+0x104>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	2b00      	cmp	r3, #0
 800160a:	d16f      	bne.n	80016ec <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800160c:	4b39      	ldr	r3, [pc, #228]	@ (80016f4 <HAL_FMC_MspInit+0x104>)
 800160e:	2201      	movs	r2, #1
 8001610:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	603b      	str	r3, [r7, #0]
 8001616:	4b38      	ldr	r3, [pc, #224]	@ (80016f8 <HAL_FMC_MspInit+0x108>)
 8001618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800161a:	4a37      	ldr	r2, [pc, #220]	@ (80016f8 <HAL_FMC_MspInit+0x108>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6393      	str	r3, [r2, #56]	@ 0x38
 8001622:	4b35      	ldr	r3, [pc, #212]	@ (80016f8 <HAL_FMC_MspInit+0x108>)
 8001624:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800162e:	f24d 033f 	movw	r3, #53311	@ 0xd03f
 8001632:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|A6_Pin|A8_Pin
                          |A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001634:	2302      	movs	r3, #2
 8001636:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163c:	2303      	movs	r3, #3
 800163e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001640:	230c      	movs	r3, #12
 8001642:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001644:	1d3b      	adds	r3, r7, #4
 8001646:	4619      	mov	r1, r3
 8001648:	482c      	ldr	r0, [pc, #176]	@ (80016fc <HAL_FMC_MspInit+0x10c>)
 800164a:	f000 fccd 	bl	8001fe8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800164e:	2301      	movs	r3, #1
 8001650:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001652:	2302      	movs	r3, #2
 8001654:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001656:	2300      	movs	r3, #0
 8001658:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165a:	2303      	movs	r3, #3
 800165c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800165e:	230c      	movs	r3, #12
 8001660:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001662:	1d3b      	adds	r3, r7, #4
 8001664:	4619      	mov	r1, r3
 8001666:	4826      	ldr	r0, [pc, #152]	@ (8001700 <HAL_FMC_MspInit+0x110>)
 8001668:	f000 fcbe 	bl	8001fe8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800166c:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001670:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001672:	2302      	movs	r3, #2
 8001674:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800167a:	2303      	movs	r3, #3
 800167c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800167e:	230c      	movs	r3, #12
 8001680:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001682:	1d3b      	adds	r3, r7, #4
 8001684:	4619      	mov	r1, r3
 8001686:	481f      	ldr	r0, [pc, #124]	@ (8001704 <HAL_FMC_MspInit+0x114>)
 8001688:	f000 fcae 	bl	8001fe8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800168c:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001690:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001692:	2302      	movs	r3, #2
 8001694:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800169a:	2303      	movs	r3, #3
 800169c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800169e:	230c      	movs	r3, #12
 80016a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	4619      	mov	r1, r3
 80016a6:	4818      	ldr	r0, [pc, #96]	@ (8001708 <HAL_FMC_MspInit+0x118>)
 80016a8:	f000 fc9e 	bl	8001fe8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80016ac:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80016b0:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b2:	2302      	movs	r3, #2
 80016b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016ba:	2303      	movs	r3, #3
 80016bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016be:	230c      	movs	r3, #12
 80016c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016c2:	1d3b      	adds	r3, r7, #4
 80016c4:	4619      	mov	r1, r3
 80016c6:	4811      	ldr	r0, [pc, #68]	@ (800170c <HAL_FMC_MspInit+0x11c>)
 80016c8:	f000 fc8e 	bl	8001fe8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80016cc:	2360      	movs	r3, #96	@ 0x60
 80016ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d0:	2302      	movs	r3, #2
 80016d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016d4:	2300      	movs	r3, #0
 80016d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d8:	2303      	movs	r3, #3
 80016da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016dc:	230c      	movs	r3, #12
 80016de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e0:	1d3b      	adds	r3, r7, #4
 80016e2:	4619      	mov	r1, r3
 80016e4:	480a      	ldr	r0, [pc, #40]	@ (8001710 <HAL_FMC_MspInit+0x120>)
 80016e6:	f000 fc7f 	bl	8001fe8 <HAL_GPIO_Init>
 80016ea:	e000      	b.n	80016ee <HAL_FMC_MspInit+0xfe>
    return;
 80016ec:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80016ee:	3718      	adds	r7, #24
 80016f0:	46bd      	mov	sp, r7
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	2000066c 	.word	0x2000066c
 80016f8:	40023800 	.word	0x40023800
 80016fc:	40021400 	.word	0x40021400
 8001700:	40020800 	.word	0x40020800
 8001704:	40021800 	.word	0x40021800
 8001708:	40021000 	.word	0x40021000
 800170c:	40020c00 	.word	0x40020c00
 8001710:	40020400 	.word	0x40020400

08001714 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800171c:	f7ff ff68 	bl	80015f0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b08e      	sub	sp, #56	@ 0x38
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001730:	2300      	movs	r3, #0
 8001732:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001738:	2300      	movs	r3, #0
 800173a:	60fb      	str	r3, [r7, #12]
 800173c:	4b33      	ldr	r3, [pc, #204]	@ (800180c <HAL_InitTick+0xe4>)
 800173e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001740:	4a32      	ldr	r2, [pc, #200]	@ (800180c <HAL_InitTick+0xe4>)
 8001742:	f043 0310 	orr.w	r3, r3, #16
 8001746:	6413      	str	r3, [r2, #64]	@ 0x40
 8001748:	4b30      	ldr	r3, [pc, #192]	@ (800180c <HAL_InitTick+0xe4>)
 800174a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174c:	f003 0310 	and.w	r3, r3, #16
 8001750:	60fb      	str	r3, [r7, #12]
 8001752:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001754:	f107 0210 	add.w	r2, r7, #16
 8001758:	f107 0314 	add.w	r3, r7, #20
 800175c:	4611      	mov	r1, r2
 800175e:	4618      	mov	r0, r3
 8001760:	f003 fdf8 	bl	8005354 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001764:	6a3b      	ldr	r3, [r7, #32]
 8001766:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001768:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800176a:	2b00      	cmp	r3, #0
 800176c:	d103      	bne.n	8001776 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800176e:	f003 fdc9 	bl	8005304 <HAL_RCC_GetPCLK1Freq>
 8001772:	6378      	str	r0, [r7, #52]	@ 0x34
 8001774:	e004      	b.n	8001780 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001776:	f003 fdc5 	bl	8005304 <HAL_RCC_GetPCLK1Freq>
 800177a:	4603      	mov	r3, r0
 800177c:	005b      	lsls	r3, r3, #1
 800177e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001780:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001782:	4a23      	ldr	r2, [pc, #140]	@ (8001810 <HAL_InitTick+0xe8>)
 8001784:	fba2 2303 	umull	r2, r3, r2, r3
 8001788:	0c9b      	lsrs	r3, r3, #18
 800178a:	3b01      	subs	r3, #1
 800178c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800178e:	4b21      	ldr	r3, [pc, #132]	@ (8001814 <HAL_InitTick+0xec>)
 8001790:	4a21      	ldr	r2, [pc, #132]	@ (8001818 <HAL_InitTick+0xf0>)
 8001792:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001794:	4b1f      	ldr	r3, [pc, #124]	@ (8001814 <HAL_InitTick+0xec>)
 8001796:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800179a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800179c:	4a1d      	ldr	r2, [pc, #116]	@ (8001814 <HAL_InitTick+0xec>)
 800179e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017a0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80017a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001814 <HAL_InitTick+0xec>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001814 <HAL_InitTick+0xec>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ae:	4b19      	ldr	r3, [pc, #100]	@ (8001814 <HAL_InitTick+0xec>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80017b4:	4817      	ldr	r0, [pc, #92]	@ (8001814 <HAL_InitTick+0xec>)
 80017b6:	f004 fdc5 	bl	8006344 <HAL_TIM_Base_Init>
 80017ba:	4603      	mov	r3, r0
 80017bc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80017c0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d11b      	bne.n	8001800 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80017c8:	4812      	ldr	r0, [pc, #72]	@ (8001814 <HAL_InitTick+0xec>)
 80017ca:	f004 fe0b 	bl	80063e4 <HAL_TIM_Base_Start_IT>
 80017ce:	4603      	mov	r3, r0
 80017d0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80017d4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d111      	bne.n	8001800 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80017dc:	2036      	movs	r0, #54	@ 0x36
 80017de:	f000 f9ed 	bl	8001bbc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b0f      	cmp	r3, #15
 80017e6:	d808      	bhi.n	80017fa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80017e8:	2200      	movs	r2, #0
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	2036      	movs	r0, #54	@ 0x36
 80017ee:	f000 f9c9 	bl	8001b84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017f2:	4a0a      	ldr	r2, [pc, #40]	@ (800181c <HAL_InitTick+0xf4>)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6013      	str	r3, [r2, #0]
 80017f8:	e002      	b.n	8001800 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001800:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001804:	4618      	mov	r0, r3
 8001806:	3738      	adds	r7, #56	@ 0x38
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	40023800 	.word	0x40023800
 8001810:	431bde83 	.word	0x431bde83
 8001814:	20000670 	.word	0x20000670
 8001818:	40001000 	.word	0x40001000
 800181c:	20000008 	.word	0x20000008

08001820 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001824:	bf00      	nop
 8001826:	e7fd      	b.n	8001824 <NMI_Handler+0x4>

08001828 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800182c:	bf00      	nop
 800182e:	e7fd      	b.n	800182c <HardFault_Handler+0x4>

08001830 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001834:	bf00      	nop
 8001836:	e7fd      	b.n	8001834 <MemManage_Handler+0x4>

08001838 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <BusFault_Handler+0x4>

08001840 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001844:	bf00      	nop
 8001846:	e7fd      	b.n	8001844 <UsageFault_Handler+0x4>

08001848 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001848:	b480      	push	{r7}
 800184a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr

08001856 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001856:	b480      	push	{r7}
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001864:	b480      	push	{r7}
 8001866:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001868:	bf00      	nop
 800186a:	46bd      	mov	sp, r7
 800186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001870:	4770      	bx	lr

08001872 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001872:	b480      	push	{r7}
 8001874:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001876:	bf00      	nop
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr

08001880 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001884:	4802      	ldr	r0, [pc, #8]	@ (8001890 <TIM6_DAC_IRQHandler+0x10>)
 8001886:	f004 fe1d 	bl	80064c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800188a:	bf00      	nop
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	20000670 	.word	0x20000670

08001894 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001898:	4802      	ldr	r0, [pc, #8]	@ (80018a4 <OTG_HS_IRQHandler+0x10>)
 800189a:	f000 fdd1 	bl	8002440 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000258 	.word	0x20000258

080018a8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80018ac:	4802      	ldr	r0, [pc, #8]	@ (80018b8 <LTDC_IRQHandler+0x10>)
 80018ae:	f002 fe21 	bl	80044f4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200000c8 	.word	0x200000c8

080018bc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80018c0:	4802      	ldr	r0, [pc, #8]	@ (80018cc <DMA2D_IRQHandler+0x10>)
 80018c2:	f000 f9ee 	bl	8001ca2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000034 	.word	0x20000034

080018d0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018d4:	4b06      	ldr	r3, [pc, #24]	@ (80018f0 <SystemInit+0x20>)
 80018d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80018da:	4a05      	ldr	r2, [pc, #20]	@ (80018f0 <SystemInit+0x20>)
 80018dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80018e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80018e4:	bf00      	nop
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	e000ed00 	.word	0xe000ed00

080018f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80018f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800192c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018f8:	f7ff ffea 	bl	80018d0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018fc:	480c      	ldr	r0, [pc, #48]	@ (8001930 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018fe:	490d      	ldr	r1, [pc, #52]	@ (8001934 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001900:	4a0d      	ldr	r2, [pc, #52]	@ (8001938 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001902:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001904:	e002      	b.n	800190c <LoopCopyDataInit>

08001906 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001906:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001908:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800190a:	3304      	adds	r3, #4

0800190c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800190c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800190e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001910:	d3f9      	bcc.n	8001906 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001912:	4a0a      	ldr	r2, [pc, #40]	@ (800193c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001914:	4c0a      	ldr	r4, [pc, #40]	@ (8001940 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001916:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001918:	e001      	b.n	800191e <LoopFillZerobss>

0800191a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800191a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800191c:	3204      	adds	r2, #4

0800191e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800191e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001920:	d3fb      	bcc.n	800191a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001922:	f006 f935 	bl	8007b90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001926:	f7fe ff2f 	bl	8000788 <main>
  bx  lr    
 800192a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800192c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001930:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001934:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001938:	08007c18 	.word	0x08007c18
  ldr r2, =_sbss
 800193c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001940:	200006bc 	.word	0x200006bc

08001944 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001944:	e7fe      	b.n	8001944 <ADC_IRQHandler>
	...

08001948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800194c:	4b0e      	ldr	r3, [pc, #56]	@ (8001988 <HAL_Init+0x40>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a0d      	ldr	r2, [pc, #52]	@ (8001988 <HAL_Init+0x40>)
 8001952:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001956:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001958:	4b0b      	ldr	r3, [pc, #44]	@ (8001988 <HAL_Init+0x40>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a0a      	ldr	r2, [pc, #40]	@ (8001988 <HAL_Init+0x40>)
 800195e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001962:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001964:	4b08      	ldr	r3, [pc, #32]	@ (8001988 <HAL_Init+0x40>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a07      	ldr	r2, [pc, #28]	@ (8001988 <HAL_Init+0x40>)
 800196a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800196e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001970:	2003      	movs	r0, #3
 8001972:	f000 f8fc 	bl	8001b6e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001976:	200f      	movs	r0, #15
 8001978:	f7ff fed6 	bl	8001728 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800197c:	f7ff fb1c 	bl	8000fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001980:	2300      	movs	r3, #0
}
 8001982:	4618      	mov	r0, r3
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40023c00 	.word	0x40023c00

0800198c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001990:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <HAL_IncTick+0x20>)
 8001992:	781b      	ldrb	r3, [r3, #0]
 8001994:	461a      	mov	r2, r3
 8001996:	4b06      	ldr	r3, [pc, #24]	@ (80019b0 <HAL_IncTick+0x24>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4413      	add	r3, r2
 800199c:	4a04      	ldr	r2, [pc, #16]	@ (80019b0 <HAL_IncTick+0x24>)
 800199e:	6013      	str	r3, [r2, #0]
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr
 80019aa:	bf00      	nop
 80019ac:	2000000c 	.word	0x2000000c
 80019b0:	200006b8 	.word	0x200006b8

080019b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  return uwTick;
 80019b8:	4b03      	ldr	r3, [pc, #12]	@ (80019c8 <HAL_GetTick+0x14>)
 80019ba:	681b      	ldr	r3, [r3, #0]
}
 80019bc:	4618      	mov	r0, r3
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
 80019c6:	bf00      	nop
 80019c8:	200006b8 	.word	0x200006b8

080019cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019d4:	f7ff ffee 	bl	80019b4 <HAL_GetTick>
 80019d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019e4:	d005      	beq.n	80019f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a10 <HAL_Delay+0x44>)
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	461a      	mov	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	4413      	add	r3, r2
 80019f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019f2:	bf00      	nop
 80019f4:	f7ff ffde 	bl	80019b4 <HAL_GetTick>
 80019f8:	4602      	mov	r2, r0
 80019fa:	68bb      	ldr	r3, [r7, #8]
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	68fa      	ldr	r2, [r7, #12]
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d8f7      	bhi.n	80019f4 <HAL_Delay+0x28>
  {
  }
}
 8001a04:	bf00      	nop
 8001a06:	bf00      	nop
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop
 8001a10:	2000000c 	.word	0x2000000c

08001a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b085      	sub	sp, #20
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f003 0307 	and.w	r3, r3, #7
 8001a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a24:	4b0c      	ldr	r3, [pc, #48]	@ (8001a58 <__NVIC_SetPriorityGrouping+0x44>)
 8001a26:	68db      	ldr	r3, [r3, #12]
 8001a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a2a:	68ba      	ldr	r2, [r7, #8]
 8001a2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001a30:	4013      	ands	r3, r2
 8001a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a38:	68bb      	ldr	r3, [r7, #8]
 8001a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001a40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a46:	4a04      	ldr	r2, [pc, #16]	@ (8001a58 <__NVIC_SetPriorityGrouping+0x44>)
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	60d3      	str	r3, [r2, #12]
}
 8001a4c:	bf00      	nop
 8001a4e:	3714      	adds	r7, #20
 8001a50:	46bd      	mov	sp, r7
 8001a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a56:	4770      	bx	lr
 8001a58:	e000ed00 	.word	0xe000ed00

08001a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a60:	4b04      	ldr	r3, [pc, #16]	@ (8001a74 <__NVIC_GetPriorityGrouping+0x18>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	0a1b      	lsrs	r3, r3, #8
 8001a66:	f003 0307 	and.w	r3, r3, #7
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b083      	sub	sp, #12
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	db0b      	blt.n	8001aa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	f003 021f 	and.w	r2, r3, #31
 8001a90:	4907      	ldr	r1, [pc, #28]	@ (8001ab0 <__NVIC_EnableIRQ+0x38>)
 8001a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a96:	095b      	lsrs	r3, r3, #5
 8001a98:	2001      	movs	r0, #1
 8001a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001aa2:	bf00      	nop
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	e000e100 	.word	0xe000e100

08001ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	4603      	mov	r3, r0
 8001abc:	6039      	str	r1, [r7, #0]
 8001abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	db0a      	blt.n	8001ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	b2da      	uxtb	r2, r3
 8001acc:	490c      	ldr	r1, [pc, #48]	@ (8001b00 <__NVIC_SetPriority+0x4c>)
 8001ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad2:	0112      	lsls	r2, r2, #4
 8001ad4:	b2d2      	uxtb	r2, r2
 8001ad6:	440b      	add	r3, r1
 8001ad8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001adc:	e00a      	b.n	8001af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	b2da      	uxtb	r2, r3
 8001ae2:	4908      	ldr	r1, [pc, #32]	@ (8001b04 <__NVIC_SetPriority+0x50>)
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	3b04      	subs	r3, #4
 8001aec:	0112      	lsls	r2, r2, #4
 8001aee:	b2d2      	uxtb	r2, r2
 8001af0:	440b      	add	r3, r1
 8001af2:	761a      	strb	r2, [r3, #24]
}
 8001af4:	bf00      	nop
 8001af6:	370c      	adds	r7, #12
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr
 8001b00:	e000e100 	.word	0xe000e100
 8001b04:	e000ed00 	.word	0xe000ed00

08001b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b089      	sub	sp, #36	@ 0x24
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	60b9      	str	r1, [r7, #8]
 8001b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b1c:	69fb      	ldr	r3, [r7, #28]
 8001b1e:	f1c3 0307 	rsb	r3, r3, #7
 8001b22:	2b04      	cmp	r3, #4
 8001b24:	bf28      	it	cs
 8001b26:	2304      	movcs	r3, #4
 8001b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b2a:	69fb      	ldr	r3, [r7, #28]
 8001b2c:	3304      	adds	r3, #4
 8001b2e:	2b06      	cmp	r3, #6
 8001b30:	d902      	bls.n	8001b38 <NVIC_EncodePriority+0x30>
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	3b03      	subs	r3, #3
 8001b36:	e000      	b.n	8001b3a <NVIC_EncodePriority+0x32>
 8001b38:	2300      	movs	r3, #0
 8001b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b40:	69bb      	ldr	r3, [r7, #24]
 8001b42:	fa02 f303 	lsl.w	r3, r2, r3
 8001b46:	43da      	mvns	r2, r3
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	401a      	ands	r2, r3
 8001b4c:	697b      	ldr	r3, [r7, #20]
 8001b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b50:	f04f 31ff 	mov.w	r1, #4294967295
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5a:	43d9      	mvns	r1, r3
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b60:	4313      	orrs	r3, r2
         );
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3724      	adds	r7, #36	@ 0x24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b082      	sub	sp, #8
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b76:	6878      	ldr	r0, [r7, #4]
 8001b78:	f7ff ff4c 	bl	8001a14 <__NVIC_SetPriorityGrouping>
}
 8001b7c:	bf00      	nop
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
 8001b90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b92:	2300      	movs	r3, #0
 8001b94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b96:	f7ff ff61 	bl	8001a5c <__NVIC_GetPriorityGrouping>
 8001b9a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b9c:	687a      	ldr	r2, [r7, #4]
 8001b9e:	68b9      	ldr	r1, [r7, #8]
 8001ba0:	6978      	ldr	r0, [r7, #20]
 8001ba2:	f7ff ffb1 	bl	8001b08 <NVIC_EncodePriority>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bac:	4611      	mov	r1, r2
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7ff ff80 	bl	8001ab4 <__NVIC_SetPriority>
}
 8001bb4:	bf00      	nop
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b082      	sub	sp, #8
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f7ff ff54 	bl	8001a78 <__NVIC_EnableIRQ>
}
 8001bd0:	bf00      	nop
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}

08001bd8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b082      	sub	sp, #8
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d101      	bne.n	8001bea <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e00e      	b.n	8001c08 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	795b      	ldrb	r3, [r3, #5]
 8001bee:	b2db      	uxtb	r3, r3
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d105      	bne.n	8001c00 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff fa04 	bl	8001008 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2201      	movs	r2, #1
 8001c04:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001c06:	2300      	movs	r3, #0
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3708      	adds	r7, #8
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e03b      	b.n	8001c9a <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d106      	bne.n	8001c3c <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2200      	movs	r2, #0
 8001c32:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	f7ff fa08 	bl	800104c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2202      	movs	r2, #2
 8001c40:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	430a      	orrs	r2, r1
 8001c58:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c60:	f023 0107 	bic.w	r1, r3, #7
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c76:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001c7a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c7e:	687a      	ldr	r2, [r7, #4]
 8001c80:	68d1      	ldr	r1, [r2, #12]
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	6812      	ldr	r2, [r2, #0]
 8001c86:	430b      	orrs	r3, r1
 8001c88:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}

08001ca2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001ca2:	b580      	push	{r7, lr}
 8001ca4:	b084      	sub	sp, #16
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	f003 0301 	and.w	r3, r3, #1
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d026      	beq.n	8001d12 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d021      	beq.n	8001d12 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001cdc:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ce2:	f043 0201 	orr.w	r2, r3, #1
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2204      	movs	r2, #4
 8001cf6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	695b      	ldr	r3, [r3, #20]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d003      	beq.n	8001d12 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	695b      	ldr	r3, [r3, #20]
 8001d0e:	6878      	ldr	r0, [r7, #4]
 8001d10:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	f003 0320 	and.w	r3, r3, #32
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d026      	beq.n	8001d6a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d021      	beq.n	8001d6a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681a      	ldr	r2, [r3, #0]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001d34:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2220      	movs	r2, #32
 8001d3c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d42:	f043 0202 	orr.w	r2, r3, #2
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2204      	movs	r2, #4
 8001d4e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2200      	movs	r2, #0
 8001d56:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	695b      	ldr	r3, [r3, #20]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d003      	beq.n	8001d6a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	695b      	ldr	r3, [r3, #20]
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	f003 0308 	and.w	r3, r3, #8
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d026      	beq.n	8001dc2 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d021      	beq.n	8001dc2 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	681a      	ldr	r2, [r3, #0]
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d8c:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	2208      	movs	r2, #8
 8001d94:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d9a:	f043 0204 	orr.w	r2, r3, #4
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2204      	movs	r2, #4
 8001da6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	2200      	movs	r2, #0
 8001dae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d003      	beq.n	8001dc2 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	f003 0304 	and.w	r3, r3, #4
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d013      	beq.n	8001df4 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d00e      	beq.n	8001df4 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001de4:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2204      	movs	r2, #4
 8001dec:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001dee:	6878      	ldr	r0, [r7, #4]
 8001df0:	f000 f853 	bl	8001e9a <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d024      	beq.n	8001e48 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001dfe:	68bb      	ldr	r3, [r7, #8]
 8001e00:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d01f      	beq.n	8001e48 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001e16:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	2202      	movs	r2, #2
 8001e1e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	2201      	movs	r2, #1
 8001e2c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	691b      	ldr	r3, [r3, #16]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691b      	ldr	r3, [r3, #16]
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	f003 0310 	and.w	r3, r3, #16
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d01f      	beq.n	8001e92 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d01a      	beq.n	8001e92 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001e6a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2210      	movs	r2, #16
 8001e72:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001e8c:	6878      	ldr	r0, [r7, #4]
 8001e8e:	f000 f80e 	bl	8001eae <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001e92:	bf00      	nop
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b083      	sub	sp, #12
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001ea2:	bf00      	nop
 8001ea4:	370c      	adds	r7, #12
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eac:	4770      	bx	lr

08001eae <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001eae:	b480      	push	{r7}
 8001eb0:	b083      	sub	sp, #12
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001eb6:	bf00      	nop
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr
	...

08001ec4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b087      	sub	sp, #28
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	6078      	str	r0, [r7, #4]
 8001ecc:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d101      	bne.n	8001ee4 <HAL_DMA2D_ConfigLayer+0x20>
 8001ee0:	2302      	movs	r3, #2
 8001ee2:	e079      	b.n	8001fd8 <HAL_DMA2D_ConfigLayer+0x114>
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2202      	movs	r2, #2
 8001ef0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	011b      	lsls	r3, r3, #4
 8001ef8:	3318      	adds	r3, #24
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	4413      	add	r3, r2
 8001efe:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001f00:	693b      	ldr	r3, [r7, #16]
 8001f02:	685a      	ldr	r2, [r3, #4]
 8001f04:	693b      	ldr	r3, [r7, #16]
 8001f06:	689b      	ldr	r3, [r3, #8]
 8001f08:	041b      	lsls	r3, r3, #16
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001f0e:	4b35      	ldr	r3, [pc, #212]	@ (8001fe4 <HAL_DMA2D_ConfigLayer+0x120>)
 8001f10:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	2b0a      	cmp	r3, #10
 8001f18:	d003      	beq.n	8001f22 <HAL_DMA2D_ConfigLayer+0x5e>
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	685b      	ldr	r3, [r3, #4]
 8001f1e:	2b09      	cmp	r3, #9
 8001f20:	d107      	bne.n	8001f32 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	68db      	ldr	r3, [r3, #12]
 8001f26:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001f2a:	697a      	ldr	r2, [r7, #20]
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	e005      	b.n	8001f3e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001f32:	693b      	ldr	r3, [r7, #16]
 8001f34:	68db      	ldr	r3, [r3, #12]
 8001f36:	061b      	lsls	r3, r3, #24
 8001f38:	697a      	ldr	r2, [r7, #20]
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d120      	bne.n	8001f86 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	43db      	mvns	r3, r3
 8001f4e:	ea02 0103 	and.w	r1, r2, r3
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	697a      	ldr	r2, [r7, #20]
 8001f58:	430a      	orrs	r2, r1
 8001f5a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	6812      	ldr	r2, [r2, #0]
 8001f64:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b0a      	cmp	r3, #10
 8001f6c:	d003      	beq.n	8001f76 <HAL_DMA2D_ConfigLayer+0xb2>
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	2b09      	cmp	r3, #9
 8001f74:	d127      	bne.n	8001fc6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	68da      	ldr	r2, [r3, #12]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001f82:	629a      	str	r2, [r3, #40]	@ 0x28
 8001f84:	e01f      	b.n	8001fc6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	69da      	ldr	r2, [r3, #28]
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	ea02 0103 	and.w	r1, r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	693a      	ldr	r2, [r7, #16]
 8001fa4:	6812      	ldr	r2, [r2, #0]
 8001fa6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b0a      	cmp	r3, #10
 8001fae:	d003      	beq.n	8001fb8 <HAL_DMA2D_ConfigLayer+0xf4>
 8001fb0:	693b      	ldr	r3, [r7, #16]
 8001fb2:	685b      	ldr	r3, [r3, #4]
 8001fb4:	2b09      	cmp	r3, #9
 8001fb6:	d106      	bne.n	8001fc6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	68da      	ldr	r2, [r3, #12]
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001fc4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2201      	movs	r2, #1
 8001fca:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8001fd6:	2300      	movs	r3, #0
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	371c      	adds	r7, #28
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe2:	4770      	bx	lr
 8001fe4:	ff03000f 	.word	0xff03000f

08001fe8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b089      	sub	sp, #36	@ 0x24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
 8001ff0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ffe:	2300      	movs	r3, #0
 8002000:	61fb      	str	r3, [r7, #28]
 8002002:	e177      	b.n	80022f4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002004:	2201      	movs	r2, #1
 8002006:	69fb      	ldr	r3, [r7, #28]
 8002008:	fa02 f303 	lsl.w	r3, r2, r3
 800200c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800200e:	683b      	ldr	r3, [r7, #0]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	4013      	ands	r3, r2
 8002016:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002018:	693a      	ldr	r2, [r7, #16]
 800201a:	697b      	ldr	r3, [r7, #20]
 800201c:	429a      	cmp	r2, r3
 800201e:	f040 8166 	bne.w	80022ee <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	2b01      	cmp	r3, #1
 800202c:	d005      	beq.n	800203a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002036:	2b02      	cmp	r3, #2
 8002038:	d130      	bne.n	800209c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002040:	69fb      	ldr	r3, [r7, #28]
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	2203      	movs	r2, #3
 8002046:	fa02 f303 	lsl.w	r3, r2, r3
 800204a:	43db      	mvns	r3, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4013      	ands	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	68da      	ldr	r2, [r3, #12]
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	005b      	lsls	r3, r3, #1
 800205a:	fa02 f303 	lsl.w	r3, r2, r3
 800205e:	69ba      	ldr	r2, [r7, #24]
 8002060:	4313      	orrs	r3, r2
 8002062:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002070:	2201      	movs	r2, #1
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	fa02 f303 	lsl.w	r3, r2, r3
 8002078:	43db      	mvns	r3, r3
 800207a:	69ba      	ldr	r2, [r7, #24]
 800207c:	4013      	ands	r3, r2
 800207e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	091b      	lsrs	r3, r3, #4
 8002086:	f003 0201 	and.w	r2, r3, #1
 800208a:	69fb      	ldr	r3, [r7, #28]
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	69ba      	ldr	r2, [r7, #24]
 8002092:	4313      	orrs	r3, r2
 8002094:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f003 0303 	and.w	r3, r3, #3
 80020a4:	2b03      	cmp	r3, #3
 80020a6:	d017      	beq.n	80020d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	005b      	lsls	r3, r3, #1
 80020b2:	2203      	movs	r2, #3
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	005b      	lsls	r3, r3, #1
 80020c8:	fa02 f303 	lsl.w	r3, r2, r3
 80020cc:	69ba      	ldr	r2, [r7, #24]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 0303 	and.w	r3, r3, #3
 80020e0:	2b02      	cmp	r3, #2
 80020e2:	d123      	bne.n	800212c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80020e4:	69fb      	ldr	r3, [r7, #28]
 80020e6:	08da      	lsrs	r2, r3, #3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	3208      	adds	r2, #8
 80020ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	f003 0307 	and.w	r3, r3, #7
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	220f      	movs	r2, #15
 80020fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002100:	43db      	mvns	r3, r3
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	4013      	ands	r3, r2
 8002106:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	691a      	ldr	r2, [r3, #16]
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	fa02 f303 	lsl.w	r3, r2, r3
 8002118:	69ba      	ldr	r2, [r7, #24]
 800211a:	4313      	orrs	r3, r2
 800211c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800211e:	69fb      	ldr	r3, [r7, #28]
 8002120:	08da      	lsrs	r2, r3, #3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	3208      	adds	r2, #8
 8002126:	69b9      	ldr	r1, [r7, #24]
 8002128:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	2203      	movs	r2, #3
 8002138:	fa02 f303 	lsl.w	r3, r2, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	69ba      	ldr	r2, [r7, #24]
 8002140:	4013      	ands	r3, r2
 8002142:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	f003 0203 	and.w	r2, r3, #3
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	69ba      	ldr	r2, [r7, #24]
 8002156:	4313      	orrs	r3, r2
 8002158:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	69ba      	ldr	r2, [r7, #24]
 800215e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 80c0 	beq.w	80022ee <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	60fb      	str	r3, [r7, #12]
 8002172:	4b66      	ldr	r3, [pc, #408]	@ (800230c <HAL_GPIO_Init+0x324>)
 8002174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002176:	4a65      	ldr	r2, [pc, #404]	@ (800230c <HAL_GPIO_Init+0x324>)
 8002178:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800217c:	6453      	str	r3, [r2, #68]	@ 0x44
 800217e:	4b63      	ldr	r3, [pc, #396]	@ (800230c <HAL_GPIO_Init+0x324>)
 8002180:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002182:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002186:	60fb      	str	r3, [r7, #12]
 8002188:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800218a:	4a61      	ldr	r2, [pc, #388]	@ (8002310 <HAL_GPIO_Init+0x328>)
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	089b      	lsrs	r3, r3, #2
 8002190:	3302      	adds	r3, #2
 8002192:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002196:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	f003 0303 	and.w	r3, r3, #3
 800219e:	009b      	lsls	r3, r3, #2
 80021a0:	220f      	movs	r2, #15
 80021a2:	fa02 f303 	lsl.w	r3, r2, r3
 80021a6:	43db      	mvns	r3, r3
 80021a8:	69ba      	ldr	r2, [r7, #24]
 80021aa:	4013      	ands	r3, r2
 80021ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a58      	ldr	r2, [pc, #352]	@ (8002314 <HAL_GPIO_Init+0x32c>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d037      	beq.n	8002226 <HAL_GPIO_Init+0x23e>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a57      	ldr	r2, [pc, #348]	@ (8002318 <HAL_GPIO_Init+0x330>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d031      	beq.n	8002222 <HAL_GPIO_Init+0x23a>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a56      	ldr	r2, [pc, #344]	@ (800231c <HAL_GPIO_Init+0x334>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d02b      	beq.n	800221e <HAL_GPIO_Init+0x236>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a55      	ldr	r2, [pc, #340]	@ (8002320 <HAL_GPIO_Init+0x338>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d025      	beq.n	800221a <HAL_GPIO_Init+0x232>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a54      	ldr	r2, [pc, #336]	@ (8002324 <HAL_GPIO_Init+0x33c>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d01f      	beq.n	8002216 <HAL_GPIO_Init+0x22e>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a53      	ldr	r2, [pc, #332]	@ (8002328 <HAL_GPIO_Init+0x340>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d019      	beq.n	8002212 <HAL_GPIO_Init+0x22a>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a52      	ldr	r2, [pc, #328]	@ (800232c <HAL_GPIO_Init+0x344>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d013      	beq.n	800220e <HAL_GPIO_Init+0x226>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a51      	ldr	r2, [pc, #324]	@ (8002330 <HAL_GPIO_Init+0x348>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d00d      	beq.n	800220a <HAL_GPIO_Init+0x222>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a50      	ldr	r2, [pc, #320]	@ (8002334 <HAL_GPIO_Init+0x34c>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d007      	beq.n	8002206 <HAL_GPIO_Init+0x21e>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a4f      	ldr	r2, [pc, #316]	@ (8002338 <HAL_GPIO_Init+0x350>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d101      	bne.n	8002202 <HAL_GPIO_Init+0x21a>
 80021fe:	2309      	movs	r3, #9
 8002200:	e012      	b.n	8002228 <HAL_GPIO_Init+0x240>
 8002202:	230a      	movs	r3, #10
 8002204:	e010      	b.n	8002228 <HAL_GPIO_Init+0x240>
 8002206:	2308      	movs	r3, #8
 8002208:	e00e      	b.n	8002228 <HAL_GPIO_Init+0x240>
 800220a:	2307      	movs	r3, #7
 800220c:	e00c      	b.n	8002228 <HAL_GPIO_Init+0x240>
 800220e:	2306      	movs	r3, #6
 8002210:	e00a      	b.n	8002228 <HAL_GPIO_Init+0x240>
 8002212:	2305      	movs	r3, #5
 8002214:	e008      	b.n	8002228 <HAL_GPIO_Init+0x240>
 8002216:	2304      	movs	r3, #4
 8002218:	e006      	b.n	8002228 <HAL_GPIO_Init+0x240>
 800221a:	2303      	movs	r3, #3
 800221c:	e004      	b.n	8002228 <HAL_GPIO_Init+0x240>
 800221e:	2302      	movs	r3, #2
 8002220:	e002      	b.n	8002228 <HAL_GPIO_Init+0x240>
 8002222:	2301      	movs	r3, #1
 8002224:	e000      	b.n	8002228 <HAL_GPIO_Init+0x240>
 8002226:	2300      	movs	r3, #0
 8002228:	69fa      	ldr	r2, [r7, #28]
 800222a:	f002 0203 	and.w	r2, r2, #3
 800222e:	0092      	lsls	r2, r2, #2
 8002230:	4093      	lsls	r3, r2
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4313      	orrs	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002238:	4935      	ldr	r1, [pc, #212]	@ (8002310 <HAL_GPIO_Init+0x328>)
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	089b      	lsrs	r3, r3, #2
 800223e:	3302      	adds	r3, #2
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002246:	4b3d      	ldr	r3, [pc, #244]	@ (800233c <HAL_GPIO_Init+0x354>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	43db      	mvns	r3, r3
 8002250:	69ba      	ldr	r2, [r7, #24]
 8002252:	4013      	ands	r3, r2
 8002254:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d003      	beq.n	800226a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800226a:	4a34      	ldr	r2, [pc, #208]	@ (800233c <HAL_GPIO_Init+0x354>)
 800226c:	69bb      	ldr	r3, [r7, #24]
 800226e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002270:	4b32      	ldr	r3, [pc, #200]	@ (800233c <HAL_GPIO_Init+0x354>)
 8002272:	68db      	ldr	r3, [r3, #12]
 8002274:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002276:	693b      	ldr	r3, [r7, #16]
 8002278:	43db      	mvns	r3, r3
 800227a:	69ba      	ldr	r2, [r7, #24]
 800227c:	4013      	ands	r3, r2
 800227e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002288:	2b00      	cmp	r3, #0
 800228a:	d003      	beq.n	8002294 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	4313      	orrs	r3, r2
 8002292:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002294:	4a29      	ldr	r2, [pc, #164]	@ (800233c <HAL_GPIO_Init+0x354>)
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800229a:	4b28      	ldr	r3, [pc, #160]	@ (800233c <HAL_GPIO_Init+0x354>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022a0:	693b      	ldr	r3, [r7, #16]
 80022a2:	43db      	mvns	r3, r3
 80022a4:	69ba      	ldr	r2, [r7, #24]
 80022a6:	4013      	ands	r3, r2
 80022a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d003      	beq.n	80022be <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022be:	4a1f      	ldr	r2, [pc, #124]	@ (800233c <HAL_GPIO_Init+0x354>)
 80022c0:	69bb      	ldr	r3, [r7, #24]
 80022c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022c4:	4b1d      	ldr	r3, [pc, #116]	@ (800233c <HAL_GPIO_Init+0x354>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	69ba      	ldr	r2, [r7, #24]
 80022d0:	4013      	ands	r3, r2
 80022d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d003      	beq.n	80022e8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022e0:	69ba      	ldr	r2, [r7, #24]
 80022e2:	693b      	ldr	r3, [r7, #16]
 80022e4:	4313      	orrs	r3, r2
 80022e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022e8:	4a14      	ldr	r2, [pc, #80]	@ (800233c <HAL_GPIO_Init+0x354>)
 80022ea:	69bb      	ldr	r3, [r7, #24]
 80022ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	3301      	adds	r3, #1
 80022f2:	61fb      	str	r3, [r7, #28]
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	2b0f      	cmp	r3, #15
 80022f8:	f67f ae84 	bls.w	8002004 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022fc:	bf00      	nop
 80022fe:	bf00      	nop
 8002300:	3724      	adds	r7, #36	@ 0x24
 8002302:	46bd      	mov	sp, r7
 8002304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop
 800230c:	40023800 	.word	0x40023800
 8002310:	40013800 	.word	0x40013800
 8002314:	40020000 	.word	0x40020000
 8002318:	40020400 	.word	0x40020400
 800231c:	40020800 	.word	0x40020800
 8002320:	40020c00 	.word	0x40020c00
 8002324:	40021000 	.word	0x40021000
 8002328:	40021400 	.word	0x40021400
 800232c:	40021800 	.word	0x40021800
 8002330:	40021c00 	.word	0x40021c00
 8002334:	40022000 	.word	0x40022000
 8002338:	40022400 	.word	0x40022400
 800233c:	40013c00 	.word	0x40013c00

08002340 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002340:	b480      	push	{r7}
 8002342:	b083      	sub	sp, #12
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	460b      	mov	r3, r1
 800234a:	807b      	strh	r3, [r7, #2]
 800234c:	4613      	mov	r3, r2
 800234e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002350:	787b      	ldrb	r3, [r7, #1]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d003      	beq.n	800235e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002356:	887a      	ldrh	r2, [r7, #2]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800235c:	e003      	b.n	8002366 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800235e:	887b      	ldrh	r3, [r7, #2]
 8002360:	041a      	lsls	r2, r3, #16
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	619a      	str	r2, [r3, #24]
}
 8002366:	bf00      	nop
 8002368:	370c      	adds	r7, #12
 800236a:	46bd      	mov	sp, r7
 800236c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002370:	4770      	bx	lr

08002372 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b086      	sub	sp, #24
 8002376:	af02      	add	r7, sp, #8
 8002378:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e059      	b.n	8002438 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d106      	bne.n	80023a4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800239e:	6878      	ldr	r0, [r7, #4]
 80023a0:	f7ff f8c8 	bl	8001534 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2203      	movs	r2, #3
 80023a8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80023b2:	d102      	bne.n	80023ba <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2200      	movs	r2, #0
 80023b8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	4618      	mov	r0, r3
 80023c0:	f005 f824 	bl	800740c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6818      	ldr	r0, [r3, #0]
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	7c1a      	ldrb	r2, [r3, #16]
 80023cc:	f88d 2000 	strb.w	r2, [sp]
 80023d0:	3304      	adds	r3, #4
 80023d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023d4:	f004 ffb6 	bl	8007344 <USB_CoreInit>
 80023d8:	4603      	mov	r3, r0
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d005      	beq.n	80023ea <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2202      	movs	r2, #2
 80023e2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80023e6:	2301      	movs	r3, #1
 80023e8:	e026      	b.n	8002438 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2101      	movs	r1, #1
 80023f0:	4618      	mov	r0, r3
 80023f2:	f005 f81c 	bl	800742e <USB_SetCurrentMode>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d005      	beq.n	8002408 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2202      	movs	r2, #2
 8002400:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e017      	b.n	8002438 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6818      	ldr	r0, [r3, #0]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	7c1a      	ldrb	r2, [r3, #16]
 8002410:	f88d 2000 	strb.w	r2, [sp]
 8002414:	3304      	adds	r3, #4
 8002416:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002418:	f005 f980 	bl	800771c <USB_HostInit>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	d005      	beq.n	800242e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2202      	movs	r2, #2
 8002426:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800242a:	2301      	movs	r3, #1
 800242c:	e004      	b.n	8002438 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2201      	movs	r2, #1
 8002432:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	3710      	adds	r7, #16
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800244e:	693b      	ldr	r3, [r7, #16]
 8002450:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f005 f921 	bl	800769e <USB_GetMode>
 800245c:	4603      	mov	r3, r0
 800245e:	2b01      	cmp	r3, #1
 8002460:	f040 80fb 	bne.w	800265a <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4618      	mov	r0, r3
 800246a:	f005 f8e4 	bl	8007636 <USB_ReadInterrupts>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	f000 80f1 	beq.w	8002658 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4618      	mov	r0, r3
 800247c:	f005 f8db 	bl	8007636 <USB_ReadInterrupts>
 8002480:	4603      	mov	r3, r0
 8002482:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002486:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800248a:	d104      	bne.n	8002496 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002494:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f005 f8cb 	bl	8007636 <USB_ReadInterrupts>
 80024a0:	4603      	mov	r3, r0
 80024a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80024aa:	d104      	bne.n	80024b6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80024b4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4618      	mov	r0, r3
 80024bc:	f005 f8bb 	bl	8007636 <USB_ReadInterrupts>
 80024c0:	4603      	mov	r3, r0
 80024c2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80024c6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80024ca:	d104      	bne.n	80024d6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80024d4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f005 f8ab 	bl	8007636 <USB_ReadInterrupts>
 80024e0:	4603      	mov	r3, r0
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b02      	cmp	r3, #2
 80024e8:	d103      	bne.n	80024f2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	2202      	movs	r2, #2
 80024f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f005 f89d 	bl	8007636 <USB_ReadInterrupts>
 80024fc:	4603      	mov	r3, r0
 80024fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002502:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002506:	d120      	bne.n	800254a <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002510:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f003 0301 	and.w	r3, r3, #1
 800251e:	2b00      	cmp	r3, #0
 8002520:	d113      	bne.n	800254a <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002522:	2110      	movs	r1, #16
 8002524:	6938      	ldr	r0, [r7, #16]
 8002526:	f004 ffce 	bl	80074c6 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800252a:	6938      	ldr	r0, [r7, #16]
 800252c:	f004 fffd 	bl	800752a <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	7a5b      	ldrb	r3, [r3, #9]
 8002534:	2b02      	cmp	r3, #2
 8002536:	d105      	bne.n	8002544 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2101      	movs	r1, #1
 800253e:	4618      	mov	r0, r3
 8002540:	f005 f9b0 	bl	80078a4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002544:	6878      	ldr	r0, [r7, #4]
 8002546:	f000 f89f 	bl	8002688 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4618      	mov	r0, r3
 8002550:	f005 f871 	bl	8007636 <USB_ReadInterrupts>
 8002554:	4603      	mov	r3, r0
 8002556:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800255a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800255e:	d102      	bne.n	8002566 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002560:	6878      	ldr	r0, [r7, #4]
 8002562:	f001 fcc4 	bl	8003eee <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f005 f863 	bl	8007636 <USB_ReadInterrupts>
 8002570:	4603      	mov	r3, r0
 8002572:	f003 0308 	and.w	r3, r3, #8
 8002576:	2b08      	cmp	r3, #8
 8002578:	d106      	bne.n	8002588 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800257a:	6878      	ldr	r0, [r7, #4]
 800257c:	f000 f870 	bl	8002660 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2208      	movs	r2, #8
 8002586:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f005 f852 	bl	8007636 <USB_ReadInterrupts>
 8002592:	4603      	mov	r3, r0
 8002594:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002598:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800259c:	d139      	bne.n	8002612 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f005 f9bb 	bl	800791e <USB_HC_ReadInterrupt>
 80025a8:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80025aa:	2300      	movs	r3, #0
 80025ac:	617b      	str	r3, [r7, #20]
 80025ae:	e025      	b.n	80025fc <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	68ba      	ldr	r2, [r7, #8]
 80025b8:	fa22 f303 	lsr.w	r3, r2, r3
 80025bc:	f003 0301 	and.w	r3, r3, #1
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d018      	beq.n	80025f6 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	015a      	lsls	r2, r3, #5
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	4413      	add	r3, r2
 80025cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025d6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80025da:	d106      	bne.n	80025ea <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	b2db      	uxtb	r3, r3
 80025e0:	4619      	mov	r1, r3
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 f87c 	bl	80026e0 <HCD_HC_IN_IRQHandler>
 80025e8:	e005      	b.n	80025f6 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	4619      	mov	r1, r3
 80025f0:	6878      	ldr	r0, [r7, #4]
 80025f2:	f000 fede 	bl	80033b2 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80025f6:	697b      	ldr	r3, [r7, #20]
 80025f8:	3301      	adds	r3, #1
 80025fa:	617b      	str	r3, [r7, #20]
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	795b      	ldrb	r3, [r3, #5]
 8002600:	461a      	mov	r2, r3
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	4293      	cmp	r3, r2
 8002606:	d3d3      	bcc.n	80025b0 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002610:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f005 f80d 	bl	8007636 <USB_ReadInterrupts>
 800261c:	4603      	mov	r3, r0
 800261e:	f003 0310 	and.w	r3, r3, #16
 8002622:	2b10      	cmp	r3, #16
 8002624:	d101      	bne.n	800262a <HAL_HCD_IRQHandler+0x1ea>
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <HAL_HCD_IRQHandler+0x1ec>
 800262a:	2300      	movs	r3, #0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d014      	beq.n	800265a <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	699a      	ldr	r2, [r3, #24]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f022 0210 	bic.w	r2, r2, #16
 800263e:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f001 fb75 	bl	8003d30 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	699a      	ldr	r2, [r3, #24]
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f042 0210 	orr.w	r2, r2, #16
 8002654:	619a      	str	r2, [r3, #24]
 8002656:	e000      	b.n	800265a <HAL_HCD_IRQHandler+0x21a>
      return;
 8002658:	bf00      	nop
    }
  }
}
 800265a:	3718      	adds	r7, #24
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}

08002660 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8002668:	bf00      	nop
 800266a:	370c      	adds	r7, #12
 800266c:	46bd      	mov	sp, r7
 800266e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002672:	4770      	bx	lr

08002674 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002688:	b480      	push	{r7}
 800268a:	b083      	sub	sp, #12
 800268c:	af00      	add	r7, sp, #0
 800268e:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002690:	bf00      	nop
 8002692:	370c      	adds	r7, #12
 8002694:	46bd      	mov	sp, r7
 8002696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269a:	4770      	bx	lr

0800269c <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800269c:	b480      	push	{r7}
 800269e:	b083      	sub	sp, #12
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 80026a4:	bf00      	nop
 80026a6:	370c      	adds	r7, #12
 80026a8:	46bd      	mov	sp, r7
 80026aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ae:	4770      	bx	lr

080026b0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 80026b8:	bf00      	nop
 80026ba:	370c      	adds	r7, #12
 80026bc:	46bd      	mov	sp, r7
 80026be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c2:	4770      	bx	lr

080026c4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
 80026cc:	460b      	mov	r3, r1
 80026ce:	70fb      	strb	r3, [r7, #3]
 80026d0:	4613      	mov	r3, r2
 80026d2:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	78fa      	ldrb	r2, [r7, #3]
 80026fc:	4611      	mov	r1, r2
 80026fe:	4618      	mov	r0, r3
 8002700:	f004 ffac 	bl	800765c <USB_ReadChInterrupts>
 8002704:	4603      	mov	r3, r0
 8002706:	f003 0304 	and.w	r3, r3, #4
 800270a:	2b04      	cmp	r3, #4
 800270c:	d11a      	bne.n	8002744 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800270e:	78fb      	ldrb	r3, [r7, #3]
 8002710:	015a      	lsls	r2, r3, #5
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	4413      	add	r3, r2
 8002716:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800271a:	461a      	mov	r2, r3
 800271c:	2304      	movs	r3, #4
 800271e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002720:	78fa      	ldrb	r2, [r7, #3]
 8002722:	6879      	ldr	r1, [r7, #4]
 8002724:	4613      	mov	r3, r2
 8002726:	011b      	lsls	r3, r3, #4
 8002728:	1a9b      	subs	r3, r3, r2
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	440b      	add	r3, r1
 800272e:	334d      	adds	r3, #77	@ 0x4d
 8002730:	2207      	movs	r2, #7
 8002732:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	78fa      	ldrb	r2, [r7, #3]
 800273a:	4611      	mov	r1, r2
 800273c:	4618      	mov	r0, r3
 800273e:	f005 f8ff 	bl	8007940 <USB_HC_Halt>
 8002742:	e09e      	b.n	8002882 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	78fa      	ldrb	r2, [r7, #3]
 800274a:	4611      	mov	r1, r2
 800274c:	4618      	mov	r0, r3
 800274e:	f004 ff85 	bl	800765c <USB_ReadChInterrupts>
 8002752:	4603      	mov	r3, r0
 8002754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002758:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800275c:	d11b      	bne.n	8002796 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800275e:	78fb      	ldrb	r3, [r7, #3]
 8002760:	015a      	lsls	r2, r3, #5
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	4413      	add	r3, r2
 8002766:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800276a:	461a      	mov	r2, r3
 800276c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002770:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002772:	78fa      	ldrb	r2, [r7, #3]
 8002774:	6879      	ldr	r1, [r7, #4]
 8002776:	4613      	mov	r3, r2
 8002778:	011b      	lsls	r3, r3, #4
 800277a:	1a9b      	subs	r3, r3, r2
 800277c:	009b      	lsls	r3, r3, #2
 800277e:	440b      	add	r3, r1
 8002780:	334d      	adds	r3, #77	@ 0x4d
 8002782:	2208      	movs	r2, #8
 8002784:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	78fa      	ldrb	r2, [r7, #3]
 800278c:	4611      	mov	r1, r2
 800278e:	4618      	mov	r0, r3
 8002790:	f005 f8d6 	bl	8007940 <USB_HC_Halt>
 8002794:	e075      	b.n	8002882 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	78fa      	ldrb	r2, [r7, #3]
 800279c:	4611      	mov	r1, r2
 800279e:	4618      	mov	r0, r3
 80027a0:	f004 ff5c 	bl	800765c <USB_ReadChInterrupts>
 80027a4:	4603      	mov	r3, r0
 80027a6:	f003 0308 	and.w	r3, r3, #8
 80027aa:	2b08      	cmp	r3, #8
 80027ac:	d11a      	bne.n	80027e4 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80027ae:	78fb      	ldrb	r3, [r7, #3]
 80027b0:	015a      	lsls	r2, r3, #5
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	4413      	add	r3, r2
 80027b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027ba:	461a      	mov	r2, r3
 80027bc:	2308      	movs	r3, #8
 80027be:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80027c0:	78fa      	ldrb	r2, [r7, #3]
 80027c2:	6879      	ldr	r1, [r7, #4]
 80027c4:	4613      	mov	r3, r2
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	1a9b      	subs	r3, r3, r2
 80027ca:	009b      	lsls	r3, r3, #2
 80027cc:	440b      	add	r3, r1
 80027ce:	334d      	adds	r3, #77	@ 0x4d
 80027d0:	2206      	movs	r2, #6
 80027d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	78fa      	ldrb	r2, [r7, #3]
 80027da:	4611      	mov	r1, r2
 80027dc:	4618      	mov	r0, r3
 80027de:	f005 f8af 	bl	8007940 <USB_HC_Halt>
 80027e2:	e04e      	b.n	8002882 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	78fa      	ldrb	r2, [r7, #3]
 80027ea:	4611      	mov	r1, r2
 80027ec:	4618      	mov	r0, r3
 80027ee:	f004 ff35 	bl	800765c <USB_ReadChInterrupts>
 80027f2:	4603      	mov	r3, r0
 80027f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027fc:	d11b      	bne.n	8002836 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80027fe:	78fb      	ldrb	r3, [r7, #3]
 8002800:	015a      	lsls	r2, r3, #5
 8002802:	693b      	ldr	r3, [r7, #16]
 8002804:	4413      	add	r3, r2
 8002806:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800280a:	461a      	mov	r2, r3
 800280c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002810:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002812:	78fa      	ldrb	r2, [r7, #3]
 8002814:	6879      	ldr	r1, [r7, #4]
 8002816:	4613      	mov	r3, r2
 8002818:	011b      	lsls	r3, r3, #4
 800281a:	1a9b      	subs	r3, r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	440b      	add	r3, r1
 8002820:	334d      	adds	r3, #77	@ 0x4d
 8002822:	2209      	movs	r2, #9
 8002824:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	78fa      	ldrb	r2, [r7, #3]
 800282c:	4611      	mov	r1, r2
 800282e:	4618      	mov	r0, r3
 8002830:	f005 f886 	bl	8007940 <USB_HC_Halt>
 8002834:	e025      	b.n	8002882 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	78fa      	ldrb	r2, [r7, #3]
 800283c:	4611      	mov	r1, r2
 800283e:	4618      	mov	r0, r3
 8002840:	f004 ff0c 	bl	800765c <USB_ReadChInterrupts>
 8002844:	4603      	mov	r3, r0
 8002846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800284a:	2b80      	cmp	r3, #128	@ 0x80
 800284c:	d119      	bne.n	8002882 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800284e:	78fb      	ldrb	r3, [r7, #3]
 8002850:	015a      	lsls	r2, r3, #5
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	4413      	add	r3, r2
 8002856:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800285a:	461a      	mov	r2, r3
 800285c:	2380      	movs	r3, #128	@ 0x80
 800285e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002860:	78fa      	ldrb	r2, [r7, #3]
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	4613      	mov	r3, r2
 8002866:	011b      	lsls	r3, r3, #4
 8002868:	1a9b      	subs	r3, r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	334d      	adds	r3, #77	@ 0x4d
 8002870:	2207      	movs	r2, #7
 8002872:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	78fa      	ldrb	r2, [r7, #3]
 800287a:	4611      	mov	r1, r2
 800287c:	4618      	mov	r0, r3
 800287e:	f005 f85f 	bl	8007940 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	78fa      	ldrb	r2, [r7, #3]
 8002888:	4611      	mov	r1, r2
 800288a:	4618      	mov	r0, r3
 800288c:	f004 fee6 	bl	800765c <USB_ReadChInterrupts>
 8002890:	4603      	mov	r3, r0
 8002892:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002896:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800289a:	d112      	bne.n	80028c2 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	78fa      	ldrb	r2, [r7, #3]
 80028a2:	4611      	mov	r1, r2
 80028a4:	4618      	mov	r0, r3
 80028a6:	f005 f84b 	bl	8007940 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80028aa:	78fb      	ldrb	r3, [r7, #3]
 80028ac:	015a      	lsls	r2, r3, #5
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	4413      	add	r3, r2
 80028b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028b6:	461a      	mov	r2, r3
 80028b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80028bc:	6093      	str	r3, [r2, #8]
 80028be:	f000 bd75 	b.w	80033ac <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	78fa      	ldrb	r2, [r7, #3]
 80028c8:	4611      	mov	r1, r2
 80028ca:	4618      	mov	r0, r3
 80028cc:	f004 fec6 	bl	800765c <USB_ReadChInterrupts>
 80028d0:	4603      	mov	r3, r0
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	f040 8128 	bne.w	8002b2c <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80028dc:	78fb      	ldrb	r3, [r7, #3]
 80028de:	015a      	lsls	r2, r3, #5
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	4413      	add	r3, r2
 80028e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028e8:	461a      	mov	r2, r3
 80028ea:	2320      	movs	r3, #32
 80028ec:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80028ee:	78fa      	ldrb	r2, [r7, #3]
 80028f0:	6879      	ldr	r1, [r7, #4]
 80028f2:	4613      	mov	r3, r2
 80028f4:	011b      	lsls	r3, r3, #4
 80028f6:	1a9b      	subs	r3, r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	440b      	add	r3, r1
 80028fc:	331b      	adds	r3, #27
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d119      	bne.n	8002938 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002904:	78fa      	ldrb	r2, [r7, #3]
 8002906:	6879      	ldr	r1, [r7, #4]
 8002908:	4613      	mov	r3, r2
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	1a9b      	subs	r3, r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	440b      	add	r3, r1
 8002912:	331b      	adds	r3, #27
 8002914:	2200      	movs	r2, #0
 8002916:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002918:	78fb      	ldrb	r3, [r7, #3]
 800291a:	015a      	lsls	r2, r3, #5
 800291c:	693b      	ldr	r3, [r7, #16]
 800291e:	4413      	add	r3, r2
 8002920:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	78fa      	ldrb	r2, [r7, #3]
 8002928:	0151      	lsls	r1, r2, #5
 800292a:	693a      	ldr	r2, [r7, #16]
 800292c:	440a      	add	r2, r1
 800292e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002932:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002936:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	799b      	ldrb	r3, [r3, #6]
 800293c:	2b00      	cmp	r3, #0
 800293e:	d01b      	beq.n	8002978 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002940:	78fa      	ldrb	r2, [r7, #3]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	011b      	lsls	r3, r3, #4
 8002948:	1a9b      	subs	r3, r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	3330      	adds	r3, #48	@ 0x30
 8002950:	6819      	ldr	r1, [r3, #0]
 8002952:	78fb      	ldrb	r3, [r7, #3]
 8002954:	015a      	lsls	r2, r3, #5
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	4413      	add	r3, r2
 800295a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002964:	78fa      	ldrb	r2, [r7, #3]
 8002966:	1ac9      	subs	r1, r1, r3
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	4613      	mov	r3, r2
 800296c:	011b      	lsls	r3, r3, #4
 800296e:	1a9b      	subs	r3, r3, r2
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	4403      	add	r3, r0
 8002974:	3338      	adds	r3, #56	@ 0x38
 8002976:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	334d      	adds	r3, #77	@ 0x4d
 8002988:	2201      	movs	r2, #1
 800298a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 800298c:	78fa      	ldrb	r2, [r7, #3]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	1a9b      	subs	r3, r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	3344      	adds	r3, #68	@ 0x44
 800299c:	2200      	movs	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80029a0:	78fb      	ldrb	r3, [r7, #3]
 80029a2:	015a      	lsls	r2, r3, #5
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	4413      	add	r3, r2
 80029a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029ac:	461a      	mov	r2, r3
 80029ae:	2301      	movs	r3, #1
 80029b0:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029b2:	78fa      	ldrb	r2, [r7, #3]
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	4613      	mov	r3, r2
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	1a9b      	subs	r3, r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	440b      	add	r3, r1
 80029c0:	3326      	adds	r3, #38	@ 0x26
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00a      	beq.n	80029de <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80029c8:	78fa      	ldrb	r2, [r7, #3]
 80029ca:	6879      	ldr	r1, [r7, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	1a9b      	subs	r3, r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	3326      	adds	r3, #38	@ 0x26
 80029d8:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d110      	bne.n	8002a00 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	78fa      	ldrb	r2, [r7, #3]
 80029e4:	4611      	mov	r1, r2
 80029e6:	4618      	mov	r0, r3
 80029e8:	f004 ffaa 	bl	8007940 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80029ec:	78fb      	ldrb	r3, [r7, #3]
 80029ee:	015a      	lsls	r2, r3, #5
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	4413      	add	r3, r2
 80029f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029f8:	461a      	mov	r2, r3
 80029fa:	2310      	movs	r3, #16
 80029fc:	6093      	str	r3, [r2, #8]
 80029fe:	e03d      	b.n	8002a7c <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002a00:	78fa      	ldrb	r2, [r7, #3]
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	4613      	mov	r3, r2
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	1a9b      	subs	r3, r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	440b      	add	r3, r1
 8002a0e:	3326      	adds	r3, #38	@ 0x26
 8002a10:	781b      	ldrb	r3, [r3, #0]
 8002a12:	2b03      	cmp	r3, #3
 8002a14:	d00a      	beq.n	8002a2c <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002a16:	78fa      	ldrb	r2, [r7, #3]
 8002a18:	6879      	ldr	r1, [r7, #4]
 8002a1a:	4613      	mov	r3, r2
 8002a1c:	011b      	lsls	r3, r3, #4
 8002a1e:	1a9b      	subs	r3, r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	440b      	add	r3, r1
 8002a24:	3326      	adds	r3, #38	@ 0x26
 8002a26:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d127      	bne.n	8002a7c <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002a2c:	78fb      	ldrb	r3, [r7, #3]
 8002a2e:	015a      	lsls	r2, r3, #5
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	4413      	add	r3, r2
 8002a34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	78fa      	ldrb	r2, [r7, #3]
 8002a3c:	0151      	lsls	r1, r2, #5
 8002a3e:	693a      	ldr	r2, [r7, #16]
 8002a40:	440a      	add	r2, r1
 8002a42:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002a46:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002a4a:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002a4c:	78fa      	ldrb	r2, [r7, #3]
 8002a4e:	6879      	ldr	r1, [r7, #4]
 8002a50:	4613      	mov	r3, r2
 8002a52:	011b      	lsls	r3, r3, #4
 8002a54:	1a9b      	subs	r3, r3, r2
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	440b      	add	r3, r1
 8002a5a:	334c      	adds	r3, #76	@ 0x4c
 8002a5c:	2201      	movs	r2, #1
 8002a5e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002a60:	78fa      	ldrb	r2, [r7, #3]
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	1a9b      	subs	r3, r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	334c      	adds	r3, #76	@ 0x4c
 8002a70:	781a      	ldrb	r2, [r3, #0]
 8002a72:	78fb      	ldrb	r3, [r7, #3]
 8002a74:	4619      	mov	r1, r3
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f7ff fe24 	bl	80026c4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	799b      	ldrb	r3, [r3, #6]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d13b      	bne.n	8002afc <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002a84:	78fa      	ldrb	r2, [r7, #3]
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	011b      	lsls	r3, r3, #4
 8002a8c:	1a9b      	subs	r3, r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	3338      	adds	r3, #56	@ 0x38
 8002a94:	6819      	ldr	r1, [r3, #0]
 8002a96:	78fa      	ldrb	r2, [r7, #3]
 8002a98:	6878      	ldr	r0, [r7, #4]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	011b      	lsls	r3, r3, #4
 8002a9e:	1a9b      	subs	r3, r3, r2
 8002aa0:	009b      	lsls	r3, r3, #2
 8002aa2:	4403      	add	r3, r0
 8002aa4:	3328      	adds	r3, #40	@ 0x28
 8002aa6:	881b      	ldrh	r3, [r3, #0]
 8002aa8:	440b      	add	r3, r1
 8002aaa:	1e59      	subs	r1, r3, #1
 8002aac:	78fa      	ldrb	r2, [r7, #3]
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	011b      	lsls	r3, r3, #4
 8002ab4:	1a9b      	subs	r3, r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4403      	add	r3, r0
 8002aba:	3328      	adds	r3, #40	@ 0x28
 8002abc:	881b      	ldrh	r3, [r3, #0]
 8002abe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ac2:	f003 0301 	and.w	r3, r3, #1
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	f000 8470 	beq.w	80033ac <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002acc:	78fa      	ldrb	r2, [r7, #3]
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	333c      	adds	r3, #60	@ 0x3c
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	78fa      	ldrb	r2, [r7, #3]
 8002ae0:	f083 0301 	eor.w	r3, r3, #1
 8002ae4:	b2d8      	uxtb	r0, r3
 8002ae6:	6879      	ldr	r1, [r7, #4]
 8002ae8:	4613      	mov	r3, r2
 8002aea:	011b      	lsls	r3, r3, #4
 8002aec:	1a9b      	subs	r3, r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	333c      	adds	r3, #60	@ 0x3c
 8002af4:	4602      	mov	r2, r0
 8002af6:	701a      	strb	r2, [r3, #0]
 8002af8:	f000 bc58 	b.w	80033ac <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002afc:	78fa      	ldrb	r2, [r7, #3]
 8002afe:	6879      	ldr	r1, [r7, #4]
 8002b00:	4613      	mov	r3, r2
 8002b02:	011b      	lsls	r3, r3, #4
 8002b04:	1a9b      	subs	r3, r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	440b      	add	r3, r1
 8002b0a:	333c      	adds	r3, #60	@ 0x3c
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	78fa      	ldrb	r2, [r7, #3]
 8002b10:	f083 0301 	eor.w	r3, r3, #1
 8002b14:	b2d8      	uxtb	r0, r3
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	1a9b      	subs	r3, r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	333c      	adds	r3, #60	@ 0x3c
 8002b24:	4602      	mov	r2, r0
 8002b26:	701a      	strb	r2, [r3, #0]
 8002b28:	f000 bc40 	b.w	80033ac <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	78fa      	ldrb	r2, [r7, #3]
 8002b32:	4611      	mov	r1, r2
 8002b34:	4618      	mov	r0, r3
 8002b36:	f004 fd91 	bl	800765c <USB_ReadChInterrupts>
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	f003 0320 	and.w	r3, r3, #32
 8002b40:	2b20      	cmp	r3, #32
 8002b42:	d131      	bne.n	8002ba8 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002b44:	78fb      	ldrb	r3, [r7, #3]
 8002b46:	015a      	lsls	r2, r3, #5
 8002b48:	693b      	ldr	r3, [r7, #16]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b50:	461a      	mov	r2, r3
 8002b52:	2320      	movs	r3, #32
 8002b54:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002b56:	78fa      	ldrb	r2, [r7, #3]
 8002b58:	6879      	ldr	r1, [r7, #4]
 8002b5a:	4613      	mov	r3, r2
 8002b5c:	011b      	lsls	r3, r3, #4
 8002b5e:	1a9b      	subs	r3, r3, r2
 8002b60:	009b      	lsls	r3, r3, #2
 8002b62:	440b      	add	r3, r1
 8002b64:	331a      	adds	r3, #26
 8002b66:	781b      	ldrb	r3, [r3, #0]
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	f040 841f 	bne.w	80033ac <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002b6e:	78fa      	ldrb	r2, [r7, #3]
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	4613      	mov	r3, r2
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	1a9b      	subs	r3, r3, r2
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	440b      	add	r3, r1
 8002b7c:	331b      	adds	r3, #27
 8002b7e:	2201      	movs	r2, #1
 8002b80:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002b82:	78fa      	ldrb	r2, [r7, #3]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	4613      	mov	r3, r2
 8002b88:	011b      	lsls	r3, r3, #4
 8002b8a:	1a9b      	subs	r3, r3, r2
 8002b8c:	009b      	lsls	r3, r3, #2
 8002b8e:	440b      	add	r3, r1
 8002b90:	334d      	adds	r3, #77	@ 0x4d
 8002b92:	2203      	movs	r2, #3
 8002b94:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	78fa      	ldrb	r2, [r7, #3]
 8002b9c:	4611      	mov	r1, r2
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f004 fece 	bl	8007940 <USB_HC_Halt>
 8002ba4:	f000 bc02 	b.w	80033ac <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	78fa      	ldrb	r2, [r7, #3]
 8002bae:	4611      	mov	r1, r2
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f004 fd53 	bl	800765c <USB_ReadChInterrupts>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	f040 8305 	bne.w	80031cc <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002bc2:	78fb      	ldrb	r3, [r7, #3]
 8002bc4:	015a      	lsls	r2, r3, #5
 8002bc6:	693b      	ldr	r3, [r7, #16]
 8002bc8:	4413      	add	r3, r2
 8002bca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bce:	461a      	mov	r2, r3
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002bd4:	78fa      	ldrb	r2, [r7, #3]
 8002bd6:	6879      	ldr	r1, [r7, #4]
 8002bd8:	4613      	mov	r3, r2
 8002bda:	011b      	lsls	r3, r3, #4
 8002bdc:	1a9b      	subs	r3, r3, r2
 8002bde:	009b      	lsls	r3, r3, #2
 8002be0:	440b      	add	r3, r1
 8002be2:	334d      	adds	r3, #77	@ 0x4d
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d114      	bne.n	8002c14 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002bea:	78fa      	ldrb	r2, [r7, #3]
 8002bec:	6879      	ldr	r1, [r7, #4]
 8002bee:	4613      	mov	r3, r2
 8002bf0:	011b      	lsls	r3, r3, #4
 8002bf2:	1a9b      	subs	r3, r3, r2
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	440b      	add	r3, r1
 8002bf8:	334d      	adds	r3, #77	@ 0x4d
 8002bfa:	2202      	movs	r2, #2
 8002bfc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002bfe:	78fa      	ldrb	r2, [r7, #3]
 8002c00:	6879      	ldr	r1, [r7, #4]
 8002c02:	4613      	mov	r3, r2
 8002c04:	011b      	lsls	r3, r3, #4
 8002c06:	1a9b      	subs	r3, r3, r2
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	440b      	add	r3, r1
 8002c0c:	334c      	adds	r3, #76	@ 0x4c
 8002c0e:	2201      	movs	r2, #1
 8002c10:	701a      	strb	r2, [r3, #0]
 8002c12:	e2cc      	b.n	80031ae <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002c14:	78fa      	ldrb	r2, [r7, #3]
 8002c16:	6879      	ldr	r1, [r7, #4]
 8002c18:	4613      	mov	r3, r2
 8002c1a:	011b      	lsls	r3, r3, #4
 8002c1c:	1a9b      	subs	r3, r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	334d      	adds	r3, #77	@ 0x4d
 8002c24:	781b      	ldrb	r3, [r3, #0]
 8002c26:	2b06      	cmp	r3, #6
 8002c28:	d114      	bne.n	8002c54 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c2a:	78fa      	ldrb	r2, [r7, #3]
 8002c2c:	6879      	ldr	r1, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	011b      	lsls	r3, r3, #4
 8002c32:	1a9b      	subs	r3, r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	440b      	add	r3, r1
 8002c38:	334d      	adds	r3, #77	@ 0x4d
 8002c3a:	2202      	movs	r2, #2
 8002c3c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002c3e:	78fa      	ldrb	r2, [r7, #3]
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	4613      	mov	r3, r2
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	1a9b      	subs	r3, r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	334c      	adds	r3, #76	@ 0x4c
 8002c4e:	2205      	movs	r2, #5
 8002c50:	701a      	strb	r2, [r3, #0]
 8002c52:	e2ac      	b.n	80031ae <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002c54:	78fa      	ldrb	r2, [r7, #3]
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	1a9b      	subs	r3, r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	334d      	adds	r3, #77	@ 0x4d
 8002c64:	781b      	ldrb	r3, [r3, #0]
 8002c66:	2b07      	cmp	r3, #7
 8002c68:	d00b      	beq.n	8002c82 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002c6a:	78fa      	ldrb	r2, [r7, #3]
 8002c6c:	6879      	ldr	r1, [r7, #4]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	011b      	lsls	r3, r3, #4
 8002c72:	1a9b      	subs	r3, r3, r2
 8002c74:	009b      	lsls	r3, r3, #2
 8002c76:	440b      	add	r3, r1
 8002c78:	334d      	adds	r3, #77	@ 0x4d
 8002c7a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002c7c:	2b09      	cmp	r3, #9
 8002c7e:	f040 80a6 	bne.w	8002dce <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c82:	78fa      	ldrb	r2, [r7, #3]
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	1a9b      	subs	r3, r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	440b      	add	r3, r1
 8002c90:	334d      	adds	r3, #77	@ 0x4d
 8002c92:	2202      	movs	r2, #2
 8002c94:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002c96:	78fa      	ldrb	r2, [r7, #3]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	1a9b      	subs	r3, r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	3344      	adds	r3, #68	@ 0x44
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	1c59      	adds	r1, r3, #1
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	4613      	mov	r3, r2
 8002cae:	011b      	lsls	r3, r3, #4
 8002cb0:	1a9b      	subs	r3, r3, r2
 8002cb2:	009b      	lsls	r3, r3, #2
 8002cb4:	4403      	add	r3, r0
 8002cb6:	3344      	adds	r3, #68	@ 0x44
 8002cb8:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002cba:	78fa      	ldrb	r2, [r7, #3]
 8002cbc:	6879      	ldr	r1, [r7, #4]
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	011b      	lsls	r3, r3, #4
 8002cc2:	1a9b      	subs	r3, r3, r2
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	440b      	add	r3, r1
 8002cc8:	3344      	adds	r3, #68	@ 0x44
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d943      	bls.n	8002d58 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002cd0:	78fa      	ldrb	r2, [r7, #3]
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	011b      	lsls	r3, r3, #4
 8002cd8:	1a9b      	subs	r3, r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	3344      	adds	r3, #68	@ 0x44
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	1a9b      	subs	r3, r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	331a      	adds	r3, #26
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d123      	bne.n	8002d42 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	1a9b      	subs	r3, r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	331b      	adds	r3, #27
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002d0e:	78fa      	ldrb	r2, [r7, #3]
 8002d10:	6879      	ldr	r1, [r7, #4]
 8002d12:	4613      	mov	r3, r2
 8002d14:	011b      	lsls	r3, r3, #4
 8002d16:	1a9b      	subs	r3, r3, r2
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	331c      	adds	r3, #28
 8002d1e:	2200      	movs	r2, #0
 8002d20:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002d22:	78fb      	ldrb	r3, [r7, #3]
 8002d24:	015a      	lsls	r2, r3, #5
 8002d26:	693b      	ldr	r3, [r7, #16]
 8002d28:	4413      	add	r3, r2
 8002d2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	78fa      	ldrb	r2, [r7, #3]
 8002d32:	0151      	lsls	r1, r2, #5
 8002d34:	693a      	ldr	r2, [r7, #16]
 8002d36:	440a      	add	r2, r1
 8002d38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d3c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002d40:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002d42:	78fa      	ldrb	r2, [r7, #3]
 8002d44:	6879      	ldr	r1, [r7, #4]
 8002d46:	4613      	mov	r3, r2
 8002d48:	011b      	lsls	r3, r3, #4
 8002d4a:	1a9b      	subs	r3, r3, r2
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	440b      	add	r3, r1
 8002d50:	334c      	adds	r3, #76	@ 0x4c
 8002d52:	2204      	movs	r2, #4
 8002d54:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002d56:	e229      	b.n	80031ac <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d58:	78fa      	ldrb	r2, [r7, #3]
 8002d5a:	6879      	ldr	r1, [r7, #4]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	011b      	lsls	r3, r3, #4
 8002d60:	1a9b      	subs	r3, r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	440b      	add	r3, r1
 8002d66:	334c      	adds	r3, #76	@ 0x4c
 8002d68:	2202      	movs	r2, #2
 8002d6a:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d6c:	78fa      	ldrb	r2, [r7, #3]
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	4613      	mov	r3, r2
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	1a9b      	subs	r3, r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	3326      	adds	r3, #38	@ 0x26
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00b      	beq.n	8002d9a <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	1a9b      	subs	r3, r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	3326      	adds	r3, #38	@ 0x26
 8002d92:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	f040 8209 	bne.w	80031ac <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002d9a:	78fb      	ldrb	r3, [r7, #3]
 8002d9c:	015a      	lsls	r2, r3, #5
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	4413      	add	r3, r2
 8002da2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002db0:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002db8:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002dba:	78fb      	ldrb	r3, [r7, #3]
 8002dbc:	015a      	lsls	r2, r3, #5
 8002dbe:	693b      	ldr	r3, [r7, #16]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002dcc:	e1ee      	b.n	80031ac <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002dce:	78fa      	ldrb	r2, [r7, #3]
 8002dd0:	6879      	ldr	r1, [r7, #4]
 8002dd2:	4613      	mov	r3, r2
 8002dd4:	011b      	lsls	r3, r3, #4
 8002dd6:	1a9b      	subs	r3, r3, r2
 8002dd8:	009b      	lsls	r3, r3, #2
 8002dda:	440b      	add	r3, r1
 8002ddc:	334d      	adds	r3, #77	@ 0x4d
 8002dde:	781b      	ldrb	r3, [r3, #0]
 8002de0:	2b05      	cmp	r3, #5
 8002de2:	f040 80c8 	bne.w	8002f76 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002de6:	78fa      	ldrb	r2, [r7, #3]
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	4613      	mov	r3, r2
 8002dec:	011b      	lsls	r3, r3, #4
 8002dee:	1a9b      	subs	r3, r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	440b      	add	r3, r1
 8002df4:	334d      	adds	r3, #77	@ 0x4d
 8002df6:	2202      	movs	r2, #2
 8002df8:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002dfa:	78fa      	ldrb	r2, [r7, #3]
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	4613      	mov	r3, r2
 8002e00:	011b      	lsls	r3, r3, #4
 8002e02:	1a9b      	subs	r3, r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	440b      	add	r3, r1
 8002e08:	331b      	adds	r3, #27
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	f040 81ce 	bne.w	80031ae <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002e12:	78fa      	ldrb	r2, [r7, #3]
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	4613      	mov	r3, r2
 8002e18:	011b      	lsls	r3, r3, #4
 8002e1a:	1a9b      	subs	r3, r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	440b      	add	r3, r1
 8002e20:	3326      	adds	r3, #38	@ 0x26
 8002e22:	781b      	ldrb	r3, [r3, #0]
 8002e24:	2b03      	cmp	r3, #3
 8002e26:	d16b      	bne.n	8002f00 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002e28:	78fa      	ldrb	r2, [r7, #3]
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	011b      	lsls	r3, r3, #4
 8002e30:	1a9b      	subs	r3, r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	3348      	adds	r3, #72	@ 0x48
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	1c59      	adds	r1, r3, #1
 8002e3c:	6878      	ldr	r0, [r7, #4]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	011b      	lsls	r3, r3, #4
 8002e42:	1a9b      	subs	r3, r3, r2
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	4403      	add	r3, r0
 8002e48:	3348      	adds	r3, #72	@ 0x48
 8002e4a:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002e4c:	78fa      	ldrb	r2, [r7, #3]
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	4613      	mov	r3, r2
 8002e52:	011b      	lsls	r3, r3, #4
 8002e54:	1a9b      	subs	r3, r3, r2
 8002e56:	009b      	lsls	r3, r3, #2
 8002e58:	440b      	add	r3, r1
 8002e5a:	3348      	adds	r3, #72	@ 0x48
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	2b02      	cmp	r3, #2
 8002e60:	d943      	bls.n	8002eea <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002e62:	78fa      	ldrb	r2, [r7, #3]
 8002e64:	6879      	ldr	r1, [r7, #4]
 8002e66:	4613      	mov	r3, r2
 8002e68:	011b      	lsls	r3, r3, #4
 8002e6a:	1a9b      	subs	r3, r3, r2
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	440b      	add	r3, r1
 8002e70:	3348      	adds	r3, #72	@ 0x48
 8002e72:	2200      	movs	r2, #0
 8002e74:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002e76:	78fa      	ldrb	r2, [r7, #3]
 8002e78:	6879      	ldr	r1, [r7, #4]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	011b      	lsls	r3, r3, #4
 8002e7e:	1a9b      	subs	r3, r3, r2
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	440b      	add	r3, r1
 8002e84:	331b      	adds	r3, #27
 8002e86:	2200      	movs	r2, #0
 8002e88:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002e8a:	78fa      	ldrb	r2, [r7, #3]
 8002e8c:	6879      	ldr	r1, [r7, #4]
 8002e8e:	4613      	mov	r3, r2
 8002e90:	011b      	lsls	r3, r3, #4
 8002e92:	1a9b      	subs	r3, r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	440b      	add	r3, r1
 8002e98:	3344      	adds	r3, #68	@ 0x44
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2b02      	cmp	r3, #2
 8002e9e:	d809      	bhi.n	8002eb4 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002ea0:	78fa      	ldrb	r2, [r7, #3]
 8002ea2:	6879      	ldr	r1, [r7, #4]
 8002ea4:	4613      	mov	r3, r2
 8002ea6:	011b      	lsls	r3, r3, #4
 8002ea8:	1a9b      	subs	r3, r3, r2
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	440b      	add	r3, r1
 8002eae:	331c      	adds	r3, #28
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002eb4:	78fb      	ldrb	r3, [r7, #3]
 8002eb6:	015a      	lsls	r2, r3, #5
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	4413      	add	r3, r2
 8002ebc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ec0:	685b      	ldr	r3, [r3, #4]
 8002ec2:	78fa      	ldrb	r2, [r7, #3]
 8002ec4:	0151      	lsls	r1, r2, #5
 8002ec6:	693a      	ldr	r2, [r7, #16]
 8002ec8:	440a      	add	r2, r1
 8002eca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ece:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ed2:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002ed4:	78fa      	ldrb	r2, [r7, #3]
 8002ed6:	6879      	ldr	r1, [r7, #4]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	011b      	lsls	r3, r3, #4
 8002edc:	1a9b      	subs	r3, r3, r2
 8002ede:	009b      	lsls	r3, r3, #2
 8002ee0:	440b      	add	r3, r1
 8002ee2:	334c      	adds	r3, #76	@ 0x4c
 8002ee4:	2204      	movs	r2, #4
 8002ee6:	701a      	strb	r2, [r3, #0]
 8002ee8:	e014      	b.n	8002f14 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002eea:	78fa      	ldrb	r2, [r7, #3]
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	1a9b      	subs	r3, r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	334c      	adds	r3, #76	@ 0x4c
 8002efa:	2202      	movs	r2, #2
 8002efc:	701a      	strb	r2, [r3, #0]
 8002efe:	e009      	b.n	8002f14 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f00:	78fa      	ldrb	r2, [r7, #3]
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	1a9b      	subs	r3, r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	334c      	adds	r3, #76	@ 0x4c
 8002f10:	2202      	movs	r2, #2
 8002f12:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f14:	78fa      	ldrb	r2, [r7, #3]
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	3326      	adds	r3, #38	@ 0x26
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d00b      	beq.n	8002f42 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002f2a:	78fa      	ldrb	r2, [r7, #3]
 8002f2c:	6879      	ldr	r1, [r7, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	1a9b      	subs	r3, r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	440b      	add	r3, r1
 8002f38:	3326      	adds	r3, #38	@ 0x26
 8002f3a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	f040 8136 	bne.w	80031ae <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002f42:	78fb      	ldrb	r3, [r7, #3]
 8002f44:	015a      	lsls	r2, r3, #5
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	4413      	add	r3, r2
 8002f4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002f58:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f60:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f62:	78fb      	ldrb	r3, [r7, #3]
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f6e:	461a      	mov	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6013      	str	r3, [r2, #0]
 8002f74:	e11b      	b.n	80031ae <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002f76:	78fa      	ldrb	r2, [r7, #3]
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	1a9b      	subs	r3, r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	440b      	add	r3, r1
 8002f84:	334d      	adds	r3, #77	@ 0x4d
 8002f86:	781b      	ldrb	r3, [r3, #0]
 8002f88:	2b03      	cmp	r3, #3
 8002f8a:	f040 8081 	bne.w	8003090 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f8e:	78fa      	ldrb	r2, [r7, #3]
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	4613      	mov	r3, r2
 8002f94:	011b      	lsls	r3, r3, #4
 8002f96:	1a9b      	subs	r3, r3, r2
 8002f98:	009b      	lsls	r3, r3, #2
 8002f9a:	440b      	add	r3, r1
 8002f9c:	334d      	adds	r3, #77	@ 0x4d
 8002f9e:	2202      	movs	r2, #2
 8002fa0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002fa2:	78fa      	ldrb	r2, [r7, #3]
 8002fa4:	6879      	ldr	r1, [r7, #4]
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	011b      	lsls	r3, r3, #4
 8002faa:	1a9b      	subs	r3, r3, r2
 8002fac:	009b      	lsls	r3, r3, #2
 8002fae:	440b      	add	r3, r1
 8002fb0:	331b      	adds	r3, #27
 8002fb2:	781b      	ldrb	r3, [r3, #0]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	f040 80fa 	bne.w	80031ae <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002fba:	78fa      	ldrb	r2, [r7, #3]
 8002fbc:	6879      	ldr	r1, [r7, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	011b      	lsls	r3, r3, #4
 8002fc2:	1a9b      	subs	r3, r3, r2
 8002fc4:	009b      	lsls	r3, r3, #2
 8002fc6:	440b      	add	r3, r1
 8002fc8:	334c      	adds	r3, #76	@ 0x4c
 8002fca:	2202      	movs	r2, #2
 8002fcc:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002fce:	78fb      	ldrb	r3, [r7, #3]
 8002fd0:	015a      	lsls	r2, r3, #5
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	78fa      	ldrb	r2, [r7, #3]
 8002fde:	0151      	lsls	r1, r2, #5
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	440a      	add	r2, r1
 8002fe4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002fe8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fec:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002fee:	78fb      	ldrb	r3, [r7, #3]
 8002ff0:	015a      	lsls	r2, r3, #5
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	4413      	add	r3, r2
 8002ff6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	78fa      	ldrb	r2, [r7, #3]
 8002ffe:	0151      	lsls	r1, r2, #5
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	440a      	add	r2, r1
 8003004:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003008:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800300c:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800300e:	78fb      	ldrb	r3, [r7, #3]
 8003010:	015a      	lsls	r2, r3, #5
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	4413      	add	r3, r2
 8003016:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	78fa      	ldrb	r2, [r7, #3]
 800301e:	0151      	lsls	r1, r2, #5
 8003020:	693a      	ldr	r2, [r7, #16]
 8003022:	440a      	add	r2, r1
 8003024:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003028:	f023 0320 	bic.w	r3, r3, #32
 800302c:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800302e:	78fa      	ldrb	r2, [r7, #3]
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	011b      	lsls	r3, r3, #4
 8003036:	1a9b      	subs	r3, r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	440b      	add	r3, r1
 800303c:	3326      	adds	r3, #38	@ 0x26
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d00b      	beq.n	800305c <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003044:	78fa      	ldrb	r2, [r7, #3]
 8003046:	6879      	ldr	r1, [r7, #4]
 8003048:	4613      	mov	r3, r2
 800304a:	011b      	lsls	r3, r3, #4
 800304c:	1a9b      	subs	r3, r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	440b      	add	r3, r1
 8003052:	3326      	adds	r3, #38	@ 0x26
 8003054:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003056:	2b02      	cmp	r3, #2
 8003058:	f040 80a9 	bne.w	80031ae <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800305c:	78fb      	ldrb	r3, [r7, #3]
 800305e:	015a      	lsls	r2, r3, #5
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	4413      	add	r3, r2
 8003064:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003072:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800307a:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800307c:	78fb      	ldrb	r3, [r7, #3]
 800307e:	015a      	lsls	r2, r3, #5
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	4413      	add	r3, r2
 8003084:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003088:	461a      	mov	r2, r3
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6013      	str	r3, [r2, #0]
 800308e:	e08e      	b.n	80031ae <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003090:	78fa      	ldrb	r2, [r7, #3]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	011b      	lsls	r3, r3, #4
 8003098:	1a9b      	subs	r3, r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	334d      	adds	r3, #77	@ 0x4d
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d143      	bne.n	800312e <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	1a9b      	subs	r3, r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	334d      	adds	r3, #77	@ 0x4d
 80030b6:	2202      	movs	r2, #2
 80030b8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030ba:	78fa      	ldrb	r2, [r7, #3]
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	1a9b      	subs	r3, r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	440b      	add	r3, r1
 80030c8:	334c      	adds	r3, #76	@ 0x4c
 80030ca:	2202      	movs	r2, #2
 80030cc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030ce:	78fa      	ldrb	r2, [r7, #3]
 80030d0:	6879      	ldr	r1, [r7, #4]
 80030d2:	4613      	mov	r3, r2
 80030d4:	011b      	lsls	r3, r3, #4
 80030d6:	1a9b      	subs	r3, r3, r2
 80030d8:	009b      	lsls	r3, r3, #2
 80030da:	440b      	add	r3, r1
 80030dc:	3326      	adds	r3, #38	@ 0x26
 80030de:	781b      	ldrb	r3, [r3, #0]
 80030e0:	2b00      	cmp	r3, #0
 80030e2:	d00a      	beq.n	80030fa <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80030e4:	78fa      	ldrb	r2, [r7, #3]
 80030e6:	6879      	ldr	r1, [r7, #4]
 80030e8:	4613      	mov	r3, r2
 80030ea:	011b      	lsls	r3, r3, #4
 80030ec:	1a9b      	subs	r3, r3, r2
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	3326      	adds	r3, #38	@ 0x26
 80030f4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030f6:	2b02      	cmp	r3, #2
 80030f8:	d159      	bne.n	80031ae <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80030fa:	78fb      	ldrb	r3, [r7, #3]
 80030fc:	015a      	lsls	r2, r3, #5
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	4413      	add	r3, r2
 8003102:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003110:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003118:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800311a:	78fb      	ldrb	r3, [r7, #3]
 800311c:	015a      	lsls	r2, r3, #5
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	4413      	add	r3, r2
 8003122:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003126:	461a      	mov	r2, r3
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	6013      	str	r3, [r2, #0]
 800312c:	e03f      	b.n	80031ae <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800312e:	78fa      	ldrb	r2, [r7, #3]
 8003130:	6879      	ldr	r1, [r7, #4]
 8003132:	4613      	mov	r3, r2
 8003134:	011b      	lsls	r3, r3, #4
 8003136:	1a9b      	subs	r3, r3, r2
 8003138:	009b      	lsls	r3, r3, #2
 800313a:	440b      	add	r3, r1
 800313c:	334d      	adds	r3, #77	@ 0x4d
 800313e:	781b      	ldrb	r3, [r3, #0]
 8003140:	2b08      	cmp	r3, #8
 8003142:	d126      	bne.n	8003192 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003144:	78fa      	ldrb	r2, [r7, #3]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	334d      	adds	r3, #77	@ 0x4d
 8003154:	2202      	movs	r2, #2
 8003156:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003158:	78fa      	ldrb	r2, [r7, #3]
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	3344      	adds	r3, #68	@ 0x44
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	1c59      	adds	r1, r3, #1
 800316c:	6878      	ldr	r0, [r7, #4]
 800316e:	4613      	mov	r3, r2
 8003170:	011b      	lsls	r3, r3, #4
 8003172:	1a9b      	subs	r3, r3, r2
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	4403      	add	r3, r0
 8003178:	3344      	adds	r3, #68	@ 0x44
 800317a:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800317c:	78fa      	ldrb	r2, [r7, #3]
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	011b      	lsls	r3, r3, #4
 8003184:	1a9b      	subs	r3, r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	334c      	adds	r3, #76	@ 0x4c
 800318c:	2204      	movs	r2, #4
 800318e:	701a      	strb	r2, [r3, #0]
 8003190:	e00d      	b.n	80031ae <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003192:	78fa      	ldrb	r2, [r7, #3]
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	1a9b      	subs	r3, r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	334d      	adds	r3, #77	@ 0x4d
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	f000 8100 	beq.w	80033aa <HCD_HC_IN_IRQHandler+0xcca>
 80031aa:	e000      	b.n	80031ae <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80031ac:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80031ae:	78fa      	ldrb	r2, [r7, #3]
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	4613      	mov	r3, r2
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	1a9b      	subs	r3, r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	440b      	add	r3, r1
 80031bc:	334c      	adds	r3, #76	@ 0x4c
 80031be:	781a      	ldrb	r2, [r3, #0]
 80031c0:	78fb      	ldrb	r3, [r7, #3]
 80031c2:	4619      	mov	r1, r3
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f7ff fa7d 	bl	80026c4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80031ca:	e0ef      	b.n	80033ac <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	78fa      	ldrb	r2, [r7, #3]
 80031d2:	4611      	mov	r1, r2
 80031d4:	4618      	mov	r0, r3
 80031d6:	f004 fa41 	bl	800765c <USB_ReadChInterrupts>
 80031da:	4603      	mov	r3, r0
 80031dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031e0:	2b40      	cmp	r3, #64	@ 0x40
 80031e2:	d12f      	bne.n	8003244 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80031e4:	78fb      	ldrb	r3, [r7, #3]
 80031e6:	015a      	lsls	r2, r3, #5
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4413      	add	r3, r2
 80031ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031f0:	461a      	mov	r2, r3
 80031f2:	2340      	movs	r3, #64	@ 0x40
 80031f4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80031f6:	78fa      	ldrb	r2, [r7, #3]
 80031f8:	6879      	ldr	r1, [r7, #4]
 80031fa:	4613      	mov	r3, r2
 80031fc:	011b      	lsls	r3, r3, #4
 80031fe:	1a9b      	subs	r3, r3, r2
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	440b      	add	r3, r1
 8003204:	334d      	adds	r3, #77	@ 0x4d
 8003206:	2205      	movs	r2, #5
 8003208:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800320a:	78fa      	ldrb	r2, [r7, #3]
 800320c:	6879      	ldr	r1, [r7, #4]
 800320e:	4613      	mov	r3, r2
 8003210:	011b      	lsls	r3, r3, #4
 8003212:	1a9b      	subs	r3, r3, r2
 8003214:	009b      	lsls	r3, r3, #2
 8003216:	440b      	add	r3, r1
 8003218:	331a      	adds	r3, #26
 800321a:	781b      	ldrb	r3, [r3, #0]
 800321c:	2b00      	cmp	r3, #0
 800321e:	d109      	bne.n	8003234 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003220:	78fa      	ldrb	r2, [r7, #3]
 8003222:	6879      	ldr	r1, [r7, #4]
 8003224:	4613      	mov	r3, r2
 8003226:	011b      	lsls	r3, r3, #4
 8003228:	1a9b      	subs	r3, r3, r2
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	3344      	adds	r3, #68	@ 0x44
 8003230:	2200      	movs	r2, #0
 8003232:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	78fa      	ldrb	r2, [r7, #3]
 800323a:	4611      	mov	r1, r2
 800323c:	4618      	mov	r0, r3
 800323e:	f004 fb7f 	bl	8007940 <USB_HC_Halt>
 8003242:	e0b3      	b.n	80033ac <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	78fa      	ldrb	r2, [r7, #3]
 800324a:	4611      	mov	r1, r2
 800324c:	4618      	mov	r0, r3
 800324e:	f004 fa05 	bl	800765c <USB_ReadChInterrupts>
 8003252:	4603      	mov	r3, r0
 8003254:	f003 0310 	and.w	r3, r3, #16
 8003258:	2b10      	cmp	r3, #16
 800325a:	f040 80a7 	bne.w	80033ac <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800325e:	78fa      	ldrb	r2, [r7, #3]
 8003260:	6879      	ldr	r1, [r7, #4]
 8003262:	4613      	mov	r3, r2
 8003264:	011b      	lsls	r3, r3, #4
 8003266:	1a9b      	subs	r3, r3, r2
 8003268:	009b      	lsls	r3, r3, #2
 800326a:	440b      	add	r3, r1
 800326c:	3326      	adds	r3, #38	@ 0x26
 800326e:	781b      	ldrb	r3, [r3, #0]
 8003270:	2b03      	cmp	r3, #3
 8003272:	d11b      	bne.n	80032ac <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003274:	78fa      	ldrb	r2, [r7, #3]
 8003276:	6879      	ldr	r1, [r7, #4]
 8003278:	4613      	mov	r3, r2
 800327a:	011b      	lsls	r3, r3, #4
 800327c:	1a9b      	subs	r3, r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	440b      	add	r3, r1
 8003282:	3344      	adds	r3, #68	@ 0x44
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003288:	78fa      	ldrb	r2, [r7, #3]
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	4613      	mov	r3, r2
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	1a9b      	subs	r3, r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	334d      	adds	r3, #77	@ 0x4d
 8003298:	2204      	movs	r2, #4
 800329a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	78fa      	ldrb	r2, [r7, #3]
 80032a2:	4611      	mov	r1, r2
 80032a4:	4618      	mov	r0, r3
 80032a6:	f004 fb4b 	bl	8007940 <USB_HC_Halt>
 80032aa:	e03f      	b.n	800332c <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032ac:	78fa      	ldrb	r2, [r7, #3]
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	1a9b      	subs	r3, r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	3326      	adds	r3, #38	@ 0x26
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d00a      	beq.n	80032d8 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80032c2:	78fa      	ldrb	r2, [r7, #3]
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	1a9b      	subs	r3, r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	440b      	add	r3, r1
 80032d0:	3326      	adds	r3, #38	@ 0x26
 80032d2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032d4:	2b02      	cmp	r3, #2
 80032d6:	d129      	bne.n	800332c <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80032d8:	78fa      	ldrb	r2, [r7, #3]
 80032da:	6879      	ldr	r1, [r7, #4]
 80032dc:	4613      	mov	r3, r2
 80032de:	011b      	lsls	r3, r3, #4
 80032e0:	1a9b      	subs	r3, r3, r2
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	440b      	add	r3, r1
 80032e6:	3344      	adds	r3, #68	@ 0x44
 80032e8:	2200      	movs	r2, #0
 80032ea:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	799b      	ldrb	r3, [r3, #6]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d00a      	beq.n	800330a <HCD_HC_IN_IRQHandler+0xc2a>
 80032f4:	78fa      	ldrb	r2, [r7, #3]
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	1a9b      	subs	r3, r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	331b      	adds	r3, #27
 8003304:	781b      	ldrb	r3, [r3, #0]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d110      	bne.n	800332c <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 800330a:	78fa      	ldrb	r2, [r7, #3]
 800330c:	6879      	ldr	r1, [r7, #4]
 800330e:	4613      	mov	r3, r2
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	1a9b      	subs	r3, r3, r2
 8003314:	009b      	lsls	r3, r3, #2
 8003316:	440b      	add	r3, r1
 8003318:	334d      	adds	r3, #77	@ 0x4d
 800331a:	2204      	movs	r2, #4
 800331c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	78fa      	ldrb	r2, [r7, #3]
 8003324:	4611      	mov	r1, r2
 8003326:	4618      	mov	r0, r3
 8003328:	f004 fb0a 	bl	8007940 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800332c:	78fa      	ldrb	r2, [r7, #3]
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	011b      	lsls	r3, r3, #4
 8003334:	1a9b      	subs	r3, r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	331b      	adds	r3, #27
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d129      	bne.n	8003396 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003342:	78fa      	ldrb	r2, [r7, #3]
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	011b      	lsls	r3, r3, #4
 800334a:	1a9b      	subs	r3, r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	331b      	adds	r3, #27
 8003352:	2200      	movs	r2, #0
 8003354:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003356:	78fb      	ldrb	r3, [r7, #3]
 8003358:	015a      	lsls	r2, r3, #5
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	4413      	add	r3, r2
 800335e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	78fa      	ldrb	r2, [r7, #3]
 8003366:	0151      	lsls	r1, r2, #5
 8003368:	693a      	ldr	r2, [r7, #16]
 800336a:	440a      	add	r2, r1
 800336c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003370:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003374:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003376:	78fb      	ldrb	r3, [r7, #3]
 8003378:	015a      	lsls	r2, r3, #5
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	4413      	add	r3, r2
 800337e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003382:	68db      	ldr	r3, [r3, #12]
 8003384:	78fa      	ldrb	r2, [r7, #3]
 8003386:	0151      	lsls	r1, r2, #5
 8003388:	693a      	ldr	r2, [r7, #16]
 800338a:	440a      	add	r2, r1
 800338c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003390:	f043 0320 	orr.w	r3, r3, #32
 8003394:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003396:	78fb      	ldrb	r3, [r7, #3]
 8003398:	015a      	lsls	r2, r3, #5
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	4413      	add	r3, r2
 800339e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033a2:	461a      	mov	r2, r3
 80033a4:	2310      	movs	r3, #16
 80033a6:	6093      	str	r3, [r2, #8]
 80033a8:	e000      	b.n	80033ac <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80033aa:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80033ac:	3718      	adds	r7, #24
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}

080033b2 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80033b2:	b580      	push	{r7, lr}
 80033b4:	b086      	sub	sp, #24
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	6078      	str	r0, [r7, #4]
 80033ba:	460b      	mov	r3, r1
 80033bc:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033c4:	697b      	ldr	r3, [r7, #20]
 80033c6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	78fa      	ldrb	r2, [r7, #3]
 80033ce:	4611      	mov	r1, r2
 80033d0:	4618      	mov	r0, r3
 80033d2:	f004 f943 	bl	800765c <USB_ReadChInterrupts>
 80033d6:	4603      	mov	r3, r0
 80033d8:	f003 0304 	and.w	r3, r3, #4
 80033dc:	2b04      	cmp	r3, #4
 80033de:	d11b      	bne.n	8003418 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80033e0:	78fb      	ldrb	r3, [r7, #3]
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033ec:	461a      	mov	r2, r3
 80033ee:	2304      	movs	r3, #4
 80033f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80033f2:	78fa      	ldrb	r2, [r7, #3]
 80033f4:	6879      	ldr	r1, [r7, #4]
 80033f6:	4613      	mov	r3, r2
 80033f8:	011b      	lsls	r3, r3, #4
 80033fa:	1a9b      	subs	r3, r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	440b      	add	r3, r1
 8003400:	334d      	adds	r3, #77	@ 0x4d
 8003402:	2207      	movs	r2, #7
 8003404:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	78fa      	ldrb	r2, [r7, #3]
 800340c:	4611      	mov	r1, r2
 800340e:	4618      	mov	r0, r3
 8003410:	f004 fa96 	bl	8007940 <USB_HC_Halt>
 8003414:	f000 bc89 	b.w	8003d2a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	78fa      	ldrb	r2, [r7, #3]
 800341e:	4611      	mov	r1, r2
 8003420:	4618      	mov	r0, r3
 8003422:	f004 f91b 	bl	800765c <USB_ReadChInterrupts>
 8003426:	4603      	mov	r3, r0
 8003428:	f003 0320 	and.w	r3, r3, #32
 800342c:	2b20      	cmp	r3, #32
 800342e:	f040 8082 	bne.w	8003536 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003432:	78fb      	ldrb	r3, [r7, #3]
 8003434:	015a      	lsls	r2, r3, #5
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	4413      	add	r3, r2
 800343a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800343e:	461a      	mov	r2, r3
 8003440:	2320      	movs	r3, #32
 8003442:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003444:	78fa      	ldrb	r2, [r7, #3]
 8003446:	6879      	ldr	r1, [r7, #4]
 8003448:	4613      	mov	r3, r2
 800344a:	011b      	lsls	r3, r3, #4
 800344c:	1a9b      	subs	r3, r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	3319      	adds	r3, #25
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	2b01      	cmp	r3, #1
 8003458:	d124      	bne.n	80034a4 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	6879      	ldr	r1, [r7, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	011b      	lsls	r3, r3, #4
 8003462:	1a9b      	subs	r3, r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	440b      	add	r3, r1
 8003468:	3319      	adds	r3, #25
 800346a:	2200      	movs	r2, #0
 800346c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800346e:	78fa      	ldrb	r2, [r7, #3]
 8003470:	6879      	ldr	r1, [r7, #4]
 8003472:	4613      	mov	r3, r2
 8003474:	011b      	lsls	r3, r3, #4
 8003476:	1a9b      	subs	r3, r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	440b      	add	r3, r1
 800347c:	334c      	adds	r3, #76	@ 0x4c
 800347e:	2202      	movs	r2, #2
 8003480:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003482:	78fa      	ldrb	r2, [r7, #3]
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	4613      	mov	r3, r2
 8003488:	011b      	lsls	r3, r3, #4
 800348a:	1a9b      	subs	r3, r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	440b      	add	r3, r1
 8003490:	334d      	adds	r3, #77	@ 0x4d
 8003492:	2203      	movs	r2, #3
 8003494:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	78fa      	ldrb	r2, [r7, #3]
 800349c:	4611      	mov	r1, r2
 800349e:	4618      	mov	r0, r3
 80034a0:	f004 fa4e 	bl	8007940 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80034a4:	78fa      	ldrb	r2, [r7, #3]
 80034a6:	6879      	ldr	r1, [r7, #4]
 80034a8:	4613      	mov	r3, r2
 80034aa:	011b      	lsls	r3, r3, #4
 80034ac:	1a9b      	subs	r3, r3, r2
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	440b      	add	r3, r1
 80034b2:	331a      	adds	r3, #26
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	2b01      	cmp	r3, #1
 80034b8:	f040 8437 	bne.w	8003d2a <HCD_HC_OUT_IRQHandler+0x978>
 80034bc:	78fa      	ldrb	r2, [r7, #3]
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	4613      	mov	r3, r2
 80034c2:	011b      	lsls	r3, r3, #4
 80034c4:	1a9b      	subs	r3, r3, r2
 80034c6:	009b      	lsls	r3, r3, #2
 80034c8:	440b      	add	r3, r1
 80034ca:	331b      	adds	r3, #27
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	f040 842b 	bne.w	8003d2a <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80034d4:	78fa      	ldrb	r2, [r7, #3]
 80034d6:	6879      	ldr	r1, [r7, #4]
 80034d8:	4613      	mov	r3, r2
 80034da:	011b      	lsls	r3, r3, #4
 80034dc:	1a9b      	subs	r3, r3, r2
 80034de:	009b      	lsls	r3, r3, #2
 80034e0:	440b      	add	r3, r1
 80034e2:	3326      	adds	r3, #38	@ 0x26
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	2b01      	cmp	r3, #1
 80034e8:	d009      	beq.n	80034fe <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80034ea:	78fa      	ldrb	r2, [r7, #3]
 80034ec:	6879      	ldr	r1, [r7, #4]
 80034ee:	4613      	mov	r3, r2
 80034f0:	011b      	lsls	r3, r3, #4
 80034f2:	1a9b      	subs	r3, r3, r2
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	440b      	add	r3, r1
 80034f8:	331b      	adds	r3, #27
 80034fa:	2201      	movs	r2, #1
 80034fc:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80034fe:	78fa      	ldrb	r2, [r7, #3]
 8003500:	6879      	ldr	r1, [r7, #4]
 8003502:	4613      	mov	r3, r2
 8003504:	011b      	lsls	r3, r3, #4
 8003506:	1a9b      	subs	r3, r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	440b      	add	r3, r1
 800350c:	334d      	adds	r3, #77	@ 0x4d
 800350e:	2203      	movs	r2, #3
 8003510:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	78fa      	ldrb	r2, [r7, #3]
 8003518:	4611      	mov	r1, r2
 800351a:	4618      	mov	r0, r3
 800351c:	f004 fa10 	bl	8007940 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003520:	78fa      	ldrb	r2, [r7, #3]
 8003522:	6879      	ldr	r1, [r7, #4]
 8003524:	4613      	mov	r3, r2
 8003526:	011b      	lsls	r3, r3, #4
 8003528:	1a9b      	subs	r3, r3, r2
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	440b      	add	r3, r1
 800352e:	3344      	adds	r3, #68	@ 0x44
 8003530:	2200      	movs	r2, #0
 8003532:	601a      	str	r2, [r3, #0]
 8003534:	e3f9      	b.n	8003d2a <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	78fa      	ldrb	r2, [r7, #3]
 800353c:	4611      	mov	r1, r2
 800353e:	4618      	mov	r0, r3
 8003540:	f004 f88c 	bl	800765c <USB_ReadChInterrupts>
 8003544:	4603      	mov	r3, r0
 8003546:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800354a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800354e:	d111      	bne.n	8003574 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003550:	78fb      	ldrb	r3, [r7, #3]
 8003552:	015a      	lsls	r2, r3, #5
 8003554:	693b      	ldr	r3, [r7, #16]
 8003556:	4413      	add	r3, r2
 8003558:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800355c:	461a      	mov	r2, r3
 800355e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003562:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	78fa      	ldrb	r2, [r7, #3]
 800356a:	4611      	mov	r1, r2
 800356c:	4618      	mov	r0, r3
 800356e:	f004 f9e7 	bl	8007940 <USB_HC_Halt>
 8003572:	e3da      	b.n	8003d2a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	78fa      	ldrb	r2, [r7, #3]
 800357a:	4611      	mov	r1, r2
 800357c:	4618      	mov	r0, r3
 800357e:	f004 f86d 	bl	800765c <USB_ReadChInterrupts>
 8003582:	4603      	mov	r3, r0
 8003584:	f003 0301 	and.w	r3, r3, #1
 8003588:	2b01      	cmp	r3, #1
 800358a:	d168      	bne.n	800365e <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800358c:	78fa      	ldrb	r2, [r7, #3]
 800358e:	6879      	ldr	r1, [r7, #4]
 8003590:	4613      	mov	r3, r2
 8003592:	011b      	lsls	r3, r3, #4
 8003594:	1a9b      	subs	r3, r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	440b      	add	r3, r1
 800359a:	3344      	adds	r3, #68	@ 0x44
 800359c:	2200      	movs	r2, #0
 800359e:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	78fa      	ldrb	r2, [r7, #3]
 80035a6:	4611      	mov	r1, r2
 80035a8:	4618      	mov	r0, r3
 80035aa:	f004 f857 	bl	800765c <USB_ReadChInterrupts>
 80035ae:	4603      	mov	r3, r0
 80035b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b4:	2b40      	cmp	r3, #64	@ 0x40
 80035b6:	d112      	bne.n	80035de <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80035b8:	78fa      	ldrb	r2, [r7, #3]
 80035ba:	6879      	ldr	r1, [r7, #4]
 80035bc:	4613      	mov	r3, r2
 80035be:	011b      	lsls	r3, r3, #4
 80035c0:	1a9b      	subs	r3, r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	440b      	add	r3, r1
 80035c6:	3319      	adds	r3, #25
 80035c8:	2201      	movs	r2, #1
 80035ca:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80035cc:	78fb      	ldrb	r3, [r7, #3]
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035d8:	461a      	mov	r2, r3
 80035da:	2340      	movs	r3, #64	@ 0x40
 80035dc:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80035de:	78fa      	ldrb	r2, [r7, #3]
 80035e0:	6879      	ldr	r1, [r7, #4]
 80035e2:	4613      	mov	r3, r2
 80035e4:	011b      	lsls	r3, r3, #4
 80035e6:	1a9b      	subs	r3, r3, r2
 80035e8:	009b      	lsls	r3, r3, #2
 80035ea:	440b      	add	r3, r1
 80035ec:	331b      	adds	r3, #27
 80035ee:	781b      	ldrb	r3, [r3, #0]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d019      	beq.n	8003628 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80035f4:	78fa      	ldrb	r2, [r7, #3]
 80035f6:	6879      	ldr	r1, [r7, #4]
 80035f8:	4613      	mov	r3, r2
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	1a9b      	subs	r3, r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	440b      	add	r3, r1
 8003602:	331b      	adds	r3, #27
 8003604:	2200      	movs	r2, #0
 8003606:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003608:	78fb      	ldrb	r3, [r7, #3]
 800360a:	015a      	lsls	r2, r3, #5
 800360c:	693b      	ldr	r3, [r7, #16]
 800360e:	4413      	add	r3, r2
 8003610:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	78fa      	ldrb	r2, [r7, #3]
 8003618:	0151      	lsls	r1, r2, #5
 800361a:	693a      	ldr	r2, [r7, #16]
 800361c:	440a      	add	r2, r1
 800361e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003622:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003626:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8003628:	78fb      	ldrb	r3, [r7, #3]
 800362a:	015a      	lsls	r2, r3, #5
 800362c:	693b      	ldr	r3, [r7, #16]
 800362e:	4413      	add	r3, r2
 8003630:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003634:	461a      	mov	r2, r3
 8003636:	2301      	movs	r3, #1
 8003638:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 800363a:	78fa      	ldrb	r2, [r7, #3]
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	1a9b      	subs	r3, r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	440b      	add	r3, r1
 8003648:	334d      	adds	r3, #77	@ 0x4d
 800364a:	2201      	movs	r2, #1
 800364c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	78fa      	ldrb	r2, [r7, #3]
 8003654:	4611      	mov	r1, r2
 8003656:	4618      	mov	r0, r3
 8003658:	f004 f972 	bl	8007940 <USB_HC_Halt>
 800365c:	e365      	b.n	8003d2a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	78fa      	ldrb	r2, [r7, #3]
 8003664:	4611      	mov	r1, r2
 8003666:	4618      	mov	r0, r3
 8003668:	f003 fff8 	bl	800765c <USB_ReadChInterrupts>
 800366c:	4603      	mov	r3, r0
 800366e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003672:	2b40      	cmp	r3, #64	@ 0x40
 8003674:	d139      	bne.n	80036ea <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003676:	78fa      	ldrb	r2, [r7, #3]
 8003678:	6879      	ldr	r1, [r7, #4]
 800367a:	4613      	mov	r3, r2
 800367c:	011b      	lsls	r3, r3, #4
 800367e:	1a9b      	subs	r3, r3, r2
 8003680:	009b      	lsls	r3, r3, #2
 8003682:	440b      	add	r3, r1
 8003684:	334d      	adds	r3, #77	@ 0x4d
 8003686:	2205      	movs	r2, #5
 8003688:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 800368a:	78fa      	ldrb	r2, [r7, #3]
 800368c:	6879      	ldr	r1, [r7, #4]
 800368e:	4613      	mov	r3, r2
 8003690:	011b      	lsls	r3, r3, #4
 8003692:	1a9b      	subs	r3, r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	440b      	add	r3, r1
 8003698:	331a      	adds	r3, #26
 800369a:	781b      	ldrb	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d109      	bne.n	80036b4 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80036a0:	78fa      	ldrb	r2, [r7, #3]
 80036a2:	6879      	ldr	r1, [r7, #4]
 80036a4:	4613      	mov	r3, r2
 80036a6:	011b      	lsls	r3, r3, #4
 80036a8:	1a9b      	subs	r3, r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	440b      	add	r3, r1
 80036ae:	3319      	adds	r3, #25
 80036b0:	2201      	movs	r2, #1
 80036b2:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80036b4:	78fa      	ldrb	r2, [r7, #3]
 80036b6:	6879      	ldr	r1, [r7, #4]
 80036b8:	4613      	mov	r3, r2
 80036ba:	011b      	lsls	r3, r3, #4
 80036bc:	1a9b      	subs	r3, r3, r2
 80036be:	009b      	lsls	r3, r3, #2
 80036c0:	440b      	add	r3, r1
 80036c2:	3344      	adds	r3, #68	@ 0x44
 80036c4:	2200      	movs	r2, #0
 80036c6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	78fa      	ldrb	r2, [r7, #3]
 80036ce:	4611      	mov	r1, r2
 80036d0:	4618      	mov	r0, r3
 80036d2:	f004 f935 	bl	8007940 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80036d6:	78fb      	ldrb	r3, [r7, #3]
 80036d8:	015a      	lsls	r2, r3, #5
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	4413      	add	r3, r2
 80036de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036e2:	461a      	mov	r2, r3
 80036e4:	2340      	movs	r3, #64	@ 0x40
 80036e6:	6093      	str	r3, [r2, #8]
 80036e8:	e31f      	b.n	8003d2a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	78fa      	ldrb	r2, [r7, #3]
 80036f0:	4611      	mov	r1, r2
 80036f2:	4618      	mov	r0, r3
 80036f4:	f003 ffb2 	bl	800765c <USB_ReadChInterrupts>
 80036f8:	4603      	mov	r3, r0
 80036fa:	f003 0308 	and.w	r3, r3, #8
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d11a      	bne.n	8003738 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003702:	78fb      	ldrb	r3, [r7, #3]
 8003704:	015a      	lsls	r2, r3, #5
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	4413      	add	r3, r2
 800370a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800370e:	461a      	mov	r2, r3
 8003710:	2308      	movs	r3, #8
 8003712:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8003714:	78fa      	ldrb	r2, [r7, #3]
 8003716:	6879      	ldr	r1, [r7, #4]
 8003718:	4613      	mov	r3, r2
 800371a:	011b      	lsls	r3, r3, #4
 800371c:	1a9b      	subs	r3, r3, r2
 800371e:	009b      	lsls	r3, r3, #2
 8003720:	440b      	add	r3, r1
 8003722:	334d      	adds	r3, #77	@ 0x4d
 8003724:	2206      	movs	r2, #6
 8003726:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	78fa      	ldrb	r2, [r7, #3]
 800372e:	4611      	mov	r1, r2
 8003730:	4618      	mov	r0, r3
 8003732:	f004 f905 	bl	8007940 <USB_HC_Halt>
 8003736:	e2f8      	b.n	8003d2a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	78fa      	ldrb	r2, [r7, #3]
 800373e:	4611      	mov	r1, r2
 8003740:	4618      	mov	r0, r3
 8003742:	f003 ff8b 	bl	800765c <USB_ReadChInterrupts>
 8003746:	4603      	mov	r3, r0
 8003748:	f003 0310 	and.w	r3, r3, #16
 800374c:	2b10      	cmp	r3, #16
 800374e:	d144      	bne.n	80037da <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003750:	78fa      	ldrb	r2, [r7, #3]
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	4613      	mov	r3, r2
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	1a9b      	subs	r3, r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	3344      	adds	r3, #68	@ 0x44
 8003760:	2200      	movs	r2, #0
 8003762:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003764:	78fa      	ldrb	r2, [r7, #3]
 8003766:	6879      	ldr	r1, [r7, #4]
 8003768:	4613      	mov	r3, r2
 800376a:	011b      	lsls	r3, r3, #4
 800376c:	1a9b      	subs	r3, r3, r2
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	440b      	add	r3, r1
 8003772:	334d      	adds	r3, #77	@ 0x4d
 8003774:	2204      	movs	r2, #4
 8003776:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003778:	78fa      	ldrb	r2, [r7, #3]
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	4613      	mov	r3, r2
 800377e:	011b      	lsls	r3, r3, #4
 8003780:	1a9b      	subs	r3, r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	440b      	add	r3, r1
 8003786:	3319      	adds	r3, #25
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d114      	bne.n	80037b8 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800378e:	78fa      	ldrb	r2, [r7, #3]
 8003790:	6879      	ldr	r1, [r7, #4]
 8003792:	4613      	mov	r3, r2
 8003794:	011b      	lsls	r3, r3, #4
 8003796:	1a9b      	subs	r3, r3, r2
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	440b      	add	r3, r1
 800379c:	3318      	adds	r3, #24
 800379e:	781b      	ldrb	r3, [r3, #0]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d109      	bne.n	80037b8 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80037a4:	78fa      	ldrb	r2, [r7, #3]
 80037a6:	6879      	ldr	r1, [r7, #4]
 80037a8:	4613      	mov	r3, r2
 80037aa:	011b      	lsls	r3, r3, #4
 80037ac:	1a9b      	subs	r3, r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	440b      	add	r3, r1
 80037b2:	3319      	adds	r3, #25
 80037b4:	2201      	movs	r2, #1
 80037b6:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	78fa      	ldrb	r2, [r7, #3]
 80037be:	4611      	mov	r1, r2
 80037c0:	4618      	mov	r0, r3
 80037c2:	f004 f8bd 	bl	8007940 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80037c6:	78fb      	ldrb	r3, [r7, #3]
 80037c8:	015a      	lsls	r2, r3, #5
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	4413      	add	r3, r2
 80037ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037d2:	461a      	mov	r2, r3
 80037d4:	2310      	movs	r3, #16
 80037d6:	6093      	str	r3, [r2, #8]
 80037d8:	e2a7      	b.n	8003d2a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	78fa      	ldrb	r2, [r7, #3]
 80037e0:	4611      	mov	r1, r2
 80037e2:	4618      	mov	r0, r3
 80037e4:	f003 ff3a 	bl	800765c <USB_ReadChInterrupts>
 80037e8:	4603      	mov	r3, r0
 80037ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037ee:	2b80      	cmp	r3, #128	@ 0x80
 80037f0:	f040 8083 	bne.w	80038fa <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	799b      	ldrb	r3, [r3, #6]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d111      	bne.n	8003820 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80037fc:	78fa      	ldrb	r2, [r7, #3]
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	4613      	mov	r3, r2
 8003802:	011b      	lsls	r3, r3, #4
 8003804:	1a9b      	subs	r3, r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	440b      	add	r3, r1
 800380a:	334d      	adds	r3, #77	@ 0x4d
 800380c:	2207      	movs	r2, #7
 800380e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	78fa      	ldrb	r2, [r7, #3]
 8003816:	4611      	mov	r1, r2
 8003818:	4618      	mov	r0, r3
 800381a:	f004 f891 	bl	8007940 <USB_HC_Halt>
 800381e:	e062      	b.n	80038e6 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003820:	78fa      	ldrb	r2, [r7, #3]
 8003822:	6879      	ldr	r1, [r7, #4]
 8003824:	4613      	mov	r3, r2
 8003826:	011b      	lsls	r3, r3, #4
 8003828:	1a9b      	subs	r3, r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	3344      	adds	r3, #68	@ 0x44
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	1c59      	adds	r1, r3, #1
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	1a9b      	subs	r3, r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	4403      	add	r3, r0
 8003840:	3344      	adds	r3, #68	@ 0x44
 8003842:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003844:	78fa      	ldrb	r2, [r7, #3]
 8003846:	6879      	ldr	r1, [r7, #4]
 8003848:	4613      	mov	r3, r2
 800384a:	011b      	lsls	r3, r3, #4
 800384c:	1a9b      	subs	r3, r3, r2
 800384e:	009b      	lsls	r3, r3, #2
 8003850:	440b      	add	r3, r1
 8003852:	3344      	adds	r3, #68	@ 0x44
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b02      	cmp	r3, #2
 8003858:	d922      	bls.n	80038a0 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800385a:	78fa      	ldrb	r2, [r7, #3]
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	1a9b      	subs	r3, r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	440b      	add	r3, r1
 8003868:	3344      	adds	r3, #68	@ 0x44
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800386e:	78fa      	ldrb	r2, [r7, #3]
 8003870:	6879      	ldr	r1, [r7, #4]
 8003872:	4613      	mov	r3, r2
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	1a9b      	subs	r3, r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	440b      	add	r3, r1
 800387c:	334c      	adds	r3, #76	@ 0x4c
 800387e:	2204      	movs	r2, #4
 8003880:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003882:	78fa      	ldrb	r2, [r7, #3]
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	4613      	mov	r3, r2
 8003888:	011b      	lsls	r3, r3, #4
 800388a:	1a9b      	subs	r3, r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	440b      	add	r3, r1
 8003890:	334c      	adds	r3, #76	@ 0x4c
 8003892:	781a      	ldrb	r2, [r3, #0]
 8003894:	78fb      	ldrb	r3, [r7, #3]
 8003896:	4619      	mov	r1, r3
 8003898:	6878      	ldr	r0, [r7, #4]
 800389a:	f7fe ff13 	bl	80026c4 <HAL_HCD_HC_NotifyURBChange_Callback>
 800389e:	e022      	b.n	80038e6 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80038a0:	78fa      	ldrb	r2, [r7, #3]
 80038a2:	6879      	ldr	r1, [r7, #4]
 80038a4:	4613      	mov	r3, r2
 80038a6:	011b      	lsls	r3, r3, #4
 80038a8:	1a9b      	subs	r3, r3, r2
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	440b      	add	r3, r1
 80038ae:	334c      	adds	r3, #76	@ 0x4c
 80038b0:	2202      	movs	r2, #2
 80038b2:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80038b4:	78fb      	ldrb	r3, [r7, #3]
 80038b6:	015a      	lsls	r2, r3, #5
 80038b8:	693b      	ldr	r3, [r7, #16]
 80038ba:	4413      	add	r3, r2
 80038bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80038ca:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80038d2:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80038d4:	78fb      	ldrb	r3, [r7, #3]
 80038d6:	015a      	lsls	r2, r3, #5
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	4413      	add	r3, r2
 80038dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038e0:	461a      	mov	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80038e6:	78fb      	ldrb	r3, [r7, #3]
 80038e8:	015a      	lsls	r2, r3, #5
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	4413      	add	r3, r2
 80038ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038f2:	461a      	mov	r2, r3
 80038f4:	2380      	movs	r3, #128	@ 0x80
 80038f6:	6093      	str	r3, [r2, #8]
 80038f8:	e217      	b.n	8003d2a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	78fa      	ldrb	r2, [r7, #3]
 8003900:	4611      	mov	r1, r2
 8003902:	4618      	mov	r0, r3
 8003904:	f003 feaa 	bl	800765c <USB_ReadChInterrupts>
 8003908:	4603      	mov	r3, r0
 800390a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800390e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003912:	d11b      	bne.n	800394c <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003914:	78fa      	ldrb	r2, [r7, #3]
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	4613      	mov	r3, r2
 800391a:	011b      	lsls	r3, r3, #4
 800391c:	1a9b      	subs	r3, r3, r2
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	334d      	adds	r3, #77	@ 0x4d
 8003924:	2209      	movs	r2, #9
 8003926:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	78fa      	ldrb	r2, [r7, #3]
 800392e:	4611      	mov	r1, r2
 8003930:	4618      	mov	r0, r3
 8003932:	f004 f805 	bl	8007940 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003936:	78fb      	ldrb	r3, [r7, #3]
 8003938:	015a      	lsls	r2, r3, #5
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	4413      	add	r3, r2
 800393e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003942:	461a      	mov	r2, r3
 8003944:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003948:	6093      	str	r3, [r2, #8]
 800394a:	e1ee      	b.n	8003d2a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	78fa      	ldrb	r2, [r7, #3]
 8003952:	4611      	mov	r1, r2
 8003954:	4618      	mov	r0, r3
 8003956:	f003 fe81 	bl	800765c <USB_ReadChInterrupts>
 800395a:	4603      	mov	r3, r0
 800395c:	f003 0302 	and.w	r3, r3, #2
 8003960:	2b02      	cmp	r3, #2
 8003962:	f040 81df 	bne.w	8003d24 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003966:	78fb      	ldrb	r3, [r7, #3]
 8003968:	015a      	lsls	r2, r3, #5
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	4413      	add	r3, r2
 800396e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003972:	461a      	mov	r2, r3
 8003974:	2302      	movs	r3, #2
 8003976:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003978:	78fa      	ldrb	r2, [r7, #3]
 800397a:	6879      	ldr	r1, [r7, #4]
 800397c:	4613      	mov	r3, r2
 800397e:	011b      	lsls	r3, r3, #4
 8003980:	1a9b      	subs	r3, r3, r2
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	334d      	adds	r3, #77	@ 0x4d
 8003988:	781b      	ldrb	r3, [r3, #0]
 800398a:	2b01      	cmp	r3, #1
 800398c:	f040 8093 	bne.w	8003ab6 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003990:	78fa      	ldrb	r2, [r7, #3]
 8003992:	6879      	ldr	r1, [r7, #4]
 8003994:	4613      	mov	r3, r2
 8003996:	011b      	lsls	r3, r3, #4
 8003998:	1a9b      	subs	r3, r3, r2
 800399a:	009b      	lsls	r3, r3, #2
 800399c:	440b      	add	r3, r1
 800399e:	334d      	adds	r3, #77	@ 0x4d
 80039a0:	2202      	movs	r2, #2
 80039a2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80039a4:	78fa      	ldrb	r2, [r7, #3]
 80039a6:	6879      	ldr	r1, [r7, #4]
 80039a8:	4613      	mov	r3, r2
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	1a9b      	subs	r3, r3, r2
 80039ae:	009b      	lsls	r3, r3, #2
 80039b0:	440b      	add	r3, r1
 80039b2:	334c      	adds	r3, #76	@ 0x4c
 80039b4:	2201      	movs	r2, #1
 80039b6:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80039b8:	78fa      	ldrb	r2, [r7, #3]
 80039ba:	6879      	ldr	r1, [r7, #4]
 80039bc:	4613      	mov	r3, r2
 80039be:	011b      	lsls	r3, r3, #4
 80039c0:	1a9b      	subs	r3, r3, r2
 80039c2:	009b      	lsls	r3, r3, #2
 80039c4:	440b      	add	r3, r1
 80039c6:	3326      	adds	r3, #38	@ 0x26
 80039c8:	781b      	ldrb	r3, [r3, #0]
 80039ca:	2b02      	cmp	r3, #2
 80039cc:	d00b      	beq.n	80039e6 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 80039ce:	78fa      	ldrb	r2, [r7, #3]
 80039d0:	6879      	ldr	r1, [r7, #4]
 80039d2:	4613      	mov	r3, r2
 80039d4:	011b      	lsls	r3, r3, #4
 80039d6:	1a9b      	subs	r3, r3, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	440b      	add	r3, r1
 80039dc:	3326      	adds	r3, #38	@ 0x26
 80039de:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 80039e0:	2b03      	cmp	r3, #3
 80039e2:	f040 8190 	bne.w	8003d06 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	799b      	ldrb	r3, [r3, #6]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d115      	bne.n	8003a1a <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80039ee:	78fa      	ldrb	r2, [r7, #3]
 80039f0:	6879      	ldr	r1, [r7, #4]
 80039f2:	4613      	mov	r3, r2
 80039f4:	011b      	lsls	r3, r3, #4
 80039f6:	1a9b      	subs	r3, r3, r2
 80039f8:	009b      	lsls	r3, r3, #2
 80039fa:	440b      	add	r3, r1
 80039fc:	333d      	adds	r3, #61	@ 0x3d
 80039fe:	781b      	ldrb	r3, [r3, #0]
 8003a00:	78fa      	ldrb	r2, [r7, #3]
 8003a02:	f083 0301 	eor.w	r3, r3, #1
 8003a06:	b2d8      	uxtb	r0, r3
 8003a08:	6879      	ldr	r1, [r7, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	1a9b      	subs	r3, r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	440b      	add	r3, r1
 8003a14:	333d      	adds	r3, #61	@ 0x3d
 8003a16:	4602      	mov	r2, r0
 8003a18:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	799b      	ldrb	r3, [r3, #6]
 8003a1e:	2b01      	cmp	r3, #1
 8003a20:	f040 8171 	bne.w	8003d06 <HCD_HC_OUT_IRQHandler+0x954>
 8003a24:	78fa      	ldrb	r2, [r7, #3]
 8003a26:	6879      	ldr	r1, [r7, #4]
 8003a28:	4613      	mov	r3, r2
 8003a2a:	011b      	lsls	r3, r3, #4
 8003a2c:	1a9b      	subs	r3, r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	3334      	adds	r3, #52	@ 0x34
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	f000 8165 	beq.w	8003d06 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003a3c:	78fa      	ldrb	r2, [r7, #3]
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	4613      	mov	r3, r2
 8003a42:	011b      	lsls	r3, r3, #4
 8003a44:	1a9b      	subs	r3, r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	440b      	add	r3, r1
 8003a4a:	3334      	adds	r3, #52	@ 0x34
 8003a4c:	6819      	ldr	r1, [r3, #0]
 8003a4e:	78fa      	ldrb	r2, [r7, #3]
 8003a50:	6878      	ldr	r0, [r7, #4]
 8003a52:	4613      	mov	r3, r2
 8003a54:	011b      	lsls	r3, r3, #4
 8003a56:	1a9b      	subs	r3, r3, r2
 8003a58:	009b      	lsls	r3, r3, #2
 8003a5a:	4403      	add	r3, r0
 8003a5c:	3328      	adds	r3, #40	@ 0x28
 8003a5e:	881b      	ldrh	r3, [r3, #0]
 8003a60:	440b      	add	r3, r1
 8003a62:	1e59      	subs	r1, r3, #1
 8003a64:	78fa      	ldrb	r2, [r7, #3]
 8003a66:	6878      	ldr	r0, [r7, #4]
 8003a68:	4613      	mov	r3, r2
 8003a6a:	011b      	lsls	r3, r3, #4
 8003a6c:	1a9b      	subs	r3, r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4403      	add	r3, r0
 8003a72:	3328      	adds	r3, #40	@ 0x28
 8003a74:	881b      	ldrh	r3, [r3, #0]
 8003a76:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a7a:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	f003 0301 	and.w	r3, r3, #1
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	f000 813f 	beq.w	8003d06 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003a88:	78fa      	ldrb	r2, [r7, #3]
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	1a9b      	subs	r3, r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	333d      	adds	r3, #61	@ 0x3d
 8003a98:	781b      	ldrb	r3, [r3, #0]
 8003a9a:	78fa      	ldrb	r2, [r7, #3]
 8003a9c:	f083 0301 	eor.w	r3, r3, #1
 8003aa0:	b2d8      	uxtb	r0, r3
 8003aa2:	6879      	ldr	r1, [r7, #4]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	011b      	lsls	r3, r3, #4
 8003aa8:	1a9b      	subs	r3, r3, r2
 8003aaa:	009b      	lsls	r3, r3, #2
 8003aac:	440b      	add	r3, r1
 8003aae:	333d      	adds	r3, #61	@ 0x3d
 8003ab0:	4602      	mov	r2, r0
 8003ab2:	701a      	strb	r2, [r3, #0]
 8003ab4:	e127      	b.n	8003d06 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003ab6:	78fa      	ldrb	r2, [r7, #3]
 8003ab8:	6879      	ldr	r1, [r7, #4]
 8003aba:	4613      	mov	r3, r2
 8003abc:	011b      	lsls	r3, r3, #4
 8003abe:	1a9b      	subs	r3, r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	440b      	add	r3, r1
 8003ac4:	334d      	adds	r3, #77	@ 0x4d
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	2b03      	cmp	r3, #3
 8003aca:	d120      	bne.n	8003b0e <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003acc:	78fa      	ldrb	r2, [r7, #3]
 8003ace:	6879      	ldr	r1, [r7, #4]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	011b      	lsls	r3, r3, #4
 8003ad4:	1a9b      	subs	r3, r3, r2
 8003ad6:	009b      	lsls	r3, r3, #2
 8003ad8:	440b      	add	r3, r1
 8003ada:	334d      	adds	r3, #77	@ 0x4d
 8003adc:	2202      	movs	r2, #2
 8003ade:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003ae0:	78fa      	ldrb	r2, [r7, #3]
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	011b      	lsls	r3, r3, #4
 8003ae8:	1a9b      	subs	r3, r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	331b      	adds	r3, #27
 8003af0:	781b      	ldrb	r3, [r3, #0]
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	f040 8107 	bne.w	8003d06 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003af8:	78fa      	ldrb	r2, [r7, #3]
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	4613      	mov	r3, r2
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	1a9b      	subs	r3, r3, r2
 8003b02:	009b      	lsls	r3, r3, #2
 8003b04:	440b      	add	r3, r1
 8003b06:	334c      	adds	r3, #76	@ 0x4c
 8003b08:	2202      	movs	r2, #2
 8003b0a:	701a      	strb	r2, [r3, #0]
 8003b0c:	e0fb      	b.n	8003d06 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003b0e:	78fa      	ldrb	r2, [r7, #3]
 8003b10:	6879      	ldr	r1, [r7, #4]
 8003b12:	4613      	mov	r3, r2
 8003b14:	011b      	lsls	r3, r3, #4
 8003b16:	1a9b      	subs	r3, r3, r2
 8003b18:	009b      	lsls	r3, r3, #2
 8003b1a:	440b      	add	r3, r1
 8003b1c:	334d      	adds	r3, #77	@ 0x4d
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	2b04      	cmp	r3, #4
 8003b22:	d13a      	bne.n	8003b9a <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b24:	78fa      	ldrb	r2, [r7, #3]
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	4613      	mov	r3, r2
 8003b2a:	011b      	lsls	r3, r3, #4
 8003b2c:	1a9b      	subs	r3, r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	440b      	add	r3, r1
 8003b32:	334d      	adds	r3, #77	@ 0x4d
 8003b34:	2202      	movs	r2, #2
 8003b36:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b38:	78fa      	ldrb	r2, [r7, #3]
 8003b3a:	6879      	ldr	r1, [r7, #4]
 8003b3c:	4613      	mov	r3, r2
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	1a9b      	subs	r3, r3, r2
 8003b42:	009b      	lsls	r3, r3, #2
 8003b44:	440b      	add	r3, r1
 8003b46:	334c      	adds	r3, #76	@ 0x4c
 8003b48:	2202      	movs	r2, #2
 8003b4a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003b4c:	78fa      	ldrb	r2, [r7, #3]
 8003b4e:	6879      	ldr	r1, [r7, #4]
 8003b50:	4613      	mov	r3, r2
 8003b52:	011b      	lsls	r3, r3, #4
 8003b54:	1a9b      	subs	r3, r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	331b      	adds	r3, #27
 8003b5c:	781b      	ldrb	r3, [r3, #0]
 8003b5e:	2b01      	cmp	r3, #1
 8003b60:	f040 80d1 	bne.w	8003d06 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003b64:	78fa      	ldrb	r2, [r7, #3]
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	011b      	lsls	r3, r3, #4
 8003b6c:	1a9b      	subs	r3, r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	440b      	add	r3, r1
 8003b72:	331b      	adds	r3, #27
 8003b74:	2200      	movs	r2, #0
 8003b76:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b78:	78fb      	ldrb	r3, [r7, #3]
 8003b7a:	015a      	lsls	r2, r3, #5
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	4413      	add	r3, r2
 8003b80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	78fa      	ldrb	r2, [r7, #3]
 8003b88:	0151      	lsls	r1, r2, #5
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	440a      	add	r2, r1
 8003b8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b96:	6053      	str	r3, [r2, #4]
 8003b98:	e0b5      	b.n	8003d06 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003b9a:	78fa      	ldrb	r2, [r7, #3]
 8003b9c:	6879      	ldr	r1, [r7, #4]
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	011b      	lsls	r3, r3, #4
 8003ba2:	1a9b      	subs	r3, r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	440b      	add	r3, r1
 8003ba8:	334d      	adds	r3, #77	@ 0x4d
 8003baa:	781b      	ldrb	r3, [r3, #0]
 8003bac:	2b05      	cmp	r3, #5
 8003bae:	d114      	bne.n	8003bda <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003bb0:	78fa      	ldrb	r2, [r7, #3]
 8003bb2:	6879      	ldr	r1, [r7, #4]
 8003bb4:	4613      	mov	r3, r2
 8003bb6:	011b      	lsls	r3, r3, #4
 8003bb8:	1a9b      	subs	r3, r3, r2
 8003bba:	009b      	lsls	r3, r3, #2
 8003bbc:	440b      	add	r3, r1
 8003bbe:	334d      	adds	r3, #77	@ 0x4d
 8003bc0:	2202      	movs	r2, #2
 8003bc2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003bc4:	78fa      	ldrb	r2, [r7, #3]
 8003bc6:	6879      	ldr	r1, [r7, #4]
 8003bc8:	4613      	mov	r3, r2
 8003bca:	011b      	lsls	r3, r3, #4
 8003bcc:	1a9b      	subs	r3, r3, r2
 8003bce:	009b      	lsls	r3, r3, #2
 8003bd0:	440b      	add	r3, r1
 8003bd2:	334c      	adds	r3, #76	@ 0x4c
 8003bd4:	2202      	movs	r2, #2
 8003bd6:	701a      	strb	r2, [r3, #0]
 8003bd8:	e095      	b.n	8003d06 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003bda:	78fa      	ldrb	r2, [r7, #3]
 8003bdc:	6879      	ldr	r1, [r7, #4]
 8003bde:	4613      	mov	r3, r2
 8003be0:	011b      	lsls	r3, r3, #4
 8003be2:	1a9b      	subs	r3, r3, r2
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	440b      	add	r3, r1
 8003be8:	334d      	adds	r3, #77	@ 0x4d
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	2b06      	cmp	r3, #6
 8003bee:	d114      	bne.n	8003c1a <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003bf0:	78fa      	ldrb	r2, [r7, #3]
 8003bf2:	6879      	ldr	r1, [r7, #4]
 8003bf4:	4613      	mov	r3, r2
 8003bf6:	011b      	lsls	r3, r3, #4
 8003bf8:	1a9b      	subs	r3, r3, r2
 8003bfa:	009b      	lsls	r3, r3, #2
 8003bfc:	440b      	add	r3, r1
 8003bfe:	334d      	adds	r3, #77	@ 0x4d
 8003c00:	2202      	movs	r2, #2
 8003c02:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003c04:	78fa      	ldrb	r2, [r7, #3]
 8003c06:	6879      	ldr	r1, [r7, #4]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	011b      	lsls	r3, r3, #4
 8003c0c:	1a9b      	subs	r3, r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	440b      	add	r3, r1
 8003c12:	334c      	adds	r3, #76	@ 0x4c
 8003c14:	2205      	movs	r2, #5
 8003c16:	701a      	strb	r2, [r3, #0]
 8003c18:	e075      	b.n	8003d06 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003c1a:	78fa      	ldrb	r2, [r7, #3]
 8003c1c:	6879      	ldr	r1, [r7, #4]
 8003c1e:	4613      	mov	r3, r2
 8003c20:	011b      	lsls	r3, r3, #4
 8003c22:	1a9b      	subs	r3, r3, r2
 8003c24:	009b      	lsls	r3, r3, #2
 8003c26:	440b      	add	r3, r1
 8003c28:	334d      	adds	r3, #77	@ 0x4d
 8003c2a:	781b      	ldrb	r3, [r3, #0]
 8003c2c:	2b07      	cmp	r3, #7
 8003c2e:	d00a      	beq.n	8003c46 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003c30:	78fa      	ldrb	r2, [r7, #3]
 8003c32:	6879      	ldr	r1, [r7, #4]
 8003c34:	4613      	mov	r3, r2
 8003c36:	011b      	lsls	r3, r3, #4
 8003c38:	1a9b      	subs	r3, r3, r2
 8003c3a:	009b      	lsls	r3, r3, #2
 8003c3c:	440b      	add	r3, r1
 8003c3e:	334d      	adds	r3, #77	@ 0x4d
 8003c40:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003c42:	2b09      	cmp	r3, #9
 8003c44:	d170      	bne.n	8003d28 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c46:	78fa      	ldrb	r2, [r7, #3]
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	011b      	lsls	r3, r3, #4
 8003c4e:	1a9b      	subs	r3, r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	440b      	add	r3, r1
 8003c54:	334d      	adds	r3, #77	@ 0x4d
 8003c56:	2202      	movs	r2, #2
 8003c58:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003c5a:	78fa      	ldrb	r2, [r7, #3]
 8003c5c:	6879      	ldr	r1, [r7, #4]
 8003c5e:	4613      	mov	r3, r2
 8003c60:	011b      	lsls	r3, r3, #4
 8003c62:	1a9b      	subs	r3, r3, r2
 8003c64:	009b      	lsls	r3, r3, #2
 8003c66:	440b      	add	r3, r1
 8003c68:	3344      	adds	r3, #68	@ 0x44
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	1c59      	adds	r1, r3, #1
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	4613      	mov	r3, r2
 8003c72:	011b      	lsls	r3, r3, #4
 8003c74:	1a9b      	subs	r3, r3, r2
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	4403      	add	r3, r0
 8003c7a:	3344      	adds	r3, #68	@ 0x44
 8003c7c:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c7e:	78fa      	ldrb	r2, [r7, #3]
 8003c80:	6879      	ldr	r1, [r7, #4]
 8003c82:	4613      	mov	r3, r2
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	1a9b      	subs	r3, r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	3344      	adds	r3, #68	@ 0x44
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	2b02      	cmp	r3, #2
 8003c92:	d914      	bls.n	8003cbe <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003c94:	78fa      	ldrb	r2, [r7, #3]
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	1a9b      	subs	r3, r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	3344      	adds	r3, #68	@ 0x44
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003ca8:	78fa      	ldrb	r2, [r7, #3]
 8003caa:	6879      	ldr	r1, [r7, #4]
 8003cac:	4613      	mov	r3, r2
 8003cae:	011b      	lsls	r3, r3, #4
 8003cb0:	1a9b      	subs	r3, r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	334c      	adds	r3, #76	@ 0x4c
 8003cb8:	2204      	movs	r2, #4
 8003cba:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003cbc:	e022      	b.n	8003d04 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003cbe:	78fa      	ldrb	r2, [r7, #3]
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	1a9b      	subs	r3, r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	440b      	add	r3, r1
 8003ccc:	334c      	adds	r3, #76	@ 0x4c
 8003cce:	2202      	movs	r2, #2
 8003cd0:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003cd2:	78fb      	ldrb	r3, [r7, #3]
 8003cd4:	015a      	lsls	r2, r3, #5
 8003cd6:	693b      	ldr	r3, [r7, #16]
 8003cd8:	4413      	add	r3, r2
 8003cda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003ce8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003cf0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003cf2:	78fb      	ldrb	r3, [r7, #3]
 8003cf4:	015a      	lsls	r2, r3, #5
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cfe:	461a      	mov	r2, r3
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d04:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003d06:	78fa      	ldrb	r2, [r7, #3]
 8003d08:	6879      	ldr	r1, [r7, #4]
 8003d0a:	4613      	mov	r3, r2
 8003d0c:	011b      	lsls	r3, r3, #4
 8003d0e:	1a9b      	subs	r3, r3, r2
 8003d10:	009b      	lsls	r3, r3, #2
 8003d12:	440b      	add	r3, r1
 8003d14:	334c      	adds	r3, #76	@ 0x4c
 8003d16:	781a      	ldrb	r2, [r3, #0]
 8003d18:	78fb      	ldrb	r3, [r7, #3]
 8003d1a:	4619      	mov	r1, r3
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f7fe fcd1 	bl	80026c4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003d22:	e002      	b.n	8003d2a <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003d24:	bf00      	nop
 8003d26:	e000      	b.n	8003d2a <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003d28:	bf00      	nop
  }
}
 8003d2a:	3718      	adds	r7, #24
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b08a      	sub	sp, #40	@ 0x28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d40:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	f003 030f 	and.w	r3, r3, #15
 8003d50:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	0c5b      	lsrs	r3, r3, #17
 8003d56:	f003 030f 	and.w	r3, r3, #15
 8003d5a:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d5c:	69fb      	ldr	r3, [r7, #28]
 8003d5e:	091b      	lsrs	r3, r3, #4
 8003d60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d64:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	2b02      	cmp	r3, #2
 8003d6a:	d004      	beq.n	8003d76 <HCD_RXQLVL_IRQHandler+0x46>
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	2b05      	cmp	r3, #5
 8003d70:	f000 80b6 	beq.w	8003ee0 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003d74:	e0b7      	b.n	8003ee6 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003d76:	693b      	ldr	r3, [r7, #16]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 80b3 	beq.w	8003ee4 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003d7e:	6879      	ldr	r1, [r7, #4]
 8003d80:	69ba      	ldr	r2, [r7, #24]
 8003d82:	4613      	mov	r3, r2
 8003d84:	011b      	lsls	r3, r3, #4
 8003d86:	1a9b      	subs	r3, r3, r2
 8003d88:	009b      	lsls	r3, r3, #2
 8003d8a:	440b      	add	r3, r1
 8003d8c:	332c      	adds	r3, #44	@ 0x2c
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 80a7 	beq.w	8003ee4 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003d96:	6879      	ldr	r1, [r7, #4]
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	4613      	mov	r3, r2
 8003d9c:	011b      	lsls	r3, r3, #4
 8003d9e:	1a9b      	subs	r3, r3, r2
 8003da0:	009b      	lsls	r3, r3, #2
 8003da2:	440b      	add	r3, r1
 8003da4:	3338      	adds	r3, #56	@ 0x38
 8003da6:	681a      	ldr	r2, [r3, #0]
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	18d1      	adds	r1, r2, r3
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	69ba      	ldr	r2, [r7, #24]
 8003db0:	4613      	mov	r3, r2
 8003db2:	011b      	lsls	r3, r3, #4
 8003db4:	1a9b      	subs	r3, r3, r2
 8003db6:	009b      	lsls	r3, r3, #2
 8003db8:	4403      	add	r3, r0
 8003dba:	3334      	adds	r3, #52	@ 0x34
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4299      	cmp	r1, r3
 8003dc0:	f200 8083 	bhi.w	8003eca <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6818      	ldr	r0, [r3, #0]
 8003dc8:	6879      	ldr	r1, [r7, #4]
 8003dca:	69ba      	ldr	r2, [r7, #24]
 8003dcc:	4613      	mov	r3, r2
 8003dce:	011b      	lsls	r3, r3, #4
 8003dd0:	1a9b      	subs	r3, r3, r2
 8003dd2:	009b      	lsls	r3, r3, #2
 8003dd4:	440b      	add	r3, r1
 8003dd6:	332c      	adds	r3, #44	@ 0x2c
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	b292      	uxth	r2, r2
 8003dde:	4619      	mov	r1, r3
 8003de0:	f003 fbd1 	bl	8007586 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003de4:	6879      	ldr	r1, [r7, #4]
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	4613      	mov	r3, r2
 8003dea:	011b      	lsls	r3, r3, #4
 8003dec:	1a9b      	subs	r3, r3, r2
 8003dee:	009b      	lsls	r3, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	332c      	adds	r3, #44	@ 0x2c
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	18d1      	adds	r1, r2, r3
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	69ba      	ldr	r2, [r7, #24]
 8003dfe:	4613      	mov	r3, r2
 8003e00:	011b      	lsls	r3, r3, #4
 8003e02:	1a9b      	subs	r3, r3, r2
 8003e04:	009b      	lsls	r3, r3, #2
 8003e06:	4403      	add	r3, r0
 8003e08:	332c      	adds	r3, #44	@ 0x2c
 8003e0a:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	69ba      	ldr	r2, [r7, #24]
 8003e10:	4613      	mov	r3, r2
 8003e12:	011b      	lsls	r3, r3, #4
 8003e14:	1a9b      	subs	r3, r3, r2
 8003e16:	009b      	lsls	r3, r3, #2
 8003e18:	440b      	add	r3, r1
 8003e1a:	3338      	adds	r3, #56	@ 0x38
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	18d1      	adds	r1, r2, r3
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	4613      	mov	r3, r2
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	1a9b      	subs	r3, r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	4403      	add	r3, r0
 8003e30:	3338      	adds	r3, #56	@ 0x38
 8003e32:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003e34:	69bb      	ldr	r3, [r7, #24]
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	6a3b      	ldr	r3, [r7, #32]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	0cdb      	lsrs	r3, r3, #19
 8003e44:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e48:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003e4a:	6879      	ldr	r1, [r7, #4]
 8003e4c:	69ba      	ldr	r2, [r7, #24]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	1a9b      	subs	r3, r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	440b      	add	r3, r1
 8003e58:	3328      	adds	r3, #40	@ 0x28
 8003e5a:	881b      	ldrh	r3, [r3, #0]
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d13f      	bne.n	8003ee4 <HCD_RXQLVL_IRQHandler+0x1b4>
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d03c      	beq.n	8003ee4 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	015a      	lsls	r2, r3, #5
 8003e6e:	6a3b      	ldr	r3, [r7, #32]
 8003e70:	4413      	add	r3, r2
 8003e72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e7a:	68bb      	ldr	r3, [r7, #8]
 8003e7c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003e80:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e82:	68bb      	ldr	r3, [r7, #8]
 8003e84:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003e88:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003e8a:	69bb      	ldr	r3, [r7, #24]
 8003e8c:	015a      	lsls	r2, r3, #5
 8003e8e:	6a3b      	ldr	r3, [r7, #32]
 8003e90:	4413      	add	r3, r2
 8003e92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e96:	461a      	mov	r2, r3
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	011b      	lsls	r3, r3, #4
 8003ea4:	1a9b      	subs	r3, r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	440b      	add	r3, r1
 8003eaa:	333c      	adds	r3, #60	@ 0x3c
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	f083 0301 	eor.w	r3, r3, #1
 8003eb2:	b2d8      	uxtb	r0, r3
 8003eb4:	6879      	ldr	r1, [r7, #4]
 8003eb6:	69ba      	ldr	r2, [r7, #24]
 8003eb8:	4613      	mov	r3, r2
 8003eba:	011b      	lsls	r3, r3, #4
 8003ebc:	1a9b      	subs	r3, r3, r2
 8003ebe:	009b      	lsls	r3, r3, #2
 8003ec0:	440b      	add	r3, r1
 8003ec2:	333c      	adds	r3, #60	@ 0x3c
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	701a      	strb	r2, [r3, #0]
      break;
 8003ec8:	e00c      	b.n	8003ee4 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003eca:	6879      	ldr	r1, [r7, #4]
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	011b      	lsls	r3, r3, #4
 8003ed2:	1a9b      	subs	r3, r3, r2
 8003ed4:	009b      	lsls	r3, r3, #2
 8003ed6:	440b      	add	r3, r1
 8003ed8:	334c      	adds	r3, #76	@ 0x4c
 8003eda:	2204      	movs	r2, #4
 8003edc:	701a      	strb	r2, [r3, #0]
      break;
 8003ede:	e001      	b.n	8003ee4 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003ee0:	bf00      	nop
 8003ee2:	e000      	b.n	8003ee6 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003ee4:	bf00      	nop
  }
}
 8003ee6:	bf00      	nop
 8003ee8:	3728      	adds	r7, #40	@ 0x28
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}

08003eee <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b086      	sub	sp, #24
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003efc:	697b      	ldr	r3, [r7, #20]
 8003efe:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003f1a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f003 0302 	and.w	r3, r3, #2
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d10b      	bne.n	8003f3e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f003 0301 	and.w	r3, r3, #1
 8003f2c:	2b01      	cmp	r3, #1
 8003f2e:	d102      	bne.n	8003f36 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f7fe fb9f 	bl	8002674 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	f043 0302 	orr.w	r3, r3, #2
 8003f3c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	f003 0308 	and.w	r3, r3, #8
 8003f44:	2b08      	cmp	r3, #8
 8003f46:	d132      	bne.n	8003fae <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	f043 0308 	orr.w	r3, r3, #8
 8003f4e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	f003 0304 	and.w	r3, r3, #4
 8003f56:	2b04      	cmp	r3, #4
 8003f58:	d126      	bne.n	8003fa8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	7a5b      	ldrb	r3, [r3, #9]
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d113      	bne.n	8003f8a <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003f68:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f6c:	d106      	bne.n	8003f7c <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	2102      	movs	r1, #2
 8003f74:	4618      	mov	r0, r3
 8003f76:	f003 fc95 	bl	80078a4 <USB_InitFSLSPClkSel>
 8003f7a:	e011      	b.n	8003fa0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2101      	movs	r1, #1
 8003f82:	4618      	mov	r0, r3
 8003f84:	f003 fc8e 	bl	80078a4 <USB_InitFSLSPClkSel>
 8003f88:	e00a      	b.n	8003fa0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	79db      	ldrb	r3, [r3, #7]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d106      	bne.n	8003fa0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f98:	461a      	mov	r2, r3
 8003f9a:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003f9e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003fa0:	6878      	ldr	r0, [r7, #4]
 8003fa2:	f7fe fb7b 	bl	800269c <HAL_HCD_PortEnabled_Callback>
 8003fa6:	e002      	b.n	8003fae <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003fa8:	6878      	ldr	r0, [r7, #4]
 8003faa:	f7fe fb81 	bl	80026b0 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f003 0320 	and.w	r3, r3, #32
 8003fb4:	2b20      	cmp	r3, #32
 8003fb6:	d103      	bne.n	8003fc0 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	f043 0320 	orr.w	r3, r3, #32
 8003fbe:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003fc0:	693b      	ldr	r3, [r7, #16]
 8003fc2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	68bb      	ldr	r3, [r7, #8]
 8003fca:	6013      	str	r3, [r2, #0]
}
 8003fcc:	bf00      	nop
 8003fce:	3718      	adds	r7, #24
 8003fd0:	46bd      	mov	sp, r7
 8003fd2:	bd80      	pop	{r7, pc}

08003fd4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b084      	sub	sp, #16
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e12b      	b.n	800423e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fec:	b2db      	uxtb	r3, r3
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d106      	bne.n	8004000 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7fd f84e 	bl	800109c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2224      	movs	r2, #36	@ 0x24
 8004004:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0201 	bic.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	681a      	ldr	r2, [r3, #0]
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004026:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004036:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004038:	f001 f964 	bl	8005304 <HAL_RCC_GetPCLK1Freq>
 800403c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	4a81      	ldr	r2, [pc, #516]	@ (8004248 <HAL_I2C_Init+0x274>)
 8004044:	4293      	cmp	r3, r2
 8004046:	d807      	bhi.n	8004058 <HAL_I2C_Init+0x84>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4a80      	ldr	r2, [pc, #512]	@ (800424c <HAL_I2C_Init+0x278>)
 800404c:	4293      	cmp	r3, r2
 800404e:	bf94      	ite	ls
 8004050:	2301      	movls	r3, #1
 8004052:	2300      	movhi	r3, #0
 8004054:	b2db      	uxtb	r3, r3
 8004056:	e006      	b.n	8004066 <HAL_I2C_Init+0x92>
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	4a7d      	ldr	r2, [pc, #500]	@ (8004250 <HAL_I2C_Init+0x27c>)
 800405c:	4293      	cmp	r3, r2
 800405e:	bf94      	ite	ls
 8004060:	2301      	movls	r3, #1
 8004062:	2300      	movhi	r3, #0
 8004064:	b2db      	uxtb	r3, r3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e0e7      	b.n	800423e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	4a78      	ldr	r2, [pc, #480]	@ (8004254 <HAL_I2C_Init+0x280>)
 8004072:	fba2 2303 	umull	r2, r3, r2, r3
 8004076:	0c9b      	lsrs	r3, r3, #18
 8004078:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	68ba      	ldr	r2, [r7, #8]
 800408a:	430a      	orrs	r2, r1
 800408c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6a1b      	ldr	r3, [r3, #32]
 8004094:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	4a6a      	ldr	r2, [pc, #424]	@ (8004248 <HAL_I2C_Init+0x274>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d802      	bhi.n	80040a8 <HAL_I2C_Init+0xd4>
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	3301      	adds	r3, #1
 80040a6:	e009      	b.n	80040bc <HAL_I2C_Init+0xe8>
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80040ae:	fb02 f303 	mul.w	r3, r2, r3
 80040b2:	4a69      	ldr	r2, [pc, #420]	@ (8004258 <HAL_I2C_Init+0x284>)
 80040b4:	fba2 2303 	umull	r2, r3, r2, r3
 80040b8:	099b      	lsrs	r3, r3, #6
 80040ba:	3301      	adds	r3, #1
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	6812      	ldr	r2, [r2, #0]
 80040c0:	430b      	orrs	r3, r1
 80040c2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80040ce:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	495c      	ldr	r1, [pc, #368]	@ (8004248 <HAL_I2C_Init+0x274>)
 80040d8:	428b      	cmp	r3, r1
 80040da:	d819      	bhi.n	8004110 <HAL_I2C_Init+0x13c>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	1e59      	subs	r1, r3, #1
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	685b      	ldr	r3, [r3, #4]
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80040ea:	1c59      	adds	r1, r3, #1
 80040ec:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80040f0:	400b      	ands	r3, r1
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d00a      	beq.n	800410c <HAL_I2C_Init+0x138>
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	1e59      	subs	r1, r3, #1
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	685b      	ldr	r3, [r3, #4]
 80040fe:	005b      	lsls	r3, r3, #1
 8004100:	fbb1 f3f3 	udiv	r3, r1, r3
 8004104:	3301      	adds	r3, #1
 8004106:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800410a:	e051      	b.n	80041b0 <HAL_I2C_Init+0x1dc>
 800410c:	2304      	movs	r3, #4
 800410e:	e04f      	b.n	80041b0 <HAL_I2C_Init+0x1dc>
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d111      	bne.n	800413c <HAL_I2C_Init+0x168>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	1e58      	subs	r0, r3, #1
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6859      	ldr	r1, [r3, #4]
 8004120:	460b      	mov	r3, r1
 8004122:	005b      	lsls	r3, r3, #1
 8004124:	440b      	add	r3, r1
 8004126:	fbb0 f3f3 	udiv	r3, r0, r3
 800412a:	3301      	adds	r3, #1
 800412c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004130:	2b00      	cmp	r3, #0
 8004132:	bf0c      	ite	eq
 8004134:	2301      	moveq	r3, #1
 8004136:	2300      	movne	r3, #0
 8004138:	b2db      	uxtb	r3, r3
 800413a:	e012      	b.n	8004162 <HAL_I2C_Init+0x18e>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	1e58      	subs	r0, r3, #1
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6859      	ldr	r1, [r3, #4]
 8004144:	460b      	mov	r3, r1
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	440b      	add	r3, r1
 800414a:	0099      	lsls	r1, r3, #2
 800414c:	440b      	add	r3, r1
 800414e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004152:	3301      	adds	r3, #1
 8004154:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004158:	2b00      	cmp	r3, #0
 800415a:	bf0c      	ite	eq
 800415c:	2301      	moveq	r3, #1
 800415e:	2300      	movne	r3, #0
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d001      	beq.n	800416a <HAL_I2C_Init+0x196>
 8004166:	2301      	movs	r3, #1
 8004168:	e022      	b.n	80041b0 <HAL_I2C_Init+0x1dc>
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	689b      	ldr	r3, [r3, #8]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d10e      	bne.n	8004190 <HAL_I2C_Init+0x1bc>
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	1e58      	subs	r0, r3, #1
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6859      	ldr	r1, [r3, #4]
 800417a:	460b      	mov	r3, r1
 800417c:	005b      	lsls	r3, r3, #1
 800417e:	440b      	add	r3, r1
 8004180:	fbb0 f3f3 	udiv	r3, r0, r3
 8004184:	3301      	adds	r3, #1
 8004186:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800418a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800418e:	e00f      	b.n	80041b0 <HAL_I2C_Init+0x1dc>
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	1e58      	subs	r0, r3, #1
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6859      	ldr	r1, [r3, #4]
 8004198:	460b      	mov	r3, r1
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	440b      	add	r3, r1
 800419e:	0099      	lsls	r1, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	fbb0 f3f3 	udiv	r3, r0, r3
 80041a6:	3301      	adds	r3, #1
 80041a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80041ac:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	6809      	ldr	r1, [r1, #0]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	69da      	ldr	r2, [r3, #28]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a1b      	ldr	r3, [r3, #32]
 80041ca:	431a      	orrs	r2, r3
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80041de:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80041e2:	687a      	ldr	r2, [r7, #4]
 80041e4:	6911      	ldr	r1, [r2, #16]
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	68d2      	ldr	r2, [r2, #12]
 80041ea:	4311      	orrs	r1, r2
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6812      	ldr	r2, [r2, #0]
 80041f0:	430b      	orrs	r3, r1
 80041f2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68db      	ldr	r3, [r3, #12]
 80041fa:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	695a      	ldr	r2, [r3, #20]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	431a      	orrs	r2, r3
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f042 0201 	orr.w	r2, r2, #1
 800421e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2200      	movs	r2, #0
 8004224:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2220      	movs	r2, #32
 800422a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2200      	movs	r2, #0
 8004232:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2200      	movs	r2, #0
 8004238:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3710      	adds	r7, #16
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	000186a0 	.word	0x000186a0
 800424c:	001e847f 	.word	0x001e847f
 8004250:	003d08ff 	.word	0x003d08ff
 8004254:	431bde83 	.word	0x431bde83
 8004258:	10624dd3 	.word	0x10624dd3

0800425c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b20      	cmp	r3, #32
 8004270:	d129      	bne.n	80042c6 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2224      	movs	r2, #36	@ 0x24
 8004276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 0201 	bic.w	r2, r2, #1
 8004288:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f022 0210 	bic.w	r2, r2, #16
 8004298:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	683a      	ldr	r2, [r7, #0]
 80042a6:	430a      	orrs	r2, r1
 80042a8:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f042 0201 	orr.w	r2, r2, #1
 80042b8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2220      	movs	r2, #32
 80042be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80042c2:	2300      	movs	r3, #0
 80042c4:	e000      	b.n	80042c8 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 80042c6:	2302      	movs	r3, #2
  }
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80042d4:	b480      	push	{r7}
 80042d6:	b085      	sub	sp, #20
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
 80042dc:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80042de:	2300      	movs	r3, #0
 80042e0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b20      	cmp	r3, #32
 80042ec:	d12a      	bne.n	8004344 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2224      	movs	r2, #36	@ 0x24
 80042f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f022 0201 	bic.w	r2, r2, #1
 8004304:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800430c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800430e:	89fb      	ldrh	r3, [r7, #14]
 8004310:	f023 030f 	bic.w	r3, r3, #15
 8004314:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	b29a      	uxth	r2, r3
 800431a:	89fb      	ldrh	r3, [r7, #14]
 800431c:	4313      	orrs	r3, r2
 800431e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	89fa      	ldrh	r2, [r7, #14]
 8004326:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	681a      	ldr	r2, [r3, #0]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f042 0201 	orr.w	r2, r2, #1
 8004336:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2220      	movs	r2, #32
 800433c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004340:	2300      	movs	r3, #0
 8004342:	e000      	b.n	8004346 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004344:	2302      	movs	r3, #2
  }
}
 8004346:	4618      	mov	r0, r3
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
	...

08004354 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b084      	sub	sp, #16
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d101      	bne.n	8004366 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004362:	2301      	movs	r3, #1
 8004364:	e0bf      	b.n	80044e6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b00      	cmp	r3, #0
 8004370:	d106      	bne.n	8004380 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	2200      	movs	r2, #0
 8004376:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800437a:	6878      	ldr	r0, [r7, #4]
 800437c:	f7fc fef8 	bl	8001170 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	2202      	movs	r2, #2
 8004384:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	699a      	ldr	r2, [r3, #24]
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004396:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6999      	ldr	r1, [r3, #24]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	685a      	ldr	r2, [r3, #4]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	689b      	ldr	r3, [r3, #8]
 80043a6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80043ac:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	691b      	ldr	r3, [r3, #16]
 80043b2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	430a      	orrs	r2, r1
 80043ba:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	6899      	ldr	r1, [r3, #8]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	4b4a      	ldr	r3, [pc, #296]	@ (80044f0 <HAL_LTDC_Init+0x19c>)
 80043c8:	400b      	ands	r3, r1
 80043ca:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	695b      	ldr	r3, [r3, #20]
 80043d0:	041b      	lsls	r3, r3, #16
 80043d2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6899      	ldr	r1, [r3, #8]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	699a      	ldr	r2, [r3, #24]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	431a      	orrs	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	430a      	orrs	r2, r1
 80043e8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68d9      	ldr	r1, [r3, #12]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	4b3e      	ldr	r3, [pc, #248]	@ (80044f0 <HAL_LTDC_Init+0x19c>)
 80043f6:	400b      	ands	r3, r1
 80043f8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	69db      	ldr	r3, [r3, #28]
 80043fe:	041b      	lsls	r3, r3, #16
 8004400:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68d9      	ldr	r1, [r3, #12]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a1a      	ldr	r2, [r3, #32]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	6919      	ldr	r1, [r3, #16]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	4b33      	ldr	r3, [pc, #204]	@ (80044f0 <HAL_LTDC_Init+0x19c>)
 8004424:	400b      	ands	r3, r1
 8004426:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800442c:	041b      	lsls	r3, r3, #16
 800442e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	6919      	ldr	r1, [r3, #16]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	431a      	orrs	r2, r3
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	430a      	orrs	r2, r1
 8004444:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	6959      	ldr	r1, [r3, #20]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	4b27      	ldr	r3, [pc, #156]	@ (80044f0 <HAL_LTDC_Init+0x19c>)
 8004452:	400b      	ands	r3, r1
 8004454:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800445a:	041b      	lsls	r3, r3, #16
 800445c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6959      	ldr	r1, [r3, #20]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	431a      	orrs	r2, r3
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	430a      	orrs	r2, r1
 8004472:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800447a:	021b      	lsls	r3, r3, #8
 800447c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004484:	041b      	lsls	r3, r3, #16
 8004486:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004496:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	4313      	orrs	r3, r2
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 80044aa:	431a      	orrs	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	430a      	orrs	r2, r1
 80044b2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 0206 	orr.w	r2, r2, #6
 80044c2:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	699a      	ldr	r2, [r3, #24]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f042 0201 	orr.w	r2, r2, #1
 80044d2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2200      	movs	r2, #0
 80044d8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2201      	movs	r2, #1
 80044e0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}
 80044ee:	bf00      	nop
 80044f0:	f000f800 	.word	0xf000f800

080044f4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004502:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800450a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f003 0304 	and.w	r3, r3, #4
 8004512:	2b00      	cmp	r3, #0
 8004514:	d023      	beq.n	800455e <HAL_LTDC_IRQHandler+0x6a>
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	f003 0304 	and.w	r3, r3, #4
 800451c:	2b00      	cmp	r3, #0
 800451e:	d01e      	beq.n	800455e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0204 	bic.w	r2, r2, #4
 800452e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2204      	movs	r2, #4
 8004536:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800453e:	f043 0201 	orr.w	r2, r3, #1
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2204      	movs	r2, #4
 800454c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2200      	movs	r2, #0
 8004554:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004558:	6878      	ldr	r0, [r7, #4]
 800455a:	f000 f86f 	bl	800463c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d023      	beq.n	80045b0 <HAL_LTDC_IRQHandler+0xbc>
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f003 0302 	and.w	r3, r3, #2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d01e      	beq.n	80045b0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f022 0202 	bic.w	r2, r2, #2
 8004580:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	2202      	movs	r2, #2
 8004588:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004590:	f043 0202 	orr.w	r2, r3, #2
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2204      	movs	r2, #4
 800459e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 f846 	bl	800463c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d01b      	beq.n	80045f2 <HAL_LTDC_IRQHandler+0xfe>
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	f003 0301 	and.w	r3, r3, #1
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d016      	beq.n	80045f2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f022 0201 	bic.w	r2, r2, #1
 80045d2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2201      	movs	r2, #1
 80045da:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2200      	movs	r2, #0
 80045e8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f82f 	bl	8004650 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	f003 0308 	and.w	r3, r3, #8
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d01b      	beq.n	8004634 <HAL_LTDC_IRQHandler+0x140>
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	f003 0308 	and.w	r3, r3, #8
 8004602:	2b00      	cmp	r3, #0
 8004604:	d016      	beq.n	8004634 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 0208 	bic.w	r2, r2, #8
 8004614:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2208      	movs	r2, #8
 800461c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	2201      	movs	r2, #1
 8004622:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2200      	movs	r2, #0
 800462a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800462e:	6878      	ldr	r0, [r7, #4]
 8004630:	f000 f818 	bl	8004664 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004634:	bf00      	nop
 8004636:	3710      	adds	r7, #16
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}

0800463c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004644:	bf00      	nop
 8004646:	370c      	adds	r7, #12
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004678:	b5b0      	push	{r4, r5, r7, lr}
 800467a:	b084      	sub	sp, #16
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800468a:	2b01      	cmp	r3, #1
 800468c:	d101      	bne.n	8004692 <HAL_LTDC_ConfigLayer+0x1a>
 800468e:	2302      	movs	r3, #2
 8004690:	e02c      	b.n	80046ec <HAL_LTDC_ConfigLayer+0x74>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2202      	movs	r2, #2
 800469e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80046a2:	68fa      	ldr	r2, [r7, #12]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2134      	movs	r1, #52	@ 0x34
 80046a8:	fb01 f303 	mul.w	r3, r1, r3
 80046ac:	4413      	add	r3, r2
 80046ae:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	4614      	mov	r4, r2
 80046b6:	461d      	mov	r5, r3
 80046b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80046c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80046c4:	682b      	ldr	r3, [r5, #0]
 80046c6:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80046c8:	687a      	ldr	r2, [r7, #4]
 80046ca:	68b9      	ldr	r1, [r7, #8]
 80046cc:	68f8      	ldr	r0, [r7, #12]
 80046ce:	f000 f811 	bl	80046f4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2201      	movs	r2, #1
 80046d8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2201      	movs	r2, #1
 80046de:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	2200      	movs	r2, #0
 80046e6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80046ea:	2300      	movs	r3, #0
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	3710      	adds	r7, #16
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bdb0      	pop	{r4, r5, r7, pc}

080046f4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b089      	sub	sp, #36	@ 0x24
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	685a      	ldr	r2, [r3, #4]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	0c1b      	lsrs	r3, r3, #16
 800470c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004710:	4413      	add	r3, r2
 8004712:	041b      	lsls	r3, r3, #16
 8004714:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	01db      	lsls	r3, r3, #7
 8004720:	4413      	add	r3, r2
 8004722:	3384      	adds	r3, #132	@ 0x84
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	68fa      	ldr	r2, [r7, #12]
 8004728:	6812      	ldr	r2, [r2, #0]
 800472a:	4611      	mov	r1, r2
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	01d2      	lsls	r2, r2, #7
 8004730:	440a      	add	r2, r1
 8004732:	3284      	adds	r2, #132	@ 0x84
 8004734:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004738:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	0c1b      	lsrs	r3, r3, #16
 8004746:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800474a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800474c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	4619      	mov	r1, r3
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	01db      	lsls	r3, r3, #7
 8004758:	440b      	add	r3, r1
 800475a:	3384      	adds	r3, #132	@ 0x84
 800475c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004762:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	68da      	ldr	r2, [r3, #12]
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004772:	4413      	add	r3, r2
 8004774:	041b      	lsls	r3, r3, #16
 8004776:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	461a      	mov	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	01db      	lsls	r3, r3, #7
 8004782:	4413      	add	r3, r2
 8004784:	3384      	adds	r3, #132	@ 0x84
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	68fa      	ldr	r2, [r7, #12]
 800478a:	6812      	ldr	r2, [r2, #0]
 800478c:	4611      	mov	r1, r2
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	01d2      	lsls	r2, r2, #7
 8004792:	440a      	add	r2, r1
 8004794:	3284      	adds	r2, #132	@ 0x84
 8004796:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800479a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	689a      	ldr	r2, [r3, #8]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80047aa:	4413      	add	r3, r2
 80047ac:	1c5a      	adds	r2, r3, #1
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4619      	mov	r1, r3
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	01db      	lsls	r3, r3, #7
 80047b8:	440b      	add	r3, r1
 80047ba:	3384      	adds	r3, #132	@ 0x84
 80047bc:	4619      	mov	r1, r3
 80047be:	69fb      	ldr	r3, [r7, #28]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	461a      	mov	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	01db      	lsls	r3, r3, #7
 80047ce:	4413      	add	r3, r2
 80047d0:	3384      	adds	r3, #132	@ 0x84
 80047d2:	691b      	ldr	r3, [r3, #16]
 80047d4:	68fa      	ldr	r2, [r7, #12]
 80047d6:	6812      	ldr	r2, [r2, #0]
 80047d8:	4611      	mov	r1, r2
 80047da:	687a      	ldr	r2, [r7, #4]
 80047dc:	01d2      	lsls	r2, r2, #7
 80047de:	440a      	add	r2, r1
 80047e0:	3284      	adds	r2, #132	@ 0x84
 80047e2:	f023 0307 	bic.w	r3, r3, #7
 80047e6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	461a      	mov	r2, r3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	01db      	lsls	r3, r3, #7
 80047f2:	4413      	add	r3, r2
 80047f4:	3384      	adds	r3, #132	@ 0x84
 80047f6:	461a      	mov	r2, r3
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	691b      	ldr	r3, [r3, #16]
 80047fc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80047fe:	68bb      	ldr	r3, [r7, #8]
 8004800:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004804:	021b      	lsls	r3, r3, #8
 8004806:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800480e:	041b      	lsls	r3, r3, #16
 8004810:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	699b      	ldr	r3, [r3, #24]
 8004816:	061b      	lsls	r3, r3, #24
 8004818:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	461a      	mov	r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	01db      	lsls	r3, r3, #7
 8004824:	4413      	add	r3, r2
 8004826:	3384      	adds	r3, #132	@ 0x84
 8004828:	699b      	ldr	r3, [r3, #24]
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	461a      	mov	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	01db      	lsls	r3, r3, #7
 8004834:	4413      	add	r3, r2
 8004836:	3384      	adds	r3, #132	@ 0x84
 8004838:	461a      	mov	r2, r3
 800483a:	2300      	movs	r3, #0
 800483c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004844:	461a      	mov	r2, r3
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	431a      	orrs	r2, r3
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	431a      	orrs	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4619      	mov	r1, r3
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	01db      	lsls	r3, r3, #7
 8004858:	440b      	add	r3, r1
 800485a:	3384      	adds	r3, #132	@ 0x84
 800485c:	4619      	mov	r1, r3
 800485e:	697b      	ldr	r3, [r7, #20]
 8004860:	4313      	orrs	r3, r2
 8004862:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	461a      	mov	r2, r3
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	01db      	lsls	r3, r3, #7
 800486e:	4413      	add	r3, r2
 8004870:	3384      	adds	r3, #132	@ 0x84
 8004872:	695b      	ldr	r3, [r3, #20]
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	6812      	ldr	r2, [r2, #0]
 8004878:	4611      	mov	r1, r2
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	01d2      	lsls	r2, r2, #7
 800487e:	440a      	add	r2, r1
 8004880:	3284      	adds	r2, #132	@ 0x84
 8004882:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004886:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	461a      	mov	r2, r3
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	01db      	lsls	r3, r3, #7
 8004892:	4413      	add	r3, r2
 8004894:	3384      	adds	r3, #132	@ 0x84
 8004896:	461a      	mov	r2, r3
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	695b      	ldr	r3, [r3, #20]
 800489c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	461a      	mov	r2, r3
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	01db      	lsls	r3, r3, #7
 80048a8:	4413      	add	r3, r2
 80048aa:	3384      	adds	r3, #132	@ 0x84
 80048ac:	69db      	ldr	r3, [r3, #28]
 80048ae:	68fa      	ldr	r2, [r7, #12]
 80048b0:	6812      	ldr	r2, [r2, #0]
 80048b2:	4611      	mov	r1, r2
 80048b4:	687a      	ldr	r2, [r7, #4]
 80048b6:	01d2      	lsls	r2, r2, #7
 80048b8:	440a      	add	r2, r1
 80048ba:	3284      	adds	r2, #132	@ 0x84
 80048bc:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80048c0:	f023 0307 	bic.w	r3, r3, #7
 80048c4:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	69da      	ldr	r2, [r3, #28]
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	68f9      	ldr	r1, [r7, #12]
 80048d0:	6809      	ldr	r1, [r1, #0]
 80048d2:	4608      	mov	r0, r1
 80048d4:	6879      	ldr	r1, [r7, #4]
 80048d6:	01c9      	lsls	r1, r1, #7
 80048d8:	4401      	add	r1, r0
 80048da:	3184      	adds	r1, #132	@ 0x84
 80048dc:	4313      	orrs	r3, r2
 80048de:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	461a      	mov	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	01db      	lsls	r3, r3, #7
 80048ea:	4413      	add	r3, r2
 80048ec:	3384      	adds	r3, #132	@ 0x84
 80048ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	461a      	mov	r2, r3
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	01db      	lsls	r3, r3, #7
 80048fa:	4413      	add	r3, r2
 80048fc:	3384      	adds	r3, #132	@ 0x84
 80048fe:	461a      	mov	r2, r3
 8004900:	2300      	movs	r3, #0
 8004902:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	461a      	mov	r2, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	01db      	lsls	r3, r3, #7
 800490e:	4413      	add	r3, r2
 8004910:	3384      	adds	r3, #132	@ 0x84
 8004912:	461a      	mov	r2, r3
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004918:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d102      	bne.n	8004928 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004922:	2304      	movs	r3, #4
 8004924:	61fb      	str	r3, [r7, #28]
 8004926:	e01b      	b.n	8004960 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	2b01      	cmp	r3, #1
 800492e:	d102      	bne.n	8004936 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004930:	2303      	movs	r3, #3
 8004932:	61fb      	str	r3, [r7, #28]
 8004934:	e014      	b.n	8004960 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	2b04      	cmp	r3, #4
 800493c:	d00b      	beq.n	8004956 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800493e:	68bb      	ldr	r3, [r7, #8]
 8004940:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004942:	2b02      	cmp	r3, #2
 8004944:	d007      	beq.n	8004956 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004946:	68bb      	ldr	r3, [r7, #8]
 8004948:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800494a:	2b03      	cmp	r3, #3
 800494c:	d003      	beq.n	8004956 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004952:	2b07      	cmp	r3, #7
 8004954:	d102      	bne.n	800495c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004956:	2302      	movs	r3, #2
 8004958:	61fb      	str	r3, [r7, #28]
 800495a:	e001      	b.n	8004960 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800495c:	2301      	movs	r3, #1
 800495e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	461a      	mov	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	01db      	lsls	r3, r3, #7
 800496a:	4413      	add	r3, r2
 800496c:	3384      	adds	r3, #132	@ 0x84
 800496e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	6812      	ldr	r2, [r2, #0]
 8004974:	4611      	mov	r1, r2
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	01d2      	lsls	r2, r2, #7
 800497a:	440a      	add	r2, r1
 800497c:	3284      	adds	r2, #132	@ 0x84
 800497e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004982:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004988:	69fa      	ldr	r2, [r7, #28]
 800498a:	fb02 f303 	mul.w	r3, r2, r3
 800498e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	6859      	ldr	r1, [r3, #4]
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	1acb      	subs	r3, r1, r3
 800499a:	69f9      	ldr	r1, [r7, #28]
 800499c:	fb01 f303 	mul.w	r3, r1, r3
 80049a0:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 80049a2:	68f9      	ldr	r1, [r7, #12]
 80049a4:	6809      	ldr	r1, [r1, #0]
 80049a6:	4608      	mov	r0, r1
 80049a8:	6879      	ldr	r1, [r7, #4]
 80049aa:	01c9      	lsls	r1, r1, #7
 80049ac:	4401      	add	r1, r0
 80049ae:	3184      	adds	r1, #132	@ 0x84
 80049b0:	4313      	orrs	r3, r2
 80049b2:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	461a      	mov	r2, r3
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	01db      	lsls	r3, r3, #7
 80049be:	4413      	add	r3, r2
 80049c0:	3384      	adds	r3, #132	@ 0x84
 80049c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	6812      	ldr	r2, [r2, #0]
 80049c8:	4611      	mov	r1, r2
 80049ca:	687a      	ldr	r2, [r7, #4]
 80049cc:	01d2      	lsls	r2, r2, #7
 80049ce:	440a      	add	r2, r1
 80049d0:	3284      	adds	r2, #132	@ 0x84
 80049d2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80049d6:	f023 0307 	bic.w	r3, r3, #7
 80049da:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	461a      	mov	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	01db      	lsls	r3, r3, #7
 80049e6:	4413      	add	r3, r2
 80049e8:	3384      	adds	r3, #132	@ 0x84
 80049ea:	461a      	mov	r2, r3
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	461a      	mov	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	01db      	lsls	r3, r3, #7
 80049fc:	4413      	add	r3, r2
 80049fe:	3384      	adds	r3, #132	@ 0x84
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	6812      	ldr	r2, [r2, #0]
 8004a06:	4611      	mov	r1, r2
 8004a08:	687a      	ldr	r2, [r7, #4]
 8004a0a:	01d2      	lsls	r2, r2, #7
 8004a0c:	440a      	add	r2, r1
 8004a0e:	3284      	adds	r2, #132	@ 0x84
 8004a10:	f043 0301 	orr.w	r3, r3, #1
 8004a14:	6013      	str	r3, [r2, #0]
}
 8004a16:	bf00      	nop
 8004a18:	3724      	adds	r7, #36	@ 0x24
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr
	...

08004a24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b086      	sub	sp, #24
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d101      	bne.n	8004a36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e267      	b.n	8004f06 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0301 	and.w	r3, r3, #1
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d075      	beq.n	8004b2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a42:	4b88      	ldr	r3, [pc, #544]	@ (8004c64 <HAL_RCC_OscConfig+0x240>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f003 030c 	and.w	r3, r3, #12
 8004a4a:	2b04      	cmp	r3, #4
 8004a4c:	d00c      	beq.n	8004a68 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a4e:	4b85      	ldr	r3, [pc, #532]	@ (8004c64 <HAL_RCC_OscConfig+0x240>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a56:	2b08      	cmp	r3, #8
 8004a58:	d112      	bne.n	8004a80 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a5a:	4b82      	ldr	r3, [pc, #520]	@ (8004c64 <HAL_RCC_OscConfig+0x240>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a62:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a66:	d10b      	bne.n	8004a80 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a68:	4b7e      	ldr	r3, [pc, #504]	@ (8004c64 <HAL_RCC_OscConfig+0x240>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d05b      	beq.n	8004b2c <HAL_RCC_OscConfig+0x108>
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d157      	bne.n	8004b2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a7c:	2301      	movs	r3, #1
 8004a7e:	e242      	b.n	8004f06 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a88:	d106      	bne.n	8004a98 <HAL_RCC_OscConfig+0x74>
 8004a8a:	4b76      	ldr	r3, [pc, #472]	@ (8004c64 <HAL_RCC_OscConfig+0x240>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a75      	ldr	r2, [pc, #468]	@ (8004c64 <HAL_RCC_OscConfig+0x240>)
 8004a90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a94:	6013      	str	r3, [r2, #0]
 8004a96:	e01d      	b.n	8004ad4 <HAL_RCC_OscConfig+0xb0>
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004aa0:	d10c      	bne.n	8004abc <HAL_RCC_OscConfig+0x98>
 8004aa2:	4b70      	ldr	r3, [pc, #448]	@ (8004c64 <HAL_RCC_OscConfig+0x240>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a6f      	ldr	r2, [pc, #444]	@ (8004c64 <HAL_RCC_OscConfig+0x240>)
 8004aa8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004aac:	6013      	str	r3, [r2, #0]
 8004aae:	4b6d      	ldr	r3, [pc, #436]	@ (8004c64 <HAL_RCC_OscConfig+0x240>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	4a6c      	ldr	r2, [pc, #432]	@ (8004c64 <HAL_RCC_OscConfig+0x240>)
 8004ab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004ab8:	6013      	str	r3, [r2, #0]
 8004aba:	e00b      	b.n	8004ad4 <HAL_RCC_OscConfig+0xb0>
 8004abc:	4b69      	ldr	r3, [pc, #420]	@ (8004c64 <HAL_RCC_OscConfig+0x240>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a68      	ldr	r2, [pc, #416]	@ (8004c64 <HAL_RCC_OscConfig+0x240>)
 8004ac2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ac6:	6013      	str	r3, [r2, #0]
 8004ac8:	4b66      	ldr	r3, [pc, #408]	@ (8004c64 <HAL_RCC_OscConfig+0x240>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	4a65      	ldr	r2, [pc, #404]	@ (8004c64 <HAL_RCC_OscConfig+0x240>)
 8004ace:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ad2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d013      	beq.n	8004b04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004adc:	f7fc ff6a 	bl	80019b4 <HAL_GetTick>
 8004ae0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ae2:	e008      	b.n	8004af6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ae4:	f7fc ff66 	bl	80019b4 <HAL_GetTick>
 8004ae8:	4602      	mov	r2, r0
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	1ad3      	subs	r3, r2, r3
 8004aee:	2b64      	cmp	r3, #100	@ 0x64
 8004af0:	d901      	bls.n	8004af6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004af2:	2303      	movs	r3, #3
 8004af4:	e207      	b.n	8004f06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004af6:	4b5b      	ldr	r3, [pc, #364]	@ (8004c64 <HAL_RCC_OscConfig+0x240>)
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d0f0      	beq.n	8004ae4 <HAL_RCC_OscConfig+0xc0>
 8004b02:	e014      	b.n	8004b2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b04:	f7fc ff56 	bl	80019b4 <HAL_GetTick>
 8004b08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b0a:	e008      	b.n	8004b1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b0c:	f7fc ff52 	bl	80019b4 <HAL_GetTick>
 8004b10:	4602      	mov	r2, r0
 8004b12:	693b      	ldr	r3, [r7, #16]
 8004b14:	1ad3      	subs	r3, r2, r3
 8004b16:	2b64      	cmp	r3, #100	@ 0x64
 8004b18:	d901      	bls.n	8004b1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b1a:	2303      	movs	r3, #3
 8004b1c:	e1f3      	b.n	8004f06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004b1e:	4b51      	ldr	r3, [pc, #324]	@ (8004c64 <HAL_RCC_OscConfig+0x240>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d1f0      	bne.n	8004b0c <HAL_RCC_OscConfig+0xe8>
 8004b2a:	e000      	b.n	8004b2e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0302 	and.w	r3, r3, #2
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d063      	beq.n	8004c02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b3a:	4b4a      	ldr	r3, [pc, #296]	@ (8004c64 <HAL_RCC_OscConfig+0x240>)
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f003 030c 	and.w	r3, r3, #12
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00b      	beq.n	8004b5e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b46:	4b47      	ldr	r3, [pc, #284]	@ (8004c64 <HAL_RCC_OscConfig+0x240>)
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b4e:	2b08      	cmp	r3, #8
 8004b50:	d11c      	bne.n	8004b8c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b52:	4b44      	ldr	r3, [pc, #272]	@ (8004c64 <HAL_RCC_OscConfig+0x240>)
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d116      	bne.n	8004b8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b5e:	4b41      	ldr	r3, [pc, #260]	@ (8004c64 <HAL_RCC_OscConfig+0x240>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f003 0302 	and.w	r3, r3, #2
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d005      	beq.n	8004b76 <HAL_RCC_OscConfig+0x152>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d001      	beq.n	8004b76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b72:	2301      	movs	r3, #1
 8004b74:	e1c7      	b.n	8004f06 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b76:	4b3b      	ldr	r3, [pc, #236]	@ (8004c64 <HAL_RCC_OscConfig+0x240>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	00db      	lsls	r3, r3, #3
 8004b84:	4937      	ldr	r1, [pc, #220]	@ (8004c64 <HAL_RCC_OscConfig+0x240>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b8a:	e03a      	b.n	8004c02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	68db      	ldr	r3, [r3, #12]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d020      	beq.n	8004bd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b94:	4b34      	ldr	r3, [pc, #208]	@ (8004c68 <HAL_RCC_OscConfig+0x244>)
 8004b96:	2201      	movs	r2, #1
 8004b98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b9a:	f7fc ff0b 	bl	80019b4 <HAL_GetTick>
 8004b9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ba0:	e008      	b.n	8004bb4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ba2:	f7fc ff07 	bl	80019b4 <HAL_GetTick>
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	1ad3      	subs	r3, r2, r3
 8004bac:	2b02      	cmp	r3, #2
 8004bae:	d901      	bls.n	8004bb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	e1a8      	b.n	8004f06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bb4:	4b2b      	ldr	r3, [pc, #172]	@ (8004c64 <HAL_RCC_OscConfig+0x240>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0302 	and.w	r3, r3, #2
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d0f0      	beq.n	8004ba2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004bc0:	4b28      	ldr	r3, [pc, #160]	@ (8004c64 <HAL_RCC_OscConfig+0x240>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	691b      	ldr	r3, [r3, #16]
 8004bcc:	00db      	lsls	r3, r3, #3
 8004bce:	4925      	ldr	r1, [pc, #148]	@ (8004c64 <HAL_RCC_OscConfig+0x240>)
 8004bd0:	4313      	orrs	r3, r2
 8004bd2:	600b      	str	r3, [r1, #0]
 8004bd4:	e015      	b.n	8004c02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004bd6:	4b24      	ldr	r3, [pc, #144]	@ (8004c68 <HAL_RCC_OscConfig+0x244>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004bdc:	f7fc feea 	bl	80019b4 <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004be4:	f7fc fee6 	bl	80019b4 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b02      	cmp	r3, #2
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e187      	b.n	8004f06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bf6:	4b1b      	ldr	r3, [pc, #108]	@ (8004c64 <HAL_RCC_OscConfig+0x240>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f003 0302 	and.w	r3, r3, #2
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d1f0      	bne.n	8004be4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0308 	and.w	r3, r3, #8
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d036      	beq.n	8004c7c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	695b      	ldr	r3, [r3, #20]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d016      	beq.n	8004c44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004c16:	4b15      	ldr	r3, [pc, #84]	@ (8004c6c <HAL_RCC_OscConfig+0x248>)
 8004c18:	2201      	movs	r2, #1
 8004c1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c1c:	f7fc feca 	bl	80019b4 <HAL_GetTick>
 8004c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c22:	e008      	b.n	8004c36 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c24:	f7fc fec6 	bl	80019b4 <HAL_GetTick>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	693b      	ldr	r3, [r7, #16]
 8004c2c:	1ad3      	subs	r3, r2, r3
 8004c2e:	2b02      	cmp	r3, #2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e167      	b.n	8004f06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004c36:	4b0b      	ldr	r3, [pc, #44]	@ (8004c64 <HAL_RCC_OscConfig+0x240>)
 8004c38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d0f0      	beq.n	8004c24 <HAL_RCC_OscConfig+0x200>
 8004c42:	e01b      	b.n	8004c7c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004c44:	4b09      	ldr	r3, [pc, #36]	@ (8004c6c <HAL_RCC_OscConfig+0x248>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c4a:	f7fc feb3 	bl	80019b4 <HAL_GetTick>
 8004c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c50:	e00e      	b.n	8004c70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c52:	f7fc feaf 	bl	80019b4 <HAL_GetTick>
 8004c56:	4602      	mov	r2, r0
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	1ad3      	subs	r3, r2, r3
 8004c5c:	2b02      	cmp	r3, #2
 8004c5e:	d907      	bls.n	8004c70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e150      	b.n	8004f06 <HAL_RCC_OscConfig+0x4e2>
 8004c64:	40023800 	.word	0x40023800
 8004c68:	42470000 	.word	0x42470000
 8004c6c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c70:	4b88      	ldr	r3, [pc, #544]	@ (8004e94 <HAL_RCC_OscConfig+0x470>)
 8004c72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c74:	f003 0302 	and.w	r3, r3, #2
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d1ea      	bne.n	8004c52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f003 0304 	and.w	r3, r3, #4
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	f000 8097 	beq.w	8004db8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c8a:	2300      	movs	r3, #0
 8004c8c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c8e:	4b81      	ldr	r3, [pc, #516]	@ (8004e94 <HAL_RCC_OscConfig+0x470>)
 8004c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d10f      	bne.n	8004cba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	60bb      	str	r3, [r7, #8]
 8004c9e:	4b7d      	ldr	r3, [pc, #500]	@ (8004e94 <HAL_RCC_OscConfig+0x470>)
 8004ca0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ca2:	4a7c      	ldr	r2, [pc, #496]	@ (8004e94 <HAL_RCC_OscConfig+0x470>)
 8004ca4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004ca8:	6413      	str	r3, [r2, #64]	@ 0x40
 8004caa:	4b7a      	ldr	r3, [pc, #488]	@ (8004e94 <HAL_RCC_OscConfig+0x470>)
 8004cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004cb2:	60bb      	str	r3, [r7, #8]
 8004cb4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cba:	4b77      	ldr	r3, [pc, #476]	@ (8004e98 <HAL_RCC_OscConfig+0x474>)
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d118      	bne.n	8004cf8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004cc6:	4b74      	ldr	r3, [pc, #464]	@ (8004e98 <HAL_RCC_OscConfig+0x474>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a73      	ldr	r2, [pc, #460]	@ (8004e98 <HAL_RCC_OscConfig+0x474>)
 8004ccc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004cd0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004cd2:	f7fc fe6f 	bl	80019b4 <HAL_GetTick>
 8004cd6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cd8:	e008      	b.n	8004cec <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004cda:	f7fc fe6b 	bl	80019b4 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e10c      	b.n	8004f06 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004cec:	4b6a      	ldr	r3, [pc, #424]	@ (8004e98 <HAL_RCC_OscConfig+0x474>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0f0      	beq.n	8004cda <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d106      	bne.n	8004d0e <HAL_RCC_OscConfig+0x2ea>
 8004d00:	4b64      	ldr	r3, [pc, #400]	@ (8004e94 <HAL_RCC_OscConfig+0x470>)
 8004d02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d04:	4a63      	ldr	r2, [pc, #396]	@ (8004e94 <HAL_RCC_OscConfig+0x470>)
 8004d06:	f043 0301 	orr.w	r3, r3, #1
 8004d0a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d0c:	e01c      	b.n	8004d48 <HAL_RCC_OscConfig+0x324>
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	689b      	ldr	r3, [r3, #8]
 8004d12:	2b05      	cmp	r3, #5
 8004d14:	d10c      	bne.n	8004d30 <HAL_RCC_OscConfig+0x30c>
 8004d16:	4b5f      	ldr	r3, [pc, #380]	@ (8004e94 <HAL_RCC_OscConfig+0x470>)
 8004d18:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d1a:	4a5e      	ldr	r2, [pc, #376]	@ (8004e94 <HAL_RCC_OscConfig+0x470>)
 8004d1c:	f043 0304 	orr.w	r3, r3, #4
 8004d20:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d22:	4b5c      	ldr	r3, [pc, #368]	@ (8004e94 <HAL_RCC_OscConfig+0x470>)
 8004d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d26:	4a5b      	ldr	r2, [pc, #364]	@ (8004e94 <HAL_RCC_OscConfig+0x470>)
 8004d28:	f043 0301 	orr.w	r3, r3, #1
 8004d2c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d2e:	e00b      	b.n	8004d48 <HAL_RCC_OscConfig+0x324>
 8004d30:	4b58      	ldr	r3, [pc, #352]	@ (8004e94 <HAL_RCC_OscConfig+0x470>)
 8004d32:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d34:	4a57      	ldr	r2, [pc, #348]	@ (8004e94 <HAL_RCC_OscConfig+0x470>)
 8004d36:	f023 0301 	bic.w	r3, r3, #1
 8004d3a:	6713      	str	r3, [r2, #112]	@ 0x70
 8004d3c:	4b55      	ldr	r3, [pc, #340]	@ (8004e94 <HAL_RCC_OscConfig+0x470>)
 8004d3e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d40:	4a54      	ldr	r2, [pc, #336]	@ (8004e94 <HAL_RCC_OscConfig+0x470>)
 8004d42:	f023 0304 	bic.w	r3, r3, #4
 8004d46:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	689b      	ldr	r3, [r3, #8]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d015      	beq.n	8004d7c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d50:	f7fc fe30 	bl	80019b4 <HAL_GetTick>
 8004d54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d56:	e00a      	b.n	8004d6e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d58:	f7fc fe2c 	bl	80019b4 <HAL_GetTick>
 8004d5c:	4602      	mov	r2, r0
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	1ad3      	subs	r3, r2, r3
 8004d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d901      	bls.n	8004d6e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d6a:	2303      	movs	r3, #3
 8004d6c:	e0cb      	b.n	8004f06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d6e:	4b49      	ldr	r3, [pc, #292]	@ (8004e94 <HAL_RCC_OscConfig+0x470>)
 8004d70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d72:	f003 0302 	and.w	r3, r3, #2
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d0ee      	beq.n	8004d58 <HAL_RCC_OscConfig+0x334>
 8004d7a:	e014      	b.n	8004da6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d7c:	f7fc fe1a 	bl	80019b4 <HAL_GetTick>
 8004d80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d82:	e00a      	b.n	8004d9a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d84:	f7fc fe16 	bl	80019b4 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	693b      	ldr	r3, [r7, #16]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e0b5      	b.n	8004f06 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d9a:	4b3e      	ldr	r3, [pc, #248]	@ (8004e94 <HAL_RCC_OscConfig+0x470>)
 8004d9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1ee      	bne.n	8004d84 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004da6:	7dfb      	ldrb	r3, [r7, #23]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d105      	bne.n	8004db8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004dac:	4b39      	ldr	r3, [pc, #228]	@ (8004e94 <HAL_RCC_OscConfig+0x470>)
 8004dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004db0:	4a38      	ldr	r2, [pc, #224]	@ (8004e94 <HAL_RCC_OscConfig+0x470>)
 8004db2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004db6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	699b      	ldr	r3, [r3, #24]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	f000 80a1 	beq.w	8004f04 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004dc2:	4b34      	ldr	r3, [pc, #208]	@ (8004e94 <HAL_RCC_OscConfig+0x470>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f003 030c 	and.w	r3, r3, #12
 8004dca:	2b08      	cmp	r3, #8
 8004dcc:	d05c      	beq.n	8004e88 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	699b      	ldr	r3, [r3, #24]
 8004dd2:	2b02      	cmp	r3, #2
 8004dd4:	d141      	bne.n	8004e5a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dd6:	4b31      	ldr	r3, [pc, #196]	@ (8004e9c <HAL_RCC_OscConfig+0x478>)
 8004dd8:	2200      	movs	r2, #0
 8004dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ddc:	f7fc fdea 	bl	80019b4 <HAL_GetTick>
 8004de0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004de2:	e008      	b.n	8004df6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004de4:	f7fc fde6 	bl	80019b4 <HAL_GetTick>
 8004de8:	4602      	mov	r2, r0
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d901      	bls.n	8004df6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004df2:	2303      	movs	r3, #3
 8004df4:	e087      	b.n	8004f06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004df6:	4b27      	ldr	r3, [pc, #156]	@ (8004e94 <HAL_RCC_OscConfig+0x470>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1f0      	bne.n	8004de4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	69da      	ldr	r2, [r3, #28]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a1b      	ldr	r3, [r3, #32]
 8004e0a:	431a      	orrs	r2, r3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e10:	019b      	lsls	r3, r3, #6
 8004e12:	431a      	orrs	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e18:	085b      	lsrs	r3, r3, #1
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	041b      	lsls	r3, r3, #16
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e24:	061b      	lsls	r3, r3, #24
 8004e26:	491b      	ldr	r1, [pc, #108]	@ (8004e94 <HAL_RCC_OscConfig+0x470>)
 8004e28:	4313      	orrs	r3, r2
 8004e2a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004e2c:	4b1b      	ldr	r3, [pc, #108]	@ (8004e9c <HAL_RCC_OscConfig+0x478>)
 8004e2e:	2201      	movs	r2, #1
 8004e30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e32:	f7fc fdbf 	bl	80019b4 <HAL_GetTick>
 8004e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e38:	e008      	b.n	8004e4c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e3a:	f7fc fdbb 	bl	80019b4 <HAL_GetTick>
 8004e3e:	4602      	mov	r2, r0
 8004e40:	693b      	ldr	r3, [r7, #16]
 8004e42:	1ad3      	subs	r3, r2, r3
 8004e44:	2b02      	cmp	r3, #2
 8004e46:	d901      	bls.n	8004e4c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e48:	2303      	movs	r3, #3
 8004e4a:	e05c      	b.n	8004f06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e4c:	4b11      	ldr	r3, [pc, #68]	@ (8004e94 <HAL_RCC_OscConfig+0x470>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d0f0      	beq.n	8004e3a <HAL_RCC_OscConfig+0x416>
 8004e58:	e054      	b.n	8004f04 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e5a:	4b10      	ldr	r3, [pc, #64]	@ (8004e9c <HAL_RCC_OscConfig+0x478>)
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e60:	f7fc fda8 	bl	80019b4 <HAL_GetTick>
 8004e64:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e66:	e008      	b.n	8004e7a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e68:	f7fc fda4 	bl	80019b4 <HAL_GetTick>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	1ad3      	subs	r3, r2, r3
 8004e72:	2b02      	cmp	r3, #2
 8004e74:	d901      	bls.n	8004e7a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e76:	2303      	movs	r3, #3
 8004e78:	e045      	b.n	8004f06 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e7a:	4b06      	ldr	r3, [pc, #24]	@ (8004e94 <HAL_RCC_OscConfig+0x470>)
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d1f0      	bne.n	8004e68 <HAL_RCC_OscConfig+0x444>
 8004e86:	e03d      	b.n	8004f04 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d107      	bne.n	8004ea0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e038      	b.n	8004f06 <HAL_RCC_OscConfig+0x4e2>
 8004e94:	40023800 	.word	0x40023800
 8004e98:	40007000 	.word	0x40007000
 8004e9c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8004f10 <HAL_RCC_OscConfig+0x4ec>)
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	699b      	ldr	r3, [r3, #24]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d028      	beq.n	8004f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d121      	bne.n	8004f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d11a      	bne.n	8004f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eca:	68fa      	ldr	r2, [r7, #12]
 8004ecc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004ed0:	4013      	ands	r3, r2
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004ed6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d111      	bne.n	8004f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ee6:	085b      	lsrs	r3, r3, #1
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d107      	bne.n	8004f00 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004efa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d001      	beq.n	8004f04 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e000      	b.n	8004f06 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3718      	adds	r7, #24
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bd80      	pop	{r7, pc}
 8004f0e:	bf00      	nop
 8004f10:	40023800 	.word	0x40023800

08004f14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004f14:	b580      	push	{r7, lr}
 8004f16:	b084      	sub	sp, #16
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d101      	bne.n	8004f28 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004f24:	2301      	movs	r3, #1
 8004f26:	e0cc      	b.n	80050c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004f28:	4b68      	ldr	r3, [pc, #416]	@ (80050cc <HAL_RCC_ClockConfig+0x1b8>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 030f 	and.w	r3, r3, #15
 8004f30:	683a      	ldr	r2, [r7, #0]
 8004f32:	429a      	cmp	r2, r3
 8004f34:	d90c      	bls.n	8004f50 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f36:	4b65      	ldr	r3, [pc, #404]	@ (80050cc <HAL_RCC_ClockConfig+0x1b8>)
 8004f38:	683a      	ldr	r2, [r7, #0]
 8004f3a:	b2d2      	uxtb	r2, r2
 8004f3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f3e:	4b63      	ldr	r3, [pc, #396]	@ (80050cc <HAL_RCC_ClockConfig+0x1b8>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 030f 	and.w	r3, r3, #15
 8004f46:	683a      	ldr	r2, [r7, #0]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d001      	beq.n	8004f50 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e0b8      	b.n	80050c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f003 0302 	and.w	r3, r3, #2
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d020      	beq.n	8004f9e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f003 0304 	and.w	r3, r3, #4
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d005      	beq.n	8004f74 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f68:	4b59      	ldr	r3, [pc, #356]	@ (80050d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6a:	689b      	ldr	r3, [r3, #8]
 8004f6c:	4a58      	ldr	r2, [pc, #352]	@ (80050d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f72:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f003 0308 	and.w	r3, r3, #8
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d005      	beq.n	8004f8c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f80:	4b53      	ldr	r3, [pc, #332]	@ (80050d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f82:	689b      	ldr	r3, [r3, #8]
 8004f84:	4a52      	ldr	r2, [pc, #328]	@ (80050d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f86:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f8a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f8c:	4b50      	ldr	r3, [pc, #320]	@ (80050d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8e:	689b      	ldr	r3, [r3, #8]
 8004f90:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	494d      	ldr	r1, [pc, #308]	@ (80050d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f003 0301 	and.w	r3, r3, #1
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d044      	beq.n	8005034 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	2b01      	cmp	r3, #1
 8004fb0:	d107      	bne.n	8004fc2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fb2:	4b47      	ldr	r3, [pc, #284]	@ (80050d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d119      	bne.n	8004ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fbe:	2301      	movs	r3, #1
 8004fc0:	e07f      	b.n	80050c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	d003      	beq.n	8004fd2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004fce:	2b03      	cmp	r3, #3
 8004fd0:	d107      	bne.n	8004fe2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fd2:	4b3f      	ldr	r3, [pc, #252]	@ (80050d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d109      	bne.n	8004ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e06f      	b.n	80050c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004fe2:	4b3b      	ldr	r3, [pc, #236]	@ (80050d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e067      	b.n	80050c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004ff2:	4b37      	ldr	r3, [pc, #220]	@ (80050d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f023 0203 	bic.w	r2, r3, #3
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	685b      	ldr	r3, [r3, #4]
 8004ffe:	4934      	ldr	r1, [pc, #208]	@ (80050d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005000:	4313      	orrs	r3, r2
 8005002:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005004:	f7fc fcd6 	bl	80019b4 <HAL_GetTick>
 8005008:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800500a:	e00a      	b.n	8005022 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800500c:	f7fc fcd2 	bl	80019b4 <HAL_GetTick>
 8005010:	4602      	mov	r2, r0
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	1ad3      	subs	r3, r2, r3
 8005016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800501a:	4293      	cmp	r3, r2
 800501c:	d901      	bls.n	8005022 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800501e:	2303      	movs	r3, #3
 8005020:	e04f      	b.n	80050c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005022:	4b2b      	ldr	r3, [pc, #172]	@ (80050d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005024:	689b      	ldr	r3, [r3, #8]
 8005026:	f003 020c 	and.w	r2, r3, #12
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	685b      	ldr	r3, [r3, #4]
 800502e:	009b      	lsls	r3, r3, #2
 8005030:	429a      	cmp	r2, r3
 8005032:	d1eb      	bne.n	800500c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005034:	4b25      	ldr	r3, [pc, #148]	@ (80050cc <HAL_RCC_ClockConfig+0x1b8>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 030f 	and.w	r3, r3, #15
 800503c:	683a      	ldr	r2, [r7, #0]
 800503e:	429a      	cmp	r2, r3
 8005040:	d20c      	bcs.n	800505c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005042:	4b22      	ldr	r3, [pc, #136]	@ (80050cc <HAL_RCC_ClockConfig+0x1b8>)
 8005044:	683a      	ldr	r2, [r7, #0]
 8005046:	b2d2      	uxtb	r2, r2
 8005048:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800504a:	4b20      	ldr	r3, [pc, #128]	@ (80050cc <HAL_RCC_ClockConfig+0x1b8>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f003 030f 	and.w	r3, r3, #15
 8005052:	683a      	ldr	r2, [r7, #0]
 8005054:	429a      	cmp	r2, r3
 8005056:	d001      	beq.n	800505c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005058:	2301      	movs	r3, #1
 800505a:	e032      	b.n	80050c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	2b00      	cmp	r3, #0
 8005066:	d008      	beq.n	800507a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005068:	4b19      	ldr	r3, [pc, #100]	@ (80050d0 <HAL_RCC_ClockConfig+0x1bc>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	4916      	ldr	r1, [pc, #88]	@ (80050d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005076:	4313      	orrs	r3, r2
 8005078:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0308 	and.w	r3, r3, #8
 8005082:	2b00      	cmp	r3, #0
 8005084:	d009      	beq.n	800509a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005086:	4b12      	ldr	r3, [pc, #72]	@ (80050d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	691b      	ldr	r3, [r3, #16]
 8005092:	00db      	lsls	r3, r3, #3
 8005094:	490e      	ldr	r1, [pc, #56]	@ (80050d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005096:	4313      	orrs	r3, r2
 8005098:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800509a:	f000 f821 	bl	80050e0 <HAL_RCC_GetSysClockFreq>
 800509e:	4602      	mov	r2, r0
 80050a0:	4b0b      	ldr	r3, [pc, #44]	@ (80050d0 <HAL_RCC_ClockConfig+0x1bc>)
 80050a2:	689b      	ldr	r3, [r3, #8]
 80050a4:	091b      	lsrs	r3, r3, #4
 80050a6:	f003 030f 	and.w	r3, r3, #15
 80050aa:	490a      	ldr	r1, [pc, #40]	@ (80050d4 <HAL_RCC_ClockConfig+0x1c0>)
 80050ac:	5ccb      	ldrb	r3, [r1, r3]
 80050ae:	fa22 f303 	lsr.w	r3, r2, r3
 80050b2:	4a09      	ldr	r2, [pc, #36]	@ (80050d8 <HAL_RCC_ClockConfig+0x1c4>)
 80050b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80050b6:	4b09      	ldr	r3, [pc, #36]	@ (80050dc <HAL_RCC_ClockConfig+0x1c8>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4618      	mov	r0, r3
 80050bc:	f7fc fb34 	bl	8001728 <HAL_InitTick>

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
 80050ca:	bf00      	nop
 80050cc:	40023c00 	.word	0x40023c00
 80050d0:	40023800 	.word	0x40023800
 80050d4:	08007bf0 	.word	0x08007bf0
 80050d8:	20000004 	.word	0x20000004
 80050dc:	20000008 	.word	0x20000008

080050e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80050e4:	b094      	sub	sp, #80	@ 0x50
 80050e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80050e8:	2300      	movs	r3, #0
 80050ea:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80050ec:	2300      	movs	r3, #0
 80050ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80050f0:	2300      	movs	r3, #0
 80050f2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80050f4:	2300      	movs	r3, #0
 80050f6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050f8:	4b79      	ldr	r3, [pc, #484]	@ (80052e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	f003 030c 	and.w	r3, r3, #12
 8005100:	2b08      	cmp	r3, #8
 8005102:	d00d      	beq.n	8005120 <HAL_RCC_GetSysClockFreq+0x40>
 8005104:	2b08      	cmp	r3, #8
 8005106:	f200 80e1 	bhi.w	80052cc <HAL_RCC_GetSysClockFreq+0x1ec>
 800510a:	2b00      	cmp	r3, #0
 800510c:	d002      	beq.n	8005114 <HAL_RCC_GetSysClockFreq+0x34>
 800510e:	2b04      	cmp	r3, #4
 8005110:	d003      	beq.n	800511a <HAL_RCC_GetSysClockFreq+0x3a>
 8005112:	e0db      	b.n	80052cc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005114:	4b73      	ldr	r3, [pc, #460]	@ (80052e4 <HAL_RCC_GetSysClockFreq+0x204>)
 8005116:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005118:	e0db      	b.n	80052d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800511a:	4b73      	ldr	r3, [pc, #460]	@ (80052e8 <HAL_RCC_GetSysClockFreq+0x208>)
 800511c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800511e:	e0d8      	b.n	80052d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005120:	4b6f      	ldr	r3, [pc, #444]	@ (80052e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005122:	685b      	ldr	r3, [r3, #4]
 8005124:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005128:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800512a:	4b6d      	ldr	r3, [pc, #436]	@ (80052e0 <HAL_RCC_GetSysClockFreq+0x200>)
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005132:	2b00      	cmp	r3, #0
 8005134:	d063      	beq.n	80051fe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005136:	4b6a      	ldr	r3, [pc, #424]	@ (80052e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	099b      	lsrs	r3, r3, #6
 800513c:	2200      	movs	r2, #0
 800513e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005140:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005142:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005144:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005148:	633b      	str	r3, [r7, #48]	@ 0x30
 800514a:	2300      	movs	r3, #0
 800514c:	637b      	str	r3, [r7, #52]	@ 0x34
 800514e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005152:	4622      	mov	r2, r4
 8005154:	462b      	mov	r3, r5
 8005156:	f04f 0000 	mov.w	r0, #0
 800515a:	f04f 0100 	mov.w	r1, #0
 800515e:	0159      	lsls	r1, r3, #5
 8005160:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005164:	0150      	lsls	r0, r2, #5
 8005166:	4602      	mov	r2, r0
 8005168:	460b      	mov	r3, r1
 800516a:	4621      	mov	r1, r4
 800516c:	1a51      	subs	r1, r2, r1
 800516e:	6139      	str	r1, [r7, #16]
 8005170:	4629      	mov	r1, r5
 8005172:	eb63 0301 	sbc.w	r3, r3, r1
 8005176:	617b      	str	r3, [r7, #20]
 8005178:	f04f 0200 	mov.w	r2, #0
 800517c:	f04f 0300 	mov.w	r3, #0
 8005180:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005184:	4659      	mov	r1, fp
 8005186:	018b      	lsls	r3, r1, #6
 8005188:	4651      	mov	r1, sl
 800518a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800518e:	4651      	mov	r1, sl
 8005190:	018a      	lsls	r2, r1, #6
 8005192:	4651      	mov	r1, sl
 8005194:	ebb2 0801 	subs.w	r8, r2, r1
 8005198:	4659      	mov	r1, fp
 800519a:	eb63 0901 	sbc.w	r9, r3, r1
 800519e:	f04f 0200 	mov.w	r2, #0
 80051a2:	f04f 0300 	mov.w	r3, #0
 80051a6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051aa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051ae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051b2:	4690      	mov	r8, r2
 80051b4:	4699      	mov	r9, r3
 80051b6:	4623      	mov	r3, r4
 80051b8:	eb18 0303 	adds.w	r3, r8, r3
 80051bc:	60bb      	str	r3, [r7, #8]
 80051be:	462b      	mov	r3, r5
 80051c0:	eb49 0303 	adc.w	r3, r9, r3
 80051c4:	60fb      	str	r3, [r7, #12]
 80051c6:	f04f 0200 	mov.w	r2, #0
 80051ca:	f04f 0300 	mov.w	r3, #0
 80051ce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80051d2:	4629      	mov	r1, r5
 80051d4:	024b      	lsls	r3, r1, #9
 80051d6:	4621      	mov	r1, r4
 80051d8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80051dc:	4621      	mov	r1, r4
 80051de:	024a      	lsls	r2, r1, #9
 80051e0:	4610      	mov	r0, r2
 80051e2:	4619      	mov	r1, r3
 80051e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051e6:	2200      	movs	r2, #0
 80051e8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051ea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80051f0:	f7fa fffc 	bl	80001ec <__aeabi_uldivmod>
 80051f4:	4602      	mov	r2, r0
 80051f6:	460b      	mov	r3, r1
 80051f8:	4613      	mov	r3, r2
 80051fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051fc:	e058      	b.n	80052b0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051fe:	4b38      	ldr	r3, [pc, #224]	@ (80052e0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	099b      	lsrs	r3, r3, #6
 8005204:	2200      	movs	r2, #0
 8005206:	4618      	mov	r0, r3
 8005208:	4611      	mov	r1, r2
 800520a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800520e:	623b      	str	r3, [r7, #32]
 8005210:	2300      	movs	r3, #0
 8005212:	627b      	str	r3, [r7, #36]	@ 0x24
 8005214:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005218:	4642      	mov	r2, r8
 800521a:	464b      	mov	r3, r9
 800521c:	f04f 0000 	mov.w	r0, #0
 8005220:	f04f 0100 	mov.w	r1, #0
 8005224:	0159      	lsls	r1, r3, #5
 8005226:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800522a:	0150      	lsls	r0, r2, #5
 800522c:	4602      	mov	r2, r0
 800522e:	460b      	mov	r3, r1
 8005230:	4641      	mov	r1, r8
 8005232:	ebb2 0a01 	subs.w	sl, r2, r1
 8005236:	4649      	mov	r1, r9
 8005238:	eb63 0b01 	sbc.w	fp, r3, r1
 800523c:	f04f 0200 	mov.w	r2, #0
 8005240:	f04f 0300 	mov.w	r3, #0
 8005244:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005248:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800524c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005250:	ebb2 040a 	subs.w	r4, r2, sl
 8005254:	eb63 050b 	sbc.w	r5, r3, fp
 8005258:	f04f 0200 	mov.w	r2, #0
 800525c:	f04f 0300 	mov.w	r3, #0
 8005260:	00eb      	lsls	r3, r5, #3
 8005262:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005266:	00e2      	lsls	r2, r4, #3
 8005268:	4614      	mov	r4, r2
 800526a:	461d      	mov	r5, r3
 800526c:	4643      	mov	r3, r8
 800526e:	18e3      	adds	r3, r4, r3
 8005270:	603b      	str	r3, [r7, #0]
 8005272:	464b      	mov	r3, r9
 8005274:	eb45 0303 	adc.w	r3, r5, r3
 8005278:	607b      	str	r3, [r7, #4]
 800527a:	f04f 0200 	mov.w	r2, #0
 800527e:	f04f 0300 	mov.w	r3, #0
 8005282:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005286:	4629      	mov	r1, r5
 8005288:	028b      	lsls	r3, r1, #10
 800528a:	4621      	mov	r1, r4
 800528c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005290:	4621      	mov	r1, r4
 8005292:	028a      	lsls	r2, r1, #10
 8005294:	4610      	mov	r0, r2
 8005296:	4619      	mov	r1, r3
 8005298:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800529a:	2200      	movs	r2, #0
 800529c:	61bb      	str	r3, [r7, #24]
 800529e:	61fa      	str	r2, [r7, #28]
 80052a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052a4:	f7fa ffa2 	bl	80001ec <__aeabi_uldivmod>
 80052a8:	4602      	mov	r2, r0
 80052aa:	460b      	mov	r3, r1
 80052ac:	4613      	mov	r3, r2
 80052ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80052b0:	4b0b      	ldr	r3, [pc, #44]	@ (80052e0 <HAL_RCC_GetSysClockFreq+0x200>)
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	0c1b      	lsrs	r3, r3, #16
 80052b6:	f003 0303 	and.w	r3, r3, #3
 80052ba:	3301      	adds	r3, #1
 80052bc:	005b      	lsls	r3, r3, #1
 80052be:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80052c0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80052c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80052c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052ca:	e002      	b.n	80052d2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80052cc:	4b05      	ldr	r3, [pc, #20]	@ (80052e4 <HAL_RCC_GetSysClockFreq+0x204>)
 80052ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80052d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80052d2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80052d4:	4618      	mov	r0, r3
 80052d6:	3750      	adds	r7, #80	@ 0x50
 80052d8:	46bd      	mov	sp, r7
 80052da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052de:	bf00      	nop
 80052e0:	40023800 	.word	0x40023800
 80052e4:	00f42400 	.word	0x00f42400
 80052e8:	007a1200 	.word	0x007a1200

080052ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052ec:	b480      	push	{r7}
 80052ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052f0:	4b03      	ldr	r3, [pc, #12]	@ (8005300 <HAL_RCC_GetHCLKFreq+0x14>)
 80052f2:	681b      	ldr	r3, [r3, #0]
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr
 80052fe:	bf00      	nop
 8005300:	20000004 	.word	0x20000004

08005304 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005308:	f7ff fff0 	bl	80052ec <HAL_RCC_GetHCLKFreq>
 800530c:	4602      	mov	r2, r0
 800530e:	4b05      	ldr	r3, [pc, #20]	@ (8005324 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	0a9b      	lsrs	r3, r3, #10
 8005314:	f003 0307 	and.w	r3, r3, #7
 8005318:	4903      	ldr	r1, [pc, #12]	@ (8005328 <HAL_RCC_GetPCLK1Freq+0x24>)
 800531a:	5ccb      	ldrb	r3, [r1, r3]
 800531c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005320:	4618      	mov	r0, r3
 8005322:	bd80      	pop	{r7, pc}
 8005324:	40023800 	.word	0x40023800
 8005328:	08007c00 	.word	0x08007c00

0800532c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005330:	f7ff ffdc 	bl	80052ec <HAL_RCC_GetHCLKFreq>
 8005334:	4602      	mov	r2, r0
 8005336:	4b05      	ldr	r3, [pc, #20]	@ (800534c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	0b5b      	lsrs	r3, r3, #13
 800533c:	f003 0307 	and.w	r3, r3, #7
 8005340:	4903      	ldr	r1, [pc, #12]	@ (8005350 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005342:	5ccb      	ldrb	r3, [r1, r3]
 8005344:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005348:	4618      	mov	r0, r3
 800534a:	bd80      	pop	{r7, pc}
 800534c:	40023800 	.word	0x40023800
 8005350:	08007c00 	.word	0x08007c00

08005354 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005354:	b480      	push	{r7}
 8005356:	b083      	sub	sp, #12
 8005358:	af00      	add	r7, sp, #0
 800535a:	6078      	str	r0, [r7, #4]
 800535c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	220f      	movs	r2, #15
 8005362:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005364:	4b12      	ldr	r3, [pc, #72]	@ (80053b0 <HAL_RCC_GetClockConfig+0x5c>)
 8005366:	689b      	ldr	r3, [r3, #8]
 8005368:	f003 0203 	and.w	r2, r3, #3
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005370:	4b0f      	ldr	r3, [pc, #60]	@ (80053b0 <HAL_RCC_GetClockConfig+0x5c>)
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800537c:	4b0c      	ldr	r3, [pc, #48]	@ (80053b0 <HAL_RCC_GetClockConfig+0x5c>)
 800537e:	689b      	ldr	r3, [r3, #8]
 8005380:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005388:	4b09      	ldr	r3, [pc, #36]	@ (80053b0 <HAL_RCC_GetClockConfig+0x5c>)
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	08db      	lsrs	r3, r3, #3
 800538e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005396:	4b07      	ldr	r3, [pc, #28]	@ (80053b4 <HAL_RCC_GetClockConfig+0x60>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f003 020f 	and.w	r2, r3, #15
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	601a      	str	r2, [r3, #0]
}
 80053a2:	bf00      	nop
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
 80053ae:	bf00      	nop
 80053b0:	40023800 	.word	0x40023800
 80053b4:	40023c00 	.word	0x40023c00

080053b8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80053c0:	2300      	movs	r3, #0
 80053c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80053c4:	2300      	movs	r3, #0
 80053c6:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 0301 	and.w	r3, r3, #1
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d10b      	bne.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d105      	bne.n	80053ec <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d075      	beq.n	80054d8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80053ec:	4b91      	ldr	r3, [pc, #580]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80053ee:	2200      	movs	r2, #0
 80053f0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053f2:	f7fc fadf 	bl	80019b4 <HAL_GetTick>
 80053f6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053f8:	e008      	b.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80053fa:	f7fc fadb 	bl	80019b4 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	2b02      	cmp	r3, #2
 8005406:	d901      	bls.n	800540c <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e189      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800540c:	4b8a      	ldr	r3, [pc, #552]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1f0      	bne.n	80053fa <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0301 	and.w	r3, r3, #1
 8005420:	2b00      	cmp	r3, #0
 8005422:	d009      	beq.n	8005438 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	019a      	lsls	r2, r3, #6
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	689b      	ldr	r3, [r3, #8]
 800542e:	071b      	lsls	r3, r3, #28
 8005430:	4981      	ldr	r1, [pc, #516]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005432:	4313      	orrs	r3, r2
 8005434:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	2b00      	cmp	r3, #0
 8005442:	d01f      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005444:	4b7c      	ldr	r3, [pc, #496]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005446:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800544a:	0f1b      	lsrs	r3, r3, #28
 800544c:	f003 0307 	and.w	r3, r3, #7
 8005450:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	019a      	lsls	r2, r3, #6
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	061b      	lsls	r3, r3, #24
 800545e:	431a      	orrs	r2, r3
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	071b      	lsls	r3, r3, #28
 8005464:	4974      	ldr	r1, [pc, #464]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005466:	4313      	orrs	r3, r2
 8005468:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800546c:	4b72      	ldr	r3, [pc, #456]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800546e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005472:	f023 021f 	bic.w	r2, r3, #31
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	3b01      	subs	r3, #1
 800547c:	496e      	ldr	r1, [pc, #440]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800547e:	4313      	orrs	r3, r2
 8005480:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800548c:	2b00      	cmp	r3, #0
 800548e:	d00d      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	019a      	lsls	r2, r3, #6
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	061b      	lsls	r3, r3, #24
 800549c:	431a      	orrs	r2, r3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	689b      	ldr	r3, [r3, #8]
 80054a2:	071b      	lsls	r3, r3, #28
 80054a4:	4964      	ldr	r1, [pc, #400]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80054ac:	4b61      	ldr	r3, [pc, #388]	@ (8005634 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80054ae:	2201      	movs	r2, #1
 80054b0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054b2:	f7fc fa7f 	bl	80019b4 <HAL_GetTick>
 80054b6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054b8:	e008      	b.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80054ba:	f7fc fa7b 	bl	80019b4 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	2b02      	cmp	r3, #2
 80054c6:	d901      	bls.n	80054cc <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054c8:	2303      	movs	r3, #3
 80054ca:	e129      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80054cc:	4b5a      	ldr	r3, [pc, #360]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d0f0      	beq.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 0304 	and.w	r3, r3, #4
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d105      	bne.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d079      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80054f0:	4b52      	ldr	r3, [pc, #328]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054f6:	f7fc fa5d 	bl	80019b4 <HAL_GetTick>
 80054fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80054fc:	e008      	b.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80054fe:	f7fc fa59 	bl	80019b4 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d901      	bls.n	8005510 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e107      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005510:	4b49      	ldr	r3, [pc, #292]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005518:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800551c:	d0ef      	beq.n	80054fe <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	f003 0304 	and.w	r3, r3, #4
 8005526:	2b00      	cmp	r3, #0
 8005528:	d020      	beq.n	800556c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800552a:	4b43      	ldr	r3, [pc, #268]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800552c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005530:	0f1b      	lsrs	r3, r3, #28
 8005532:	f003 0307 	and.w	r3, r3, #7
 8005536:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	691b      	ldr	r3, [r3, #16]
 800553c:	019a      	lsls	r2, r3, #6
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	695b      	ldr	r3, [r3, #20]
 8005542:	061b      	lsls	r3, r3, #24
 8005544:	431a      	orrs	r2, r3
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	071b      	lsls	r3, r3, #28
 800554a:	493b      	ldr	r1, [pc, #236]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800554c:	4313      	orrs	r3, r2
 800554e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005552:	4b39      	ldr	r3, [pc, #228]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005554:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005558:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6a1b      	ldr	r3, [r3, #32]
 8005560:	3b01      	subs	r3, #1
 8005562:	021b      	lsls	r3, r3, #8
 8005564:	4934      	ldr	r1, [pc, #208]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005566:	4313      	orrs	r3, r2
 8005568:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f003 0308 	and.w	r3, r3, #8
 8005574:	2b00      	cmp	r3, #0
 8005576:	d01e      	beq.n	80055b6 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005578:	4b2f      	ldr	r3, [pc, #188]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800557a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800557e:	0e1b      	lsrs	r3, r3, #24
 8005580:	f003 030f 	and.w	r3, r3, #15
 8005584:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	691b      	ldr	r3, [r3, #16]
 800558a:	019a      	lsls	r2, r3, #6
 800558c:	693b      	ldr	r3, [r7, #16]
 800558e:	061b      	lsls	r3, r3, #24
 8005590:	431a      	orrs	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	699b      	ldr	r3, [r3, #24]
 8005596:	071b      	lsls	r3, r3, #28
 8005598:	4927      	ldr	r1, [pc, #156]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800559a:	4313      	orrs	r3, r2
 800559c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80055a0:	4b25      	ldr	r3, [pc, #148]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80055a6:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ae:	4922      	ldr	r1, [pc, #136]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055b0:	4313      	orrs	r3, r2
 80055b2:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80055b6:	4b21      	ldr	r3, [pc, #132]	@ (800563c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80055b8:	2201      	movs	r2, #1
 80055ba:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80055bc:	f7fc f9fa 	bl	80019b4 <HAL_GetTick>
 80055c0:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055c2:	e008      	b.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80055c4:	f7fc f9f6 	bl	80019b4 <HAL_GetTick>
 80055c8:	4602      	mov	r2, r0
 80055ca:	697b      	ldr	r3, [r7, #20]
 80055cc:	1ad3      	subs	r3, r2, r3
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d901      	bls.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055d2:	2303      	movs	r3, #3
 80055d4:	e0a4      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80055d6:	4b18      	ldr	r3, [pc, #96]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80055de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80055e2:	d1ef      	bne.n	80055c4 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0320 	and.w	r3, r3, #32
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f000 808b 	beq.w	8005708 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80055f2:	2300      	movs	r3, #0
 80055f4:	60fb      	str	r3, [r7, #12]
 80055f6:	4b10      	ldr	r3, [pc, #64]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055fa:	4a0f      	ldr	r2, [pc, #60]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005600:	6413      	str	r3, [r2, #64]	@ 0x40
 8005602:	4b0d      	ldr	r3, [pc, #52]	@ (8005638 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005606:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800560a:	60fb      	str	r3, [r7, #12]
 800560c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800560e:	4b0c      	ldr	r3, [pc, #48]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a0b      	ldr	r2, [pc, #44]	@ (8005640 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005614:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005618:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800561a:	f7fc f9cb 	bl	80019b4 <HAL_GetTick>
 800561e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005620:	e010      	b.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005622:	f7fc f9c7 	bl	80019b4 <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	2b02      	cmp	r3, #2
 800562e:	d909      	bls.n	8005644 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005630:	2303      	movs	r3, #3
 8005632:	e075      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005634:	42470068 	.word	0x42470068
 8005638:	40023800 	.word	0x40023800
 800563c:	42470070 	.word	0x42470070
 8005640:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005644:	4b38      	ldr	r3, [pc, #224]	@ (8005728 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800564c:	2b00      	cmp	r3, #0
 800564e:	d0e8      	beq.n	8005622 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005650:	4b36      	ldr	r3, [pc, #216]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005652:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005654:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005658:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d02f      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005664:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005668:	693a      	ldr	r2, [r7, #16]
 800566a:	429a      	cmp	r2, r3
 800566c:	d028      	beq.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800566e:	4b2f      	ldr	r3, [pc, #188]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005670:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005672:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005676:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005678:	4b2d      	ldr	r3, [pc, #180]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800567a:	2201      	movs	r2, #1
 800567c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800567e:	4b2c      	ldr	r3, [pc, #176]	@ (8005730 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005680:	2200      	movs	r2, #0
 8005682:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005684:	4a29      	ldr	r2, [pc, #164]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800568a:	4b28      	ldr	r3, [pc, #160]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800568c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800568e:	f003 0301 	and.w	r3, r3, #1
 8005692:	2b01      	cmp	r3, #1
 8005694:	d114      	bne.n	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005696:	f7fc f98d 	bl	80019b4 <HAL_GetTick>
 800569a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800569c:	e00a      	b.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800569e:	f7fc f989 	bl	80019b4 <HAL_GetTick>
 80056a2:	4602      	mov	r2, r0
 80056a4:	697b      	ldr	r3, [r7, #20]
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80056ac:	4293      	cmp	r3, r2
 80056ae:	d901      	bls.n	80056b4 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 80056b0:	2303      	movs	r3, #3
 80056b2:	e035      	b.n	8005720 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056b4:	4b1d      	ldr	r3, [pc, #116]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056b8:	f003 0302 	and.w	r3, r3, #2
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d0ee      	beq.n	800569e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80056cc:	d10d      	bne.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0x332>
 80056ce:	4b17      	ldr	r3, [pc, #92]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056d0:	689b      	ldr	r3, [r3, #8]
 80056d2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056da:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80056de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80056e2:	4912      	ldr	r1, [pc, #72]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056e4:	4313      	orrs	r3, r2
 80056e6:	608b      	str	r3, [r1, #8]
 80056e8:	e005      	b.n	80056f6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80056ea:	4b10      	ldr	r3, [pc, #64]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	4a0f      	ldr	r2, [pc, #60]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056f0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80056f4:	6093      	str	r3, [r2, #8]
 80056f6:	4b0d      	ldr	r3, [pc, #52]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056f8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005702:	490a      	ldr	r1, [pc, #40]	@ (800572c <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005704:	4313      	orrs	r3, r2
 8005706:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0310 	and.w	r3, r3, #16
 8005710:	2b00      	cmp	r3, #0
 8005712:	d004      	beq.n	800571e <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 800571a:	4b06      	ldr	r3, [pc, #24]	@ (8005734 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 800571c:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3718      	adds	r7, #24
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40007000 	.word	0x40007000
 800572c:	40023800 	.word	0x40023800
 8005730:	42470e40 	.word	0x42470e40
 8005734:	424711e0 	.word	0x424711e0

08005738 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b082      	sub	sp, #8
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d101      	bne.n	800574c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005748:	2301      	movs	r3, #1
 800574a:	e025      	b.n	8005798 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005752:	b2db      	uxtb	r3, r3
 8005754:	2b00      	cmp	r3, #0
 8005756:	d106      	bne.n	8005766 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f7fb ffd7 	bl	8001714 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2202      	movs	r2, #2
 800576a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	3304      	adds	r3, #4
 8005776:	4619      	mov	r1, r3
 8005778:	4610      	mov	r0, r2
 800577a:	f001 fd1d 	bl	80071b8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6818      	ldr	r0, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	461a      	mov	r2, r3
 8005788:	6839      	ldr	r1, [r7, #0]
 800578a:	f001 fd72 	bl	8007272 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2201      	movs	r2, #1
 8005792:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005796:	2300      	movs	r3, #0
}
 8005798:	4618      	mov	r0, r3
 800579a:	3708      	adds	r7, #8
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b082      	sub	sp, #8
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80057ae:	2301      	movs	r3, #1
 80057b0:	e07b      	b.n	80058aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d108      	bne.n	80057cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80057c2:	d009      	beq.n	80057d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2200      	movs	r2, #0
 80057c8:	61da      	str	r2, [r3, #28]
 80057ca:	e005      	b.n	80057d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2200      	movs	r2, #0
 80057d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d106      	bne.n	80057f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057f2:	6878      	ldr	r0, [r7, #4]
 80057f4:	f7fb fdec 	bl	80013d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800580e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005820:	431a      	orrs	r2, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800582a:	431a      	orrs	r2, r3
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	691b      	ldr	r3, [r3, #16]
 8005830:	f003 0302 	and.w	r3, r3, #2
 8005834:	431a      	orrs	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	f003 0301 	and.w	r3, r3, #1
 800583e:	431a      	orrs	r2, r3
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	699b      	ldr	r3, [r3, #24]
 8005844:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005848:	431a      	orrs	r2, r3
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	69db      	ldr	r3, [r3, #28]
 800584e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005852:	431a      	orrs	r2, r3
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	6a1b      	ldr	r3, [r3, #32]
 8005858:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800585c:	ea42 0103 	orr.w	r1, r2, r3
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005864:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	430a      	orrs	r2, r1
 800586e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	0c1b      	lsrs	r3, r3, #16
 8005876:	f003 0104 	and.w	r1, r3, #4
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587e:	f003 0210 	and.w	r2, r3, #16
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	430a      	orrs	r2, r1
 8005888:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69da      	ldr	r2, [r3, #28]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005898:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	2200      	movs	r2, #0
 800589e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2201      	movs	r2, #1
 80058a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80058a8:	2300      	movs	r3, #0
}
 80058aa:	4618      	mov	r0, r3
 80058ac:	3708      	adds	r7, #8
 80058ae:	46bd      	mov	sp, r7
 80058b0:	bd80      	pop	{r7, pc}

080058b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058b2:	b580      	push	{r7, lr}
 80058b4:	b088      	sub	sp, #32
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	60f8      	str	r0, [r7, #12]
 80058ba:	60b9      	str	r1, [r7, #8]
 80058bc:	603b      	str	r3, [r7, #0]
 80058be:	4613      	mov	r3, r2
 80058c0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80058c2:	f7fc f877 	bl	80019b4 <HAL_GetTick>
 80058c6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80058c8:	88fb      	ldrh	r3, [r7, #6]
 80058ca:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d001      	beq.n	80058dc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80058d8:	2302      	movs	r3, #2
 80058da:	e12a      	b.n	8005b32 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d002      	beq.n	80058e8 <HAL_SPI_Transmit+0x36>
 80058e2:	88fb      	ldrh	r3, [r7, #6]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d101      	bne.n	80058ec <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80058e8:	2301      	movs	r3, #1
 80058ea:	e122      	b.n	8005b32 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80058f2:	2b01      	cmp	r3, #1
 80058f4:	d101      	bne.n	80058fa <HAL_SPI_Transmit+0x48>
 80058f6:	2302      	movs	r3, #2
 80058f8:	e11b      	b.n	8005b32 <HAL_SPI_Transmit+0x280>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2201      	movs	r2, #1
 80058fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2203      	movs	r2, #3
 8005906:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2200      	movs	r2, #0
 800590e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	88fa      	ldrh	r2, [r7, #6]
 800591a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	88fa      	ldrh	r2, [r7, #6]
 8005920:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	2200      	movs	r2, #0
 8005926:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	2200      	movs	r2, #0
 800592c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2200      	movs	r2, #0
 8005932:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	2200      	movs	r2, #0
 8005938:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	689b      	ldr	r3, [r3, #8]
 8005944:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005948:	d10f      	bne.n	800596a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005958:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005968:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005974:	2b40      	cmp	r3, #64	@ 0x40
 8005976:	d007      	beq.n	8005988 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	681a      	ldr	r2, [r3, #0]
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005986:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	68db      	ldr	r3, [r3, #12]
 800598c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005990:	d152      	bne.n	8005a38 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d002      	beq.n	80059a0 <HAL_SPI_Transmit+0xee>
 800599a:	8b7b      	ldrh	r3, [r7, #26]
 800599c:	2b01      	cmp	r3, #1
 800599e:	d145      	bne.n	8005a2c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059a4:	881a      	ldrh	r2, [r3, #0]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059b0:	1c9a      	adds	r2, r3, #2
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	3b01      	subs	r3, #1
 80059be:	b29a      	uxth	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80059c4:	e032      	b.n	8005a2c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	f003 0302 	and.w	r3, r3, #2
 80059d0:	2b02      	cmp	r3, #2
 80059d2:	d112      	bne.n	80059fa <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059d8:	881a      	ldrh	r2, [r3, #0]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059e4:	1c9a      	adds	r2, r3, #2
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	3b01      	subs	r3, #1
 80059f2:	b29a      	uxth	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80059f8:	e018      	b.n	8005a2c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059fa:	f7fb ffdb 	bl	80019b4 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	69fb      	ldr	r3, [r7, #28]
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	683a      	ldr	r2, [r7, #0]
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d803      	bhi.n	8005a12 <HAL_SPI_Transmit+0x160>
 8005a0a:	683b      	ldr	r3, [r7, #0]
 8005a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a10:	d102      	bne.n	8005a18 <HAL_SPI_Transmit+0x166>
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d109      	bne.n	8005a2c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	2201      	movs	r2, #1
 8005a1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005a28:	2303      	movs	r3, #3
 8005a2a:	e082      	b.n	8005b32 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a30:	b29b      	uxth	r3, r3
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d1c7      	bne.n	80059c6 <HAL_SPI_Transmit+0x114>
 8005a36:	e053      	b.n	8005ae0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d002      	beq.n	8005a46 <HAL_SPI_Transmit+0x194>
 8005a40:	8b7b      	ldrh	r3, [r7, #26]
 8005a42:	2b01      	cmp	r3, #1
 8005a44:	d147      	bne.n	8005ad6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	330c      	adds	r3, #12
 8005a50:	7812      	ldrb	r2, [r2, #0]
 8005a52:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a58:	1c5a      	adds	r2, r3, #1
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a62:	b29b      	uxth	r3, r3
 8005a64:	3b01      	subs	r3, #1
 8005a66:	b29a      	uxth	r2, r3
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005a6c:	e033      	b.n	8005ad6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b02      	cmp	r3, #2
 8005a7a:	d113      	bne.n	8005aa4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	330c      	adds	r3, #12
 8005a86:	7812      	ldrb	r2, [r2, #0]
 8005a88:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a8e:	1c5a      	adds	r2, r3, #1
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a98:	b29b      	uxth	r3, r3
 8005a9a:	3b01      	subs	r3, #1
 8005a9c:	b29a      	uxth	r2, r3
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005aa2:	e018      	b.n	8005ad6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005aa4:	f7fb ff86 	bl	80019b4 <HAL_GetTick>
 8005aa8:	4602      	mov	r2, r0
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	1ad3      	subs	r3, r2, r3
 8005aae:	683a      	ldr	r2, [r7, #0]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d803      	bhi.n	8005abc <HAL_SPI_Transmit+0x20a>
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aba:	d102      	bne.n	8005ac2 <HAL_SPI_Transmit+0x210>
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d109      	bne.n	8005ad6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	2201      	movs	r2, #1
 8005ac6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005ad2:	2303      	movs	r3, #3
 8005ad4:	e02d      	b.n	8005b32 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d1c6      	bne.n	8005a6e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ae0:	69fa      	ldr	r2, [r7, #28]
 8005ae2:	6839      	ldr	r1, [r7, #0]
 8005ae4:	68f8      	ldr	r0, [r7, #12]
 8005ae6:	f000 fbd9 	bl	800629c <SPI_EndRxTxTransaction>
 8005aea:	4603      	mov	r3, r0
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d002      	beq.n	8005af6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2220      	movs	r2, #32
 8005af4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d10a      	bne.n	8005b14 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005afe:	2300      	movs	r3, #0
 8005b00:	617b      	str	r3, [r7, #20]
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	617b      	str	r3, [r7, #20]
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	689b      	ldr	r3, [r3, #8]
 8005b10:	617b      	str	r3, [r7, #20]
 8005b12:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d001      	beq.n	8005b30 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	e000      	b.n	8005b32 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005b30:	2300      	movs	r3, #0
  }
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3720      	adds	r7, #32
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b088      	sub	sp, #32
 8005b3e:	af02      	add	r7, sp, #8
 8005b40:	60f8      	str	r0, [r7, #12]
 8005b42:	60b9      	str	r1, [r7, #8]
 8005b44:	603b      	str	r3, [r7, #0]
 8005b46:	4613      	mov	r3, r2
 8005b48:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d001      	beq.n	8005b5a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005b56:	2302      	movs	r3, #2
 8005b58:	e104      	b.n	8005d64 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b62:	d112      	bne.n	8005b8a <HAL_SPI_Receive+0x50>
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d10e      	bne.n	8005b8a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2204      	movs	r2, #4
 8005b70:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005b74:	88fa      	ldrh	r2, [r7, #6]
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	9300      	str	r3, [sp, #0]
 8005b7a:	4613      	mov	r3, r2
 8005b7c:	68ba      	ldr	r2, [r7, #8]
 8005b7e:	68b9      	ldr	r1, [r7, #8]
 8005b80:	68f8      	ldr	r0, [r7, #12]
 8005b82:	f000 f8f3 	bl	8005d6c <HAL_SPI_TransmitReceive>
 8005b86:	4603      	mov	r3, r0
 8005b88:	e0ec      	b.n	8005d64 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b8a:	f7fb ff13 	bl	80019b4 <HAL_GetTick>
 8005b8e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d002      	beq.n	8005b9c <HAL_SPI_Receive+0x62>
 8005b96:	88fb      	ldrh	r3, [r7, #6]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d101      	bne.n	8005ba0 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	e0e1      	b.n	8005d64 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005ba6:	2b01      	cmp	r3, #1
 8005ba8:	d101      	bne.n	8005bae <HAL_SPI_Receive+0x74>
 8005baa:	2302      	movs	r3, #2
 8005bac:	e0da      	b.n	8005d64 <HAL_SPI_Receive+0x22a>
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2201      	movs	r2, #1
 8005bb2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2204      	movs	r2, #4
 8005bba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	68ba      	ldr	r2, [r7, #8]
 8005bc8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	88fa      	ldrh	r2, [r7, #6]
 8005bce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	88fa      	ldrh	r2, [r7, #6]
 8005bd4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2200      	movs	r2, #0
 8005be0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	2200      	movs	r2, #0
 8005be6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	2200      	movs	r2, #0
 8005bec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bfc:	d10f      	bne.n	8005c1e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	681a      	ldr	r2, [r3, #0]
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c0c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681a      	ldr	r2, [r3, #0]
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005c1c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c28:	2b40      	cmp	r3, #64	@ 0x40
 8005c2a:	d007      	beq.n	8005c3c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005c3a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	68db      	ldr	r3, [r3, #12]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d170      	bne.n	8005d26 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005c44:	e035      	b.n	8005cb2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f003 0301 	and.w	r3, r3, #1
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d115      	bne.n	8005c80 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f103 020c 	add.w	r2, r3, #12
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c60:	7812      	ldrb	r2, [r2, #0]
 8005c62:	b2d2      	uxtb	r2, r2
 8005c64:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c6a:	1c5a      	adds	r2, r3, #1
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c74:	b29b      	uxth	r3, r3
 8005c76:	3b01      	subs	r3, #1
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005c7e:	e018      	b.n	8005cb2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c80:	f7fb fe98 	bl	80019b4 <HAL_GetTick>
 8005c84:	4602      	mov	r2, r0
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	1ad3      	subs	r3, r2, r3
 8005c8a:	683a      	ldr	r2, [r7, #0]
 8005c8c:	429a      	cmp	r2, r3
 8005c8e:	d803      	bhi.n	8005c98 <HAL_SPI_Receive+0x15e>
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c96:	d102      	bne.n	8005c9e <HAL_SPI_Receive+0x164>
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d109      	bne.n	8005cb2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005cae:	2303      	movs	r3, #3
 8005cb0:	e058      	b.n	8005d64 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d1c4      	bne.n	8005c46 <HAL_SPI_Receive+0x10c>
 8005cbc:	e038      	b.n	8005d30 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	f003 0301 	and.w	r3, r3, #1
 8005cc8:	2b01      	cmp	r3, #1
 8005cca:	d113      	bne.n	8005cf4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	68da      	ldr	r2, [r3, #12]
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cd6:	b292      	uxth	r2, r2
 8005cd8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005cde:	1c9a      	adds	r2, r3, #2
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ce8:	b29b      	uxth	r3, r3
 8005cea:	3b01      	subs	r3, #1
 8005cec:	b29a      	uxth	r2, r3
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005cf2:	e018      	b.n	8005d26 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cf4:	f7fb fe5e 	bl	80019b4 <HAL_GetTick>
 8005cf8:	4602      	mov	r2, r0
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	1ad3      	subs	r3, r2, r3
 8005cfe:	683a      	ldr	r2, [r7, #0]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d803      	bhi.n	8005d0c <HAL_SPI_Receive+0x1d2>
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d0a:	d102      	bne.n	8005d12 <HAL_SPI_Receive+0x1d8>
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d109      	bne.n	8005d26 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e01e      	b.n	8005d64 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005d2a:	b29b      	uxth	r3, r3
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d1c6      	bne.n	8005cbe <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d30:	697a      	ldr	r2, [r7, #20]
 8005d32:	6839      	ldr	r1, [r7, #0]
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f000 fa4b 	bl	80061d0 <SPI_EndRxTransaction>
 8005d3a:	4603      	mov	r3, r0
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d002      	beq.n	8005d46 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2220      	movs	r2, #32
 8005d44:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	2200      	movs	r2, #0
 8005d52:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d001      	beq.n	8005d62 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	e000      	b.n	8005d64 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005d62:	2300      	movs	r3, #0
  }
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3718      	adds	r7, #24
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b08a      	sub	sp, #40	@ 0x28
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	60f8      	str	r0, [r7, #12]
 8005d74:	60b9      	str	r1, [r7, #8]
 8005d76:	607a      	str	r2, [r7, #4]
 8005d78:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d7e:	f7fb fe19 	bl	80019b4 <HAL_GetTick>
 8005d82:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d8a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	685b      	ldr	r3, [r3, #4]
 8005d90:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005d92:	887b      	ldrh	r3, [r7, #2]
 8005d94:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d96:	7ffb      	ldrb	r3, [r7, #31]
 8005d98:	2b01      	cmp	r3, #1
 8005d9a:	d00c      	beq.n	8005db6 <HAL_SPI_TransmitReceive+0x4a>
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005da2:	d106      	bne.n	8005db2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d102      	bne.n	8005db2 <HAL_SPI_TransmitReceive+0x46>
 8005dac:	7ffb      	ldrb	r3, [r7, #31]
 8005dae:	2b04      	cmp	r3, #4
 8005db0:	d001      	beq.n	8005db6 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005db2:	2302      	movs	r3, #2
 8005db4:	e17f      	b.n	80060b6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d005      	beq.n	8005dc8 <HAL_SPI_TransmitReceive+0x5c>
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d002      	beq.n	8005dc8 <HAL_SPI_TransmitReceive+0x5c>
 8005dc2:	887b      	ldrh	r3, [r7, #2]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d101      	bne.n	8005dcc <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005dc8:	2301      	movs	r3, #1
 8005dca:	e174      	b.n	80060b6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d101      	bne.n	8005dda <HAL_SPI_TransmitReceive+0x6e>
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	e16d      	b.n	80060b6 <HAL_SPI_TransmitReceive+0x34a>
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	2b04      	cmp	r3, #4
 8005dec:	d003      	beq.n	8005df6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2205      	movs	r2, #5
 8005df2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	687a      	ldr	r2, [r7, #4]
 8005e00:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	887a      	ldrh	r2, [r7, #2]
 8005e06:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	887a      	ldrh	r2, [r7, #2]
 8005e0c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	68ba      	ldr	r2, [r7, #8]
 8005e12:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	887a      	ldrh	r2, [r7, #2]
 8005e18:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	887a      	ldrh	r2, [r7, #2]
 8005e1e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	2200      	movs	r2, #0
 8005e24:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	2200      	movs	r2, #0
 8005e2a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e36:	2b40      	cmp	r3, #64	@ 0x40
 8005e38:	d007      	beq.n	8005e4a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e52:	d17e      	bne.n	8005f52 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d002      	beq.n	8005e62 <HAL_SPI_TransmitReceive+0xf6>
 8005e5c:	8afb      	ldrh	r3, [r7, #22]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d16c      	bne.n	8005f3c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e66:	881a      	ldrh	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e72:	1c9a      	adds	r2, r3, #2
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	3b01      	subs	r3, #1
 8005e80:	b29a      	uxth	r2, r3
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e86:	e059      	b.n	8005f3c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b02      	cmp	r3, #2
 8005e94:	d11b      	bne.n	8005ece <HAL_SPI_TransmitReceive+0x162>
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d016      	beq.n	8005ece <HAL_SPI_TransmitReceive+0x162>
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d113      	bne.n	8005ece <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eaa:	881a      	ldrh	r2, [r3, #0]
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eb6:	1c9a      	adds	r2, r3, #2
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ec0:	b29b      	uxth	r3, r3
 8005ec2:	3b01      	subs	r3, #1
 8005ec4:	b29a      	uxth	r2, r3
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005eca:	2300      	movs	r3, #0
 8005ecc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	f003 0301 	and.w	r3, r3, #1
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d119      	bne.n	8005f10 <HAL_SPI_TransmitReceive+0x1a4>
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ee0:	b29b      	uxth	r3, r3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d014      	beq.n	8005f10 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	68da      	ldr	r2, [r3, #12]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef0:	b292      	uxth	r2, r2
 8005ef2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ef8:	1c9a      	adds	r2, r3, #2
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	3b01      	subs	r3, #1
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005f0c:	2301      	movs	r3, #1
 8005f0e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005f10:	f7fb fd50 	bl	80019b4 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	6a3b      	ldr	r3, [r7, #32]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f1c:	429a      	cmp	r2, r3
 8005f1e:	d80d      	bhi.n	8005f3c <HAL_SPI_TransmitReceive+0x1d0>
 8005f20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f26:	d009      	beq.n	8005f3c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2200      	movs	r2, #0
 8005f34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e0bc      	b.n	80060b6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d1a0      	bne.n	8005e88 <HAL_SPI_TransmitReceive+0x11c>
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f4a:	b29b      	uxth	r3, r3
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d19b      	bne.n	8005e88 <HAL_SPI_TransmitReceive+0x11c>
 8005f50:	e082      	b.n	8006058 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d002      	beq.n	8005f60 <HAL_SPI_TransmitReceive+0x1f4>
 8005f5a:	8afb      	ldrh	r3, [r7, #22]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d171      	bne.n	8006044 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	330c      	adds	r3, #12
 8005f6a:	7812      	ldrb	r2, [r2, #0]
 8005f6c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f72:	1c5a      	adds	r2, r3, #1
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f7c:	b29b      	uxth	r3, r3
 8005f7e:	3b01      	subs	r3, #1
 8005f80:	b29a      	uxth	r2, r3
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f86:	e05d      	b.n	8006044 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f003 0302 	and.w	r3, r3, #2
 8005f92:	2b02      	cmp	r3, #2
 8005f94:	d11c      	bne.n	8005fd0 <HAL_SPI_TransmitReceive+0x264>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d017      	beq.n	8005fd0 <HAL_SPI_TransmitReceive+0x264>
 8005fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fa2:	2b01      	cmp	r3, #1
 8005fa4:	d114      	bne.n	8005fd0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	330c      	adds	r3, #12
 8005fb0:	7812      	ldrb	r2, [r2, #0]
 8005fb2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fb8:	1c5a      	adds	r2, r3, #1
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fc2:	b29b      	uxth	r3, r3
 8005fc4:	3b01      	subs	r3, #1
 8005fc6:	b29a      	uxth	r2, r3
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005fcc:	2300      	movs	r3, #0
 8005fce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	689b      	ldr	r3, [r3, #8]
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	2b01      	cmp	r3, #1
 8005fdc:	d119      	bne.n	8006012 <HAL_SPI_TransmitReceive+0x2a6>
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d014      	beq.n	8006012 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68da      	ldr	r2, [r3, #12]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff2:	b2d2      	uxtb	r2, r2
 8005ff4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ffa:	1c5a      	adds	r2, r3, #1
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006004:	b29b      	uxth	r3, r3
 8006006:	3b01      	subs	r3, #1
 8006008:	b29a      	uxth	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800600e:	2301      	movs	r3, #1
 8006010:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006012:	f7fb fccf 	bl	80019b4 <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	6a3b      	ldr	r3, [r7, #32]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800601e:	429a      	cmp	r2, r3
 8006020:	d803      	bhi.n	800602a <HAL_SPI_TransmitReceive+0x2be>
 8006022:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006024:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006028:	d102      	bne.n	8006030 <HAL_SPI_TransmitReceive+0x2c4>
 800602a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800602c:	2b00      	cmp	r3, #0
 800602e:	d109      	bne.n	8006044 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2200      	movs	r2, #0
 800603c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006040:	2303      	movs	r3, #3
 8006042:	e038      	b.n	80060b6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006048:	b29b      	uxth	r3, r3
 800604a:	2b00      	cmp	r3, #0
 800604c:	d19c      	bne.n	8005f88 <HAL_SPI_TransmitReceive+0x21c>
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006052:	b29b      	uxth	r3, r3
 8006054:	2b00      	cmp	r3, #0
 8006056:	d197      	bne.n	8005f88 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006058:	6a3a      	ldr	r2, [r7, #32]
 800605a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800605c:	68f8      	ldr	r0, [r7, #12]
 800605e:	f000 f91d 	bl	800629c <SPI_EndRxTxTransaction>
 8006062:	4603      	mov	r3, r0
 8006064:	2b00      	cmp	r3, #0
 8006066:	d008      	beq.n	800607a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2220      	movs	r2, #32
 800606c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e01d      	b.n	80060b6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10a      	bne.n	8006098 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006082:	2300      	movs	r3, #0
 8006084:	613b      	str	r3, [r7, #16]
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68db      	ldr	r3, [r3, #12]
 800608c:	613b      	str	r3, [r7, #16]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	689b      	ldr	r3, [r3, #8]
 8006094:	613b      	str	r3, [r7, #16]
 8006096:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2201      	movs	r2, #1
 800609c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	2200      	movs	r2, #0
 80060a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d001      	beq.n	80060b4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80060b0:	2301      	movs	r3, #1
 80060b2:	e000      	b.n	80060b6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80060b4:	2300      	movs	r3, #0
  }
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3728      	adds	r7, #40	@ 0x28
 80060ba:	46bd      	mov	sp, r7
 80060bc:	bd80      	pop	{r7, pc}
	...

080060c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80060c0:	b580      	push	{r7, lr}
 80060c2:	b088      	sub	sp, #32
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	603b      	str	r3, [r7, #0]
 80060cc:	4613      	mov	r3, r2
 80060ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80060d0:	f7fb fc70 	bl	80019b4 <HAL_GetTick>
 80060d4:	4602      	mov	r2, r0
 80060d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060d8:	1a9b      	subs	r3, r3, r2
 80060da:	683a      	ldr	r2, [r7, #0]
 80060dc:	4413      	add	r3, r2
 80060de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80060e0:	f7fb fc68 	bl	80019b4 <HAL_GetTick>
 80060e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80060e6:	4b39      	ldr	r3, [pc, #228]	@ (80061cc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	015b      	lsls	r3, r3, #5
 80060ec:	0d1b      	lsrs	r3, r3, #20
 80060ee:	69fa      	ldr	r2, [r7, #28]
 80060f0:	fb02 f303 	mul.w	r3, r2, r3
 80060f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060f6:	e054      	b.n	80061a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060fe:	d050      	beq.n	80061a2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006100:	f7fb fc58 	bl	80019b4 <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	69bb      	ldr	r3, [r7, #24]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	69fa      	ldr	r2, [r7, #28]
 800610c:	429a      	cmp	r2, r3
 800610e:	d902      	bls.n	8006116 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d13d      	bne.n	8006192 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006124:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800612e:	d111      	bne.n	8006154 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	689b      	ldr	r3, [r3, #8]
 8006134:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006138:	d004      	beq.n	8006144 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	689b      	ldr	r3, [r3, #8]
 800613e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006142:	d107      	bne.n	8006154 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006152:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006158:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800615c:	d10f      	bne.n	800617e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	681a      	ldr	r2, [r3, #0]
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800616c:	601a      	str	r2, [r3, #0]
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800617c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2200      	movs	r2, #0
 800618a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800618e:	2303      	movs	r3, #3
 8006190:	e017      	b.n	80061c2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006198:	2300      	movs	r3, #0
 800619a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	3b01      	subs	r3, #1
 80061a0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	689a      	ldr	r2, [r3, #8]
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	4013      	ands	r3, r2
 80061ac:	68ba      	ldr	r2, [r7, #8]
 80061ae:	429a      	cmp	r2, r3
 80061b0:	bf0c      	ite	eq
 80061b2:	2301      	moveq	r3, #1
 80061b4:	2300      	movne	r3, #0
 80061b6:	b2db      	uxtb	r3, r3
 80061b8:	461a      	mov	r2, r3
 80061ba:	79fb      	ldrb	r3, [r7, #7]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d19b      	bne.n	80060f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80061c0:	2300      	movs	r3, #0
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3720      	adds	r7, #32
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	20000004 	.word	0x20000004

080061d0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af02      	add	r7, sp, #8
 80061d6:	60f8      	str	r0, [r7, #12]
 80061d8:	60b9      	str	r1, [r7, #8]
 80061da:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	685b      	ldr	r3, [r3, #4]
 80061e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061e4:	d111      	bne.n	800620a <SPI_EndRxTransaction+0x3a>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	689b      	ldr	r3, [r3, #8]
 80061ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061ee:	d004      	beq.n	80061fa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061f8:	d107      	bne.n	800620a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	681a      	ldr	r2, [r3, #0]
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006208:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006212:	d12a      	bne.n	800626a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	689b      	ldr	r3, [r3, #8]
 8006218:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800621c:	d012      	beq.n	8006244 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	9300      	str	r3, [sp, #0]
 8006222:	68bb      	ldr	r3, [r7, #8]
 8006224:	2200      	movs	r2, #0
 8006226:	2180      	movs	r1, #128	@ 0x80
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	f7ff ff49 	bl	80060c0 <SPI_WaitFlagStateUntilTimeout>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d02d      	beq.n	8006290 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006238:	f043 0220 	orr.w	r2, r3, #32
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	e026      	b.n	8006292 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	9300      	str	r3, [sp, #0]
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	2200      	movs	r2, #0
 800624c:	2101      	movs	r1, #1
 800624e:	68f8      	ldr	r0, [r7, #12]
 8006250:	f7ff ff36 	bl	80060c0 <SPI_WaitFlagStateUntilTimeout>
 8006254:	4603      	mov	r3, r0
 8006256:	2b00      	cmp	r3, #0
 8006258:	d01a      	beq.n	8006290 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800625e:	f043 0220 	orr.w	r2, r3, #32
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8006266:	2303      	movs	r3, #3
 8006268:	e013      	b.n	8006292 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	9300      	str	r3, [sp, #0]
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	2200      	movs	r2, #0
 8006272:	2101      	movs	r1, #1
 8006274:	68f8      	ldr	r0, [r7, #12]
 8006276:	f7ff ff23 	bl	80060c0 <SPI_WaitFlagStateUntilTimeout>
 800627a:	4603      	mov	r3, r0
 800627c:	2b00      	cmp	r3, #0
 800627e:	d007      	beq.n	8006290 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006284:	f043 0220 	orr.w	r2, r3, #32
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e000      	b.n	8006292 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3710      	adds	r7, #16
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
	...

0800629c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b088      	sub	sp, #32
 80062a0:	af02      	add	r7, sp, #8
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	9300      	str	r3, [sp, #0]
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	2201      	movs	r2, #1
 80062b0:	2102      	movs	r1, #2
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f7ff ff04 	bl	80060c0 <SPI_WaitFlagStateUntilTimeout>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d007      	beq.n	80062ce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062c2:	f043 0220 	orr.w	r2, r3, #32
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80062ca:	2303      	movs	r3, #3
 80062cc:	e032      	b.n	8006334 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80062ce:	4b1b      	ldr	r3, [pc, #108]	@ (800633c <SPI_EndRxTxTransaction+0xa0>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a1b      	ldr	r2, [pc, #108]	@ (8006340 <SPI_EndRxTxTransaction+0xa4>)
 80062d4:	fba2 2303 	umull	r2, r3, r2, r3
 80062d8:	0d5b      	lsrs	r3, r3, #21
 80062da:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80062de:	fb02 f303 	mul.w	r3, r2, r3
 80062e2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062ec:	d112      	bne.n	8006314 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	9300      	str	r3, [sp, #0]
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	2200      	movs	r2, #0
 80062f6:	2180      	movs	r1, #128	@ 0x80
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f7ff fee1 	bl	80060c0 <SPI_WaitFlagStateUntilTimeout>
 80062fe:	4603      	mov	r3, r0
 8006300:	2b00      	cmp	r3, #0
 8006302:	d016      	beq.n	8006332 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006308:	f043 0220 	orr.w	r2, r3, #32
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006310:	2303      	movs	r3, #3
 8006312:	e00f      	b.n	8006334 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d00a      	beq.n	8006330 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	3b01      	subs	r3, #1
 800631e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	689b      	ldr	r3, [r3, #8]
 8006326:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800632a:	2b80      	cmp	r3, #128	@ 0x80
 800632c:	d0f2      	beq.n	8006314 <SPI_EndRxTxTransaction+0x78>
 800632e:	e000      	b.n	8006332 <SPI_EndRxTxTransaction+0x96>
        break;
 8006330:	bf00      	nop
  }

  return HAL_OK;
 8006332:	2300      	movs	r3, #0
}
 8006334:	4618      	mov	r0, r3
 8006336:	3718      	adds	r7, #24
 8006338:	46bd      	mov	sp, r7
 800633a:	bd80      	pop	{r7, pc}
 800633c:	20000004 	.word	0x20000004
 8006340:	165e9f81 	.word	0x165e9f81

08006344 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006344:	b580      	push	{r7, lr}
 8006346:	b082      	sub	sp, #8
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d101      	bne.n	8006356 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006352:	2301      	movs	r3, #1
 8006354:	e041      	b.n	80063da <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800635c:	b2db      	uxtb	r3, r3
 800635e:	2b00      	cmp	r3, #0
 8006360:	d106      	bne.n	8006370 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f7fb f878 	bl	8001460 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2202      	movs	r2, #2
 8006374:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	3304      	adds	r3, #4
 8006380:	4619      	mov	r1, r3
 8006382:	4610      	mov	r0, r2
 8006384:	f000 fa7e 	bl	8006884 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	2201      	movs	r2, #1
 80063cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80063d8:	2300      	movs	r3, #0
}
 80063da:	4618      	mov	r0, r3
 80063dc:	3708      	adds	r7, #8
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}
	...

080063e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80063e4:	b480      	push	{r7}
 80063e6:	b085      	sub	sp, #20
 80063e8:	af00      	add	r7, sp, #0
 80063ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063f2:	b2db      	uxtb	r3, r3
 80063f4:	2b01      	cmp	r3, #1
 80063f6:	d001      	beq.n	80063fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	e04e      	b.n	800649a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2202      	movs	r2, #2
 8006400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	68da      	ldr	r2, [r3, #12]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f042 0201 	orr.w	r2, r2, #1
 8006412:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	4a23      	ldr	r2, [pc, #140]	@ (80064a8 <HAL_TIM_Base_Start_IT+0xc4>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d022      	beq.n	8006464 <HAL_TIM_Base_Start_IT+0x80>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006426:	d01d      	beq.n	8006464 <HAL_TIM_Base_Start_IT+0x80>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	4a1f      	ldr	r2, [pc, #124]	@ (80064ac <HAL_TIM_Base_Start_IT+0xc8>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d018      	beq.n	8006464 <HAL_TIM_Base_Start_IT+0x80>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	4a1e      	ldr	r2, [pc, #120]	@ (80064b0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006438:	4293      	cmp	r3, r2
 800643a:	d013      	beq.n	8006464 <HAL_TIM_Base_Start_IT+0x80>
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	4a1c      	ldr	r2, [pc, #112]	@ (80064b4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006442:	4293      	cmp	r3, r2
 8006444:	d00e      	beq.n	8006464 <HAL_TIM_Base_Start_IT+0x80>
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	4a1b      	ldr	r2, [pc, #108]	@ (80064b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800644c:	4293      	cmp	r3, r2
 800644e:	d009      	beq.n	8006464 <HAL_TIM_Base_Start_IT+0x80>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	4a19      	ldr	r2, [pc, #100]	@ (80064bc <HAL_TIM_Base_Start_IT+0xd8>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d004      	beq.n	8006464 <HAL_TIM_Base_Start_IT+0x80>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4a18      	ldr	r2, [pc, #96]	@ (80064c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d111      	bne.n	8006488 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	689b      	ldr	r3, [r3, #8]
 800646a:	f003 0307 	and.w	r3, r3, #7
 800646e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	2b06      	cmp	r3, #6
 8006474:	d010      	beq.n	8006498 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	681a      	ldr	r2, [r3, #0]
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	f042 0201 	orr.w	r2, r2, #1
 8006484:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006486:	e007      	b.n	8006498 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	681a      	ldr	r2, [r3, #0]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f042 0201 	orr.w	r2, r2, #1
 8006496:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006498:	2300      	movs	r3, #0
}
 800649a:	4618      	mov	r0, r3
 800649c:	3714      	adds	r7, #20
 800649e:	46bd      	mov	sp, r7
 80064a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop
 80064a8:	40010000 	.word	0x40010000
 80064ac:	40000400 	.word	0x40000400
 80064b0:	40000800 	.word	0x40000800
 80064b4:	40000c00 	.word	0x40000c00
 80064b8:	40010400 	.word	0x40010400
 80064bc:	40014000 	.word	0x40014000
 80064c0:	40001800 	.word	0x40001800

080064c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b084      	sub	sp, #16
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	68db      	ldr	r3, [r3, #12]
 80064d2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	f003 0302 	and.w	r3, r3, #2
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d020      	beq.n	8006528 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	f003 0302 	and.w	r3, r3, #2
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d01b      	beq.n	8006528 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	f06f 0202 	mvn.w	r2, #2
 80064f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	2201      	movs	r2, #1
 80064fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	699b      	ldr	r3, [r3, #24]
 8006506:	f003 0303 	and.w	r3, r3, #3
 800650a:	2b00      	cmp	r3, #0
 800650c:	d003      	beq.n	8006516 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 f999 	bl	8006846 <HAL_TIM_IC_CaptureCallback>
 8006514:	e005      	b.n	8006522 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 f98b 	bl	8006832 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800651c:	6878      	ldr	r0, [r7, #4]
 800651e:	f000 f99c 	bl	800685a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	2200      	movs	r2, #0
 8006526:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006528:	68bb      	ldr	r3, [r7, #8]
 800652a:	f003 0304 	and.w	r3, r3, #4
 800652e:	2b00      	cmp	r3, #0
 8006530:	d020      	beq.n	8006574 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	f003 0304 	and.w	r3, r3, #4
 8006538:	2b00      	cmp	r3, #0
 800653a:	d01b      	beq.n	8006574 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f06f 0204 	mvn.w	r2, #4
 8006544:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2202      	movs	r2, #2
 800654a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	699b      	ldr	r3, [r3, #24]
 8006552:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800655a:	6878      	ldr	r0, [r7, #4]
 800655c:	f000 f973 	bl	8006846 <HAL_TIM_IC_CaptureCallback>
 8006560:	e005      	b.n	800656e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006562:	6878      	ldr	r0, [r7, #4]
 8006564:	f000 f965 	bl	8006832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 f976 	bl	800685a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006574:	68bb      	ldr	r3, [r7, #8]
 8006576:	f003 0308 	and.w	r3, r3, #8
 800657a:	2b00      	cmp	r3, #0
 800657c:	d020      	beq.n	80065c0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	f003 0308 	and.w	r3, r3, #8
 8006584:	2b00      	cmp	r3, #0
 8006586:	d01b      	beq.n	80065c0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	f06f 0208 	mvn.w	r2, #8
 8006590:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	2204      	movs	r2, #4
 8006596:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	69db      	ldr	r3, [r3, #28]
 800659e:	f003 0303 	and.w	r3, r3, #3
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d003      	beq.n	80065ae <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065a6:	6878      	ldr	r0, [r7, #4]
 80065a8:	f000 f94d 	bl	8006846 <HAL_TIM_IC_CaptureCallback>
 80065ac:	e005      	b.n	80065ba <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f93f 	bl	8006832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 f950 	bl	800685a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2200      	movs	r2, #0
 80065be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80065c0:	68bb      	ldr	r3, [r7, #8]
 80065c2:	f003 0310 	and.w	r3, r3, #16
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d020      	beq.n	800660c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	f003 0310 	and.w	r3, r3, #16
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d01b      	beq.n	800660c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	f06f 0210 	mvn.w	r2, #16
 80065dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2208      	movs	r2, #8
 80065e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	69db      	ldr	r3, [r3, #28]
 80065ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d003      	beq.n	80065fa <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f927 	bl	8006846 <HAL_TIM_IC_CaptureCallback>
 80065f8:	e005      	b.n	8006606 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 f919 	bl	8006832 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006600:	6878      	ldr	r0, [r7, #4]
 8006602:	f000 f92a 	bl	800685a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	2200      	movs	r2, #0
 800660a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	f003 0301 	and.w	r3, r3, #1
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00c      	beq.n	8006630 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f003 0301 	and.w	r3, r3, #1
 800661c:	2b00      	cmp	r3, #0
 800661e:	d007      	beq.n	8006630 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f06f 0201 	mvn.w	r2, #1
 8006628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f7fa fcac 	bl	8000f88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00c      	beq.n	8006654 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006640:	2b00      	cmp	r3, #0
 8006642:	d007      	beq.n	8006654 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 800664c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 fae4 	bl	8006c1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800665a:	2b00      	cmp	r3, #0
 800665c:	d00c      	beq.n	8006678 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006664:	2b00      	cmp	r3, #0
 8006666:	d007      	beq.n	8006678 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006670:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f000 f8fb 	bl	800686e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006678:	68bb      	ldr	r3, [r7, #8]
 800667a:	f003 0320 	and.w	r3, r3, #32
 800667e:	2b00      	cmp	r3, #0
 8006680:	d00c      	beq.n	800669c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	f003 0320 	and.w	r3, r3, #32
 8006688:	2b00      	cmp	r3, #0
 800668a:	d007      	beq.n	800669c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	f06f 0220 	mvn.w	r2, #32
 8006694:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fab6 	bl	8006c08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800669c:	bf00      	nop
 800669e:	3710      	adds	r7, #16
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
 80066ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066ae:	2300      	movs	r3, #0
 80066b0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d101      	bne.n	80066c0 <HAL_TIM_ConfigClockSource+0x1c>
 80066bc:	2302      	movs	r3, #2
 80066be:	e0b4      	b.n	800682a <HAL_TIM_ConfigClockSource+0x186>
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2201      	movs	r2, #1
 80066c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2202      	movs	r2, #2
 80066cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80066de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80066e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	68ba      	ldr	r2, [r7, #8]
 80066ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066f8:	d03e      	beq.n	8006778 <HAL_TIM_ConfigClockSource+0xd4>
 80066fa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066fe:	f200 8087 	bhi.w	8006810 <HAL_TIM_ConfigClockSource+0x16c>
 8006702:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006706:	f000 8086 	beq.w	8006816 <HAL_TIM_ConfigClockSource+0x172>
 800670a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800670e:	d87f      	bhi.n	8006810 <HAL_TIM_ConfigClockSource+0x16c>
 8006710:	2b70      	cmp	r3, #112	@ 0x70
 8006712:	d01a      	beq.n	800674a <HAL_TIM_ConfigClockSource+0xa6>
 8006714:	2b70      	cmp	r3, #112	@ 0x70
 8006716:	d87b      	bhi.n	8006810 <HAL_TIM_ConfigClockSource+0x16c>
 8006718:	2b60      	cmp	r3, #96	@ 0x60
 800671a:	d050      	beq.n	80067be <HAL_TIM_ConfigClockSource+0x11a>
 800671c:	2b60      	cmp	r3, #96	@ 0x60
 800671e:	d877      	bhi.n	8006810 <HAL_TIM_ConfigClockSource+0x16c>
 8006720:	2b50      	cmp	r3, #80	@ 0x50
 8006722:	d03c      	beq.n	800679e <HAL_TIM_ConfigClockSource+0xfa>
 8006724:	2b50      	cmp	r3, #80	@ 0x50
 8006726:	d873      	bhi.n	8006810 <HAL_TIM_ConfigClockSource+0x16c>
 8006728:	2b40      	cmp	r3, #64	@ 0x40
 800672a:	d058      	beq.n	80067de <HAL_TIM_ConfigClockSource+0x13a>
 800672c:	2b40      	cmp	r3, #64	@ 0x40
 800672e:	d86f      	bhi.n	8006810 <HAL_TIM_ConfigClockSource+0x16c>
 8006730:	2b30      	cmp	r3, #48	@ 0x30
 8006732:	d064      	beq.n	80067fe <HAL_TIM_ConfigClockSource+0x15a>
 8006734:	2b30      	cmp	r3, #48	@ 0x30
 8006736:	d86b      	bhi.n	8006810 <HAL_TIM_ConfigClockSource+0x16c>
 8006738:	2b20      	cmp	r3, #32
 800673a:	d060      	beq.n	80067fe <HAL_TIM_ConfigClockSource+0x15a>
 800673c:	2b20      	cmp	r3, #32
 800673e:	d867      	bhi.n	8006810 <HAL_TIM_ConfigClockSource+0x16c>
 8006740:	2b00      	cmp	r3, #0
 8006742:	d05c      	beq.n	80067fe <HAL_TIM_ConfigClockSource+0x15a>
 8006744:	2b10      	cmp	r3, #16
 8006746:	d05a      	beq.n	80067fe <HAL_TIM_ConfigClockSource+0x15a>
 8006748:	e062      	b.n	8006810 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800675a:	f000 f9b9 	bl	8006ad0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	689b      	ldr	r3, [r3, #8]
 8006764:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800676c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68ba      	ldr	r2, [r7, #8]
 8006774:	609a      	str	r2, [r3, #8]
      break;
 8006776:	e04f      	b.n	8006818 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800677c:	683b      	ldr	r3, [r7, #0]
 800677e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006784:	683b      	ldr	r3, [r7, #0]
 8006786:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006788:	f000 f9a2 	bl	8006ad0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	689a      	ldr	r2, [r3, #8]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800679a:	609a      	str	r2, [r3, #8]
      break;
 800679c:	e03c      	b.n	8006818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067a6:	683b      	ldr	r3, [r7, #0]
 80067a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067aa:	461a      	mov	r2, r3
 80067ac:	f000 f916 	bl	80069dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2150      	movs	r1, #80	@ 0x50
 80067b6:	4618      	mov	r0, r3
 80067b8:	f000 f96f 	bl	8006a9a <TIM_ITRx_SetConfig>
      break;
 80067bc:	e02c      	b.n	8006818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067ca:	461a      	mov	r2, r3
 80067cc:	f000 f935 	bl	8006a3a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2160      	movs	r1, #96	@ 0x60
 80067d6:	4618      	mov	r0, r3
 80067d8:	f000 f95f 	bl	8006a9a <TIM_ITRx_SetConfig>
      break;
 80067dc:	e01c      	b.n	8006818 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067ea:	461a      	mov	r2, r3
 80067ec:	f000 f8f6 	bl	80069dc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2140      	movs	r1, #64	@ 0x40
 80067f6:	4618      	mov	r0, r3
 80067f8:	f000 f94f 	bl	8006a9a <TIM_ITRx_SetConfig>
      break;
 80067fc:	e00c      	b.n	8006818 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	4619      	mov	r1, r3
 8006808:	4610      	mov	r0, r2
 800680a:	f000 f946 	bl	8006a9a <TIM_ITRx_SetConfig>
      break;
 800680e:	e003      	b.n	8006818 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	73fb      	strb	r3, [r7, #15]
      break;
 8006814:	e000      	b.n	8006818 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006816:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006828:	7bfb      	ldrb	r3, [r7, #15]
}
 800682a:	4618      	mov	r0, r3
 800682c:	3710      	adds	r7, #16
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}

08006832 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006832:	b480      	push	{r7}
 8006834:	b083      	sub	sp, #12
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800683a:	bf00      	nop
 800683c:	370c      	adds	r7, #12
 800683e:	46bd      	mov	sp, r7
 8006840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006844:	4770      	bx	lr

08006846 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006846:	b480      	push	{r7}
 8006848:	b083      	sub	sp, #12
 800684a:	af00      	add	r7, sp, #0
 800684c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800684e:	bf00      	nop
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800685a:	b480      	push	{r7}
 800685c:	b083      	sub	sp, #12
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006862:	bf00      	nop
 8006864:	370c      	adds	r7, #12
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800686e:	b480      	push	{r7}
 8006870:	b083      	sub	sp, #12
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006876:	bf00      	nop
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr
	...

08006884 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	4a46      	ldr	r2, [pc, #280]	@ (80069b0 <TIM_Base_SetConfig+0x12c>)
 8006898:	4293      	cmp	r3, r2
 800689a:	d013      	beq.n	80068c4 <TIM_Base_SetConfig+0x40>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068a2:	d00f      	beq.n	80068c4 <TIM_Base_SetConfig+0x40>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	4a43      	ldr	r2, [pc, #268]	@ (80069b4 <TIM_Base_SetConfig+0x130>)
 80068a8:	4293      	cmp	r3, r2
 80068aa:	d00b      	beq.n	80068c4 <TIM_Base_SetConfig+0x40>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	4a42      	ldr	r2, [pc, #264]	@ (80069b8 <TIM_Base_SetConfig+0x134>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d007      	beq.n	80068c4 <TIM_Base_SetConfig+0x40>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	4a41      	ldr	r2, [pc, #260]	@ (80069bc <TIM_Base_SetConfig+0x138>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d003      	beq.n	80068c4 <TIM_Base_SetConfig+0x40>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	4a40      	ldr	r2, [pc, #256]	@ (80069c0 <TIM_Base_SetConfig+0x13c>)
 80068c0:	4293      	cmp	r3, r2
 80068c2:	d108      	bne.n	80068d6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068cc:	683b      	ldr	r3, [r7, #0]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	4313      	orrs	r3, r2
 80068d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a35      	ldr	r2, [pc, #212]	@ (80069b0 <TIM_Base_SetConfig+0x12c>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d02b      	beq.n	8006936 <TIM_Base_SetConfig+0xb2>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068e4:	d027      	beq.n	8006936 <TIM_Base_SetConfig+0xb2>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a32      	ldr	r2, [pc, #200]	@ (80069b4 <TIM_Base_SetConfig+0x130>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d023      	beq.n	8006936 <TIM_Base_SetConfig+0xb2>
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	4a31      	ldr	r2, [pc, #196]	@ (80069b8 <TIM_Base_SetConfig+0x134>)
 80068f2:	4293      	cmp	r3, r2
 80068f4:	d01f      	beq.n	8006936 <TIM_Base_SetConfig+0xb2>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4a30      	ldr	r2, [pc, #192]	@ (80069bc <TIM_Base_SetConfig+0x138>)
 80068fa:	4293      	cmp	r3, r2
 80068fc:	d01b      	beq.n	8006936 <TIM_Base_SetConfig+0xb2>
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	4a2f      	ldr	r2, [pc, #188]	@ (80069c0 <TIM_Base_SetConfig+0x13c>)
 8006902:	4293      	cmp	r3, r2
 8006904:	d017      	beq.n	8006936 <TIM_Base_SetConfig+0xb2>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a2e      	ldr	r2, [pc, #184]	@ (80069c4 <TIM_Base_SetConfig+0x140>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d013      	beq.n	8006936 <TIM_Base_SetConfig+0xb2>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	4a2d      	ldr	r2, [pc, #180]	@ (80069c8 <TIM_Base_SetConfig+0x144>)
 8006912:	4293      	cmp	r3, r2
 8006914:	d00f      	beq.n	8006936 <TIM_Base_SetConfig+0xb2>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a2c      	ldr	r2, [pc, #176]	@ (80069cc <TIM_Base_SetConfig+0x148>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d00b      	beq.n	8006936 <TIM_Base_SetConfig+0xb2>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a2b      	ldr	r2, [pc, #172]	@ (80069d0 <TIM_Base_SetConfig+0x14c>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d007      	beq.n	8006936 <TIM_Base_SetConfig+0xb2>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a2a      	ldr	r2, [pc, #168]	@ (80069d4 <TIM_Base_SetConfig+0x150>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d003      	beq.n	8006936 <TIM_Base_SetConfig+0xb2>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a29      	ldr	r2, [pc, #164]	@ (80069d8 <TIM_Base_SetConfig+0x154>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d108      	bne.n	8006948 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800693c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	68fa      	ldr	r2, [r7, #12]
 8006944:	4313      	orrs	r3, r2
 8006946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	695b      	ldr	r3, [r3, #20]
 8006952:	4313      	orrs	r3, r2
 8006954:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68fa      	ldr	r2, [r7, #12]
 800695a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800695c:	683b      	ldr	r3, [r7, #0]
 800695e:	689a      	ldr	r2, [r3, #8]
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	681a      	ldr	r2, [r3, #0]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	4a10      	ldr	r2, [pc, #64]	@ (80069b0 <TIM_Base_SetConfig+0x12c>)
 8006970:	4293      	cmp	r3, r2
 8006972:	d003      	beq.n	800697c <TIM_Base_SetConfig+0xf8>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	4a12      	ldr	r2, [pc, #72]	@ (80069c0 <TIM_Base_SetConfig+0x13c>)
 8006978:	4293      	cmp	r3, r2
 800697a:	d103      	bne.n	8006984 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	691a      	ldr	r2, [r3, #16]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	2201      	movs	r2, #1
 8006988:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	691b      	ldr	r3, [r3, #16]
 800698e:	f003 0301 	and.w	r3, r3, #1
 8006992:	2b01      	cmp	r3, #1
 8006994:	d105      	bne.n	80069a2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	691b      	ldr	r3, [r3, #16]
 800699a:	f023 0201 	bic.w	r2, r3, #1
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	611a      	str	r2, [r3, #16]
  }
}
 80069a2:	bf00      	nop
 80069a4:	3714      	adds	r7, #20
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	40010000 	.word	0x40010000
 80069b4:	40000400 	.word	0x40000400
 80069b8:	40000800 	.word	0x40000800
 80069bc:	40000c00 	.word	0x40000c00
 80069c0:	40010400 	.word	0x40010400
 80069c4:	40014000 	.word	0x40014000
 80069c8:	40014400 	.word	0x40014400
 80069cc:	40014800 	.word	0x40014800
 80069d0:	40001800 	.word	0x40001800
 80069d4:	40001c00 	.word	0x40001c00
 80069d8:	40002000 	.word	0x40002000

080069dc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069dc:	b480      	push	{r7}
 80069de:	b087      	sub	sp, #28
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	6a1b      	ldr	r3, [r3, #32]
 80069ec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	f023 0201 	bic.w	r2, r3, #1
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006a06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	011b      	lsls	r3, r3, #4
 8006a0c:	693a      	ldr	r2, [r7, #16]
 8006a0e:	4313      	orrs	r3, r2
 8006a10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006a12:	697b      	ldr	r3, [r7, #20]
 8006a14:	f023 030a 	bic.w	r3, r3, #10
 8006a18:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006a1a:	697a      	ldr	r2, [r7, #20]
 8006a1c:	68bb      	ldr	r3, [r7, #8]
 8006a1e:	4313      	orrs	r3, r2
 8006a20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	693a      	ldr	r2, [r7, #16]
 8006a26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	621a      	str	r2, [r3, #32]
}
 8006a2e:	bf00      	nop
 8006a30:	371c      	adds	r7, #28
 8006a32:	46bd      	mov	sp, r7
 8006a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a38:	4770      	bx	lr

08006a3a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006a3a:	b480      	push	{r7}
 8006a3c:	b087      	sub	sp, #28
 8006a3e:	af00      	add	r7, sp, #0
 8006a40:	60f8      	str	r0, [r7, #12]
 8006a42:	60b9      	str	r1, [r7, #8]
 8006a44:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	6a1b      	ldr	r3, [r3, #32]
 8006a4a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	6a1b      	ldr	r3, [r3, #32]
 8006a50:	f023 0210 	bic.w	r2, r3, #16
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	699b      	ldr	r3, [r3, #24]
 8006a5c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a64:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	031b      	lsls	r3, r3, #12
 8006a6a:	693a      	ldr	r2, [r7, #16]
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006a76:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a78:	68bb      	ldr	r3, [r7, #8]
 8006a7a:	011b      	lsls	r3, r3, #4
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	697a      	ldr	r2, [r7, #20]
 8006a8c:	621a      	str	r2, [r3, #32]
}
 8006a8e:	bf00      	nop
 8006a90:	371c      	adds	r7, #28
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr

08006a9a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a9a:	b480      	push	{r7}
 8006a9c:	b085      	sub	sp, #20
 8006a9e:	af00      	add	r7, sp, #0
 8006aa0:	6078      	str	r0, [r7, #4]
 8006aa2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	689b      	ldr	r3, [r3, #8]
 8006aa8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006ab0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	f043 0307 	orr.w	r3, r3, #7
 8006abc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	68fa      	ldr	r2, [r7, #12]
 8006ac2:	609a      	str	r2, [r3, #8]
}
 8006ac4:	bf00      	nop
 8006ac6:	3714      	adds	r7, #20
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b087      	sub	sp, #28
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	60f8      	str	r0, [r7, #12]
 8006ad8:	60b9      	str	r1, [r7, #8]
 8006ada:	607a      	str	r2, [r7, #4]
 8006adc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	689b      	ldr	r3, [r3, #8]
 8006ae2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006aea:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	021a      	lsls	r2, r3, #8
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	431a      	orrs	r2, r3
 8006af4:	68bb      	ldr	r3, [r7, #8]
 8006af6:	4313      	orrs	r3, r2
 8006af8:	697a      	ldr	r2, [r7, #20]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	697a      	ldr	r2, [r7, #20]
 8006b02:	609a      	str	r2, [r3, #8]
}
 8006b04:	bf00      	nop
 8006b06:	371c      	adds	r7, #28
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0e:	4770      	bx	lr

08006b10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b085      	sub	sp, #20
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d101      	bne.n	8006b28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006b24:	2302      	movs	r3, #2
 8006b26:	e05a      	b.n	8006bde <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2202      	movs	r2, #2
 8006b34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	689b      	ldr	r3, [r3, #8]
 8006b46:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b4e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	68fa      	ldr	r2, [r7, #12]
 8006b60:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	4a21      	ldr	r2, [pc, #132]	@ (8006bec <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006b68:	4293      	cmp	r3, r2
 8006b6a:	d022      	beq.n	8006bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b74:	d01d      	beq.n	8006bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	4a1d      	ldr	r2, [pc, #116]	@ (8006bf0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d018      	beq.n	8006bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4a1b      	ldr	r2, [pc, #108]	@ (8006bf4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b86:	4293      	cmp	r3, r2
 8006b88:	d013      	beq.n	8006bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	4a1a      	ldr	r2, [pc, #104]	@ (8006bf8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006b90:	4293      	cmp	r3, r2
 8006b92:	d00e      	beq.n	8006bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	4a18      	ldr	r2, [pc, #96]	@ (8006bfc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b9a:	4293      	cmp	r3, r2
 8006b9c:	d009      	beq.n	8006bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	4a17      	ldr	r2, [pc, #92]	@ (8006c00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006ba4:	4293      	cmp	r3, r2
 8006ba6:	d004      	beq.n	8006bb2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a15      	ldr	r2, [pc, #84]	@ (8006c04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d10c      	bne.n	8006bcc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006bb8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	68ba      	ldr	r2, [r7, #8]
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006bdc:	2300      	movs	r3, #0
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3714      	adds	r7, #20
 8006be2:	46bd      	mov	sp, r7
 8006be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be8:	4770      	bx	lr
 8006bea:	bf00      	nop
 8006bec:	40010000 	.word	0x40010000
 8006bf0:	40000400 	.word	0x40000400
 8006bf4:	40000800 	.word	0x40000800
 8006bf8:	40000c00 	.word	0x40000c00
 8006bfc:	40010400 	.word	0x40010400
 8006c00:	40014000 	.word	0x40014000
 8006c04:	40001800 	.word	0x40001800

08006c08 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006c08:	b480      	push	{r7}
 8006c0a:	b083      	sub	sp, #12
 8006c0c:	af00      	add	r7, sp, #0
 8006c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006c10:	bf00      	nop
 8006c12:	370c      	adds	r7, #12
 8006c14:	46bd      	mov	sp, r7
 8006c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1a:	4770      	bx	lr

08006c1c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006c1c:	b480      	push	{r7}
 8006c1e:	b083      	sub	sp, #12
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006c24:	bf00      	nop
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d101      	bne.n	8006c42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006c3e:	2301      	movs	r3, #1
 8006c40:	e042      	b.n	8006cc8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c48:	b2db      	uxtb	r3, r3
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d106      	bne.n	8006c5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f7fa fc24 	bl	80014a4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	2224      	movs	r2, #36	@ 0x24
 8006c60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	68da      	ldr	r2, [r3, #12]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f000 f82b 	bl	8006cd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	691a      	ldr	r2, [r3, #16]
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	695a      	ldr	r2, [r3, #20]
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	68da      	ldr	r2, [r3, #12]
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006ca8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2220      	movs	r2, #32
 8006cb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2220      	movs	r2, #32
 8006cbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2200      	movs	r2, #0
 8006cc4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006cc6:	2300      	movs	r3, #0
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3708      	adds	r7, #8
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}

08006cd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006cd4:	b0c0      	sub	sp, #256	@ 0x100
 8006cd6:	af00      	add	r7, sp, #0
 8006cd8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	691b      	ldr	r3, [r3, #16]
 8006ce4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cec:	68d9      	ldr	r1, [r3, #12]
 8006cee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cf2:	681a      	ldr	r2, [r3, #0]
 8006cf4:	ea40 0301 	orr.w	r3, r0, r1
 8006cf8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cfe:	689a      	ldr	r2, [r3, #8]
 8006d00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d04:	691b      	ldr	r3, [r3, #16]
 8006d06:	431a      	orrs	r2, r3
 8006d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d0c:	695b      	ldr	r3, [r3, #20]
 8006d0e:	431a      	orrs	r2, r3
 8006d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d14:	69db      	ldr	r3, [r3, #28]
 8006d16:	4313      	orrs	r3, r2
 8006d18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	68db      	ldr	r3, [r3, #12]
 8006d24:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006d28:	f021 010c 	bic.w	r1, r1, #12
 8006d2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d30:	681a      	ldr	r2, [r3, #0]
 8006d32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006d36:	430b      	orrs	r3, r1
 8006d38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	695b      	ldr	r3, [r3, #20]
 8006d42:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d4a:	6999      	ldr	r1, [r3, #24]
 8006d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	ea40 0301 	orr.w	r3, r0, r1
 8006d56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d5c:	681a      	ldr	r2, [r3, #0]
 8006d5e:	4b8f      	ldr	r3, [pc, #572]	@ (8006f9c <UART_SetConfig+0x2cc>)
 8006d60:	429a      	cmp	r2, r3
 8006d62:	d005      	beq.n	8006d70 <UART_SetConfig+0xa0>
 8006d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d68:	681a      	ldr	r2, [r3, #0]
 8006d6a:	4b8d      	ldr	r3, [pc, #564]	@ (8006fa0 <UART_SetConfig+0x2d0>)
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d104      	bne.n	8006d7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d70:	f7fe fadc 	bl	800532c <HAL_RCC_GetPCLK2Freq>
 8006d74:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006d78:	e003      	b.n	8006d82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d7a:	f7fe fac3 	bl	8005304 <HAL_RCC_GetPCLK1Freq>
 8006d7e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d86:	69db      	ldr	r3, [r3, #28]
 8006d88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d8c:	f040 810c 	bne.w	8006fa8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d94:	2200      	movs	r2, #0
 8006d96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006d9a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006d9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006da2:	4622      	mov	r2, r4
 8006da4:	462b      	mov	r3, r5
 8006da6:	1891      	adds	r1, r2, r2
 8006da8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006daa:	415b      	adcs	r3, r3
 8006dac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006dae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006db2:	4621      	mov	r1, r4
 8006db4:	eb12 0801 	adds.w	r8, r2, r1
 8006db8:	4629      	mov	r1, r5
 8006dba:	eb43 0901 	adc.w	r9, r3, r1
 8006dbe:	f04f 0200 	mov.w	r2, #0
 8006dc2:	f04f 0300 	mov.w	r3, #0
 8006dc6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006dca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006dce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006dd2:	4690      	mov	r8, r2
 8006dd4:	4699      	mov	r9, r3
 8006dd6:	4623      	mov	r3, r4
 8006dd8:	eb18 0303 	adds.w	r3, r8, r3
 8006ddc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006de0:	462b      	mov	r3, r5
 8006de2:	eb49 0303 	adc.w	r3, r9, r3
 8006de6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	2200      	movs	r2, #0
 8006df2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006df6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006dfa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006dfe:	460b      	mov	r3, r1
 8006e00:	18db      	adds	r3, r3, r3
 8006e02:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e04:	4613      	mov	r3, r2
 8006e06:	eb42 0303 	adc.w	r3, r2, r3
 8006e0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006e0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006e10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006e14:	f7f9 f9ea 	bl	80001ec <__aeabi_uldivmod>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	460b      	mov	r3, r1
 8006e1c:	4b61      	ldr	r3, [pc, #388]	@ (8006fa4 <UART_SetConfig+0x2d4>)
 8006e1e:	fba3 2302 	umull	r2, r3, r3, r2
 8006e22:	095b      	lsrs	r3, r3, #5
 8006e24:	011c      	lsls	r4, r3, #4
 8006e26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006e30:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006e34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006e38:	4642      	mov	r2, r8
 8006e3a:	464b      	mov	r3, r9
 8006e3c:	1891      	adds	r1, r2, r2
 8006e3e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006e40:	415b      	adcs	r3, r3
 8006e42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006e48:	4641      	mov	r1, r8
 8006e4a:	eb12 0a01 	adds.w	sl, r2, r1
 8006e4e:	4649      	mov	r1, r9
 8006e50:	eb43 0b01 	adc.w	fp, r3, r1
 8006e54:	f04f 0200 	mov.w	r2, #0
 8006e58:	f04f 0300 	mov.w	r3, #0
 8006e5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006e60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006e64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e68:	4692      	mov	sl, r2
 8006e6a:	469b      	mov	fp, r3
 8006e6c:	4643      	mov	r3, r8
 8006e6e:	eb1a 0303 	adds.w	r3, sl, r3
 8006e72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e76:	464b      	mov	r3, r9
 8006e78:	eb4b 0303 	adc.w	r3, fp, r3
 8006e7c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e84:	685b      	ldr	r3, [r3, #4]
 8006e86:	2200      	movs	r2, #0
 8006e88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e8c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006e90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006e94:	460b      	mov	r3, r1
 8006e96:	18db      	adds	r3, r3, r3
 8006e98:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	eb42 0303 	adc.w	r3, r2, r3
 8006ea0:	647b      	str	r3, [r7, #68]	@ 0x44
 8006ea2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006ea6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006eaa:	f7f9 f99f 	bl	80001ec <__aeabi_uldivmod>
 8006eae:	4602      	mov	r2, r0
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	4611      	mov	r1, r2
 8006eb4:	4b3b      	ldr	r3, [pc, #236]	@ (8006fa4 <UART_SetConfig+0x2d4>)
 8006eb6:	fba3 2301 	umull	r2, r3, r3, r1
 8006eba:	095b      	lsrs	r3, r3, #5
 8006ebc:	2264      	movs	r2, #100	@ 0x64
 8006ebe:	fb02 f303 	mul.w	r3, r2, r3
 8006ec2:	1acb      	subs	r3, r1, r3
 8006ec4:	00db      	lsls	r3, r3, #3
 8006ec6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006eca:	4b36      	ldr	r3, [pc, #216]	@ (8006fa4 <UART_SetConfig+0x2d4>)
 8006ecc:	fba3 2302 	umull	r2, r3, r3, r2
 8006ed0:	095b      	lsrs	r3, r3, #5
 8006ed2:	005b      	lsls	r3, r3, #1
 8006ed4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006ed8:	441c      	add	r4, r3
 8006eda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ede:	2200      	movs	r2, #0
 8006ee0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ee4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006ee8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006eec:	4642      	mov	r2, r8
 8006eee:	464b      	mov	r3, r9
 8006ef0:	1891      	adds	r1, r2, r2
 8006ef2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006ef4:	415b      	adcs	r3, r3
 8006ef6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006ef8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006efc:	4641      	mov	r1, r8
 8006efe:	1851      	adds	r1, r2, r1
 8006f00:	6339      	str	r1, [r7, #48]	@ 0x30
 8006f02:	4649      	mov	r1, r9
 8006f04:	414b      	adcs	r3, r1
 8006f06:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f08:	f04f 0200 	mov.w	r2, #0
 8006f0c:	f04f 0300 	mov.w	r3, #0
 8006f10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006f14:	4659      	mov	r1, fp
 8006f16:	00cb      	lsls	r3, r1, #3
 8006f18:	4651      	mov	r1, sl
 8006f1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f1e:	4651      	mov	r1, sl
 8006f20:	00ca      	lsls	r2, r1, #3
 8006f22:	4610      	mov	r0, r2
 8006f24:	4619      	mov	r1, r3
 8006f26:	4603      	mov	r3, r0
 8006f28:	4642      	mov	r2, r8
 8006f2a:	189b      	adds	r3, r3, r2
 8006f2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006f30:	464b      	mov	r3, r9
 8006f32:	460a      	mov	r2, r1
 8006f34:	eb42 0303 	adc.w	r3, r2, r3
 8006f38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006f3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f40:	685b      	ldr	r3, [r3, #4]
 8006f42:	2200      	movs	r2, #0
 8006f44:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006f48:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006f4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006f50:	460b      	mov	r3, r1
 8006f52:	18db      	adds	r3, r3, r3
 8006f54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f56:	4613      	mov	r3, r2
 8006f58:	eb42 0303 	adc.w	r3, r2, r3
 8006f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006f62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006f66:	f7f9 f941 	bl	80001ec <__aeabi_uldivmod>
 8006f6a:	4602      	mov	r2, r0
 8006f6c:	460b      	mov	r3, r1
 8006f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8006fa4 <UART_SetConfig+0x2d4>)
 8006f70:	fba3 1302 	umull	r1, r3, r3, r2
 8006f74:	095b      	lsrs	r3, r3, #5
 8006f76:	2164      	movs	r1, #100	@ 0x64
 8006f78:	fb01 f303 	mul.w	r3, r1, r3
 8006f7c:	1ad3      	subs	r3, r2, r3
 8006f7e:	00db      	lsls	r3, r3, #3
 8006f80:	3332      	adds	r3, #50	@ 0x32
 8006f82:	4a08      	ldr	r2, [pc, #32]	@ (8006fa4 <UART_SetConfig+0x2d4>)
 8006f84:	fba2 2303 	umull	r2, r3, r2, r3
 8006f88:	095b      	lsrs	r3, r3, #5
 8006f8a:	f003 0207 	and.w	r2, r3, #7
 8006f8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	4422      	add	r2, r4
 8006f96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f98:	e106      	b.n	80071a8 <UART_SetConfig+0x4d8>
 8006f9a:	bf00      	nop
 8006f9c:	40011000 	.word	0x40011000
 8006fa0:	40011400 	.word	0x40011400
 8006fa4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006fa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fac:	2200      	movs	r2, #0
 8006fae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006fb2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006fb6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006fba:	4642      	mov	r2, r8
 8006fbc:	464b      	mov	r3, r9
 8006fbe:	1891      	adds	r1, r2, r2
 8006fc0:	6239      	str	r1, [r7, #32]
 8006fc2:	415b      	adcs	r3, r3
 8006fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fc6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006fca:	4641      	mov	r1, r8
 8006fcc:	1854      	adds	r4, r2, r1
 8006fce:	4649      	mov	r1, r9
 8006fd0:	eb43 0501 	adc.w	r5, r3, r1
 8006fd4:	f04f 0200 	mov.w	r2, #0
 8006fd8:	f04f 0300 	mov.w	r3, #0
 8006fdc:	00eb      	lsls	r3, r5, #3
 8006fde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006fe2:	00e2      	lsls	r2, r4, #3
 8006fe4:	4614      	mov	r4, r2
 8006fe6:	461d      	mov	r5, r3
 8006fe8:	4643      	mov	r3, r8
 8006fea:	18e3      	adds	r3, r4, r3
 8006fec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ff0:	464b      	mov	r3, r9
 8006ff2:	eb45 0303 	adc.w	r3, r5, r3
 8006ff6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ffa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ffe:	685b      	ldr	r3, [r3, #4]
 8007000:	2200      	movs	r2, #0
 8007002:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007006:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800700a:	f04f 0200 	mov.w	r2, #0
 800700e:	f04f 0300 	mov.w	r3, #0
 8007012:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007016:	4629      	mov	r1, r5
 8007018:	008b      	lsls	r3, r1, #2
 800701a:	4621      	mov	r1, r4
 800701c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007020:	4621      	mov	r1, r4
 8007022:	008a      	lsls	r2, r1, #2
 8007024:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007028:	f7f9 f8e0 	bl	80001ec <__aeabi_uldivmod>
 800702c:	4602      	mov	r2, r0
 800702e:	460b      	mov	r3, r1
 8007030:	4b60      	ldr	r3, [pc, #384]	@ (80071b4 <UART_SetConfig+0x4e4>)
 8007032:	fba3 2302 	umull	r2, r3, r3, r2
 8007036:	095b      	lsrs	r3, r3, #5
 8007038:	011c      	lsls	r4, r3, #4
 800703a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800703e:	2200      	movs	r2, #0
 8007040:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007044:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007048:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800704c:	4642      	mov	r2, r8
 800704e:	464b      	mov	r3, r9
 8007050:	1891      	adds	r1, r2, r2
 8007052:	61b9      	str	r1, [r7, #24]
 8007054:	415b      	adcs	r3, r3
 8007056:	61fb      	str	r3, [r7, #28]
 8007058:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800705c:	4641      	mov	r1, r8
 800705e:	1851      	adds	r1, r2, r1
 8007060:	6139      	str	r1, [r7, #16]
 8007062:	4649      	mov	r1, r9
 8007064:	414b      	adcs	r3, r1
 8007066:	617b      	str	r3, [r7, #20]
 8007068:	f04f 0200 	mov.w	r2, #0
 800706c:	f04f 0300 	mov.w	r3, #0
 8007070:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007074:	4659      	mov	r1, fp
 8007076:	00cb      	lsls	r3, r1, #3
 8007078:	4651      	mov	r1, sl
 800707a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800707e:	4651      	mov	r1, sl
 8007080:	00ca      	lsls	r2, r1, #3
 8007082:	4610      	mov	r0, r2
 8007084:	4619      	mov	r1, r3
 8007086:	4603      	mov	r3, r0
 8007088:	4642      	mov	r2, r8
 800708a:	189b      	adds	r3, r3, r2
 800708c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007090:	464b      	mov	r3, r9
 8007092:	460a      	mov	r2, r1
 8007094:	eb42 0303 	adc.w	r3, r2, r3
 8007098:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800709c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80070a0:	685b      	ldr	r3, [r3, #4]
 80070a2:	2200      	movs	r2, #0
 80070a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80070a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80070a8:	f04f 0200 	mov.w	r2, #0
 80070ac:	f04f 0300 	mov.w	r3, #0
 80070b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80070b4:	4649      	mov	r1, r9
 80070b6:	008b      	lsls	r3, r1, #2
 80070b8:	4641      	mov	r1, r8
 80070ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80070be:	4641      	mov	r1, r8
 80070c0:	008a      	lsls	r2, r1, #2
 80070c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80070c6:	f7f9 f891 	bl	80001ec <__aeabi_uldivmod>
 80070ca:	4602      	mov	r2, r0
 80070cc:	460b      	mov	r3, r1
 80070ce:	4611      	mov	r1, r2
 80070d0:	4b38      	ldr	r3, [pc, #224]	@ (80071b4 <UART_SetConfig+0x4e4>)
 80070d2:	fba3 2301 	umull	r2, r3, r3, r1
 80070d6:	095b      	lsrs	r3, r3, #5
 80070d8:	2264      	movs	r2, #100	@ 0x64
 80070da:	fb02 f303 	mul.w	r3, r2, r3
 80070de:	1acb      	subs	r3, r1, r3
 80070e0:	011b      	lsls	r3, r3, #4
 80070e2:	3332      	adds	r3, #50	@ 0x32
 80070e4:	4a33      	ldr	r2, [pc, #204]	@ (80071b4 <UART_SetConfig+0x4e4>)
 80070e6:	fba2 2303 	umull	r2, r3, r2, r3
 80070ea:	095b      	lsrs	r3, r3, #5
 80070ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80070f0:	441c      	add	r4, r3
 80070f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070f6:	2200      	movs	r2, #0
 80070f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80070fa:	677a      	str	r2, [r7, #116]	@ 0x74
 80070fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007100:	4642      	mov	r2, r8
 8007102:	464b      	mov	r3, r9
 8007104:	1891      	adds	r1, r2, r2
 8007106:	60b9      	str	r1, [r7, #8]
 8007108:	415b      	adcs	r3, r3
 800710a:	60fb      	str	r3, [r7, #12]
 800710c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007110:	4641      	mov	r1, r8
 8007112:	1851      	adds	r1, r2, r1
 8007114:	6039      	str	r1, [r7, #0]
 8007116:	4649      	mov	r1, r9
 8007118:	414b      	adcs	r3, r1
 800711a:	607b      	str	r3, [r7, #4]
 800711c:	f04f 0200 	mov.w	r2, #0
 8007120:	f04f 0300 	mov.w	r3, #0
 8007124:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007128:	4659      	mov	r1, fp
 800712a:	00cb      	lsls	r3, r1, #3
 800712c:	4651      	mov	r1, sl
 800712e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007132:	4651      	mov	r1, sl
 8007134:	00ca      	lsls	r2, r1, #3
 8007136:	4610      	mov	r0, r2
 8007138:	4619      	mov	r1, r3
 800713a:	4603      	mov	r3, r0
 800713c:	4642      	mov	r2, r8
 800713e:	189b      	adds	r3, r3, r2
 8007140:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007142:	464b      	mov	r3, r9
 8007144:	460a      	mov	r2, r1
 8007146:	eb42 0303 	adc.w	r3, r2, r3
 800714a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800714c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007150:	685b      	ldr	r3, [r3, #4]
 8007152:	2200      	movs	r2, #0
 8007154:	663b      	str	r3, [r7, #96]	@ 0x60
 8007156:	667a      	str	r2, [r7, #100]	@ 0x64
 8007158:	f04f 0200 	mov.w	r2, #0
 800715c:	f04f 0300 	mov.w	r3, #0
 8007160:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007164:	4649      	mov	r1, r9
 8007166:	008b      	lsls	r3, r1, #2
 8007168:	4641      	mov	r1, r8
 800716a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800716e:	4641      	mov	r1, r8
 8007170:	008a      	lsls	r2, r1, #2
 8007172:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007176:	f7f9 f839 	bl	80001ec <__aeabi_uldivmod>
 800717a:	4602      	mov	r2, r0
 800717c:	460b      	mov	r3, r1
 800717e:	4b0d      	ldr	r3, [pc, #52]	@ (80071b4 <UART_SetConfig+0x4e4>)
 8007180:	fba3 1302 	umull	r1, r3, r3, r2
 8007184:	095b      	lsrs	r3, r3, #5
 8007186:	2164      	movs	r1, #100	@ 0x64
 8007188:	fb01 f303 	mul.w	r3, r1, r3
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	011b      	lsls	r3, r3, #4
 8007190:	3332      	adds	r3, #50	@ 0x32
 8007192:	4a08      	ldr	r2, [pc, #32]	@ (80071b4 <UART_SetConfig+0x4e4>)
 8007194:	fba2 2303 	umull	r2, r3, r2, r3
 8007198:	095b      	lsrs	r3, r3, #5
 800719a:	f003 020f 	and.w	r2, r3, #15
 800719e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	4422      	add	r2, r4
 80071a6:	609a      	str	r2, [r3, #8]
}
 80071a8:	bf00      	nop
 80071aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80071ae:	46bd      	mov	sp, r7
 80071b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80071b4:	51eb851f 	.word	0x51eb851f

080071b8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80071b8:	b480      	push	{r7}
 80071ba:	b083      	sub	sp, #12
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
 80071c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80071c2:	683b      	ldr	r3, [r7, #0]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d123      	bne.n	8007212 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80071d2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80071d6:	683a      	ldr	r2, [r7, #0]
 80071d8:	6851      	ldr	r1, [r2, #4]
 80071da:	683a      	ldr	r2, [r7, #0]
 80071dc:	6892      	ldr	r2, [r2, #8]
 80071de:	4311      	orrs	r1, r2
 80071e0:	683a      	ldr	r2, [r7, #0]
 80071e2:	68d2      	ldr	r2, [r2, #12]
 80071e4:	4311      	orrs	r1, r2
 80071e6:	683a      	ldr	r2, [r7, #0]
 80071e8:	6912      	ldr	r2, [r2, #16]
 80071ea:	4311      	orrs	r1, r2
 80071ec:	683a      	ldr	r2, [r7, #0]
 80071ee:	6952      	ldr	r2, [r2, #20]
 80071f0:	4311      	orrs	r1, r2
 80071f2:	683a      	ldr	r2, [r7, #0]
 80071f4:	6992      	ldr	r2, [r2, #24]
 80071f6:	4311      	orrs	r1, r2
 80071f8:	683a      	ldr	r2, [r7, #0]
 80071fa:	69d2      	ldr	r2, [r2, #28]
 80071fc:	4311      	orrs	r1, r2
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	6a12      	ldr	r2, [r2, #32]
 8007202:	4311      	orrs	r1, r2
 8007204:	683a      	ldr	r2, [r7, #0]
 8007206:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007208:	430a      	orrs	r2, r1
 800720a:	431a      	orrs	r2, r3
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	601a      	str	r2, [r3, #0]
 8007210:	e028      	b.n	8007264 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	69d9      	ldr	r1, [r3, #28]
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	6a1b      	ldr	r3, [r3, #32]
 8007222:	4319      	orrs	r1, r3
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007228:	430b      	orrs	r3, r1
 800722a:	431a      	orrs	r2, r3
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007238:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800723c:	683a      	ldr	r2, [r7, #0]
 800723e:	6851      	ldr	r1, [r2, #4]
 8007240:	683a      	ldr	r2, [r7, #0]
 8007242:	6892      	ldr	r2, [r2, #8]
 8007244:	4311      	orrs	r1, r2
 8007246:	683a      	ldr	r2, [r7, #0]
 8007248:	68d2      	ldr	r2, [r2, #12]
 800724a:	4311      	orrs	r1, r2
 800724c:	683a      	ldr	r2, [r7, #0]
 800724e:	6912      	ldr	r2, [r2, #16]
 8007250:	4311      	orrs	r1, r2
 8007252:	683a      	ldr	r2, [r7, #0]
 8007254:	6952      	ldr	r2, [r2, #20]
 8007256:	4311      	orrs	r1, r2
 8007258:	683a      	ldr	r2, [r7, #0]
 800725a:	6992      	ldr	r2, [r2, #24]
 800725c:	430a      	orrs	r2, r1
 800725e:	431a      	orrs	r2, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8007264:	2300      	movs	r3, #0
}
 8007266:	4618      	mov	r0, r3
 8007268:	370c      	adds	r7, #12
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr

08007272 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8007272:	b480      	push	{r7}
 8007274:	b085      	sub	sp, #20
 8007276:	af00      	add	r7, sp, #0
 8007278:	60f8      	str	r0, [r7, #12]
 800727a:	60b9      	str	r1, [r7, #8]
 800727c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	2b00      	cmp	r3, #0
 8007282:	d128      	bne.n	80072d6 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	689b      	ldr	r3, [r3, #8]
 8007288:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800728c:	68bb      	ldr	r3, [r7, #8]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	1e59      	subs	r1, r3, #1
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	685b      	ldr	r3, [r3, #4]
 8007296:	3b01      	subs	r3, #1
 8007298:	011b      	lsls	r3, r3, #4
 800729a:	4319      	orrs	r1, r3
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	689b      	ldr	r3, [r3, #8]
 80072a0:	3b01      	subs	r3, #1
 80072a2:	021b      	lsls	r3, r3, #8
 80072a4:	4319      	orrs	r1, r3
 80072a6:	68bb      	ldr	r3, [r7, #8]
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	3b01      	subs	r3, #1
 80072ac:	031b      	lsls	r3, r3, #12
 80072ae:	4319      	orrs	r1, r3
 80072b0:	68bb      	ldr	r3, [r7, #8]
 80072b2:	691b      	ldr	r3, [r3, #16]
 80072b4:	3b01      	subs	r3, #1
 80072b6:	041b      	lsls	r3, r3, #16
 80072b8:	4319      	orrs	r1, r3
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	695b      	ldr	r3, [r3, #20]
 80072be:	3b01      	subs	r3, #1
 80072c0:	051b      	lsls	r3, r3, #20
 80072c2:	4319      	orrs	r1, r3
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	699b      	ldr	r3, [r3, #24]
 80072c8:	3b01      	subs	r3, #1
 80072ca:	061b      	lsls	r3, r3, #24
 80072cc:	430b      	orrs	r3, r1
 80072ce:	431a      	orrs	r2, r3
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	609a      	str	r2, [r3, #8]
 80072d4:	e02f      	b.n	8007336 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	689b      	ldr	r3, [r3, #8]
 80072da:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80072de:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80072e2:	68ba      	ldr	r2, [r7, #8]
 80072e4:	68d2      	ldr	r2, [r2, #12]
 80072e6:	3a01      	subs	r2, #1
 80072e8:	0311      	lsls	r1, r2, #12
 80072ea:	68ba      	ldr	r2, [r7, #8]
 80072ec:	6952      	ldr	r2, [r2, #20]
 80072ee:	3a01      	subs	r2, #1
 80072f0:	0512      	lsls	r2, r2, #20
 80072f2:	430a      	orrs	r2, r1
 80072f4:	431a      	orrs	r2, r3
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	68db      	ldr	r3, [r3, #12]
 80072fe:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8007302:	68bb      	ldr	r3, [r7, #8]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	1e59      	subs	r1, r3, #1
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	685b      	ldr	r3, [r3, #4]
 800730c:	3b01      	subs	r3, #1
 800730e:	011b      	lsls	r3, r3, #4
 8007310:	4319      	orrs	r1, r3
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	689b      	ldr	r3, [r3, #8]
 8007316:	3b01      	subs	r3, #1
 8007318:	021b      	lsls	r3, r3, #8
 800731a:	4319      	orrs	r1, r3
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	3b01      	subs	r3, #1
 8007322:	041b      	lsls	r3, r3, #16
 8007324:	4319      	orrs	r1, r3
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	699b      	ldr	r3, [r3, #24]
 800732a:	3b01      	subs	r3, #1
 800732c:	061b      	lsls	r3, r3, #24
 800732e:	430b      	orrs	r3, r1
 8007330:	431a      	orrs	r2, r3
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8007336:	2300      	movs	r3, #0
}
 8007338:	4618      	mov	r0, r3
 800733a:	3714      	adds	r7, #20
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007344:	b084      	sub	sp, #16
 8007346:	b580      	push	{r7, lr}
 8007348:	b084      	sub	sp, #16
 800734a:	af00      	add	r7, sp, #0
 800734c:	6078      	str	r0, [r7, #4]
 800734e:	f107 001c 	add.w	r0, r7, #28
 8007352:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007356:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800735a:	2b01      	cmp	r3, #1
 800735c:	d123      	bne.n	80073a6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007362:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68db      	ldr	r3, [r3, #12]
 800736e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007372:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007376:	687a      	ldr	r2, [r7, #4]
 8007378:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	68db      	ldr	r3, [r3, #12]
 800737e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007386:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800738a:	2b01      	cmp	r3, #1
 800738c:	d105      	bne.n	800739a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	68db      	ldr	r3, [r3, #12]
 8007392:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f98d 	bl	80076ba <USB_CoreReset>
 80073a0:	4603      	mov	r3, r0
 80073a2:	73fb      	strb	r3, [r7, #15]
 80073a4:	e01b      	b.n	80073de <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f981 	bl	80076ba <USB_CoreReset>
 80073b8:	4603      	mov	r3, r0
 80073ba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80073bc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d106      	bne.n	80073d2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073c8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	639a      	str	r2, [r3, #56]	@ 0x38
 80073d0:	e005      	b.n	80073de <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073d6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80073de:	7fbb      	ldrb	r3, [r7, #30]
 80073e0:	2b01      	cmp	r3, #1
 80073e2:	d10b      	bne.n	80073fc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	689b      	ldr	r3, [r3, #8]
 80073e8:	f043 0206 	orr.w	r2, r3, #6
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	f043 0220 	orr.w	r2, r3, #32
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80073fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073fe:	4618      	mov	r0, r3
 8007400:	3710      	adds	r7, #16
 8007402:	46bd      	mov	sp, r7
 8007404:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007408:	b004      	add	sp, #16
 800740a:	4770      	bx	lr

0800740c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800740c:	b480      	push	{r7}
 800740e:	b083      	sub	sp, #12
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	689b      	ldr	r3, [r3, #8]
 8007418:	f023 0201 	bic.w	r2, r3, #1
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	370c      	adds	r7, #12
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800742e:	b580      	push	{r7, lr}
 8007430:	b084      	sub	sp, #16
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
 8007436:	460b      	mov	r3, r1
 8007438:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800743a:	2300      	movs	r3, #0
 800743c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	68db      	ldr	r3, [r3, #12]
 8007442:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800744a:	78fb      	ldrb	r3, [r7, #3]
 800744c:	2b01      	cmp	r3, #1
 800744e:	d115      	bne.n	800747c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	68db      	ldr	r3, [r3, #12]
 8007454:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800745c:	200a      	movs	r0, #10
 800745e:	f7fa fab5 	bl	80019cc <HAL_Delay>
      ms += 10U;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	330a      	adds	r3, #10
 8007466:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007468:	6878      	ldr	r0, [r7, #4]
 800746a:	f000 f918 	bl	800769e <USB_GetMode>
 800746e:	4603      	mov	r3, r0
 8007470:	2b01      	cmp	r3, #1
 8007472:	d01e      	beq.n	80074b2 <USB_SetCurrentMode+0x84>
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2bc7      	cmp	r3, #199	@ 0xc7
 8007478:	d9f0      	bls.n	800745c <USB_SetCurrentMode+0x2e>
 800747a:	e01a      	b.n	80074b2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800747c:	78fb      	ldrb	r3, [r7, #3]
 800747e:	2b00      	cmp	r3, #0
 8007480:	d115      	bne.n	80074ae <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	68db      	ldr	r3, [r3, #12]
 8007486:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800748e:	200a      	movs	r0, #10
 8007490:	f7fa fa9c 	bl	80019cc <HAL_Delay>
      ms += 10U;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	330a      	adds	r3, #10
 8007498:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 f8ff 	bl	800769e <USB_GetMode>
 80074a0:	4603      	mov	r3, r0
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d005      	beq.n	80074b2 <USB_SetCurrentMode+0x84>
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2bc7      	cmp	r3, #199	@ 0xc7
 80074aa:	d9f0      	bls.n	800748e <USB_SetCurrentMode+0x60>
 80074ac:	e001      	b.n	80074b2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e005      	b.n	80074be <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2bc8      	cmp	r3, #200	@ 0xc8
 80074b6:	d101      	bne.n	80074bc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e000      	b.n	80074be <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80074bc:	2300      	movs	r3, #0
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3710      	adds	r7, #16
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}

080074c6 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80074c6:	b480      	push	{r7}
 80074c8:	b085      	sub	sp, #20
 80074ca:	af00      	add	r7, sp, #0
 80074cc:	6078      	str	r0, [r7, #4]
 80074ce:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80074d0:	2300      	movs	r3, #0
 80074d2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	3301      	adds	r3, #1
 80074d8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074e0:	d901      	bls.n	80074e6 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80074e2:	2303      	movs	r3, #3
 80074e4:	e01b      	b.n	800751e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	691b      	ldr	r3, [r3, #16]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	daf2      	bge.n	80074d4 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80074ee:	2300      	movs	r3, #0
 80074f0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80074f2:	683b      	ldr	r3, [r7, #0]
 80074f4:	019b      	lsls	r3, r3, #6
 80074f6:	f043 0220 	orr.w	r2, r3, #32
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	3301      	adds	r3, #1
 8007502:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800750a:	d901      	bls.n	8007510 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800750c:	2303      	movs	r3, #3
 800750e:	e006      	b.n	800751e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	691b      	ldr	r3, [r3, #16]
 8007514:	f003 0320 	and.w	r3, r3, #32
 8007518:	2b20      	cmp	r3, #32
 800751a:	d0f0      	beq.n	80074fe <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3714      	adds	r7, #20
 8007522:	46bd      	mov	sp, r7
 8007524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007528:	4770      	bx	lr

0800752a <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800752a:	b480      	push	{r7}
 800752c:	b085      	sub	sp, #20
 800752e:	af00      	add	r7, sp, #0
 8007530:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007532:	2300      	movs	r3, #0
 8007534:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	3301      	adds	r3, #1
 800753a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007542:	d901      	bls.n	8007548 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8007544:	2303      	movs	r3, #3
 8007546:	e018      	b.n	800757a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	2b00      	cmp	r3, #0
 800754e:	daf2      	bge.n	8007536 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007550:	2300      	movs	r3, #0
 8007552:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2210      	movs	r2, #16
 8007558:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	3301      	adds	r3, #1
 800755e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007566:	d901      	bls.n	800756c <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007568:	2303      	movs	r3, #3
 800756a:	e006      	b.n	800757a <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	691b      	ldr	r3, [r3, #16]
 8007570:	f003 0310 	and.w	r3, r3, #16
 8007574:	2b10      	cmp	r3, #16
 8007576:	d0f0      	beq.n	800755a <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007578:	2300      	movs	r3, #0
}
 800757a:	4618      	mov	r0, r3
 800757c:	3714      	adds	r7, #20
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr

08007586 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8007586:	b480      	push	{r7}
 8007588:	b08b      	sub	sp, #44	@ 0x2c
 800758a:	af00      	add	r7, sp, #0
 800758c:	60f8      	str	r0, [r7, #12]
 800758e:	60b9      	str	r1, [r7, #8]
 8007590:	4613      	mov	r3, r2
 8007592:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800759c:	88fb      	ldrh	r3, [r7, #6]
 800759e:	089b      	lsrs	r3, r3, #2
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80075a4:	88fb      	ldrh	r3, [r7, #6]
 80075a6:	f003 0303 	and.w	r3, r3, #3
 80075aa:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80075ac:	2300      	movs	r3, #0
 80075ae:	623b      	str	r3, [r7, #32]
 80075b0:	e014      	b.n	80075dc <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80075b2:	69bb      	ldr	r3, [r7, #24]
 80075b4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075b8:	681a      	ldr	r2, [r3, #0]
 80075ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075bc:	601a      	str	r2, [r3, #0]
    pDest++;
 80075be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c0:	3301      	adds	r3, #1
 80075c2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80075c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c6:	3301      	adds	r3, #1
 80075c8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80075ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075cc:	3301      	adds	r3, #1
 80075ce:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80075d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d2:	3301      	adds	r3, #1
 80075d4:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80075d6:	6a3b      	ldr	r3, [r7, #32]
 80075d8:	3301      	adds	r3, #1
 80075da:	623b      	str	r3, [r7, #32]
 80075dc:	6a3a      	ldr	r2, [r7, #32]
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	429a      	cmp	r2, r3
 80075e2:	d3e6      	bcc.n	80075b2 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80075e4:	8bfb      	ldrh	r3, [r7, #30]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d01e      	beq.n	8007628 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80075ea:	2300      	movs	r3, #0
 80075ec:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80075ee:	69bb      	ldr	r3, [r7, #24]
 80075f0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075f4:	461a      	mov	r2, r3
 80075f6:	f107 0310 	add.w	r3, r7, #16
 80075fa:	6812      	ldr	r2, [r2, #0]
 80075fc:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80075fe:	693a      	ldr	r2, [r7, #16]
 8007600:	6a3b      	ldr	r3, [r7, #32]
 8007602:	b2db      	uxtb	r3, r3
 8007604:	00db      	lsls	r3, r3, #3
 8007606:	fa22 f303 	lsr.w	r3, r2, r3
 800760a:	b2da      	uxtb	r2, r3
 800760c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760e:	701a      	strb	r2, [r3, #0]
      i++;
 8007610:	6a3b      	ldr	r3, [r7, #32]
 8007612:	3301      	adds	r3, #1
 8007614:	623b      	str	r3, [r7, #32]
      pDest++;
 8007616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007618:	3301      	adds	r3, #1
 800761a:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800761c:	8bfb      	ldrh	r3, [r7, #30]
 800761e:	3b01      	subs	r3, #1
 8007620:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007622:	8bfb      	ldrh	r3, [r7, #30]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d1ea      	bne.n	80075fe <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800762a:	4618      	mov	r0, r3
 800762c:	372c      	adds	r7, #44	@ 0x2c
 800762e:	46bd      	mov	sp, r7
 8007630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007634:	4770      	bx	lr

08007636 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007636:	b480      	push	{r7}
 8007638:	b085      	sub	sp, #20
 800763a:	af00      	add	r7, sp, #0
 800763c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	699b      	ldr	r3, [r3, #24]
 8007648:	68fa      	ldr	r2, [r7, #12]
 800764a:	4013      	ands	r3, r2
 800764c:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800764e:	68fb      	ldr	r3, [r7, #12]
}
 8007650:	4618      	mov	r0, r3
 8007652:	3714      	adds	r7, #20
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr

0800765c <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800765c:	b480      	push	{r7}
 800765e:	b085      	sub	sp, #20
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
 8007664:	460b      	mov	r3, r1
 8007666:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800766c:	78fb      	ldrb	r3, [r7, #3]
 800766e:	015a      	lsls	r2, r3, #5
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	4413      	add	r3, r2
 8007674:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800767c:	78fb      	ldrb	r3, [r7, #3]
 800767e:	015a      	lsls	r2, r3, #5
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	4413      	add	r3, r2
 8007684:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007688:	68db      	ldr	r3, [r3, #12]
 800768a:	68ba      	ldr	r2, [r7, #8]
 800768c:	4013      	ands	r3, r2
 800768e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007690:	68bb      	ldr	r3, [r7, #8]
}
 8007692:	4618      	mov	r0, r3
 8007694:	3714      	adds	r7, #20
 8007696:	46bd      	mov	sp, r7
 8007698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769c:	4770      	bx	lr

0800769e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800769e:	b480      	push	{r7}
 80076a0:	b083      	sub	sp, #12
 80076a2:	af00      	add	r7, sp, #0
 80076a4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	695b      	ldr	r3, [r3, #20]
 80076aa:	f003 0301 	and.w	r3, r3, #1
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	370c      	adds	r7, #12
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr

080076ba <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80076ba:	b480      	push	{r7}
 80076bc:	b085      	sub	sp, #20
 80076be:	af00      	add	r7, sp, #0
 80076c0:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80076c2:	2300      	movs	r3, #0
 80076c4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	3301      	adds	r3, #1
 80076ca:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076d2:	d901      	bls.n	80076d8 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80076d4:	2303      	movs	r3, #3
 80076d6:	e01b      	b.n	8007710 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	691b      	ldr	r3, [r3, #16]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	daf2      	bge.n	80076c6 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80076e0:	2300      	movs	r3, #0
 80076e2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	691b      	ldr	r3, [r3, #16]
 80076e8:	f043 0201 	orr.w	r2, r3, #1
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	3301      	adds	r3, #1
 80076f4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076fc:	d901      	bls.n	8007702 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80076fe:	2303      	movs	r3, #3
 8007700:	e006      	b.n	8007710 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	691b      	ldr	r3, [r3, #16]
 8007706:	f003 0301 	and.w	r3, r3, #1
 800770a:	2b01      	cmp	r3, #1
 800770c:	d0f0      	beq.n	80076f0 <USB_CoreReset+0x36>

  return HAL_OK;
 800770e:	2300      	movs	r3, #0
}
 8007710:	4618      	mov	r0, r3
 8007712:	3714      	adds	r7, #20
 8007714:	46bd      	mov	sp, r7
 8007716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771a:	4770      	bx	lr

0800771c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800771c:	b084      	sub	sp, #16
 800771e:	b580      	push	{r7, lr}
 8007720:	b086      	sub	sp, #24
 8007722:	af00      	add	r7, sp, #0
 8007724:	6078      	str	r0, [r7, #4]
 8007726:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800772a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800772e:	2300      	movs	r3, #0
 8007730:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800773c:	461a      	mov	r2, r3
 800773e:	2300      	movs	r3, #0
 8007740:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007746:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007752:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800775e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	68db      	ldr	r3, [r3, #12]
 800776a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800776e:	2b00      	cmp	r3, #0
 8007770:	d119      	bne.n	80077a6 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007772:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007776:	2b01      	cmp	r3, #1
 8007778:	d10a      	bne.n	8007790 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68fa      	ldr	r2, [r7, #12]
 8007784:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007788:	f043 0304 	orr.w	r3, r3, #4
 800778c:	6013      	str	r3, [r2, #0]
 800778e:	e014      	b.n	80077ba <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	68fa      	ldr	r2, [r7, #12]
 800779a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800779e:	f023 0304 	bic.w	r3, r3, #4
 80077a2:	6013      	str	r3, [r2, #0]
 80077a4:	e009      	b.n	80077ba <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68fa      	ldr	r2, [r7, #12]
 80077b0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80077b4:	f023 0304 	bic.w	r3, r3, #4
 80077b8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80077ba:	2110      	movs	r1, #16
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f7ff fe82 	bl	80074c6 <USB_FlushTxFifo>
 80077c2:	4603      	mov	r3, r0
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d001      	beq.n	80077cc <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80077c8:	2301      	movs	r3, #1
 80077ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f7ff feac 	bl	800752a <USB_FlushRxFifo>
 80077d2:	4603      	mov	r3, r0
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d001      	beq.n	80077dc <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80077d8:	2301      	movs	r3, #1
 80077da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80077dc:	2300      	movs	r3, #0
 80077de:	613b      	str	r3, [r7, #16]
 80077e0:	e015      	b.n	800780e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	015a      	lsls	r2, r3, #5
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	4413      	add	r3, r2
 80077ea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077ee:	461a      	mov	r2, r3
 80077f0:	f04f 33ff 	mov.w	r3, #4294967295
 80077f4:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	015a      	lsls	r2, r3, #5
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	4413      	add	r3, r2
 80077fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007802:	461a      	mov	r2, r3
 8007804:	2300      	movs	r3, #0
 8007806:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	3301      	adds	r3, #1
 800780c:	613b      	str	r3, [r7, #16]
 800780e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007812:	461a      	mov	r2, r3
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	4293      	cmp	r3, r2
 8007818:	d3e3      	bcc.n	80077e2 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	2200      	movs	r2, #0
 800781e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f04f 32ff 	mov.w	r2, #4294967295
 8007826:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a18      	ldr	r2, [pc, #96]	@ (800788c <USB_HostInit+0x170>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d10b      	bne.n	8007848 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007836:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4a15      	ldr	r2, [pc, #84]	@ (8007890 <USB_HostInit+0x174>)
 800783c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	4a14      	ldr	r2, [pc, #80]	@ (8007894 <USB_HostInit+0x178>)
 8007842:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8007846:	e009      	b.n	800785c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	2280      	movs	r2, #128	@ 0x80
 800784c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	4a11      	ldr	r2, [pc, #68]	@ (8007898 <USB_HostInit+0x17c>)
 8007852:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	4a11      	ldr	r2, [pc, #68]	@ (800789c <USB_HostInit+0x180>)
 8007858:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800785c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007860:	2b00      	cmp	r3, #0
 8007862:	d105      	bne.n	8007870 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	699b      	ldr	r3, [r3, #24]
 8007868:	f043 0210 	orr.w	r2, r3, #16
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	699a      	ldr	r2, [r3, #24]
 8007874:	4b0a      	ldr	r3, [pc, #40]	@ (80078a0 <USB_HostInit+0x184>)
 8007876:	4313      	orrs	r3, r2
 8007878:	687a      	ldr	r2, [r7, #4]
 800787a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800787c:	7dfb      	ldrb	r3, [r7, #23]
}
 800787e:	4618      	mov	r0, r3
 8007880:	3718      	adds	r7, #24
 8007882:	46bd      	mov	sp, r7
 8007884:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007888:	b004      	add	sp, #16
 800788a:	4770      	bx	lr
 800788c:	40040000 	.word	0x40040000
 8007890:	01000200 	.word	0x01000200
 8007894:	00e00300 	.word	0x00e00300
 8007898:	00600080 	.word	0x00600080
 800789c:	004000e0 	.word	0x004000e0
 80078a0:	a3200008 	.word	0xa3200008

080078a4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	460b      	mov	r3, r1
 80078ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	68fa      	ldr	r2, [r7, #12]
 80078be:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80078c2:	f023 0303 	bic.w	r3, r3, #3
 80078c6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	78fb      	ldrb	r3, [r7, #3]
 80078d2:	f003 0303 	and.w	r3, r3, #3
 80078d6:	68f9      	ldr	r1, [r7, #12]
 80078d8:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80078dc:	4313      	orrs	r3, r2
 80078de:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80078e0:	78fb      	ldrb	r3, [r7, #3]
 80078e2:	2b01      	cmp	r3, #1
 80078e4:	d107      	bne.n	80078f6 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078ec:	461a      	mov	r2, r3
 80078ee:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80078f2:	6053      	str	r3, [r2, #4]
 80078f4:	e00c      	b.n	8007910 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80078f6:	78fb      	ldrb	r3, [r7, #3]
 80078f8:	2b02      	cmp	r3, #2
 80078fa:	d107      	bne.n	800790c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007902:	461a      	mov	r2, r3
 8007904:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007908:	6053      	str	r3, [r2, #4]
 800790a:	e001      	b.n	8007910 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e000      	b.n	8007912 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3714      	adds	r7, #20
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr

0800791e <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800791e:	b480      	push	{r7}
 8007920:	b085      	sub	sp, #20
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007930:	695b      	ldr	r3, [r3, #20]
 8007932:	b29b      	uxth	r3, r3
}
 8007934:	4618      	mov	r0, r3
 8007936:	3714      	adds	r7, #20
 8007938:	46bd      	mov	sp, r7
 800793a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800793e:	4770      	bx	lr

08007940 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007940:	b480      	push	{r7}
 8007942:	b089      	sub	sp, #36	@ 0x24
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	460b      	mov	r3, r1
 800794a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007950:	78fb      	ldrb	r3, [r7, #3]
 8007952:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007954:	2300      	movs	r3, #0
 8007956:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	015a      	lsls	r2, r3, #5
 800795c:	69fb      	ldr	r3, [r7, #28]
 800795e:	4413      	add	r3, r2
 8007960:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	0c9b      	lsrs	r3, r3, #18
 8007968:	f003 0303 	and.w	r3, r3, #3
 800796c:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800796e:	69bb      	ldr	r3, [r7, #24]
 8007970:	015a      	lsls	r2, r3, #5
 8007972:	69fb      	ldr	r3, [r7, #28]
 8007974:	4413      	add	r3, r2
 8007976:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	0fdb      	lsrs	r3, r3, #31
 800797e:	f003 0301 	and.w	r3, r3, #1
 8007982:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007984:	69bb      	ldr	r3, [r7, #24]
 8007986:	015a      	lsls	r2, r3, #5
 8007988:	69fb      	ldr	r3, [r7, #28]
 800798a:	4413      	add	r3, r2
 800798c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	0fdb      	lsrs	r3, r3, #31
 8007994:	f003 0301 	and.w	r3, r3, #1
 8007998:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	689b      	ldr	r3, [r3, #8]
 800799e:	f003 0320 	and.w	r3, r3, #32
 80079a2:	2b20      	cmp	r3, #32
 80079a4:	d10d      	bne.n	80079c2 <USB_HC_Halt+0x82>
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d10a      	bne.n	80079c2 <USB_HC_Halt+0x82>
 80079ac:	693b      	ldr	r3, [r7, #16]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d005      	beq.n	80079be <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 80079b2:	697b      	ldr	r3, [r7, #20]
 80079b4:	2b01      	cmp	r3, #1
 80079b6:	d002      	beq.n	80079be <USB_HC_Halt+0x7e>
 80079b8:	697b      	ldr	r3, [r7, #20]
 80079ba:	2b03      	cmp	r3, #3
 80079bc:	d101      	bne.n	80079c2 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 80079be:	2300      	movs	r3, #0
 80079c0:	e0d8      	b.n	8007b74 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80079c2:	697b      	ldr	r3, [r7, #20]
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d002      	beq.n	80079ce <USB_HC_Halt+0x8e>
 80079c8:	697b      	ldr	r3, [r7, #20]
 80079ca:	2b02      	cmp	r3, #2
 80079cc:	d173      	bne.n	8007ab6 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80079ce:	69bb      	ldr	r3, [r7, #24]
 80079d0:	015a      	lsls	r2, r3, #5
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	4413      	add	r3, r2
 80079d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	69ba      	ldr	r2, [r7, #24]
 80079de:	0151      	lsls	r1, r2, #5
 80079e0:	69fa      	ldr	r2, [r7, #28]
 80079e2:	440a      	add	r2, r1
 80079e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80079ec:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	f003 0320 	and.w	r3, r3, #32
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d14a      	bne.n	8007a90 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079fe:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d133      	bne.n	8007a6e <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007a06:	69bb      	ldr	r3, [r7, #24]
 8007a08:	015a      	lsls	r2, r3, #5
 8007a0a:	69fb      	ldr	r3, [r7, #28]
 8007a0c:	4413      	add	r3, r2
 8007a0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	69ba      	ldr	r2, [r7, #24]
 8007a16:	0151      	lsls	r1, r2, #5
 8007a18:	69fa      	ldr	r2, [r7, #28]
 8007a1a:	440a      	add	r2, r1
 8007a1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a20:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007a24:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	015a      	lsls	r2, r3, #5
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	69ba      	ldr	r2, [r7, #24]
 8007a36:	0151      	lsls	r1, r2, #5
 8007a38:	69fa      	ldr	r2, [r7, #28]
 8007a3a:	440a      	add	r2, r1
 8007a3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a40:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007a44:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a52:	d82e      	bhi.n	8007ab2 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007a54:	69bb      	ldr	r3, [r7, #24]
 8007a56:	015a      	lsls	r2, r3, #5
 8007a58:	69fb      	ldr	r3, [r7, #28]
 8007a5a:	4413      	add	r3, r2
 8007a5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a6a:	d0ec      	beq.n	8007a46 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a6c:	e081      	b.n	8007b72 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	015a      	lsls	r2, r3, #5
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	4413      	add	r3, r2
 8007a76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	69ba      	ldr	r2, [r7, #24]
 8007a7e:	0151      	lsls	r1, r2, #5
 8007a80:	69fa      	ldr	r2, [r7, #28]
 8007a82:	440a      	add	r2, r1
 8007a84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a88:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007a8c:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a8e:	e070      	b.n	8007b72 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	015a      	lsls	r2, r3, #5
 8007a94:	69fb      	ldr	r3, [r7, #28]
 8007a96:	4413      	add	r3, r2
 8007a98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	69ba      	ldr	r2, [r7, #24]
 8007aa0:	0151      	lsls	r1, r2, #5
 8007aa2:	69fa      	ldr	r2, [r7, #28]
 8007aa4:	440a      	add	r2, r1
 8007aa6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007aaa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007aae:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ab0:	e05f      	b.n	8007b72 <USB_HC_Halt+0x232>
            break;
 8007ab2:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ab4:	e05d      	b.n	8007b72 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	015a      	lsls	r2, r3, #5
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	4413      	add	r3, r2
 8007abe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	69ba      	ldr	r2, [r7, #24]
 8007ac6:	0151      	lsls	r1, r2, #5
 8007ac8:	69fa      	ldr	r2, [r7, #28]
 8007aca:	440a      	add	r2, r1
 8007acc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ad0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ad4:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007ad6:	69fb      	ldr	r3, [r7, #28]
 8007ad8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007adc:	691b      	ldr	r3, [r3, #16]
 8007ade:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d133      	bne.n	8007b4e <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007ae6:	69bb      	ldr	r3, [r7, #24]
 8007ae8:	015a      	lsls	r2, r3, #5
 8007aea:	69fb      	ldr	r3, [r7, #28]
 8007aec:	4413      	add	r3, r2
 8007aee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	69ba      	ldr	r2, [r7, #24]
 8007af6:	0151      	lsls	r1, r2, #5
 8007af8:	69fa      	ldr	r2, [r7, #28]
 8007afa:	440a      	add	r2, r1
 8007afc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b00:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007b04:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	015a      	lsls	r2, r3, #5
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	69ba      	ldr	r2, [r7, #24]
 8007b16:	0151      	lsls	r1, r2, #5
 8007b18:	69fa      	ldr	r2, [r7, #28]
 8007b1a:	440a      	add	r2, r1
 8007b1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b20:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b24:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007b26:	68bb      	ldr	r3, [r7, #8]
 8007b28:	3301      	adds	r3, #1
 8007b2a:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007b32:	d81d      	bhi.n	8007b70 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007b34:	69bb      	ldr	r3, [r7, #24]
 8007b36:	015a      	lsls	r2, r3, #5
 8007b38:	69fb      	ldr	r3, [r7, #28]
 8007b3a:	4413      	add	r3, r2
 8007b3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b46:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b4a:	d0ec      	beq.n	8007b26 <USB_HC_Halt+0x1e6>
 8007b4c:	e011      	b.n	8007b72 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b4e:	69bb      	ldr	r3, [r7, #24]
 8007b50:	015a      	lsls	r2, r3, #5
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	4413      	add	r3, r2
 8007b56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	69ba      	ldr	r2, [r7, #24]
 8007b5e:	0151      	lsls	r1, r2, #5
 8007b60:	69fa      	ldr	r2, [r7, #28]
 8007b62:	440a      	add	r2, r1
 8007b64:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b68:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b6c:	6013      	str	r3, [r2, #0]
 8007b6e:	e000      	b.n	8007b72 <USB_HC_Halt+0x232>
          break;
 8007b70:	bf00      	nop
    }
  }

  return HAL_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3724      	adds	r7, #36	@ 0x24
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <memset>:
 8007b80:	4402      	add	r2, r0
 8007b82:	4603      	mov	r3, r0
 8007b84:	4293      	cmp	r3, r2
 8007b86:	d100      	bne.n	8007b8a <memset+0xa>
 8007b88:	4770      	bx	lr
 8007b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8007b8e:	e7f9      	b.n	8007b84 <memset+0x4>

08007b90 <__libc_init_array>:
 8007b90:	b570      	push	{r4, r5, r6, lr}
 8007b92:	4d0d      	ldr	r5, [pc, #52]	@ (8007bc8 <__libc_init_array+0x38>)
 8007b94:	4c0d      	ldr	r4, [pc, #52]	@ (8007bcc <__libc_init_array+0x3c>)
 8007b96:	1b64      	subs	r4, r4, r5
 8007b98:	10a4      	asrs	r4, r4, #2
 8007b9a:	2600      	movs	r6, #0
 8007b9c:	42a6      	cmp	r6, r4
 8007b9e:	d109      	bne.n	8007bb4 <__libc_init_array+0x24>
 8007ba0:	4d0b      	ldr	r5, [pc, #44]	@ (8007bd0 <__libc_init_array+0x40>)
 8007ba2:	4c0c      	ldr	r4, [pc, #48]	@ (8007bd4 <__libc_init_array+0x44>)
 8007ba4:	f000 f818 	bl	8007bd8 <_init>
 8007ba8:	1b64      	subs	r4, r4, r5
 8007baa:	10a4      	asrs	r4, r4, #2
 8007bac:	2600      	movs	r6, #0
 8007bae:	42a6      	cmp	r6, r4
 8007bb0:	d105      	bne.n	8007bbe <__libc_init_array+0x2e>
 8007bb2:	bd70      	pop	{r4, r5, r6, pc}
 8007bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bb8:	4798      	blx	r3
 8007bba:	3601      	adds	r6, #1
 8007bbc:	e7ee      	b.n	8007b9c <__libc_init_array+0xc>
 8007bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8007bc2:	4798      	blx	r3
 8007bc4:	3601      	adds	r6, #1
 8007bc6:	e7f2      	b.n	8007bae <__libc_init_array+0x1e>
 8007bc8:	08007c10 	.word	0x08007c10
 8007bcc:	08007c10 	.word	0x08007c10
 8007bd0:	08007c10 	.word	0x08007c10
 8007bd4:	08007c14 	.word	0x08007c14

08007bd8 <_init>:
 8007bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007bda:	bf00      	nop
 8007bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bde:	bc08      	pop	{r3}
 8007be0:	469e      	mov	lr, r3
 8007be2:	4770      	bx	lr

08007be4 <_fini>:
 8007be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007be6:	bf00      	nop
 8007be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007bea:	bc08      	pop	{r3}
 8007bec:	469e      	mov	lr, r3
 8007bee:	4770      	bx	lr
