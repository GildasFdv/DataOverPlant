
data-over-plant-v3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079fc  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08007ba8  08007ba8  00008ba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bc0  08007bc0  00009010  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08007bc0  08007bc0  00008bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bc8  08007bc8  00009010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bc8  08007bc8  00008bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007bcc  08007bcc  00008bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000010  20000000  08007bd0  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00009010  2**0
                  CONTENTS
 10 .bss          000006ac  20000010  20000010  00009010  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200006bc  200006bc  00009010  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00009010  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c064  00000000  00000000  00009040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000378d  00000000  00000000  000250a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001998  00000000  00000000  00028838  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000140c  00000000  00000000  0002a1d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000272e7  00000000  00000000  0002b5dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ef06  00000000  00000000  000528c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8a77  00000000  00000000  000717c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015a240  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006e7c  00000000  00000000  0015a284  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006e  00000000  00000000  00161100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000010 	.word	0x20000010
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08007b90 	.word	0x08007b90

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000014 	.word	0x20000014
 80001e8:	08007b90 	.word	0x08007b90

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <set_led3>:
#include "led.h"
#include "main.h"


void set_led3()
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_SET);
 800051c:	2201      	movs	r2, #1
 800051e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000522:	4802      	ldr	r0, [pc, #8]	@ (800052c <set_led3+0x14>)
 8000524:	f001 fee8 	bl	80022f8 <HAL_GPIO_WritePin>
}
 8000528:	bf00      	nop
 800052a:	bd80      	pop	{r7, pc}
 800052c:	40021800 	.word	0x40021800

08000530 <reset_led3>:

void reset_led3()
{
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, LD3_Pin, GPIO_PIN_RESET);
 8000534:	2200      	movs	r2, #0
 8000536:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800053a:	4802      	ldr	r0, [pc, #8]	@ (8000544 <reset_led3+0x14>)
 800053c:	f001 fedc 	bl	80022f8 <HAL_GPIO_WritePin>
}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}
 8000544:	40021800 	.word	0x40021800

08000548 <reset_led4>:
{
	HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_SET);
}

void reset_led4()
{
 8000548:	b580      	push	{r7, lr}
 800054a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOG, LD4_Pin, GPIO_PIN_RESET);
 800054c:	2200      	movs	r2, #0
 800054e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000552:	4802      	ldr	r0, [pc, #8]	@ (800055c <reset_led4+0x14>)
 8000554:	f001 fed0 	bl	80022f8 <HAL_GPIO_WritePin>
}
 8000558:	bf00      	nop
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40021800 	.word	0x40021800

08000560 <init_lora_transmitter>:
 */

#include "lora.h"

void init_lora_transmitter()
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b082      	sub	sp, #8
 8000564:	af00      	add	r7, sp, #0
	// Mettre en veille (obligatoire avant les changements de mode)
	write_register(0x01, 0x80); // Sleep mode + LoRa
 8000566:	2180      	movs	r1, #128	@ 0x80
 8000568:	2001      	movs	r0, #1
 800056a:	f000 f889 	bl	8000680 <write_register>

	// Choisir fréquence (ici pour 868 MHz)
	write_register(0x06, 0xD9); // RegFrfMsb = 868 MHz
 800056e:	21d9      	movs	r1, #217	@ 0xd9
 8000570:	2006      	movs	r0, #6
 8000572:	f000 f885 	bl	8000680 <write_register>
	write_register(0x07, 0x06);
 8000576:	2106      	movs	r1, #6
 8000578:	2007      	movs	r0, #7
 800057a:	f000 f881 	bl	8000680 <write_register>
	write_register(0x08, 0x66);
 800057e:	2166      	movs	r1, #102	@ 0x66
 8000580:	2008      	movs	r0, #8
 8000582:	f000 f87d 	bl	8000680 <write_register>

	// Puissance d’émission (PA_BOOST, 17 dBm)
	//write_register(0x09, 0x8F); // RegPaConfig

	// 0 000 0000
	write_register(0x09, 0x00); // RegPaConfig: PA_SELECT=1 (PA_BOOST), OutputPower=0 (minimum)
 8000586:	2100      	movs	r1, #0
 8000588:	2009      	movs	r0, #9
 800058a:	f000 f879 	bl	8000680 <write_register>

	// Paramètres LoRa (BW=125 kHz, CR=4/5, SF=7)
	write_register(0x1D, 0x72); // RegModemConfig1: BW=125kHz, CR=4/5, explicit header
 800058e:	2172      	movs	r1, #114	@ 0x72
 8000590:	201d      	movs	r0, #29
 8000592:	f000 f875 	bl	8000680 <write_register>
	write_register(0x1E, 0x74); // RegModemConfig2: SF=7, CRC On
 8000596:	2174      	movs	r1, #116	@ 0x74
 8000598:	201e      	movs	r0, #30
 800059a:	f000 f871 	bl	8000680 <write_register>
	write_register(0x26, 0x04); // RegModemConfig3: LowDataRateOptimize=OFF
 800059e:	2104      	movs	r1, #4
 80005a0:	2026      	movs	r0, #38	@ 0x26
 80005a2:	f000 f86d 	bl	8000680 <write_register>

	// Configuration de la FIFO
	write_register(0x0E, 0x80); // RegFifoTxBaseAddr
 80005a6:	2180      	movs	r1, #128	@ 0x80
 80005a8:	200e      	movs	r0, #14
 80005aa:	f000 f869 	bl	8000680 <write_register>
	write_register(0x0D, 0x80); // RegFifoAddrPtr
 80005ae:	2180      	movs	r1, #128	@ 0x80
 80005b0:	200d      	movs	r0, #13
 80005b2:	f000 f865 	bl	8000680 <write_register>
	unsigned char size = 7;
 80005b6:	2307      	movs	r3, #7
 80005b8:	71fb      	strb	r3, [r7, #7]
	write_register(0x22, size); // RegPayloadLength (taille du message)
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	4619      	mov	r1, r3
 80005be:	2022      	movs	r0, #34	@ 0x22
 80005c0:	f000 f85e 	bl	8000680 <write_register>
	/*for (int i = 0; i < size; i++) {
	  write_register(0x00, TX_Buffer[i]); // RegFifo
	}*/

	// Passage en mode émetteur
	write_register(0x01, 0x83); // TX mode + LoRa
 80005c4:	2183      	movs	r1, #131	@ 0x83
 80005c6:	2001      	movs	r0, #1
 80005c8:	f000 f85a 	bl	8000680 <write_register>
}
 80005cc:	bf00      	nop
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}

080005d4 <init_lora>:

    serial_print("Module LoRa initialisé en mode réception\r\n");
}

void init_lora(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
#ifdef TRANSMITTER
	init_lora_transmitter();
 80005d8:	f7ff ffc2 	bl	8000560 <init_lora_transmitter>
#endif
#ifdef RECEIVER
	init_lora_receiver();
#endif
}
 80005dc:	bf00      	nop
 80005de:	bd80      	pop	{r7, pc}

080005e0 <lora_reset>:

void lora_reset(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_RESET);
 80005e4:	2200      	movs	r2, #0
 80005e6:	2108      	movs	r1, #8
 80005e8:	4807      	ldr	r0, [pc, #28]	@ (8000608 <lora_reset+0x28>)
 80005ea:	f001 fe85 	bl	80022f8 <HAL_GPIO_WritePin>
    HAL_Delay(10); // maintenir RESET à 0 pendant 10ms
 80005ee:	200a      	movs	r0, #10
 80005f0:	f001 f9c8 	bl	8001984 <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 80005f4:	2201      	movs	r2, #1
 80005f6:	2108      	movs	r1, #8
 80005f8:	4803      	ldr	r0, [pc, #12]	@ (8000608 <lora_reset+0x28>)
 80005fa:	f001 fe7d 	bl	80022f8 <HAL_GPIO_WritePin>
    HAL_Delay(10); // attendre encore un peu après le relâchement
 80005fe:	200a      	movs	r0, #10
 8000600:	f001 f9c0 	bl	8001984 <HAL_Delay>
}
 8000604:	bf00      	nop
 8000606:	bd80      	pop	{r7, pc}
 8000608:	40020800 	.word	0x40020800

0800060c <lora_version>:

uint8_t lora_version(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
	uint8_t version = read_register(0x42);
 8000612:	2042      	movs	r0, #66	@ 0x42
 8000614:	f000 f85e 	bl	80006d4 <read_register>
 8000618:	4603      	mov	r3, r0
 800061a:	71fb      	strb	r3, [r7, #7]

	return version;
 800061c:	79fb      	ldrb	r3, [r7, #7]
}
 800061e:	4618      	mov	r0, r3
 8000620:	3708      	adds	r7, #8
 8000622:	46bd      	mov	sp, r7
 8000624:	bd80      	pop	{r7, pc}

08000626 <send_lora_packet>:
{
    return (lora_status() & 0x08) != 0; // Vérifie le drapeau TxDone
}

void send_lora_packet(const uint8_t* data, uint8_t size)
{
 8000626:	b580      	push	{r7, lr}
 8000628:	b084      	sub	sp, #16
 800062a:	af00      	add	r7, sp, #0
 800062c:	6078      	str	r0, [r7, #4]
 800062e:	460b      	mov	r3, r1
 8000630:	70fb      	strb	r3, [r7, #3]
    // Mettre en mode veille
    write_register(0x01, 0x81);  // Standby mode + LoRa
 8000632:	2181      	movs	r1, #129	@ 0x81
 8000634:	2001      	movs	r0, #1
 8000636:	f000 f823 	bl	8000680 <write_register>

    // Configurer le pointeur FIFO pour l'écriture
    write_register(0x0D, 0x80);  // RegFifoAddrPtr
 800063a:	2180      	movs	r1, #128	@ 0x80
 800063c:	200d      	movs	r0, #13
 800063e:	f000 f81f 	bl	8000680 <write_register>

    // Écrire les données dans la FIFO
    for (int i = 0; i < size; i++) {
 8000642:	2300      	movs	r3, #0
 8000644:	60fb      	str	r3, [r7, #12]
 8000646:	e00a      	b.n	800065e <send_lora_packet+0x38>
        write_register(0x00, data[i]);  // RegFifo
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	687a      	ldr	r2, [r7, #4]
 800064c:	4413      	add	r3, r2
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	4619      	mov	r1, r3
 8000652:	2000      	movs	r0, #0
 8000654:	f000 f814 	bl	8000680 <write_register>
    for (int i = 0; i < size; i++) {
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	3301      	adds	r3, #1
 800065c:	60fb      	str	r3, [r7, #12]
 800065e:	78fb      	ldrb	r3, [r7, #3]
 8000660:	68fa      	ldr	r2, [r7, #12]
 8000662:	429a      	cmp	r2, r3
 8000664:	dbf0      	blt.n	8000648 <send_lora_packet+0x22>
    }

    // Définir la taille des données
    write_register(0x22, size);  // RegPayloadLength
 8000666:	78fb      	ldrb	r3, [r7, #3]
 8000668:	4619      	mov	r1, r3
 800066a:	2022      	movs	r0, #34	@ 0x22
 800066c:	f000 f808 	bl	8000680 <write_register>

    // Démarrer la transmission
    write_register(0x01, 0x83);  // TX mode + LoRa
 8000670:	2183      	movs	r1, #131	@ 0x83
 8000672:	2001      	movs	r0, #1
 8000674:	f000 f804 	bl	8000680 <write_register>
}
 8000678:	bf00      	nop
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}

08000680 <write_register>:
{
	HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
}

void write_register(uint8_t addr, uint8_t value)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	460a      	mov	r2, r1
 800068a:	71fb      	strb	r3, [r7, #7]
 800068c:	4613      	mov	r3, r2
 800068e:	71bb      	strb	r3, [r7, #6]
    uint8_t data[2];
    data[0] = addr | 0x80; // bit 7 à 1 pour écriture
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000696:	b2db      	uxtb	r3, r3
 8000698:	733b      	strb	r3, [r7, #12]
    data[1] = value;
 800069a:	79bb      	ldrb	r3, [r7, #6]
 800069c:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET); // NSS low
 800069e:	2200      	movs	r2, #0
 80006a0:	2140      	movs	r1, #64	@ 0x40
 80006a2:	480a      	ldr	r0, [pc, #40]	@ (80006cc <write_register+0x4c>)
 80006a4:	f001 fe28 	bl	80022f8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi5, data, 2, HAL_MAX_DELAY);
 80006a8:	f107 010c 	add.w	r1, r7, #12
 80006ac:	f04f 33ff 	mov.w	r3, #4294967295
 80006b0:	2202      	movs	r2, #2
 80006b2:	4807      	ldr	r0, [pc, #28]	@ (80006d0 <write_register+0x50>)
 80006b4:	f005 f8d9 	bl	800586a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);   // NSS high
 80006b8:	2201      	movs	r2, #1
 80006ba:	2140      	movs	r1, #64	@ 0x40
 80006bc:	4803      	ldr	r0, [pc, #12]	@ (80006cc <write_register+0x4c>)
 80006be:	f001 fe1b 	bl	80022f8 <HAL_GPIO_WritePin>
}
 80006c2:	bf00      	nop
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
 80006ca:	bf00      	nop
 80006cc:	40021400 	.word	0x40021400
 80006d0:	20000170 	.word	0x20000170

080006d4 <read_register>:

uint8_t read_register(uint8_t addr)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b084      	sub	sp, #16
 80006d8:	af00      	add	r7, sp, #0
 80006da:	4603      	mov	r3, r0
 80006dc:	71fb      	strb	r3, [r7, #7]
    uint8_t value = 0;
 80006de:	2300      	movs	r3, #0
 80006e0:	73fb      	strb	r3, [r7, #15]
    uint8_t reg_addr = addr & 0x7F; // bit 7 à 0 pour lecture (mask pour s'assurer que le bit 7 est à 0)
 80006e2:	79fb      	ldrb	r3, [r7, #7]
 80006e4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET); // NSS low
 80006ec:	2200      	movs	r2, #0
 80006ee:	2140      	movs	r1, #64	@ 0x40
 80006f0:	480e      	ldr	r0, [pc, #56]	@ (800072c <read_register+0x58>)
 80006f2:	f001 fe01 	bl	80022f8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi5, &reg_addr, 1, HAL_MAX_DELAY); // Envoyer l'adresse du registre
 80006f6:	f107 010e 	add.w	r1, r7, #14
 80006fa:	f04f 33ff 	mov.w	r3, #4294967295
 80006fe:	2201      	movs	r2, #1
 8000700:	480b      	ldr	r0, [pc, #44]	@ (8000730 <read_register+0x5c>)
 8000702:	f005 f8b2 	bl	800586a <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi5, &value, 1, HAL_MAX_DELAY);     // Lire la valeur du registre
 8000706:	f107 010f 	add.w	r1, r7, #15
 800070a:	f04f 33ff 	mov.w	r3, #4294967295
 800070e:	2201      	movs	r2, #1
 8000710:	4807      	ldr	r0, [pc, #28]	@ (8000730 <read_register+0x5c>)
 8000712:	f005 f9ee 	bl	8005af2 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);   // NSS high
 8000716:	2201      	movs	r2, #1
 8000718:	2140      	movs	r1, #64	@ 0x40
 800071a:	4804      	ldr	r0, [pc, #16]	@ (800072c <read_register+0x58>)
 800071c:	f001 fdec 	bl	80022f8 <HAL_GPIO_WritePin>

    return value;
 8000720:	7bfb      	ldrb	r3, [r7, #15]
}
 8000722:	4618      	mov	r0, r3
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	40021400 	.word	0x40021400
 8000730:	20000170 	.word	0x20000170

08000734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800073a:	f001 f8e1 	bl	8001900 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800073e:	f000 f83f 	bl	80007c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000742:	f000 fad9 	bl	8000cf8 <MX_GPIO_Init>
  MX_CRC_Init();
 8000746:	f000 f8a5 	bl	8000894 <MX_CRC_Init>
  MX_DMA2D_Init();
 800074a:	f000 f8b7 	bl	80008bc <MX_DMA2D_Init>
  MX_FMC_Init();
 800074e:	f000 fa83 	bl	8000c58 <MX_FMC_Init>
  MX_I2C3_Init();
 8000752:	f000 f8e5 	bl	8000920 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000756:	f000 f923 	bl	80009a0 <MX_LTDC_Init>
  MX_SPI5_Init();
 800075a:	f000 f9a1 	bl	8000aa0 <MX_SPI5_Init>
  MX_TIM1_Init();
 800075e:	f000 f9d5 	bl	8000b0c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000762:	f000 fa23 	bl	8000bac <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 8000766:	f000 fa4b 	bl	8000c00 <MX_USB_OTG_HS_HCD_Init>
  /* USER CODE BEGIN 2 */
  reset_led4();
 800076a:	f7ff feed 	bl	8000548 <reset_led4>
  reset_led3();
 800076e:	f7ff fedf 	bl	8000530 <reset_led3>

	bool lora_init = false;
 8000772:	2300      	movs	r3, #0
 8000774:	71fb      	strb	r3, [r7, #7]

	while (!lora_init) {
 8000776:	e011      	b.n	800079c <main+0x68>
		lora_reset();
 8000778:	f7ff ff32 	bl	80005e0 <lora_reset>
		HAL_Delay(10);
 800077c:	200a      	movs	r0, #10
 800077e:	f001 f901 	bl	8001984 <HAL_Delay>

		uint8_t version = lora_version();
 8000782:	f7ff ff43 	bl	800060c <lora_version>
 8000786:	4603      	mov	r3, r0
 8000788:	71bb      	strb	r3, [r7, #6]
		if (version == 0x12) {
 800078a:	79bb      	ldrb	r3, [r7, #6]
 800078c:	2b12      	cmp	r3, #18
 800078e:	d105      	bne.n	800079c <main+0x68>
			set_led3();
 8000790:	f7ff fec2 	bl	8000518 <set_led3>
			init_lora();
 8000794:	f7ff ff1e 	bl	80005d4 <init_lora>
			lora_init = true;
 8000798:	2301      	movs	r3, #1
 800079a:	71fb      	strb	r3, [r7, #7]
	while (!lora_init) {
 800079c:	79fb      	ldrb	r3, [r7, #7]
 800079e:	f083 0301 	eor.w	r3, r3, #1
 80007a2:	b2db      	uxtb	r3, r3
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d1e7      	bne.n	8000778 <main+0x44>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
#ifdef TRANSMITTER
	send_lora_packet(TX_Buffer, sizeof(TX_Buffer) - 1);  // Ignorer le zéro terminal
 80007a8:	2101      	movs	r1, #1
 80007aa:	4804      	ldr	r0, [pc, #16]	@ (80007bc <main+0x88>)
 80007ac:	f7ff ff3b 	bl	8000626 <send_lora_packet>
	HAL_Delay(25);
 80007b0:	2019      	movs	r0, #25
 80007b2:	f001 f8e7 	bl	8001984 <HAL_Delay>
	send_lora_packet(TX_Buffer, sizeof(TX_Buffer) - 1);  // Ignorer le zéro terminal
 80007b6:	bf00      	nop
 80007b8:	e7f6      	b.n	80007a8 <main+0x74>
 80007ba:	bf00      	nop
 80007bc:	20000000 	.word	0x20000000

080007c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b094      	sub	sp, #80	@ 0x50
 80007c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c6:	f107 0320 	add.w	r3, r7, #32
 80007ca:	2230      	movs	r2, #48	@ 0x30
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f007 f9b2 	bl	8007b38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e4:	2300      	movs	r3, #0
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	4b28      	ldr	r3, [pc, #160]	@ (800088c <SystemClock_Config+0xcc>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ec:	4a27      	ldr	r2, [pc, #156]	@ (800088c <SystemClock_Config+0xcc>)
 80007ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80007f4:	4b25      	ldr	r3, [pc, #148]	@ (800088c <SystemClock_Config+0xcc>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000800:	2300      	movs	r3, #0
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	4b22      	ldr	r3, [pc, #136]	@ (8000890 <SystemClock_Config+0xd0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800080c:	4a20      	ldr	r2, [pc, #128]	@ (8000890 <SystemClock_Config+0xd0>)
 800080e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000812:	6013      	str	r3, [r2, #0]
 8000814:	4b1e      	ldr	r3, [pc, #120]	@ (8000890 <SystemClock_Config+0xd0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000820:	2301      	movs	r3, #1
 8000822:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000824:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000828:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082a:	2302      	movs	r3, #2
 800082c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000832:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000834:	2304      	movs	r3, #4
 8000836:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000838:	2348      	movs	r3, #72	@ 0x48
 800083a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800083c:	2302      	movs	r3, #2
 800083e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000840:	2303      	movs	r3, #3
 8000842:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000844:	f107 0320 	add.w	r3, r7, #32
 8000848:	4618      	mov	r0, r3
 800084a:	f004 f8c7 	bl	80049dc <HAL_RCC_OscConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000854:	f000 fb86 	bl	8000f64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000858:	230f      	movs	r3, #15
 800085a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085c:	2302      	movs	r3, #2
 800085e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000864:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000868:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	2102      	movs	r1, #2
 8000874:	4618      	mov	r0, r3
 8000876:	f004 fb29 	bl	8004ecc <HAL_RCC_ClockConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000880:	f000 fb70 	bl	8000f64 <Error_Handler>
  }
}
 8000884:	bf00      	nop
 8000886:	3750      	adds	r7, #80	@ 0x50
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40023800 	.word	0x40023800
 8000890:	40007000 	.word	0x40007000

08000894 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <MX_CRC_Init+0x20>)
 800089a:	4a07      	ldr	r2, [pc, #28]	@ (80008b8 <MX_CRC_Init+0x24>)
 800089c:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <MX_CRC_Init+0x20>)
 80008a0:	f001 f976 	bl	8001b90 <HAL_CRC_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80008aa:	f000 fb5b 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	2000002c 	.word	0x2000002c
 80008b8:	40023000 	.word	0x40023000

080008bc <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008c0:	4b15      	ldr	r3, [pc, #84]	@ (8000918 <MX_DMA2D_Init+0x5c>)
 80008c2:	4a16      	ldr	r2, [pc, #88]	@ (800091c <MX_DMA2D_Init+0x60>)
 80008c4:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 80008c6:	4b14      	ldr	r3, [pc, #80]	@ (8000918 <MX_DMA2D_Init+0x5c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 80008cc:	4b12      	ldr	r3, [pc, #72]	@ (8000918 <MX_DMA2D_Init+0x5c>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 80008d2:	4b11      	ldr	r3, [pc, #68]	@ (8000918 <MX_DMA2D_Init+0x5c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80008d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000918 <MX_DMA2D_Init+0x5c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80008de:	4b0e      	ldr	r3, [pc, #56]	@ (8000918 <MX_DMA2D_Init+0x5c>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80008e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000918 <MX_DMA2D_Init+0x5c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80008ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000918 <MX_DMA2D_Init+0x5c>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80008f0:	4809      	ldr	r0, [pc, #36]	@ (8000918 <MX_DMA2D_Init+0x5c>)
 80008f2:	f001 f969 	bl	8001bc8 <HAL_DMA2D_Init>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80008fc:	f000 fb32 	bl	8000f64 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000900:	2101      	movs	r1, #1
 8000902:	4805      	ldr	r0, [pc, #20]	@ (8000918 <MX_DMA2D_Init+0x5c>)
 8000904:	f001 faba 	bl	8001e7c <HAL_DMA2D_ConfigLayer>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800090e:	f000 fb29 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000912:	bf00      	nop
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	20000034 	.word	0x20000034
 800091c:	4002b000 	.word	0x4002b000

08000920 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000924:	4b1b      	ldr	r3, [pc, #108]	@ (8000994 <MX_I2C3_Init+0x74>)
 8000926:	4a1c      	ldr	r2, [pc, #112]	@ (8000998 <MX_I2C3_Init+0x78>)
 8000928:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800092a:	4b1a      	ldr	r3, [pc, #104]	@ (8000994 <MX_I2C3_Init+0x74>)
 800092c:	4a1b      	ldr	r2, [pc, #108]	@ (800099c <MX_I2C3_Init+0x7c>)
 800092e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000930:	4b18      	ldr	r3, [pc, #96]	@ (8000994 <MX_I2C3_Init+0x74>)
 8000932:	2200      	movs	r2, #0
 8000934:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000936:	4b17      	ldr	r3, [pc, #92]	@ (8000994 <MX_I2C3_Init+0x74>)
 8000938:	2200      	movs	r2, #0
 800093a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800093c:	4b15      	ldr	r3, [pc, #84]	@ (8000994 <MX_I2C3_Init+0x74>)
 800093e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000942:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000944:	4b13      	ldr	r3, [pc, #76]	@ (8000994 <MX_I2C3_Init+0x74>)
 8000946:	2200      	movs	r2, #0
 8000948:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 800094a:	4b12      	ldr	r3, [pc, #72]	@ (8000994 <MX_I2C3_Init+0x74>)
 800094c:	2200      	movs	r2, #0
 800094e:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000950:	4b10      	ldr	r3, [pc, #64]	@ (8000994 <MX_I2C3_Init+0x74>)
 8000952:	2200      	movs	r2, #0
 8000954:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000956:	4b0f      	ldr	r3, [pc, #60]	@ (8000994 <MX_I2C3_Init+0x74>)
 8000958:	2200      	movs	r2, #0
 800095a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800095c:	480d      	ldr	r0, [pc, #52]	@ (8000994 <MX_I2C3_Init+0x74>)
 800095e:	f003 fb15 	bl	8003f8c <HAL_I2C_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000968:	f000 fafc 	bl	8000f64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800096c:	2100      	movs	r1, #0
 800096e:	4809      	ldr	r0, [pc, #36]	@ (8000994 <MX_I2C3_Init+0x74>)
 8000970:	f003 fc50 	bl	8004214 <HAL_I2CEx_ConfigAnalogFilter>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d001      	beq.n	800097e <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 800097a:	f000 faf3 	bl	8000f64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800097e:	2100      	movs	r1, #0
 8000980:	4804      	ldr	r0, [pc, #16]	@ (8000994 <MX_I2C3_Init+0x74>)
 8000982:	f003 fc83 	bl	800428c <HAL_I2CEx_ConfigDigitalFilter>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 800098c:	f000 faea 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000990:	bf00      	nop
 8000992:	bd80      	pop	{r7, pc}
 8000994:	20000074 	.word	0x20000074
 8000998:	40005c00 	.word	0x40005c00
 800099c:	000186a0 	.word	0x000186a0

080009a0 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b08e      	sub	sp, #56	@ 0x38
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80009a6:	1d3b      	adds	r3, r7, #4
 80009a8:	2234      	movs	r2, #52	@ 0x34
 80009aa:	2100      	movs	r1, #0
 80009ac:	4618      	mov	r0, r3
 80009ae:	f007 f8c3 	bl	8007b38 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80009b2:	4b39      	ldr	r3, [pc, #228]	@ (8000a98 <MX_LTDC_Init+0xf8>)
 80009b4:	4a39      	ldr	r2, [pc, #228]	@ (8000a9c <MX_LTDC_Init+0xfc>)
 80009b6:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80009b8:	4b37      	ldr	r3, [pc, #220]	@ (8000a98 <MX_LTDC_Init+0xf8>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80009be:	4b36      	ldr	r3, [pc, #216]	@ (8000a98 <MX_LTDC_Init+0xf8>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 80009c4:	4b34      	ldr	r3, [pc, #208]	@ (8000a98 <MX_LTDC_Init+0xf8>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80009ca:	4b33      	ldr	r3, [pc, #204]	@ (8000a98 <MX_LTDC_Init+0xf8>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 80009d0:	4b31      	ldr	r3, [pc, #196]	@ (8000a98 <MX_LTDC_Init+0xf8>)
 80009d2:	2209      	movs	r2, #9
 80009d4:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 80009d6:	4b30      	ldr	r3, [pc, #192]	@ (8000a98 <MX_LTDC_Init+0xf8>)
 80009d8:	2201      	movs	r2, #1
 80009da:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80009dc:	4b2e      	ldr	r3, [pc, #184]	@ (8000a98 <MX_LTDC_Init+0xf8>)
 80009de:	221d      	movs	r2, #29
 80009e0:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80009e2:	4b2d      	ldr	r3, [pc, #180]	@ (8000a98 <MX_LTDC_Init+0xf8>)
 80009e4:	2203      	movs	r2, #3
 80009e6:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80009e8:	4b2b      	ldr	r3, [pc, #172]	@ (8000a98 <MX_LTDC_Init+0xf8>)
 80009ea:	f240 120d 	movw	r2, #269	@ 0x10d
 80009ee:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80009f0:	4b29      	ldr	r3, [pc, #164]	@ (8000a98 <MX_LTDC_Init+0xf8>)
 80009f2:	f240 1243 	movw	r2, #323	@ 0x143
 80009f6:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 80009f8:	4b27      	ldr	r3, [pc, #156]	@ (8000a98 <MX_LTDC_Init+0xf8>)
 80009fa:	f240 1217 	movw	r2, #279	@ 0x117
 80009fe:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000a00:	4b25      	ldr	r3, [pc, #148]	@ (8000a98 <MX_LTDC_Init+0xf8>)
 8000a02:	f240 1247 	movw	r2, #327	@ 0x147
 8000a06:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000a08:	4b23      	ldr	r3, [pc, #140]	@ (8000a98 <MX_LTDC_Init+0xf8>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000a10:	4b21      	ldr	r3, [pc, #132]	@ (8000a98 <MX_LTDC_Init+0xf8>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000a18:	4b1f      	ldr	r3, [pc, #124]	@ (8000a98 <MX_LTDC_Init+0xf8>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000a20:	481d      	ldr	r0, [pc, #116]	@ (8000a98 <MX_LTDC_Init+0xf8>)
 8000a22:	f003 fc73 	bl	800430c <HAL_LTDC_Init>
 8000a26:	4603      	mov	r3, r0
 8000a28:	2b00      	cmp	r3, #0
 8000a2a:	d001      	beq.n	8000a30 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000a2c:	f000 fa9a 	bl	8000f64 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000a34:	23f0      	movs	r3, #240	@ 0xf0
 8000a36:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000a38:	2300      	movs	r3, #0
 8000a3a:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000a3c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a40:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000a42:	2302      	movs	r3, #2
 8000a44:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000a46:	23ff      	movs	r3, #255	@ 0xff
 8000a48:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000a4e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a52:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000a54:	2307      	movs	r3, #7
 8000a56:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000a58:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000a5c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 8000a5e:	23f0      	movs	r3, #240	@ 0xf0
 8000a60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 8000a62:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a66:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000a7a:	1d3b      	adds	r3, r7, #4
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4805      	ldr	r0, [pc, #20]	@ (8000a98 <MX_LTDC_Init+0xf8>)
 8000a82:	f003 fdd5 	bl	8004630 <HAL_LTDC_ConfigLayer>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000a8c:	f000 fa6a 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000a90:	bf00      	nop
 8000a92:	3738      	adds	r7, #56	@ 0x38
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	200000c8 	.word	0x200000c8
 8000a9c:	40016800 	.word	0x40016800

08000aa0 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000aa4:	4b17      	ldr	r3, [pc, #92]	@ (8000b04 <MX_SPI5_Init+0x64>)
 8000aa6:	4a18      	ldr	r2, [pc, #96]	@ (8000b08 <MX_SPI5_Init+0x68>)
 8000aa8:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000aaa:	4b16      	ldr	r3, [pc, #88]	@ (8000b04 <MX_SPI5_Init+0x64>)
 8000aac:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ab0:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000ab2:	4b14      	ldr	r3, [pc, #80]	@ (8000b04 <MX_SPI5_Init+0x64>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ab8:	4b12      	ldr	r3, [pc, #72]	@ (8000b04 <MX_SPI5_Init+0x64>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000abe:	4b11      	ldr	r3, [pc, #68]	@ (8000b04 <MX_SPI5_Init+0x64>)
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b04 <MX_SPI5_Init+0x64>)
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000aca:	4b0e      	ldr	r3, [pc, #56]	@ (8000b04 <MX_SPI5_Init+0x64>)
 8000acc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ad0:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ad2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b04 <MX_SPI5_Init+0x64>)
 8000ad4:	2218      	movs	r2, #24
 8000ad6:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ad8:	4b0a      	ldr	r3, [pc, #40]	@ (8000b04 <MX_SPI5_Init+0x64>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ade:	4b09      	ldr	r3, [pc, #36]	@ (8000b04 <MX_SPI5_Init+0x64>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ae4:	4b07      	ldr	r3, [pc, #28]	@ (8000b04 <MX_SPI5_Init+0x64>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000aea:	4b06      	ldr	r3, [pc, #24]	@ (8000b04 <MX_SPI5_Init+0x64>)
 8000aec:	220a      	movs	r2, #10
 8000aee:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000af0:	4804      	ldr	r0, [pc, #16]	@ (8000b04 <MX_SPI5_Init+0x64>)
 8000af2:	f004 fe31 	bl	8005758 <HAL_SPI_Init>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000afc:	f000 fa32 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000170 	.word	0x20000170
 8000b08:	40015000 	.word	0x40015000

08000b0c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b086      	sub	sp, #24
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b12:	f107 0308 	add.w	r3, r7, #8
 8000b16:	2200      	movs	r2, #0
 8000b18:	601a      	str	r2, [r3, #0]
 8000b1a:	605a      	str	r2, [r3, #4]
 8000b1c:	609a      	str	r2, [r3, #8]
 8000b1e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b20:	463b      	mov	r3, r7
 8000b22:	2200      	movs	r2, #0
 8000b24:	601a      	str	r2, [r3, #0]
 8000b26:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b28:	4b1e      	ldr	r3, [pc, #120]	@ (8000ba4 <MX_TIM1_Init+0x98>)
 8000b2a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ba8 <MX_TIM1_Init+0x9c>)
 8000b2c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ba4 <MX_TIM1_Init+0x98>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b34:	4b1b      	ldr	r3, [pc, #108]	@ (8000ba4 <MX_TIM1_Init+0x98>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ba4 <MX_TIM1_Init+0x98>)
 8000b3c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b40:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b42:	4b18      	ldr	r3, [pc, #96]	@ (8000ba4 <MX_TIM1_Init+0x98>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b48:	4b16      	ldr	r3, [pc, #88]	@ (8000ba4 <MX_TIM1_Init+0x98>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ba4 <MX_TIM1_Init+0x98>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b54:	4813      	ldr	r0, [pc, #76]	@ (8000ba4 <MX_TIM1_Init+0x98>)
 8000b56:	f005 fbd1 	bl	80062fc <HAL_TIM_Base_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000b60:	f000 fa00 	bl	8000f64 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b64:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000b6a:	f107 0308 	add.w	r3, r7, #8
 8000b6e:	4619      	mov	r1, r3
 8000b70:	480c      	ldr	r0, [pc, #48]	@ (8000ba4 <MX_TIM1_Init+0x98>)
 8000b72:	f005 fd73 	bl	800665c <HAL_TIM_ConfigClockSource>
 8000b76:	4603      	mov	r3, r0
 8000b78:	2b00      	cmp	r3, #0
 8000b7a:	d001      	beq.n	8000b80 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000b7c:	f000 f9f2 	bl	8000f64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b80:	2300      	movs	r3, #0
 8000b82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b84:	2300      	movs	r3, #0
 8000b86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b88:	463b      	mov	r3, r7
 8000b8a:	4619      	mov	r1, r3
 8000b8c:	4805      	ldr	r0, [pc, #20]	@ (8000ba4 <MX_TIM1_Init+0x98>)
 8000b8e:	f005 ff9b 	bl	8006ac8 <HAL_TIMEx_MasterConfigSynchronization>
 8000b92:	4603      	mov	r3, r0
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d001      	beq.n	8000b9c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000b98:	f000 f9e4 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b9c:	bf00      	nop
 8000b9e:	3718      	adds	r7, #24
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	bd80      	pop	{r7, pc}
 8000ba4:	200001c8 	.word	0x200001c8
 8000ba8:	40010000 	.word	0x40010000

08000bac <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bb0:	4b11      	ldr	r3, [pc, #68]	@ (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bb2:	4a12      	ldr	r2, [pc, #72]	@ (8000bfc <MX_USART1_UART_Init+0x50>)
 8000bb4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bb6:	4b10      	ldr	r3, [pc, #64]	@ (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bbc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000bca:	4b0b      	ldr	r3, [pc, #44]	@ (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000bd0:	4b09      	ldr	r3, [pc, #36]	@ (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bd2:	220c      	movs	r2, #12
 8000bd4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bd6:	4b08      	ldr	r3, [pc, #32]	@ (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	@ (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000be2:	4805      	ldr	r0, [pc, #20]	@ (8000bf8 <MX_USART1_UART_Init+0x4c>)
 8000be4:	f006 f800 	bl	8006be8 <HAL_UART_Init>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000bee:	f000 f9b9 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	20000210 	.word	0x20000210
 8000bfc:	40011000 	.word	0x40011000

08000c00 <MX_USB_OTG_HS_HCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_HCD_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000c04:	4b12      	ldr	r3, [pc, #72]	@ (8000c50 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000c06:	4a13      	ldr	r2, [pc, #76]	@ (8000c54 <MX_USB_OTG_HS_HCD_Init+0x54>)
 8000c08:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 8000c0a:	4b11      	ldr	r3, [pc, #68]	@ (8000c50 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000c0c:	220c      	movs	r2, #12
 8000c0e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 8000c10:	4b0f      	ldr	r3, [pc, #60]	@ (8000c50 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000c16:	4b0e      	ldr	r3, [pc, #56]	@ (8000c50 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c50 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000c1e:	2202      	movs	r2, #2
 8000c20:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000c22:	4b0b      	ldr	r3, [pc, #44]	@ (8000c50 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000c28:	4b09      	ldr	r3, [pc, #36]	@ (8000c50 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000c2e:	4b08      	ldr	r3, [pc, #32]	@ (8000c50 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000c34:	4b06      	ldr	r3, [pc, #24]	@ (8000c50 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8000c3a:	4805      	ldr	r0, [pc, #20]	@ (8000c50 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000c3c:	f001 fb75 	bl	800232a <HAL_HCD_Init>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_USB_OTG_HS_HCD_Init+0x4a>
  {
    Error_Handler();
 8000c46:	f000 f98d 	bl	8000f64 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20000258 	.word	0x20000258
 8000c54:	40040000 	.word	0x40040000

08000c58 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b088      	sub	sp, #32
 8000c5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000c5e:	1d3b      	adds	r3, r7, #4
 8000c60:	2200      	movs	r2, #0
 8000c62:	601a      	str	r2, [r3, #0]
 8000c64:	605a      	str	r2, [r3, #4]
 8000c66:	609a      	str	r2, [r3, #8]
 8000c68:	60da      	str	r2, [r3, #12]
 8000c6a:	611a      	str	r2, [r3, #16]
 8000c6c:	615a      	str	r2, [r3, #20]
 8000c6e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000c70:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf0 <MX_FMC_Init+0x98>)
 8000c72:	4a20      	ldr	r2, [pc, #128]	@ (8000cf4 <MX_FMC_Init+0x9c>)
 8000c74:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000c76:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf0 <MX_FMC_Init+0x98>)
 8000c78:	2201      	movs	r2, #1
 8000c7a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000c7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf0 <MX_FMC_Init+0x98>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8000c82:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf0 <MX_FMC_Init+0x98>)
 8000c84:	2204      	movs	r2, #4
 8000c86:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000c88:	4b19      	ldr	r3, [pc, #100]	@ (8000cf0 <MX_FMC_Init+0x98>)
 8000c8a:	2210      	movs	r2, #16
 8000c8c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000c8e:	4b18      	ldr	r3, [pc, #96]	@ (8000cf0 <MX_FMC_Init+0x98>)
 8000c90:	2240      	movs	r2, #64	@ 0x40
 8000c92:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000c94:	4b16      	ldr	r3, [pc, #88]	@ (8000cf0 <MX_FMC_Init+0x98>)
 8000c96:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000c9a:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000c9c:	4b14      	ldr	r3, [pc, #80]	@ (8000cf0 <MX_FMC_Init+0x98>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000ca2:	4b13      	ldr	r3, [pc, #76]	@ (8000cf0 <MX_FMC_Init+0x98>)
 8000ca4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000ca8:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000caa:	4b11      	ldr	r3, [pc, #68]	@ (8000cf0 <MX_FMC_Init+0x98>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000cb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000cf0 <MX_FMC_Init+0x98>)
 8000cb2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cb6:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000cb8:	2302      	movs	r3, #2
 8000cba:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000cbc:	2307      	movs	r3, #7
 8000cbe:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000cc0:	2304      	movs	r3, #4
 8000cc2:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000cc4:	2307      	movs	r3, #7
 8000cc6:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000cc8:	2303      	movs	r3, #3
 8000cca:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000cd4:	1d3b      	adds	r3, r7, #4
 8000cd6:	4619      	mov	r1, r3
 8000cd8:	4805      	ldr	r0, [pc, #20]	@ (8000cf0 <MX_FMC_Init+0x98>)
 8000cda:	f004 fd09 	bl	80056f0 <HAL_SDRAM_Init>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d001      	beq.n	8000ce8 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000ce4:	f000 f93e 	bl	8000f64 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000ce8:	bf00      	nop
 8000cea:	3720      	adds	r7, #32
 8000cec:	46bd      	mov	sp, r7
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	20000638 	.word	0x20000638
 8000cf4:	a0000140 	.word	0xa0000140

08000cf8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08e      	sub	sp, #56	@ 0x38
 8000cfc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cfe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d02:	2200      	movs	r2, #0
 8000d04:	601a      	str	r2, [r3, #0]
 8000d06:	605a      	str	r2, [r3, #4]
 8000d08:	609a      	str	r2, [r3, #8]
 8000d0a:	60da      	str	r2, [r3, #12]
 8000d0c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	623b      	str	r3, [r7, #32]
 8000d12:	4b84      	ldr	r3, [pc, #528]	@ (8000f24 <MX_GPIO_Init+0x22c>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	4a83      	ldr	r2, [pc, #524]	@ (8000f24 <MX_GPIO_Init+0x22c>)
 8000d18:	f043 0304 	orr.w	r3, r3, #4
 8000d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1e:	4b81      	ldr	r3, [pc, #516]	@ (8000f24 <MX_GPIO_Init+0x22c>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	f003 0304 	and.w	r3, r3, #4
 8000d26:	623b      	str	r3, [r7, #32]
 8000d28:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61fb      	str	r3, [r7, #28]
 8000d2e:	4b7d      	ldr	r3, [pc, #500]	@ (8000f24 <MX_GPIO_Init+0x22c>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	4a7c      	ldr	r2, [pc, #496]	@ (8000f24 <MX_GPIO_Init+0x22c>)
 8000d34:	f043 0320 	orr.w	r3, r3, #32
 8000d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3a:	4b7a      	ldr	r3, [pc, #488]	@ (8000f24 <MX_GPIO_Init+0x22c>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	f003 0320 	and.w	r3, r3, #32
 8000d42:	61fb      	str	r3, [r7, #28]
 8000d44:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	61bb      	str	r3, [r7, #24]
 8000d4a:	4b76      	ldr	r3, [pc, #472]	@ (8000f24 <MX_GPIO_Init+0x22c>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	4a75      	ldr	r2, [pc, #468]	@ (8000f24 <MX_GPIO_Init+0x22c>)
 8000d50:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d56:	4b73      	ldr	r3, [pc, #460]	@ (8000f24 <MX_GPIO_Init+0x22c>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d5e:	61bb      	str	r3, [r7, #24]
 8000d60:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	617b      	str	r3, [r7, #20]
 8000d66:	4b6f      	ldr	r3, [pc, #444]	@ (8000f24 <MX_GPIO_Init+0x22c>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	4a6e      	ldr	r2, [pc, #440]	@ (8000f24 <MX_GPIO_Init+0x22c>)
 8000d6c:	f043 0301 	orr.w	r3, r3, #1
 8000d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d72:	4b6c      	ldr	r3, [pc, #432]	@ (8000f24 <MX_GPIO_Init+0x22c>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	f003 0301 	and.w	r3, r3, #1
 8000d7a:	617b      	str	r3, [r7, #20]
 8000d7c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
 8000d82:	4b68      	ldr	r3, [pc, #416]	@ (8000f24 <MX_GPIO_Init+0x22c>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	4a67      	ldr	r2, [pc, #412]	@ (8000f24 <MX_GPIO_Init+0x22c>)
 8000d88:	f043 0302 	orr.w	r3, r3, #2
 8000d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8e:	4b65      	ldr	r3, [pc, #404]	@ (8000f24 <MX_GPIO_Init+0x22c>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	f003 0302 	and.w	r3, r3, #2
 8000d96:	613b      	str	r3, [r7, #16]
 8000d98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	4b61      	ldr	r3, [pc, #388]	@ (8000f24 <MX_GPIO_Init+0x22c>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	4a60      	ldr	r2, [pc, #384]	@ (8000f24 <MX_GPIO_Init+0x22c>)
 8000da4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000daa:	4b5e      	ldr	r3, [pc, #376]	@ (8000f24 <MX_GPIO_Init+0x22c>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	60bb      	str	r3, [r7, #8]
 8000dba:	4b5a      	ldr	r3, [pc, #360]	@ (8000f24 <MX_GPIO_Init+0x22c>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	4a59      	ldr	r2, [pc, #356]	@ (8000f24 <MX_GPIO_Init+0x22c>)
 8000dc0:	f043 0310 	orr.w	r3, r3, #16
 8000dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc6:	4b57      	ldr	r3, [pc, #348]	@ (8000f24 <MX_GPIO_Init+0x22c>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	f003 0310 	and.w	r3, r3, #16
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	607b      	str	r3, [r7, #4]
 8000dd6:	4b53      	ldr	r3, [pc, #332]	@ (8000f24 <MX_GPIO_Init+0x22c>)
 8000dd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dda:	4a52      	ldr	r2, [pc, #328]	@ (8000f24 <MX_GPIO_Init+0x22c>)
 8000ddc:	f043 0308 	orr.w	r3, r3, #8
 8000de0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000de2:	4b50      	ldr	r3, [pc, #320]	@ (8000f24 <MX_GPIO_Init+0x22c>)
 8000de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de6:	f003 0308 	and.w	r3, r3, #8
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6, GPIO_PIN_RESET);
 8000dee:	2200      	movs	r2, #0
 8000df0:	2140      	movs	r1, #64	@ 0x40
 8000df2:	484d      	ldr	r0, [pc, #308]	@ (8000f28 <MX_GPIO_Init+0x230>)
 8000df4:	f001 fa80 	bl	80022f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|GPIO_PIN_3|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000df8:	2200      	movs	r2, #0
 8000dfa:	211e      	movs	r1, #30
 8000dfc:	484b      	ldr	r0, [pc, #300]	@ (8000f2c <MX_GPIO_Init+0x234>)
 8000dfe:	f001 fa7b 	bl	80022f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000e02:	2200      	movs	r2, #0
 8000e04:	2180      	movs	r1, #128	@ 0x80
 8000e06:	484a      	ldr	r0, [pc, #296]	@ (8000f30 <MX_GPIO_Init+0x238>)
 8000e08:	f001 fa76 	bl	80022f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000e12:	4848      	ldr	r0, [pc, #288]	@ (8000f34 <MX_GPIO_Init+0x23c>)
 8000e14:	f001 fa70 	bl	80022f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000e1e:	4846      	ldr	r0, [pc, #280]	@ (8000f38 <MX_GPIO_Init+0x240>)
 8000e20:	f001 fa6a 	bl	80022f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000e24:	2340      	movs	r3, #64	@ 0x40
 8000e26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e28:	2301      	movs	r3, #1
 8000e2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e30:	2300      	movs	r3, #0
 8000e32:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000e34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e38:	4619      	mov	r1, r3
 8000e3a:	483b      	ldr	r0, [pc, #236]	@ (8000f28 <MX_GPIO_Init+0x230>)
 8000e3c:	f001 f8b0 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin PC3 OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|GPIO_PIN_3|OTG_FS_PSO_Pin;
 8000e40:	231e      	movs	r3, #30
 8000e42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e44:	2301      	movs	r3, #1
 8000e46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e54:	4619      	mov	r1, r3
 8000e56:	4835      	ldr	r0, [pc, #212]	@ (8000f2c <MX_GPIO_Init+0x234>)
 8000e58:	f001 f8a2 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000e5c:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000e60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e62:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e70:	4619      	mov	r1, r3
 8000e72:	482f      	ldr	r0, [pc, #188]	@ (8000f30 <MX_GPIO_Init+0x238>)
 8000e74:	f001 f894 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000e78:	2380      	movs	r3, #128	@ 0x80
 8000e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e84:	2300      	movs	r3, #0
 8000e86:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000e88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e8c:	4619      	mov	r1, r3
 8000e8e:	4828      	ldr	r0, [pc, #160]	@ (8000f30 <MX_GPIO_Init+0x238>)
 8000e90:	f001 f886 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000e94:	2320      	movs	r3, #32
 8000e96:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e98:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000ea2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	4820      	ldr	r0, [pc, #128]	@ (8000f2c <MX_GPIO_Init+0x234>)
 8000eaa:	f001 f879 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000eae:	2304      	movs	r3, #4
 8000eb0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000eba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ebe:	4619      	mov	r1, r3
 8000ec0:	481e      	ldr	r0, [pc, #120]	@ (8000f3c <MX_GPIO_Init+0x244>)
 8000ec2:	f001 f86d 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000ec6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000eca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000ed4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ed8:	4619      	mov	r1, r3
 8000eda:	4816      	ldr	r0, [pc, #88]	@ (8000f34 <MX_GPIO_Init+0x23c>)
 8000edc:	f001 f860 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000ee0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000ee4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ee6:	2301      	movs	r3, #1
 8000ee8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ef2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	480e      	ldr	r0, [pc, #56]	@ (8000f34 <MX_GPIO_Init+0x23c>)
 8000efa:	f001 f851 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000efe:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000f02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f04:	2301      	movs	r3, #1
 8000f06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f14:	4619      	mov	r1, r3
 8000f16:	4808      	ldr	r0, [pc, #32]	@ (8000f38 <MX_GPIO_Init+0x240>)
 8000f18:	f001 f842 	bl	8001fa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f1c:	bf00      	nop
 8000f1e:	3738      	adds	r7, #56	@ 0x38
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40021400 	.word	0x40021400
 8000f2c:	40020800 	.word	0x40020800
 8000f30:	40020000 	.word	0x40020000
 8000f34:	40020c00 	.word	0x40020c00
 8000f38:	40021800 	.word	0x40021800
 8000f3c:	40020400 	.word	0x40020400

08000f40 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a04      	ldr	r2, [pc, #16]	@ (8000f60 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d101      	bne.n	8000f56 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000f52:	f000 fcf7 	bl	8001944 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f56:	bf00      	nop
 8000f58:	3708      	adds	r7, #8
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	40001000 	.word	0x40001000

08000f64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f68:	b672      	cpsid	i
}
 8000f6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f6c:	bf00      	nop
 8000f6e:	e7fd      	b.n	8000f6c <Error_Handler+0x8>

08000f70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f76:	2300      	movs	r3, #0
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	4b10      	ldr	r3, [pc, #64]	@ (8000fbc <HAL_MspInit+0x4c>)
 8000f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f7e:	4a0f      	ldr	r2, [pc, #60]	@ (8000fbc <HAL_MspInit+0x4c>)
 8000f80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f84:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f86:	4b0d      	ldr	r3, [pc, #52]	@ (8000fbc <HAL_MspInit+0x4c>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f8e:	607b      	str	r3, [r7, #4]
 8000f90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f92:	2300      	movs	r3, #0
 8000f94:	603b      	str	r3, [r7, #0]
 8000f96:	4b09      	ldr	r3, [pc, #36]	@ (8000fbc <HAL_MspInit+0x4c>)
 8000f98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f9a:	4a08      	ldr	r2, [pc, #32]	@ (8000fbc <HAL_MspInit+0x4c>)
 8000f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fa0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fa2:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <HAL_MspInit+0x4c>)
 8000fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000faa:	603b      	str	r3, [r7, #0]
 8000fac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	40023800 	.word	0x40023800

08000fc0 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b085      	sub	sp, #20
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	4a0b      	ldr	r2, [pc, #44]	@ (8000ffc <HAL_CRC_MspInit+0x3c>)
 8000fce:	4293      	cmp	r3, r2
 8000fd0:	d10d      	bne.n	8000fee <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60fb      	str	r3, [r7, #12]
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	@ (8001000 <HAL_CRC_MspInit+0x40>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	4a09      	ldr	r2, [pc, #36]	@ (8001000 <HAL_CRC_MspInit+0x40>)
 8000fdc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fe0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fe2:	4b07      	ldr	r3, [pc, #28]	@ (8001000 <HAL_CRC_MspInit+0x40>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fe6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8000fee:	bf00      	nop
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	40023000 	.word	0x40023000
 8001000:	40023800 	.word	0x40023800

08001004 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	b084      	sub	sp, #16
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	4a0e      	ldr	r2, [pc, #56]	@ (800104c <HAL_DMA2D_MspInit+0x48>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d115      	bne.n	8001042 <HAL_DMA2D_MspInit+0x3e>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001016:	2300      	movs	r3, #0
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	4b0d      	ldr	r3, [pc, #52]	@ (8001050 <HAL_DMA2D_MspInit+0x4c>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800101e:	4a0c      	ldr	r2, [pc, #48]	@ (8001050 <HAL_DMA2D_MspInit+0x4c>)
 8001020:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001024:	6313      	str	r3, [r2, #48]	@ 0x30
 8001026:	4b0a      	ldr	r3, [pc, #40]	@ (8001050 <HAL_DMA2D_MspInit+0x4c>)
 8001028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800102e:	60fb      	str	r3, [r7, #12]
 8001030:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8001032:	2200      	movs	r2, #0
 8001034:	2105      	movs	r1, #5
 8001036:	205a      	movs	r0, #90	@ 0x5a
 8001038:	f000 fd80 	bl	8001b3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800103c:	205a      	movs	r0, #90	@ 0x5a
 800103e:	f000 fd99 	bl	8001b74 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	4002b000 	.word	0x4002b000
 8001050:	40023800 	.word	0x40023800

08001054 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b08a      	sub	sp, #40	@ 0x28
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4a29      	ldr	r2, [pc, #164]	@ (8001118 <HAL_I2C_MspInit+0xc4>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d14b      	bne.n	800110e <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	613b      	str	r3, [r7, #16]
 800107a:	4b28      	ldr	r3, [pc, #160]	@ (800111c <HAL_I2C_MspInit+0xc8>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800107e:	4a27      	ldr	r2, [pc, #156]	@ (800111c <HAL_I2C_MspInit+0xc8>)
 8001080:	f043 0304 	orr.w	r3, r3, #4
 8001084:	6313      	str	r3, [r2, #48]	@ 0x30
 8001086:	4b25      	ldr	r3, [pc, #148]	@ (800111c <HAL_I2C_MspInit+0xc8>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108a:	f003 0304 	and.w	r3, r3, #4
 800108e:	613b      	str	r3, [r7, #16]
 8001090:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	4b21      	ldr	r3, [pc, #132]	@ (800111c <HAL_I2C_MspInit+0xc8>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800109a:	4a20      	ldr	r2, [pc, #128]	@ (800111c <HAL_I2C_MspInit+0xc8>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010a2:	4b1e      	ldr	r3, [pc, #120]	@ (800111c <HAL_I2C_MspInit+0xc8>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 80010ae:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80010b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b4:	2312      	movs	r3, #18
 80010b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010b8:	2301      	movs	r3, #1
 80010ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010bc:	2300      	movs	r3, #0
 80010be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80010c0:	2304      	movs	r3, #4
 80010c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80010c4:	f107 0314 	add.w	r3, r7, #20
 80010c8:	4619      	mov	r1, r3
 80010ca:	4815      	ldr	r0, [pc, #84]	@ (8001120 <HAL_I2C_MspInit+0xcc>)
 80010cc:	f000 ff68 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80010d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010d6:	2312      	movs	r3, #18
 80010d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010da:	2301      	movs	r3, #1
 80010dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010de:	2300      	movs	r3, #0
 80010e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80010e2:	2304      	movs	r3, #4
 80010e4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80010e6:	f107 0314 	add.w	r3, r7, #20
 80010ea:	4619      	mov	r1, r3
 80010ec:	480d      	ldr	r0, [pc, #52]	@ (8001124 <HAL_I2C_MspInit+0xd0>)
 80010ee:	f000 ff57 	bl	8001fa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60bb      	str	r3, [r7, #8]
 80010f6:	4b09      	ldr	r3, [pc, #36]	@ (800111c <HAL_I2C_MspInit+0xc8>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fa:	4a08      	ldr	r2, [pc, #32]	@ (800111c <HAL_I2C_MspInit+0xc8>)
 80010fc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001100:	6413      	str	r3, [r2, #64]	@ 0x40
 8001102:	4b06      	ldr	r3, [pc, #24]	@ (800111c <HAL_I2C_MspInit+0xc8>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001106:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800110a:	60bb      	str	r3, [r7, #8]
 800110c:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 800110e:	bf00      	nop
 8001110:	3728      	adds	r7, #40	@ 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40005c00 	.word	0x40005c00
 800111c:	40023800 	.word	0x40023800
 8001120:	40020800 	.word	0x40020800
 8001124:	40020000 	.word	0x40020000

08001128 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b09a      	sub	sp, #104	@ 0x68
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001130:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001134:	2200      	movs	r2, #0
 8001136:	601a      	str	r2, [r3, #0]
 8001138:	605a      	str	r2, [r3, #4]
 800113a:	609a      	str	r2, [r3, #8]
 800113c:	60da      	str	r2, [r3, #12]
 800113e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001140:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001144:	2230      	movs	r2, #48	@ 0x30
 8001146:	2100      	movs	r1, #0
 8001148:	4618      	mov	r0, r3
 800114a:	f006 fcf5 	bl	8007b38 <memset>
  if(hltdc->Instance==LTDC)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a85      	ldr	r2, [pc, #532]	@ (8001368 <HAL_LTDC_MspInit+0x240>)
 8001154:	4293      	cmp	r3, r2
 8001156:	f040 8102 	bne.w	800135e <HAL_LTDC_MspInit+0x236>

    /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800115a:	2308      	movs	r3, #8
 800115c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800115e:	2332      	movs	r3, #50	@ 0x32
 8001160:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001162:	2302      	movs	r3, #2
 8001164:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001166:	2300      	movs	r3, #0
 8001168:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800116a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800116e:	4618      	mov	r0, r3
 8001170:	f004 f8fe 	bl	8005370 <HAL_RCCEx_PeriphCLKConfig>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800117a:	f7ff fef3 	bl	8000f64 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800117e:	2300      	movs	r3, #0
 8001180:	623b      	str	r3, [r7, #32]
 8001182:	4b7a      	ldr	r3, [pc, #488]	@ (800136c <HAL_LTDC_MspInit+0x244>)
 8001184:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001186:	4a79      	ldr	r2, [pc, #484]	@ (800136c <HAL_LTDC_MspInit+0x244>)
 8001188:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800118c:	6453      	str	r3, [r2, #68]	@ 0x44
 800118e:	4b77      	ldr	r3, [pc, #476]	@ (800136c <HAL_LTDC_MspInit+0x244>)
 8001190:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001192:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001196:	623b      	str	r3, [r7, #32]
 8001198:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800119a:	2300      	movs	r3, #0
 800119c:	61fb      	str	r3, [r7, #28]
 800119e:	4b73      	ldr	r3, [pc, #460]	@ (800136c <HAL_LTDC_MspInit+0x244>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	4a72      	ldr	r2, [pc, #456]	@ (800136c <HAL_LTDC_MspInit+0x244>)
 80011a4:	f043 0320 	orr.w	r3, r3, #32
 80011a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011aa:	4b70      	ldr	r3, [pc, #448]	@ (800136c <HAL_LTDC_MspInit+0x244>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ae:	f003 0320 	and.w	r3, r3, #32
 80011b2:	61fb      	str	r3, [r7, #28]
 80011b4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	2300      	movs	r3, #0
 80011b8:	61bb      	str	r3, [r7, #24]
 80011ba:	4b6c      	ldr	r3, [pc, #432]	@ (800136c <HAL_LTDC_MspInit+0x244>)
 80011bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011be:	4a6b      	ldr	r2, [pc, #428]	@ (800136c <HAL_LTDC_MspInit+0x244>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011c6:	4b69      	ldr	r3, [pc, #420]	@ (800136c <HAL_LTDC_MspInit+0x244>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	61bb      	str	r3, [r7, #24]
 80011d0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d2:	2300      	movs	r3, #0
 80011d4:	617b      	str	r3, [r7, #20]
 80011d6:	4b65      	ldr	r3, [pc, #404]	@ (800136c <HAL_LTDC_MspInit+0x244>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	4a64      	ldr	r2, [pc, #400]	@ (800136c <HAL_LTDC_MspInit+0x244>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e2:	4b62      	ldr	r3, [pc, #392]	@ (800136c <HAL_LTDC_MspInit+0x244>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011e6:	f003 0302 	and.w	r3, r3, #2
 80011ea:	617b      	str	r3, [r7, #20]
 80011ec:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011ee:	2300      	movs	r3, #0
 80011f0:	613b      	str	r3, [r7, #16]
 80011f2:	4b5e      	ldr	r3, [pc, #376]	@ (800136c <HAL_LTDC_MspInit+0x244>)
 80011f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011f6:	4a5d      	ldr	r2, [pc, #372]	@ (800136c <HAL_LTDC_MspInit+0x244>)
 80011f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80011fe:	4b5b      	ldr	r3, [pc, #364]	@ (800136c <HAL_LTDC_MspInit+0x244>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001202:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001206:	613b      	str	r3, [r7, #16]
 8001208:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800120a:	2300      	movs	r3, #0
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	4b57      	ldr	r3, [pc, #348]	@ (800136c <HAL_LTDC_MspInit+0x244>)
 8001210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001212:	4a56      	ldr	r2, [pc, #344]	@ (800136c <HAL_LTDC_MspInit+0x244>)
 8001214:	f043 0304 	orr.w	r3, r3, #4
 8001218:	6313      	str	r3, [r2, #48]	@ 0x30
 800121a:	4b54      	ldr	r3, [pc, #336]	@ (800136c <HAL_LTDC_MspInit+0x244>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800121e:	f003 0304 	and.w	r3, r3, #4
 8001222:	60fb      	str	r3, [r7, #12]
 8001224:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	60bb      	str	r3, [r7, #8]
 800122a:	4b50      	ldr	r3, [pc, #320]	@ (800136c <HAL_LTDC_MspInit+0x244>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800122e:	4a4f      	ldr	r2, [pc, #316]	@ (800136c <HAL_LTDC_MspInit+0x244>)
 8001230:	f043 0308 	orr.w	r3, r3, #8
 8001234:	6313      	str	r3, [r2, #48]	@ 0x30
 8001236:	4b4d      	ldr	r3, [pc, #308]	@ (800136c <HAL_LTDC_MspInit+0x244>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	f003 0308 	and.w	r3, r3, #8
 800123e:	60bb      	str	r3, [r7, #8]
 8001240:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001242:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001246:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001248:	2302      	movs	r3, #2
 800124a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800124c:	2300      	movs	r3, #0
 800124e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001250:	2300      	movs	r3, #0
 8001252:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001254:	230e      	movs	r3, #14
 8001256:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001258:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800125c:	4619      	mov	r1, r3
 800125e:	4844      	ldr	r0, [pc, #272]	@ (8001370 <HAL_LTDC_MspInit+0x248>)
 8001260:	f000 fe9e 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001264:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001268:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126a:	2302      	movs	r3, #2
 800126c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126e:	2300      	movs	r3, #0
 8001270:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001272:	2300      	movs	r3, #0
 8001274:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001276:	230e      	movs	r3, #14
 8001278:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800127e:	4619      	mov	r1, r3
 8001280:	483c      	ldr	r0, [pc, #240]	@ (8001374 <HAL_LTDC_MspInit+0x24c>)
 8001282:	f000 fe8d 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001286:	2303      	movs	r3, #3
 8001288:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800128a:	2302      	movs	r3, #2
 800128c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128e:	2300      	movs	r3, #0
 8001290:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001292:	2300      	movs	r3, #0
 8001294:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001296:	2309      	movs	r3, #9
 8001298:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800129e:	4619      	mov	r1, r3
 80012a0:	4835      	ldr	r0, [pc, #212]	@ (8001378 <HAL_LTDC_MspInit+0x250>)
 80012a2:	f000 fe7d 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80012a6:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80012aa:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ac:	2302      	movs	r3, #2
 80012ae:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2300      	movs	r3, #0
 80012b6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012b8:	230e      	movs	r3, #14
 80012ba:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012bc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012c0:	4619      	mov	r1, r3
 80012c2:	482d      	ldr	r0, [pc, #180]	@ (8001378 <HAL_LTDC_MspInit+0x250>)
 80012c4:	f000 fe6c 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80012c8:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80012cc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ce:	2302      	movs	r3, #2
 80012d0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d2:	2300      	movs	r3, #0
 80012d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d6:	2300      	movs	r3, #0
 80012d8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012da:	230e      	movs	r3, #14
 80012dc:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012de:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012e2:	4619      	mov	r1, r3
 80012e4:	4825      	ldr	r0, [pc, #148]	@ (800137c <HAL_LTDC_MspInit+0x254>)
 80012e6:	f000 fe5b 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80012ea:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80012ee:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f0:	2302      	movs	r3, #2
 80012f2:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f4:	2300      	movs	r3, #0
 80012f6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f8:	2300      	movs	r3, #0
 80012fa:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012fc:	230e      	movs	r3, #14
 80012fe:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001300:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001304:	4619      	mov	r1, r3
 8001306:	481e      	ldr	r0, [pc, #120]	@ (8001380 <HAL_LTDC_MspInit+0x258>)
 8001308:	f000 fe4a 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800130c:	2348      	movs	r3, #72	@ 0x48
 800130e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	2302      	movs	r3, #2
 8001312:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001318:	2300      	movs	r3, #0
 800131a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800131c:	230e      	movs	r3, #14
 800131e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001320:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001324:	4619      	mov	r1, r3
 8001326:	4817      	ldr	r0, [pc, #92]	@ (8001384 <HAL_LTDC_MspInit+0x25c>)
 8001328:	f000 fe3a 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800132c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001330:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001332:	2302      	movs	r3, #2
 8001334:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001336:	2300      	movs	r3, #0
 8001338:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800133a:	2300      	movs	r3, #0
 800133c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800133e:	2309      	movs	r3, #9
 8001340:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001342:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001346:	4619      	mov	r1, r3
 8001348:	480c      	ldr	r0, [pc, #48]	@ (800137c <HAL_LTDC_MspInit+0x254>)
 800134a:	f000 fe29 	bl	8001fa0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800134e:	2200      	movs	r2, #0
 8001350:	2105      	movs	r1, #5
 8001352:	2058      	movs	r0, #88	@ 0x58
 8001354:	f000 fbf2 	bl	8001b3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001358:	2058      	movs	r0, #88	@ 0x58
 800135a:	f000 fc0b 	bl	8001b74 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 800135e:	bf00      	nop
 8001360:	3768      	adds	r7, #104	@ 0x68
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	40016800 	.word	0x40016800
 800136c:	40023800 	.word	0x40023800
 8001370:	40021400 	.word	0x40021400
 8001374:	40020000 	.word	0x40020000
 8001378:	40020400 	.word	0x40020400
 800137c:	40021800 	.word	0x40021800
 8001380:	40020800 	.word	0x40020800
 8001384:	40020c00 	.word	0x40020c00

08001388 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08a      	sub	sp, #40	@ 0x28
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001390:	f107 0314 	add.w	r3, r7, #20
 8001394:	2200      	movs	r2, #0
 8001396:	601a      	str	r2, [r3, #0]
 8001398:	605a      	str	r2, [r3, #4]
 800139a:	609a      	str	r2, [r3, #8]
 800139c:	60da      	str	r2, [r3, #12]
 800139e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a19      	ldr	r2, [pc, #100]	@ (800140c <HAL_SPI_MspInit+0x84>)
 80013a6:	4293      	cmp	r3, r2
 80013a8:	d12c      	bne.n	8001404 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI5_MspInit 0 */

    /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	613b      	str	r3, [r7, #16]
 80013ae:	4b18      	ldr	r3, [pc, #96]	@ (8001410 <HAL_SPI_MspInit+0x88>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b2:	4a17      	ldr	r2, [pc, #92]	@ (8001410 <HAL_SPI_MspInit+0x88>)
 80013b4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80013b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ba:	4b15      	ldr	r3, [pc, #84]	@ (8001410 <HAL_SPI_MspInit+0x88>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013c2:	613b      	str	r3, [r7, #16]
 80013c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	60fb      	str	r3, [r7, #12]
 80013ca:	4b11      	ldr	r3, [pc, #68]	@ (8001410 <HAL_SPI_MspInit+0x88>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	4a10      	ldr	r2, [pc, #64]	@ (8001410 <HAL_SPI_MspInit+0x88>)
 80013d0:	f043 0320 	orr.w	r3, r3, #32
 80013d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001410 <HAL_SPI_MspInit+0x88>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013da:	f003 0320 	and.w	r3, r3, #32
 80013de:	60fb      	str	r3, [r7, #12]
 80013e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80013e2:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80013e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e8:	2302      	movs	r3, #2
 80013ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f0:	2300      	movs	r3, #0
 80013f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80013f4:	2305      	movs	r3, #5
 80013f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013f8:	f107 0314 	add.w	r3, r7, #20
 80013fc:	4619      	mov	r1, r3
 80013fe:	4805      	ldr	r0, [pc, #20]	@ (8001414 <HAL_SPI_MspInit+0x8c>)
 8001400:	f000 fdce 	bl	8001fa0 <HAL_GPIO_Init>

    /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001404:	bf00      	nop
 8001406:	3728      	adds	r7, #40	@ 0x28
 8001408:	46bd      	mov	sp, r7
 800140a:	bd80      	pop	{r7, pc}
 800140c:	40015000 	.word	0x40015000
 8001410:	40023800 	.word	0x40023800
 8001414:	40021400 	.word	0x40021400

08001418 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001418:	b480      	push	{r7}
 800141a:	b085      	sub	sp, #20
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a0b      	ldr	r2, [pc, #44]	@ (8001454 <HAL_TIM_Base_MspInit+0x3c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d10d      	bne.n	8001446 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	4b0a      	ldr	r3, [pc, #40]	@ (8001458 <HAL_TIM_Base_MspInit+0x40>)
 8001430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001432:	4a09      	ldr	r2, [pc, #36]	@ (8001458 <HAL_TIM_Base_MspInit+0x40>)
 8001434:	f043 0301 	orr.w	r3, r3, #1
 8001438:	6453      	str	r3, [r2, #68]	@ 0x44
 800143a:	4b07      	ldr	r3, [pc, #28]	@ (8001458 <HAL_TIM_Base_MspInit+0x40>)
 800143c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	60fb      	str	r3, [r7, #12]
 8001444:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001446:	bf00      	nop
 8001448:	3714      	adds	r7, #20
 800144a:	46bd      	mov	sp, r7
 800144c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001450:	4770      	bx	lr
 8001452:	bf00      	nop
 8001454:	40010000 	.word	0x40010000
 8001458:	40023800 	.word	0x40023800

0800145c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b08a      	sub	sp, #40	@ 0x28
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001464:	f107 0314 	add.w	r3, r7, #20
 8001468:	2200      	movs	r2, #0
 800146a:	601a      	str	r2, [r3, #0]
 800146c:	605a      	str	r2, [r3, #4]
 800146e:	609a      	str	r2, [r3, #8]
 8001470:	60da      	str	r2, [r3, #12]
 8001472:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a19      	ldr	r2, [pc, #100]	@ (80014e0 <HAL_UART_MspInit+0x84>)
 800147a:	4293      	cmp	r3, r2
 800147c:	d12c      	bne.n	80014d8 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	613b      	str	r3, [r7, #16]
 8001482:	4b18      	ldr	r3, [pc, #96]	@ (80014e4 <HAL_UART_MspInit+0x88>)
 8001484:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001486:	4a17      	ldr	r2, [pc, #92]	@ (80014e4 <HAL_UART_MspInit+0x88>)
 8001488:	f043 0310 	orr.w	r3, r3, #16
 800148c:	6453      	str	r3, [r2, #68]	@ 0x44
 800148e:	4b15      	ldr	r3, [pc, #84]	@ (80014e4 <HAL_UART_MspInit+0x88>)
 8001490:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001492:	f003 0310 	and.w	r3, r3, #16
 8001496:	613b      	str	r3, [r7, #16]
 8001498:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149a:	2300      	movs	r3, #0
 800149c:	60fb      	str	r3, [r7, #12]
 800149e:	4b11      	ldr	r3, [pc, #68]	@ (80014e4 <HAL_UART_MspInit+0x88>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	4a10      	ldr	r2, [pc, #64]	@ (80014e4 <HAL_UART_MspInit+0x88>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014aa:	4b0e      	ldr	r3, [pc, #56]	@ (80014e4 <HAL_UART_MspInit+0x88>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80014b6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80014ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014bc:	2302      	movs	r3, #2
 80014be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	2300      	movs	r3, #0
 80014c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c4:	2303      	movs	r3, #3
 80014c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014c8:	2307      	movs	r3, #7
 80014ca:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014cc:	f107 0314 	add.w	r3, r7, #20
 80014d0:	4619      	mov	r1, r3
 80014d2:	4805      	ldr	r0, [pc, #20]	@ (80014e8 <HAL_UART_MspInit+0x8c>)
 80014d4:	f000 fd64 	bl	8001fa0 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80014d8:	bf00      	nop
 80014da:	3728      	adds	r7, #40	@ 0x28
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	40011000 	.word	0x40011000
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40020000 	.word	0x40020000

080014ec <HAL_HCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hhcd: HCD handle pointer
  * @retval None
  */
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	@ 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_HS)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a24      	ldr	r2, [pc, #144]	@ (800159c <HAL_HCD_MspInit+0xb0>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d141      	bne.n	8001592 <HAL_HCD_MspInit+0xa6>
  {
    /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	4b23      	ldr	r3, [pc, #140]	@ (80015a0 <HAL_HCD_MspInit+0xb4>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	4a22      	ldr	r2, [pc, #136]	@ (80015a0 <HAL_HCD_MspInit+0xb4>)
 8001518:	f043 0302 	orr.w	r3, r3, #2
 800151c:	6313      	str	r3, [r2, #48]	@ 0x30
 800151e:	4b20      	ldr	r3, [pc, #128]	@ (80015a0 <HAL_HCD_MspInit+0xb4>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800152a:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800152e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001530:	2302      	movs	r3, #2
 8001532:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800153c:	230c      	movs	r3, #12
 800153e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001540:	f107 0314 	add.w	r3, r7, #20
 8001544:	4619      	mov	r1, r3
 8001546:	4817      	ldr	r0, [pc, #92]	@ (80015a4 <HAL_HCD_MspInit+0xb8>)
 8001548:	f000 fd2a 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800154c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001550:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001552:	2300      	movs	r3, #0
 8001554:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800155a:	f107 0314 	add.w	r3, r7, #20
 800155e:	4619      	mov	r1, r3
 8001560:	4810      	ldr	r0, [pc, #64]	@ (80015a4 <HAL_HCD_MspInit+0xb8>)
 8001562:	f000 fd1d 	bl	8001fa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	4b0d      	ldr	r3, [pc, #52]	@ (80015a0 <HAL_HCD_MspInit+0xb4>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800156e:	4a0c      	ldr	r2, [pc, #48]	@ (80015a0 <HAL_HCD_MspInit+0xb4>)
 8001570:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8001574:	6313      	str	r3, [r2, #48]	@ 0x30
 8001576:	4b0a      	ldr	r3, [pc, #40]	@ (80015a0 <HAL_HCD_MspInit+0xb4>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2100      	movs	r1, #0
 8001586:	204d      	movs	r0, #77	@ 0x4d
 8001588:	f000 fad8 	bl	8001b3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800158c:	204d      	movs	r0, #77	@ 0x4d
 800158e:	f000 faf1 	bl	8001b74 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 8001592:	bf00      	nop
 8001594:	3728      	adds	r7, #40	@ 0x28
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40040000 	.word	0x40040000
 80015a0:	40023800 	.word	0x40023800
 80015a4:	40020400 	.word	0x40020400

080015a8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80015ae:	1d3b      	adds	r3, r7, #4
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80015bc:	4b3b      	ldr	r3, [pc, #236]	@ (80016ac <HAL_FMC_MspInit+0x104>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d16f      	bne.n	80016a4 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 80015c4:	4b39      	ldr	r3, [pc, #228]	@ (80016ac <HAL_FMC_MspInit+0x104>)
 80015c6:	2201      	movs	r2, #1
 80015c8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	603b      	str	r3, [r7, #0]
 80015ce:	4b38      	ldr	r3, [pc, #224]	@ (80016b0 <HAL_FMC_MspInit+0x108>)
 80015d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015d2:	4a37      	ldr	r2, [pc, #220]	@ (80016b0 <HAL_FMC_MspInit+0x108>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6393      	str	r3, [r2, #56]	@ 0x38
 80015da:	4b35      	ldr	r3, [pc, #212]	@ (80016b0 <HAL_FMC_MspInit+0x108>)
 80015dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80015e6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80015ea:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ec:	2302      	movs	r3, #2
 80015ee:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f0:	2300      	movs	r3, #0
 80015f2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f4:	2303      	movs	r3, #3
 80015f6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015f8:	230c      	movs	r3, #12
 80015fa:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015fc:	1d3b      	adds	r3, r7, #4
 80015fe:	4619      	mov	r1, r3
 8001600:	482c      	ldr	r0, [pc, #176]	@ (80016b4 <HAL_FMC_MspInit+0x10c>)
 8001602:	f000 fccd 	bl	8001fa0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001606:	2301      	movs	r3, #1
 8001608:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160a:	2302      	movs	r3, #2
 800160c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160e:	2300      	movs	r3, #0
 8001610:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001612:	2303      	movs	r3, #3
 8001614:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001616:	230c      	movs	r3, #12
 8001618:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	4619      	mov	r1, r3
 800161e:	4826      	ldr	r0, [pc, #152]	@ (80016b8 <HAL_FMC_MspInit+0x110>)
 8001620:	f000 fcbe 	bl	8001fa0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001624:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001628:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162a:	2302      	movs	r3, #2
 800162c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001632:	2303      	movs	r3, #3
 8001634:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001636:	230c      	movs	r3, #12
 8001638:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	4619      	mov	r1, r3
 800163e:	481f      	ldr	r0, [pc, #124]	@ (80016bc <HAL_FMC_MspInit+0x114>)
 8001640:	f000 fcae 	bl	8001fa0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001644:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001648:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800164a:	2302      	movs	r3, #2
 800164c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800164e:	2300      	movs	r3, #0
 8001650:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001652:	2303      	movs	r3, #3
 8001654:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001656:	230c      	movs	r3, #12
 8001658:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800165a:	1d3b      	adds	r3, r7, #4
 800165c:	4619      	mov	r1, r3
 800165e:	4818      	ldr	r0, [pc, #96]	@ (80016c0 <HAL_FMC_MspInit+0x118>)
 8001660:	f000 fc9e 	bl	8001fa0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8001664:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8001668:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800166a:	2302      	movs	r3, #2
 800166c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001672:	2303      	movs	r3, #3
 8001674:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001676:	230c      	movs	r3, #12
 8001678:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800167a:	1d3b      	adds	r3, r7, #4
 800167c:	4619      	mov	r1, r3
 800167e:	4811      	ldr	r0, [pc, #68]	@ (80016c4 <HAL_FMC_MspInit+0x11c>)
 8001680:	f000 fc8e 	bl	8001fa0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001684:	2360      	movs	r3, #96	@ 0x60
 8001686:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001688:	2302      	movs	r3, #2
 800168a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001690:	2303      	movs	r3, #3
 8001692:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001694:	230c      	movs	r3, #12
 8001696:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001698:	1d3b      	adds	r3, r7, #4
 800169a:	4619      	mov	r1, r3
 800169c:	480a      	ldr	r0, [pc, #40]	@ (80016c8 <HAL_FMC_MspInit+0x120>)
 800169e:	f000 fc7f 	bl	8001fa0 <HAL_GPIO_Init>
 80016a2:	e000      	b.n	80016a6 <HAL_FMC_MspInit+0xfe>
    return;
 80016a4:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	2000066c 	.word	0x2000066c
 80016b0:	40023800 	.word	0x40023800
 80016b4:	40021400 	.word	0x40021400
 80016b8:	40020800 	.word	0x40020800
 80016bc:	40021800 	.word	0x40021800
 80016c0:	40021000 	.word	0x40021000
 80016c4:	40020c00 	.word	0x40020c00
 80016c8:	40020400 	.word	0x40020400

080016cc <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b082      	sub	sp, #8
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80016d4:	f7ff ff68 	bl	80015a8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80016d8:	bf00      	nop
 80016da:	3708      	adds	r7, #8
 80016dc:	46bd      	mov	sp, r7
 80016de:	bd80      	pop	{r7, pc}

080016e0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08e      	sub	sp, #56	@ 0x38
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80016ec:	2300      	movs	r3, #0
 80016ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80016f0:	2300      	movs	r3, #0
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	4b33      	ldr	r3, [pc, #204]	@ (80017c4 <HAL_InitTick+0xe4>)
 80016f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016f8:	4a32      	ldr	r2, [pc, #200]	@ (80017c4 <HAL_InitTick+0xe4>)
 80016fa:	f043 0310 	orr.w	r3, r3, #16
 80016fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8001700:	4b30      	ldr	r3, [pc, #192]	@ (80017c4 <HAL_InitTick+0xe4>)
 8001702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001704:	f003 0310 	and.w	r3, r3, #16
 8001708:	60fb      	str	r3, [r7, #12]
 800170a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800170c:	f107 0210 	add.w	r2, r7, #16
 8001710:	f107 0314 	add.w	r3, r7, #20
 8001714:	4611      	mov	r1, r2
 8001716:	4618      	mov	r0, r3
 8001718:	f003 fdf8 	bl	800530c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800171c:	6a3b      	ldr	r3, [r7, #32]
 800171e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001722:	2b00      	cmp	r3, #0
 8001724:	d103      	bne.n	800172e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001726:	f003 fdc9 	bl	80052bc <HAL_RCC_GetPCLK1Freq>
 800172a:	6378      	str	r0, [r7, #52]	@ 0x34
 800172c:	e004      	b.n	8001738 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800172e:	f003 fdc5 	bl	80052bc <HAL_RCC_GetPCLK1Freq>
 8001732:	4603      	mov	r3, r0
 8001734:	005b      	lsls	r3, r3, #1
 8001736:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800173a:	4a23      	ldr	r2, [pc, #140]	@ (80017c8 <HAL_InitTick+0xe8>)
 800173c:	fba2 2303 	umull	r2, r3, r2, r3
 8001740:	0c9b      	lsrs	r3, r3, #18
 8001742:	3b01      	subs	r3, #1
 8001744:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001746:	4b21      	ldr	r3, [pc, #132]	@ (80017cc <HAL_InitTick+0xec>)
 8001748:	4a21      	ldr	r2, [pc, #132]	@ (80017d0 <HAL_InitTick+0xf0>)
 800174a:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800174c:	4b1f      	ldr	r3, [pc, #124]	@ (80017cc <HAL_InitTick+0xec>)
 800174e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001752:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001754:	4a1d      	ldr	r2, [pc, #116]	@ (80017cc <HAL_InitTick+0xec>)
 8001756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001758:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800175a:	4b1c      	ldr	r3, [pc, #112]	@ (80017cc <HAL_InitTick+0xec>)
 800175c:	2200      	movs	r2, #0
 800175e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001760:	4b1a      	ldr	r3, [pc, #104]	@ (80017cc <HAL_InitTick+0xec>)
 8001762:	2200      	movs	r2, #0
 8001764:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001766:	4b19      	ldr	r3, [pc, #100]	@ (80017cc <HAL_InitTick+0xec>)
 8001768:	2200      	movs	r2, #0
 800176a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800176c:	4817      	ldr	r0, [pc, #92]	@ (80017cc <HAL_InitTick+0xec>)
 800176e:	f004 fdc5 	bl	80062fc <HAL_TIM_Base_Init>
 8001772:	4603      	mov	r3, r0
 8001774:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001778:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800177c:	2b00      	cmp	r3, #0
 800177e:	d11b      	bne.n	80017b8 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001780:	4812      	ldr	r0, [pc, #72]	@ (80017cc <HAL_InitTick+0xec>)
 8001782:	f004 fe0b 	bl	800639c <HAL_TIM_Base_Start_IT>
 8001786:	4603      	mov	r3, r0
 8001788:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 800178c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001790:	2b00      	cmp	r3, #0
 8001792:	d111      	bne.n	80017b8 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001794:	2036      	movs	r0, #54	@ 0x36
 8001796:	f000 f9ed 	bl	8001b74 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b0f      	cmp	r3, #15
 800179e:	d808      	bhi.n	80017b2 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80017a0:	2200      	movs	r2, #0
 80017a2:	6879      	ldr	r1, [r7, #4]
 80017a4:	2036      	movs	r0, #54	@ 0x36
 80017a6:	f000 f9c9 	bl	8001b3c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017aa:	4a0a      	ldr	r2, [pc, #40]	@ (80017d4 <HAL_InitTick+0xf4>)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6013      	str	r3, [r2, #0]
 80017b0:	e002      	b.n	80017b8 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80017b2:	2301      	movs	r3, #1
 80017b4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80017b8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3738      	adds	r7, #56	@ 0x38
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	40023800 	.word	0x40023800
 80017c8:	431bde83 	.word	0x431bde83
 80017cc:	20000670 	.word	0x20000670
 80017d0:	40001000 	.word	0x40001000
 80017d4:	20000008 	.word	0x20000008

080017d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017dc:	bf00      	nop
 80017de:	e7fd      	b.n	80017dc <NMI_Handler+0x4>

080017e0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017e4:	bf00      	nop
 80017e6:	e7fd      	b.n	80017e4 <HardFault_Handler+0x4>

080017e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017ec:	bf00      	nop
 80017ee:	e7fd      	b.n	80017ec <MemManage_Handler+0x4>

080017f0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017f4:	bf00      	nop
 80017f6:	e7fd      	b.n	80017f4 <BusFault_Handler+0x4>

080017f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017fc:	bf00      	nop
 80017fe:	e7fd      	b.n	80017fc <UsageFault_Handler+0x4>

08001800 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001800:	b480      	push	{r7}
 8001802:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001804:	bf00      	nop
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr

0800180e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800183c:	4802      	ldr	r0, [pc, #8]	@ (8001848 <TIM6_DAC_IRQHandler+0x10>)
 800183e:	f004 fe1d 	bl	800647c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001842:	bf00      	nop
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	20000670 	.word	0x20000670

0800184c <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 8001850:	4802      	ldr	r0, [pc, #8]	@ (800185c <OTG_HS_IRQHandler+0x10>)
 8001852:	f000 fdd1 	bl	80023f8 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000258 	.word	0x20000258

08001860 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001864:	4802      	ldr	r0, [pc, #8]	@ (8001870 <LTDC_IRQHandler+0x10>)
 8001866:	f002 fe21 	bl	80044ac <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200000c8 	.word	0x200000c8

08001874 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001878:	4802      	ldr	r0, [pc, #8]	@ (8001884 <DMA2D_IRQHandler+0x10>)
 800187a:	f000 f9ee 	bl	8001c5a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20000034 	.word	0x20000034

08001888 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800188c:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <SystemInit+0x20>)
 800188e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001892:	4a05      	ldr	r2, [pc, #20]	@ (80018a8 <SystemInit+0x20>)
 8001894:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001898:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800189c:	bf00      	nop
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	e000ed00 	.word	0xe000ed00

080018ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80018ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80018b0:	f7ff ffea 	bl	8001888 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80018b4:	480c      	ldr	r0, [pc, #48]	@ (80018e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80018b6:	490d      	ldr	r1, [pc, #52]	@ (80018ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80018b8:	4a0d      	ldr	r2, [pc, #52]	@ (80018f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80018ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018bc:	e002      	b.n	80018c4 <LoopCopyDataInit>

080018be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018c2:	3304      	adds	r3, #4

080018c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018c8:	d3f9      	bcc.n	80018be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018ca:	4a0a      	ldr	r2, [pc, #40]	@ (80018f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80018cc:	4c0a      	ldr	r4, [pc, #40]	@ (80018f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80018ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018d0:	e001      	b.n	80018d6 <LoopFillZerobss>

080018d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018d4:	3204      	adds	r2, #4

080018d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018d8:	d3fb      	bcc.n	80018d2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80018da:	f006 f935 	bl	8007b48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018de:	f7fe ff29 	bl	8000734 <main>
  bx  lr    
 80018e2:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80018e4:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80018e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018ec:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80018f0:	08007bd0 	.word	0x08007bd0
  ldr r2, =_sbss
 80018f4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80018f8:	200006bc 	.word	0x200006bc

080018fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018fc:	e7fe      	b.n	80018fc <ADC_IRQHandler>
	...

08001900 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001904:	4b0e      	ldr	r3, [pc, #56]	@ (8001940 <HAL_Init+0x40>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a0d      	ldr	r2, [pc, #52]	@ (8001940 <HAL_Init+0x40>)
 800190a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800190e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001910:	4b0b      	ldr	r3, [pc, #44]	@ (8001940 <HAL_Init+0x40>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a0a      	ldr	r2, [pc, #40]	@ (8001940 <HAL_Init+0x40>)
 8001916:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800191a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800191c:	4b08      	ldr	r3, [pc, #32]	@ (8001940 <HAL_Init+0x40>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	4a07      	ldr	r2, [pc, #28]	@ (8001940 <HAL_Init+0x40>)
 8001922:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001926:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001928:	2003      	movs	r0, #3
 800192a:	f000 f8fc 	bl	8001b26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800192e:	200f      	movs	r0, #15
 8001930:	f7ff fed6 	bl	80016e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001934:	f7ff fb1c 	bl	8000f70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001938:	2300      	movs	r3, #0
}
 800193a:	4618      	mov	r0, r3
 800193c:	bd80      	pop	{r7, pc}
 800193e:	bf00      	nop
 8001940:	40023c00 	.word	0x40023c00

08001944 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001948:	4b06      	ldr	r3, [pc, #24]	@ (8001964 <HAL_IncTick+0x20>)
 800194a:	781b      	ldrb	r3, [r3, #0]
 800194c:	461a      	mov	r2, r3
 800194e:	4b06      	ldr	r3, [pc, #24]	@ (8001968 <HAL_IncTick+0x24>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4413      	add	r3, r2
 8001954:	4a04      	ldr	r2, [pc, #16]	@ (8001968 <HAL_IncTick+0x24>)
 8001956:	6013      	str	r3, [r2, #0]
}
 8001958:	bf00      	nop
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	2000000c 	.word	0x2000000c
 8001968:	200006b8 	.word	0x200006b8

0800196c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  return uwTick;
 8001970:	4b03      	ldr	r3, [pc, #12]	@ (8001980 <HAL_GetTick+0x14>)
 8001972:	681b      	ldr	r3, [r3, #0]
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	200006b8 	.word	0x200006b8

08001984 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800198c:	f7ff ffee 	bl	800196c <HAL_GetTick>
 8001990:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800199c:	d005      	beq.n	80019aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800199e:	4b0a      	ldr	r3, [pc, #40]	@ (80019c8 <HAL_Delay+0x44>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	461a      	mov	r2, r3
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	4413      	add	r3, r2
 80019a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019aa:	bf00      	nop
 80019ac:	f7ff ffde 	bl	800196c <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	68bb      	ldr	r3, [r7, #8]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	68fa      	ldr	r2, [r7, #12]
 80019b8:	429a      	cmp	r2, r3
 80019ba:	d8f7      	bhi.n	80019ac <HAL_Delay+0x28>
  {
  }
}
 80019bc:	bf00      	nop
 80019be:	bf00      	nop
 80019c0:	3710      	adds	r7, #16
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	2000000c 	.word	0x2000000c

080019cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019dc:	4b0c      	ldr	r3, [pc, #48]	@ (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019e8:	4013      	ands	r3, r2
 80019ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019f4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019fe:	4a04      	ldr	r2, [pc, #16]	@ (8001a10 <__NVIC_SetPriorityGrouping+0x44>)
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	60d3      	str	r3, [r2, #12]
}
 8001a04:	bf00      	nop
 8001a06:	3714      	adds	r7, #20
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a18:	4b04      	ldr	r3, [pc, #16]	@ (8001a2c <__NVIC_GetPriorityGrouping+0x18>)
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	0a1b      	lsrs	r3, r3, #8
 8001a1e:	f003 0307 	and.w	r3, r3, #7
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b083      	sub	sp, #12
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	4603      	mov	r3, r0
 8001a38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	db0b      	blt.n	8001a5a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	f003 021f 	and.w	r2, r3, #31
 8001a48:	4907      	ldr	r1, [pc, #28]	@ (8001a68 <__NVIC_EnableIRQ+0x38>)
 8001a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4e:	095b      	lsrs	r3, r3, #5
 8001a50:	2001      	movs	r0, #1
 8001a52:	fa00 f202 	lsl.w	r2, r0, r2
 8001a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001a5a:	bf00      	nop
 8001a5c:	370c      	adds	r7, #12
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	e000e100 	.word	0xe000e100

08001a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	4603      	mov	r3, r0
 8001a74:	6039      	str	r1, [r7, #0]
 8001a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	db0a      	blt.n	8001a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	b2da      	uxtb	r2, r3
 8001a84:	490c      	ldr	r1, [pc, #48]	@ (8001ab8 <__NVIC_SetPriority+0x4c>)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	0112      	lsls	r2, r2, #4
 8001a8c:	b2d2      	uxtb	r2, r2
 8001a8e:	440b      	add	r3, r1
 8001a90:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a94:	e00a      	b.n	8001aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a96:	683b      	ldr	r3, [r7, #0]
 8001a98:	b2da      	uxtb	r2, r3
 8001a9a:	4908      	ldr	r1, [pc, #32]	@ (8001abc <__NVIC_SetPriority+0x50>)
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	3b04      	subs	r3, #4
 8001aa4:	0112      	lsls	r2, r2, #4
 8001aa6:	b2d2      	uxtb	r2, r2
 8001aa8:	440b      	add	r3, r1
 8001aaa:	761a      	strb	r2, [r3, #24]
}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	e000e100 	.word	0xe000e100
 8001abc:	e000ed00 	.word	0xe000ed00

08001ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b089      	sub	sp, #36	@ 0x24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad4:	69fb      	ldr	r3, [r7, #28]
 8001ad6:	f1c3 0307 	rsb	r3, r3, #7
 8001ada:	2b04      	cmp	r3, #4
 8001adc:	bf28      	it	cs
 8001ade:	2304      	movcs	r3, #4
 8001ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	2b06      	cmp	r3, #6
 8001ae8:	d902      	bls.n	8001af0 <NVIC_EncodePriority+0x30>
 8001aea:	69fb      	ldr	r3, [r7, #28]
 8001aec:	3b03      	subs	r3, #3
 8001aee:	e000      	b.n	8001af2 <NVIC_EncodePriority+0x32>
 8001af0:	2300      	movs	r3, #0
 8001af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af4:	f04f 32ff 	mov.w	r2, #4294967295
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	fa02 f303 	lsl.w	r3, r2, r3
 8001afe:	43da      	mvns	r2, r3
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	401a      	ands	r2, r3
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b08:	f04f 31ff 	mov.w	r1, #4294967295
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b12:	43d9      	mvns	r1, r3
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b18:	4313      	orrs	r3, r2
         );
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3724      	adds	r7, #36	@ 0x24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b26:	b580      	push	{r7, lr}
 8001b28:	b082      	sub	sp, #8
 8001b2a:	af00      	add	r7, sp, #0
 8001b2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b2e:	6878      	ldr	r0, [r7, #4]
 8001b30:	f7ff ff4c 	bl	80019cc <__NVIC_SetPriorityGrouping>
}
 8001b34:	bf00      	nop
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}

08001b3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b086      	sub	sp, #24
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	4603      	mov	r3, r0
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
 8001b48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b4e:	f7ff ff61 	bl	8001a14 <__NVIC_GetPriorityGrouping>
 8001b52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b54:	687a      	ldr	r2, [r7, #4]
 8001b56:	68b9      	ldr	r1, [r7, #8]
 8001b58:	6978      	ldr	r0, [r7, #20]
 8001b5a:	f7ff ffb1 	bl	8001ac0 <NVIC_EncodePriority>
 8001b5e:	4602      	mov	r2, r0
 8001b60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b64:	4611      	mov	r1, r2
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff ff80 	bl	8001a6c <__NVIC_SetPriority>
}
 8001b6c:	bf00      	nop
 8001b6e:	3718      	adds	r7, #24
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bd80      	pop	{r7, pc}

08001b74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7ff ff54 	bl	8001a30 <__NVIC_EnableIRQ>
}
 8001b88:	bf00      	nop
 8001b8a:	3708      	adds	r7, #8
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}

08001b90 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	b082      	sub	sp, #8
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d101      	bne.n	8001ba2 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e00e      	b.n	8001bc0 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	795b      	ldrb	r3, [r3, #5]
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d105      	bne.n	8001bb8 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001bb2:	6878      	ldr	r0, [r7, #4]
 8001bb4:	f7ff fa04 	bl	8000fc0 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2201      	movs	r2, #1
 8001bbc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001bbe:	2300      	movs	r3, #0
}
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	3708      	adds	r7, #8
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}

08001bc8 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e03b      	b.n	8001c52 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d106      	bne.n	8001bf4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff fa08 	bl	8001004 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c18:	f023 0107 	bic.w	r1, r3, #7
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001c32:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	68d1      	ldr	r1, [r2, #12]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	6812      	ldr	r2, [r2, #0]
 8001c3e:	430b      	orrs	r3, r1
 8001c40:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8001c50:	2300      	movs	r3, #0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b084      	sub	sp, #16
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d026      	beq.n	8001cca <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d021      	beq.n	8001cca <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c94:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c9a:	f043 0201 	orr.w	r2, r3, #1
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2204      	movs	r2, #4
 8001cae:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f003 0320 	and.w	r3, r3, #32
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d026      	beq.n	8001d22 <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d021      	beq.n	8001d22 <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001cec:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cfa:	f043 0202 	orr.w	r2, r3, #2
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2204      	movs	r2, #4
 8001d06:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f003 0308 	and.w	r3, r3, #8
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d026      	beq.n	8001d7a <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d021      	beq.n	8001d7a <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d44:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2208      	movs	r2, #8
 8001d4c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d52:	f043 0204 	orr.w	r2, r3, #4
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2204      	movs	r2, #4
 8001d5e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d013      	beq.n	8001dac <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00e      	beq.n	8001dac <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d9c:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2204      	movs	r2, #4
 8001da4:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f853 	bl	8001e52 <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d024      	beq.n	8001e00 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d01f      	beq.n	8001e00 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001dce:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 0310 	and.w	r3, r3, #16
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d01f      	beq.n	8001e4a <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d01a      	beq.n	8001e4a <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001e22:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2210      	movs	r2, #16
 8001e2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f80e 	bl	8001e66 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001e4a:	bf00      	nop
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
	...

08001e7c <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001e7c:	b480      	push	{r7}
 8001e7e:	b087      	sub	sp, #28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d101      	bne.n	8001e9c <HAL_DMA2D_ConfigLayer+0x20>
 8001e98:	2302      	movs	r3, #2
 8001e9a:	e079      	b.n	8001f90 <HAL_DMA2D_ConfigLayer+0x114>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	011b      	lsls	r3, r3, #4
 8001eb0:	3318      	adds	r3, #24
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	041b      	lsls	r3, r3, #16
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001ec6:	4b35      	ldr	r3, [pc, #212]	@ (8001f9c <HAL_DMA2D_ConfigLayer+0x120>)
 8001ec8:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b0a      	cmp	r3, #10
 8001ed0:	d003      	beq.n	8001eda <HAL_DMA2D_ConfigLayer+0x5e>
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b09      	cmp	r3, #9
 8001ed8:	d107      	bne.n	8001eea <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]
 8001ee8:	e005      	b.n	8001ef6 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	061b      	lsls	r3, r3, #24
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d120      	bne.n	8001f3e <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	ea02 0103 	and.w	r1, r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b0a      	cmp	r3, #10
 8001f24:	d003      	beq.n	8001f2e <HAL_DMA2D_ConfigLayer+0xb2>
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b09      	cmp	r3, #9
 8001f2c:	d127      	bne.n	8001f7e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001f3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8001f3c:	e01f      	b.n	8001f7e <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	69da      	ldr	r2, [r3, #28]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	43db      	mvns	r3, r3
 8001f48:	ea02 0103 	and.w	r1, r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	6812      	ldr	r2, [r2, #0]
 8001f5e:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b0a      	cmp	r3, #10
 8001f66:	d003      	beq.n	8001f70 <HAL_DMA2D_ConfigLayer+0xf4>
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b09      	cmp	r3, #9
 8001f6e:	d106      	bne.n	8001f7e <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	68da      	ldr	r2, [r3, #12]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001f7c:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8001f8e:	2300      	movs	r3, #0
}
 8001f90:	4618      	mov	r0, r3
 8001f92:	371c      	adds	r7, #28
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	ff03000f 	.word	0xff03000f

08001fa0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	@ 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	e177      	b.n	80022ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	f040 8166 	bne.w	80022a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d005      	beq.n	8001ff2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d130      	bne.n	8002054 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4013      	ands	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4313      	orrs	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002028:	2201      	movs	r2, #1
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4013      	ands	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	091b      	lsrs	r3, r3, #4
 800203e:	f003 0201 	and.w	r2, r3, #1
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	2b03      	cmp	r3, #3
 800205e:	d017      	beq.n	8002090 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	2203      	movs	r2, #3
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 0303 	and.w	r3, r3, #3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d123      	bne.n	80020e4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	08da      	lsrs	r2, r3, #3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3208      	adds	r2, #8
 80020a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	220f      	movs	r2, #15
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	691a      	ldr	r2, [r3, #16]
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	08da      	lsrs	r2, r3, #3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3208      	adds	r2, #8
 80020de:	69b9      	ldr	r1, [r7, #24]
 80020e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	2203      	movs	r2, #3
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 0203 	and.w	r2, r3, #3
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80c0 	beq.w	80022a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	4b66      	ldr	r3, [pc, #408]	@ (80022c4 <HAL_GPIO_Init+0x324>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800212e:	4a65      	ldr	r2, [pc, #404]	@ (80022c4 <HAL_GPIO_Init+0x324>)
 8002130:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002134:	6453      	str	r3, [r2, #68]	@ 0x44
 8002136:	4b63      	ldr	r3, [pc, #396]	@ (80022c4 <HAL_GPIO_Init+0x324>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002142:	4a61      	ldr	r2, [pc, #388]	@ (80022c8 <HAL_GPIO_Init+0x328>)
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	3302      	adds	r3, #2
 800214a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	220f      	movs	r2, #15
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a58      	ldr	r2, [pc, #352]	@ (80022cc <HAL_GPIO_Init+0x32c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d037      	beq.n	80021de <HAL_GPIO_Init+0x23e>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a57      	ldr	r2, [pc, #348]	@ (80022d0 <HAL_GPIO_Init+0x330>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d031      	beq.n	80021da <HAL_GPIO_Init+0x23a>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a56      	ldr	r2, [pc, #344]	@ (80022d4 <HAL_GPIO_Init+0x334>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d02b      	beq.n	80021d6 <HAL_GPIO_Init+0x236>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a55      	ldr	r2, [pc, #340]	@ (80022d8 <HAL_GPIO_Init+0x338>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d025      	beq.n	80021d2 <HAL_GPIO_Init+0x232>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a54      	ldr	r2, [pc, #336]	@ (80022dc <HAL_GPIO_Init+0x33c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d01f      	beq.n	80021ce <HAL_GPIO_Init+0x22e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a53      	ldr	r2, [pc, #332]	@ (80022e0 <HAL_GPIO_Init+0x340>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d019      	beq.n	80021ca <HAL_GPIO_Init+0x22a>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a52      	ldr	r2, [pc, #328]	@ (80022e4 <HAL_GPIO_Init+0x344>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d013      	beq.n	80021c6 <HAL_GPIO_Init+0x226>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a51      	ldr	r2, [pc, #324]	@ (80022e8 <HAL_GPIO_Init+0x348>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00d      	beq.n	80021c2 <HAL_GPIO_Init+0x222>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a50      	ldr	r2, [pc, #320]	@ (80022ec <HAL_GPIO_Init+0x34c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d007      	beq.n	80021be <HAL_GPIO_Init+0x21e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a4f      	ldr	r2, [pc, #316]	@ (80022f0 <HAL_GPIO_Init+0x350>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d101      	bne.n	80021ba <HAL_GPIO_Init+0x21a>
 80021b6:	2309      	movs	r3, #9
 80021b8:	e012      	b.n	80021e0 <HAL_GPIO_Init+0x240>
 80021ba:	230a      	movs	r3, #10
 80021bc:	e010      	b.n	80021e0 <HAL_GPIO_Init+0x240>
 80021be:	2308      	movs	r3, #8
 80021c0:	e00e      	b.n	80021e0 <HAL_GPIO_Init+0x240>
 80021c2:	2307      	movs	r3, #7
 80021c4:	e00c      	b.n	80021e0 <HAL_GPIO_Init+0x240>
 80021c6:	2306      	movs	r3, #6
 80021c8:	e00a      	b.n	80021e0 <HAL_GPIO_Init+0x240>
 80021ca:	2305      	movs	r3, #5
 80021cc:	e008      	b.n	80021e0 <HAL_GPIO_Init+0x240>
 80021ce:	2304      	movs	r3, #4
 80021d0:	e006      	b.n	80021e0 <HAL_GPIO_Init+0x240>
 80021d2:	2303      	movs	r3, #3
 80021d4:	e004      	b.n	80021e0 <HAL_GPIO_Init+0x240>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e002      	b.n	80021e0 <HAL_GPIO_Init+0x240>
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <HAL_GPIO_Init+0x240>
 80021de:	2300      	movs	r3, #0
 80021e0:	69fa      	ldr	r2, [r7, #28]
 80021e2:	f002 0203 	and.w	r2, r2, #3
 80021e6:	0092      	lsls	r2, r2, #2
 80021e8:	4093      	lsls	r3, r2
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021f0:	4935      	ldr	r1, [pc, #212]	@ (80022c8 <HAL_GPIO_Init+0x328>)
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	089b      	lsrs	r3, r3, #2
 80021f6:	3302      	adds	r3, #2
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021fe:	4b3d      	ldr	r3, [pc, #244]	@ (80022f4 <HAL_GPIO_Init+0x354>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	43db      	mvns	r3, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4013      	ands	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002222:	4a34      	ldr	r2, [pc, #208]	@ (80022f4 <HAL_GPIO_Init+0x354>)
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002228:	4b32      	ldr	r3, [pc, #200]	@ (80022f4 <HAL_GPIO_Init+0x354>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4313      	orrs	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800224c:	4a29      	ldr	r2, [pc, #164]	@ (80022f4 <HAL_GPIO_Init+0x354>)
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002252:	4b28      	ldr	r3, [pc, #160]	@ (80022f4 <HAL_GPIO_Init+0x354>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	43db      	mvns	r3, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4013      	ands	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002276:	4a1f      	ldr	r2, [pc, #124]	@ (80022f4 <HAL_GPIO_Init+0x354>)
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800227c:	4b1d      	ldr	r3, [pc, #116]	@ (80022f4 <HAL_GPIO_Init+0x354>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4313      	orrs	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022a0:	4a14      	ldr	r2, [pc, #80]	@ (80022f4 <HAL_GPIO_Init+0x354>)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	3301      	adds	r3, #1
 80022aa:	61fb      	str	r3, [r7, #28]
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	2b0f      	cmp	r3, #15
 80022b0:	f67f ae84 	bls.w	8001fbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80022b4:	bf00      	nop
 80022b6:	bf00      	nop
 80022b8:	3724      	adds	r7, #36	@ 0x24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40013800 	.word	0x40013800
 80022cc:	40020000 	.word	0x40020000
 80022d0:	40020400 	.word	0x40020400
 80022d4:	40020800 	.word	0x40020800
 80022d8:	40020c00 	.word	0x40020c00
 80022dc:	40021000 	.word	0x40021000
 80022e0:	40021400 	.word	0x40021400
 80022e4:	40021800 	.word	0x40021800
 80022e8:	40021c00 	.word	0x40021c00
 80022ec:	40022000 	.word	0x40022000
 80022f0:	40022400 	.word	0x40022400
 80022f4:	40013c00 	.word	0x40013c00

080022f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	807b      	strh	r3, [r7, #2]
 8002304:	4613      	mov	r3, r2
 8002306:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002308:	787b      	ldrb	r3, [r7, #1]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800230e:	887a      	ldrh	r2, [r7, #2]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002314:	e003      	b.n	800231e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002316:	887b      	ldrh	r3, [r7, #2]
 8002318:	041a      	lsls	r2, r3, #16
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	619a      	str	r2, [r3, #24]
}
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800232a:	b580      	push	{r7, lr}
 800232c:	b086      	sub	sp, #24
 800232e:	af02      	add	r7, sp, #8
 8002330:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e059      	b.n	80023f0 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d106      	bne.n	800235c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f7ff f8c8 	bl	80014ec <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2203      	movs	r2, #3
 8002360:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800236a:	d102      	bne.n	8002372 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f005 f824 	bl	80073c4 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6818      	ldr	r0, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	7c1a      	ldrb	r2, [r3, #16]
 8002384:	f88d 2000 	strb.w	r2, [sp]
 8002388:	3304      	adds	r3, #4
 800238a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800238c:	f004 ffb6 	bl	80072fc <USB_CoreInit>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d005      	beq.n	80023a2 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2202      	movs	r2, #2
 800239a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e026      	b.n	80023f0 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2101      	movs	r1, #1
 80023a8:	4618      	mov	r0, r3
 80023aa:	f005 f81c 	bl	80073e6 <USB_SetCurrentMode>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2202      	movs	r2, #2
 80023b8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e017      	b.n	80023f0 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6818      	ldr	r0, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	7c1a      	ldrb	r2, [r3, #16]
 80023c8:	f88d 2000 	strb.w	r2, [sp]
 80023cc:	3304      	adds	r3, #4
 80023ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023d0:	f005 f980 	bl	80076d4 <USB_HostInit>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d005      	beq.n	80023e6 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2202      	movs	r2, #2
 80023de:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	e004      	b.n	80023f0 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002406:	693b      	ldr	r3, [r7, #16]
 8002408:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f005 f921 	bl	8007656 <USB_GetMode>
 8002414:	4603      	mov	r3, r0
 8002416:	2b01      	cmp	r3, #1
 8002418:	f040 80fb 	bne.w	8002612 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f005 f8e4 	bl	80075ee <USB_ReadInterrupts>
 8002426:	4603      	mov	r3, r0
 8002428:	2b00      	cmp	r3, #0
 800242a:	f000 80f1 	beq.w	8002610 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4618      	mov	r0, r3
 8002434:	f005 f8db 	bl	80075ee <USB_ReadInterrupts>
 8002438:	4603      	mov	r3, r0
 800243a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800243e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002442:	d104      	bne.n	800244e <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 800244c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f005 f8cb 	bl	80075ee <USB_ReadInterrupts>
 8002458:	4603      	mov	r3, r0
 800245a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800245e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002462:	d104      	bne.n	800246e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800246c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4618      	mov	r0, r3
 8002474:	f005 f8bb 	bl	80075ee <USB_ReadInterrupts>
 8002478:	4603      	mov	r3, r0
 800247a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800247e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002482:	d104      	bne.n	800248e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800248c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f005 f8ab 	bl	80075ee <USB_ReadInterrupts>
 8002498:	4603      	mov	r3, r0
 800249a:	f003 0302 	and.w	r3, r3, #2
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d103      	bne.n	80024aa <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2202      	movs	r2, #2
 80024a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4618      	mov	r0, r3
 80024b0:	f005 f89d 	bl	80075ee <USB_ReadInterrupts>
 80024b4:	4603      	mov	r3, r0
 80024b6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80024ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024be:	d120      	bne.n	8002502 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80024c8:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0301 	and.w	r3, r3, #1
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d113      	bne.n	8002502 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80024da:	2110      	movs	r1, #16
 80024dc:	6938      	ldr	r0, [r7, #16]
 80024de:	f004 ffce 	bl	800747e <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80024e2:	6938      	ldr	r0, [r7, #16]
 80024e4:	f004 fffd 	bl	80074e2 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	7a5b      	ldrb	r3, [r3, #9]
 80024ec:	2b02      	cmp	r3, #2
 80024ee:	d105      	bne.n	80024fc <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	2101      	movs	r1, #1
 80024f6:	4618      	mov	r0, r3
 80024f8:	f005 f9b0 	bl	800785c <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f000 f89f 	bl	8002640 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f005 f871 	bl	80075ee <USB_ReadInterrupts>
 800250c:	4603      	mov	r3, r0
 800250e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002512:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002516:	d102      	bne.n	800251e <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002518:	6878      	ldr	r0, [r7, #4]
 800251a:	f001 fcc4 	bl	8003ea6 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4618      	mov	r0, r3
 8002524:	f005 f863 	bl	80075ee <USB_ReadInterrupts>
 8002528:	4603      	mov	r3, r0
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	2b08      	cmp	r3, #8
 8002530:	d106      	bne.n	8002540 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f000 f870 	bl	8002618 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	2208      	movs	r2, #8
 800253e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4618      	mov	r0, r3
 8002546:	f005 f852 	bl	80075ee <USB_ReadInterrupts>
 800254a:	4603      	mov	r3, r0
 800254c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002550:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002554:	d139      	bne.n	80025ca <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	4618      	mov	r0, r3
 800255c:	f005 f9bb 	bl	80078d6 <USB_HC_ReadInterrupt>
 8002560:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002562:	2300      	movs	r3, #0
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	e025      	b.n	80025b4 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f003 030f 	and.w	r3, r3, #15
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	fa22 f303 	lsr.w	r3, r2, r3
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d018      	beq.n	80025ae <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	015a      	lsls	r2, r3, #5
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	4413      	add	r3, r2
 8002584:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800258e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002592:	d106      	bne.n	80025a2 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	b2db      	uxtb	r3, r3
 8002598:	4619      	mov	r1, r3
 800259a:	6878      	ldr	r0, [r7, #4]
 800259c:	f000 f87c 	bl	8002698 <HCD_HC_IN_IRQHandler>
 80025a0:	e005      	b.n	80025ae <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	4619      	mov	r1, r3
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 fede 	bl	800336a <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80025ae:	697b      	ldr	r3, [r7, #20]
 80025b0:	3301      	adds	r3, #1
 80025b2:	617b      	str	r3, [r7, #20]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	795b      	ldrb	r3, [r3, #5]
 80025b8:	461a      	mov	r2, r3
 80025ba:	697b      	ldr	r3, [r7, #20]
 80025bc:	4293      	cmp	r3, r2
 80025be:	d3d3      	bcc.n	8002568 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f005 f80d 	bl	80075ee <USB_ReadInterrupts>
 80025d4:	4603      	mov	r3, r0
 80025d6:	f003 0310 	and.w	r3, r3, #16
 80025da:	2b10      	cmp	r3, #16
 80025dc:	d101      	bne.n	80025e2 <HAL_HCD_IRQHandler+0x1ea>
 80025de:	2301      	movs	r3, #1
 80025e0:	e000      	b.n	80025e4 <HAL_HCD_IRQHandler+0x1ec>
 80025e2:	2300      	movs	r3, #0
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d014      	beq.n	8002612 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	699a      	ldr	r2, [r3, #24]
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f022 0210 	bic.w	r2, r2, #16
 80025f6:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80025f8:	6878      	ldr	r0, [r7, #4]
 80025fa:	f001 fb75 	bl	8003ce8 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	699a      	ldr	r2, [r3, #24]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f042 0210 	orr.w	r2, r2, #16
 800260c:	619a      	str	r2, [r3, #24]
 800260e:	e000      	b.n	8002612 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002610:	bf00      	nop
    }
  }
}
 8002612:	3718      	adds	r7, #24
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}

08002618 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 8002620:	bf00      	nop
 8002622:	370c      	adds	r7, #12
 8002624:	46bd      	mov	sp, r7
 8002626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262a:	4770      	bx	lr

0800262c <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800262c:	b480      	push	{r7}
 800262e:	b083      	sub	sp, #12
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 8002634:	bf00      	nop
 8002636:	370c      	adds	r7, #12
 8002638:	46bd      	mov	sp, r7
 800263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263e:	4770      	bx	lr

08002640 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002654:	b480      	push	{r7}
 8002656:	b083      	sub	sp, #12
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 800265c:	bf00      	nop
 800265e:	370c      	adds	r7, #12
 8002660:	46bd      	mov	sp, r7
 8002662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002666:	4770      	bx	lr

08002668 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	460b      	mov	r3, r1
 8002686:	70fb      	strb	r3, [r7, #3]
 8002688:	4613      	mov	r3, r2
 800268a:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b086      	sub	sp, #24
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	78fa      	ldrb	r2, [r7, #3]
 80026b4:	4611      	mov	r1, r2
 80026b6:	4618      	mov	r0, r3
 80026b8:	f004 ffac 	bl	8007614 <USB_ReadChInterrupts>
 80026bc:	4603      	mov	r3, r0
 80026be:	f003 0304 	and.w	r3, r3, #4
 80026c2:	2b04      	cmp	r3, #4
 80026c4:	d11a      	bne.n	80026fc <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80026c6:	78fb      	ldrb	r3, [r7, #3]
 80026c8:	015a      	lsls	r2, r3, #5
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	4413      	add	r3, r2
 80026ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026d2:	461a      	mov	r2, r3
 80026d4:	2304      	movs	r3, #4
 80026d6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80026d8:	78fa      	ldrb	r2, [r7, #3]
 80026da:	6879      	ldr	r1, [r7, #4]
 80026dc:	4613      	mov	r3, r2
 80026de:	011b      	lsls	r3, r3, #4
 80026e0:	1a9b      	subs	r3, r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	440b      	add	r3, r1
 80026e6:	334d      	adds	r3, #77	@ 0x4d
 80026e8:	2207      	movs	r2, #7
 80026ea:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	78fa      	ldrb	r2, [r7, #3]
 80026f2:	4611      	mov	r1, r2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f005 f8ff 	bl	80078f8 <USB_HC_Halt>
 80026fa:	e09e      	b.n	800283a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	78fa      	ldrb	r2, [r7, #3]
 8002702:	4611      	mov	r1, r2
 8002704:	4618      	mov	r0, r3
 8002706:	f004 ff85 	bl	8007614 <USB_ReadChInterrupts>
 800270a:	4603      	mov	r3, r0
 800270c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002710:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002714:	d11b      	bne.n	800274e <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002716:	78fb      	ldrb	r3, [r7, #3]
 8002718:	015a      	lsls	r2, r3, #5
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	4413      	add	r3, r2
 800271e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002722:	461a      	mov	r2, r3
 8002724:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002728:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 800272a:	78fa      	ldrb	r2, [r7, #3]
 800272c:	6879      	ldr	r1, [r7, #4]
 800272e:	4613      	mov	r3, r2
 8002730:	011b      	lsls	r3, r3, #4
 8002732:	1a9b      	subs	r3, r3, r2
 8002734:	009b      	lsls	r3, r3, #2
 8002736:	440b      	add	r3, r1
 8002738:	334d      	adds	r3, #77	@ 0x4d
 800273a:	2208      	movs	r2, #8
 800273c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	78fa      	ldrb	r2, [r7, #3]
 8002744:	4611      	mov	r1, r2
 8002746:	4618      	mov	r0, r3
 8002748:	f005 f8d6 	bl	80078f8 <USB_HC_Halt>
 800274c:	e075      	b.n	800283a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	78fa      	ldrb	r2, [r7, #3]
 8002754:	4611      	mov	r1, r2
 8002756:	4618      	mov	r0, r3
 8002758:	f004 ff5c 	bl	8007614 <USB_ReadChInterrupts>
 800275c:	4603      	mov	r3, r0
 800275e:	f003 0308 	and.w	r3, r3, #8
 8002762:	2b08      	cmp	r3, #8
 8002764:	d11a      	bne.n	800279c <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002766:	78fb      	ldrb	r3, [r7, #3]
 8002768:	015a      	lsls	r2, r3, #5
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4413      	add	r3, r2
 800276e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002772:	461a      	mov	r2, r3
 8002774:	2308      	movs	r3, #8
 8002776:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002778:	78fa      	ldrb	r2, [r7, #3]
 800277a:	6879      	ldr	r1, [r7, #4]
 800277c:	4613      	mov	r3, r2
 800277e:	011b      	lsls	r3, r3, #4
 8002780:	1a9b      	subs	r3, r3, r2
 8002782:	009b      	lsls	r3, r3, #2
 8002784:	440b      	add	r3, r1
 8002786:	334d      	adds	r3, #77	@ 0x4d
 8002788:	2206      	movs	r2, #6
 800278a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	78fa      	ldrb	r2, [r7, #3]
 8002792:	4611      	mov	r1, r2
 8002794:	4618      	mov	r0, r3
 8002796:	f005 f8af 	bl	80078f8 <USB_HC_Halt>
 800279a:	e04e      	b.n	800283a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	78fa      	ldrb	r2, [r7, #3]
 80027a2:	4611      	mov	r1, r2
 80027a4:	4618      	mov	r0, r3
 80027a6:	f004 ff35 	bl	8007614 <USB_ReadChInterrupts>
 80027aa:	4603      	mov	r3, r0
 80027ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80027b4:	d11b      	bne.n	80027ee <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80027b6:	78fb      	ldrb	r3, [r7, #3]
 80027b8:	015a      	lsls	r2, r3, #5
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	4413      	add	r3, r2
 80027be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027c2:	461a      	mov	r2, r3
 80027c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80027c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80027ca:	78fa      	ldrb	r2, [r7, #3]
 80027cc:	6879      	ldr	r1, [r7, #4]
 80027ce:	4613      	mov	r3, r2
 80027d0:	011b      	lsls	r3, r3, #4
 80027d2:	1a9b      	subs	r3, r3, r2
 80027d4:	009b      	lsls	r3, r3, #2
 80027d6:	440b      	add	r3, r1
 80027d8:	334d      	adds	r3, #77	@ 0x4d
 80027da:	2209      	movs	r2, #9
 80027dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	78fa      	ldrb	r2, [r7, #3]
 80027e4:	4611      	mov	r1, r2
 80027e6:	4618      	mov	r0, r3
 80027e8:	f005 f886 	bl	80078f8 <USB_HC_Halt>
 80027ec:	e025      	b.n	800283a <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	78fa      	ldrb	r2, [r7, #3]
 80027f4:	4611      	mov	r1, r2
 80027f6:	4618      	mov	r0, r3
 80027f8:	f004 ff0c 	bl	8007614 <USB_ReadChInterrupts>
 80027fc:	4603      	mov	r3, r0
 80027fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002802:	2b80      	cmp	r3, #128	@ 0x80
 8002804:	d119      	bne.n	800283a <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002806:	78fb      	ldrb	r3, [r7, #3]
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	4413      	add	r3, r2
 800280e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002812:	461a      	mov	r2, r3
 8002814:	2380      	movs	r3, #128	@ 0x80
 8002816:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002818:	78fa      	ldrb	r2, [r7, #3]
 800281a:	6879      	ldr	r1, [r7, #4]
 800281c:	4613      	mov	r3, r2
 800281e:	011b      	lsls	r3, r3, #4
 8002820:	1a9b      	subs	r3, r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	440b      	add	r3, r1
 8002826:	334d      	adds	r3, #77	@ 0x4d
 8002828:	2207      	movs	r2, #7
 800282a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	78fa      	ldrb	r2, [r7, #3]
 8002832:	4611      	mov	r1, r2
 8002834:	4618      	mov	r0, r3
 8002836:	f005 f85f 	bl	80078f8 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	78fa      	ldrb	r2, [r7, #3]
 8002840:	4611      	mov	r1, r2
 8002842:	4618      	mov	r0, r3
 8002844:	f004 fee6 	bl	8007614 <USB_ReadChInterrupts>
 8002848:	4603      	mov	r3, r0
 800284a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800284e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002852:	d112      	bne.n	800287a <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	78fa      	ldrb	r2, [r7, #3]
 800285a:	4611      	mov	r1, r2
 800285c:	4618      	mov	r0, r3
 800285e:	f005 f84b 	bl	80078f8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002862:	78fb      	ldrb	r3, [r7, #3]
 8002864:	015a      	lsls	r2, r3, #5
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	4413      	add	r3, r2
 800286a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800286e:	461a      	mov	r2, r3
 8002870:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002874:	6093      	str	r3, [r2, #8]
 8002876:	f000 bd75 	b.w	8003364 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	78fa      	ldrb	r2, [r7, #3]
 8002880:	4611      	mov	r1, r2
 8002882:	4618      	mov	r0, r3
 8002884:	f004 fec6 	bl	8007614 <USB_ReadChInterrupts>
 8002888:	4603      	mov	r3, r0
 800288a:	f003 0301 	and.w	r3, r3, #1
 800288e:	2b01      	cmp	r3, #1
 8002890:	f040 8128 	bne.w	8002ae4 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002894:	78fb      	ldrb	r3, [r7, #3]
 8002896:	015a      	lsls	r2, r3, #5
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	4413      	add	r3, r2
 800289c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028a0:	461a      	mov	r2, r3
 80028a2:	2320      	movs	r3, #32
 80028a4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 80028a6:	78fa      	ldrb	r2, [r7, #3]
 80028a8:	6879      	ldr	r1, [r7, #4]
 80028aa:	4613      	mov	r3, r2
 80028ac:	011b      	lsls	r3, r3, #4
 80028ae:	1a9b      	subs	r3, r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	440b      	add	r3, r1
 80028b4:	331b      	adds	r3, #27
 80028b6:	781b      	ldrb	r3, [r3, #0]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d119      	bne.n	80028f0 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80028bc:	78fa      	ldrb	r2, [r7, #3]
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	011b      	lsls	r3, r3, #4
 80028c4:	1a9b      	subs	r3, r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	440b      	add	r3, r1
 80028ca:	331b      	adds	r3, #27
 80028cc:	2200      	movs	r2, #0
 80028ce:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80028d0:	78fb      	ldrb	r3, [r7, #3]
 80028d2:	015a      	lsls	r2, r3, #5
 80028d4:	693b      	ldr	r3, [r7, #16]
 80028d6:	4413      	add	r3, r2
 80028d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	78fa      	ldrb	r2, [r7, #3]
 80028e0:	0151      	lsls	r1, r2, #5
 80028e2:	693a      	ldr	r2, [r7, #16]
 80028e4:	440a      	add	r2, r1
 80028e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80028ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80028ee:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	799b      	ldrb	r3, [r3, #6]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d01b      	beq.n	8002930 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80028f8:	78fa      	ldrb	r2, [r7, #3]
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	4613      	mov	r3, r2
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	1a9b      	subs	r3, r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	440b      	add	r3, r1
 8002906:	3330      	adds	r3, #48	@ 0x30
 8002908:	6819      	ldr	r1, [r3, #0]
 800290a:	78fb      	ldrb	r3, [r7, #3]
 800290c:	015a      	lsls	r2, r3, #5
 800290e:	693b      	ldr	r3, [r7, #16]
 8002910:	4413      	add	r3, r2
 8002912:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800291c:	78fa      	ldrb	r2, [r7, #3]
 800291e:	1ac9      	subs	r1, r1, r3
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	011b      	lsls	r3, r3, #4
 8002926:	1a9b      	subs	r3, r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	4403      	add	r3, r0
 800292c:	3338      	adds	r3, #56	@ 0x38
 800292e:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002930:	78fa      	ldrb	r2, [r7, #3]
 8002932:	6879      	ldr	r1, [r7, #4]
 8002934:	4613      	mov	r3, r2
 8002936:	011b      	lsls	r3, r3, #4
 8002938:	1a9b      	subs	r3, r3, r2
 800293a:	009b      	lsls	r3, r3, #2
 800293c:	440b      	add	r3, r1
 800293e:	334d      	adds	r3, #77	@ 0x4d
 8002940:	2201      	movs	r2, #1
 8002942:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002944:	78fa      	ldrb	r2, [r7, #3]
 8002946:	6879      	ldr	r1, [r7, #4]
 8002948:	4613      	mov	r3, r2
 800294a:	011b      	lsls	r3, r3, #4
 800294c:	1a9b      	subs	r3, r3, r2
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	440b      	add	r3, r1
 8002952:	3344      	adds	r3, #68	@ 0x44
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002958:	78fb      	ldrb	r3, [r7, #3]
 800295a:	015a      	lsls	r2, r3, #5
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4413      	add	r3, r2
 8002960:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002964:	461a      	mov	r2, r3
 8002966:	2301      	movs	r3, #1
 8002968:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800296a:	78fa      	ldrb	r2, [r7, #3]
 800296c:	6879      	ldr	r1, [r7, #4]
 800296e:	4613      	mov	r3, r2
 8002970:	011b      	lsls	r3, r3, #4
 8002972:	1a9b      	subs	r3, r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	440b      	add	r3, r1
 8002978:	3326      	adds	r3, #38	@ 0x26
 800297a:	781b      	ldrb	r3, [r3, #0]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d00a      	beq.n	8002996 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002980:	78fa      	ldrb	r2, [r7, #3]
 8002982:	6879      	ldr	r1, [r7, #4]
 8002984:	4613      	mov	r3, r2
 8002986:	011b      	lsls	r3, r3, #4
 8002988:	1a9b      	subs	r3, r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	440b      	add	r3, r1
 800298e:	3326      	adds	r3, #38	@ 0x26
 8002990:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002992:	2b02      	cmp	r3, #2
 8002994:	d110      	bne.n	80029b8 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	78fa      	ldrb	r2, [r7, #3]
 800299c:	4611      	mov	r1, r2
 800299e:	4618      	mov	r0, r3
 80029a0:	f004 ffaa 	bl	80078f8 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80029a4:	78fb      	ldrb	r3, [r7, #3]
 80029a6:	015a      	lsls	r2, r3, #5
 80029a8:	693b      	ldr	r3, [r7, #16]
 80029aa:	4413      	add	r3, r2
 80029ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029b0:	461a      	mov	r2, r3
 80029b2:	2310      	movs	r3, #16
 80029b4:	6093      	str	r3, [r2, #8]
 80029b6:	e03d      	b.n	8002a34 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80029b8:	78fa      	ldrb	r2, [r7, #3]
 80029ba:	6879      	ldr	r1, [r7, #4]
 80029bc:	4613      	mov	r3, r2
 80029be:	011b      	lsls	r3, r3, #4
 80029c0:	1a9b      	subs	r3, r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	3326      	adds	r3, #38	@ 0x26
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2b03      	cmp	r3, #3
 80029cc:	d00a      	beq.n	80029e4 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 80029ce:	78fa      	ldrb	r2, [r7, #3]
 80029d0:	6879      	ldr	r1, [r7, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	011b      	lsls	r3, r3, #4
 80029d6:	1a9b      	subs	r3, r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	440b      	add	r3, r1
 80029dc:	3326      	adds	r3, #38	@ 0x26
 80029de:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 80029e0:	2b01      	cmp	r3, #1
 80029e2:	d127      	bne.n	8002a34 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80029e4:	78fb      	ldrb	r3, [r7, #3]
 80029e6:	015a      	lsls	r2, r3, #5
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	4413      	add	r3, r2
 80029ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	78fa      	ldrb	r2, [r7, #3]
 80029f4:	0151      	lsls	r1, r2, #5
 80029f6:	693a      	ldr	r2, [r7, #16]
 80029f8:	440a      	add	r2, r1
 80029fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80029fe:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002a02:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002a04:	78fa      	ldrb	r2, [r7, #3]
 8002a06:	6879      	ldr	r1, [r7, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	011b      	lsls	r3, r3, #4
 8002a0c:	1a9b      	subs	r3, r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	440b      	add	r3, r1
 8002a12:	334c      	adds	r3, #76	@ 0x4c
 8002a14:	2201      	movs	r2, #1
 8002a16:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002a18:	78fa      	ldrb	r2, [r7, #3]
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	1a9b      	subs	r3, r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	334c      	adds	r3, #76	@ 0x4c
 8002a28:	781a      	ldrb	r2, [r3, #0]
 8002a2a:	78fb      	ldrb	r3, [r7, #3]
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f7ff fe24 	bl	800267c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	799b      	ldrb	r3, [r3, #6]
 8002a38:	2b01      	cmp	r3, #1
 8002a3a:	d13b      	bne.n	8002ab4 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002a3c:	78fa      	ldrb	r2, [r7, #3]
 8002a3e:	6879      	ldr	r1, [r7, #4]
 8002a40:	4613      	mov	r3, r2
 8002a42:	011b      	lsls	r3, r3, #4
 8002a44:	1a9b      	subs	r3, r3, r2
 8002a46:	009b      	lsls	r3, r3, #2
 8002a48:	440b      	add	r3, r1
 8002a4a:	3338      	adds	r3, #56	@ 0x38
 8002a4c:	6819      	ldr	r1, [r3, #0]
 8002a4e:	78fa      	ldrb	r2, [r7, #3]
 8002a50:	6878      	ldr	r0, [r7, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	1a9b      	subs	r3, r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	4403      	add	r3, r0
 8002a5c:	3328      	adds	r3, #40	@ 0x28
 8002a5e:	881b      	ldrh	r3, [r3, #0]
 8002a60:	440b      	add	r3, r1
 8002a62:	1e59      	subs	r1, r3, #1
 8002a64:	78fa      	ldrb	r2, [r7, #3]
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	4613      	mov	r3, r2
 8002a6a:	011b      	lsls	r3, r3, #4
 8002a6c:	1a9b      	subs	r3, r3, r2
 8002a6e:	009b      	lsls	r3, r3, #2
 8002a70:	4403      	add	r3, r0
 8002a72:	3328      	adds	r3, #40	@ 0x28
 8002a74:	881b      	ldrh	r3, [r3, #0]
 8002a76:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 8470 	beq.w	8003364 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002a84:	78fa      	ldrb	r2, [r7, #3]
 8002a86:	6879      	ldr	r1, [r7, #4]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	011b      	lsls	r3, r3, #4
 8002a8c:	1a9b      	subs	r3, r3, r2
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	440b      	add	r3, r1
 8002a92:	333c      	adds	r3, #60	@ 0x3c
 8002a94:	781b      	ldrb	r3, [r3, #0]
 8002a96:	78fa      	ldrb	r2, [r7, #3]
 8002a98:	f083 0301 	eor.w	r3, r3, #1
 8002a9c:	b2d8      	uxtb	r0, r3
 8002a9e:	6879      	ldr	r1, [r7, #4]
 8002aa0:	4613      	mov	r3, r2
 8002aa2:	011b      	lsls	r3, r3, #4
 8002aa4:	1a9b      	subs	r3, r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	440b      	add	r3, r1
 8002aaa:	333c      	adds	r3, #60	@ 0x3c
 8002aac:	4602      	mov	r2, r0
 8002aae:	701a      	strb	r2, [r3, #0]
 8002ab0:	f000 bc58 	b.w	8003364 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002ab4:	78fa      	ldrb	r2, [r7, #3]
 8002ab6:	6879      	ldr	r1, [r7, #4]
 8002ab8:	4613      	mov	r3, r2
 8002aba:	011b      	lsls	r3, r3, #4
 8002abc:	1a9b      	subs	r3, r3, r2
 8002abe:	009b      	lsls	r3, r3, #2
 8002ac0:	440b      	add	r3, r1
 8002ac2:	333c      	adds	r3, #60	@ 0x3c
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	78fa      	ldrb	r2, [r7, #3]
 8002ac8:	f083 0301 	eor.w	r3, r3, #1
 8002acc:	b2d8      	uxtb	r0, r3
 8002ace:	6879      	ldr	r1, [r7, #4]
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	011b      	lsls	r3, r3, #4
 8002ad4:	1a9b      	subs	r3, r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	440b      	add	r3, r1
 8002ada:	333c      	adds	r3, #60	@ 0x3c
 8002adc:	4602      	mov	r2, r0
 8002ade:	701a      	strb	r2, [r3, #0]
 8002ae0:	f000 bc40 	b.w	8003364 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	78fa      	ldrb	r2, [r7, #3]
 8002aea:	4611      	mov	r1, r2
 8002aec:	4618      	mov	r0, r3
 8002aee:	f004 fd91 	bl	8007614 <USB_ReadChInterrupts>
 8002af2:	4603      	mov	r3, r0
 8002af4:	f003 0320 	and.w	r3, r3, #32
 8002af8:	2b20      	cmp	r3, #32
 8002afa:	d131      	bne.n	8002b60 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002afc:	78fb      	ldrb	r3, [r7, #3]
 8002afe:	015a      	lsls	r2, r3, #5
 8002b00:	693b      	ldr	r3, [r7, #16]
 8002b02:	4413      	add	r3, r2
 8002b04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b08:	461a      	mov	r2, r3
 8002b0a:	2320      	movs	r3, #32
 8002b0c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002b0e:	78fa      	ldrb	r2, [r7, #3]
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	1a9b      	subs	r3, r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	331a      	adds	r3, #26
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	f040 841f 	bne.w	8003364 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002b26:	78fa      	ldrb	r2, [r7, #3]
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	011b      	lsls	r3, r3, #4
 8002b2e:	1a9b      	subs	r3, r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	440b      	add	r3, r1
 8002b34:	331b      	adds	r3, #27
 8002b36:	2201      	movs	r2, #1
 8002b38:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002b3a:	78fa      	ldrb	r2, [r7, #3]
 8002b3c:	6879      	ldr	r1, [r7, #4]
 8002b3e:	4613      	mov	r3, r2
 8002b40:	011b      	lsls	r3, r3, #4
 8002b42:	1a9b      	subs	r3, r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	440b      	add	r3, r1
 8002b48:	334d      	adds	r3, #77	@ 0x4d
 8002b4a:	2203      	movs	r2, #3
 8002b4c:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	78fa      	ldrb	r2, [r7, #3]
 8002b54:	4611      	mov	r1, r2
 8002b56:	4618      	mov	r0, r3
 8002b58:	f004 fece 	bl	80078f8 <USB_HC_Halt>
 8002b5c:	f000 bc02 	b.w	8003364 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	78fa      	ldrb	r2, [r7, #3]
 8002b66:	4611      	mov	r1, r2
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f004 fd53 	bl	8007614 <USB_ReadChInterrupts>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	f003 0302 	and.w	r3, r3, #2
 8002b74:	2b02      	cmp	r3, #2
 8002b76:	f040 8305 	bne.w	8003184 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002b7a:	78fb      	ldrb	r3, [r7, #3]
 8002b7c:	015a      	lsls	r2, r3, #5
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	4413      	add	r3, r2
 8002b82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b86:	461a      	mov	r2, r3
 8002b88:	2302      	movs	r3, #2
 8002b8a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002b8c:	78fa      	ldrb	r2, [r7, #3]
 8002b8e:	6879      	ldr	r1, [r7, #4]
 8002b90:	4613      	mov	r3, r2
 8002b92:	011b      	lsls	r3, r3, #4
 8002b94:	1a9b      	subs	r3, r3, r2
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	440b      	add	r3, r1
 8002b9a:	334d      	adds	r3, #77	@ 0x4d
 8002b9c:	781b      	ldrb	r3, [r3, #0]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d114      	bne.n	8002bcc <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ba2:	78fa      	ldrb	r2, [r7, #3]
 8002ba4:	6879      	ldr	r1, [r7, #4]
 8002ba6:	4613      	mov	r3, r2
 8002ba8:	011b      	lsls	r3, r3, #4
 8002baa:	1a9b      	subs	r3, r3, r2
 8002bac:	009b      	lsls	r3, r3, #2
 8002bae:	440b      	add	r3, r1
 8002bb0:	334d      	adds	r3, #77	@ 0x4d
 8002bb2:	2202      	movs	r2, #2
 8002bb4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002bb6:	78fa      	ldrb	r2, [r7, #3]
 8002bb8:	6879      	ldr	r1, [r7, #4]
 8002bba:	4613      	mov	r3, r2
 8002bbc:	011b      	lsls	r3, r3, #4
 8002bbe:	1a9b      	subs	r3, r3, r2
 8002bc0:	009b      	lsls	r3, r3, #2
 8002bc2:	440b      	add	r3, r1
 8002bc4:	334c      	adds	r3, #76	@ 0x4c
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	701a      	strb	r2, [r3, #0]
 8002bca:	e2cc      	b.n	8003166 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002bcc:	78fa      	ldrb	r2, [r7, #3]
 8002bce:	6879      	ldr	r1, [r7, #4]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	1a9b      	subs	r3, r3, r2
 8002bd6:	009b      	lsls	r3, r3, #2
 8002bd8:	440b      	add	r3, r1
 8002bda:	334d      	adds	r3, #77	@ 0x4d
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b06      	cmp	r3, #6
 8002be0:	d114      	bne.n	8002c0c <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002be2:	78fa      	ldrb	r2, [r7, #3]
 8002be4:	6879      	ldr	r1, [r7, #4]
 8002be6:	4613      	mov	r3, r2
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	1a9b      	subs	r3, r3, r2
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	440b      	add	r3, r1
 8002bf0:	334d      	adds	r3, #77	@ 0x4d
 8002bf2:	2202      	movs	r2, #2
 8002bf4:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002bf6:	78fa      	ldrb	r2, [r7, #3]
 8002bf8:	6879      	ldr	r1, [r7, #4]
 8002bfa:	4613      	mov	r3, r2
 8002bfc:	011b      	lsls	r3, r3, #4
 8002bfe:	1a9b      	subs	r3, r3, r2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	440b      	add	r3, r1
 8002c04:	334c      	adds	r3, #76	@ 0x4c
 8002c06:	2205      	movs	r2, #5
 8002c08:	701a      	strb	r2, [r3, #0]
 8002c0a:	e2ac      	b.n	8003166 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002c0c:	78fa      	ldrb	r2, [r7, #3]
 8002c0e:	6879      	ldr	r1, [r7, #4]
 8002c10:	4613      	mov	r3, r2
 8002c12:	011b      	lsls	r3, r3, #4
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	009b      	lsls	r3, r3, #2
 8002c18:	440b      	add	r3, r1
 8002c1a:	334d      	adds	r3, #77	@ 0x4d
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b07      	cmp	r3, #7
 8002c20:	d00b      	beq.n	8002c3a <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002c22:	78fa      	ldrb	r2, [r7, #3]
 8002c24:	6879      	ldr	r1, [r7, #4]
 8002c26:	4613      	mov	r3, r2
 8002c28:	011b      	lsls	r3, r3, #4
 8002c2a:	1a9b      	subs	r3, r3, r2
 8002c2c:	009b      	lsls	r3, r3, #2
 8002c2e:	440b      	add	r3, r1
 8002c30:	334d      	adds	r3, #77	@ 0x4d
 8002c32:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002c34:	2b09      	cmp	r3, #9
 8002c36:	f040 80a6 	bne.w	8002d86 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c3a:	78fa      	ldrb	r2, [r7, #3]
 8002c3c:	6879      	ldr	r1, [r7, #4]
 8002c3e:	4613      	mov	r3, r2
 8002c40:	011b      	lsls	r3, r3, #4
 8002c42:	1a9b      	subs	r3, r3, r2
 8002c44:	009b      	lsls	r3, r3, #2
 8002c46:	440b      	add	r3, r1
 8002c48:	334d      	adds	r3, #77	@ 0x4d
 8002c4a:	2202      	movs	r2, #2
 8002c4c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002c4e:	78fa      	ldrb	r2, [r7, #3]
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	4613      	mov	r3, r2
 8002c54:	011b      	lsls	r3, r3, #4
 8002c56:	1a9b      	subs	r3, r3, r2
 8002c58:	009b      	lsls	r3, r3, #2
 8002c5a:	440b      	add	r3, r1
 8002c5c:	3344      	adds	r3, #68	@ 0x44
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	1c59      	adds	r1, r3, #1
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	4613      	mov	r3, r2
 8002c66:	011b      	lsls	r3, r3, #4
 8002c68:	1a9b      	subs	r3, r3, r2
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	4403      	add	r3, r0
 8002c6e:	3344      	adds	r3, #68	@ 0x44
 8002c70:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002c72:	78fa      	ldrb	r2, [r7, #3]
 8002c74:	6879      	ldr	r1, [r7, #4]
 8002c76:	4613      	mov	r3, r2
 8002c78:	011b      	lsls	r3, r3, #4
 8002c7a:	1a9b      	subs	r3, r3, r2
 8002c7c:	009b      	lsls	r3, r3, #2
 8002c7e:	440b      	add	r3, r1
 8002c80:	3344      	adds	r3, #68	@ 0x44
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2b02      	cmp	r3, #2
 8002c86:	d943      	bls.n	8002d10 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002c88:	78fa      	ldrb	r2, [r7, #3]
 8002c8a:	6879      	ldr	r1, [r7, #4]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	011b      	lsls	r3, r3, #4
 8002c90:	1a9b      	subs	r3, r3, r2
 8002c92:	009b      	lsls	r3, r3, #2
 8002c94:	440b      	add	r3, r1
 8002c96:	3344      	adds	r3, #68	@ 0x44
 8002c98:	2200      	movs	r2, #0
 8002c9a:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002c9c:	78fa      	ldrb	r2, [r7, #3]
 8002c9e:	6879      	ldr	r1, [r7, #4]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	011b      	lsls	r3, r3, #4
 8002ca4:	1a9b      	subs	r3, r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	440b      	add	r3, r1
 8002caa:	331a      	adds	r3, #26
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d123      	bne.n	8002cfa <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002cb2:	78fa      	ldrb	r2, [r7, #3]
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	011b      	lsls	r3, r3, #4
 8002cba:	1a9b      	subs	r3, r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	440b      	add	r3, r1
 8002cc0:	331b      	adds	r3, #27
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002cc6:	78fa      	ldrb	r2, [r7, #3]
 8002cc8:	6879      	ldr	r1, [r7, #4]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	011b      	lsls	r3, r3, #4
 8002cce:	1a9b      	subs	r3, r3, r2
 8002cd0:	009b      	lsls	r3, r3, #2
 8002cd2:	440b      	add	r3, r1
 8002cd4:	331c      	adds	r3, #28
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002cda:	78fb      	ldrb	r3, [r7, #3]
 8002cdc:	015a      	lsls	r2, r3, #5
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	4413      	add	r3, r2
 8002ce2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	78fa      	ldrb	r2, [r7, #3]
 8002cea:	0151      	lsls	r1, r2, #5
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	440a      	add	r2, r1
 8002cf0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002cf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002cf8:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002cfa:	78fa      	ldrb	r2, [r7, #3]
 8002cfc:	6879      	ldr	r1, [r7, #4]
 8002cfe:	4613      	mov	r3, r2
 8002d00:	011b      	lsls	r3, r3, #4
 8002d02:	1a9b      	subs	r3, r3, r2
 8002d04:	009b      	lsls	r3, r3, #2
 8002d06:	440b      	add	r3, r1
 8002d08:	334c      	adds	r3, #76	@ 0x4c
 8002d0a:	2204      	movs	r2, #4
 8002d0c:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002d0e:	e229      	b.n	8003164 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002d10:	78fa      	ldrb	r2, [r7, #3]
 8002d12:	6879      	ldr	r1, [r7, #4]
 8002d14:	4613      	mov	r3, r2
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	1a9b      	subs	r3, r3, r2
 8002d1a:	009b      	lsls	r3, r3, #2
 8002d1c:	440b      	add	r3, r1
 8002d1e:	334c      	adds	r3, #76	@ 0x4c
 8002d20:	2202      	movs	r2, #2
 8002d22:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d24:	78fa      	ldrb	r2, [r7, #3]
 8002d26:	6879      	ldr	r1, [r7, #4]
 8002d28:	4613      	mov	r3, r2
 8002d2a:	011b      	lsls	r3, r3, #4
 8002d2c:	1a9b      	subs	r3, r3, r2
 8002d2e:	009b      	lsls	r3, r3, #2
 8002d30:	440b      	add	r3, r1
 8002d32:	3326      	adds	r3, #38	@ 0x26
 8002d34:	781b      	ldrb	r3, [r3, #0]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d00b      	beq.n	8002d52 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002d3a:	78fa      	ldrb	r2, [r7, #3]
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	011b      	lsls	r3, r3, #4
 8002d42:	1a9b      	subs	r3, r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	440b      	add	r3, r1
 8002d48:	3326      	adds	r3, #38	@ 0x26
 8002d4a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002d4c:	2b02      	cmp	r3, #2
 8002d4e:	f040 8209 	bne.w	8003164 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002d52:	78fb      	ldrb	r3, [r7, #3]
 8002d54:	015a      	lsls	r2, r3, #5
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	4413      	add	r3, r2
 8002d5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002d68:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002d70:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002d72:	78fb      	ldrb	r3, [r7, #3]
 8002d74:	015a      	lsls	r2, r3, #5
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	4413      	add	r3, r2
 8002d7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d7e:	461a      	mov	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002d84:	e1ee      	b.n	8003164 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002d86:	78fa      	ldrb	r2, [r7, #3]
 8002d88:	6879      	ldr	r1, [r7, #4]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	011b      	lsls	r3, r3, #4
 8002d8e:	1a9b      	subs	r3, r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	440b      	add	r3, r1
 8002d94:	334d      	adds	r3, #77	@ 0x4d
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	2b05      	cmp	r3, #5
 8002d9a:	f040 80c8 	bne.w	8002f2e <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d9e:	78fa      	ldrb	r2, [r7, #3]
 8002da0:	6879      	ldr	r1, [r7, #4]
 8002da2:	4613      	mov	r3, r2
 8002da4:	011b      	lsls	r3, r3, #4
 8002da6:	1a9b      	subs	r3, r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	440b      	add	r3, r1
 8002dac:	334d      	adds	r3, #77	@ 0x4d
 8002dae:	2202      	movs	r2, #2
 8002db0:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002db2:	78fa      	ldrb	r2, [r7, #3]
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	4613      	mov	r3, r2
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	1a9b      	subs	r3, r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	331b      	adds	r3, #27
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	f040 81ce 	bne.w	8003166 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002dca:	78fa      	ldrb	r2, [r7, #3]
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	1a9b      	subs	r3, r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	3326      	adds	r3, #38	@ 0x26
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	2b03      	cmp	r3, #3
 8002dde:	d16b      	bne.n	8002eb8 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002de0:	78fa      	ldrb	r2, [r7, #3]
 8002de2:	6879      	ldr	r1, [r7, #4]
 8002de4:	4613      	mov	r3, r2
 8002de6:	011b      	lsls	r3, r3, #4
 8002de8:	1a9b      	subs	r3, r3, r2
 8002dea:	009b      	lsls	r3, r3, #2
 8002dec:	440b      	add	r3, r1
 8002dee:	3348      	adds	r3, #72	@ 0x48
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	1c59      	adds	r1, r3, #1
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	4613      	mov	r3, r2
 8002df8:	011b      	lsls	r3, r3, #4
 8002dfa:	1a9b      	subs	r3, r3, r2
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	4403      	add	r3, r0
 8002e00:	3348      	adds	r3, #72	@ 0x48
 8002e02:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002e04:	78fa      	ldrb	r2, [r7, #3]
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	1a9b      	subs	r3, r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	3348      	adds	r3, #72	@ 0x48
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	2b02      	cmp	r3, #2
 8002e18:	d943      	bls.n	8002ea2 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002e1a:	78fa      	ldrb	r2, [r7, #3]
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	1a9b      	subs	r3, r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	440b      	add	r3, r1
 8002e28:	3348      	adds	r3, #72	@ 0x48
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002e2e:	78fa      	ldrb	r2, [r7, #3]
 8002e30:	6879      	ldr	r1, [r7, #4]
 8002e32:	4613      	mov	r3, r2
 8002e34:	011b      	lsls	r3, r3, #4
 8002e36:	1a9b      	subs	r3, r3, r2
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	440b      	add	r3, r1
 8002e3c:	331b      	adds	r3, #27
 8002e3e:	2200      	movs	r2, #0
 8002e40:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002e42:	78fa      	ldrb	r2, [r7, #3]
 8002e44:	6879      	ldr	r1, [r7, #4]
 8002e46:	4613      	mov	r3, r2
 8002e48:	011b      	lsls	r3, r3, #4
 8002e4a:	1a9b      	subs	r3, r3, r2
 8002e4c:	009b      	lsls	r3, r3, #2
 8002e4e:	440b      	add	r3, r1
 8002e50:	3344      	adds	r3, #68	@ 0x44
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d809      	bhi.n	8002e6c <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002e58:	78fa      	ldrb	r2, [r7, #3]
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	011b      	lsls	r3, r3, #4
 8002e60:	1a9b      	subs	r3, r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	440b      	add	r3, r1
 8002e66:	331c      	adds	r3, #28
 8002e68:	2201      	movs	r2, #1
 8002e6a:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002e6c:	78fb      	ldrb	r3, [r7, #3]
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	78fa      	ldrb	r2, [r7, #3]
 8002e7c:	0151      	lsls	r1, r2, #5
 8002e7e:	693a      	ldr	r2, [r7, #16]
 8002e80:	440a      	add	r2, r1
 8002e82:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002e86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e8a:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002e8c:	78fa      	ldrb	r2, [r7, #3]
 8002e8e:	6879      	ldr	r1, [r7, #4]
 8002e90:	4613      	mov	r3, r2
 8002e92:	011b      	lsls	r3, r3, #4
 8002e94:	1a9b      	subs	r3, r3, r2
 8002e96:	009b      	lsls	r3, r3, #2
 8002e98:	440b      	add	r3, r1
 8002e9a:	334c      	adds	r3, #76	@ 0x4c
 8002e9c:	2204      	movs	r2, #4
 8002e9e:	701a      	strb	r2, [r3, #0]
 8002ea0:	e014      	b.n	8002ecc <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002ea2:	78fa      	ldrb	r2, [r7, #3]
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	334c      	adds	r3, #76	@ 0x4c
 8002eb2:	2202      	movs	r2, #2
 8002eb4:	701a      	strb	r2, [r3, #0]
 8002eb6:	e009      	b.n	8002ecc <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	1a9b      	subs	r3, r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	334c      	adds	r3, #76	@ 0x4c
 8002ec8:	2202      	movs	r2, #2
 8002eca:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ecc:	78fa      	ldrb	r2, [r7, #3]
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	1a9b      	subs	r3, r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	3326      	adds	r3, #38	@ 0x26
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d00b      	beq.n	8002efa <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002ee2:	78fa      	ldrb	r2, [r7, #3]
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	1a9b      	subs	r3, r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	440b      	add	r3, r1
 8002ef0:	3326      	adds	r3, #38	@ 0x26
 8002ef2:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	f040 8136 	bne.w	8003166 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002efa:	78fb      	ldrb	r3, [r7, #3]
 8002efc:	015a      	lsls	r2, r3, #5
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	4413      	add	r3, r2
 8002f02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002f10:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002f18:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002f1a:	78fb      	ldrb	r3, [r7, #3]
 8002f1c:	015a      	lsls	r2, r3, #5
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	4413      	add	r3, r2
 8002f22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f26:	461a      	mov	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	6013      	str	r3, [r2, #0]
 8002f2c:	e11b      	b.n	8003166 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8002f2e:	78fa      	ldrb	r2, [r7, #3]
 8002f30:	6879      	ldr	r1, [r7, #4]
 8002f32:	4613      	mov	r3, r2
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	1a9b      	subs	r3, r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	440b      	add	r3, r1
 8002f3c:	334d      	adds	r3, #77	@ 0x4d
 8002f3e:	781b      	ldrb	r3, [r3, #0]
 8002f40:	2b03      	cmp	r3, #3
 8002f42:	f040 8081 	bne.w	8003048 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f46:	78fa      	ldrb	r2, [r7, #3]
 8002f48:	6879      	ldr	r1, [r7, #4]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	011b      	lsls	r3, r3, #4
 8002f4e:	1a9b      	subs	r3, r3, r2
 8002f50:	009b      	lsls	r3, r3, #2
 8002f52:	440b      	add	r3, r1
 8002f54:	334d      	adds	r3, #77	@ 0x4d
 8002f56:	2202      	movs	r2, #2
 8002f58:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002f5a:	78fa      	ldrb	r2, [r7, #3]
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	4613      	mov	r3, r2
 8002f60:	011b      	lsls	r3, r3, #4
 8002f62:	1a9b      	subs	r3, r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	440b      	add	r3, r1
 8002f68:	331b      	adds	r3, #27
 8002f6a:	781b      	ldrb	r3, [r3, #0]
 8002f6c:	2b01      	cmp	r3, #1
 8002f6e:	f040 80fa 	bne.w	8003166 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f72:	78fa      	ldrb	r2, [r7, #3]
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	1a9b      	subs	r3, r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	334c      	adds	r3, #76	@ 0x4c
 8002f82:	2202      	movs	r2, #2
 8002f84:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8002f86:	78fb      	ldrb	r3, [r7, #3]
 8002f88:	015a      	lsls	r2, r3, #5
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	4413      	add	r3, r2
 8002f8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f92:	685b      	ldr	r3, [r3, #4]
 8002f94:	78fa      	ldrb	r2, [r7, #3]
 8002f96:	0151      	lsls	r1, r2, #5
 8002f98:	693a      	ldr	r2, [r7, #16]
 8002f9a:	440a      	add	r2, r1
 8002f9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002fa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fa4:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8002fa6:	78fb      	ldrb	r3, [r7, #3]
 8002fa8:	015a      	lsls	r2, r3, #5
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4413      	add	r3, r2
 8002fae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	78fa      	ldrb	r2, [r7, #3]
 8002fb6:	0151      	lsls	r1, r2, #5
 8002fb8:	693a      	ldr	r2, [r7, #16]
 8002fba:	440a      	add	r2, r1
 8002fbc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002fc0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fc4:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8002fc6:	78fb      	ldrb	r3, [r7, #3]
 8002fc8:	015a      	lsls	r2, r3, #5
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	4413      	add	r3, r2
 8002fce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	78fa      	ldrb	r2, [r7, #3]
 8002fd6:	0151      	lsls	r1, r2, #5
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	440a      	add	r2, r1
 8002fdc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002fe0:	f023 0320 	bic.w	r3, r3, #32
 8002fe4:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002fe6:	78fa      	ldrb	r2, [r7, #3]
 8002fe8:	6879      	ldr	r1, [r7, #4]
 8002fea:	4613      	mov	r3, r2
 8002fec:	011b      	lsls	r3, r3, #4
 8002fee:	1a9b      	subs	r3, r3, r2
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	440b      	add	r3, r1
 8002ff4:	3326      	adds	r3, #38	@ 0x26
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00b      	beq.n	8003014 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002ffc:	78fa      	ldrb	r2, [r7, #3]
 8002ffe:	6879      	ldr	r1, [r7, #4]
 8003000:	4613      	mov	r3, r2
 8003002:	011b      	lsls	r3, r3, #4
 8003004:	1a9b      	subs	r3, r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	440b      	add	r3, r1
 800300a:	3326      	adds	r3, #38	@ 0x26
 800300c:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800300e:	2b02      	cmp	r3, #2
 8003010:	f040 80a9 	bne.w	8003166 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003014:	78fb      	ldrb	r3, [r7, #3]
 8003016:	015a      	lsls	r2, r3, #5
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4413      	add	r3, r2
 800301c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800302a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003032:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003034:	78fb      	ldrb	r3, [r7, #3]
 8003036:	015a      	lsls	r2, r3, #5
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	4413      	add	r3, r2
 800303c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003040:	461a      	mov	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6013      	str	r3, [r2, #0]
 8003046:	e08e      	b.n	8003166 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003048:	78fa      	ldrb	r2, [r7, #3]
 800304a:	6879      	ldr	r1, [r7, #4]
 800304c:	4613      	mov	r3, r2
 800304e:	011b      	lsls	r3, r3, #4
 8003050:	1a9b      	subs	r3, r3, r2
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	440b      	add	r3, r1
 8003056:	334d      	adds	r3, #77	@ 0x4d
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	2b04      	cmp	r3, #4
 800305c:	d143      	bne.n	80030e6 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800305e:	78fa      	ldrb	r2, [r7, #3]
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	011b      	lsls	r3, r3, #4
 8003066:	1a9b      	subs	r3, r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	440b      	add	r3, r1
 800306c:	334d      	adds	r3, #77	@ 0x4d
 800306e:	2202      	movs	r2, #2
 8003070:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003072:	78fa      	ldrb	r2, [r7, #3]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	011b      	lsls	r3, r3, #4
 800307a:	1a9b      	subs	r3, r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	440b      	add	r3, r1
 8003080:	334c      	adds	r3, #76	@ 0x4c
 8003082:	2202      	movs	r2, #2
 8003084:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003086:	78fa      	ldrb	r2, [r7, #3]
 8003088:	6879      	ldr	r1, [r7, #4]
 800308a:	4613      	mov	r3, r2
 800308c:	011b      	lsls	r3, r3, #4
 800308e:	1a9b      	subs	r3, r3, r2
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	440b      	add	r3, r1
 8003094:	3326      	adds	r3, #38	@ 0x26
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d00a      	beq.n	80030b2 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800309c:	78fa      	ldrb	r2, [r7, #3]
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	1a9b      	subs	r3, r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	3326      	adds	r3, #38	@ 0x26
 80030ac:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030ae:	2b02      	cmp	r3, #2
 80030b0:	d159      	bne.n	8003166 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80030b2:	78fb      	ldrb	r3, [r7, #3]
 80030b4:	015a      	lsls	r2, r3, #5
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	4413      	add	r3, r2
 80030ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80030c8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80030d0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80030d2:	78fb      	ldrb	r3, [r7, #3]
 80030d4:	015a      	lsls	r2, r3, #5
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	4413      	add	r3, r2
 80030da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030de:	461a      	mov	r2, r3
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6013      	str	r3, [r2, #0]
 80030e4:	e03f      	b.n	8003166 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80030e6:	78fa      	ldrb	r2, [r7, #3]
 80030e8:	6879      	ldr	r1, [r7, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	011b      	lsls	r3, r3, #4
 80030ee:	1a9b      	subs	r3, r3, r2
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	440b      	add	r3, r1
 80030f4:	334d      	adds	r3, #77	@ 0x4d
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	2b08      	cmp	r3, #8
 80030fa:	d126      	bne.n	800314a <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030fc:	78fa      	ldrb	r2, [r7, #3]
 80030fe:	6879      	ldr	r1, [r7, #4]
 8003100:	4613      	mov	r3, r2
 8003102:	011b      	lsls	r3, r3, #4
 8003104:	1a9b      	subs	r3, r3, r2
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	440b      	add	r3, r1
 800310a:	334d      	adds	r3, #77	@ 0x4d
 800310c:	2202      	movs	r2, #2
 800310e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003110:	78fa      	ldrb	r2, [r7, #3]
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	4613      	mov	r3, r2
 8003116:	011b      	lsls	r3, r3, #4
 8003118:	1a9b      	subs	r3, r3, r2
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	440b      	add	r3, r1
 800311e:	3344      	adds	r3, #68	@ 0x44
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	1c59      	adds	r1, r3, #1
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	4613      	mov	r3, r2
 8003128:	011b      	lsls	r3, r3, #4
 800312a:	1a9b      	subs	r3, r3, r2
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	4403      	add	r3, r0
 8003130:	3344      	adds	r3, #68	@ 0x44
 8003132:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003134:	78fa      	ldrb	r2, [r7, #3]
 8003136:	6879      	ldr	r1, [r7, #4]
 8003138:	4613      	mov	r3, r2
 800313a:	011b      	lsls	r3, r3, #4
 800313c:	1a9b      	subs	r3, r3, r2
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	334c      	adds	r3, #76	@ 0x4c
 8003144:	2204      	movs	r2, #4
 8003146:	701a      	strb	r2, [r3, #0]
 8003148:	e00d      	b.n	8003166 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 800314a:	78fa      	ldrb	r2, [r7, #3]
 800314c:	6879      	ldr	r1, [r7, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	011b      	lsls	r3, r3, #4
 8003152:	1a9b      	subs	r3, r3, r2
 8003154:	009b      	lsls	r3, r3, #2
 8003156:	440b      	add	r3, r1
 8003158:	334d      	adds	r3, #77	@ 0x4d
 800315a:	781b      	ldrb	r3, [r3, #0]
 800315c:	2b02      	cmp	r3, #2
 800315e:	f000 8100 	beq.w	8003362 <HCD_HC_IN_IRQHandler+0xcca>
 8003162:	e000      	b.n	8003166 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003164:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003166:	78fa      	ldrb	r2, [r7, #3]
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	4613      	mov	r3, r2
 800316c:	011b      	lsls	r3, r3, #4
 800316e:	1a9b      	subs	r3, r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	440b      	add	r3, r1
 8003174:	334c      	adds	r3, #76	@ 0x4c
 8003176:	781a      	ldrb	r2, [r3, #0]
 8003178:	78fb      	ldrb	r3, [r7, #3]
 800317a:	4619      	mov	r1, r3
 800317c:	6878      	ldr	r0, [r7, #4]
 800317e:	f7ff fa7d 	bl	800267c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003182:	e0ef      	b.n	8003364 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	78fa      	ldrb	r2, [r7, #3]
 800318a:	4611      	mov	r1, r2
 800318c:	4618      	mov	r0, r3
 800318e:	f004 fa41 	bl	8007614 <USB_ReadChInterrupts>
 8003192:	4603      	mov	r3, r0
 8003194:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003198:	2b40      	cmp	r3, #64	@ 0x40
 800319a:	d12f      	bne.n	80031fc <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800319c:	78fb      	ldrb	r3, [r7, #3]
 800319e:	015a      	lsls	r2, r3, #5
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	4413      	add	r3, r2
 80031a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031a8:	461a      	mov	r2, r3
 80031aa:	2340      	movs	r3, #64	@ 0x40
 80031ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80031ae:	78fa      	ldrb	r2, [r7, #3]
 80031b0:	6879      	ldr	r1, [r7, #4]
 80031b2:	4613      	mov	r3, r2
 80031b4:	011b      	lsls	r3, r3, #4
 80031b6:	1a9b      	subs	r3, r3, r2
 80031b8:	009b      	lsls	r3, r3, #2
 80031ba:	440b      	add	r3, r1
 80031bc:	334d      	adds	r3, #77	@ 0x4d
 80031be:	2205      	movs	r2, #5
 80031c0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80031c2:	78fa      	ldrb	r2, [r7, #3]
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	4613      	mov	r3, r2
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	1a9b      	subs	r3, r3, r2
 80031cc:	009b      	lsls	r3, r3, #2
 80031ce:	440b      	add	r3, r1
 80031d0:	331a      	adds	r3, #26
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d109      	bne.n	80031ec <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80031d8:	78fa      	ldrb	r2, [r7, #3]
 80031da:	6879      	ldr	r1, [r7, #4]
 80031dc:	4613      	mov	r3, r2
 80031de:	011b      	lsls	r3, r3, #4
 80031e0:	1a9b      	subs	r3, r3, r2
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	440b      	add	r3, r1
 80031e6:	3344      	adds	r3, #68	@ 0x44
 80031e8:	2200      	movs	r2, #0
 80031ea:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	78fa      	ldrb	r2, [r7, #3]
 80031f2:	4611      	mov	r1, r2
 80031f4:	4618      	mov	r0, r3
 80031f6:	f004 fb7f 	bl	80078f8 <USB_HC_Halt>
 80031fa:	e0b3      	b.n	8003364 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	78fa      	ldrb	r2, [r7, #3]
 8003202:	4611      	mov	r1, r2
 8003204:	4618      	mov	r0, r3
 8003206:	f004 fa05 	bl	8007614 <USB_ReadChInterrupts>
 800320a:	4603      	mov	r3, r0
 800320c:	f003 0310 	and.w	r3, r3, #16
 8003210:	2b10      	cmp	r3, #16
 8003212:	f040 80a7 	bne.w	8003364 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003216:	78fa      	ldrb	r2, [r7, #3]
 8003218:	6879      	ldr	r1, [r7, #4]
 800321a:	4613      	mov	r3, r2
 800321c:	011b      	lsls	r3, r3, #4
 800321e:	1a9b      	subs	r3, r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	440b      	add	r3, r1
 8003224:	3326      	adds	r3, #38	@ 0x26
 8003226:	781b      	ldrb	r3, [r3, #0]
 8003228:	2b03      	cmp	r3, #3
 800322a:	d11b      	bne.n	8003264 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800322c:	78fa      	ldrb	r2, [r7, #3]
 800322e:	6879      	ldr	r1, [r7, #4]
 8003230:	4613      	mov	r3, r2
 8003232:	011b      	lsls	r3, r3, #4
 8003234:	1a9b      	subs	r3, r3, r2
 8003236:	009b      	lsls	r3, r3, #2
 8003238:	440b      	add	r3, r1
 800323a:	3344      	adds	r3, #68	@ 0x44
 800323c:	2200      	movs	r2, #0
 800323e:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003240:	78fa      	ldrb	r2, [r7, #3]
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	4613      	mov	r3, r2
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	1a9b      	subs	r3, r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	334d      	adds	r3, #77	@ 0x4d
 8003250:	2204      	movs	r2, #4
 8003252:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	78fa      	ldrb	r2, [r7, #3]
 800325a:	4611      	mov	r1, r2
 800325c:	4618      	mov	r0, r3
 800325e:	f004 fb4b 	bl	80078f8 <USB_HC_Halt>
 8003262:	e03f      	b.n	80032e4 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003264:	78fa      	ldrb	r2, [r7, #3]
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	1a9b      	subs	r3, r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	3326      	adds	r3, #38	@ 0x26
 8003274:	781b      	ldrb	r3, [r3, #0]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d00a      	beq.n	8003290 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800327a:	78fa      	ldrb	r2, [r7, #3]
 800327c:	6879      	ldr	r1, [r7, #4]
 800327e:	4613      	mov	r3, r2
 8003280:	011b      	lsls	r3, r3, #4
 8003282:	1a9b      	subs	r3, r3, r2
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	440b      	add	r3, r1
 8003288:	3326      	adds	r3, #38	@ 0x26
 800328a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800328c:	2b02      	cmp	r3, #2
 800328e:	d129      	bne.n	80032e4 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003290:	78fa      	ldrb	r2, [r7, #3]
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	1a9b      	subs	r3, r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	3344      	adds	r3, #68	@ 0x44
 80032a0:	2200      	movs	r2, #0
 80032a2:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	799b      	ldrb	r3, [r3, #6]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d00a      	beq.n	80032c2 <HCD_HC_IN_IRQHandler+0xc2a>
 80032ac:	78fa      	ldrb	r2, [r7, #3]
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	1a9b      	subs	r3, r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	331b      	adds	r3, #27
 80032bc:	781b      	ldrb	r3, [r3, #0]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d110      	bne.n	80032e4 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80032c2:	78fa      	ldrb	r2, [r7, #3]
 80032c4:	6879      	ldr	r1, [r7, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	011b      	lsls	r3, r3, #4
 80032ca:	1a9b      	subs	r3, r3, r2
 80032cc:	009b      	lsls	r3, r3, #2
 80032ce:	440b      	add	r3, r1
 80032d0:	334d      	adds	r3, #77	@ 0x4d
 80032d2:	2204      	movs	r2, #4
 80032d4:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	78fa      	ldrb	r2, [r7, #3]
 80032dc:	4611      	mov	r1, r2
 80032de:	4618      	mov	r0, r3
 80032e0:	f004 fb0a 	bl	80078f8 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80032e4:	78fa      	ldrb	r2, [r7, #3]
 80032e6:	6879      	ldr	r1, [r7, #4]
 80032e8:	4613      	mov	r3, r2
 80032ea:	011b      	lsls	r3, r3, #4
 80032ec:	1a9b      	subs	r3, r3, r2
 80032ee:	009b      	lsls	r3, r3, #2
 80032f0:	440b      	add	r3, r1
 80032f2:	331b      	adds	r3, #27
 80032f4:	781b      	ldrb	r3, [r3, #0]
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d129      	bne.n	800334e <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80032fa:	78fa      	ldrb	r2, [r7, #3]
 80032fc:	6879      	ldr	r1, [r7, #4]
 80032fe:	4613      	mov	r3, r2
 8003300:	011b      	lsls	r3, r3, #4
 8003302:	1a9b      	subs	r3, r3, r2
 8003304:	009b      	lsls	r3, r3, #2
 8003306:	440b      	add	r3, r1
 8003308:	331b      	adds	r3, #27
 800330a:	2200      	movs	r2, #0
 800330c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800330e:	78fb      	ldrb	r3, [r7, #3]
 8003310:	015a      	lsls	r2, r3, #5
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	4413      	add	r3, r2
 8003316:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	78fa      	ldrb	r2, [r7, #3]
 800331e:	0151      	lsls	r1, r2, #5
 8003320:	693a      	ldr	r2, [r7, #16]
 8003322:	440a      	add	r2, r1
 8003324:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003328:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800332c:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800332e:	78fb      	ldrb	r3, [r7, #3]
 8003330:	015a      	lsls	r2, r3, #5
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	4413      	add	r3, r2
 8003336:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	78fa      	ldrb	r2, [r7, #3]
 800333e:	0151      	lsls	r1, r2, #5
 8003340:	693a      	ldr	r2, [r7, #16]
 8003342:	440a      	add	r2, r1
 8003344:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003348:	f043 0320 	orr.w	r3, r3, #32
 800334c:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800334e:	78fb      	ldrb	r3, [r7, #3]
 8003350:	015a      	lsls	r2, r3, #5
 8003352:	693b      	ldr	r3, [r7, #16]
 8003354:	4413      	add	r3, r2
 8003356:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800335a:	461a      	mov	r2, r3
 800335c:	2310      	movs	r3, #16
 800335e:	6093      	str	r3, [r2, #8]
 8003360:	e000      	b.n	8003364 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003362:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8003364:	3718      	adds	r7, #24
 8003366:	46bd      	mov	sp, r7
 8003368:	bd80      	pop	{r7, pc}

0800336a <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800336a:	b580      	push	{r7, lr}
 800336c:	b086      	sub	sp, #24
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
 8003372:	460b      	mov	r3, r1
 8003374:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	78fa      	ldrb	r2, [r7, #3]
 8003386:	4611      	mov	r1, r2
 8003388:	4618      	mov	r0, r3
 800338a:	f004 f943 	bl	8007614 <USB_ReadChInterrupts>
 800338e:	4603      	mov	r3, r0
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b04      	cmp	r3, #4
 8003396:	d11b      	bne.n	80033d0 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8003398:	78fb      	ldrb	r3, [r7, #3]
 800339a:	015a      	lsls	r2, r3, #5
 800339c:	693b      	ldr	r3, [r7, #16]
 800339e:	4413      	add	r3, r2
 80033a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033a4:	461a      	mov	r2, r3
 80033a6:	2304      	movs	r3, #4
 80033a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80033aa:	78fa      	ldrb	r2, [r7, #3]
 80033ac:	6879      	ldr	r1, [r7, #4]
 80033ae:	4613      	mov	r3, r2
 80033b0:	011b      	lsls	r3, r3, #4
 80033b2:	1a9b      	subs	r3, r3, r2
 80033b4:	009b      	lsls	r3, r3, #2
 80033b6:	440b      	add	r3, r1
 80033b8:	334d      	adds	r3, #77	@ 0x4d
 80033ba:	2207      	movs	r2, #7
 80033bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	78fa      	ldrb	r2, [r7, #3]
 80033c4:	4611      	mov	r1, r2
 80033c6:	4618      	mov	r0, r3
 80033c8:	f004 fa96 	bl	80078f8 <USB_HC_Halt>
 80033cc:	f000 bc89 	b.w	8003ce2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	78fa      	ldrb	r2, [r7, #3]
 80033d6:	4611      	mov	r1, r2
 80033d8:	4618      	mov	r0, r3
 80033da:	f004 f91b 	bl	8007614 <USB_ReadChInterrupts>
 80033de:	4603      	mov	r3, r0
 80033e0:	f003 0320 	and.w	r3, r3, #32
 80033e4:	2b20      	cmp	r3, #32
 80033e6:	f040 8082 	bne.w	80034ee <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80033ea:	78fb      	ldrb	r3, [r7, #3]
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033f6:	461a      	mov	r2, r3
 80033f8:	2320      	movs	r3, #32
 80033fa:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	1a9b      	subs	r3, r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	3319      	adds	r3, #25
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d124      	bne.n	800345c <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003412:	78fa      	ldrb	r2, [r7, #3]
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	1a9b      	subs	r3, r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	3319      	adds	r3, #25
 8003422:	2200      	movs	r2, #0
 8003424:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003426:	78fa      	ldrb	r2, [r7, #3]
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	1a9b      	subs	r3, r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	334c      	adds	r3, #76	@ 0x4c
 8003436:	2202      	movs	r2, #2
 8003438:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 800343a:	78fa      	ldrb	r2, [r7, #3]
 800343c:	6879      	ldr	r1, [r7, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	011b      	lsls	r3, r3, #4
 8003442:	1a9b      	subs	r3, r3, r2
 8003444:	009b      	lsls	r3, r3, #2
 8003446:	440b      	add	r3, r1
 8003448:	334d      	adds	r3, #77	@ 0x4d
 800344a:	2203      	movs	r2, #3
 800344c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	78fa      	ldrb	r2, [r7, #3]
 8003454:	4611      	mov	r1, r2
 8003456:	4618      	mov	r0, r3
 8003458:	f004 fa4e 	bl	80078f8 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800345c:	78fa      	ldrb	r2, [r7, #3]
 800345e:	6879      	ldr	r1, [r7, #4]
 8003460:	4613      	mov	r3, r2
 8003462:	011b      	lsls	r3, r3, #4
 8003464:	1a9b      	subs	r3, r3, r2
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	440b      	add	r3, r1
 800346a:	331a      	adds	r3, #26
 800346c:	781b      	ldrb	r3, [r3, #0]
 800346e:	2b01      	cmp	r3, #1
 8003470:	f040 8437 	bne.w	8003ce2 <HCD_HC_OUT_IRQHandler+0x978>
 8003474:	78fa      	ldrb	r2, [r7, #3]
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	4613      	mov	r3, r2
 800347a:	011b      	lsls	r3, r3, #4
 800347c:	1a9b      	subs	r3, r3, r2
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	331b      	adds	r3, #27
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	f040 842b 	bne.w	8003ce2 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800348c:	78fa      	ldrb	r2, [r7, #3]
 800348e:	6879      	ldr	r1, [r7, #4]
 8003490:	4613      	mov	r3, r2
 8003492:	011b      	lsls	r3, r3, #4
 8003494:	1a9b      	subs	r3, r3, r2
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	440b      	add	r3, r1
 800349a:	3326      	adds	r3, #38	@ 0x26
 800349c:	781b      	ldrb	r3, [r3, #0]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d009      	beq.n	80034b6 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80034a2:	78fa      	ldrb	r2, [r7, #3]
 80034a4:	6879      	ldr	r1, [r7, #4]
 80034a6:	4613      	mov	r3, r2
 80034a8:	011b      	lsls	r3, r3, #4
 80034aa:	1a9b      	subs	r3, r3, r2
 80034ac:	009b      	lsls	r3, r3, #2
 80034ae:	440b      	add	r3, r1
 80034b0:	331b      	adds	r3, #27
 80034b2:	2201      	movs	r2, #1
 80034b4:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80034b6:	78fa      	ldrb	r2, [r7, #3]
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	4613      	mov	r3, r2
 80034bc:	011b      	lsls	r3, r3, #4
 80034be:	1a9b      	subs	r3, r3, r2
 80034c0:	009b      	lsls	r3, r3, #2
 80034c2:	440b      	add	r3, r1
 80034c4:	334d      	adds	r3, #77	@ 0x4d
 80034c6:	2203      	movs	r2, #3
 80034c8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	78fa      	ldrb	r2, [r7, #3]
 80034d0:	4611      	mov	r1, r2
 80034d2:	4618      	mov	r0, r3
 80034d4:	f004 fa10 	bl	80078f8 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80034d8:	78fa      	ldrb	r2, [r7, #3]
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	4613      	mov	r3, r2
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	1a9b      	subs	r3, r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	3344      	adds	r3, #68	@ 0x44
 80034e8:	2200      	movs	r2, #0
 80034ea:	601a      	str	r2, [r3, #0]
 80034ec:	e3f9      	b.n	8003ce2 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	78fa      	ldrb	r2, [r7, #3]
 80034f4:	4611      	mov	r1, r2
 80034f6:	4618      	mov	r0, r3
 80034f8:	f004 f88c 	bl	8007614 <USB_ReadChInterrupts>
 80034fc:	4603      	mov	r3, r0
 80034fe:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003502:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003506:	d111      	bne.n	800352c <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003508:	78fb      	ldrb	r3, [r7, #3]
 800350a:	015a      	lsls	r2, r3, #5
 800350c:	693b      	ldr	r3, [r7, #16]
 800350e:	4413      	add	r3, r2
 8003510:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003514:	461a      	mov	r2, r3
 8003516:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800351a:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	78fa      	ldrb	r2, [r7, #3]
 8003522:	4611      	mov	r1, r2
 8003524:	4618      	mov	r0, r3
 8003526:	f004 f9e7 	bl	80078f8 <USB_HC_Halt>
 800352a:	e3da      	b.n	8003ce2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	78fa      	ldrb	r2, [r7, #3]
 8003532:	4611      	mov	r1, r2
 8003534:	4618      	mov	r0, r3
 8003536:	f004 f86d 	bl	8007614 <USB_ReadChInterrupts>
 800353a:	4603      	mov	r3, r0
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b01      	cmp	r3, #1
 8003542:	d168      	bne.n	8003616 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003544:	78fa      	ldrb	r2, [r7, #3]
 8003546:	6879      	ldr	r1, [r7, #4]
 8003548:	4613      	mov	r3, r2
 800354a:	011b      	lsls	r3, r3, #4
 800354c:	1a9b      	subs	r3, r3, r2
 800354e:	009b      	lsls	r3, r3, #2
 8003550:	440b      	add	r3, r1
 8003552:	3344      	adds	r3, #68	@ 0x44
 8003554:	2200      	movs	r2, #0
 8003556:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	78fa      	ldrb	r2, [r7, #3]
 800355e:	4611      	mov	r1, r2
 8003560:	4618      	mov	r0, r3
 8003562:	f004 f857 	bl	8007614 <USB_ReadChInterrupts>
 8003566:	4603      	mov	r3, r0
 8003568:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800356c:	2b40      	cmp	r3, #64	@ 0x40
 800356e:	d112      	bne.n	8003596 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003570:	78fa      	ldrb	r2, [r7, #3]
 8003572:	6879      	ldr	r1, [r7, #4]
 8003574:	4613      	mov	r3, r2
 8003576:	011b      	lsls	r3, r3, #4
 8003578:	1a9b      	subs	r3, r3, r2
 800357a:	009b      	lsls	r3, r3, #2
 800357c:	440b      	add	r3, r1
 800357e:	3319      	adds	r3, #25
 8003580:	2201      	movs	r2, #1
 8003582:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003584:	78fb      	ldrb	r3, [r7, #3]
 8003586:	015a      	lsls	r2, r3, #5
 8003588:	693b      	ldr	r3, [r7, #16]
 800358a:	4413      	add	r3, r2
 800358c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003590:	461a      	mov	r2, r3
 8003592:	2340      	movs	r3, #64	@ 0x40
 8003594:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8003596:	78fa      	ldrb	r2, [r7, #3]
 8003598:	6879      	ldr	r1, [r7, #4]
 800359a:	4613      	mov	r3, r2
 800359c:	011b      	lsls	r3, r3, #4
 800359e:	1a9b      	subs	r3, r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	440b      	add	r3, r1
 80035a4:	331b      	adds	r3, #27
 80035a6:	781b      	ldrb	r3, [r3, #0]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d019      	beq.n	80035e0 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80035ac:	78fa      	ldrb	r2, [r7, #3]
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	4613      	mov	r3, r2
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	1a9b      	subs	r3, r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	331b      	adds	r3, #27
 80035bc:	2200      	movs	r2, #0
 80035be:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80035c0:	78fb      	ldrb	r3, [r7, #3]
 80035c2:	015a      	lsls	r2, r3, #5
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	4413      	add	r3, r2
 80035c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	78fa      	ldrb	r2, [r7, #3]
 80035d0:	0151      	lsls	r1, r2, #5
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	440a      	add	r2, r1
 80035d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80035da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80035de:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80035e0:	78fb      	ldrb	r3, [r7, #3]
 80035e2:	015a      	lsls	r2, r3, #5
 80035e4:	693b      	ldr	r3, [r7, #16]
 80035e6:	4413      	add	r3, r2
 80035e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035ec:	461a      	mov	r2, r3
 80035ee:	2301      	movs	r3, #1
 80035f0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80035f2:	78fa      	ldrb	r2, [r7, #3]
 80035f4:	6879      	ldr	r1, [r7, #4]
 80035f6:	4613      	mov	r3, r2
 80035f8:	011b      	lsls	r3, r3, #4
 80035fa:	1a9b      	subs	r3, r3, r2
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	440b      	add	r3, r1
 8003600:	334d      	adds	r3, #77	@ 0x4d
 8003602:	2201      	movs	r2, #1
 8003604:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	78fa      	ldrb	r2, [r7, #3]
 800360c:	4611      	mov	r1, r2
 800360e:	4618      	mov	r0, r3
 8003610:	f004 f972 	bl	80078f8 <USB_HC_Halt>
 8003614:	e365      	b.n	8003ce2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	78fa      	ldrb	r2, [r7, #3]
 800361c:	4611      	mov	r1, r2
 800361e:	4618      	mov	r0, r3
 8003620:	f003 fff8 	bl	8007614 <USB_ReadChInterrupts>
 8003624:	4603      	mov	r3, r0
 8003626:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800362a:	2b40      	cmp	r3, #64	@ 0x40
 800362c:	d139      	bne.n	80036a2 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800362e:	78fa      	ldrb	r2, [r7, #3]
 8003630:	6879      	ldr	r1, [r7, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	1a9b      	subs	r3, r3, r2
 8003638:	009b      	lsls	r3, r3, #2
 800363a:	440b      	add	r3, r1
 800363c:	334d      	adds	r3, #77	@ 0x4d
 800363e:	2205      	movs	r2, #5
 8003640:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003642:	78fa      	ldrb	r2, [r7, #3]
 8003644:	6879      	ldr	r1, [r7, #4]
 8003646:	4613      	mov	r3, r2
 8003648:	011b      	lsls	r3, r3, #4
 800364a:	1a9b      	subs	r3, r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	440b      	add	r3, r1
 8003650:	331a      	adds	r3, #26
 8003652:	781b      	ldrb	r3, [r3, #0]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d109      	bne.n	800366c <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003658:	78fa      	ldrb	r2, [r7, #3]
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	011b      	lsls	r3, r3, #4
 8003660:	1a9b      	subs	r3, r3, r2
 8003662:	009b      	lsls	r3, r3, #2
 8003664:	440b      	add	r3, r1
 8003666:	3319      	adds	r3, #25
 8003668:	2201      	movs	r2, #1
 800366a:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800366c:	78fa      	ldrb	r2, [r7, #3]
 800366e:	6879      	ldr	r1, [r7, #4]
 8003670:	4613      	mov	r3, r2
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	1a9b      	subs	r3, r3, r2
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	3344      	adds	r3, #68	@ 0x44
 800367c:	2200      	movs	r2, #0
 800367e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	78fa      	ldrb	r2, [r7, #3]
 8003686:	4611      	mov	r1, r2
 8003688:	4618      	mov	r0, r3
 800368a:	f004 f935 	bl	80078f8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800368e:	78fb      	ldrb	r3, [r7, #3]
 8003690:	015a      	lsls	r2, r3, #5
 8003692:	693b      	ldr	r3, [r7, #16]
 8003694:	4413      	add	r3, r2
 8003696:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800369a:	461a      	mov	r2, r3
 800369c:	2340      	movs	r3, #64	@ 0x40
 800369e:	6093      	str	r3, [r2, #8]
 80036a0:	e31f      	b.n	8003ce2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	78fa      	ldrb	r2, [r7, #3]
 80036a8:	4611      	mov	r1, r2
 80036aa:	4618      	mov	r0, r3
 80036ac:	f003 ffb2 	bl	8007614 <USB_ReadChInterrupts>
 80036b0:	4603      	mov	r3, r0
 80036b2:	f003 0308 	and.w	r3, r3, #8
 80036b6:	2b08      	cmp	r3, #8
 80036b8:	d11a      	bne.n	80036f0 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80036ba:	78fb      	ldrb	r3, [r7, #3]
 80036bc:	015a      	lsls	r2, r3, #5
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	4413      	add	r3, r2
 80036c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036c6:	461a      	mov	r2, r3
 80036c8:	2308      	movs	r3, #8
 80036ca:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80036cc:	78fa      	ldrb	r2, [r7, #3]
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	4613      	mov	r3, r2
 80036d2:	011b      	lsls	r3, r3, #4
 80036d4:	1a9b      	subs	r3, r3, r2
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	440b      	add	r3, r1
 80036da:	334d      	adds	r3, #77	@ 0x4d
 80036dc:	2206      	movs	r2, #6
 80036de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	78fa      	ldrb	r2, [r7, #3]
 80036e6:	4611      	mov	r1, r2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f004 f905 	bl	80078f8 <USB_HC_Halt>
 80036ee:	e2f8      	b.n	8003ce2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	78fa      	ldrb	r2, [r7, #3]
 80036f6:	4611      	mov	r1, r2
 80036f8:	4618      	mov	r0, r3
 80036fa:	f003 ff8b 	bl	8007614 <USB_ReadChInterrupts>
 80036fe:	4603      	mov	r3, r0
 8003700:	f003 0310 	and.w	r3, r3, #16
 8003704:	2b10      	cmp	r3, #16
 8003706:	d144      	bne.n	8003792 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003708:	78fa      	ldrb	r2, [r7, #3]
 800370a:	6879      	ldr	r1, [r7, #4]
 800370c:	4613      	mov	r3, r2
 800370e:	011b      	lsls	r3, r3, #4
 8003710:	1a9b      	subs	r3, r3, r2
 8003712:	009b      	lsls	r3, r3, #2
 8003714:	440b      	add	r3, r1
 8003716:	3344      	adds	r3, #68	@ 0x44
 8003718:	2200      	movs	r2, #0
 800371a:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800371c:	78fa      	ldrb	r2, [r7, #3]
 800371e:	6879      	ldr	r1, [r7, #4]
 8003720:	4613      	mov	r3, r2
 8003722:	011b      	lsls	r3, r3, #4
 8003724:	1a9b      	subs	r3, r3, r2
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	440b      	add	r3, r1
 800372a:	334d      	adds	r3, #77	@ 0x4d
 800372c:	2204      	movs	r2, #4
 800372e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003730:	78fa      	ldrb	r2, [r7, #3]
 8003732:	6879      	ldr	r1, [r7, #4]
 8003734:	4613      	mov	r3, r2
 8003736:	011b      	lsls	r3, r3, #4
 8003738:	1a9b      	subs	r3, r3, r2
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	440b      	add	r3, r1
 800373e:	3319      	adds	r3, #25
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d114      	bne.n	8003770 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003746:	78fa      	ldrb	r2, [r7, #3]
 8003748:	6879      	ldr	r1, [r7, #4]
 800374a:	4613      	mov	r3, r2
 800374c:	011b      	lsls	r3, r3, #4
 800374e:	1a9b      	subs	r3, r3, r2
 8003750:	009b      	lsls	r3, r3, #2
 8003752:	440b      	add	r3, r1
 8003754:	3318      	adds	r3, #24
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d109      	bne.n	8003770 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800375c:	78fa      	ldrb	r2, [r7, #3]
 800375e:	6879      	ldr	r1, [r7, #4]
 8003760:	4613      	mov	r3, r2
 8003762:	011b      	lsls	r3, r3, #4
 8003764:	1a9b      	subs	r3, r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	440b      	add	r3, r1
 800376a:	3319      	adds	r3, #25
 800376c:	2201      	movs	r2, #1
 800376e:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	78fa      	ldrb	r2, [r7, #3]
 8003776:	4611      	mov	r1, r2
 8003778:	4618      	mov	r0, r3
 800377a:	f004 f8bd 	bl	80078f8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800377e:	78fb      	ldrb	r3, [r7, #3]
 8003780:	015a      	lsls	r2, r3, #5
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	4413      	add	r3, r2
 8003786:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800378a:	461a      	mov	r2, r3
 800378c:	2310      	movs	r3, #16
 800378e:	6093      	str	r3, [r2, #8]
 8003790:	e2a7      	b.n	8003ce2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	78fa      	ldrb	r2, [r7, #3]
 8003798:	4611      	mov	r1, r2
 800379a:	4618      	mov	r0, r3
 800379c:	f003 ff3a 	bl	8007614 <USB_ReadChInterrupts>
 80037a0:	4603      	mov	r3, r0
 80037a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037a6:	2b80      	cmp	r3, #128	@ 0x80
 80037a8:	f040 8083 	bne.w	80038b2 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	799b      	ldrb	r3, [r3, #6]
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d111      	bne.n	80037d8 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80037b4:	78fa      	ldrb	r2, [r7, #3]
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	4613      	mov	r3, r2
 80037ba:	011b      	lsls	r3, r3, #4
 80037bc:	1a9b      	subs	r3, r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	334d      	adds	r3, #77	@ 0x4d
 80037c4:	2207      	movs	r2, #7
 80037c6:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	78fa      	ldrb	r2, [r7, #3]
 80037ce:	4611      	mov	r1, r2
 80037d0:	4618      	mov	r0, r3
 80037d2:	f004 f891 	bl	80078f8 <USB_HC_Halt>
 80037d6:	e062      	b.n	800389e <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80037d8:	78fa      	ldrb	r2, [r7, #3]
 80037da:	6879      	ldr	r1, [r7, #4]
 80037dc:	4613      	mov	r3, r2
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	1a9b      	subs	r3, r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	440b      	add	r3, r1
 80037e6:	3344      	adds	r3, #68	@ 0x44
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	1c59      	adds	r1, r3, #1
 80037ec:	6878      	ldr	r0, [r7, #4]
 80037ee:	4613      	mov	r3, r2
 80037f0:	011b      	lsls	r3, r3, #4
 80037f2:	1a9b      	subs	r3, r3, r2
 80037f4:	009b      	lsls	r3, r3, #2
 80037f6:	4403      	add	r3, r0
 80037f8:	3344      	adds	r3, #68	@ 0x44
 80037fa:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80037fc:	78fa      	ldrb	r2, [r7, #3]
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	4613      	mov	r3, r2
 8003802:	011b      	lsls	r3, r3, #4
 8003804:	1a9b      	subs	r3, r3, r2
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	440b      	add	r3, r1
 800380a:	3344      	adds	r3, #68	@ 0x44
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2b02      	cmp	r3, #2
 8003810:	d922      	bls.n	8003858 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003812:	78fa      	ldrb	r2, [r7, #3]
 8003814:	6879      	ldr	r1, [r7, #4]
 8003816:	4613      	mov	r3, r2
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	1a9b      	subs	r3, r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	440b      	add	r3, r1
 8003820:	3344      	adds	r3, #68	@ 0x44
 8003822:	2200      	movs	r2, #0
 8003824:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003826:	78fa      	ldrb	r2, [r7, #3]
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	1a9b      	subs	r3, r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	440b      	add	r3, r1
 8003834:	334c      	adds	r3, #76	@ 0x4c
 8003836:	2204      	movs	r2, #4
 8003838:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800383a:	78fa      	ldrb	r2, [r7, #3]
 800383c:	6879      	ldr	r1, [r7, #4]
 800383e:	4613      	mov	r3, r2
 8003840:	011b      	lsls	r3, r3, #4
 8003842:	1a9b      	subs	r3, r3, r2
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	440b      	add	r3, r1
 8003848:	334c      	adds	r3, #76	@ 0x4c
 800384a:	781a      	ldrb	r2, [r3, #0]
 800384c:	78fb      	ldrb	r3, [r7, #3]
 800384e:	4619      	mov	r1, r3
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f7fe ff13 	bl	800267c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003856:	e022      	b.n	800389e <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003858:	78fa      	ldrb	r2, [r7, #3]
 800385a:	6879      	ldr	r1, [r7, #4]
 800385c:	4613      	mov	r3, r2
 800385e:	011b      	lsls	r3, r3, #4
 8003860:	1a9b      	subs	r3, r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	440b      	add	r3, r1
 8003866:	334c      	adds	r3, #76	@ 0x4c
 8003868:	2202      	movs	r2, #2
 800386a:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800386c:	78fb      	ldrb	r3, [r7, #3]
 800386e:	015a      	lsls	r2, r3, #5
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	4413      	add	r3, r2
 8003874:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003882:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800388a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800388c:	78fb      	ldrb	r3, [r7, #3]
 800388e:	015a      	lsls	r2, r3, #5
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	4413      	add	r3, r2
 8003894:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003898:	461a      	mov	r2, r3
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 800389e:	78fb      	ldrb	r3, [r7, #3]
 80038a0:	015a      	lsls	r2, r3, #5
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038aa:	461a      	mov	r2, r3
 80038ac:	2380      	movs	r3, #128	@ 0x80
 80038ae:	6093      	str	r3, [r2, #8]
 80038b0:	e217      	b.n	8003ce2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	78fa      	ldrb	r2, [r7, #3]
 80038b8:	4611      	mov	r1, r2
 80038ba:	4618      	mov	r0, r3
 80038bc:	f003 feaa 	bl	8007614 <USB_ReadChInterrupts>
 80038c0:	4603      	mov	r3, r0
 80038c2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80038c6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80038ca:	d11b      	bne.n	8003904 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80038cc:	78fa      	ldrb	r2, [r7, #3]
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	4613      	mov	r3, r2
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	334d      	adds	r3, #77	@ 0x4d
 80038dc:	2209      	movs	r2, #9
 80038de:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	78fa      	ldrb	r2, [r7, #3]
 80038e6:	4611      	mov	r1, r2
 80038e8:	4618      	mov	r0, r3
 80038ea:	f004 f805 	bl	80078f8 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80038ee:	78fb      	ldrb	r3, [r7, #3]
 80038f0:	015a      	lsls	r2, r3, #5
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	4413      	add	r3, r2
 80038f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038fa:	461a      	mov	r2, r3
 80038fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003900:	6093      	str	r3, [r2, #8]
 8003902:	e1ee      	b.n	8003ce2 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	78fa      	ldrb	r2, [r7, #3]
 800390a:	4611      	mov	r1, r2
 800390c:	4618      	mov	r0, r3
 800390e:	f003 fe81 	bl	8007614 <USB_ReadChInterrupts>
 8003912:	4603      	mov	r3, r0
 8003914:	f003 0302 	and.w	r3, r3, #2
 8003918:	2b02      	cmp	r3, #2
 800391a:	f040 81df 	bne.w	8003cdc <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 800391e:	78fb      	ldrb	r3, [r7, #3]
 8003920:	015a      	lsls	r2, r3, #5
 8003922:	693b      	ldr	r3, [r7, #16]
 8003924:	4413      	add	r3, r2
 8003926:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800392a:	461a      	mov	r2, r3
 800392c:	2302      	movs	r3, #2
 800392e:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003930:	78fa      	ldrb	r2, [r7, #3]
 8003932:	6879      	ldr	r1, [r7, #4]
 8003934:	4613      	mov	r3, r2
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	1a9b      	subs	r3, r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	440b      	add	r3, r1
 800393e:	334d      	adds	r3, #77	@ 0x4d
 8003940:	781b      	ldrb	r3, [r3, #0]
 8003942:	2b01      	cmp	r3, #1
 8003944:	f040 8093 	bne.w	8003a6e <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003948:	78fa      	ldrb	r2, [r7, #3]
 800394a:	6879      	ldr	r1, [r7, #4]
 800394c:	4613      	mov	r3, r2
 800394e:	011b      	lsls	r3, r3, #4
 8003950:	1a9b      	subs	r3, r3, r2
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	440b      	add	r3, r1
 8003956:	334d      	adds	r3, #77	@ 0x4d
 8003958:	2202      	movs	r2, #2
 800395a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800395c:	78fa      	ldrb	r2, [r7, #3]
 800395e:	6879      	ldr	r1, [r7, #4]
 8003960:	4613      	mov	r3, r2
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	1a9b      	subs	r3, r3, r2
 8003966:	009b      	lsls	r3, r3, #2
 8003968:	440b      	add	r3, r1
 800396a:	334c      	adds	r3, #76	@ 0x4c
 800396c:	2201      	movs	r2, #1
 800396e:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003970:	78fa      	ldrb	r2, [r7, #3]
 8003972:	6879      	ldr	r1, [r7, #4]
 8003974:	4613      	mov	r3, r2
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	1a9b      	subs	r3, r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	440b      	add	r3, r1
 800397e:	3326      	adds	r3, #38	@ 0x26
 8003980:	781b      	ldrb	r3, [r3, #0]
 8003982:	2b02      	cmp	r3, #2
 8003984:	d00b      	beq.n	800399e <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003986:	78fa      	ldrb	r2, [r7, #3]
 8003988:	6879      	ldr	r1, [r7, #4]
 800398a:	4613      	mov	r3, r2
 800398c:	011b      	lsls	r3, r3, #4
 800398e:	1a9b      	subs	r3, r3, r2
 8003990:	009b      	lsls	r3, r3, #2
 8003992:	440b      	add	r3, r1
 8003994:	3326      	adds	r3, #38	@ 0x26
 8003996:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003998:	2b03      	cmp	r3, #3
 800399a:	f040 8190 	bne.w	8003cbe <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	799b      	ldrb	r3, [r3, #6]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d115      	bne.n	80039d2 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 80039a6:	78fa      	ldrb	r2, [r7, #3]
 80039a8:	6879      	ldr	r1, [r7, #4]
 80039aa:	4613      	mov	r3, r2
 80039ac:	011b      	lsls	r3, r3, #4
 80039ae:	1a9b      	subs	r3, r3, r2
 80039b0:	009b      	lsls	r3, r3, #2
 80039b2:	440b      	add	r3, r1
 80039b4:	333d      	adds	r3, #61	@ 0x3d
 80039b6:	781b      	ldrb	r3, [r3, #0]
 80039b8:	78fa      	ldrb	r2, [r7, #3]
 80039ba:	f083 0301 	eor.w	r3, r3, #1
 80039be:	b2d8      	uxtb	r0, r3
 80039c0:	6879      	ldr	r1, [r7, #4]
 80039c2:	4613      	mov	r3, r2
 80039c4:	011b      	lsls	r3, r3, #4
 80039c6:	1a9b      	subs	r3, r3, r2
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	440b      	add	r3, r1
 80039cc:	333d      	adds	r3, #61	@ 0x3d
 80039ce:	4602      	mov	r2, r0
 80039d0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	799b      	ldrb	r3, [r3, #6]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	f040 8171 	bne.w	8003cbe <HCD_HC_OUT_IRQHandler+0x954>
 80039dc:	78fa      	ldrb	r2, [r7, #3]
 80039de:	6879      	ldr	r1, [r7, #4]
 80039e0:	4613      	mov	r3, r2
 80039e2:	011b      	lsls	r3, r3, #4
 80039e4:	1a9b      	subs	r3, r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	440b      	add	r3, r1
 80039ea:	3334      	adds	r3, #52	@ 0x34
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	f000 8165 	beq.w	8003cbe <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80039f4:	78fa      	ldrb	r2, [r7, #3]
 80039f6:	6879      	ldr	r1, [r7, #4]
 80039f8:	4613      	mov	r3, r2
 80039fa:	011b      	lsls	r3, r3, #4
 80039fc:	1a9b      	subs	r3, r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	440b      	add	r3, r1
 8003a02:	3334      	adds	r3, #52	@ 0x34
 8003a04:	6819      	ldr	r1, [r3, #0]
 8003a06:	78fa      	ldrb	r2, [r7, #3]
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	011b      	lsls	r3, r3, #4
 8003a0e:	1a9b      	subs	r3, r3, r2
 8003a10:	009b      	lsls	r3, r3, #2
 8003a12:	4403      	add	r3, r0
 8003a14:	3328      	adds	r3, #40	@ 0x28
 8003a16:	881b      	ldrh	r3, [r3, #0]
 8003a18:	440b      	add	r3, r1
 8003a1a:	1e59      	subs	r1, r3, #1
 8003a1c:	78fa      	ldrb	r2, [r7, #3]
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	4613      	mov	r3, r2
 8003a22:	011b      	lsls	r3, r3, #4
 8003a24:	1a9b      	subs	r3, r3, r2
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	4403      	add	r3, r0
 8003a2a:	3328      	adds	r3, #40	@ 0x28
 8003a2c:	881b      	ldrh	r3, [r3, #0]
 8003a2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003a32:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003a34:	68bb      	ldr	r3, [r7, #8]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	f000 813f 	beq.w	8003cbe <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003a40:	78fa      	ldrb	r2, [r7, #3]
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	4613      	mov	r3, r2
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	1a9b      	subs	r3, r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	333d      	adds	r3, #61	@ 0x3d
 8003a50:	781b      	ldrb	r3, [r3, #0]
 8003a52:	78fa      	ldrb	r2, [r7, #3]
 8003a54:	f083 0301 	eor.w	r3, r3, #1
 8003a58:	b2d8      	uxtb	r0, r3
 8003a5a:	6879      	ldr	r1, [r7, #4]
 8003a5c:	4613      	mov	r3, r2
 8003a5e:	011b      	lsls	r3, r3, #4
 8003a60:	1a9b      	subs	r3, r3, r2
 8003a62:	009b      	lsls	r3, r3, #2
 8003a64:	440b      	add	r3, r1
 8003a66:	333d      	adds	r3, #61	@ 0x3d
 8003a68:	4602      	mov	r2, r0
 8003a6a:	701a      	strb	r2, [r3, #0]
 8003a6c:	e127      	b.n	8003cbe <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003a6e:	78fa      	ldrb	r2, [r7, #3]
 8003a70:	6879      	ldr	r1, [r7, #4]
 8003a72:	4613      	mov	r3, r2
 8003a74:	011b      	lsls	r3, r3, #4
 8003a76:	1a9b      	subs	r3, r3, r2
 8003a78:	009b      	lsls	r3, r3, #2
 8003a7a:	440b      	add	r3, r1
 8003a7c:	334d      	adds	r3, #77	@ 0x4d
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d120      	bne.n	8003ac6 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a84:	78fa      	ldrb	r2, [r7, #3]
 8003a86:	6879      	ldr	r1, [r7, #4]
 8003a88:	4613      	mov	r3, r2
 8003a8a:	011b      	lsls	r3, r3, #4
 8003a8c:	1a9b      	subs	r3, r3, r2
 8003a8e:	009b      	lsls	r3, r3, #2
 8003a90:	440b      	add	r3, r1
 8003a92:	334d      	adds	r3, #77	@ 0x4d
 8003a94:	2202      	movs	r2, #2
 8003a96:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003a98:	78fa      	ldrb	r2, [r7, #3]
 8003a9a:	6879      	ldr	r1, [r7, #4]
 8003a9c:	4613      	mov	r3, r2
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	1a9b      	subs	r3, r3, r2
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	440b      	add	r3, r1
 8003aa6:	331b      	adds	r3, #27
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	f040 8107 	bne.w	8003cbe <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ab0:	78fa      	ldrb	r2, [r7, #3]
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	4613      	mov	r3, r2
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	1a9b      	subs	r3, r3, r2
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	440b      	add	r3, r1
 8003abe:	334c      	adds	r3, #76	@ 0x4c
 8003ac0:	2202      	movs	r2, #2
 8003ac2:	701a      	strb	r2, [r3, #0]
 8003ac4:	e0fb      	b.n	8003cbe <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003ac6:	78fa      	ldrb	r2, [r7, #3]
 8003ac8:	6879      	ldr	r1, [r7, #4]
 8003aca:	4613      	mov	r3, r2
 8003acc:	011b      	lsls	r3, r3, #4
 8003ace:	1a9b      	subs	r3, r3, r2
 8003ad0:	009b      	lsls	r3, r3, #2
 8003ad2:	440b      	add	r3, r1
 8003ad4:	334d      	adds	r3, #77	@ 0x4d
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	2b04      	cmp	r3, #4
 8003ada:	d13a      	bne.n	8003b52 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003adc:	78fa      	ldrb	r2, [r7, #3]
 8003ade:	6879      	ldr	r1, [r7, #4]
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	011b      	lsls	r3, r3, #4
 8003ae4:	1a9b      	subs	r3, r3, r2
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	440b      	add	r3, r1
 8003aea:	334d      	adds	r3, #77	@ 0x4d
 8003aec:	2202      	movs	r2, #2
 8003aee:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003af0:	78fa      	ldrb	r2, [r7, #3]
 8003af2:	6879      	ldr	r1, [r7, #4]
 8003af4:	4613      	mov	r3, r2
 8003af6:	011b      	lsls	r3, r3, #4
 8003af8:	1a9b      	subs	r3, r3, r2
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	440b      	add	r3, r1
 8003afe:	334c      	adds	r3, #76	@ 0x4c
 8003b00:	2202      	movs	r2, #2
 8003b02:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003b04:	78fa      	ldrb	r2, [r7, #3]
 8003b06:	6879      	ldr	r1, [r7, #4]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	011b      	lsls	r3, r3, #4
 8003b0c:	1a9b      	subs	r3, r3, r2
 8003b0e:	009b      	lsls	r3, r3, #2
 8003b10:	440b      	add	r3, r1
 8003b12:	331b      	adds	r3, #27
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	2b01      	cmp	r3, #1
 8003b18:	f040 80d1 	bne.w	8003cbe <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003b1c:	78fa      	ldrb	r2, [r7, #3]
 8003b1e:	6879      	ldr	r1, [r7, #4]
 8003b20:	4613      	mov	r3, r2
 8003b22:	011b      	lsls	r3, r3, #4
 8003b24:	1a9b      	subs	r3, r3, r2
 8003b26:	009b      	lsls	r3, r3, #2
 8003b28:	440b      	add	r3, r1
 8003b2a:	331b      	adds	r3, #27
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003b30:	78fb      	ldrb	r3, [r7, #3]
 8003b32:	015a      	lsls	r2, r3, #5
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	4413      	add	r3, r2
 8003b38:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	78fa      	ldrb	r2, [r7, #3]
 8003b40:	0151      	lsls	r1, r2, #5
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	440a      	add	r2, r1
 8003b46:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003b4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003b4e:	6053      	str	r3, [r2, #4]
 8003b50:	e0b5      	b.n	8003cbe <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003b52:	78fa      	ldrb	r2, [r7, #3]
 8003b54:	6879      	ldr	r1, [r7, #4]
 8003b56:	4613      	mov	r3, r2
 8003b58:	011b      	lsls	r3, r3, #4
 8003b5a:	1a9b      	subs	r3, r3, r2
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	440b      	add	r3, r1
 8003b60:	334d      	adds	r3, #77	@ 0x4d
 8003b62:	781b      	ldrb	r3, [r3, #0]
 8003b64:	2b05      	cmp	r3, #5
 8003b66:	d114      	bne.n	8003b92 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b68:	78fa      	ldrb	r2, [r7, #3]
 8003b6a:	6879      	ldr	r1, [r7, #4]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	011b      	lsls	r3, r3, #4
 8003b70:	1a9b      	subs	r3, r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	440b      	add	r3, r1
 8003b76:	334d      	adds	r3, #77	@ 0x4d
 8003b78:	2202      	movs	r2, #2
 8003b7a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003b7c:	78fa      	ldrb	r2, [r7, #3]
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	4613      	mov	r3, r2
 8003b82:	011b      	lsls	r3, r3, #4
 8003b84:	1a9b      	subs	r3, r3, r2
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	440b      	add	r3, r1
 8003b8a:	334c      	adds	r3, #76	@ 0x4c
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	701a      	strb	r2, [r3, #0]
 8003b90:	e095      	b.n	8003cbe <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003b92:	78fa      	ldrb	r2, [r7, #3]
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	4613      	mov	r3, r2
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	1a9b      	subs	r3, r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	440b      	add	r3, r1
 8003ba0:	334d      	adds	r3, #77	@ 0x4d
 8003ba2:	781b      	ldrb	r3, [r3, #0]
 8003ba4:	2b06      	cmp	r3, #6
 8003ba6:	d114      	bne.n	8003bd2 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ba8:	78fa      	ldrb	r2, [r7, #3]
 8003baa:	6879      	ldr	r1, [r7, #4]
 8003bac:	4613      	mov	r3, r2
 8003bae:	011b      	lsls	r3, r3, #4
 8003bb0:	1a9b      	subs	r3, r3, r2
 8003bb2:	009b      	lsls	r3, r3, #2
 8003bb4:	440b      	add	r3, r1
 8003bb6:	334d      	adds	r3, #77	@ 0x4d
 8003bb8:	2202      	movs	r2, #2
 8003bba:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003bbc:	78fa      	ldrb	r2, [r7, #3]
 8003bbe:	6879      	ldr	r1, [r7, #4]
 8003bc0:	4613      	mov	r3, r2
 8003bc2:	011b      	lsls	r3, r3, #4
 8003bc4:	1a9b      	subs	r3, r3, r2
 8003bc6:	009b      	lsls	r3, r3, #2
 8003bc8:	440b      	add	r3, r1
 8003bca:	334c      	adds	r3, #76	@ 0x4c
 8003bcc:	2205      	movs	r2, #5
 8003bce:	701a      	strb	r2, [r3, #0]
 8003bd0:	e075      	b.n	8003cbe <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003bd2:	78fa      	ldrb	r2, [r7, #3]
 8003bd4:	6879      	ldr	r1, [r7, #4]
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	011b      	lsls	r3, r3, #4
 8003bda:	1a9b      	subs	r3, r3, r2
 8003bdc:	009b      	lsls	r3, r3, #2
 8003bde:	440b      	add	r3, r1
 8003be0:	334d      	adds	r3, #77	@ 0x4d
 8003be2:	781b      	ldrb	r3, [r3, #0]
 8003be4:	2b07      	cmp	r3, #7
 8003be6:	d00a      	beq.n	8003bfe <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003be8:	78fa      	ldrb	r2, [r7, #3]
 8003bea:	6879      	ldr	r1, [r7, #4]
 8003bec:	4613      	mov	r3, r2
 8003bee:	011b      	lsls	r3, r3, #4
 8003bf0:	1a9b      	subs	r3, r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	440b      	add	r3, r1
 8003bf6:	334d      	adds	r3, #77	@ 0x4d
 8003bf8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003bfa:	2b09      	cmp	r3, #9
 8003bfc:	d170      	bne.n	8003ce0 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003bfe:	78fa      	ldrb	r2, [r7, #3]
 8003c00:	6879      	ldr	r1, [r7, #4]
 8003c02:	4613      	mov	r3, r2
 8003c04:	011b      	lsls	r3, r3, #4
 8003c06:	1a9b      	subs	r3, r3, r2
 8003c08:	009b      	lsls	r3, r3, #2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	334d      	adds	r3, #77	@ 0x4d
 8003c0e:	2202      	movs	r2, #2
 8003c10:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003c12:	78fa      	ldrb	r2, [r7, #3]
 8003c14:	6879      	ldr	r1, [r7, #4]
 8003c16:	4613      	mov	r3, r2
 8003c18:	011b      	lsls	r3, r3, #4
 8003c1a:	1a9b      	subs	r3, r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	440b      	add	r3, r1
 8003c20:	3344      	adds	r3, #68	@ 0x44
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	1c59      	adds	r1, r3, #1
 8003c26:	6878      	ldr	r0, [r7, #4]
 8003c28:	4613      	mov	r3, r2
 8003c2a:	011b      	lsls	r3, r3, #4
 8003c2c:	1a9b      	subs	r3, r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	4403      	add	r3, r0
 8003c32:	3344      	adds	r3, #68	@ 0x44
 8003c34:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c36:	78fa      	ldrb	r2, [r7, #3]
 8003c38:	6879      	ldr	r1, [r7, #4]
 8003c3a:	4613      	mov	r3, r2
 8003c3c:	011b      	lsls	r3, r3, #4
 8003c3e:	1a9b      	subs	r3, r3, r2
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	440b      	add	r3, r1
 8003c44:	3344      	adds	r3, #68	@ 0x44
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	2b02      	cmp	r3, #2
 8003c4a:	d914      	bls.n	8003c76 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003c4c:	78fa      	ldrb	r2, [r7, #3]
 8003c4e:	6879      	ldr	r1, [r7, #4]
 8003c50:	4613      	mov	r3, r2
 8003c52:	011b      	lsls	r3, r3, #4
 8003c54:	1a9b      	subs	r3, r3, r2
 8003c56:	009b      	lsls	r3, r3, #2
 8003c58:	440b      	add	r3, r1
 8003c5a:	3344      	adds	r3, #68	@ 0x44
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003c60:	78fa      	ldrb	r2, [r7, #3]
 8003c62:	6879      	ldr	r1, [r7, #4]
 8003c64:	4613      	mov	r3, r2
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	1a9b      	subs	r3, r3, r2
 8003c6a:	009b      	lsls	r3, r3, #2
 8003c6c:	440b      	add	r3, r1
 8003c6e:	334c      	adds	r3, #76	@ 0x4c
 8003c70:	2204      	movs	r2, #4
 8003c72:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003c74:	e022      	b.n	8003cbc <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003c76:	78fa      	ldrb	r2, [r7, #3]
 8003c78:	6879      	ldr	r1, [r7, #4]
 8003c7a:	4613      	mov	r3, r2
 8003c7c:	011b      	lsls	r3, r3, #4
 8003c7e:	1a9b      	subs	r3, r3, r2
 8003c80:	009b      	lsls	r3, r3, #2
 8003c82:	440b      	add	r3, r1
 8003c84:	334c      	adds	r3, #76	@ 0x4c
 8003c86:	2202      	movs	r2, #2
 8003c88:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003c8a:	78fb      	ldrb	r3, [r7, #3]
 8003c8c:	015a      	lsls	r2, r3, #5
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	4413      	add	r3, r2
 8003c92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003ca0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ca8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003caa:	78fb      	ldrb	r3, [r7, #3]
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003cbc:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003cbe:	78fa      	ldrb	r2, [r7, #3]
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	011b      	lsls	r3, r3, #4
 8003cc6:	1a9b      	subs	r3, r3, r2
 8003cc8:	009b      	lsls	r3, r3, #2
 8003cca:	440b      	add	r3, r1
 8003ccc:	334c      	adds	r3, #76	@ 0x4c
 8003cce:	781a      	ldrb	r2, [r3, #0]
 8003cd0:	78fb      	ldrb	r3, [r7, #3]
 8003cd2:	4619      	mov	r1, r3
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7fe fcd1 	bl	800267c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003cda:	e002      	b.n	8003ce2 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003cdc:	bf00      	nop
 8003cde:	e000      	b.n	8003ce2 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003ce0:	bf00      	nop
  }
}
 8003ce2:	3718      	adds	r7, #24
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	bd80      	pop	{r7, pc}

08003ce8 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b08a      	sub	sp, #40	@ 0x28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cf8:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6a1b      	ldr	r3, [r3, #32]
 8003d00:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	f003 030f 	and.w	r3, r3, #15
 8003d08:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003d0a:	69fb      	ldr	r3, [r7, #28]
 8003d0c:	0c5b      	lsrs	r3, r3, #17
 8003d0e:	f003 030f 	and.w	r3, r3, #15
 8003d12:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	091b      	lsrs	r3, r3, #4
 8003d18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003d1c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003d1e:	697b      	ldr	r3, [r7, #20]
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	d004      	beq.n	8003d2e <HCD_RXQLVL_IRQHandler+0x46>
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	2b05      	cmp	r3, #5
 8003d28:	f000 80b6 	beq.w	8003e98 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003d2c:	e0b7      	b.n	8003e9e <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	f000 80b3 	beq.w	8003e9c <HCD_RXQLVL_IRQHandler+0x1b4>
 8003d36:	6879      	ldr	r1, [r7, #4]
 8003d38:	69ba      	ldr	r2, [r7, #24]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	011b      	lsls	r3, r3, #4
 8003d3e:	1a9b      	subs	r3, r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	440b      	add	r3, r1
 8003d44:	332c      	adds	r3, #44	@ 0x2c
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 80a7 	beq.w	8003e9c <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	69ba      	ldr	r2, [r7, #24]
 8003d52:	4613      	mov	r3, r2
 8003d54:	011b      	lsls	r3, r3, #4
 8003d56:	1a9b      	subs	r3, r3, r2
 8003d58:	009b      	lsls	r3, r3, #2
 8003d5a:	440b      	add	r3, r1
 8003d5c:	3338      	adds	r3, #56	@ 0x38
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	693b      	ldr	r3, [r7, #16]
 8003d62:	18d1      	adds	r1, r2, r3
 8003d64:	6878      	ldr	r0, [r7, #4]
 8003d66:	69ba      	ldr	r2, [r7, #24]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	1a9b      	subs	r3, r3, r2
 8003d6e:	009b      	lsls	r3, r3, #2
 8003d70:	4403      	add	r3, r0
 8003d72:	3334      	adds	r3, #52	@ 0x34
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4299      	cmp	r1, r3
 8003d78:	f200 8083 	bhi.w	8003e82 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6818      	ldr	r0, [r3, #0]
 8003d80:	6879      	ldr	r1, [r7, #4]
 8003d82:	69ba      	ldr	r2, [r7, #24]
 8003d84:	4613      	mov	r3, r2
 8003d86:	011b      	lsls	r3, r3, #4
 8003d88:	1a9b      	subs	r3, r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	332c      	adds	r3, #44	@ 0x2c
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	693a      	ldr	r2, [r7, #16]
 8003d94:	b292      	uxth	r2, r2
 8003d96:	4619      	mov	r1, r3
 8003d98:	f003 fbd1 	bl	800753e <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	69ba      	ldr	r2, [r7, #24]
 8003da0:	4613      	mov	r3, r2
 8003da2:	011b      	lsls	r3, r3, #4
 8003da4:	1a9b      	subs	r3, r3, r2
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	440b      	add	r3, r1
 8003daa:	332c      	adds	r3, #44	@ 0x2c
 8003dac:	681a      	ldr	r2, [r3, #0]
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	18d1      	adds	r1, r2, r3
 8003db2:	6878      	ldr	r0, [r7, #4]
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	4613      	mov	r3, r2
 8003db8:	011b      	lsls	r3, r3, #4
 8003dba:	1a9b      	subs	r3, r3, r2
 8003dbc:	009b      	lsls	r3, r3, #2
 8003dbe:	4403      	add	r3, r0
 8003dc0:	332c      	adds	r3, #44	@ 0x2c
 8003dc2:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003dc4:	6879      	ldr	r1, [r7, #4]
 8003dc6:	69ba      	ldr	r2, [r7, #24]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	011b      	lsls	r3, r3, #4
 8003dcc:	1a9b      	subs	r3, r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	3338      	adds	r3, #56	@ 0x38
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	18d1      	adds	r1, r2, r3
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	4613      	mov	r3, r2
 8003de0:	011b      	lsls	r3, r3, #4
 8003de2:	1a9b      	subs	r3, r3, r2
 8003de4:	009b      	lsls	r3, r3, #2
 8003de6:	4403      	add	r3, r0
 8003de8:	3338      	adds	r3, #56	@ 0x38
 8003dea:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	015a      	lsls	r2, r3, #5
 8003df0:	6a3b      	ldr	r3, [r7, #32]
 8003df2:	4413      	add	r3, r2
 8003df4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	0cdb      	lsrs	r3, r3, #19
 8003dfc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003e00:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003e02:	6879      	ldr	r1, [r7, #4]
 8003e04:	69ba      	ldr	r2, [r7, #24]
 8003e06:	4613      	mov	r3, r2
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	1a9b      	subs	r3, r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	440b      	add	r3, r1
 8003e10:	3328      	adds	r3, #40	@ 0x28
 8003e12:	881b      	ldrh	r3, [r3, #0]
 8003e14:	461a      	mov	r2, r3
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	4293      	cmp	r3, r2
 8003e1a:	d13f      	bne.n	8003e9c <HCD_RXQLVL_IRQHandler+0x1b4>
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d03c      	beq.n	8003e9c <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	015a      	lsls	r2, r3, #5
 8003e26:	6a3b      	ldr	r3, [r7, #32]
 8003e28:	4413      	add	r3, r2
 8003e2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003e38:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003e40:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003e42:	69bb      	ldr	r3, [r7, #24]
 8003e44:	015a      	lsls	r2, r3, #5
 8003e46:	6a3b      	ldr	r3, [r7, #32]
 8003e48:	4413      	add	r3, r2
 8003e4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e4e:	461a      	mov	r2, r3
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003e54:	6879      	ldr	r1, [r7, #4]
 8003e56:	69ba      	ldr	r2, [r7, #24]
 8003e58:	4613      	mov	r3, r2
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	1a9b      	subs	r3, r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	333c      	adds	r3, #60	@ 0x3c
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	f083 0301 	eor.w	r3, r3, #1
 8003e6a:	b2d8      	uxtb	r0, r3
 8003e6c:	6879      	ldr	r1, [r7, #4]
 8003e6e:	69ba      	ldr	r2, [r7, #24]
 8003e70:	4613      	mov	r3, r2
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	1a9b      	subs	r3, r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	333c      	adds	r3, #60	@ 0x3c
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	701a      	strb	r2, [r3, #0]
      break;
 8003e80:	e00c      	b.n	8003e9c <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003e82:	6879      	ldr	r1, [r7, #4]
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	4613      	mov	r3, r2
 8003e88:	011b      	lsls	r3, r3, #4
 8003e8a:	1a9b      	subs	r3, r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	440b      	add	r3, r1
 8003e90:	334c      	adds	r3, #76	@ 0x4c
 8003e92:	2204      	movs	r2, #4
 8003e94:	701a      	strb	r2, [r3, #0]
      break;
 8003e96:	e001      	b.n	8003e9c <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003e98:	bf00      	nop
 8003e9a:	e000      	b.n	8003e9e <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003e9c:	bf00      	nop
  }
}
 8003e9e:	bf00      	nop
 8003ea0:	3728      	adds	r7, #40	@ 0x28
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b086      	sub	sp, #24
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eb4:	697b      	ldr	r3, [r7, #20]
 8003eb6:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003eb8:	693b      	ldr	r3, [r7, #16]
 8003eba:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003ed2:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f003 0302 	and.w	r3, r3, #2
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d10b      	bne.n	8003ef6 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	f003 0301 	and.w	r3, r3, #1
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d102      	bne.n	8003eee <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003ee8:	6878      	ldr	r0, [r7, #4]
 8003eea:	f7fe fb9f 	bl	800262c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	f043 0302 	orr.w	r3, r3, #2
 8003ef4:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f003 0308 	and.w	r3, r3, #8
 8003efc:	2b08      	cmp	r3, #8
 8003efe:	d132      	bne.n	8003f66 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003f00:	68bb      	ldr	r3, [r7, #8]
 8003f02:	f043 0308 	orr.w	r3, r3, #8
 8003f06:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f003 0304 	and.w	r3, r3, #4
 8003f0e:	2b04      	cmp	r3, #4
 8003f10:	d126      	bne.n	8003f60 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	7a5b      	ldrb	r3, [r3, #9]
 8003f16:	2b02      	cmp	r3, #2
 8003f18:	d113      	bne.n	8003f42 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003f20:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003f24:	d106      	bne.n	8003f34 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	2102      	movs	r1, #2
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f003 fc95 	bl	800785c <USB_InitFSLSPClkSel>
 8003f32:	e011      	b.n	8003f58 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	2101      	movs	r1, #1
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f003 fc8e 	bl	800785c <USB_InitFSLSPClkSel>
 8003f40:	e00a      	b.n	8003f58 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	79db      	ldrb	r3, [r3, #7]
 8003f46:	2b01      	cmp	r3, #1
 8003f48:	d106      	bne.n	8003f58 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8003f50:	461a      	mov	r2, r3
 8003f52:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8003f56:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003f58:	6878      	ldr	r0, [r7, #4]
 8003f5a:	f7fe fb7b 	bl	8002654 <HAL_HCD_PortEnabled_Callback>
 8003f5e:	e002      	b.n	8003f66 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003f60:	6878      	ldr	r0, [r7, #4]
 8003f62:	f7fe fb81 	bl	8002668 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f003 0320 	and.w	r3, r3, #32
 8003f6c:	2b20      	cmp	r3, #32
 8003f6e:	d103      	bne.n	8003f78 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	f043 0320 	orr.w	r3, r3, #32
 8003f76:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003f7e:	461a      	mov	r2, r3
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	6013      	str	r3, [r2, #0]
}
 8003f84:	bf00      	nop
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d101      	bne.n	8003f9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e12b      	b.n	80041f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d106      	bne.n	8003fb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2200      	movs	r2, #0
 8003fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7fd f84e 	bl	8001054 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2224      	movs	r2, #36	@ 0x24
 8003fbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681a      	ldr	r2, [r3, #0]
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f022 0201 	bic.w	r2, r2, #1
 8003fce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003fde:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ff0:	f001 f964 	bl	80052bc <HAL_RCC_GetPCLK1Freq>
 8003ff4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	4a81      	ldr	r2, [pc, #516]	@ (8004200 <HAL_I2C_Init+0x274>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d807      	bhi.n	8004010 <HAL_I2C_Init+0x84>
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	4a80      	ldr	r2, [pc, #512]	@ (8004204 <HAL_I2C_Init+0x278>)
 8004004:	4293      	cmp	r3, r2
 8004006:	bf94      	ite	ls
 8004008:	2301      	movls	r3, #1
 800400a:	2300      	movhi	r3, #0
 800400c:	b2db      	uxtb	r3, r3
 800400e:	e006      	b.n	800401e <HAL_I2C_Init+0x92>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	4a7d      	ldr	r2, [pc, #500]	@ (8004208 <HAL_I2C_Init+0x27c>)
 8004014:	4293      	cmp	r3, r2
 8004016:	bf94      	ite	ls
 8004018:	2301      	movls	r3, #1
 800401a:	2300      	movhi	r3, #0
 800401c:	b2db      	uxtb	r3, r3
 800401e:	2b00      	cmp	r3, #0
 8004020:	d001      	beq.n	8004026 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e0e7      	b.n	80041f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	4a78      	ldr	r2, [pc, #480]	@ (800420c <HAL_I2C_Init+0x280>)
 800402a:	fba2 2303 	umull	r2, r3, r2, r3
 800402e:	0c9b      	lsrs	r3, r3, #18
 8004030:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	68ba      	ldr	r2, [r7, #8]
 8004042:	430a      	orrs	r2, r1
 8004044:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6a1b      	ldr	r3, [r3, #32]
 800404c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	4a6a      	ldr	r2, [pc, #424]	@ (8004200 <HAL_I2C_Init+0x274>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d802      	bhi.n	8004060 <HAL_I2C_Init+0xd4>
 800405a:	68bb      	ldr	r3, [r7, #8]
 800405c:	3301      	adds	r3, #1
 800405e:	e009      	b.n	8004074 <HAL_I2C_Init+0xe8>
 8004060:	68bb      	ldr	r3, [r7, #8]
 8004062:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004066:	fb02 f303 	mul.w	r3, r2, r3
 800406a:	4a69      	ldr	r2, [pc, #420]	@ (8004210 <HAL_I2C_Init+0x284>)
 800406c:	fba2 2303 	umull	r2, r3, r2, r3
 8004070:	099b      	lsrs	r3, r3, #6
 8004072:	3301      	adds	r3, #1
 8004074:	687a      	ldr	r2, [r7, #4]
 8004076:	6812      	ldr	r2, [r2, #0]
 8004078:	430b      	orrs	r3, r1
 800407a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	69db      	ldr	r3, [r3, #28]
 8004082:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004086:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	685b      	ldr	r3, [r3, #4]
 800408e:	495c      	ldr	r1, [pc, #368]	@ (8004200 <HAL_I2C_Init+0x274>)
 8004090:	428b      	cmp	r3, r1
 8004092:	d819      	bhi.n	80040c8 <HAL_I2C_Init+0x13c>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	1e59      	subs	r1, r3, #1
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	685b      	ldr	r3, [r3, #4]
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	fbb1 f3f3 	udiv	r3, r1, r3
 80040a2:	1c59      	adds	r1, r3, #1
 80040a4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80040a8:	400b      	ands	r3, r1
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00a      	beq.n	80040c4 <HAL_I2C_Init+0x138>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	1e59      	subs	r1, r3, #1
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	685b      	ldr	r3, [r3, #4]
 80040b6:	005b      	lsls	r3, r3, #1
 80040b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80040bc:	3301      	adds	r3, #1
 80040be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040c2:	e051      	b.n	8004168 <HAL_I2C_Init+0x1dc>
 80040c4:	2304      	movs	r3, #4
 80040c6:	e04f      	b.n	8004168 <HAL_I2C_Init+0x1dc>
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	689b      	ldr	r3, [r3, #8]
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d111      	bne.n	80040f4 <HAL_I2C_Init+0x168>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	1e58      	subs	r0, r3, #1
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6859      	ldr	r1, [r3, #4]
 80040d8:	460b      	mov	r3, r1
 80040da:	005b      	lsls	r3, r3, #1
 80040dc:	440b      	add	r3, r1
 80040de:	fbb0 f3f3 	udiv	r3, r0, r3
 80040e2:	3301      	adds	r3, #1
 80040e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	bf0c      	ite	eq
 80040ec:	2301      	moveq	r3, #1
 80040ee:	2300      	movne	r3, #0
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	e012      	b.n	800411a <HAL_I2C_Init+0x18e>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	1e58      	subs	r0, r3, #1
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6859      	ldr	r1, [r3, #4]
 80040fc:	460b      	mov	r3, r1
 80040fe:	009b      	lsls	r3, r3, #2
 8004100:	440b      	add	r3, r1
 8004102:	0099      	lsls	r1, r3, #2
 8004104:	440b      	add	r3, r1
 8004106:	fbb0 f3f3 	udiv	r3, r0, r3
 800410a:	3301      	adds	r3, #1
 800410c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004110:	2b00      	cmp	r3, #0
 8004112:	bf0c      	ite	eq
 8004114:	2301      	moveq	r3, #1
 8004116:	2300      	movne	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	2b00      	cmp	r3, #0
 800411c:	d001      	beq.n	8004122 <HAL_I2C_Init+0x196>
 800411e:	2301      	movs	r3, #1
 8004120:	e022      	b.n	8004168 <HAL_I2C_Init+0x1dc>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	2b00      	cmp	r3, #0
 8004128:	d10e      	bne.n	8004148 <HAL_I2C_Init+0x1bc>
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1e58      	subs	r0, r3, #1
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6859      	ldr	r1, [r3, #4]
 8004132:	460b      	mov	r3, r1
 8004134:	005b      	lsls	r3, r3, #1
 8004136:	440b      	add	r3, r1
 8004138:	fbb0 f3f3 	udiv	r3, r0, r3
 800413c:	3301      	adds	r3, #1
 800413e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004142:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004146:	e00f      	b.n	8004168 <HAL_I2C_Init+0x1dc>
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	1e58      	subs	r0, r3, #1
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6859      	ldr	r1, [r3, #4]
 8004150:	460b      	mov	r3, r1
 8004152:	009b      	lsls	r3, r3, #2
 8004154:	440b      	add	r3, r1
 8004156:	0099      	lsls	r1, r3, #2
 8004158:	440b      	add	r3, r1
 800415a:	fbb0 f3f3 	udiv	r3, r0, r3
 800415e:	3301      	adds	r3, #1
 8004160:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004164:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	6809      	ldr	r1, [r1, #0]
 800416c:	4313      	orrs	r3, r2
 800416e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	69da      	ldr	r2, [r3, #28]
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	431a      	orrs	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004196:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	6911      	ldr	r1, [r2, #16]
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	68d2      	ldr	r2, [r2, #12]
 80041a2:	4311      	orrs	r1, r2
 80041a4:	687a      	ldr	r2, [r7, #4]
 80041a6:	6812      	ldr	r2, [r2, #0]
 80041a8:	430b      	orrs	r3, r1
 80041aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	695a      	ldr	r2, [r3, #20]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0201 	orr.w	r2, r2, #1
 80041d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2200      	movs	r2, #0
 80041dc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2220      	movs	r2, #32
 80041e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	bf00      	nop
 8004200:	000186a0 	.word	0x000186a0
 8004204:	001e847f 	.word	0x001e847f
 8004208:	003d08ff 	.word	0x003d08ff
 800420c:	431bde83 	.word	0x431bde83
 8004210:	10624dd3 	.word	0x10624dd3

08004214 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004214:	b480      	push	{r7}
 8004216:	b083      	sub	sp, #12
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b20      	cmp	r3, #32
 8004228:	d129      	bne.n	800427e <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2224      	movs	r2, #36	@ 0x24
 800422e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0201 	bic.w	r2, r2, #1
 8004240:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 0210 	bic.w	r2, r2, #16
 8004250:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	683a      	ldr	r2, [r7, #0]
 800425e:	430a      	orrs	r2, r1
 8004260:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f042 0201 	orr.w	r2, r2, #1
 8004270:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2220      	movs	r2, #32
 8004276:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 800427a:	2300      	movs	r3, #0
 800427c:	e000      	b.n	8004280 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 800427e:	2302      	movs	r3, #2
  }
}
 8004280:	4618      	mov	r0, r3
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800428c:	b480      	push	{r7}
 800428e:	b085      	sub	sp, #20
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8004296:	2300      	movs	r3, #0
 8004298:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042a0:	b2db      	uxtb	r3, r3
 80042a2:	2b20      	cmp	r3, #32
 80042a4:	d12a      	bne.n	80042fc <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2224      	movs	r2, #36	@ 0x24
 80042aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 0201 	bic.w	r2, r2, #1
 80042bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042c4:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80042c6:	89fb      	ldrh	r3, [r7, #14]
 80042c8:	f023 030f 	bic.w	r3, r3, #15
 80042cc:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	b29a      	uxth	r2, r3
 80042d2:	89fb      	ldrh	r3, [r7, #14]
 80042d4:	4313      	orrs	r3, r2
 80042d6:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	89fa      	ldrh	r2, [r7, #14]
 80042de:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f042 0201 	orr.w	r2, r2, #1
 80042ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2220      	movs	r2, #32
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 80042f8:	2300      	movs	r3, #0
 80042fa:	e000      	b.n	80042fe <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80042fc:	2302      	movs	r3, #2
  }
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3714      	adds	r7, #20
 8004302:	46bd      	mov	sp, r7
 8004304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004308:	4770      	bx	lr
	...

0800430c <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b084      	sub	sp, #16
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d101      	bne.n	800431e <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e0bf      	b.n	800449e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8004324:	b2db      	uxtb	r3, r3
 8004326:	2b00      	cmp	r3, #0
 8004328:	d106      	bne.n	8004338 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	f7fc fef8 	bl	8001128 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2202      	movs	r2, #2
 800433c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	699a      	ldr	r2, [r3, #24]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800434e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	6999      	ldr	r1, [r3, #24]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	685a      	ldr	r2, [r3, #4]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	689b      	ldr	r3, [r3, #8]
 800435e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004364:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	691b      	ldr	r3, [r3, #16]
 800436a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	430a      	orrs	r2, r1
 8004372:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	6899      	ldr	r1, [r3, #8]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681a      	ldr	r2, [r3, #0]
 800437e:	4b4a      	ldr	r3, [pc, #296]	@ (80044a8 <HAL_LTDC_Init+0x19c>)
 8004380:	400b      	ands	r3, r1
 8004382:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	041b      	lsls	r3, r3, #16
 800438a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	6899      	ldr	r1, [r3, #8]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	699a      	ldr	r2, [r3, #24]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	431a      	orrs	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	430a      	orrs	r2, r1
 80043a0:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	68d9      	ldr	r1, [r3, #12]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	4b3e      	ldr	r3, [pc, #248]	@ (80044a8 <HAL_LTDC_Init+0x19c>)
 80043ae:	400b      	ands	r3, r1
 80043b0:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	041b      	lsls	r3, r3, #16
 80043b8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68d9      	ldr	r1, [r3, #12]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6a1a      	ldr	r2, [r3, #32]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	431a      	orrs	r2, r3
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	430a      	orrs	r2, r1
 80043ce:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	6919      	ldr	r1, [r3, #16]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	4b33      	ldr	r3, [pc, #204]	@ (80044a8 <HAL_LTDC_Init+0x19c>)
 80043dc:	400b      	ands	r3, r1
 80043de:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043e4:	041b      	lsls	r3, r3, #16
 80043e6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	6919      	ldr	r1, [r3, #16]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	431a      	orrs	r2, r3
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	430a      	orrs	r2, r1
 80043fc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6959      	ldr	r1, [r3, #20]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	4b27      	ldr	r3, [pc, #156]	@ (80044a8 <HAL_LTDC_Init+0x19c>)
 800440a:	400b      	ands	r3, r1
 800440c:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004412:	041b      	lsls	r3, r3, #16
 8004414:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	6959      	ldr	r1, [r3, #20]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	431a      	orrs	r2, r3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	430a      	orrs	r2, r1
 800442a:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004432:	021b      	lsls	r3, r3, #8
 8004434:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800443c:	041b      	lsls	r3, r3, #16
 800443e:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800444e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004456:	68ba      	ldr	r2, [r7, #8]
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	4313      	orrs	r3, r2
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004462:	431a      	orrs	r2, r3
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	430a      	orrs	r2, r1
 800446a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f042 0206 	orr.w	r2, r2, #6
 800447a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	699a      	ldr	r2, [r3, #24]
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f042 0201 	orr.w	r2, r2, #1
 800448a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2200      	movs	r2, #0
 8004490:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3710      	adds	r7, #16
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	f000f800 	.word	0xf000f800

080044ac <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b084      	sub	sp, #16
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044ba:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80044c2:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f003 0304 	and.w	r3, r3, #4
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d023      	beq.n	8004516 <HAL_LTDC_IRQHandler+0x6a>
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	f003 0304 	and.w	r3, r3, #4
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d01e      	beq.n	8004516 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f022 0204 	bic.w	r2, r2, #4
 80044e6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	2204      	movs	r2, #4
 80044ee:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80044f6:	f043 0201 	orr.w	r2, r3, #1
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2204      	movs	r2, #4
 8004504:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004510:	6878      	ldr	r0, [r7, #4]
 8004512:	f000 f86f 	bl	80045f4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f003 0302 	and.w	r3, r3, #2
 800451c:	2b00      	cmp	r3, #0
 800451e:	d023      	beq.n	8004568 <HAL_LTDC_IRQHandler+0xbc>
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d01e      	beq.n	8004568 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f022 0202 	bic.w	r2, r2, #2
 8004538:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2202      	movs	r2, #2
 8004540:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004548:	f043 0202 	orr.w	r2, r3, #2
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2204      	movs	r2, #4
 8004556:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f846 	bl	80045f4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	f003 0301 	and.w	r3, r3, #1
 800456e:	2b00      	cmp	r3, #0
 8004570:	d01b      	beq.n	80045aa <HAL_LTDC_IRQHandler+0xfe>
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	f003 0301 	and.w	r3, r3, #1
 8004578:	2b00      	cmp	r3, #0
 800457a:	d016      	beq.n	80045aa <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f022 0201 	bic.w	r2, r2, #1
 800458a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	2201      	movs	r2, #1
 8004592:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2201      	movs	r2, #1
 8004598:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f000 f82f 	bl	8004608 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f003 0308 	and.w	r3, r3, #8
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d01b      	beq.n	80045ec <HAL_LTDC_IRQHandler+0x140>
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	f003 0308 	and.w	r3, r3, #8
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d016      	beq.n	80045ec <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f022 0208 	bic.w	r2, r2, #8
 80045cc:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2208      	movs	r2, #8
 80045d4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2200      	movs	r2, #0
 80045e2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 f818 	bl	800461c <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80045ec:	bf00      	nop
 80045ee:	3710      	adds	r7, #16
 80045f0:	46bd      	mov	sp, r7
 80045f2:	bd80      	pop	{r7, pc}

080045f4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80045fc:	bf00      	nop
 80045fe:	370c      	adds	r7, #12
 8004600:	46bd      	mov	sp, r7
 8004602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004606:	4770      	bx	lr

08004608 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004608:	b480      	push	{r7}
 800460a:	b083      	sub	sp, #12
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004610:	bf00      	nop
 8004612:	370c      	adds	r7, #12
 8004614:	46bd      	mov	sp, r7
 8004616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461a:	4770      	bx	lr

0800461c <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800461c:	b480      	push	{r7}
 800461e:	b083      	sub	sp, #12
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr

08004630 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004630:	b5b0      	push	{r4, r5, r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004642:	2b01      	cmp	r3, #1
 8004644:	d101      	bne.n	800464a <HAL_LTDC_ConfigLayer+0x1a>
 8004646:	2302      	movs	r3, #2
 8004648:	e02c      	b.n	80046a4 <HAL_LTDC_ConfigLayer+0x74>
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2202      	movs	r2, #2
 8004656:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	2134      	movs	r1, #52	@ 0x34
 8004660:	fb01 f303 	mul.w	r3, r1, r3
 8004664:	4413      	add	r3, r2
 8004666:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	4614      	mov	r4, r2
 800466e:	461d      	mov	r5, r3
 8004670:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004672:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004674:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004676:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004678:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800467a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800467c:	682b      	ldr	r3, [r5, #0]
 800467e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004680:	687a      	ldr	r2, [r7, #4]
 8004682:	68b9      	ldr	r1, [r7, #8]
 8004684:	68f8      	ldr	r0, [r7, #12]
 8004686:	f000 f811 	bl	80046ac <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	2201      	movs	r2, #1
 8004690:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	2200      	movs	r2, #0
 800469e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bdb0      	pop	{r4, r5, r7, pc}

080046ac <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b089      	sub	sp, #36	@ 0x24
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	60f8      	str	r0, [r7, #12]
 80046b4:	60b9      	str	r1, [r7, #8]
 80046b6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80046b8:	68bb      	ldr	r3, [r7, #8]
 80046ba:	685a      	ldr	r2, [r3, #4]
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	0c1b      	lsrs	r3, r3, #16
 80046c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046c8:	4413      	add	r3, r2
 80046ca:	041b      	lsls	r3, r3, #16
 80046cc:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	461a      	mov	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	01db      	lsls	r3, r3, #7
 80046d8:	4413      	add	r3, r2
 80046da:	3384      	adds	r3, #132	@ 0x84
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	68fa      	ldr	r2, [r7, #12]
 80046e0:	6812      	ldr	r2, [r2, #0]
 80046e2:	4611      	mov	r1, r2
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	01d2      	lsls	r2, r2, #7
 80046e8:	440a      	add	r2, r1
 80046ea:	3284      	adds	r2, #132	@ 0x84
 80046ec:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80046f0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	0c1b      	lsrs	r3, r3, #16
 80046fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004702:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004704:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4619      	mov	r1, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	01db      	lsls	r3, r3, #7
 8004710:	440b      	add	r3, r1
 8004712:	3384      	adds	r3, #132	@ 0x84
 8004714:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800471a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	68da      	ldr	r2, [r3, #12]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68db      	ldr	r3, [r3, #12]
 8004726:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800472a:	4413      	add	r3, r2
 800472c:	041b      	lsls	r3, r3, #16
 800472e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	461a      	mov	r2, r3
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	01db      	lsls	r3, r3, #7
 800473a:	4413      	add	r3, r2
 800473c:	3384      	adds	r3, #132	@ 0x84
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	68fa      	ldr	r2, [r7, #12]
 8004742:	6812      	ldr	r2, [r2, #0]
 8004744:	4611      	mov	r1, r2
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	01d2      	lsls	r2, r2, #7
 800474a:	440a      	add	r2, r1
 800474c:	3284      	adds	r2, #132	@ 0x84
 800474e:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004752:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	689a      	ldr	r2, [r3, #8]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004762:	4413      	add	r3, r2
 8004764:	1c5a      	adds	r2, r3, #1
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4619      	mov	r1, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	01db      	lsls	r3, r3, #7
 8004770:	440b      	add	r3, r1
 8004772:	3384      	adds	r3, #132	@ 0x84
 8004774:	4619      	mov	r1, r3
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	4313      	orrs	r3, r2
 800477a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	461a      	mov	r2, r3
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	01db      	lsls	r3, r3, #7
 8004786:	4413      	add	r3, r2
 8004788:	3384      	adds	r3, #132	@ 0x84
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	68fa      	ldr	r2, [r7, #12]
 800478e:	6812      	ldr	r2, [r2, #0]
 8004790:	4611      	mov	r1, r2
 8004792:	687a      	ldr	r2, [r7, #4]
 8004794:	01d2      	lsls	r2, r2, #7
 8004796:	440a      	add	r2, r1
 8004798:	3284      	adds	r2, #132	@ 0x84
 800479a:	f023 0307 	bic.w	r3, r3, #7
 800479e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	461a      	mov	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	01db      	lsls	r3, r3, #7
 80047aa:	4413      	add	r3, r2
 80047ac:	3384      	adds	r3, #132	@ 0x84
 80047ae:	461a      	mov	r2, r3
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80047b6:	68bb      	ldr	r3, [r7, #8]
 80047b8:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80047bc:	021b      	lsls	r3, r3, #8
 80047be:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80047c6:	041b      	lsls	r3, r3, #16
 80047c8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	699b      	ldr	r3, [r3, #24]
 80047ce:	061b      	lsls	r3, r3, #24
 80047d0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	461a      	mov	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	01db      	lsls	r3, r3, #7
 80047dc:	4413      	add	r3, r2
 80047de:	3384      	adds	r3, #132	@ 0x84
 80047e0:	699b      	ldr	r3, [r3, #24]
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	461a      	mov	r2, r3
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	01db      	lsls	r3, r3, #7
 80047ec:	4413      	add	r3, r2
 80047ee:	3384      	adds	r3, #132	@ 0x84
 80047f0:	461a      	mov	r2, r3
 80047f2:	2300      	movs	r3, #0
 80047f4:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80047fc:	461a      	mov	r2, r3
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	431a      	orrs	r2, r3
 8004802:	69bb      	ldr	r3, [r7, #24]
 8004804:	431a      	orrs	r2, r3
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4619      	mov	r1, r3
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	01db      	lsls	r3, r3, #7
 8004810:	440b      	add	r3, r1
 8004812:	3384      	adds	r3, #132	@ 0x84
 8004814:	4619      	mov	r1, r3
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	4313      	orrs	r3, r2
 800481a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	461a      	mov	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	01db      	lsls	r3, r3, #7
 8004826:	4413      	add	r3, r2
 8004828:	3384      	adds	r3, #132	@ 0x84
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	68fa      	ldr	r2, [r7, #12]
 800482e:	6812      	ldr	r2, [r2, #0]
 8004830:	4611      	mov	r1, r2
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	01d2      	lsls	r2, r2, #7
 8004836:	440a      	add	r2, r1
 8004838:	3284      	adds	r2, #132	@ 0x84
 800483a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800483e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	461a      	mov	r2, r3
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	01db      	lsls	r3, r3, #7
 800484a:	4413      	add	r3, r2
 800484c:	3384      	adds	r3, #132	@ 0x84
 800484e:	461a      	mov	r2, r3
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	695b      	ldr	r3, [r3, #20]
 8004854:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	461a      	mov	r2, r3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	01db      	lsls	r3, r3, #7
 8004860:	4413      	add	r3, r2
 8004862:	3384      	adds	r3, #132	@ 0x84
 8004864:	69db      	ldr	r3, [r3, #28]
 8004866:	68fa      	ldr	r2, [r7, #12]
 8004868:	6812      	ldr	r2, [r2, #0]
 800486a:	4611      	mov	r1, r2
 800486c:	687a      	ldr	r2, [r7, #4]
 800486e:	01d2      	lsls	r2, r2, #7
 8004870:	440a      	add	r2, r1
 8004872:	3284      	adds	r2, #132	@ 0x84
 8004874:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004878:	f023 0307 	bic.w	r3, r3, #7
 800487c:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800487e:	68bb      	ldr	r3, [r7, #8]
 8004880:	69da      	ldr	r2, [r3, #28]
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	6a1b      	ldr	r3, [r3, #32]
 8004886:	68f9      	ldr	r1, [r7, #12]
 8004888:	6809      	ldr	r1, [r1, #0]
 800488a:	4608      	mov	r0, r1
 800488c:	6879      	ldr	r1, [r7, #4]
 800488e:	01c9      	lsls	r1, r1, #7
 8004890:	4401      	add	r1, r0
 8004892:	3184      	adds	r1, #132	@ 0x84
 8004894:	4313      	orrs	r3, r2
 8004896:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	461a      	mov	r2, r3
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	01db      	lsls	r3, r3, #7
 80048a2:	4413      	add	r3, r2
 80048a4:	3384      	adds	r3, #132	@ 0x84
 80048a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	461a      	mov	r2, r3
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	01db      	lsls	r3, r3, #7
 80048b2:	4413      	add	r3, r2
 80048b4:	3384      	adds	r3, #132	@ 0x84
 80048b6:	461a      	mov	r2, r3
 80048b8:	2300      	movs	r3, #0
 80048ba:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	461a      	mov	r2, r3
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	01db      	lsls	r3, r3, #7
 80048c6:	4413      	add	r3, r2
 80048c8:	3384      	adds	r3, #132	@ 0x84
 80048ca:	461a      	mov	r2, r3
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048d0:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d102      	bne.n	80048e0 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80048da:	2304      	movs	r3, #4
 80048dc:	61fb      	str	r3, [r7, #28]
 80048de:	e01b      	b.n	8004918 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	691b      	ldr	r3, [r3, #16]
 80048e4:	2b01      	cmp	r3, #1
 80048e6:	d102      	bne.n	80048ee <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80048e8:	2303      	movs	r3, #3
 80048ea:	61fb      	str	r3, [r7, #28]
 80048ec:	e014      	b.n	8004918 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	2b04      	cmp	r3, #4
 80048f4:	d00b      	beq.n	800490e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d007      	beq.n	800490e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004902:	2b03      	cmp	r3, #3
 8004904:	d003      	beq.n	800490e <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800490a:	2b07      	cmp	r3, #7
 800490c:	d102      	bne.n	8004914 <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 800490e:	2302      	movs	r3, #2
 8004910:	61fb      	str	r3, [r7, #28]
 8004912:	e001      	b.n	8004918 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004914:	2301      	movs	r3, #1
 8004916:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	461a      	mov	r2, r3
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	01db      	lsls	r3, r3, #7
 8004922:	4413      	add	r3, r2
 8004924:	3384      	adds	r3, #132	@ 0x84
 8004926:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	6812      	ldr	r2, [r2, #0]
 800492c:	4611      	mov	r1, r2
 800492e:	687a      	ldr	r2, [r7, #4]
 8004930:	01d2      	lsls	r2, r2, #7
 8004932:	440a      	add	r2, r1
 8004934:	3284      	adds	r2, #132	@ 0x84
 8004936:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800493a:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004940:	69fa      	ldr	r2, [r7, #28]
 8004942:	fb02 f303 	mul.w	r3, r2, r3
 8004946:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	6859      	ldr	r1, [r3, #4]
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	1acb      	subs	r3, r1, r3
 8004952:	69f9      	ldr	r1, [r7, #28]
 8004954:	fb01 f303 	mul.w	r3, r1, r3
 8004958:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 800495a:	68f9      	ldr	r1, [r7, #12]
 800495c:	6809      	ldr	r1, [r1, #0]
 800495e:	4608      	mov	r0, r1
 8004960:	6879      	ldr	r1, [r7, #4]
 8004962:	01c9      	lsls	r1, r1, #7
 8004964:	4401      	add	r1, r0
 8004966:	3184      	adds	r1, #132	@ 0x84
 8004968:	4313      	orrs	r3, r2
 800496a:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	461a      	mov	r2, r3
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	01db      	lsls	r3, r3, #7
 8004976:	4413      	add	r3, r2
 8004978:	3384      	adds	r3, #132	@ 0x84
 800497a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800497c:	68fa      	ldr	r2, [r7, #12]
 800497e:	6812      	ldr	r2, [r2, #0]
 8004980:	4611      	mov	r1, r2
 8004982:	687a      	ldr	r2, [r7, #4]
 8004984:	01d2      	lsls	r2, r2, #7
 8004986:	440a      	add	r2, r1
 8004988:	3284      	adds	r2, #132	@ 0x84
 800498a:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800498e:	f023 0307 	bic.w	r3, r3, #7
 8004992:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	461a      	mov	r2, r3
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	01db      	lsls	r3, r3, #7
 800499e:	4413      	add	r3, r2
 80049a0:	3384      	adds	r3, #132	@ 0x84
 80049a2:	461a      	mov	r2, r3
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049a8:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	461a      	mov	r2, r3
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	01db      	lsls	r3, r3, #7
 80049b4:	4413      	add	r3, r2
 80049b6:	3384      	adds	r3, #132	@ 0x84
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68fa      	ldr	r2, [r7, #12]
 80049bc:	6812      	ldr	r2, [r2, #0]
 80049be:	4611      	mov	r1, r2
 80049c0:	687a      	ldr	r2, [r7, #4]
 80049c2:	01d2      	lsls	r2, r2, #7
 80049c4:	440a      	add	r2, r1
 80049c6:	3284      	adds	r2, #132	@ 0x84
 80049c8:	f043 0301 	orr.w	r3, r3, #1
 80049cc:	6013      	str	r3, [r2, #0]
}
 80049ce:	bf00      	nop
 80049d0:	3724      	adds	r7, #36	@ 0x24
 80049d2:	46bd      	mov	sp, r7
 80049d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d8:	4770      	bx	lr
	...

080049dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d101      	bne.n	80049ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	e267      	b.n	8004ebe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f003 0301 	and.w	r3, r3, #1
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d075      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80049fa:	4b88      	ldr	r3, [pc, #544]	@ (8004c1c <HAL_RCC_OscConfig+0x240>)
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	f003 030c 	and.w	r3, r3, #12
 8004a02:	2b04      	cmp	r3, #4
 8004a04:	d00c      	beq.n	8004a20 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a06:	4b85      	ldr	r3, [pc, #532]	@ (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004a08:	689b      	ldr	r3, [r3, #8]
 8004a0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004a0e:	2b08      	cmp	r3, #8
 8004a10:	d112      	bne.n	8004a38 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004a12:	4b82      	ldr	r3, [pc, #520]	@ (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004a1e:	d10b      	bne.n	8004a38 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a20:	4b7e      	ldr	r3, [pc, #504]	@ (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d05b      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x108>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d157      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a34:	2301      	movs	r3, #1
 8004a36:	e242      	b.n	8004ebe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a40:	d106      	bne.n	8004a50 <HAL_RCC_OscConfig+0x74>
 8004a42:	4b76      	ldr	r3, [pc, #472]	@ (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a75      	ldr	r2, [pc, #468]	@ (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004a48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a4c:	6013      	str	r3, [r2, #0]
 8004a4e:	e01d      	b.n	8004a8c <HAL_RCC_OscConfig+0xb0>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a58:	d10c      	bne.n	8004a74 <HAL_RCC_OscConfig+0x98>
 8004a5a:	4b70      	ldr	r3, [pc, #448]	@ (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a6f      	ldr	r2, [pc, #444]	@ (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004a60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a64:	6013      	str	r3, [r2, #0]
 8004a66:	4b6d      	ldr	r3, [pc, #436]	@ (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a6c      	ldr	r2, [pc, #432]	@ (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004a6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a70:	6013      	str	r3, [r2, #0]
 8004a72:	e00b      	b.n	8004a8c <HAL_RCC_OscConfig+0xb0>
 8004a74:	4b69      	ldr	r3, [pc, #420]	@ (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a68      	ldr	r2, [pc, #416]	@ (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004a7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a7e:	6013      	str	r3, [r2, #0]
 8004a80:	4b66      	ldr	r3, [pc, #408]	@ (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a65      	ldr	r2, [pc, #404]	@ (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004a86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d013      	beq.n	8004abc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a94:	f7fc ff6a 	bl	800196c <HAL_GetTick>
 8004a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a9a:	e008      	b.n	8004aae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a9c:	f7fc ff66 	bl	800196c <HAL_GetTick>
 8004aa0:	4602      	mov	r2, r0
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	1ad3      	subs	r3, r2, r3
 8004aa6:	2b64      	cmp	r3, #100	@ 0x64
 8004aa8:	d901      	bls.n	8004aae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004aaa:	2303      	movs	r3, #3
 8004aac:	e207      	b.n	8004ebe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004aae:	4b5b      	ldr	r3, [pc, #364]	@ (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d0f0      	beq.n	8004a9c <HAL_RCC_OscConfig+0xc0>
 8004aba:	e014      	b.n	8004ae6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004abc:	f7fc ff56 	bl	800196c <HAL_GetTick>
 8004ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ac2:	e008      	b.n	8004ad6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ac4:	f7fc ff52 	bl	800196c <HAL_GetTick>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	693b      	ldr	r3, [r7, #16]
 8004acc:	1ad3      	subs	r3, r2, r3
 8004ace:	2b64      	cmp	r3, #100	@ 0x64
 8004ad0:	d901      	bls.n	8004ad6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e1f3      	b.n	8004ebe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ad6:	4b51      	ldr	r3, [pc, #324]	@ (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1f0      	bne.n	8004ac4 <HAL_RCC_OscConfig+0xe8>
 8004ae2:	e000      	b.n	8004ae6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ae4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d063      	beq.n	8004bba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004af2:	4b4a      	ldr	r3, [pc, #296]	@ (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f003 030c 	and.w	r3, r3, #12
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d00b      	beq.n	8004b16 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004afe:	4b47      	ldr	r3, [pc, #284]	@ (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004b00:	689b      	ldr	r3, [r3, #8]
 8004b02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004b06:	2b08      	cmp	r3, #8
 8004b08:	d11c      	bne.n	8004b44 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004b0a:	4b44      	ldr	r3, [pc, #272]	@ (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d116      	bne.n	8004b44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b16:	4b41      	ldr	r3, [pc, #260]	@ (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0302 	and.w	r3, r3, #2
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d005      	beq.n	8004b2e <HAL_RCC_OscConfig+0x152>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	68db      	ldr	r3, [r3, #12]
 8004b26:	2b01      	cmp	r3, #1
 8004b28:	d001      	beq.n	8004b2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e1c7      	b.n	8004ebe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b2e:	4b3b      	ldr	r3, [pc, #236]	@ (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	691b      	ldr	r3, [r3, #16]
 8004b3a:	00db      	lsls	r3, r3, #3
 8004b3c:	4937      	ldr	r1, [pc, #220]	@ (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b42:	e03a      	b.n	8004bba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d020      	beq.n	8004b8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b4c:	4b34      	ldr	r3, [pc, #208]	@ (8004c20 <HAL_RCC_OscConfig+0x244>)
 8004b4e:	2201      	movs	r2, #1
 8004b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b52:	f7fc ff0b 	bl	800196c <HAL_GetTick>
 8004b56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b58:	e008      	b.n	8004b6c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b5a:	f7fc ff07 	bl	800196c <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	2b02      	cmp	r3, #2
 8004b66:	d901      	bls.n	8004b6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b68:	2303      	movs	r3, #3
 8004b6a:	e1a8      	b.n	8004ebe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b6c:	4b2b      	ldr	r3, [pc, #172]	@ (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f003 0302 	and.w	r3, r3, #2
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d0f0      	beq.n	8004b5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b78:	4b28      	ldr	r3, [pc, #160]	@ (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	00db      	lsls	r3, r3, #3
 8004b86:	4925      	ldr	r1, [pc, #148]	@ (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	600b      	str	r3, [r1, #0]
 8004b8c:	e015      	b.n	8004bba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b8e:	4b24      	ldr	r3, [pc, #144]	@ (8004c20 <HAL_RCC_OscConfig+0x244>)
 8004b90:	2200      	movs	r2, #0
 8004b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b94:	f7fc feea 	bl	800196c <HAL_GetTick>
 8004b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b9a:	e008      	b.n	8004bae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b9c:	f7fc fee6 	bl	800196c <HAL_GetTick>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	1ad3      	subs	r3, r2, r3
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d901      	bls.n	8004bae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e187      	b.n	8004ebe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004bae:	4b1b      	ldr	r3, [pc, #108]	@ (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1f0      	bne.n	8004b9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f003 0308 	and.w	r3, r3, #8
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d036      	beq.n	8004c34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d016      	beq.n	8004bfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004bce:	4b15      	ldr	r3, [pc, #84]	@ (8004c24 <HAL_RCC_OscConfig+0x248>)
 8004bd0:	2201      	movs	r2, #1
 8004bd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bd4:	f7fc feca 	bl	800196c <HAL_GetTick>
 8004bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bda:	e008      	b.n	8004bee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bdc:	f7fc fec6 	bl	800196c <HAL_GetTick>
 8004be0:	4602      	mov	r2, r0
 8004be2:	693b      	ldr	r3, [r7, #16]
 8004be4:	1ad3      	subs	r3, r2, r3
 8004be6:	2b02      	cmp	r3, #2
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e167      	b.n	8004ebe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bee:	4b0b      	ldr	r3, [pc, #44]	@ (8004c1c <HAL_RCC_OscConfig+0x240>)
 8004bf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bf2:	f003 0302 	and.w	r3, r3, #2
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d0f0      	beq.n	8004bdc <HAL_RCC_OscConfig+0x200>
 8004bfa:	e01b      	b.n	8004c34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bfc:	4b09      	ldr	r3, [pc, #36]	@ (8004c24 <HAL_RCC_OscConfig+0x248>)
 8004bfe:	2200      	movs	r2, #0
 8004c00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c02:	f7fc feb3 	bl	800196c <HAL_GetTick>
 8004c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c08:	e00e      	b.n	8004c28 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004c0a:	f7fc feaf 	bl	800196c <HAL_GetTick>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	693b      	ldr	r3, [r7, #16]
 8004c12:	1ad3      	subs	r3, r2, r3
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	d907      	bls.n	8004c28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004c18:	2303      	movs	r3, #3
 8004c1a:	e150      	b.n	8004ebe <HAL_RCC_OscConfig+0x4e2>
 8004c1c:	40023800 	.word	0x40023800
 8004c20:	42470000 	.word	0x42470000
 8004c24:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004c28:	4b88      	ldr	r3, [pc, #544]	@ (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004c2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d1ea      	bne.n	8004c0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 0304 	and.w	r3, r3, #4
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f000 8097 	beq.w	8004d70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c42:	2300      	movs	r3, #0
 8004c44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c46:	4b81      	ldr	r3, [pc, #516]	@ (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d10f      	bne.n	8004c72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c52:	2300      	movs	r3, #0
 8004c54:	60bb      	str	r3, [r7, #8]
 8004c56:	4b7d      	ldr	r3, [pc, #500]	@ (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c5a:	4a7c      	ldr	r2, [pc, #496]	@ (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c60:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c62:	4b7a      	ldr	r3, [pc, #488]	@ (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c6a:	60bb      	str	r3, [r7, #8]
 8004c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c6e:	2301      	movs	r3, #1
 8004c70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c72:	4b77      	ldr	r3, [pc, #476]	@ (8004e50 <HAL_RCC_OscConfig+0x474>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d118      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c7e:	4b74      	ldr	r3, [pc, #464]	@ (8004e50 <HAL_RCC_OscConfig+0x474>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a73      	ldr	r2, [pc, #460]	@ (8004e50 <HAL_RCC_OscConfig+0x474>)
 8004c84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c8a:	f7fc fe6f 	bl	800196c <HAL_GetTick>
 8004c8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c90:	e008      	b.n	8004ca4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c92:	f7fc fe6b 	bl	800196c <HAL_GetTick>
 8004c96:	4602      	mov	r2, r0
 8004c98:	693b      	ldr	r3, [r7, #16]
 8004c9a:	1ad3      	subs	r3, r2, r3
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d901      	bls.n	8004ca4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004ca0:	2303      	movs	r3, #3
 8004ca2:	e10c      	b.n	8004ebe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ca4:	4b6a      	ldr	r3, [pc, #424]	@ (8004e50 <HAL_RCC_OscConfig+0x474>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d0f0      	beq.n	8004c92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	689b      	ldr	r3, [r3, #8]
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d106      	bne.n	8004cc6 <HAL_RCC_OscConfig+0x2ea>
 8004cb8:	4b64      	ldr	r3, [pc, #400]	@ (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cbc:	4a63      	ldr	r2, [pc, #396]	@ (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004cbe:	f043 0301 	orr.w	r3, r3, #1
 8004cc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cc4:	e01c      	b.n	8004d00 <HAL_RCC_OscConfig+0x324>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	2b05      	cmp	r3, #5
 8004ccc:	d10c      	bne.n	8004ce8 <HAL_RCC_OscConfig+0x30c>
 8004cce:	4b5f      	ldr	r3, [pc, #380]	@ (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cd2:	4a5e      	ldr	r2, [pc, #376]	@ (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004cd4:	f043 0304 	orr.w	r3, r3, #4
 8004cd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cda:	4b5c      	ldr	r3, [pc, #368]	@ (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cde:	4a5b      	ldr	r2, [pc, #364]	@ (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004ce0:	f043 0301 	orr.w	r3, r3, #1
 8004ce4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ce6:	e00b      	b.n	8004d00 <HAL_RCC_OscConfig+0x324>
 8004ce8:	4b58      	ldr	r3, [pc, #352]	@ (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cec:	4a57      	ldr	r2, [pc, #348]	@ (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004cee:	f023 0301 	bic.w	r3, r3, #1
 8004cf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cf4:	4b55      	ldr	r3, [pc, #340]	@ (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cf8:	4a54      	ldr	r2, [pc, #336]	@ (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004cfa:	f023 0304 	bic.w	r3, r3, #4
 8004cfe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	689b      	ldr	r3, [r3, #8]
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d015      	beq.n	8004d34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d08:	f7fc fe30 	bl	800196c <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d0e:	e00a      	b.n	8004d26 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d10:	f7fc fe2c 	bl	800196c <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e0cb      	b.n	8004ebe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004d26:	4b49      	ldr	r3, [pc, #292]	@ (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d2a:	f003 0302 	and.w	r3, r3, #2
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d0ee      	beq.n	8004d10 <HAL_RCC_OscConfig+0x334>
 8004d32:	e014      	b.n	8004d5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d34:	f7fc fe1a 	bl	800196c <HAL_GetTick>
 8004d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d3a:	e00a      	b.n	8004d52 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d3c:	f7fc fe16 	bl	800196c <HAL_GetTick>
 8004d40:	4602      	mov	r2, r0
 8004d42:	693b      	ldr	r3, [r7, #16]
 8004d44:	1ad3      	subs	r3, r2, r3
 8004d46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d901      	bls.n	8004d52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d4e:	2303      	movs	r3, #3
 8004d50:	e0b5      	b.n	8004ebe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d52:	4b3e      	ldr	r3, [pc, #248]	@ (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d56:	f003 0302 	and.w	r3, r3, #2
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d1ee      	bne.n	8004d3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d5e:	7dfb      	ldrb	r3, [r7, #23]
 8004d60:	2b01      	cmp	r3, #1
 8004d62:	d105      	bne.n	8004d70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d64:	4b39      	ldr	r3, [pc, #228]	@ (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d68:	4a38      	ldr	r2, [pc, #224]	@ (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004d6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d6e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	699b      	ldr	r3, [r3, #24]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	f000 80a1 	beq.w	8004ebc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d7a:	4b34      	ldr	r3, [pc, #208]	@ (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	f003 030c 	and.w	r3, r3, #12
 8004d82:	2b08      	cmp	r3, #8
 8004d84:	d05c      	beq.n	8004e40 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	2b02      	cmp	r3, #2
 8004d8c:	d141      	bne.n	8004e12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d8e:	4b31      	ldr	r3, [pc, #196]	@ (8004e54 <HAL_RCC_OscConfig+0x478>)
 8004d90:	2200      	movs	r2, #0
 8004d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d94:	f7fc fdea 	bl	800196c <HAL_GetTick>
 8004d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d9a:	e008      	b.n	8004dae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d9c:	f7fc fde6 	bl	800196c <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b02      	cmp	r3, #2
 8004da8:	d901      	bls.n	8004dae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004daa:	2303      	movs	r3, #3
 8004dac:	e087      	b.n	8004ebe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dae:	4b27      	ldr	r3, [pc, #156]	@ (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1f0      	bne.n	8004d9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	69da      	ldr	r2, [r3, #28]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a1b      	ldr	r3, [r3, #32]
 8004dc2:	431a      	orrs	r2, r3
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dc8:	019b      	lsls	r3, r3, #6
 8004dca:	431a      	orrs	r2, r3
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dd0:	085b      	lsrs	r3, r3, #1
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	041b      	lsls	r3, r3, #16
 8004dd6:	431a      	orrs	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ddc:	061b      	lsls	r3, r3, #24
 8004dde:	491b      	ldr	r1, [pc, #108]	@ (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004de0:	4313      	orrs	r3, r2
 8004de2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004de4:	4b1b      	ldr	r3, [pc, #108]	@ (8004e54 <HAL_RCC_OscConfig+0x478>)
 8004de6:	2201      	movs	r2, #1
 8004de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dea:	f7fc fdbf 	bl	800196c <HAL_GetTick>
 8004dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004df0:	e008      	b.n	8004e04 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004df2:	f7fc fdbb 	bl	800196c <HAL_GetTick>
 8004df6:	4602      	mov	r2, r0
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	1ad3      	subs	r3, r2, r3
 8004dfc:	2b02      	cmp	r3, #2
 8004dfe:	d901      	bls.n	8004e04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004e00:	2303      	movs	r3, #3
 8004e02:	e05c      	b.n	8004ebe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e04:	4b11      	ldr	r3, [pc, #68]	@ (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d0f0      	beq.n	8004df2 <HAL_RCC_OscConfig+0x416>
 8004e10:	e054      	b.n	8004ebc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e12:	4b10      	ldr	r3, [pc, #64]	@ (8004e54 <HAL_RCC_OscConfig+0x478>)
 8004e14:	2200      	movs	r2, #0
 8004e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e18:	f7fc fda8 	bl	800196c <HAL_GetTick>
 8004e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e1e:	e008      	b.n	8004e32 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e20:	f7fc fda4 	bl	800196c <HAL_GetTick>
 8004e24:	4602      	mov	r2, r0
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	1ad3      	subs	r3, r2, r3
 8004e2a:	2b02      	cmp	r3, #2
 8004e2c:	d901      	bls.n	8004e32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e045      	b.n	8004ebe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e32:	4b06      	ldr	r3, [pc, #24]	@ (8004e4c <HAL_RCC_OscConfig+0x470>)
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d1f0      	bne.n	8004e20 <HAL_RCC_OscConfig+0x444>
 8004e3e:	e03d      	b.n	8004ebc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	699b      	ldr	r3, [r3, #24]
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	d107      	bne.n	8004e58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	e038      	b.n	8004ebe <HAL_RCC_OscConfig+0x4e2>
 8004e4c:	40023800 	.word	0x40023800
 8004e50:	40007000 	.word	0x40007000
 8004e54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e58:	4b1b      	ldr	r3, [pc, #108]	@ (8004ec8 <HAL_RCC_OscConfig+0x4ec>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	699b      	ldr	r3, [r3, #24]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d028      	beq.n	8004eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e70:	429a      	cmp	r2, r3
 8004e72:	d121      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e7e:	429a      	cmp	r2, r3
 8004e80:	d11a      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004e88:	4013      	ands	r3, r2
 8004e8a:	687a      	ldr	r2, [r7, #4]
 8004e8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e90:	4293      	cmp	r3, r2
 8004e92:	d111      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e9e:	085b      	lsrs	r3, r3, #1
 8004ea0:	3b01      	subs	r3, #1
 8004ea2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ea4:	429a      	cmp	r2, r3
 8004ea6:	d107      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004eb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d001      	beq.n	8004ebc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e000      	b.n	8004ebe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004ebc:	2300      	movs	r3, #0
}
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	3718      	adds	r7, #24
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	bd80      	pop	{r7, pc}
 8004ec6:	bf00      	nop
 8004ec8:	40023800 	.word	0x40023800

08004ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b084      	sub	sp, #16
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	6078      	str	r0, [r7, #4]
 8004ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d101      	bne.n	8004ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004edc:	2301      	movs	r3, #1
 8004ede:	e0cc      	b.n	800507a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ee0:	4b68      	ldr	r3, [pc, #416]	@ (8005084 <HAL_RCC_ClockConfig+0x1b8>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 030f 	and.w	r3, r3, #15
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	429a      	cmp	r2, r3
 8004eec:	d90c      	bls.n	8004f08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004eee:	4b65      	ldr	r3, [pc, #404]	@ (8005084 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef0:	683a      	ldr	r2, [r7, #0]
 8004ef2:	b2d2      	uxtb	r2, r2
 8004ef4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ef6:	4b63      	ldr	r3, [pc, #396]	@ (8005084 <HAL_RCC_ClockConfig+0x1b8>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 030f 	and.w	r3, r3, #15
 8004efe:	683a      	ldr	r2, [r7, #0]
 8004f00:	429a      	cmp	r2, r3
 8004f02:	d001      	beq.n	8004f08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004f04:	2301      	movs	r3, #1
 8004f06:	e0b8      	b.n	800507a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0302 	and.w	r3, r3, #2
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d020      	beq.n	8004f56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0304 	and.w	r3, r3, #4
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d005      	beq.n	8004f2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004f20:	4b59      	ldr	r3, [pc, #356]	@ (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	4a58      	ldr	r2, [pc, #352]	@ (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8004f26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004f2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	f003 0308 	and.w	r3, r3, #8
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d005      	beq.n	8004f44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f38:	4b53      	ldr	r3, [pc, #332]	@ (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3a:	689b      	ldr	r3, [r3, #8]
 8004f3c:	4a52      	ldr	r2, [pc, #328]	@ (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f44:	4b50      	ldr	r3, [pc, #320]	@ (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8004f46:	689b      	ldr	r3, [r3, #8]
 8004f48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	689b      	ldr	r3, [r3, #8]
 8004f50:	494d      	ldr	r1, [pc, #308]	@ (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d044      	beq.n	8004fec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	2b01      	cmp	r3, #1
 8004f68:	d107      	bne.n	8004f7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f6a:	4b47      	ldr	r3, [pc, #284]	@ (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d119      	bne.n	8004faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e07f      	b.n	800507a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	685b      	ldr	r3, [r3, #4]
 8004f7e:	2b02      	cmp	r3, #2
 8004f80:	d003      	beq.n	8004f8a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f86:	2b03      	cmp	r3, #3
 8004f88:	d107      	bne.n	8004f9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f8a:	4b3f      	ldr	r3, [pc, #252]	@ (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d109      	bne.n	8004faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e06f      	b.n	800507a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f9a:	4b3b      	ldr	r3, [pc, #236]	@ (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e067      	b.n	800507a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004faa:	4b37      	ldr	r3, [pc, #220]	@ (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f023 0203 	bic.w	r2, r3, #3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	4934      	ldr	r1, [pc, #208]	@ (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004fbc:	f7fc fcd6 	bl	800196c <HAL_GetTick>
 8004fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fc2:	e00a      	b.n	8004fda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004fc4:	f7fc fcd2 	bl	800196c <HAL_GetTick>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	1ad3      	subs	r3, r2, r3
 8004fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e04f      	b.n	800507a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004fda:	4b2b      	ldr	r3, [pc, #172]	@ (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f003 020c 	and.w	r2, r3, #12
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	429a      	cmp	r2, r3
 8004fea:	d1eb      	bne.n	8004fc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fec:	4b25      	ldr	r3, [pc, #148]	@ (8005084 <HAL_RCC_ClockConfig+0x1b8>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f003 030f 	and.w	r3, r3, #15
 8004ff4:	683a      	ldr	r2, [r7, #0]
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d20c      	bcs.n	8005014 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ffa:	4b22      	ldr	r3, [pc, #136]	@ (8005084 <HAL_RCC_ClockConfig+0x1b8>)
 8004ffc:	683a      	ldr	r2, [r7, #0]
 8004ffe:	b2d2      	uxtb	r2, r2
 8005000:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005002:	4b20      	ldr	r3, [pc, #128]	@ (8005084 <HAL_RCC_ClockConfig+0x1b8>)
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 030f 	and.w	r3, r3, #15
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	429a      	cmp	r2, r3
 800500e:	d001      	beq.n	8005014 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e032      	b.n	800507a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	2b00      	cmp	r3, #0
 800501e:	d008      	beq.n	8005032 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005020:	4b19      	ldr	r3, [pc, #100]	@ (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8005022:	689b      	ldr	r3, [r3, #8]
 8005024:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	4916      	ldr	r1, [pc, #88]	@ (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 800502e:	4313      	orrs	r3, r2
 8005030:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f003 0308 	and.w	r3, r3, #8
 800503a:	2b00      	cmp	r3, #0
 800503c:	d009      	beq.n	8005052 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800503e:	4b12      	ldr	r3, [pc, #72]	@ (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 8005040:	689b      	ldr	r3, [r3, #8]
 8005042:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	691b      	ldr	r3, [r3, #16]
 800504a:	00db      	lsls	r3, r3, #3
 800504c:	490e      	ldr	r1, [pc, #56]	@ (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 800504e:	4313      	orrs	r3, r2
 8005050:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005052:	f000 f821 	bl	8005098 <HAL_RCC_GetSysClockFreq>
 8005056:	4602      	mov	r2, r0
 8005058:	4b0b      	ldr	r3, [pc, #44]	@ (8005088 <HAL_RCC_ClockConfig+0x1bc>)
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	091b      	lsrs	r3, r3, #4
 800505e:	f003 030f 	and.w	r3, r3, #15
 8005062:	490a      	ldr	r1, [pc, #40]	@ (800508c <HAL_RCC_ClockConfig+0x1c0>)
 8005064:	5ccb      	ldrb	r3, [r1, r3]
 8005066:	fa22 f303 	lsr.w	r3, r2, r3
 800506a:	4a09      	ldr	r2, [pc, #36]	@ (8005090 <HAL_RCC_ClockConfig+0x1c4>)
 800506c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800506e:	4b09      	ldr	r3, [pc, #36]	@ (8005094 <HAL_RCC_ClockConfig+0x1c8>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4618      	mov	r0, r3
 8005074:	f7fc fb34 	bl	80016e0 <HAL_InitTick>

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3710      	adds	r7, #16
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	40023c00 	.word	0x40023c00
 8005088:	40023800 	.word	0x40023800
 800508c:	08007ba8 	.word	0x08007ba8
 8005090:	20000004 	.word	0x20000004
 8005094:	20000008 	.word	0x20000008

08005098 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800509c:	b094      	sub	sp, #80	@ 0x50
 800509e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80050a0:	2300      	movs	r3, #0
 80050a2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80050a4:	2300      	movs	r3, #0
 80050a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80050a8:	2300      	movs	r3, #0
 80050aa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80050ac:	2300      	movs	r3, #0
 80050ae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80050b0:	4b79      	ldr	r3, [pc, #484]	@ (8005298 <HAL_RCC_GetSysClockFreq+0x200>)
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	f003 030c 	and.w	r3, r3, #12
 80050b8:	2b08      	cmp	r3, #8
 80050ba:	d00d      	beq.n	80050d8 <HAL_RCC_GetSysClockFreq+0x40>
 80050bc:	2b08      	cmp	r3, #8
 80050be:	f200 80e1 	bhi.w	8005284 <HAL_RCC_GetSysClockFreq+0x1ec>
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d002      	beq.n	80050cc <HAL_RCC_GetSysClockFreq+0x34>
 80050c6:	2b04      	cmp	r3, #4
 80050c8:	d003      	beq.n	80050d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80050ca:	e0db      	b.n	8005284 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80050cc:	4b73      	ldr	r3, [pc, #460]	@ (800529c <HAL_RCC_GetSysClockFreq+0x204>)
 80050ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050d0:	e0db      	b.n	800528a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050d2:	4b73      	ldr	r3, [pc, #460]	@ (80052a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80050d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050d6:	e0d8      	b.n	800528a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050d8:	4b6f      	ldr	r3, [pc, #444]	@ (8005298 <HAL_RCC_GetSysClockFreq+0x200>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050e0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050e2:	4b6d      	ldr	r3, [pc, #436]	@ (8005298 <HAL_RCC_GetSysClockFreq+0x200>)
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d063      	beq.n	80051b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050ee:	4b6a      	ldr	r3, [pc, #424]	@ (8005298 <HAL_RCC_GetSysClockFreq+0x200>)
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	099b      	lsrs	r3, r3, #6
 80050f4:	2200      	movs	r2, #0
 80050f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80050fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005100:	633b      	str	r3, [r7, #48]	@ 0x30
 8005102:	2300      	movs	r3, #0
 8005104:	637b      	str	r3, [r7, #52]	@ 0x34
 8005106:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800510a:	4622      	mov	r2, r4
 800510c:	462b      	mov	r3, r5
 800510e:	f04f 0000 	mov.w	r0, #0
 8005112:	f04f 0100 	mov.w	r1, #0
 8005116:	0159      	lsls	r1, r3, #5
 8005118:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800511c:	0150      	lsls	r0, r2, #5
 800511e:	4602      	mov	r2, r0
 8005120:	460b      	mov	r3, r1
 8005122:	4621      	mov	r1, r4
 8005124:	1a51      	subs	r1, r2, r1
 8005126:	6139      	str	r1, [r7, #16]
 8005128:	4629      	mov	r1, r5
 800512a:	eb63 0301 	sbc.w	r3, r3, r1
 800512e:	617b      	str	r3, [r7, #20]
 8005130:	f04f 0200 	mov.w	r2, #0
 8005134:	f04f 0300 	mov.w	r3, #0
 8005138:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800513c:	4659      	mov	r1, fp
 800513e:	018b      	lsls	r3, r1, #6
 8005140:	4651      	mov	r1, sl
 8005142:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005146:	4651      	mov	r1, sl
 8005148:	018a      	lsls	r2, r1, #6
 800514a:	4651      	mov	r1, sl
 800514c:	ebb2 0801 	subs.w	r8, r2, r1
 8005150:	4659      	mov	r1, fp
 8005152:	eb63 0901 	sbc.w	r9, r3, r1
 8005156:	f04f 0200 	mov.w	r2, #0
 800515a:	f04f 0300 	mov.w	r3, #0
 800515e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005162:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005166:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800516a:	4690      	mov	r8, r2
 800516c:	4699      	mov	r9, r3
 800516e:	4623      	mov	r3, r4
 8005170:	eb18 0303 	adds.w	r3, r8, r3
 8005174:	60bb      	str	r3, [r7, #8]
 8005176:	462b      	mov	r3, r5
 8005178:	eb49 0303 	adc.w	r3, r9, r3
 800517c:	60fb      	str	r3, [r7, #12]
 800517e:	f04f 0200 	mov.w	r2, #0
 8005182:	f04f 0300 	mov.w	r3, #0
 8005186:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800518a:	4629      	mov	r1, r5
 800518c:	024b      	lsls	r3, r1, #9
 800518e:	4621      	mov	r1, r4
 8005190:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005194:	4621      	mov	r1, r4
 8005196:	024a      	lsls	r2, r1, #9
 8005198:	4610      	mov	r0, r2
 800519a:	4619      	mov	r1, r3
 800519c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800519e:	2200      	movs	r2, #0
 80051a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80051a8:	f7fb f820 	bl	80001ec <__aeabi_uldivmod>
 80051ac:	4602      	mov	r2, r0
 80051ae:	460b      	mov	r3, r1
 80051b0:	4613      	mov	r3, r2
 80051b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051b4:	e058      	b.n	8005268 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051b6:	4b38      	ldr	r3, [pc, #224]	@ (8005298 <HAL_RCC_GetSysClockFreq+0x200>)
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	099b      	lsrs	r3, r3, #6
 80051bc:	2200      	movs	r2, #0
 80051be:	4618      	mov	r0, r3
 80051c0:	4611      	mov	r1, r2
 80051c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80051c6:	623b      	str	r3, [r7, #32]
 80051c8:	2300      	movs	r3, #0
 80051ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80051cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80051d0:	4642      	mov	r2, r8
 80051d2:	464b      	mov	r3, r9
 80051d4:	f04f 0000 	mov.w	r0, #0
 80051d8:	f04f 0100 	mov.w	r1, #0
 80051dc:	0159      	lsls	r1, r3, #5
 80051de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051e2:	0150      	lsls	r0, r2, #5
 80051e4:	4602      	mov	r2, r0
 80051e6:	460b      	mov	r3, r1
 80051e8:	4641      	mov	r1, r8
 80051ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80051ee:	4649      	mov	r1, r9
 80051f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80051f4:	f04f 0200 	mov.w	r2, #0
 80051f8:	f04f 0300 	mov.w	r3, #0
 80051fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005200:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005204:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005208:	ebb2 040a 	subs.w	r4, r2, sl
 800520c:	eb63 050b 	sbc.w	r5, r3, fp
 8005210:	f04f 0200 	mov.w	r2, #0
 8005214:	f04f 0300 	mov.w	r3, #0
 8005218:	00eb      	lsls	r3, r5, #3
 800521a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800521e:	00e2      	lsls	r2, r4, #3
 8005220:	4614      	mov	r4, r2
 8005222:	461d      	mov	r5, r3
 8005224:	4643      	mov	r3, r8
 8005226:	18e3      	adds	r3, r4, r3
 8005228:	603b      	str	r3, [r7, #0]
 800522a:	464b      	mov	r3, r9
 800522c:	eb45 0303 	adc.w	r3, r5, r3
 8005230:	607b      	str	r3, [r7, #4]
 8005232:	f04f 0200 	mov.w	r2, #0
 8005236:	f04f 0300 	mov.w	r3, #0
 800523a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800523e:	4629      	mov	r1, r5
 8005240:	028b      	lsls	r3, r1, #10
 8005242:	4621      	mov	r1, r4
 8005244:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005248:	4621      	mov	r1, r4
 800524a:	028a      	lsls	r2, r1, #10
 800524c:	4610      	mov	r0, r2
 800524e:	4619      	mov	r1, r3
 8005250:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005252:	2200      	movs	r2, #0
 8005254:	61bb      	str	r3, [r7, #24]
 8005256:	61fa      	str	r2, [r7, #28]
 8005258:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800525c:	f7fa ffc6 	bl	80001ec <__aeabi_uldivmod>
 8005260:	4602      	mov	r2, r0
 8005262:	460b      	mov	r3, r1
 8005264:	4613      	mov	r3, r2
 8005266:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005268:	4b0b      	ldr	r3, [pc, #44]	@ (8005298 <HAL_RCC_GetSysClockFreq+0x200>)
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	0c1b      	lsrs	r3, r3, #16
 800526e:	f003 0303 	and.w	r3, r3, #3
 8005272:	3301      	adds	r3, #1
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005278:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800527a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800527c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005280:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005282:	e002      	b.n	800528a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005284:	4b05      	ldr	r3, [pc, #20]	@ (800529c <HAL_RCC_GetSysClockFreq+0x204>)
 8005286:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005288:	bf00      	nop
    }
  }
  return sysclockfreq;
 800528a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800528c:	4618      	mov	r0, r3
 800528e:	3750      	adds	r7, #80	@ 0x50
 8005290:	46bd      	mov	sp, r7
 8005292:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005296:	bf00      	nop
 8005298:	40023800 	.word	0x40023800
 800529c:	00f42400 	.word	0x00f42400
 80052a0:	007a1200 	.word	0x007a1200

080052a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80052a4:	b480      	push	{r7}
 80052a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80052a8:	4b03      	ldr	r3, [pc, #12]	@ (80052b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80052aa:	681b      	ldr	r3, [r3, #0]
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	20000004 	.word	0x20000004

080052bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80052c0:	f7ff fff0 	bl	80052a4 <HAL_RCC_GetHCLKFreq>
 80052c4:	4602      	mov	r2, r0
 80052c6:	4b05      	ldr	r3, [pc, #20]	@ (80052dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	0a9b      	lsrs	r3, r3, #10
 80052cc:	f003 0307 	and.w	r3, r3, #7
 80052d0:	4903      	ldr	r1, [pc, #12]	@ (80052e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052d2:	5ccb      	ldrb	r3, [r1, r3]
 80052d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052d8:	4618      	mov	r0, r3
 80052da:	bd80      	pop	{r7, pc}
 80052dc:	40023800 	.word	0x40023800
 80052e0:	08007bb8 	.word	0x08007bb8

080052e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80052e8:	f7ff ffdc 	bl	80052a4 <HAL_RCC_GetHCLKFreq>
 80052ec:	4602      	mov	r2, r0
 80052ee:	4b05      	ldr	r3, [pc, #20]	@ (8005304 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	0b5b      	lsrs	r3, r3, #13
 80052f4:	f003 0307 	and.w	r3, r3, #7
 80052f8:	4903      	ldr	r1, [pc, #12]	@ (8005308 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052fa:	5ccb      	ldrb	r3, [r1, r3]
 80052fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005300:	4618      	mov	r0, r3
 8005302:	bd80      	pop	{r7, pc}
 8005304:	40023800 	.word	0x40023800
 8005308:	08007bb8 	.word	0x08007bb8

0800530c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800530c:	b480      	push	{r7}
 800530e:	b083      	sub	sp, #12
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
 8005314:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	220f      	movs	r2, #15
 800531a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800531c:	4b12      	ldr	r3, [pc, #72]	@ (8005368 <HAL_RCC_GetClockConfig+0x5c>)
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f003 0203 	and.w	r2, r3, #3
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005328:	4b0f      	ldr	r3, [pc, #60]	@ (8005368 <HAL_RCC_GetClockConfig+0x5c>)
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005334:	4b0c      	ldr	r3, [pc, #48]	@ (8005368 <HAL_RCC_GetClockConfig+0x5c>)
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005340:	4b09      	ldr	r3, [pc, #36]	@ (8005368 <HAL_RCC_GetClockConfig+0x5c>)
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	08db      	lsrs	r3, r3, #3
 8005346:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800534e:	4b07      	ldr	r3, [pc, #28]	@ (800536c <HAL_RCC_GetClockConfig+0x60>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f003 020f 	and.w	r2, r3, #15
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	601a      	str	r2, [r3, #0]
}
 800535a:	bf00      	nop
 800535c:	370c      	adds	r7, #12
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr
 8005366:	bf00      	nop
 8005368:	40023800 	.word	0x40023800
 800536c:	40023c00 	.word	0x40023c00

08005370 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005378:	2300      	movs	r3, #0
 800537a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800537c:	2300      	movs	r3, #0
 800537e:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f003 0301 	and.w	r3, r3, #1
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10b      	bne.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005394:	2b00      	cmp	r3, #0
 8005396:	d105      	bne.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d075      	beq.n	8005490 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80053a4:	4b91      	ldr	r3, [pc, #580]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80053a6:	2200      	movs	r2, #0
 80053a8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80053aa:	f7fc fadf 	bl	800196c <HAL_GetTick>
 80053ae:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053b0:	e008      	b.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80053b2:	f7fc fadb 	bl	800196c <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	697b      	ldr	r3, [r7, #20]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	2b02      	cmp	r3, #2
 80053be:	d901      	bls.n	80053c4 <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80053c0:	2303      	movs	r3, #3
 80053c2:	e189      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80053c4:	4b8a      	ldr	r3, [pc, #552]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d1f0      	bne.n	80053b2 <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0301 	and.w	r3, r3, #1
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d009      	beq.n	80053f0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	019a      	lsls	r2, r3, #6
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	689b      	ldr	r3, [r3, #8]
 80053e6:	071b      	lsls	r3, r3, #28
 80053e8:	4981      	ldr	r1, [pc, #516]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053ea:	4313      	orrs	r3, r2
 80053ec:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0302 	and.w	r3, r3, #2
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d01f      	beq.n	800543c <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80053fc:	4b7c      	ldr	r3, [pc, #496]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80053fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005402:	0f1b      	lsrs	r3, r3, #28
 8005404:	f003 0307 	and.w	r3, r3, #7
 8005408:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	019a      	lsls	r2, r3, #6
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	68db      	ldr	r3, [r3, #12]
 8005414:	061b      	lsls	r3, r3, #24
 8005416:	431a      	orrs	r2, r3
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	071b      	lsls	r3, r3, #28
 800541c:	4974      	ldr	r1, [pc, #464]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005424:	4b72      	ldr	r3, [pc, #456]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005426:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800542a:	f023 021f 	bic.w	r2, r3, #31
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	69db      	ldr	r3, [r3, #28]
 8005432:	3b01      	subs	r3, #1
 8005434:	496e      	ldr	r1, [pc, #440]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005436:	4313      	orrs	r3, r2
 8005438:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005444:	2b00      	cmp	r3, #0
 8005446:	d00d      	beq.n	8005464 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	019a      	lsls	r2, r3, #6
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	68db      	ldr	r3, [r3, #12]
 8005452:	061b      	lsls	r3, r3, #24
 8005454:	431a      	orrs	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	071b      	lsls	r3, r3, #28
 800545c:	4964      	ldr	r1, [pc, #400]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800545e:	4313      	orrs	r3, r2
 8005460:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005464:	4b61      	ldr	r3, [pc, #388]	@ (80055ec <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005466:	2201      	movs	r2, #1
 8005468:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800546a:	f7fc fa7f 	bl	800196c <HAL_GetTick>
 800546e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005470:	e008      	b.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005472:	f7fc fa7b 	bl	800196c <HAL_GetTick>
 8005476:	4602      	mov	r2, r0
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	1ad3      	subs	r3, r2, r3
 800547c:	2b02      	cmp	r3, #2
 800547e:	d901      	bls.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e129      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005484:	4b5a      	ldr	r3, [pc, #360]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800548c:	2b00      	cmp	r3, #0
 800548e:	d0f0      	beq.n	8005472 <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	f003 0304 	and.w	r3, r3, #4
 8005498:	2b00      	cmp	r3, #0
 800549a:	d105      	bne.n	80054a8 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d079      	beq.n	800559c <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80054a8:	4b52      	ldr	r3, [pc, #328]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80054aa:	2200      	movs	r2, #0
 80054ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80054ae:	f7fc fa5d 	bl	800196c <HAL_GetTick>
 80054b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80054b4:	e008      	b.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80054b6:	f7fc fa59 	bl	800196c <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	697b      	ldr	r3, [r7, #20]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d901      	bls.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e107      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80054c8:	4b49      	ldr	r3, [pc, #292]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80054d0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80054d4:	d0ef      	beq.n	80054b6 <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 0304 	and.w	r3, r3, #4
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d020      	beq.n	8005524 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80054e2:	4b43      	ldr	r3, [pc, #268]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80054e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80054e8:	0f1b      	lsrs	r3, r3, #28
 80054ea:	f003 0307 	and.w	r3, r3, #7
 80054ee:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	691b      	ldr	r3, [r3, #16]
 80054f4:	019a      	lsls	r2, r3, #6
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	061b      	lsls	r3, r3, #24
 80054fc:	431a      	orrs	r2, r3
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	071b      	lsls	r3, r3, #28
 8005502:	493b      	ldr	r1, [pc, #236]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005504:	4313      	orrs	r3, r2
 8005506:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800550a:	4b39      	ldr	r3, [pc, #228]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800550c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005510:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a1b      	ldr	r3, [r3, #32]
 8005518:	3b01      	subs	r3, #1
 800551a:	021b      	lsls	r3, r3, #8
 800551c:	4934      	ldr	r1, [pc, #208]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800551e:	4313      	orrs	r3, r2
 8005520:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f003 0308 	and.w	r3, r3, #8
 800552c:	2b00      	cmp	r3, #0
 800552e:	d01e      	beq.n	800556e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005530:	4b2f      	ldr	r3, [pc, #188]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005536:	0e1b      	lsrs	r3, r3, #24
 8005538:	f003 030f 	and.w	r3, r3, #15
 800553c:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	691b      	ldr	r3, [r3, #16]
 8005542:	019a      	lsls	r2, r3, #6
 8005544:	693b      	ldr	r3, [r7, #16]
 8005546:	061b      	lsls	r3, r3, #24
 8005548:	431a      	orrs	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	699b      	ldr	r3, [r3, #24]
 800554e:	071b      	lsls	r3, r3, #28
 8005550:	4927      	ldr	r1, [pc, #156]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005552:	4313      	orrs	r3, r2
 8005554:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005558:	4b25      	ldr	r3, [pc, #148]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800555a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800555e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005566:	4922      	ldr	r1, [pc, #136]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005568:	4313      	orrs	r3, r2
 800556a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800556e:	4b21      	ldr	r3, [pc, #132]	@ (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005570:	2201      	movs	r2, #1
 8005572:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005574:	f7fc f9fa 	bl	800196c <HAL_GetTick>
 8005578:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800557a:	e008      	b.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800557c:	f7fc f9f6 	bl	800196c <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	1ad3      	subs	r3, r2, r3
 8005586:	2b02      	cmp	r3, #2
 8005588:	d901      	bls.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800558a:	2303      	movs	r3, #3
 800558c:	e0a4      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800558e:	4b18      	ldr	r3, [pc, #96]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005596:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800559a:	d1ef      	bne.n	800557c <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f003 0320 	and.w	r3, r3, #32
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	f000 808b 	beq.w	80056c0 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80055aa:	2300      	movs	r3, #0
 80055ac:	60fb      	str	r3, [r7, #12]
 80055ae:	4b10      	ldr	r3, [pc, #64]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b2:	4a0f      	ldr	r2, [pc, #60]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80055ba:	4b0d      	ldr	r3, [pc, #52]	@ (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80055bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055c2:	60fb      	str	r3, [r7, #12]
 80055c4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80055c6:	4b0c      	ldr	r3, [pc, #48]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a0b      	ldr	r2, [pc, #44]	@ (80055f8 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80055cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80055d2:	f7fc f9cb 	bl	800196c <HAL_GetTick>
 80055d6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80055d8:	e010      	b.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055da:	f7fc f9c7 	bl	800196c <HAL_GetTick>
 80055de:	4602      	mov	r2, r0
 80055e0:	697b      	ldr	r3, [r7, #20]
 80055e2:	1ad3      	subs	r3, r2, r3
 80055e4:	2b02      	cmp	r3, #2
 80055e6:	d909      	bls.n	80055fc <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80055e8:	2303      	movs	r3, #3
 80055ea:	e075      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80055ec:	42470068 	.word	0x42470068
 80055f0:	40023800 	.word	0x40023800
 80055f4:	42470070 	.word	0x42470070
 80055f8:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80055fc:	4b38      	ldr	r3, [pc, #224]	@ (80056e0 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005604:	2b00      	cmp	r3, #0
 8005606:	d0e8      	beq.n	80055da <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005608:	4b36      	ldr	r3, [pc, #216]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800560a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800560c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005610:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	2b00      	cmp	r3, #0
 8005616:	d02f      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800561c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005620:	693a      	ldr	r2, [r7, #16]
 8005622:	429a      	cmp	r2, r3
 8005624:	d028      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005626:	4b2f      	ldr	r3, [pc, #188]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800562a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800562e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005630:	4b2d      	ldr	r3, [pc, #180]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005632:	2201      	movs	r2, #1
 8005634:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005636:	4b2c      	ldr	r3, [pc, #176]	@ (80056e8 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005638:	2200      	movs	r2, #0
 800563a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800563c:	4a29      	ldr	r2, [pc, #164]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800563e:	693b      	ldr	r3, [r7, #16]
 8005640:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005642:	4b28      	ldr	r3, [pc, #160]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005644:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b01      	cmp	r3, #1
 800564c:	d114      	bne.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800564e:	f7fc f98d 	bl	800196c <HAL_GetTick>
 8005652:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005654:	e00a      	b.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005656:	f7fc f989 	bl	800196c <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005664:	4293      	cmp	r3, r2
 8005666:	d901      	bls.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005668:	2303      	movs	r3, #3
 800566a:	e035      	b.n	80056d8 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800566c:	4b1d      	ldr	r3, [pc, #116]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800566e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005670:	f003 0302 	and.w	r3, r3, #2
 8005674:	2b00      	cmp	r3, #0
 8005676:	d0ee      	beq.n	8005656 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800567c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005680:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005684:	d10d      	bne.n	80056a2 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005686:	4b17      	ldr	r3, [pc, #92]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005692:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005696:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800569a:	4912      	ldr	r1, [pc, #72]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800569c:	4313      	orrs	r3, r2
 800569e:	608b      	str	r3, [r1, #8]
 80056a0:	e005      	b.n	80056ae <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80056a2:	4b10      	ldr	r3, [pc, #64]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	4a0f      	ldr	r2, [pc, #60]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056a8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80056ac:	6093      	str	r3, [r2, #8]
 80056ae:	4b0d      	ldr	r3, [pc, #52]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056b0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80056b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80056ba:	490a      	ldr	r1, [pc, #40]	@ (80056e4 <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0310 	and.w	r3, r3, #16
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d004      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80056d2:	4b06      	ldr	r3, [pc, #24]	@ (80056ec <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80056d4:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3718      	adds	r7, #24
 80056dc:	46bd      	mov	sp, r7
 80056de:	bd80      	pop	{r7, pc}
 80056e0:	40007000 	.word	0x40007000
 80056e4:	40023800 	.word	0x40023800
 80056e8:	42470e40 	.word	0x42470e40
 80056ec:	424711e0 	.word	0x424711e0

080056f0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b082      	sub	sp, #8
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e025      	b.n	8005750 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 800570a:	b2db      	uxtb	r3, r3
 800570c:	2b00      	cmp	r3, #0
 800570e:	d106      	bne.n	800571e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2200      	movs	r2, #0
 8005714:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005718:	6878      	ldr	r0, [r7, #4]
 800571a:	f7fb ffd7 	bl	80016cc <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2202      	movs	r2, #2
 8005722:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	3304      	adds	r3, #4
 800572e:	4619      	mov	r1, r3
 8005730:	4610      	mov	r0, r2
 8005732:	f001 fd1d 	bl	8007170 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	6818      	ldr	r0, [r3, #0]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	685b      	ldr	r3, [r3, #4]
 800573e:	461a      	mov	r2, r3
 8005740:	6839      	ldr	r1, [r7, #0]
 8005742:	f001 fd72 	bl	800722a <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 800574e:	2300      	movs	r3, #0
}
 8005750:	4618      	mov	r0, r3
 8005752:	3708      	adds	r7, #8
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e07b      	b.n	8005862 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800576e:	2b00      	cmp	r3, #0
 8005770:	d108      	bne.n	8005784 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	685b      	ldr	r3, [r3, #4]
 8005776:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800577a:	d009      	beq.n	8005790 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2200      	movs	r2, #0
 8005780:	61da      	str	r2, [r3, #28]
 8005782:	e005      	b.n	8005790 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2200      	movs	r2, #0
 8005788:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	2200      	movs	r2, #0
 8005794:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800579c:	b2db      	uxtb	r3, r3
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d106      	bne.n	80057b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	2200      	movs	r2, #0
 80057a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f7fb fdec 	bl	8001388 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2202      	movs	r2, #2
 80057b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80057c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	685b      	ldr	r3, [r3, #4]
 80057cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80057d8:	431a      	orrs	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	68db      	ldr	r3, [r3, #12]
 80057de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80057e2:	431a      	orrs	r2, r3
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	691b      	ldr	r3, [r3, #16]
 80057e8:	f003 0302 	and.w	r3, r3, #2
 80057ec:	431a      	orrs	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	f003 0301 	and.w	r3, r3, #1
 80057f6:	431a      	orrs	r2, r3
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	699b      	ldr	r3, [r3, #24]
 80057fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005800:	431a      	orrs	r2, r3
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	69db      	ldr	r3, [r3, #28]
 8005806:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800580a:	431a      	orrs	r2, r3
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6a1b      	ldr	r3, [r3, #32]
 8005810:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005814:	ea42 0103 	orr.w	r1, r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800581c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	430a      	orrs	r2, r1
 8005826:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	699b      	ldr	r3, [r3, #24]
 800582c:	0c1b      	lsrs	r3, r3, #16
 800582e:	f003 0104 	and.w	r1, r3, #4
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005836:	f003 0210 	and.w	r2, r3, #16
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	430a      	orrs	r2, r1
 8005840:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	69da      	ldr	r2, [r3, #28]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005850:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2201      	movs	r2, #1
 800585c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3708      	adds	r7, #8
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b088      	sub	sp, #32
 800586e:	af00      	add	r7, sp, #0
 8005870:	60f8      	str	r0, [r7, #12]
 8005872:	60b9      	str	r1, [r7, #8]
 8005874:	603b      	str	r3, [r7, #0]
 8005876:	4613      	mov	r3, r2
 8005878:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800587a:	f7fc f877 	bl	800196c <HAL_GetTick>
 800587e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005880:	88fb      	ldrh	r3, [r7, #6]
 8005882:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800588a:	b2db      	uxtb	r3, r3
 800588c:	2b01      	cmp	r3, #1
 800588e:	d001      	beq.n	8005894 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005890:	2302      	movs	r3, #2
 8005892:	e12a      	b.n	8005aea <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	2b00      	cmp	r3, #0
 8005898:	d002      	beq.n	80058a0 <HAL_SPI_Transmit+0x36>
 800589a:	88fb      	ldrh	r3, [r7, #6]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e122      	b.n	8005aea <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d101      	bne.n	80058b2 <HAL_SPI_Transmit+0x48>
 80058ae:	2302      	movs	r3, #2
 80058b0:	e11b      	b.n	8005aea <HAL_SPI_Transmit+0x280>
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	2201      	movs	r2, #1
 80058b6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2203      	movs	r2, #3
 80058be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	68ba      	ldr	r2, [r7, #8]
 80058cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	88fa      	ldrh	r2, [r7, #6]
 80058d2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	88fa      	ldrh	r2, [r7, #6]
 80058d8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	2200      	movs	r2, #0
 80058de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	2200      	movs	r2, #0
 80058e4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2200      	movs	r2, #0
 80058f0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2200      	movs	r2, #0
 80058f6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	689b      	ldr	r3, [r3, #8]
 80058fc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005900:	d10f      	bne.n	8005922 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005910:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005920:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800592c:	2b40      	cmp	r3, #64	@ 0x40
 800592e:	d007      	beq.n	8005940 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800593e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	68db      	ldr	r3, [r3, #12]
 8005944:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005948:	d152      	bne.n	80059f0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d002      	beq.n	8005958 <HAL_SPI_Transmit+0xee>
 8005952:	8b7b      	ldrh	r3, [r7, #26]
 8005954:	2b01      	cmp	r3, #1
 8005956:	d145      	bne.n	80059e4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800595c:	881a      	ldrh	r2, [r3, #0]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005968:	1c9a      	adds	r2, r3, #2
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005972:	b29b      	uxth	r3, r3
 8005974:	3b01      	subs	r3, #1
 8005976:	b29a      	uxth	r2, r3
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800597c:	e032      	b.n	80059e4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f003 0302 	and.w	r3, r3, #2
 8005988:	2b02      	cmp	r3, #2
 800598a:	d112      	bne.n	80059b2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005990:	881a      	ldrh	r2, [r3, #0]
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800599c:	1c9a      	adds	r2, r3, #2
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	3b01      	subs	r3, #1
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	86da      	strh	r2, [r3, #54]	@ 0x36
 80059b0:	e018      	b.n	80059e4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80059b2:	f7fb ffdb 	bl	800196c <HAL_GetTick>
 80059b6:	4602      	mov	r2, r0
 80059b8:	69fb      	ldr	r3, [r7, #28]
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d803      	bhi.n	80059ca <HAL_SPI_Transmit+0x160>
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059c8:	d102      	bne.n	80059d0 <HAL_SPI_Transmit+0x166>
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d109      	bne.n	80059e4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2201      	movs	r2, #1
 80059d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80059e0:	2303      	movs	r3, #3
 80059e2:	e082      	b.n	8005aea <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80059e8:	b29b      	uxth	r3, r3
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d1c7      	bne.n	800597e <HAL_SPI_Transmit+0x114>
 80059ee:	e053      	b.n	8005a98 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d002      	beq.n	80059fe <HAL_SPI_Transmit+0x194>
 80059f8:	8b7b      	ldrh	r3, [r7, #26]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d147      	bne.n	8005a8e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	330c      	adds	r3, #12
 8005a08:	7812      	ldrb	r2, [r2, #0]
 8005a0a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a10:	1c5a      	adds	r2, r3, #1
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a1a:	b29b      	uxth	r3, r3
 8005a1c:	3b01      	subs	r3, #1
 8005a1e:	b29a      	uxth	r2, r3
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005a24:	e033      	b.n	8005a8e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	689b      	ldr	r3, [r3, #8]
 8005a2c:	f003 0302 	and.w	r3, r3, #2
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d113      	bne.n	8005a5c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	330c      	adds	r3, #12
 8005a3e:	7812      	ldrb	r2, [r2, #0]
 8005a40:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a46:	1c5a      	adds	r2, r3, #1
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a50:	b29b      	uxth	r3, r3
 8005a52:	3b01      	subs	r3, #1
 8005a54:	b29a      	uxth	r2, r3
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005a5a:	e018      	b.n	8005a8e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005a5c:	f7fb ff86 	bl	800196c <HAL_GetTick>
 8005a60:	4602      	mov	r2, r0
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	1ad3      	subs	r3, r2, r3
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	429a      	cmp	r2, r3
 8005a6a:	d803      	bhi.n	8005a74 <HAL_SPI_Transmit+0x20a>
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a72:	d102      	bne.n	8005a7a <HAL_SPI_Transmit+0x210>
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d109      	bne.n	8005a8e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2201      	movs	r2, #1
 8005a7e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	2200      	movs	r2, #0
 8005a86:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	e02d      	b.n	8005aea <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d1c6      	bne.n	8005a26 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005a98:	69fa      	ldr	r2, [r7, #28]
 8005a9a:	6839      	ldr	r1, [r7, #0]
 8005a9c:	68f8      	ldr	r0, [r7, #12]
 8005a9e:	f000 fbd9 	bl	8006254 <SPI_EndRxTxTransaction>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d002      	beq.n	8005aae <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	2220      	movs	r2, #32
 8005aac:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d10a      	bne.n	8005acc <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ab6:	2300      	movs	r3, #0
 8005ab8:	617b      	str	r3, [r7, #20]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	617b      	str	r3, [r7, #20]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	617b      	str	r3, [r7, #20]
 8005aca:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2201      	movs	r2, #1
 8005ad0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	2200      	movs	r2, #0
 8005ad8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	d001      	beq.n	8005ae8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e000      	b.n	8005aea <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8005ae8:	2300      	movs	r3, #0
  }
}
 8005aea:	4618      	mov	r0, r3
 8005aec:	3720      	adds	r7, #32
 8005aee:	46bd      	mov	sp, r7
 8005af0:	bd80      	pop	{r7, pc}

08005af2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005af2:	b580      	push	{r7, lr}
 8005af4:	b088      	sub	sp, #32
 8005af6:	af02      	add	r7, sp, #8
 8005af8:	60f8      	str	r0, [r7, #12]
 8005afa:	60b9      	str	r1, [r7, #8]
 8005afc:	603b      	str	r3, [r7, #0]
 8005afe:	4613      	mov	r3, r2
 8005b00:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005b08:	b2db      	uxtb	r3, r3
 8005b0a:	2b01      	cmp	r3, #1
 8005b0c:	d001      	beq.n	8005b12 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8005b0e:	2302      	movs	r3, #2
 8005b10:	e104      	b.n	8005d1c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	685b      	ldr	r3, [r3, #4]
 8005b16:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005b1a:	d112      	bne.n	8005b42 <HAL_SPI_Receive+0x50>
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d10e      	bne.n	8005b42 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2204      	movs	r2, #4
 8005b28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005b2c:	88fa      	ldrh	r2, [r7, #6]
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	9300      	str	r3, [sp, #0]
 8005b32:	4613      	mov	r3, r2
 8005b34:	68ba      	ldr	r2, [r7, #8]
 8005b36:	68b9      	ldr	r1, [r7, #8]
 8005b38:	68f8      	ldr	r0, [r7, #12]
 8005b3a:	f000 f8f3 	bl	8005d24 <HAL_SPI_TransmitReceive>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	e0ec      	b.n	8005d1c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b42:	f7fb ff13 	bl	800196c <HAL_GetTick>
 8005b46:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d002      	beq.n	8005b54 <HAL_SPI_Receive+0x62>
 8005b4e:	88fb      	ldrh	r3, [r7, #6]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d101      	bne.n	8005b58 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e0e1      	b.n	8005d1c <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005b5e:	2b01      	cmp	r3, #1
 8005b60:	d101      	bne.n	8005b66 <HAL_SPI_Receive+0x74>
 8005b62:	2302      	movs	r3, #2
 8005b64:	e0da      	b.n	8005d1c <HAL_SPI_Receive+0x22a>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2201      	movs	r2, #1
 8005b6a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	2204      	movs	r2, #4
 8005b72:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	68ba      	ldr	r2, [r7, #8]
 8005b80:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	88fa      	ldrh	r2, [r7, #6]
 8005b86:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	88fa      	ldrh	r2, [r7, #6]
 8005b8c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	689b      	ldr	r3, [r3, #8]
 8005bb0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005bb4:	d10f      	bne.n	8005bd6 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005bc4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005bd4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005be0:	2b40      	cmp	r3, #64	@ 0x40
 8005be2:	d007      	beq.n	8005bf4 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	681a      	ldr	r2, [r3, #0]
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005bf2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	68db      	ldr	r3, [r3, #12]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d170      	bne.n	8005cde <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005bfc:	e035      	b.n	8005c6a <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	689b      	ldr	r3, [r3, #8]
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d115      	bne.n	8005c38 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	f103 020c 	add.w	r2, r3, #12
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c18:	7812      	ldrb	r2, [r2, #0]
 8005c1a:	b2d2      	uxtb	r2, r2
 8005c1c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c22:	1c5a      	adds	r2, r3, #1
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c2c:	b29b      	uxth	r3, r3
 8005c2e:	3b01      	subs	r3, #1
 8005c30:	b29a      	uxth	r2, r3
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005c36:	e018      	b.n	8005c6a <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c38:	f7fb fe98 	bl	800196c <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	697b      	ldr	r3, [r7, #20]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	683a      	ldr	r2, [r7, #0]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d803      	bhi.n	8005c50 <HAL_SPI_Receive+0x15e>
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c4e:	d102      	bne.n	8005c56 <HAL_SPI_Receive+0x164>
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d109      	bne.n	8005c6a <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	2201      	movs	r2, #1
 8005c5a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	2200      	movs	r2, #0
 8005c62:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005c66:	2303      	movs	r3, #3
 8005c68:	e058      	b.n	8005d1c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005c6e:	b29b      	uxth	r3, r3
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d1c4      	bne.n	8005bfe <HAL_SPI_Receive+0x10c>
 8005c74:	e038      	b.n	8005ce8 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	689b      	ldr	r3, [r3, #8]
 8005c7c:	f003 0301 	and.w	r3, r3, #1
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d113      	bne.n	8005cac <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68da      	ldr	r2, [r3, #12]
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c8e:	b292      	uxth	r2, r2
 8005c90:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c96:	1c9a      	adds	r2, r3, #2
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005caa:	e018      	b.n	8005cde <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cac:	f7fb fe5e 	bl	800196c <HAL_GetTick>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	683a      	ldr	r2, [r7, #0]
 8005cb8:	429a      	cmp	r2, r3
 8005cba:	d803      	bhi.n	8005cc4 <HAL_SPI_Receive+0x1d2>
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cc2:	d102      	bne.n	8005cca <HAL_SPI_Receive+0x1d8>
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d109      	bne.n	8005cde <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2201      	movs	r2, #1
 8005cce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	2200      	movs	r2, #0
 8005cd6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8005cda:	2303      	movs	r3, #3
 8005cdc:	e01e      	b.n	8005d1c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1c6      	bne.n	8005c76 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005ce8:	697a      	ldr	r2, [r7, #20]
 8005cea:	6839      	ldr	r1, [r7, #0]
 8005cec:	68f8      	ldr	r0, [r7, #12]
 8005cee:	f000 fa4b 	bl	8006188 <SPI_EndRxTransaction>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d002      	beq.n	8005cfe <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2201      	movs	r2, #1
 8005d02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2200      	movs	r2, #0
 8005d0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e000      	b.n	8005d1c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8005d1a:	2300      	movs	r3, #0
  }
}
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	3718      	adds	r7, #24
 8005d20:	46bd      	mov	sp, r7
 8005d22:	bd80      	pop	{r7, pc}

08005d24 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b08a      	sub	sp, #40	@ 0x28
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
 8005d30:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005d32:	2301      	movs	r3, #1
 8005d34:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005d36:	f7fb fe19 	bl	800196c <HAL_GetTick>
 8005d3a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d42:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	685b      	ldr	r3, [r3, #4]
 8005d48:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005d4a:	887b      	ldrh	r3, [r7, #2]
 8005d4c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005d4e:	7ffb      	ldrb	r3, [r7, #31]
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d00c      	beq.n	8005d6e <HAL_SPI_TransmitReceive+0x4a>
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d5a:	d106      	bne.n	8005d6a <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d102      	bne.n	8005d6a <HAL_SPI_TransmitReceive+0x46>
 8005d64:	7ffb      	ldrb	r3, [r7, #31]
 8005d66:	2b04      	cmp	r3, #4
 8005d68:	d001      	beq.n	8005d6e <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8005d6a:	2302      	movs	r3, #2
 8005d6c:	e17f      	b.n	800606e <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d005      	beq.n	8005d80 <HAL_SPI_TransmitReceive+0x5c>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d002      	beq.n	8005d80 <HAL_SPI_TransmitReceive+0x5c>
 8005d7a:	887b      	ldrh	r3, [r7, #2]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d101      	bne.n	8005d84 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8005d80:	2301      	movs	r3, #1
 8005d82:	e174      	b.n	800606e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005d8a:	2b01      	cmp	r3, #1
 8005d8c:	d101      	bne.n	8005d92 <HAL_SPI_TransmitReceive+0x6e>
 8005d8e:	2302      	movs	r3, #2
 8005d90:	e16d      	b.n	800606e <HAL_SPI_TransmitReceive+0x34a>
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2201      	movs	r2, #1
 8005d96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005da0:	b2db      	uxtb	r3, r3
 8005da2:	2b04      	cmp	r3, #4
 8005da4:	d003      	beq.n	8005dae <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	2205      	movs	r2, #5
 8005daa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	887a      	ldrh	r2, [r7, #2]
 8005dbe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	887a      	ldrh	r2, [r7, #2]
 8005dc4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	68ba      	ldr	r2, [r7, #8]
 8005dca:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	887a      	ldrh	r2, [r7, #2]
 8005dd0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	887a      	ldrh	r2, [r7, #2]
 8005dd6:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	2200      	movs	r2, #0
 8005ddc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	2200      	movs	r2, #0
 8005de2:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dee:	2b40      	cmp	r3, #64	@ 0x40
 8005df0:	d007      	beq.n	8005e02 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e00:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	68db      	ldr	r3, [r3, #12]
 8005e06:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e0a:	d17e      	bne.n	8005f0a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d002      	beq.n	8005e1a <HAL_SPI_TransmitReceive+0xf6>
 8005e14:	8afb      	ldrh	r3, [r7, #22]
 8005e16:	2b01      	cmp	r3, #1
 8005e18:	d16c      	bne.n	8005ef4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e1e:	881a      	ldrh	r2, [r3, #0]
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e2a:	1c9a      	adds	r2, r3, #2
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	3b01      	subs	r3, #1
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005e3e:	e059      	b.n	8005ef4 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f003 0302 	and.w	r3, r3, #2
 8005e4a:	2b02      	cmp	r3, #2
 8005e4c:	d11b      	bne.n	8005e86 <HAL_SPI_TransmitReceive+0x162>
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d016      	beq.n	8005e86 <HAL_SPI_TransmitReceive+0x162>
 8005e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d113      	bne.n	8005e86 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e62:	881a      	ldrh	r2, [r3, #0]
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e6e:	1c9a      	adds	r2, r3, #2
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	3b01      	subs	r3, #1
 8005e7c:	b29a      	uxth	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005e82:	2300      	movs	r3, #0
 8005e84:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d119      	bne.n	8005ec8 <HAL_SPI_TransmitReceive+0x1a4>
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005e98:	b29b      	uxth	r3, r3
 8005e9a:	2b00      	cmp	r3, #0
 8005e9c:	d014      	beq.n	8005ec8 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	68da      	ldr	r2, [r3, #12]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ea8:	b292      	uxth	r2, r2
 8005eaa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005eb0:	1c9a      	adds	r2, r3, #2
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	3b01      	subs	r3, #1
 8005ebe:	b29a      	uxth	r2, r3
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005ec8:	f7fb fd50 	bl	800196c <HAL_GetTick>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	6a3b      	ldr	r3, [r7, #32]
 8005ed0:	1ad3      	subs	r3, r2, r3
 8005ed2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d80d      	bhi.n	8005ef4 <HAL_SPI_TransmitReceive+0x1d0>
 8005ed8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ede:	d009      	beq.n	8005ef4 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005ef0:	2303      	movs	r3, #3
 8005ef2:	e0bc      	b.n	800606e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ef8:	b29b      	uxth	r3, r3
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d1a0      	bne.n	8005e40 <HAL_SPI_TransmitReceive+0x11c>
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d19b      	bne.n	8005e40 <HAL_SPI_TransmitReceive+0x11c>
 8005f08:	e082      	b.n	8006010 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	685b      	ldr	r3, [r3, #4]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d002      	beq.n	8005f18 <HAL_SPI_TransmitReceive+0x1f4>
 8005f12:	8afb      	ldrh	r3, [r7, #22]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d171      	bne.n	8005ffc <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	330c      	adds	r3, #12
 8005f22:	7812      	ldrb	r2, [r2, #0]
 8005f24:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f2a:	1c5a      	adds	r2, r3, #1
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f34:	b29b      	uxth	r3, r3
 8005f36:	3b01      	subs	r3, #1
 8005f38:	b29a      	uxth	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005f3e:	e05d      	b.n	8005ffc <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	f003 0302 	and.w	r3, r3, #2
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d11c      	bne.n	8005f88 <HAL_SPI_TransmitReceive+0x264>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d017      	beq.n	8005f88 <HAL_SPI_TransmitReceive+0x264>
 8005f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f5a:	2b01      	cmp	r3, #1
 8005f5c:	d114      	bne.n	8005f88 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	330c      	adds	r3, #12
 8005f68:	7812      	ldrb	r2, [r2, #0]
 8005f6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f70:	1c5a      	adds	r2, r3, #1
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005f84:	2300      	movs	r3, #0
 8005f86:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	f003 0301 	and.w	r3, r3, #1
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d119      	bne.n	8005fca <HAL_SPI_TransmitReceive+0x2a6>
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005f9a:	b29b      	uxth	r3, r3
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d014      	beq.n	8005fca <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	68da      	ldr	r2, [r3, #12]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005faa:	b2d2      	uxtb	r2, r2
 8005fac:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fb2:	1c5a      	adds	r2, r3, #1
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8005fbc:	b29b      	uxth	r3, r3
 8005fbe:	3b01      	subs	r3, #1
 8005fc0:	b29a      	uxth	r2, r3
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8005fca:	f7fb fccf 	bl	800196c <HAL_GetTick>
 8005fce:	4602      	mov	r2, r0
 8005fd0:	6a3b      	ldr	r3, [r7, #32]
 8005fd2:	1ad3      	subs	r3, r2, r3
 8005fd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d803      	bhi.n	8005fe2 <HAL_SPI_TransmitReceive+0x2be>
 8005fda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fe0:	d102      	bne.n	8005fe8 <HAL_SPI_TransmitReceive+0x2c4>
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d109      	bne.n	8005ffc <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8005ff8:	2303      	movs	r3, #3
 8005ffa:	e038      	b.n	800606e <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006000:	b29b      	uxth	r3, r3
 8006002:	2b00      	cmp	r3, #0
 8006004:	d19c      	bne.n	8005f40 <HAL_SPI_TransmitReceive+0x21c>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800600a:	b29b      	uxth	r3, r3
 800600c:	2b00      	cmp	r3, #0
 800600e:	d197      	bne.n	8005f40 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006010:	6a3a      	ldr	r2, [r7, #32]
 8006012:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f000 f91d 	bl	8006254 <SPI_EndRxTxTransaction>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d008      	beq.n	8006032 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2220      	movs	r2, #32
 8006024:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	2200      	movs	r2, #0
 800602a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800602e:	2301      	movs	r3, #1
 8006030:	e01d      	b.n	800606e <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d10a      	bne.n	8006050 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800603a:	2300      	movs	r3, #0
 800603c:	613b      	str	r3, [r7, #16]
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	613b      	str	r3, [r7, #16]
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	613b      	str	r3, [r7, #16]
 800604e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2201      	movs	r2, #1
 8006054:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2200      	movs	r2, #0
 800605c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006064:	2b00      	cmp	r3, #0
 8006066:	d001      	beq.n	800606c <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e000      	b.n	800606e <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800606c:	2300      	movs	r3, #0
  }
}
 800606e:	4618      	mov	r0, r3
 8006070:	3728      	adds	r7, #40	@ 0x28
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
	...

08006078 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b088      	sub	sp, #32
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	603b      	str	r3, [r7, #0]
 8006084:	4613      	mov	r3, r2
 8006086:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006088:	f7fb fc70 	bl	800196c <HAL_GetTick>
 800608c:	4602      	mov	r2, r0
 800608e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006090:	1a9b      	subs	r3, r3, r2
 8006092:	683a      	ldr	r2, [r7, #0]
 8006094:	4413      	add	r3, r2
 8006096:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006098:	f7fb fc68 	bl	800196c <HAL_GetTick>
 800609c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800609e:	4b39      	ldr	r3, [pc, #228]	@ (8006184 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	015b      	lsls	r3, r3, #5
 80060a4:	0d1b      	lsrs	r3, r3, #20
 80060a6:	69fa      	ldr	r2, [r7, #28]
 80060a8:	fb02 f303 	mul.w	r3, r2, r3
 80060ac:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80060ae:	e054      	b.n	800615a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060b6:	d050      	beq.n	800615a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80060b8:	f7fb fc58 	bl	800196c <HAL_GetTick>
 80060bc:	4602      	mov	r2, r0
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	1ad3      	subs	r3, r2, r3
 80060c2:	69fa      	ldr	r2, [r7, #28]
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d902      	bls.n	80060ce <SPI_WaitFlagStateUntilTimeout+0x56>
 80060c8:	69fb      	ldr	r3, [r7, #28]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d13d      	bne.n	800614a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	685a      	ldr	r2, [r3, #4]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80060dc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80060e6:	d111      	bne.n	800610c <SPI_WaitFlagStateUntilTimeout+0x94>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	689b      	ldr	r3, [r3, #8]
 80060ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060f0:	d004      	beq.n	80060fc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	689b      	ldr	r3, [r3, #8]
 80060f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80060fa:	d107      	bne.n	800610c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800610a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006110:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006114:	d10f      	bne.n	8006136 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	681a      	ldr	r2, [r3, #0]
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006124:	601a      	str	r2, [r3, #0]
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	681a      	ldr	r2, [r3, #0]
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006134:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	2201      	movs	r2, #1
 800613a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8006146:	2303      	movs	r3, #3
 8006148:	e017      	b.n	800617a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d101      	bne.n	8006154 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006150:	2300      	movs	r3, #0
 8006152:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	3b01      	subs	r3, #1
 8006158:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	689a      	ldr	r2, [r3, #8]
 8006160:	68bb      	ldr	r3, [r7, #8]
 8006162:	4013      	ands	r3, r2
 8006164:	68ba      	ldr	r2, [r7, #8]
 8006166:	429a      	cmp	r2, r3
 8006168:	bf0c      	ite	eq
 800616a:	2301      	moveq	r3, #1
 800616c:	2300      	movne	r3, #0
 800616e:	b2db      	uxtb	r3, r3
 8006170:	461a      	mov	r2, r3
 8006172:	79fb      	ldrb	r3, [r7, #7]
 8006174:	429a      	cmp	r2, r3
 8006176:	d19b      	bne.n	80060b0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3720      	adds	r7, #32
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	20000004 	.word	0x20000004

08006188 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b086      	sub	sp, #24
 800618c:	af02      	add	r7, sp, #8
 800618e:	60f8      	str	r0, [r7, #12]
 8006190:	60b9      	str	r1, [r7, #8]
 8006192:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	685b      	ldr	r3, [r3, #4]
 8006198:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800619c:	d111      	bne.n	80061c2 <SPI_EndRxTransaction+0x3a>
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061a6:	d004      	beq.n	80061b2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	689b      	ldr	r3, [r3, #8]
 80061ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061b0:	d107      	bne.n	80061c2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061c0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	685b      	ldr	r3, [r3, #4]
 80061c6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80061ca:	d12a      	bne.n	8006222 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80061d4:	d012      	beq.n	80061fc <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	2200      	movs	r2, #0
 80061de:	2180      	movs	r1, #128	@ 0x80
 80061e0:	68f8      	ldr	r0, [r7, #12]
 80061e2:	f7ff ff49 	bl	8006078 <SPI_WaitFlagStateUntilTimeout>
 80061e6:	4603      	mov	r3, r0
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d02d      	beq.n	8006248 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061f0:	f043 0220 	orr.w	r2, r3, #32
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	e026      	b.n	800624a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	2200      	movs	r2, #0
 8006204:	2101      	movs	r1, #1
 8006206:	68f8      	ldr	r0, [r7, #12]
 8006208:	f7ff ff36 	bl	8006078 <SPI_WaitFlagStateUntilTimeout>
 800620c:	4603      	mov	r3, r0
 800620e:	2b00      	cmp	r3, #0
 8006210:	d01a      	beq.n	8006248 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006216:	f043 0220 	orr.w	r2, r3, #32
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800621e:	2303      	movs	r3, #3
 8006220:	e013      	b.n	800624a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	9300      	str	r3, [sp, #0]
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	2200      	movs	r2, #0
 800622a:	2101      	movs	r1, #1
 800622c:	68f8      	ldr	r0, [r7, #12]
 800622e:	f7ff ff23 	bl	8006078 <SPI_WaitFlagStateUntilTimeout>
 8006232:	4603      	mov	r3, r0
 8006234:	2b00      	cmp	r3, #0
 8006236:	d007      	beq.n	8006248 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800623c:	f043 0220 	orr.w	r2, r3, #32
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8006244:	2303      	movs	r3, #3
 8006246:	e000      	b.n	800624a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3710      	adds	r7, #16
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}
	...

08006254 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b088      	sub	sp, #32
 8006258:	af02      	add	r7, sp, #8
 800625a:	60f8      	str	r0, [r7, #12]
 800625c:	60b9      	str	r1, [r7, #8]
 800625e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	9300      	str	r3, [sp, #0]
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2201      	movs	r2, #1
 8006268:	2102      	movs	r1, #2
 800626a:	68f8      	ldr	r0, [r7, #12]
 800626c:	f7ff ff04 	bl	8006078 <SPI_WaitFlagStateUntilTimeout>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d007      	beq.n	8006286 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800627a:	f043 0220 	orr.w	r2, r3, #32
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8006282:	2303      	movs	r3, #3
 8006284:	e032      	b.n	80062ec <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006286:	4b1b      	ldr	r3, [pc, #108]	@ (80062f4 <SPI_EndRxTxTransaction+0xa0>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a1b      	ldr	r2, [pc, #108]	@ (80062f8 <SPI_EndRxTxTransaction+0xa4>)
 800628c:	fba2 2303 	umull	r2, r3, r2, r3
 8006290:	0d5b      	lsrs	r3, r3, #21
 8006292:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006296:	fb02 f303 	mul.w	r3, r2, r3
 800629a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80062a4:	d112      	bne.n	80062cc <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	9300      	str	r3, [sp, #0]
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	2200      	movs	r2, #0
 80062ae:	2180      	movs	r1, #128	@ 0x80
 80062b0:	68f8      	ldr	r0, [r7, #12]
 80062b2:	f7ff fee1 	bl	8006078 <SPI_WaitFlagStateUntilTimeout>
 80062b6:	4603      	mov	r3, r0
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d016      	beq.n	80062ea <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80062c0:	f043 0220 	orr.w	r2, r3, #32
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80062c8:	2303      	movs	r3, #3
 80062ca:	e00f      	b.n	80062ec <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d00a      	beq.n	80062e8 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 80062d2:	697b      	ldr	r3, [r7, #20]
 80062d4:	3b01      	subs	r3, #1
 80062d6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062e2:	2b80      	cmp	r3, #128	@ 0x80
 80062e4:	d0f2      	beq.n	80062cc <SPI_EndRxTxTransaction+0x78>
 80062e6:	e000      	b.n	80062ea <SPI_EndRxTxTransaction+0x96>
        break;
 80062e8:	bf00      	nop
  }

  return HAL_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3718      	adds	r7, #24
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}
 80062f4:	20000004 	.word	0x20000004
 80062f8:	165e9f81 	.word	0x165e9f81

080062fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d101      	bne.n	800630e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e041      	b.n	8006392 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b00      	cmp	r3, #0
 8006318:	d106      	bne.n	8006328 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f7fb f878 	bl	8001418 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2202      	movs	r2, #2
 800632c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	3304      	adds	r3, #4
 8006338:	4619      	mov	r1, r3
 800633a:	4610      	mov	r0, r2
 800633c:	f000 fa7e 	bl	800683c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006390:	2300      	movs	r3, #0
}
 8006392:	4618      	mov	r0, r3
 8006394:	3708      	adds	r7, #8
 8006396:	46bd      	mov	sp, r7
 8006398:	bd80      	pop	{r7, pc}
	...

0800639c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b01      	cmp	r3, #1
 80063ae:	d001      	beq.n	80063b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80063b0:	2301      	movs	r3, #1
 80063b2:	e04e      	b.n	8006452 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2202      	movs	r2, #2
 80063b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	68da      	ldr	r2, [r3, #12]
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f042 0201 	orr.w	r2, r2, #1
 80063ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a23      	ldr	r2, [pc, #140]	@ (8006460 <HAL_TIM_Base_Start_IT+0xc4>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d022      	beq.n	800641c <HAL_TIM_Base_Start_IT+0x80>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063de:	d01d      	beq.n	800641c <HAL_TIM_Base_Start_IT+0x80>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	4a1f      	ldr	r2, [pc, #124]	@ (8006464 <HAL_TIM_Base_Start_IT+0xc8>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d018      	beq.n	800641c <HAL_TIM_Base_Start_IT+0x80>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	4a1e      	ldr	r2, [pc, #120]	@ (8006468 <HAL_TIM_Base_Start_IT+0xcc>)
 80063f0:	4293      	cmp	r3, r2
 80063f2:	d013      	beq.n	800641c <HAL_TIM_Base_Start_IT+0x80>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	4a1c      	ldr	r2, [pc, #112]	@ (800646c <HAL_TIM_Base_Start_IT+0xd0>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d00e      	beq.n	800641c <HAL_TIM_Base_Start_IT+0x80>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a1b      	ldr	r2, [pc, #108]	@ (8006470 <HAL_TIM_Base_Start_IT+0xd4>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d009      	beq.n	800641c <HAL_TIM_Base_Start_IT+0x80>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	4a19      	ldr	r2, [pc, #100]	@ (8006474 <HAL_TIM_Base_Start_IT+0xd8>)
 800640e:	4293      	cmp	r3, r2
 8006410:	d004      	beq.n	800641c <HAL_TIM_Base_Start_IT+0x80>
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	4a18      	ldr	r2, [pc, #96]	@ (8006478 <HAL_TIM_Base_Start_IT+0xdc>)
 8006418:	4293      	cmp	r3, r2
 800641a:	d111      	bne.n	8006440 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	f003 0307 	and.w	r3, r3, #7
 8006426:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2b06      	cmp	r3, #6
 800642c:	d010      	beq.n	8006450 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f042 0201 	orr.w	r2, r2, #1
 800643c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800643e:	e007      	b.n	8006450 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	681a      	ldr	r2, [r3, #0]
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f042 0201 	orr.w	r2, r2, #1
 800644e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006450:	2300      	movs	r3, #0
}
 8006452:	4618      	mov	r0, r3
 8006454:	3714      	adds	r7, #20
 8006456:	46bd      	mov	sp, r7
 8006458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645c:	4770      	bx	lr
 800645e:	bf00      	nop
 8006460:	40010000 	.word	0x40010000
 8006464:	40000400 	.word	0x40000400
 8006468:	40000800 	.word	0x40000800
 800646c:	40000c00 	.word	0x40000c00
 8006470:	40010400 	.word	0x40010400
 8006474:	40014000 	.word	0x40014000
 8006478:	40001800 	.word	0x40001800

0800647c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	68db      	ldr	r3, [r3, #12]
 800648a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	f003 0302 	and.w	r3, r3, #2
 800649a:	2b00      	cmp	r3, #0
 800649c:	d020      	beq.n	80064e0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f003 0302 	and.w	r3, r3, #2
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d01b      	beq.n	80064e0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f06f 0202 	mvn.w	r2, #2
 80064b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2201      	movs	r2, #1
 80064b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	699b      	ldr	r3, [r3, #24]
 80064be:	f003 0303 	and.w	r3, r3, #3
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d003      	beq.n	80064ce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 f999 	bl	80067fe <HAL_TIM_IC_CaptureCallback>
 80064cc:	e005      	b.n	80064da <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 f98b 	bl	80067ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064d4:	6878      	ldr	r0, [r7, #4]
 80064d6:	f000 f99c 	bl	8006812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2200      	movs	r2, #0
 80064de:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80064e0:	68bb      	ldr	r3, [r7, #8]
 80064e2:	f003 0304 	and.w	r3, r3, #4
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d020      	beq.n	800652c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	f003 0304 	and.w	r3, r3, #4
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d01b      	beq.n	800652c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f06f 0204 	mvn.w	r2, #4
 80064fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2202      	movs	r2, #2
 8006502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	699b      	ldr	r3, [r3, #24]
 800650a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800650e:	2b00      	cmp	r3, #0
 8006510:	d003      	beq.n	800651a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 f973 	bl	80067fe <HAL_TIM_IC_CaptureCallback>
 8006518:	e005      	b.n	8006526 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f000 f965 	bl	80067ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 f976 	bl	8006812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	2200      	movs	r2, #0
 800652a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	f003 0308 	and.w	r3, r3, #8
 8006532:	2b00      	cmp	r3, #0
 8006534:	d020      	beq.n	8006578 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	f003 0308 	and.w	r3, r3, #8
 800653c:	2b00      	cmp	r3, #0
 800653e:	d01b      	beq.n	8006578 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f06f 0208 	mvn.w	r2, #8
 8006548:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2204      	movs	r2, #4
 800654e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	f003 0303 	and.w	r3, r3, #3
 800655a:	2b00      	cmp	r3, #0
 800655c:	d003      	beq.n	8006566 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 f94d 	bl	80067fe <HAL_TIM_IC_CaptureCallback>
 8006564:	e005      	b.n	8006572 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 f93f 	bl	80067ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f000 f950 	bl	8006812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	f003 0310 	and.w	r3, r3, #16
 800657e:	2b00      	cmp	r3, #0
 8006580:	d020      	beq.n	80065c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	f003 0310 	and.w	r3, r3, #16
 8006588:	2b00      	cmp	r3, #0
 800658a:	d01b      	beq.n	80065c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f06f 0210 	mvn.w	r2, #16
 8006594:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2208      	movs	r2, #8
 800659a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	69db      	ldr	r3, [r3, #28]
 80065a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d003      	beq.n	80065b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f927 	bl	80067fe <HAL_TIM_IC_CaptureCallback>
 80065b0:	e005      	b.n	80065be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065b2:	6878      	ldr	r0, [r7, #4]
 80065b4:	f000 f919 	bl	80067ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	f000 f92a 	bl	8006812 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	2200      	movs	r2, #0
 80065c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80065c4:	68bb      	ldr	r3, [r7, #8]
 80065c6:	f003 0301 	and.w	r3, r3, #1
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d00c      	beq.n	80065e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f003 0301 	and.w	r3, r3, #1
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d007      	beq.n	80065e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f06f 0201 	mvn.w	r2, #1
 80065e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80065e2:	6878      	ldr	r0, [r7, #4]
 80065e4:	f7fa fcac 	bl	8000f40 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00c      	beq.n	800660c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d007      	beq.n	800660c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006606:	6878      	ldr	r0, [r7, #4]
 8006608:	f000 fae4 	bl	8006bd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006612:	2b00      	cmp	r3, #0
 8006614:	d00c      	beq.n	8006630 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800661c:	2b00      	cmp	r3, #0
 800661e:	d007      	beq.n	8006630 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006628:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f000 f8fb 	bl	8006826 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006630:	68bb      	ldr	r3, [r7, #8]
 8006632:	f003 0320 	and.w	r3, r3, #32
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00c      	beq.n	8006654 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	f003 0320 	and.w	r3, r3, #32
 8006640:	2b00      	cmp	r3, #0
 8006642:	d007      	beq.n	8006654 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f06f 0220 	mvn.w	r2, #32
 800664c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 fab6 	bl	8006bc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006654:	bf00      	nop
 8006656:	3710      	adds	r7, #16
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	6078      	str	r0, [r7, #4]
 8006664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006666:	2300      	movs	r3, #0
 8006668:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006670:	2b01      	cmp	r3, #1
 8006672:	d101      	bne.n	8006678 <HAL_TIM_ConfigClockSource+0x1c>
 8006674:	2302      	movs	r3, #2
 8006676:	e0b4      	b.n	80067e2 <HAL_TIM_ConfigClockSource+0x186>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2202      	movs	r2, #2
 8006684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	689b      	ldr	r3, [r3, #8]
 800668e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006696:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800669e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	68ba      	ldr	r2, [r7, #8]
 80066a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066b0:	d03e      	beq.n	8006730 <HAL_TIM_ConfigClockSource+0xd4>
 80066b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80066b6:	f200 8087 	bhi.w	80067c8 <HAL_TIM_ConfigClockSource+0x16c>
 80066ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066be:	f000 8086 	beq.w	80067ce <HAL_TIM_ConfigClockSource+0x172>
 80066c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80066c6:	d87f      	bhi.n	80067c8 <HAL_TIM_ConfigClockSource+0x16c>
 80066c8:	2b70      	cmp	r3, #112	@ 0x70
 80066ca:	d01a      	beq.n	8006702 <HAL_TIM_ConfigClockSource+0xa6>
 80066cc:	2b70      	cmp	r3, #112	@ 0x70
 80066ce:	d87b      	bhi.n	80067c8 <HAL_TIM_ConfigClockSource+0x16c>
 80066d0:	2b60      	cmp	r3, #96	@ 0x60
 80066d2:	d050      	beq.n	8006776 <HAL_TIM_ConfigClockSource+0x11a>
 80066d4:	2b60      	cmp	r3, #96	@ 0x60
 80066d6:	d877      	bhi.n	80067c8 <HAL_TIM_ConfigClockSource+0x16c>
 80066d8:	2b50      	cmp	r3, #80	@ 0x50
 80066da:	d03c      	beq.n	8006756 <HAL_TIM_ConfigClockSource+0xfa>
 80066dc:	2b50      	cmp	r3, #80	@ 0x50
 80066de:	d873      	bhi.n	80067c8 <HAL_TIM_ConfigClockSource+0x16c>
 80066e0:	2b40      	cmp	r3, #64	@ 0x40
 80066e2:	d058      	beq.n	8006796 <HAL_TIM_ConfigClockSource+0x13a>
 80066e4:	2b40      	cmp	r3, #64	@ 0x40
 80066e6:	d86f      	bhi.n	80067c8 <HAL_TIM_ConfigClockSource+0x16c>
 80066e8:	2b30      	cmp	r3, #48	@ 0x30
 80066ea:	d064      	beq.n	80067b6 <HAL_TIM_ConfigClockSource+0x15a>
 80066ec:	2b30      	cmp	r3, #48	@ 0x30
 80066ee:	d86b      	bhi.n	80067c8 <HAL_TIM_ConfigClockSource+0x16c>
 80066f0:	2b20      	cmp	r3, #32
 80066f2:	d060      	beq.n	80067b6 <HAL_TIM_ConfigClockSource+0x15a>
 80066f4:	2b20      	cmp	r3, #32
 80066f6:	d867      	bhi.n	80067c8 <HAL_TIM_ConfigClockSource+0x16c>
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d05c      	beq.n	80067b6 <HAL_TIM_ConfigClockSource+0x15a>
 80066fc:	2b10      	cmp	r3, #16
 80066fe:	d05a      	beq.n	80067b6 <HAL_TIM_ConfigClockSource+0x15a>
 8006700:	e062      	b.n	80067c8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006712:	f000 f9b9 	bl	8006a88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	689b      	ldr	r3, [r3, #8]
 800671c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800671e:	68bb      	ldr	r3, [r7, #8]
 8006720:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006724:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	68ba      	ldr	r2, [r7, #8]
 800672c:	609a      	str	r2, [r3, #8]
      break;
 800672e:	e04f      	b.n	80067d0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006740:	f000 f9a2 	bl	8006a88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	689a      	ldr	r2, [r3, #8]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006752:	609a      	str	r2, [r3, #8]
      break;
 8006754:	e03c      	b.n	80067d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006762:	461a      	mov	r2, r3
 8006764:	f000 f916 	bl	8006994 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	2150      	movs	r1, #80	@ 0x50
 800676e:	4618      	mov	r0, r3
 8006770:	f000 f96f 	bl	8006a52 <TIM_ITRx_SetConfig>
      break;
 8006774:	e02c      	b.n	80067d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006782:	461a      	mov	r2, r3
 8006784:	f000 f935 	bl	80069f2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	2160      	movs	r1, #96	@ 0x60
 800678e:	4618      	mov	r0, r3
 8006790:	f000 f95f 	bl	8006a52 <TIM_ITRx_SetConfig>
      break;
 8006794:	e01c      	b.n	80067d0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067a2:	461a      	mov	r2, r3
 80067a4:	f000 f8f6 	bl	8006994 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	2140      	movs	r1, #64	@ 0x40
 80067ae:	4618      	mov	r0, r3
 80067b0:	f000 f94f 	bl	8006a52 <TIM_ITRx_SetConfig>
      break;
 80067b4:	e00c      	b.n	80067d0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4619      	mov	r1, r3
 80067c0:	4610      	mov	r0, r2
 80067c2:	f000 f946 	bl	8006a52 <TIM_ITRx_SetConfig>
      break;
 80067c6:	e003      	b.n	80067d0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	73fb      	strb	r3, [r7, #15]
      break;
 80067cc:	e000      	b.n	80067d0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80067ce:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2201      	movs	r2, #1
 80067d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80067e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}

080067ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067ea:	b480      	push	{r7}
 80067ec:	b083      	sub	sp, #12
 80067ee:	af00      	add	r7, sp, #0
 80067f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067f2:	bf00      	nop
 80067f4:	370c      	adds	r7, #12
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr

080067fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067fe:	b480      	push	{r7}
 8006800:	b083      	sub	sp, #12
 8006802:	af00      	add	r7, sp, #0
 8006804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006806:	bf00      	nop
 8006808:	370c      	adds	r7, #12
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr

08006812 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006812:	b480      	push	{r7}
 8006814:	b083      	sub	sp, #12
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800681a:	bf00      	nop
 800681c:	370c      	adds	r7, #12
 800681e:	46bd      	mov	sp, r7
 8006820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006824:	4770      	bx	lr

08006826 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006826:	b480      	push	{r7}
 8006828:	b083      	sub	sp, #12
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800682e:	bf00      	nop
 8006830:	370c      	adds	r7, #12
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
	...

0800683c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800683c:	b480      	push	{r7}
 800683e:	b085      	sub	sp, #20
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
 8006844:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	4a46      	ldr	r2, [pc, #280]	@ (8006968 <TIM_Base_SetConfig+0x12c>)
 8006850:	4293      	cmp	r3, r2
 8006852:	d013      	beq.n	800687c <TIM_Base_SetConfig+0x40>
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800685a:	d00f      	beq.n	800687c <TIM_Base_SetConfig+0x40>
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	4a43      	ldr	r2, [pc, #268]	@ (800696c <TIM_Base_SetConfig+0x130>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d00b      	beq.n	800687c <TIM_Base_SetConfig+0x40>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	4a42      	ldr	r2, [pc, #264]	@ (8006970 <TIM_Base_SetConfig+0x134>)
 8006868:	4293      	cmp	r3, r2
 800686a:	d007      	beq.n	800687c <TIM_Base_SetConfig+0x40>
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	4a41      	ldr	r2, [pc, #260]	@ (8006974 <TIM_Base_SetConfig+0x138>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d003      	beq.n	800687c <TIM_Base_SetConfig+0x40>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	4a40      	ldr	r2, [pc, #256]	@ (8006978 <TIM_Base_SetConfig+0x13c>)
 8006878:	4293      	cmp	r3, r2
 800687a:	d108      	bne.n	800688e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006882:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	68fa      	ldr	r2, [r7, #12]
 800688a:	4313      	orrs	r3, r2
 800688c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a35      	ldr	r2, [pc, #212]	@ (8006968 <TIM_Base_SetConfig+0x12c>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d02b      	beq.n	80068ee <TIM_Base_SetConfig+0xb2>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800689c:	d027      	beq.n	80068ee <TIM_Base_SetConfig+0xb2>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a32      	ldr	r2, [pc, #200]	@ (800696c <TIM_Base_SetConfig+0x130>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d023      	beq.n	80068ee <TIM_Base_SetConfig+0xb2>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a31      	ldr	r2, [pc, #196]	@ (8006970 <TIM_Base_SetConfig+0x134>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d01f      	beq.n	80068ee <TIM_Base_SetConfig+0xb2>
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	4a30      	ldr	r2, [pc, #192]	@ (8006974 <TIM_Base_SetConfig+0x138>)
 80068b2:	4293      	cmp	r3, r2
 80068b4:	d01b      	beq.n	80068ee <TIM_Base_SetConfig+0xb2>
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	4a2f      	ldr	r2, [pc, #188]	@ (8006978 <TIM_Base_SetConfig+0x13c>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d017      	beq.n	80068ee <TIM_Base_SetConfig+0xb2>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	4a2e      	ldr	r2, [pc, #184]	@ (800697c <TIM_Base_SetConfig+0x140>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d013      	beq.n	80068ee <TIM_Base_SetConfig+0xb2>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	4a2d      	ldr	r2, [pc, #180]	@ (8006980 <TIM_Base_SetConfig+0x144>)
 80068ca:	4293      	cmp	r3, r2
 80068cc:	d00f      	beq.n	80068ee <TIM_Base_SetConfig+0xb2>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	4a2c      	ldr	r2, [pc, #176]	@ (8006984 <TIM_Base_SetConfig+0x148>)
 80068d2:	4293      	cmp	r3, r2
 80068d4:	d00b      	beq.n	80068ee <TIM_Base_SetConfig+0xb2>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	4a2b      	ldr	r2, [pc, #172]	@ (8006988 <TIM_Base_SetConfig+0x14c>)
 80068da:	4293      	cmp	r3, r2
 80068dc:	d007      	beq.n	80068ee <TIM_Base_SetConfig+0xb2>
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	4a2a      	ldr	r2, [pc, #168]	@ (800698c <TIM_Base_SetConfig+0x150>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d003      	beq.n	80068ee <TIM_Base_SetConfig+0xb2>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	4a29      	ldr	r2, [pc, #164]	@ (8006990 <TIM_Base_SetConfig+0x154>)
 80068ea:	4293      	cmp	r3, r2
 80068ec:	d108      	bne.n	8006900 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80068f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	68fa      	ldr	r2, [r7, #12]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	695b      	ldr	r3, [r3, #20]
 800690a:	4313      	orrs	r3, r2
 800690c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	68fa      	ldr	r2, [r7, #12]
 8006912:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	689a      	ldr	r2, [r3, #8]
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800691c:	683b      	ldr	r3, [r7, #0]
 800691e:	681a      	ldr	r2, [r3, #0]
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a10      	ldr	r2, [pc, #64]	@ (8006968 <TIM_Base_SetConfig+0x12c>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d003      	beq.n	8006934 <TIM_Base_SetConfig+0xf8>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a12      	ldr	r2, [pc, #72]	@ (8006978 <TIM_Base_SetConfig+0x13c>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d103      	bne.n	800693c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	691a      	ldr	r2, [r3, #16]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	691b      	ldr	r3, [r3, #16]
 8006946:	f003 0301 	and.w	r3, r3, #1
 800694a:	2b01      	cmp	r3, #1
 800694c:	d105      	bne.n	800695a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	691b      	ldr	r3, [r3, #16]
 8006952:	f023 0201 	bic.w	r2, r3, #1
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	611a      	str	r2, [r3, #16]
  }
}
 800695a:	bf00      	nop
 800695c:	3714      	adds	r7, #20
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr
 8006966:	bf00      	nop
 8006968:	40010000 	.word	0x40010000
 800696c:	40000400 	.word	0x40000400
 8006970:	40000800 	.word	0x40000800
 8006974:	40000c00 	.word	0x40000c00
 8006978:	40010400 	.word	0x40010400
 800697c:	40014000 	.word	0x40014000
 8006980:	40014400 	.word	0x40014400
 8006984:	40014800 	.word	0x40014800
 8006988:	40001800 	.word	0x40001800
 800698c:	40001c00 	.word	0x40001c00
 8006990:	40002000 	.word	0x40002000

08006994 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006994:	b480      	push	{r7}
 8006996:	b087      	sub	sp, #28
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	6a1b      	ldr	r3, [r3, #32]
 80069a4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	6a1b      	ldr	r3, [r3, #32]
 80069aa:	f023 0201 	bic.w	r2, r3, #1
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	699b      	ldr	r3, [r3, #24]
 80069b6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80069b8:	693b      	ldr	r3, [r7, #16]
 80069ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80069be:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	011b      	lsls	r3, r3, #4
 80069c4:	693a      	ldr	r2, [r7, #16]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	f023 030a 	bic.w	r3, r3, #10
 80069d0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80069d2:	697a      	ldr	r2, [r7, #20]
 80069d4:	68bb      	ldr	r3, [r7, #8]
 80069d6:	4313      	orrs	r3, r2
 80069d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	693a      	ldr	r2, [r7, #16]
 80069de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	697a      	ldr	r2, [r7, #20]
 80069e4:	621a      	str	r2, [r3, #32]
}
 80069e6:	bf00      	nop
 80069e8:	371c      	adds	r7, #28
 80069ea:	46bd      	mov	sp, r7
 80069ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069f0:	4770      	bx	lr

080069f2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069f2:	b480      	push	{r7}
 80069f4:	b087      	sub	sp, #28
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	60f8      	str	r0, [r7, #12]
 80069fa:	60b9      	str	r1, [r7, #8]
 80069fc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	6a1b      	ldr	r3, [r3, #32]
 8006a02:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6a1b      	ldr	r3, [r3, #32]
 8006a08:	f023 0210 	bic.w	r2, r3, #16
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	699b      	ldr	r3, [r3, #24]
 8006a14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006a1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	031b      	lsls	r3, r3, #12
 8006a22:	693a      	ldr	r2, [r7, #16]
 8006a24:	4313      	orrs	r3, r2
 8006a26:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006a2e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006a30:	68bb      	ldr	r3, [r7, #8]
 8006a32:	011b      	lsls	r3, r3, #4
 8006a34:	697a      	ldr	r2, [r7, #20]
 8006a36:	4313      	orrs	r3, r2
 8006a38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	693a      	ldr	r2, [r7, #16]
 8006a3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	621a      	str	r2, [r3, #32]
}
 8006a46:	bf00      	nop
 8006a48:	371c      	adds	r7, #28
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr

08006a52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a52:	b480      	push	{r7}
 8006a54:	b085      	sub	sp, #20
 8006a56:	af00      	add	r7, sp, #0
 8006a58:	6078      	str	r0, [r7, #4]
 8006a5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	689b      	ldr	r3, [r3, #8]
 8006a60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006a68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a6a:	683a      	ldr	r2, [r7, #0]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	4313      	orrs	r3, r2
 8006a70:	f043 0307 	orr.w	r3, r3, #7
 8006a74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	68fa      	ldr	r2, [r7, #12]
 8006a7a:	609a      	str	r2, [r3, #8]
}
 8006a7c:	bf00      	nop
 8006a7e:	3714      	adds	r7, #20
 8006a80:	46bd      	mov	sp, r7
 8006a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a86:	4770      	bx	lr

08006a88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	60f8      	str	r0, [r7, #12]
 8006a90:	60b9      	str	r1, [r7, #8]
 8006a92:	607a      	str	r2, [r7, #4]
 8006a94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	689b      	ldr	r3, [r3, #8]
 8006a9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006aa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	021a      	lsls	r2, r3, #8
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	431a      	orrs	r2, r3
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	4313      	orrs	r3, r2
 8006ab0:	697a      	ldr	r2, [r7, #20]
 8006ab2:	4313      	orrs	r3, r2
 8006ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	697a      	ldr	r2, [r7, #20]
 8006aba:	609a      	str	r2, [r3, #8]
}
 8006abc:	bf00      	nop
 8006abe:	371c      	adds	r7, #28
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac6:	4770      	bx	lr

08006ac8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d101      	bne.n	8006ae0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006adc:	2302      	movs	r3, #2
 8006ade:	e05a      	b.n	8006b96 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2202      	movs	r2, #2
 8006aec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006b06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a21      	ldr	r2, [pc, #132]	@ (8006ba4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d022      	beq.n	8006b6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b2c:	d01d      	beq.n	8006b6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a1d      	ldr	r2, [pc, #116]	@ (8006ba8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d018      	beq.n	8006b6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a1b      	ldr	r2, [pc, #108]	@ (8006bac <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d013      	beq.n	8006b6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a1a      	ldr	r2, [pc, #104]	@ (8006bb0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d00e      	beq.n	8006b6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a18      	ldr	r2, [pc, #96]	@ (8006bb4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d009      	beq.n	8006b6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a17      	ldr	r2, [pc, #92]	@ (8006bb8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006b5c:	4293      	cmp	r3, r2
 8006b5e:	d004      	beq.n	8006b6a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a15      	ldr	r2, [pc, #84]	@ (8006bbc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006b66:	4293      	cmp	r3, r2
 8006b68:	d10c      	bne.n	8006b84 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	685b      	ldr	r3, [r3, #4]
 8006b76:	68ba      	ldr	r2, [r7, #8]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	68ba      	ldr	r2, [r7, #8]
 8006b82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2200      	movs	r2, #0
 8006b90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b94:	2300      	movs	r3, #0
}
 8006b96:	4618      	mov	r0, r3
 8006b98:	3714      	adds	r7, #20
 8006b9a:	46bd      	mov	sp, r7
 8006b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba0:	4770      	bx	lr
 8006ba2:	bf00      	nop
 8006ba4:	40010000 	.word	0x40010000
 8006ba8:	40000400 	.word	0x40000400
 8006bac:	40000800 	.word	0x40000800
 8006bb0:	40000c00 	.word	0x40000c00
 8006bb4:	40010400 	.word	0x40010400
 8006bb8:	40014000 	.word	0x40014000
 8006bbc:	40001800 	.word	0x40001800

08006bc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b083      	sub	sp, #12
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bc8:	bf00      	nop
 8006bca:	370c      	adds	r7, #12
 8006bcc:	46bd      	mov	sp, r7
 8006bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bd2:	4770      	bx	lr

08006bd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b083      	sub	sp, #12
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bdc:	bf00      	nop
 8006bde:	370c      	adds	r7, #12
 8006be0:	46bd      	mov	sp, r7
 8006be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be6:	4770      	bx	lr

08006be8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006be8:	b580      	push	{r7, lr}
 8006bea:	b082      	sub	sp, #8
 8006bec:	af00      	add	r7, sp, #0
 8006bee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	e042      	b.n	8006c80 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d106      	bne.n	8006c14 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7fa fc24 	bl	800145c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2224      	movs	r2, #36	@ 0x24
 8006c18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	68da      	ldr	r2, [r3, #12]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006c2a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 f82b 	bl	8006c88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	691a      	ldr	r2, [r3, #16]
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006c40:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	695a      	ldr	r2, [r3, #20]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006c50:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	68da      	ldr	r2, [r3, #12]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006c60:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2220      	movs	r2, #32
 8006c6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2220      	movs	r2, #32
 8006c74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	3708      	adds	r7, #8
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}

08006c88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006c8c:	b0c0      	sub	sp, #256	@ 0x100
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	691b      	ldr	r3, [r3, #16]
 8006c9c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ca4:	68d9      	ldr	r1, [r3, #12]
 8006ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006caa:	681a      	ldr	r2, [r3, #0]
 8006cac:	ea40 0301 	orr.w	r3, r0, r1
 8006cb0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006cb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cb6:	689a      	ldr	r2, [r3, #8]
 8006cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cbc:	691b      	ldr	r3, [r3, #16]
 8006cbe:	431a      	orrs	r2, r3
 8006cc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cc4:	695b      	ldr	r3, [r3, #20]
 8006cc6:	431a      	orrs	r2, r3
 8006cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ccc:	69db      	ldr	r3, [r3, #28]
 8006cce:	4313      	orrs	r3, r2
 8006cd0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006ce0:	f021 010c 	bic.w	r1, r1, #12
 8006ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006cee:	430b      	orrs	r3, r1
 8006cf0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006cf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d02:	6999      	ldr	r1, [r3, #24]
 8006d04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d08:	681a      	ldr	r2, [r3, #0]
 8006d0a:	ea40 0301 	orr.w	r3, r0, r1
 8006d0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d14:	681a      	ldr	r2, [r3, #0]
 8006d16:	4b8f      	ldr	r3, [pc, #572]	@ (8006f54 <UART_SetConfig+0x2cc>)
 8006d18:	429a      	cmp	r2, r3
 8006d1a:	d005      	beq.n	8006d28 <UART_SetConfig+0xa0>
 8006d1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	4b8d      	ldr	r3, [pc, #564]	@ (8006f58 <UART_SetConfig+0x2d0>)
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d104      	bne.n	8006d32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d28:	f7fe fadc 	bl	80052e4 <HAL_RCC_GetPCLK2Freq>
 8006d2c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006d30:	e003      	b.n	8006d3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d32:	f7fe fac3 	bl	80052bc <HAL_RCC_GetPCLK1Freq>
 8006d36:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d3e:	69db      	ldr	r3, [r3, #28]
 8006d40:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d44:	f040 810c 	bne.w	8006f60 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006d52:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006d56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006d5a:	4622      	mov	r2, r4
 8006d5c:	462b      	mov	r3, r5
 8006d5e:	1891      	adds	r1, r2, r2
 8006d60:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006d62:	415b      	adcs	r3, r3
 8006d64:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006d66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006d6a:	4621      	mov	r1, r4
 8006d6c:	eb12 0801 	adds.w	r8, r2, r1
 8006d70:	4629      	mov	r1, r5
 8006d72:	eb43 0901 	adc.w	r9, r3, r1
 8006d76:	f04f 0200 	mov.w	r2, #0
 8006d7a:	f04f 0300 	mov.w	r3, #0
 8006d7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d8a:	4690      	mov	r8, r2
 8006d8c:	4699      	mov	r9, r3
 8006d8e:	4623      	mov	r3, r4
 8006d90:	eb18 0303 	adds.w	r3, r8, r3
 8006d94:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006d98:	462b      	mov	r3, r5
 8006d9a:	eb49 0303 	adc.w	r3, r9, r3
 8006d9e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006dae:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006db2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006db6:	460b      	mov	r3, r1
 8006db8:	18db      	adds	r3, r3, r3
 8006dba:	653b      	str	r3, [r7, #80]	@ 0x50
 8006dbc:	4613      	mov	r3, r2
 8006dbe:	eb42 0303 	adc.w	r3, r2, r3
 8006dc2:	657b      	str	r3, [r7, #84]	@ 0x54
 8006dc4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006dc8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006dcc:	f7f9 fa0e 	bl	80001ec <__aeabi_uldivmod>
 8006dd0:	4602      	mov	r2, r0
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	4b61      	ldr	r3, [pc, #388]	@ (8006f5c <UART_SetConfig+0x2d4>)
 8006dd6:	fba3 2302 	umull	r2, r3, r3, r2
 8006dda:	095b      	lsrs	r3, r3, #5
 8006ddc:	011c      	lsls	r4, r3, #4
 8006dde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006de2:	2200      	movs	r2, #0
 8006de4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006de8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006dec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006df0:	4642      	mov	r2, r8
 8006df2:	464b      	mov	r3, r9
 8006df4:	1891      	adds	r1, r2, r2
 8006df6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006df8:	415b      	adcs	r3, r3
 8006dfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dfc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006e00:	4641      	mov	r1, r8
 8006e02:	eb12 0a01 	adds.w	sl, r2, r1
 8006e06:	4649      	mov	r1, r9
 8006e08:	eb43 0b01 	adc.w	fp, r3, r1
 8006e0c:	f04f 0200 	mov.w	r2, #0
 8006e10:	f04f 0300 	mov.w	r3, #0
 8006e14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006e18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006e1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e20:	4692      	mov	sl, r2
 8006e22:	469b      	mov	fp, r3
 8006e24:	4643      	mov	r3, r8
 8006e26:	eb1a 0303 	adds.w	r3, sl, r3
 8006e2a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006e2e:	464b      	mov	r3, r9
 8006e30:	eb4b 0303 	adc.w	r3, fp, r3
 8006e34:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006e38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006e44:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006e48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	18db      	adds	r3, r3, r3
 8006e50:	643b      	str	r3, [r7, #64]	@ 0x40
 8006e52:	4613      	mov	r3, r2
 8006e54:	eb42 0303 	adc.w	r3, r2, r3
 8006e58:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006e5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006e62:	f7f9 f9c3 	bl	80001ec <__aeabi_uldivmod>
 8006e66:	4602      	mov	r2, r0
 8006e68:	460b      	mov	r3, r1
 8006e6a:	4611      	mov	r1, r2
 8006e6c:	4b3b      	ldr	r3, [pc, #236]	@ (8006f5c <UART_SetConfig+0x2d4>)
 8006e6e:	fba3 2301 	umull	r2, r3, r3, r1
 8006e72:	095b      	lsrs	r3, r3, #5
 8006e74:	2264      	movs	r2, #100	@ 0x64
 8006e76:	fb02 f303 	mul.w	r3, r2, r3
 8006e7a:	1acb      	subs	r3, r1, r3
 8006e7c:	00db      	lsls	r3, r3, #3
 8006e7e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006e82:	4b36      	ldr	r3, [pc, #216]	@ (8006f5c <UART_SetConfig+0x2d4>)
 8006e84:	fba3 2302 	umull	r2, r3, r3, r2
 8006e88:	095b      	lsrs	r3, r3, #5
 8006e8a:	005b      	lsls	r3, r3, #1
 8006e8c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006e90:	441c      	add	r4, r3
 8006e92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e96:	2200      	movs	r2, #0
 8006e98:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006e9c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006ea0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006ea4:	4642      	mov	r2, r8
 8006ea6:	464b      	mov	r3, r9
 8006ea8:	1891      	adds	r1, r2, r2
 8006eaa:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006eac:	415b      	adcs	r3, r3
 8006eae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006eb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006eb4:	4641      	mov	r1, r8
 8006eb6:	1851      	adds	r1, r2, r1
 8006eb8:	6339      	str	r1, [r7, #48]	@ 0x30
 8006eba:	4649      	mov	r1, r9
 8006ebc:	414b      	adcs	r3, r1
 8006ebe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006ec0:	f04f 0200 	mov.w	r2, #0
 8006ec4:	f04f 0300 	mov.w	r3, #0
 8006ec8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006ecc:	4659      	mov	r1, fp
 8006ece:	00cb      	lsls	r3, r1, #3
 8006ed0:	4651      	mov	r1, sl
 8006ed2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006ed6:	4651      	mov	r1, sl
 8006ed8:	00ca      	lsls	r2, r1, #3
 8006eda:	4610      	mov	r0, r2
 8006edc:	4619      	mov	r1, r3
 8006ede:	4603      	mov	r3, r0
 8006ee0:	4642      	mov	r2, r8
 8006ee2:	189b      	adds	r3, r3, r2
 8006ee4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006ee8:	464b      	mov	r3, r9
 8006eea:	460a      	mov	r2, r1
 8006eec:	eb42 0303 	adc.w	r3, r2, r3
 8006ef0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006ef4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006f00:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006f04:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006f08:	460b      	mov	r3, r1
 8006f0a:	18db      	adds	r3, r3, r3
 8006f0c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f0e:	4613      	mov	r3, r2
 8006f10:	eb42 0303 	adc.w	r3, r2, r3
 8006f14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006f16:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006f1a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006f1e:	f7f9 f965 	bl	80001ec <__aeabi_uldivmod>
 8006f22:	4602      	mov	r2, r0
 8006f24:	460b      	mov	r3, r1
 8006f26:	4b0d      	ldr	r3, [pc, #52]	@ (8006f5c <UART_SetConfig+0x2d4>)
 8006f28:	fba3 1302 	umull	r1, r3, r3, r2
 8006f2c:	095b      	lsrs	r3, r3, #5
 8006f2e:	2164      	movs	r1, #100	@ 0x64
 8006f30:	fb01 f303 	mul.w	r3, r1, r3
 8006f34:	1ad3      	subs	r3, r2, r3
 8006f36:	00db      	lsls	r3, r3, #3
 8006f38:	3332      	adds	r3, #50	@ 0x32
 8006f3a:	4a08      	ldr	r2, [pc, #32]	@ (8006f5c <UART_SetConfig+0x2d4>)
 8006f3c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f40:	095b      	lsrs	r3, r3, #5
 8006f42:	f003 0207 	and.w	r2, r3, #7
 8006f46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	4422      	add	r2, r4
 8006f4e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f50:	e106      	b.n	8007160 <UART_SetConfig+0x4d8>
 8006f52:	bf00      	nop
 8006f54:	40011000 	.word	0x40011000
 8006f58:	40011400 	.word	0x40011400
 8006f5c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f60:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f64:	2200      	movs	r2, #0
 8006f66:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006f6a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006f6e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006f72:	4642      	mov	r2, r8
 8006f74:	464b      	mov	r3, r9
 8006f76:	1891      	adds	r1, r2, r2
 8006f78:	6239      	str	r1, [r7, #32]
 8006f7a:	415b      	adcs	r3, r3
 8006f7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8006f7e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f82:	4641      	mov	r1, r8
 8006f84:	1854      	adds	r4, r2, r1
 8006f86:	4649      	mov	r1, r9
 8006f88:	eb43 0501 	adc.w	r5, r3, r1
 8006f8c:	f04f 0200 	mov.w	r2, #0
 8006f90:	f04f 0300 	mov.w	r3, #0
 8006f94:	00eb      	lsls	r3, r5, #3
 8006f96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006f9a:	00e2      	lsls	r2, r4, #3
 8006f9c:	4614      	mov	r4, r2
 8006f9e:	461d      	mov	r5, r3
 8006fa0:	4643      	mov	r3, r8
 8006fa2:	18e3      	adds	r3, r4, r3
 8006fa4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006fa8:	464b      	mov	r3, r9
 8006faa:	eb45 0303 	adc.w	r3, r5, r3
 8006fae:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006fb6:	685b      	ldr	r3, [r3, #4]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006fbe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006fc2:	f04f 0200 	mov.w	r2, #0
 8006fc6:	f04f 0300 	mov.w	r3, #0
 8006fca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006fce:	4629      	mov	r1, r5
 8006fd0:	008b      	lsls	r3, r1, #2
 8006fd2:	4621      	mov	r1, r4
 8006fd4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fd8:	4621      	mov	r1, r4
 8006fda:	008a      	lsls	r2, r1, #2
 8006fdc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006fe0:	f7f9 f904 	bl	80001ec <__aeabi_uldivmod>
 8006fe4:	4602      	mov	r2, r0
 8006fe6:	460b      	mov	r3, r1
 8006fe8:	4b60      	ldr	r3, [pc, #384]	@ (800716c <UART_SetConfig+0x4e4>)
 8006fea:	fba3 2302 	umull	r2, r3, r3, r2
 8006fee:	095b      	lsrs	r3, r3, #5
 8006ff0:	011c      	lsls	r4, r3, #4
 8006ff2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006ffc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007000:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007004:	4642      	mov	r2, r8
 8007006:	464b      	mov	r3, r9
 8007008:	1891      	adds	r1, r2, r2
 800700a:	61b9      	str	r1, [r7, #24]
 800700c:	415b      	adcs	r3, r3
 800700e:	61fb      	str	r3, [r7, #28]
 8007010:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007014:	4641      	mov	r1, r8
 8007016:	1851      	adds	r1, r2, r1
 8007018:	6139      	str	r1, [r7, #16]
 800701a:	4649      	mov	r1, r9
 800701c:	414b      	adcs	r3, r1
 800701e:	617b      	str	r3, [r7, #20]
 8007020:	f04f 0200 	mov.w	r2, #0
 8007024:	f04f 0300 	mov.w	r3, #0
 8007028:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800702c:	4659      	mov	r1, fp
 800702e:	00cb      	lsls	r3, r1, #3
 8007030:	4651      	mov	r1, sl
 8007032:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007036:	4651      	mov	r1, sl
 8007038:	00ca      	lsls	r2, r1, #3
 800703a:	4610      	mov	r0, r2
 800703c:	4619      	mov	r1, r3
 800703e:	4603      	mov	r3, r0
 8007040:	4642      	mov	r2, r8
 8007042:	189b      	adds	r3, r3, r2
 8007044:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007048:	464b      	mov	r3, r9
 800704a:	460a      	mov	r2, r1
 800704c:	eb42 0303 	adc.w	r3, r2, r3
 8007050:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007054:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800705e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007060:	f04f 0200 	mov.w	r2, #0
 8007064:	f04f 0300 	mov.w	r3, #0
 8007068:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800706c:	4649      	mov	r1, r9
 800706e:	008b      	lsls	r3, r1, #2
 8007070:	4641      	mov	r1, r8
 8007072:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007076:	4641      	mov	r1, r8
 8007078:	008a      	lsls	r2, r1, #2
 800707a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800707e:	f7f9 f8b5 	bl	80001ec <__aeabi_uldivmod>
 8007082:	4602      	mov	r2, r0
 8007084:	460b      	mov	r3, r1
 8007086:	4611      	mov	r1, r2
 8007088:	4b38      	ldr	r3, [pc, #224]	@ (800716c <UART_SetConfig+0x4e4>)
 800708a:	fba3 2301 	umull	r2, r3, r3, r1
 800708e:	095b      	lsrs	r3, r3, #5
 8007090:	2264      	movs	r2, #100	@ 0x64
 8007092:	fb02 f303 	mul.w	r3, r2, r3
 8007096:	1acb      	subs	r3, r1, r3
 8007098:	011b      	lsls	r3, r3, #4
 800709a:	3332      	adds	r3, #50	@ 0x32
 800709c:	4a33      	ldr	r2, [pc, #204]	@ (800716c <UART_SetConfig+0x4e4>)
 800709e:	fba2 2303 	umull	r2, r3, r2, r3
 80070a2:	095b      	lsrs	r3, r3, #5
 80070a4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80070a8:	441c      	add	r4, r3
 80070aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80070ae:	2200      	movs	r2, #0
 80070b0:	673b      	str	r3, [r7, #112]	@ 0x70
 80070b2:	677a      	str	r2, [r7, #116]	@ 0x74
 80070b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80070b8:	4642      	mov	r2, r8
 80070ba:	464b      	mov	r3, r9
 80070bc:	1891      	adds	r1, r2, r2
 80070be:	60b9      	str	r1, [r7, #8]
 80070c0:	415b      	adcs	r3, r3
 80070c2:	60fb      	str	r3, [r7, #12]
 80070c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80070c8:	4641      	mov	r1, r8
 80070ca:	1851      	adds	r1, r2, r1
 80070cc:	6039      	str	r1, [r7, #0]
 80070ce:	4649      	mov	r1, r9
 80070d0:	414b      	adcs	r3, r1
 80070d2:	607b      	str	r3, [r7, #4]
 80070d4:	f04f 0200 	mov.w	r2, #0
 80070d8:	f04f 0300 	mov.w	r3, #0
 80070dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80070e0:	4659      	mov	r1, fp
 80070e2:	00cb      	lsls	r3, r1, #3
 80070e4:	4651      	mov	r1, sl
 80070e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80070ea:	4651      	mov	r1, sl
 80070ec:	00ca      	lsls	r2, r1, #3
 80070ee:	4610      	mov	r0, r2
 80070f0:	4619      	mov	r1, r3
 80070f2:	4603      	mov	r3, r0
 80070f4:	4642      	mov	r2, r8
 80070f6:	189b      	adds	r3, r3, r2
 80070f8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80070fa:	464b      	mov	r3, r9
 80070fc:	460a      	mov	r2, r1
 80070fe:	eb42 0303 	adc.w	r3, r2, r3
 8007102:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007104:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	2200      	movs	r2, #0
 800710c:	663b      	str	r3, [r7, #96]	@ 0x60
 800710e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007110:	f04f 0200 	mov.w	r2, #0
 8007114:	f04f 0300 	mov.w	r3, #0
 8007118:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800711c:	4649      	mov	r1, r9
 800711e:	008b      	lsls	r3, r1, #2
 8007120:	4641      	mov	r1, r8
 8007122:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007126:	4641      	mov	r1, r8
 8007128:	008a      	lsls	r2, r1, #2
 800712a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800712e:	f7f9 f85d 	bl	80001ec <__aeabi_uldivmod>
 8007132:	4602      	mov	r2, r0
 8007134:	460b      	mov	r3, r1
 8007136:	4b0d      	ldr	r3, [pc, #52]	@ (800716c <UART_SetConfig+0x4e4>)
 8007138:	fba3 1302 	umull	r1, r3, r3, r2
 800713c:	095b      	lsrs	r3, r3, #5
 800713e:	2164      	movs	r1, #100	@ 0x64
 8007140:	fb01 f303 	mul.w	r3, r1, r3
 8007144:	1ad3      	subs	r3, r2, r3
 8007146:	011b      	lsls	r3, r3, #4
 8007148:	3332      	adds	r3, #50	@ 0x32
 800714a:	4a08      	ldr	r2, [pc, #32]	@ (800716c <UART_SetConfig+0x4e4>)
 800714c:	fba2 2303 	umull	r2, r3, r2, r3
 8007150:	095b      	lsrs	r3, r3, #5
 8007152:	f003 020f 	and.w	r2, r3, #15
 8007156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	4422      	add	r2, r4
 800715e:	609a      	str	r2, [r3, #8]
}
 8007160:	bf00      	nop
 8007162:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007166:	46bd      	mov	sp, r7
 8007168:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800716c:	51eb851f 	.word	0x51eb851f

08007170 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8007170:	b480      	push	{r7}
 8007172:	b083      	sub	sp, #12
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800717a:	683b      	ldr	r3, [r7, #0]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d123      	bne.n	80071ca <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800718a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800718e:	683a      	ldr	r2, [r7, #0]
 8007190:	6851      	ldr	r1, [r2, #4]
 8007192:	683a      	ldr	r2, [r7, #0]
 8007194:	6892      	ldr	r2, [r2, #8]
 8007196:	4311      	orrs	r1, r2
 8007198:	683a      	ldr	r2, [r7, #0]
 800719a:	68d2      	ldr	r2, [r2, #12]
 800719c:	4311      	orrs	r1, r2
 800719e:	683a      	ldr	r2, [r7, #0]
 80071a0:	6912      	ldr	r2, [r2, #16]
 80071a2:	4311      	orrs	r1, r2
 80071a4:	683a      	ldr	r2, [r7, #0]
 80071a6:	6952      	ldr	r2, [r2, #20]
 80071a8:	4311      	orrs	r1, r2
 80071aa:	683a      	ldr	r2, [r7, #0]
 80071ac:	6992      	ldr	r2, [r2, #24]
 80071ae:	4311      	orrs	r1, r2
 80071b0:	683a      	ldr	r2, [r7, #0]
 80071b2:	69d2      	ldr	r2, [r2, #28]
 80071b4:	4311      	orrs	r1, r2
 80071b6:	683a      	ldr	r2, [r7, #0]
 80071b8:	6a12      	ldr	r2, [r2, #32]
 80071ba:	4311      	orrs	r1, r2
 80071bc:	683a      	ldr	r2, [r7, #0]
 80071be:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80071c0:	430a      	orrs	r2, r1
 80071c2:	431a      	orrs	r2, r3
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	601a      	str	r2, [r3, #0]
 80071c8:	e028      	b.n	800721c <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80071d2:	683b      	ldr	r3, [r7, #0]
 80071d4:	69d9      	ldr	r1, [r3, #28]
 80071d6:	683b      	ldr	r3, [r7, #0]
 80071d8:	6a1b      	ldr	r3, [r3, #32]
 80071da:	4319      	orrs	r1, r3
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071e0:	430b      	orrs	r3, r1
 80071e2:	431a      	orrs	r2, r3
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80071f0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80071f4:	683a      	ldr	r2, [r7, #0]
 80071f6:	6851      	ldr	r1, [r2, #4]
 80071f8:	683a      	ldr	r2, [r7, #0]
 80071fa:	6892      	ldr	r2, [r2, #8]
 80071fc:	4311      	orrs	r1, r2
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	68d2      	ldr	r2, [r2, #12]
 8007202:	4311      	orrs	r1, r2
 8007204:	683a      	ldr	r2, [r7, #0]
 8007206:	6912      	ldr	r2, [r2, #16]
 8007208:	4311      	orrs	r1, r2
 800720a:	683a      	ldr	r2, [r7, #0]
 800720c:	6952      	ldr	r2, [r2, #20]
 800720e:	4311      	orrs	r1, r2
 8007210:	683a      	ldr	r2, [r7, #0]
 8007212:	6992      	ldr	r2, [r2, #24]
 8007214:	430a      	orrs	r2, r1
 8007216:	431a      	orrs	r2, r3
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 800721c:	2300      	movs	r3, #0
}
 800721e:	4618      	mov	r0, r3
 8007220:	370c      	adds	r7, #12
 8007222:	46bd      	mov	sp, r7
 8007224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007228:	4770      	bx	lr

0800722a <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800722a:	b480      	push	{r7}
 800722c:	b085      	sub	sp, #20
 800722e:	af00      	add	r7, sp, #0
 8007230:	60f8      	str	r0, [r7, #12]
 8007232:	60b9      	str	r1, [r7, #8]
 8007234:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	2b00      	cmp	r3, #0
 800723a:	d128      	bne.n	800728e <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8007244:	68bb      	ldr	r3, [r7, #8]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	1e59      	subs	r1, r3, #1
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	685b      	ldr	r3, [r3, #4]
 800724e:	3b01      	subs	r3, #1
 8007250:	011b      	lsls	r3, r3, #4
 8007252:	4319      	orrs	r1, r3
 8007254:	68bb      	ldr	r3, [r7, #8]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	3b01      	subs	r3, #1
 800725a:	021b      	lsls	r3, r3, #8
 800725c:	4319      	orrs	r1, r3
 800725e:	68bb      	ldr	r3, [r7, #8]
 8007260:	68db      	ldr	r3, [r3, #12]
 8007262:	3b01      	subs	r3, #1
 8007264:	031b      	lsls	r3, r3, #12
 8007266:	4319      	orrs	r1, r3
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	691b      	ldr	r3, [r3, #16]
 800726c:	3b01      	subs	r3, #1
 800726e:	041b      	lsls	r3, r3, #16
 8007270:	4319      	orrs	r1, r3
 8007272:	68bb      	ldr	r3, [r7, #8]
 8007274:	695b      	ldr	r3, [r3, #20]
 8007276:	3b01      	subs	r3, #1
 8007278:	051b      	lsls	r3, r3, #20
 800727a:	4319      	orrs	r1, r3
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	699b      	ldr	r3, [r3, #24]
 8007280:	3b01      	subs	r3, #1
 8007282:	061b      	lsls	r3, r3, #24
 8007284:	430b      	orrs	r3, r1
 8007286:	431a      	orrs	r2, r3
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	609a      	str	r2, [r3, #8]
 800728c:	e02f      	b.n	80072ee <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007296:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800729a:	68ba      	ldr	r2, [r7, #8]
 800729c:	68d2      	ldr	r2, [r2, #12]
 800729e:	3a01      	subs	r2, #1
 80072a0:	0311      	lsls	r1, r2, #12
 80072a2:	68ba      	ldr	r2, [r7, #8]
 80072a4:	6952      	ldr	r2, [r2, #20]
 80072a6:	3a01      	subs	r2, #1
 80072a8:	0512      	lsls	r2, r2, #20
 80072aa:	430a      	orrs	r2, r1
 80072ac:	431a      	orrs	r2, r3
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	68db      	ldr	r3, [r3, #12]
 80072b6:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	1e59      	subs	r1, r3, #1
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	3b01      	subs	r3, #1
 80072c6:	011b      	lsls	r3, r3, #4
 80072c8:	4319      	orrs	r1, r3
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	3b01      	subs	r3, #1
 80072d0:	021b      	lsls	r3, r3, #8
 80072d2:	4319      	orrs	r1, r3
 80072d4:	68bb      	ldr	r3, [r7, #8]
 80072d6:	691b      	ldr	r3, [r3, #16]
 80072d8:	3b01      	subs	r3, #1
 80072da:	041b      	lsls	r3, r3, #16
 80072dc:	4319      	orrs	r1, r3
 80072de:	68bb      	ldr	r3, [r7, #8]
 80072e0:	699b      	ldr	r3, [r3, #24]
 80072e2:	3b01      	subs	r3, #1
 80072e4:	061b      	lsls	r3, r3, #24
 80072e6:	430b      	orrs	r3, r1
 80072e8:	431a      	orrs	r2, r3
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 80072ee:	2300      	movs	r3, #0
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	3714      	adds	r7, #20
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80072fc:	b084      	sub	sp, #16
 80072fe:	b580      	push	{r7, lr}
 8007300:	b084      	sub	sp, #16
 8007302:	af00      	add	r7, sp, #0
 8007304:	6078      	str	r0, [r7, #4]
 8007306:	f107 001c 	add.w	r0, r7, #28
 800730a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800730e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007312:	2b01      	cmp	r3, #1
 8007314:	d123      	bne.n	800735e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800731a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	68db      	ldr	r3, [r3, #12]
 8007326:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800732a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800732e:	687a      	ldr	r2, [r7, #4]
 8007330:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800733e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007342:	2b01      	cmp	r3, #1
 8007344:	d105      	bne.n	8007352 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	68db      	ldr	r3, [r3, #12]
 800734a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f000 f98d 	bl	8007672 <USB_CoreReset>
 8007358:	4603      	mov	r3, r0
 800735a:	73fb      	strb	r3, [r7, #15]
 800735c:	e01b      	b.n	8007396 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	68db      	ldr	r3, [r3, #12]
 8007362:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 f981 	bl	8007672 <USB_CoreReset>
 8007370:	4603      	mov	r3, r0
 8007372:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8007374:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007378:	2b00      	cmp	r3, #0
 800737a:	d106      	bne.n	800738a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007380:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	639a      	str	r2, [r3, #56]	@ 0x38
 8007388:	e005      	b.n	8007396 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800738e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007396:	7fbb      	ldrb	r3, [r7, #30]
 8007398:	2b01      	cmp	r3, #1
 800739a:	d10b      	bne.n	80073b4 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	689b      	ldr	r3, [r3, #8]
 80073a0:	f043 0206 	orr.w	r2, r3, #6
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	f043 0220 	orr.w	r2, r3, #32
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80073b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3710      	adds	r7, #16
 80073ba:	46bd      	mov	sp, r7
 80073bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073c0:	b004      	add	sp, #16
 80073c2:	4770      	bx	lr

080073c4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b083      	sub	sp, #12
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	f023 0201 	bic.w	r2, r3, #1
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	370c      	adds	r7, #12
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr

080073e6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80073e6:	b580      	push	{r7, lr}
 80073e8:	b084      	sub	sp, #16
 80073ea:	af00      	add	r7, sp, #0
 80073ec:	6078      	str	r0, [r7, #4]
 80073ee:	460b      	mov	r3, r1
 80073f0:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80073f2:	2300      	movs	r3, #0
 80073f4:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007402:	78fb      	ldrb	r3, [r7, #3]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d115      	bne.n	8007434 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	68db      	ldr	r3, [r3, #12]
 800740c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007414:	200a      	movs	r0, #10
 8007416:	f7fa fab5 	bl	8001984 <HAL_Delay>
      ms += 10U;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	330a      	adds	r3, #10
 800741e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007420:	6878      	ldr	r0, [r7, #4]
 8007422:	f000 f918 	bl	8007656 <USB_GetMode>
 8007426:	4603      	mov	r3, r0
 8007428:	2b01      	cmp	r3, #1
 800742a:	d01e      	beq.n	800746a <USB_SetCurrentMode+0x84>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007430:	d9f0      	bls.n	8007414 <USB_SetCurrentMode+0x2e>
 8007432:	e01a      	b.n	800746a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007434:	78fb      	ldrb	r3, [r7, #3]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d115      	bne.n	8007466 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	68db      	ldr	r3, [r3, #12]
 800743e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007446:	200a      	movs	r0, #10
 8007448:	f7fa fa9c 	bl	8001984 <HAL_Delay>
      ms += 10U;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	330a      	adds	r3, #10
 8007450:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f8ff 	bl	8007656 <USB_GetMode>
 8007458:	4603      	mov	r3, r0
 800745a:	2b00      	cmp	r3, #0
 800745c:	d005      	beq.n	800746a <USB_SetCurrentMode+0x84>
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2bc7      	cmp	r3, #199	@ 0xc7
 8007462:	d9f0      	bls.n	8007446 <USB_SetCurrentMode+0x60>
 8007464:	e001      	b.n	800746a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007466:	2301      	movs	r3, #1
 8007468:	e005      	b.n	8007476 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	2bc8      	cmp	r3, #200	@ 0xc8
 800746e:	d101      	bne.n	8007474 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007470:	2301      	movs	r3, #1
 8007472:	e000      	b.n	8007476 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007474:	2300      	movs	r3, #0
}
 8007476:	4618      	mov	r0, r3
 8007478:	3710      	adds	r7, #16
 800747a:	46bd      	mov	sp, r7
 800747c:	bd80      	pop	{r7, pc}

0800747e <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800747e:	b480      	push	{r7}
 8007480:	b085      	sub	sp, #20
 8007482:	af00      	add	r7, sp, #0
 8007484:	6078      	str	r0, [r7, #4]
 8007486:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007488:	2300      	movs	r3, #0
 800748a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	3301      	adds	r3, #1
 8007490:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007498:	d901      	bls.n	800749e <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800749a:	2303      	movs	r3, #3
 800749c:	e01b      	b.n	80074d6 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	691b      	ldr	r3, [r3, #16]
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	daf2      	bge.n	800748c <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80074a6:	2300      	movs	r3, #0
 80074a8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80074aa:	683b      	ldr	r3, [r7, #0]
 80074ac:	019b      	lsls	r3, r3, #6
 80074ae:	f043 0220 	orr.w	r2, r3, #32
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	3301      	adds	r3, #1
 80074ba:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074c2:	d901      	bls.n	80074c8 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80074c4:	2303      	movs	r3, #3
 80074c6:	e006      	b.n	80074d6 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	691b      	ldr	r3, [r3, #16]
 80074cc:	f003 0320 	and.w	r3, r3, #32
 80074d0:	2b20      	cmp	r3, #32
 80074d2:	d0f0      	beq.n	80074b6 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	3714      	adds	r7, #20
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr

080074e2 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80074e2:	b480      	push	{r7}
 80074e4:	b085      	sub	sp, #20
 80074e6:	af00      	add	r7, sp, #0
 80074e8:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074ea:	2300      	movs	r3, #0
 80074ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	3301      	adds	r3, #1
 80074f2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80074fa:	d901      	bls.n	8007500 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	e018      	b.n	8007532 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	691b      	ldr	r3, [r3, #16]
 8007504:	2b00      	cmp	r3, #0
 8007506:	daf2      	bge.n	80074ee <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007508:	2300      	movs	r3, #0
 800750a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2210      	movs	r2, #16
 8007510:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	3301      	adds	r3, #1
 8007516:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007518:	68fb      	ldr	r3, [r7, #12]
 800751a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800751e:	d901      	bls.n	8007524 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8007520:	2303      	movs	r3, #3
 8007522:	e006      	b.n	8007532 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	691b      	ldr	r3, [r3, #16]
 8007528:	f003 0310 	and.w	r3, r3, #16
 800752c:	2b10      	cmp	r3, #16
 800752e:	d0f0      	beq.n	8007512 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8007530:	2300      	movs	r3, #0
}
 8007532:	4618      	mov	r0, r3
 8007534:	3714      	adds	r7, #20
 8007536:	46bd      	mov	sp, r7
 8007538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753c:	4770      	bx	lr

0800753e <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800753e:	b480      	push	{r7}
 8007540:	b08b      	sub	sp, #44	@ 0x2c
 8007542:	af00      	add	r7, sp, #0
 8007544:	60f8      	str	r0, [r7, #12]
 8007546:	60b9      	str	r1, [r7, #8]
 8007548:	4613      	mov	r3, r2
 800754a:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8007550:	68bb      	ldr	r3, [r7, #8]
 8007552:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8007554:	88fb      	ldrh	r3, [r7, #6]
 8007556:	089b      	lsrs	r3, r3, #2
 8007558:	b29b      	uxth	r3, r3
 800755a:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800755c:	88fb      	ldrh	r3, [r7, #6]
 800755e:	f003 0303 	and.w	r3, r3, #3
 8007562:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8007564:	2300      	movs	r3, #0
 8007566:	623b      	str	r3, [r7, #32]
 8007568:	e014      	b.n	8007594 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007570:	681a      	ldr	r2, [r3, #0]
 8007572:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007574:	601a      	str	r2, [r3, #0]
    pDest++;
 8007576:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007578:	3301      	adds	r3, #1
 800757a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800757c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800757e:	3301      	adds	r3, #1
 8007580:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007584:	3301      	adds	r3, #1
 8007586:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8007588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758a:	3301      	adds	r3, #1
 800758c:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800758e:	6a3b      	ldr	r3, [r7, #32]
 8007590:	3301      	adds	r3, #1
 8007592:	623b      	str	r3, [r7, #32]
 8007594:	6a3a      	ldr	r2, [r7, #32]
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	429a      	cmp	r2, r3
 800759a:	d3e6      	bcc.n	800756a <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800759c:	8bfb      	ldrh	r3, [r7, #30]
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d01e      	beq.n	80075e0 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80075a2:	2300      	movs	r3, #0
 80075a4:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80075ac:	461a      	mov	r2, r3
 80075ae:	f107 0310 	add.w	r3, r7, #16
 80075b2:	6812      	ldr	r2, [r2, #0]
 80075b4:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80075b6:	693a      	ldr	r2, [r7, #16]
 80075b8:	6a3b      	ldr	r3, [r7, #32]
 80075ba:	b2db      	uxtb	r3, r3
 80075bc:	00db      	lsls	r3, r3, #3
 80075be:	fa22 f303 	lsr.w	r3, r2, r3
 80075c2:	b2da      	uxtb	r2, r3
 80075c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c6:	701a      	strb	r2, [r3, #0]
      i++;
 80075c8:	6a3b      	ldr	r3, [r7, #32]
 80075ca:	3301      	adds	r3, #1
 80075cc:	623b      	str	r3, [r7, #32]
      pDest++;
 80075ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075d0:	3301      	adds	r3, #1
 80075d2:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80075d4:	8bfb      	ldrh	r3, [r7, #30]
 80075d6:	3b01      	subs	r3, #1
 80075d8:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80075da:	8bfb      	ldrh	r3, [r7, #30]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d1ea      	bne.n	80075b6 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80075e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	372c      	adds	r7, #44	@ 0x2c
 80075e6:	46bd      	mov	sp, r7
 80075e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ec:	4770      	bx	lr

080075ee <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80075ee:	b480      	push	{r7}
 80075f0:	b085      	sub	sp, #20
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	695b      	ldr	r3, [r3, #20]
 80075fa:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	699b      	ldr	r3, [r3, #24]
 8007600:	68fa      	ldr	r2, [r7, #12]
 8007602:	4013      	ands	r3, r2
 8007604:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8007606:	68fb      	ldr	r3, [r7, #12]
}
 8007608:	4618      	mov	r0, r3
 800760a:	3714      	adds	r7, #20
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8007614:	b480      	push	{r7}
 8007616:	b085      	sub	sp, #20
 8007618:	af00      	add	r7, sp, #0
 800761a:	6078      	str	r0, [r7, #4]
 800761c:	460b      	mov	r3, r1
 800761e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8007624:	78fb      	ldrb	r3, [r7, #3]
 8007626:	015a      	lsls	r2, r3, #5
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	4413      	add	r3, r2
 800762c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007630:	689b      	ldr	r3, [r3, #8]
 8007632:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8007634:	78fb      	ldrb	r3, [r7, #3]
 8007636:	015a      	lsls	r2, r3, #5
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	4413      	add	r3, r2
 800763c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007640:	68db      	ldr	r3, [r3, #12]
 8007642:	68ba      	ldr	r2, [r7, #8]
 8007644:	4013      	ands	r3, r2
 8007646:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8007648:	68bb      	ldr	r3, [r7, #8]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3714      	adds	r7, #20
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr

08007656 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8007656:	b480      	push	{r7}
 8007658:	b083      	sub	sp, #12
 800765a:	af00      	add	r7, sp, #0
 800765c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	695b      	ldr	r3, [r3, #20]
 8007662:	f003 0301 	and.w	r3, r3, #1
}
 8007666:	4618      	mov	r0, r3
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007672:	b480      	push	{r7}
 8007674:	b085      	sub	sp, #20
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800767a:	2300      	movs	r3, #0
 800767c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	3301      	adds	r3, #1
 8007682:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800768a:	d901      	bls.n	8007690 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800768c:	2303      	movs	r3, #3
 800768e:	e01b      	b.n	80076c8 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	691b      	ldr	r3, [r3, #16]
 8007694:	2b00      	cmp	r3, #0
 8007696:	daf2      	bge.n	800767e <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007698:	2300      	movs	r3, #0
 800769a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	691b      	ldr	r3, [r3, #16]
 80076a0:	f043 0201 	orr.w	r2, r3, #1
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	3301      	adds	r3, #1
 80076ac:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80076b4:	d901      	bls.n	80076ba <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80076b6:	2303      	movs	r3, #3
 80076b8:	e006      	b.n	80076c8 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	691b      	ldr	r3, [r3, #16]
 80076be:	f003 0301 	and.w	r3, r3, #1
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d0f0      	beq.n	80076a8 <USB_CoreReset+0x36>

  return HAL_OK;
 80076c6:	2300      	movs	r3, #0
}
 80076c8:	4618      	mov	r0, r3
 80076ca:	3714      	adds	r7, #20
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076d4:	b084      	sub	sp, #16
 80076d6:	b580      	push	{r7, lr}
 80076d8:	b086      	sub	sp, #24
 80076da:	af00      	add	r7, sp, #0
 80076dc:	6078      	str	r0, [r7, #4]
 80076de:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80076e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80076e6:	2300      	movs	r3, #0
 80076e8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80076f4:	461a      	mov	r2, r3
 80076f6:	2300      	movs	r3, #0
 80076f8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076fe:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800770a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007716:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	68db      	ldr	r3, [r3, #12]
 8007722:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007726:	2b00      	cmp	r3, #0
 8007728:	d119      	bne.n	800775e <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800772a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800772e:	2b01      	cmp	r3, #1
 8007730:	d10a      	bne.n	8007748 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68fa      	ldr	r2, [r7, #12]
 800773c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007740:	f043 0304 	orr.w	r3, r3, #4
 8007744:	6013      	str	r3, [r2, #0]
 8007746:	e014      	b.n	8007772 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68fa      	ldr	r2, [r7, #12]
 8007752:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007756:	f023 0304 	bic.w	r3, r3, #4
 800775a:	6013      	str	r3, [r2, #0]
 800775c:	e009      	b.n	8007772 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68fa      	ldr	r2, [r7, #12]
 8007768:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800776c:	f023 0304 	bic.w	r3, r3, #4
 8007770:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007772:	2110      	movs	r1, #16
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f7ff fe82 	bl	800747e <USB_FlushTxFifo>
 800777a:	4603      	mov	r3, r0
 800777c:	2b00      	cmp	r3, #0
 800777e:	d001      	beq.n	8007784 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007780:	2301      	movs	r3, #1
 8007782:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f7ff feac 	bl	80074e2 <USB_FlushRxFifo>
 800778a:	4603      	mov	r3, r0
 800778c:	2b00      	cmp	r3, #0
 800778e:	d001      	beq.n	8007794 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8007794:	2300      	movs	r3, #0
 8007796:	613b      	str	r3, [r7, #16]
 8007798:	e015      	b.n	80077c6 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800779a:	693b      	ldr	r3, [r7, #16]
 800779c:	015a      	lsls	r2, r3, #5
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	4413      	add	r3, r2
 80077a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077a6:	461a      	mov	r2, r3
 80077a8:	f04f 33ff 	mov.w	r3, #4294967295
 80077ac:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	015a      	lsls	r2, r3, #5
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	4413      	add	r3, r2
 80077b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077ba:	461a      	mov	r2, r3
 80077bc:	2300      	movs	r3, #0
 80077be:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	3301      	adds	r3, #1
 80077c4:	613b      	str	r3, [r7, #16]
 80077c6:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80077ca:	461a      	mov	r2, r3
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d3e3      	bcc.n	800779a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	f04f 32ff 	mov.w	r2, #4294967295
 80077de:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	4a18      	ldr	r2, [pc, #96]	@ (8007844 <USB_HostInit+0x170>)
 80077e4:	4293      	cmp	r3, r2
 80077e6:	d10b      	bne.n	8007800 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80077ee:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	4a15      	ldr	r2, [pc, #84]	@ (8007848 <USB_HostInit+0x174>)
 80077f4:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a14      	ldr	r2, [pc, #80]	@ (800784c <USB_HostInit+0x178>)
 80077fa:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80077fe:	e009      	b.n	8007814 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2280      	movs	r2, #128	@ 0x80
 8007804:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	4a11      	ldr	r2, [pc, #68]	@ (8007850 <USB_HostInit+0x17c>)
 800780a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	4a11      	ldr	r2, [pc, #68]	@ (8007854 <USB_HostInit+0x180>)
 8007810:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007814:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007818:	2b00      	cmp	r3, #0
 800781a:	d105      	bne.n	8007828 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	699b      	ldr	r3, [r3, #24]
 8007820:	f043 0210 	orr.w	r2, r3, #16
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	699a      	ldr	r2, [r3, #24]
 800782c:	4b0a      	ldr	r3, [pc, #40]	@ (8007858 <USB_HostInit+0x184>)
 800782e:	4313      	orrs	r3, r2
 8007830:	687a      	ldr	r2, [r7, #4]
 8007832:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007834:	7dfb      	ldrb	r3, [r7, #23]
}
 8007836:	4618      	mov	r0, r3
 8007838:	3718      	adds	r7, #24
 800783a:	46bd      	mov	sp, r7
 800783c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007840:	b004      	add	sp, #16
 8007842:	4770      	bx	lr
 8007844:	40040000 	.word	0x40040000
 8007848:	01000200 	.word	0x01000200
 800784c:	00e00300 	.word	0x00e00300
 8007850:	00600080 	.word	0x00600080
 8007854:	004000e0 	.word	0x004000e0
 8007858:	a3200008 	.word	0xa3200008

0800785c <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800785c:	b480      	push	{r7}
 800785e:	b085      	sub	sp, #20
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	460b      	mov	r3, r1
 8007866:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	68fa      	ldr	r2, [r7, #12]
 8007876:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800787a:	f023 0303 	bic.w	r3, r3, #3
 800787e:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	78fb      	ldrb	r3, [r7, #3]
 800788a:	f003 0303 	and.w	r3, r3, #3
 800788e:	68f9      	ldr	r1, [r7, #12]
 8007890:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007894:	4313      	orrs	r3, r2
 8007896:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007898:	78fb      	ldrb	r3, [r7, #3]
 800789a:	2b01      	cmp	r3, #1
 800789c:	d107      	bne.n	80078ae <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078a4:	461a      	mov	r2, r3
 80078a6:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80078aa:	6053      	str	r3, [r2, #4]
 80078ac:	e00c      	b.n	80078c8 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80078ae:	78fb      	ldrb	r3, [r7, #3]
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	d107      	bne.n	80078c4 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078ba:	461a      	mov	r2, r3
 80078bc:	f241 7370 	movw	r3, #6000	@ 0x1770
 80078c0:	6053      	str	r3, [r2, #4]
 80078c2:	e001      	b.n	80078c8 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80078c4:	2301      	movs	r3, #1
 80078c6:	e000      	b.n	80078ca <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80078c8:	2300      	movs	r3, #0
}
 80078ca:	4618      	mov	r0, r3
 80078cc:	3714      	adds	r7, #20
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b085      	sub	sp, #20
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078e8:	695b      	ldr	r3, [r3, #20]
 80078ea:	b29b      	uxth	r3, r3
}
 80078ec:	4618      	mov	r0, r3
 80078ee:	3714      	adds	r7, #20
 80078f0:	46bd      	mov	sp, r7
 80078f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f6:	4770      	bx	lr

080078f8 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b089      	sub	sp, #36	@ 0x24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	6078      	str	r0, [r7, #4]
 8007900:	460b      	mov	r3, r1
 8007902:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007908:	78fb      	ldrb	r3, [r7, #3]
 800790a:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800790c:	2300      	movs	r3, #0
 800790e:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007910:	69bb      	ldr	r3, [r7, #24]
 8007912:	015a      	lsls	r2, r3, #5
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	4413      	add	r3, r2
 8007918:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	0c9b      	lsrs	r3, r3, #18
 8007920:	f003 0303 	and.w	r3, r3, #3
 8007924:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	015a      	lsls	r2, r3, #5
 800792a:	69fb      	ldr	r3, [r7, #28]
 800792c:	4413      	add	r3, r2
 800792e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	0fdb      	lsrs	r3, r3, #31
 8007936:	f003 0301 	and.w	r3, r3, #1
 800793a:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800793c:	69bb      	ldr	r3, [r7, #24]
 800793e:	015a      	lsls	r2, r3, #5
 8007940:	69fb      	ldr	r3, [r7, #28]
 8007942:	4413      	add	r3, r2
 8007944:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007948:	685b      	ldr	r3, [r3, #4]
 800794a:	0fdb      	lsrs	r3, r3, #31
 800794c:	f003 0301 	and.w	r3, r3, #1
 8007950:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	f003 0320 	and.w	r3, r3, #32
 800795a:	2b20      	cmp	r3, #32
 800795c:	d10d      	bne.n	800797a <USB_HC_Halt+0x82>
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d10a      	bne.n	800797a <USB_HC_Halt+0x82>
 8007964:	693b      	ldr	r3, [r7, #16]
 8007966:	2b00      	cmp	r3, #0
 8007968:	d005      	beq.n	8007976 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d002      	beq.n	8007976 <USB_HC_Halt+0x7e>
 8007970:	697b      	ldr	r3, [r7, #20]
 8007972:	2b03      	cmp	r3, #3
 8007974:	d101      	bne.n	800797a <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007976:	2300      	movs	r3, #0
 8007978:	e0d8      	b.n	8007b2c <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d002      	beq.n	8007986 <USB_HC_Halt+0x8e>
 8007980:	697b      	ldr	r3, [r7, #20]
 8007982:	2b02      	cmp	r3, #2
 8007984:	d173      	bne.n	8007a6e <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	015a      	lsls	r2, r3, #5
 800798a:	69fb      	ldr	r3, [r7, #28]
 800798c:	4413      	add	r3, r2
 800798e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	69ba      	ldr	r2, [r7, #24]
 8007996:	0151      	lsls	r1, r2, #5
 8007998:	69fa      	ldr	r2, [r7, #28]
 800799a:	440a      	add	r2, r1
 800799c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079a0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80079a4:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	689b      	ldr	r3, [r3, #8]
 80079aa:	f003 0320 	and.w	r3, r3, #32
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d14a      	bne.n	8007a48 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d133      	bne.n	8007a26 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80079be:	69bb      	ldr	r3, [r7, #24]
 80079c0:	015a      	lsls	r2, r3, #5
 80079c2:	69fb      	ldr	r3, [r7, #28]
 80079c4:	4413      	add	r3, r2
 80079c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	69ba      	ldr	r2, [r7, #24]
 80079ce:	0151      	lsls	r1, r2, #5
 80079d0:	69fa      	ldr	r2, [r7, #28]
 80079d2:	440a      	add	r2, r1
 80079d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80079dc:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80079de:	69bb      	ldr	r3, [r7, #24]
 80079e0:	015a      	lsls	r2, r3, #5
 80079e2:	69fb      	ldr	r3, [r7, #28]
 80079e4:	4413      	add	r3, r2
 80079e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	69ba      	ldr	r2, [r7, #24]
 80079ee:	0151      	lsls	r1, r2, #5
 80079f0:	69fa      	ldr	r2, [r7, #28]
 80079f2:	440a      	add	r2, r1
 80079f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80079fc:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	3301      	adds	r3, #1
 8007a02:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007a04:	68bb      	ldr	r3, [r7, #8]
 8007a06:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007a0a:	d82e      	bhi.n	8007a6a <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007a0c:	69bb      	ldr	r3, [r7, #24]
 8007a0e:	015a      	lsls	r2, r3, #5
 8007a10:	69fb      	ldr	r3, [r7, #28]
 8007a12:	4413      	add	r3, r2
 8007a14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007a1e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007a22:	d0ec      	beq.n	80079fe <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a24:	e081      	b.n	8007b2a <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a26:	69bb      	ldr	r3, [r7, #24]
 8007a28:	015a      	lsls	r2, r3, #5
 8007a2a:	69fb      	ldr	r3, [r7, #28]
 8007a2c:	4413      	add	r3, r2
 8007a2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	69ba      	ldr	r2, [r7, #24]
 8007a36:	0151      	lsls	r1, r2, #5
 8007a38:	69fa      	ldr	r2, [r7, #28]
 8007a3a:	440a      	add	r2, r1
 8007a3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a40:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007a44:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a46:	e070      	b.n	8007b2a <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007a48:	69bb      	ldr	r3, [r7, #24]
 8007a4a:	015a      	lsls	r2, r3, #5
 8007a4c:	69fb      	ldr	r3, [r7, #28]
 8007a4e:	4413      	add	r3, r2
 8007a50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	69ba      	ldr	r2, [r7, #24]
 8007a58:	0151      	lsls	r1, r2, #5
 8007a5a:	69fa      	ldr	r2, [r7, #28]
 8007a5c:	440a      	add	r2, r1
 8007a5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007a66:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a68:	e05f      	b.n	8007b2a <USB_HC_Halt+0x232>
            break;
 8007a6a:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007a6c:	e05d      	b.n	8007b2a <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007a6e:	69bb      	ldr	r3, [r7, #24]
 8007a70:	015a      	lsls	r2, r3, #5
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	4413      	add	r3, r2
 8007a76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	69ba      	ldr	r2, [r7, #24]
 8007a7e:	0151      	lsls	r1, r2, #5
 8007a80:	69fa      	ldr	r2, [r7, #28]
 8007a82:	440a      	add	r2, r1
 8007a84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a88:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007a8c:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007a8e:	69fb      	ldr	r3, [r7, #28]
 8007a90:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a94:	691b      	ldr	r3, [r3, #16]
 8007a96:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d133      	bne.n	8007b06 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007a9e:	69bb      	ldr	r3, [r7, #24]
 8007aa0:	015a      	lsls	r2, r3, #5
 8007aa2:	69fb      	ldr	r3, [r7, #28]
 8007aa4:	4413      	add	r3, r2
 8007aa6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	69ba      	ldr	r2, [r7, #24]
 8007aae:	0151      	lsls	r1, r2, #5
 8007ab0:	69fa      	ldr	r2, [r7, #28]
 8007ab2:	440a      	add	r2, r1
 8007ab4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ab8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007abc:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007abe:	69bb      	ldr	r3, [r7, #24]
 8007ac0:	015a      	lsls	r2, r3, #5
 8007ac2:	69fb      	ldr	r3, [r7, #28]
 8007ac4:	4413      	add	r3, r2
 8007ac6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	69ba      	ldr	r2, [r7, #24]
 8007ace:	0151      	lsls	r1, r2, #5
 8007ad0:	69fa      	ldr	r2, [r7, #28]
 8007ad2:	440a      	add	r2, r1
 8007ad4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ad8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007adc:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007ade:	68bb      	ldr	r3, [r7, #8]
 8007ae0:	3301      	adds	r3, #1
 8007ae2:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007aea:	d81d      	bhi.n	8007b28 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007aec:	69bb      	ldr	r3, [r7, #24]
 8007aee:	015a      	lsls	r2, r3, #5
 8007af0:	69fb      	ldr	r3, [r7, #28]
 8007af2:	4413      	add	r3, r2
 8007af4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007afe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b02:	d0ec      	beq.n	8007ade <USB_HC_Halt+0x1e6>
 8007b04:	e011      	b.n	8007b2a <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b06:	69bb      	ldr	r3, [r7, #24]
 8007b08:	015a      	lsls	r2, r3, #5
 8007b0a:	69fb      	ldr	r3, [r7, #28]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	69ba      	ldr	r2, [r7, #24]
 8007b16:	0151      	lsls	r1, r2, #5
 8007b18:	69fa      	ldr	r2, [r7, #28]
 8007b1a:	440a      	add	r2, r1
 8007b1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b20:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b24:	6013      	str	r3, [r2, #0]
 8007b26:	e000      	b.n	8007b2a <USB_HC_Halt+0x232>
          break;
 8007b28:	bf00      	nop
    }
  }

  return HAL_OK;
 8007b2a:	2300      	movs	r3, #0
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3724      	adds	r7, #36	@ 0x24
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <memset>:
 8007b38:	4402      	add	r2, r0
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	4293      	cmp	r3, r2
 8007b3e:	d100      	bne.n	8007b42 <memset+0xa>
 8007b40:	4770      	bx	lr
 8007b42:	f803 1b01 	strb.w	r1, [r3], #1
 8007b46:	e7f9      	b.n	8007b3c <memset+0x4>

08007b48 <__libc_init_array>:
 8007b48:	b570      	push	{r4, r5, r6, lr}
 8007b4a:	4d0d      	ldr	r5, [pc, #52]	@ (8007b80 <__libc_init_array+0x38>)
 8007b4c:	4c0d      	ldr	r4, [pc, #52]	@ (8007b84 <__libc_init_array+0x3c>)
 8007b4e:	1b64      	subs	r4, r4, r5
 8007b50:	10a4      	asrs	r4, r4, #2
 8007b52:	2600      	movs	r6, #0
 8007b54:	42a6      	cmp	r6, r4
 8007b56:	d109      	bne.n	8007b6c <__libc_init_array+0x24>
 8007b58:	4d0b      	ldr	r5, [pc, #44]	@ (8007b88 <__libc_init_array+0x40>)
 8007b5a:	4c0c      	ldr	r4, [pc, #48]	@ (8007b8c <__libc_init_array+0x44>)
 8007b5c:	f000 f818 	bl	8007b90 <_init>
 8007b60:	1b64      	subs	r4, r4, r5
 8007b62:	10a4      	asrs	r4, r4, #2
 8007b64:	2600      	movs	r6, #0
 8007b66:	42a6      	cmp	r6, r4
 8007b68:	d105      	bne.n	8007b76 <__libc_init_array+0x2e>
 8007b6a:	bd70      	pop	{r4, r5, r6, pc}
 8007b6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b70:	4798      	blx	r3
 8007b72:	3601      	adds	r6, #1
 8007b74:	e7ee      	b.n	8007b54 <__libc_init_array+0xc>
 8007b76:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b7a:	4798      	blx	r3
 8007b7c:	3601      	adds	r6, #1
 8007b7e:	e7f2      	b.n	8007b66 <__libc_init_array+0x1e>
 8007b80:	08007bc8 	.word	0x08007bc8
 8007b84:	08007bc8 	.word	0x08007bc8
 8007b88:	08007bc8 	.word	0x08007bc8
 8007b8c:	08007bcc 	.word	0x08007bcc

08007b90 <_init>:
 8007b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b92:	bf00      	nop
 8007b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b96:	bc08      	pop	{r3}
 8007b98:	469e      	mov	lr, r3
 8007b9a:	4770      	bx	lr

08007b9c <_fini>:
 8007b9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b9e:	bf00      	nop
 8007ba0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007ba2:	bc08      	pop	{r3}
 8007ba4:	469e      	mov	lr, r3
 8007ba6:	4770      	bx	lr
