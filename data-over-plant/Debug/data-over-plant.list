
data-over-plant.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bfbc  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800c16c  0800c16c  0000d16c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c1fc  0800c1fc  0000e084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c1fc  0800c1fc  0000d1fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c204  0800c204  0000e084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c204  0800c204  0000d204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c208  0800c208  0000d208  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  0800c20c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e084  2**0
                  CONTENTS
 10 .bss          00000bd4  20000084  20000084  0000e084  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000c58  20000c58  0000e084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e084  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002301a  00000000  00000000  0000e0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004d46  00000000  00000000  000310ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d68  00000000  00000000  00035e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016d6  00000000  00000000  00037b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029c0d  00000000  00000000  00039256  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002598b  00000000  00000000  00062e63  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec4cc  00000000  00000000  000887ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00174cba  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008324  00000000  00000000  00174d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  0017d024  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000084 	.word	0x20000084
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800c154 	.word	0x0800c154

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000088 	.word	0x20000088
 80001ec:	0800c154 	.word	0x0800c154

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <serial_print>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void serial_print(char* str)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f7ff fe0b 	bl	80001f0 <strlen>
 80005da:	4603      	mov	r3, r0
 80005dc:	b29a      	uxth	r2, r3
 80005de:	f04f 33ff 	mov.w	r3, #4294967295
 80005e2:	6879      	ldr	r1, [r7, #4]
 80005e4:	4803      	ldr	r0, [pc, #12]	@ (80005f4 <serial_print+0x28>)
 80005e6:	f006 ff71 	bl	80074cc <HAL_UART_Transmit>
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	20000284 	.word	0x20000284

080005f8 <write_register>:

void write_register(uint8_t addr, uint8_t value)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	460a      	mov	r2, r1
 8000602:	71fb      	strb	r3, [r7, #7]
 8000604:	4613      	mov	r3, r2
 8000606:	71bb      	strb	r3, [r7, #6]
    uint8_t data[2];
    data[0] = addr | 0x80; // bit 7 à 1 pour écriture
 8000608:	79fb      	ldrb	r3, [r7, #7]
 800060a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800060e:	b2db      	uxtb	r3, r3
 8000610:	733b      	strb	r3, [r7, #12]
    data[1] = value;
 8000612:	79bb      	ldrb	r3, [r7, #6]
 8000614:	737b      	strb	r3, [r7, #13]

    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET); // NSS low
 8000616:	2200      	movs	r2, #0
 8000618:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800061c:	480a      	ldr	r0, [pc, #40]	@ (8000648 <write_register+0x50>)
 800061e:	f001 fe6b 	bl	80022f8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi5, data, 2, HAL_MAX_DELAY);
 8000622:	f107 010c 	add.w	r1, r7, #12
 8000626:	f04f 33ff 	mov.w	r3, #4294967295
 800062a:	2202      	movs	r2, #2
 800062c:	4807      	ldr	r0, [pc, #28]	@ (800064c <write_register+0x54>)
 800062e:	f005 fc20 	bl	8005e72 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);   // NSS high
 8000632:	2201      	movs	r2, #1
 8000634:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000638:	4803      	ldr	r0, [pc, #12]	@ (8000648 <write_register+0x50>)
 800063a:	f001 fe5d 	bl	80022f8 <HAL_GPIO_WritePin>
}
 800063e:	bf00      	nop
 8000640:	3710      	adds	r7, #16
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40021400 	.word	0x40021400
 800064c:	200001e4 	.word	0x200001e4

08000650 <init_lora>:

void init_lora(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
	// Mettre en veille (obligatoire avant les changements de mode)
	write_register(0x01, 0x80); // Sleep mode + LoRa
 8000656:	2180      	movs	r1, #128	@ 0x80
 8000658:	2001      	movs	r0, #1
 800065a:	f7ff ffcd 	bl	80005f8 <write_register>

	// Choisir fréquence (ici pour 868 MHz)
	write_register(0x06, 0xD9); // RegFrfMsb = 868 MHz
 800065e:	21d9      	movs	r1, #217	@ 0xd9
 8000660:	2006      	movs	r0, #6
 8000662:	f7ff ffc9 	bl	80005f8 <write_register>
	write_register(0x07, 0x06);
 8000666:	2106      	movs	r1, #6
 8000668:	2007      	movs	r0, #7
 800066a:	f7ff ffc5 	bl	80005f8 <write_register>
	write_register(0x08, 0x66);
 800066e:	2166      	movs	r1, #102	@ 0x66
 8000670:	2008      	movs	r0, #8
 8000672:	f7ff ffc1 	bl	80005f8 <write_register>

	// Puissance d’émission (PA_BOOST, 17 dBm)
	write_register(0x09, 0x8F); // RegPaConfig
 8000676:	218f      	movs	r1, #143	@ 0x8f
 8000678:	2009      	movs	r0, #9
 800067a:	f7ff ffbd 	bl	80005f8 <write_register>

	// Paramètres LoRa (BW=125 kHz, CR=4/5, SF=7)
	write_register(0x1D, 0x72); // RegModemConfig1: BW=125kHz, CR=4/5, explicit header
 800067e:	2172      	movs	r1, #114	@ 0x72
 8000680:	201d      	movs	r0, #29
 8000682:	f7ff ffb9 	bl	80005f8 <write_register>
	write_register(0x1E, 0x74); // RegModemConfig2: SF=7, CRC On
 8000686:	2174      	movs	r1, #116	@ 0x74
 8000688:	201e      	movs	r0, #30
 800068a:	f7ff ffb5 	bl	80005f8 <write_register>
	write_register(0x26, 0x04); // RegModemConfig3: LowDataRateOptimize=OFF
 800068e:	2104      	movs	r1, #4
 8000690:	2026      	movs	r0, #38	@ 0x26
 8000692:	f7ff ffb1 	bl	80005f8 <write_register>

	// Configuration de la FIFO
	write_register(0x0E, 0x80); // RegFifoTxBaseAddr
 8000696:	2180      	movs	r1, #128	@ 0x80
 8000698:	200e      	movs	r0, #14
 800069a:	f7ff ffad 	bl	80005f8 <write_register>
	write_register(0x0D, 0x80); // RegFifoAddrPtr
 800069e:	2180      	movs	r1, #128	@ 0x80
 80006a0:	200d      	movs	r0, #13
 80006a2:	f7ff ffa9 	bl	80005f8 <write_register>
	unsigned char size = 7;
 80006a6:	2307      	movs	r3, #7
 80006a8:	70fb      	strb	r3, [r7, #3]
	write_register(0x22, size); // RegPayloadLength (taille du message)
 80006aa:	78fb      	ldrb	r3, [r7, #3]
 80006ac:	4619      	mov	r1, r3
 80006ae:	2022      	movs	r0, #34	@ 0x22
 80006b0:	f7ff ffa2 	bl	80005f8 <write_register>

	// Écriture des données dans le FIFO
	for (int i = 0; i < size; i++) {
 80006b4:	2300      	movs	r3, #0
 80006b6:	607b      	str	r3, [r7, #4]
 80006b8:	e00a      	b.n	80006d0 <init_lora+0x80>
	  write_register(0x00, TX_Buffer[i]); // RegFifo
 80006ba:	4a0b      	ldr	r2, [pc, #44]	@ (80006e8 <init_lora+0x98>)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	4413      	add	r3, r2
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	4619      	mov	r1, r3
 80006c4:	2000      	movs	r0, #0
 80006c6:	f7ff ff97 	bl	80005f8 <write_register>
	for (int i = 0; i < size; i++) {
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	3301      	adds	r3, #1
 80006ce:	607b      	str	r3, [r7, #4]
 80006d0:	78fb      	ldrb	r3, [r7, #3]
 80006d2:	687a      	ldr	r2, [r7, #4]
 80006d4:	429a      	cmp	r2, r3
 80006d6:	dbf0      	blt.n	80006ba <init_lora+0x6a>
	}

	// Passage en mode émetteur
	write_register(0x01, 0x83); // TX mode + LoRa
 80006d8:	2183      	movs	r1, #131	@ 0x83
 80006da:	2001      	movs	r0, #1
 80006dc:	f7ff ff8c 	bl	80005f8 <write_register>
}
 80006e0:	bf00      	nop
 80006e2:	3708      	adds	r7, #8
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000000 	.word	0x20000000

080006ec <lora_reset>:

void lora_reset(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_RESET);
 80006f0:	2200      	movs	r2, #0
 80006f2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80006f6:	4808      	ldr	r0, [pc, #32]	@ (8000718 <lora_reset+0x2c>)
 80006f8:	f001 fdfe 	bl	80022f8 <HAL_GPIO_WritePin>
    HAL_Delay(10); // maintenir RESET à 0 pendant 10ms
 80006fc:	200a      	movs	r0, #10
 80006fe:	f001 f91f 	bl	8001940 <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 8000702:	2201      	movs	r2, #1
 8000704:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000708:	4803      	ldr	r0, [pc, #12]	@ (8000718 <lora_reset+0x2c>)
 800070a:	f001 fdf5 	bl	80022f8 <HAL_GPIO_WritePin>
    HAL_Delay(10); // attendre encore un peu après le relâchement
 800070e:	200a      	movs	r0, #10
 8000710:	f001 f916 	bl	8001940 <HAL_Delay>
}
 8000714:	bf00      	nop
 8000716:	bd80      	pop	{r7, pc}
 8000718:	40021400 	.word	0x40021400

0800071c <lora_version>:

uint8_t lora_version(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08a      	sub	sp, #40	@ 0x28
 8000720:	af00      	add	r7, sp, #0
	uint8_t version = 0;
 8000722:	2300      	movs	r3, #0
 8000724:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t addr = 0x42; // RegVersion
 8000728:	2342      	movs	r3, #66	@ 0x42
 800072a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000734:	481a      	ldr	r0, [pc, #104]	@ (80007a0 <lora_version+0x84>)
 8000736:	f001 fddf 	bl	80022f8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5, &addr, 1, HAL_MAX_DELAY);
 800073a:	f107 0126 	add.w	r1, r7, #38	@ 0x26
 800073e:	f04f 33ff 	mov.w	r3, #4294967295
 8000742:	2201      	movs	r2, #1
 8000744:	4817      	ldr	r0, [pc, #92]	@ (80007a4 <lora_version+0x88>)
 8000746:	f005 fb94 	bl	8005e72 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi5, &version, 1, HAL_MAX_DELAY);
 800074a:	f107 0127 	add.w	r1, r7, #39	@ 0x27
 800074e:	f04f 33ff 	mov.w	r3, #4294967295
 8000752:	2201      	movs	r2, #1
 8000754:	4813      	ldr	r0, [pc, #76]	@ (80007a4 <lora_version+0x88>)
 8000756:	f005 fcd0 	bl	80060fa <HAL_SPI_Receive>
	HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);
 800075a:	2201      	movs	r2, #1
 800075c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000760:	480f      	ldr	r0, [pc, #60]	@ (80007a0 <lora_version+0x84>)
 8000762:	f001 fdc9 	bl	80022f8 <HAL_GPIO_WritePin>

	char buf[32];
	snprintf(buf, sizeof(buf), "RegVersion = 0x%02X\r\n", version);
 8000766:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800076a:	1d38      	adds	r0, r7, #4
 800076c:	4a0e      	ldr	r2, [pc, #56]	@ (80007a8 <lora_version+0x8c>)
 800076e:	2120      	movs	r1, #32
 8000770:	f00b f8ea 	bl	800b948 <sniprintf>
	serial_print(buf);
 8000774:	1d3b      	adds	r3, r7, #4
 8000776:	4618      	mov	r0, r3
 8000778:	f7ff ff28 	bl	80005cc <serial_print>

	if (version == 0x12) {
 800077c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000780:	2b12      	cmp	r3, #18
 8000782:	d103      	bne.n	800078c <lora_version+0x70>
		serial_print("RFM95 détecté\r\n");
 8000784:	4809      	ldr	r0, [pc, #36]	@ (80007ac <lora_version+0x90>)
 8000786:	f7ff ff21 	bl	80005cc <serial_print>
 800078a:	e002      	b.n	8000792 <lora_version+0x76>
	} else {
		serial_print("Erreur RFM95 !\r\n");
 800078c:	4808      	ldr	r0, [pc, #32]	@ (80007b0 <lora_version+0x94>)
 800078e:	f7ff ff1d 	bl	80005cc <serial_print>
	}

	return version;
 8000792:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8000796:	4618      	mov	r0, r3
 8000798:	3728      	adds	r7, #40	@ 0x28
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40021400 	.word	0x40021400
 80007a4:	200001e4 	.word	0x200001e4
 80007a8:	0800c16c 	.word	0x0800c16c
 80007ac:	0800c184 	.word	0x0800c184
 80007b0:	0800c198 	.word	0x0800c198

080007b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b8:	f001 f880 	bl	80018bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007bc:	f000 f81e 	bl	80007fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c0:	f000 fa8c 	bl	8000cdc <MX_GPIO_Init>
  MX_CRC_Init();
 80007c4:	f000 f884 	bl	80008d0 <MX_CRC_Init>
  MX_DMA2D_Init();
 80007c8:	f000 f896 	bl	80008f8 <MX_DMA2D_Init>
  MX_FMC_Init();
 80007cc:	f000 fa36 	bl	8000c3c <MX_FMC_Init>
  MX_I2C3_Init();
 80007d0:	f000 f8c4 	bl	800095c <MX_I2C3_Init>
  MX_LTDC_Init();
 80007d4:	f000 f902 	bl	80009dc <MX_LTDC_Init>
  MX_SPI5_Init();
 80007d8:	f000 f980 	bl	8000adc <MX_SPI5_Init>
  MX_TIM1_Init();
 80007dc:	f000 f9b4 	bl	8000b48 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80007e0:	f000 fa02 	bl	8000be8 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 80007e4:	f00a fce2 	bl	800b1ac <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
#ifdef RECEIVER
#endif

#ifdef TRANSMITTER
  lora_reset();
 80007e8:	f7ff ff80 	bl	80006ec <lora_reset>
  init_lora();
 80007ec:	f7ff ff30 	bl	8000650 <init_lora>
  lora_version();
 80007f0:	f7ff ff94 	bl	800071c <lora_version>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80007f4:	f00a fd00 	bl	800b1f8 <MX_USB_HOST_Process>
 80007f8:	e7fc      	b.n	80007f4 <main+0x40>
	...

080007fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b094      	sub	sp, #80	@ 0x50
 8000800:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000802:	f107 0320 	add.w	r3, r7, #32
 8000806:	2230      	movs	r2, #48	@ 0x30
 8000808:	2100      	movs	r1, #0
 800080a:	4618      	mov	r0, r3
 800080c:	f00b f8d2 	bl	800b9b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	2200      	movs	r2, #0
 8000816:	601a      	str	r2, [r3, #0]
 8000818:	605a      	str	r2, [r3, #4]
 800081a:	609a      	str	r2, [r3, #8]
 800081c:	60da      	str	r2, [r3, #12]
 800081e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000820:	2300      	movs	r3, #0
 8000822:	60bb      	str	r3, [r7, #8]
 8000824:	4b28      	ldr	r3, [pc, #160]	@ (80008c8 <SystemClock_Config+0xcc>)
 8000826:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000828:	4a27      	ldr	r2, [pc, #156]	@ (80008c8 <SystemClock_Config+0xcc>)
 800082a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800082e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000830:	4b25      	ldr	r3, [pc, #148]	@ (80008c8 <SystemClock_Config+0xcc>)
 8000832:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000834:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000838:	60bb      	str	r3, [r7, #8]
 800083a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800083c:	2300      	movs	r3, #0
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	4b22      	ldr	r3, [pc, #136]	@ (80008cc <SystemClock_Config+0xd0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000848:	4a20      	ldr	r2, [pc, #128]	@ (80008cc <SystemClock_Config+0xd0>)
 800084a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800084e:	6013      	str	r3, [r2, #0]
 8000850:	4b1e      	ldr	r3, [pc, #120]	@ (80008cc <SystemClock_Config+0xd0>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000858:	607b      	str	r3, [r7, #4]
 800085a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800085c:	2301      	movs	r3, #1
 800085e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000860:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000864:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000866:	2302      	movs	r3, #2
 8000868:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800086a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800086e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000870:	2304      	movs	r3, #4
 8000872:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000874:	2348      	movs	r3, #72	@ 0x48
 8000876:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000878:	2302      	movs	r3, #2
 800087a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800087c:	2303      	movs	r3, #3
 800087e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000880:	f107 0320 	add.w	r3, r7, #32
 8000884:	4618      	mov	r0, r3
 8000886:	f004 fbad 	bl	8004fe4 <HAL_RCC_OscConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000890:	f000 fb5c 	bl	8000f4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000894:	230f      	movs	r3, #15
 8000896:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000898:	2302      	movs	r3, #2
 800089a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800089c:	2300      	movs	r3, #0
 800089e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008a0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80008a6:	2300      	movs	r3, #0
 80008a8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	2102      	movs	r1, #2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f004 fe0f 	bl	80054d4 <HAL_RCC_ClockConfig>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80008bc:	f000 fb46 	bl	8000f4c <Error_Handler>
  }
}
 80008c0:	bf00      	nop
 80008c2:	3750      	adds	r7, #80	@ 0x50
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40023800 	.word	0x40023800
 80008cc:	40007000 	.word	0x40007000

080008d0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80008d4:	4b06      	ldr	r3, [pc, #24]	@ (80008f0 <MX_CRC_Init+0x20>)
 80008d6:	4a07      	ldr	r2, [pc, #28]	@ (80008f4 <MX_CRC_Init+0x24>)
 80008d8:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80008da:	4805      	ldr	r0, [pc, #20]	@ (80008f0 <MX_CRC_Init+0x20>)
 80008dc:	f001 f936 	bl	8001b4c <HAL_CRC_Init>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80008e6:	f000 fb31 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	200000a0 	.word	0x200000a0
 80008f4:	40023000 	.word	0x40023000

080008f8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80008fc:	4b15      	ldr	r3, [pc, #84]	@ (8000954 <MX_DMA2D_Init+0x5c>)
 80008fe:	4a16      	ldr	r2, [pc, #88]	@ (8000958 <MX_DMA2D_Init+0x60>)
 8000900:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000902:	4b14      	ldr	r3, [pc, #80]	@ (8000954 <MX_DMA2D_Init+0x5c>)
 8000904:	2200      	movs	r2, #0
 8000906:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000908:	4b12      	ldr	r3, [pc, #72]	@ (8000954 <MX_DMA2D_Init+0x5c>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800090e:	4b11      	ldr	r3, [pc, #68]	@ (8000954 <MX_DMA2D_Init+0x5c>)
 8000910:	2200      	movs	r2, #0
 8000912:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000914:	4b0f      	ldr	r3, [pc, #60]	@ (8000954 <MX_DMA2D_Init+0x5c>)
 8000916:	2200      	movs	r2, #0
 8000918:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800091a:	4b0e      	ldr	r3, [pc, #56]	@ (8000954 <MX_DMA2D_Init+0x5c>)
 800091c:	2200      	movs	r2, #0
 800091e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000920:	4b0c      	ldr	r3, [pc, #48]	@ (8000954 <MX_DMA2D_Init+0x5c>)
 8000922:	2200      	movs	r2, #0
 8000924:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000926:	4b0b      	ldr	r3, [pc, #44]	@ (8000954 <MX_DMA2D_Init+0x5c>)
 8000928:	2200      	movs	r2, #0
 800092a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800092c:	4809      	ldr	r0, [pc, #36]	@ (8000954 <MX_DMA2D_Init+0x5c>)
 800092e:	f001 f94b 	bl	8001bc8 <HAL_DMA2D_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000938:	f000 fb08 	bl	8000f4c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800093c:	2101      	movs	r1, #1
 800093e:	4805      	ldr	r0, [pc, #20]	@ (8000954 <MX_DMA2D_Init+0x5c>)
 8000940:	f001 fa9c 	bl	8001e7c <HAL_DMA2D_ConfigLayer>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800094a:	f000 faff 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200000a8 	.word	0x200000a8
 8000958:	4002b000 	.word	0x4002b000

0800095c <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000960:	4b1b      	ldr	r3, [pc, #108]	@ (80009d0 <MX_I2C3_Init+0x74>)
 8000962:	4a1c      	ldr	r2, [pc, #112]	@ (80009d4 <MX_I2C3_Init+0x78>)
 8000964:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8000966:	4b1a      	ldr	r3, [pc, #104]	@ (80009d0 <MX_I2C3_Init+0x74>)
 8000968:	4a1b      	ldr	r2, [pc, #108]	@ (80009d8 <MX_I2C3_Init+0x7c>)
 800096a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800096c:	4b18      	ldr	r3, [pc, #96]	@ (80009d0 <MX_I2C3_Init+0x74>)
 800096e:	2200      	movs	r2, #0
 8000970:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000972:	4b17      	ldr	r3, [pc, #92]	@ (80009d0 <MX_I2C3_Init+0x74>)
 8000974:	2200      	movs	r2, #0
 8000976:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000978:	4b15      	ldr	r3, [pc, #84]	@ (80009d0 <MX_I2C3_Init+0x74>)
 800097a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800097e:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000980:	4b13      	ldr	r3, [pc, #76]	@ (80009d0 <MX_I2C3_Init+0x74>)
 8000982:	2200      	movs	r2, #0
 8000984:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000986:	4b12      	ldr	r3, [pc, #72]	@ (80009d0 <MX_I2C3_Init+0x74>)
 8000988:	2200      	movs	r2, #0
 800098a:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800098c:	4b10      	ldr	r3, [pc, #64]	@ (80009d0 <MX_I2C3_Init+0x74>)
 800098e:	2200      	movs	r2, #0
 8000990:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000992:	4b0f      	ldr	r3, [pc, #60]	@ (80009d0 <MX_I2C3_Init+0x74>)
 8000994:	2200      	movs	r2, #0
 8000996:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000998:	480d      	ldr	r0, [pc, #52]	@ (80009d0 <MX_I2C3_Init+0x74>)
 800099a:	f003 fdfb 	bl	8004594 <HAL_I2C_Init>
 800099e:	4603      	mov	r3, r0
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d001      	beq.n	80009a8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80009a4:	f000 fad2 	bl	8000f4c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80009a8:	2100      	movs	r1, #0
 80009aa:	4809      	ldr	r0, [pc, #36]	@ (80009d0 <MX_I2C3_Init+0x74>)
 80009ac:	f003 ff36 	bl	800481c <HAL_I2CEx_ConfigAnalogFilter>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80009b6:	f000 fac9 	bl	8000f4c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80009ba:	2100      	movs	r1, #0
 80009bc:	4804      	ldr	r0, [pc, #16]	@ (80009d0 <MX_I2C3_Init+0x74>)
 80009be:	f003 ff69 	bl	8004894 <HAL_I2CEx_ConfigDigitalFilter>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80009c8:	f000 fac0 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	200000e8 	.word	0x200000e8
 80009d4:	40005c00 	.word	0x40005c00
 80009d8:	000186a0 	.word	0x000186a0

080009dc <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b08e      	sub	sp, #56	@ 0x38
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 80009e2:	1d3b      	adds	r3, r7, #4
 80009e4:	2234      	movs	r2, #52	@ 0x34
 80009e6:	2100      	movs	r1, #0
 80009e8:	4618      	mov	r0, r3
 80009ea:	f00a ffe3 	bl	800b9b4 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 80009ee:	4b39      	ldr	r3, [pc, #228]	@ (8000ad4 <MX_LTDC_Init+0xf8>)
 80009f0:	4a39      	ldr	r2, [pc, #228]	@ (8000ad8 <MX_LTDC_Init+0xfc>)
 80009f2:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80009f4:	4b37      	ldr	r3, [pc, #220]	@ (8000ad4 <MX_LTDC_Init+0xf8>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 80009fa:	4b36      	ldr	r3, [pc, #216]	@ (8000ad4 <MX_LTDC_Init+0xf8>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000a00:	4b34      	ldr	r3, [pc, #208]	@ (8000ad4 <MX_LTDC_Init+0xf8>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000a06:	4b33      	ldr	r3, [pc, #204]	@ (8000ad4 <MX_LTDC_Init+0xf8>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000a0c:	4b31      	ldr	r3, [pc, #196]	@ (8000ad4 <MX_LTDC_Init+0xf8>)
 8000a0e:	2209      	movs	r2, #9
 8000a10:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000a12:	4b30      	ldr	r3, [pc, #192]	@ (8000ad4 <MX_LTDC_Init+0xf8>)
 8000a14:	2201      	movs	r2, #1
 8000a16:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000a18:	4b2e      	ldr	r3, [pc, #184]	@ (8000ad4 <MX_LTDC_Init+0xf8>)
 8000a1a:	221d      	movs	r2, #29
 8000a1c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000a1e:	4b2d      	ldr	r3, [pc, #180]	@ (8000ad4 <MX_LTDC_Init+0xf8>)
 8000a20:	2203      	movs	r2, #3
 8000a22:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000a24:	4b2b      	ldr	r3, [pc, #172]	@ (8000ad4 <MX_LTDC_Init+0xf8>)
 8000a26:	f240 120d 	movw	r2, #269	@ 0x10d
 8000a2a:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000a2c:	4b29      	ldr	r3, [pc, #164]	@ (8000ad4 <MX_LTDC_Init+0xf8>)
 8000a2e:	f240 1243 	movw	r2, #323	@ 0x143
 8000a32:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 8000a34:	4b27      	ldr	r3, [pc, #156]	@ (8000ad4 <MX_LTDC_Init+0xf8>)
 8000a36:	f240 1217 	movw	r2, #279	@ 0x117
 8000a3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000a3c:	4b25      	ldr	r3, [pc, #148]	@ (8000ad4 <MX_LTDC_Init+0xf8>)
 8000a3e:	f240 1247 	movw	r2, #327	@ 0x147
 8000a42:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000a44:	4b23      	ldr	r3, [pc, #140]	@ (8000ad4 <MX_LTDC_Init+0xf8>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000a4c:	4b21      	ldr	r3, [pc, #132]	@ (8000ad4 <MX_LTDC_Init+0xf8>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000a54:	4b1f      	ldr	r3, [pc, #124]	@ (8000ad4 <MX_LTDC_Init+0xf8>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000a5c:	481d      	ldr	r0, [pc, #116]	@ (8000ad4 <MX_LTDC_Init+0xf8>)
 8000a5e:	f003 ff59 	bl	8004914 <HAL_LTDC_Init>
 8000a62:	4603      	mov	r3, r0
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d001      	beq.n	8000a6c <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000a68:	f000 fa70 	bl	8000f4c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000a70:	23f0      	movs	r3, #240	@ 0xf0
 8000a72:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000a78:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000a7c:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8000a7e:	2302      	movs	r3, #2
 8000a80:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8000a82:	23ff      	movs	r3, #255	@ 0xff
 8000a84:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000a8a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a8e:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000a90:	2307      	movs	r3, #7
 8000a92:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000a94:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000a98:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 8000a9a:	23f0      	movs	r3, #240	@ 0xf0
 8000a9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 8000a9e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000aa2:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ab6:	1d3b      	adds	r3, r7, #4
 8000ab8:	2200      	movs	r2, #0
 8000aba:	4619      	mov	r1, r3
 8000abc:	4805      	ldr	r0, [pc, #20]	@ (8000ad4 <MX_LTDC_Init+0xf8>)
 8000abe:	f004 f8bb 	bl	8004c38 <HAL_LTDC_ConfigLayer>
 8000ac2:	4603      	mov	r3, r0
 8000ac4:	2b00      	cmp	r3, #0
 8000ac6:	d001      	beq.n	8000acc <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000ac8:	f000 fa40 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000acc:	bf00      	nop
 8000ace:	3738      	adds	r7, #56	@ 0x38
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	2000013c 	.word	0x2000013c
 8000ad8:	40016800 	.word	0x40016800

08000adc <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000ae0:	4b17      	ldr	r3, [pc, #92]	@ (8000b40 <MX_SPI5_Init+0x64>)
 8000ae2:	4a18      	ldr	r2, [pc, #96]	@ (8000b44 <MX_SPI5_Init+0x68>)
 8000ae4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000ae6:	4b16      	ldr	r3, [pc, #88]	@ (8000b40 <MX_SPI5_Init+0x64>)
 8000ae8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000aec:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000aee:	4b14      	ldr	r3, [pc, #80]	@ (8000b40 <MX_SPI5_Init+0x64>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000af4:	4b12      	ldr	r3, [pc, #72]	@ (8000b40 <MX_SPI5_Init+0x64>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000afa:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <MX_SPI5_Init+0x64>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b00:	4b0f      	ldr	r3, [pc, #60]	@ (8000b40 <MX_SPI5_Init+0x64>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000b06:	4b0e      	ldr	r3, [pc, #56]	@ (8000b40 <MX_SPI5_Init+0x64>)
 8000b08:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000b0c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b40 <MX_SPI5_Init+0x64>)
 8000b10:	2218      	movs	r2, #24
 8000b12:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b14:	4b0a      	ldr	r3, [pc, #40]	@ (8000b40 <MX_SPI5_Init+0x64>)
 8000b16:	2200      	movs	r2, #0
 8000b18:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b1a:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <MX_SPI5_Init+0x64>)
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b20:	4b07      	ldr	r3, [pc, #28]	@ (8000b40 <MX_SPI5_Init+0x64>)
 8000b22:	2200      	movs	r2, #0
 8000b24:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000b26:	4b06      	ldr	r3, [pc, #24]	@ (8000b40 <MX_SPI5_Init+0x64>)
 8000b28:	220a      	movs	r2, #10
 8000b2a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000b2c:	4804      	ldr	r0, [pc, #16]	@ (8000b40 <MX_SPI5_Init+0x64>)
 8000b2e:	f005 f917 	bl	8005d60 <HAL_SPI_Init>
 8000b32:	4603      	mov	r3, r0
 8000b34:	2b00      	cmp	r3, #0
 8000b36:	d001      	beq.n	8000b3c <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000b38:	f000 fa08 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000b3c:	bf00      	nop
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	200001e4 	.word	0x200001e4
 8000b44:	40015000 	.word	0x40015000

08000b48 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b4e:	f107 0308 	add.w	r3, r7, #8
 8000b52:	2200      	movs	r2, #0
 8000b54:	601a      	str	r2, [r3, #0]
 8000b56:	605a      	str	r2, [r3, #4]
 8000b58:	609a      	str	r2, [r3, #8]
 8000b5a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b5c:	463b      	mov	r3, r7
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
 8000b62:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b64:	4b1e      	ldr	r3, [pc, #120]	@ (8000be0 <MX_TIM1_Init+0x98>)
 8000b66:	4a1f      	ldr	r2, [pc, #124]	@ (8000be4 <MX_TIM1_Init+0x9c>)
 8000b68:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000b6a:	4b1d      	ldr	r3, [pc, #116]	@ (8000be0 <MX_TIM1_Init+0x98>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b70:	4b1b      	ldr	r3, [pc, #108]	@ (8000be0 <MX_TIM1_Init+0x98>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b76:	4b1a      	ldr	r3, [pc, #104]	@ (8000be0 <MX_TIM1_Init+0x98>)
 8000b78:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b7c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b7e:	4b18      	ldr	r3, [pc, #96]	@ (8000be0 <MX_TIM1_Init+0x98>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b84:	4b16      	ldr	r3, [pc, #88]	@ (8000be0 <MX_TIM1_Init+0x98>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8a:	4b15      	ldr	r3, [pc, #84]	@ (8000be0 <MX_TIM1_Init+0x98>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b90:	4813      	ldr	r0, [pc, #76]	@ (8000be0 <MX_TIM1_Init+0x98>)
 8000b92:	f005 ffd5 	bl	8006b40 <HAL_TIM_Base_Init>
 8000b96:	4603      	mov	r3, r0
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d001      	beq.n	8000ba0 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000b9c:	f000 f9d6 	bl	8000f4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ba0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ba4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ba6:	f107 0308 	add.w	r3, r7, #8
 8000baa:	4619      	mov	r1, r3
 8000bac:	480c      	ldr	r0, [pc, #48]	@ (8000be0 <MX_TIM1_Init+0x98>)
 8000bae:	f006 f977 	bl	8006ea0 <HAL_TIM_ConfigClockSource>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000bb8:	f000 f9c8 	bl	8000f4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bc4:	463b      	mov	r3, r7
 8000bc6:	4619      	mov	r1, r3
 8000bc8:	4805      	ldr	r0, [pc, #20]	@ (8000be0 <MX_TIM1_Init+0x98>)
 8000bca:	f006 fb9f 	bl	800730c <HAL_TIMEx_MasterConfigSynchronization>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000bd4:	f000 f9ba 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000bd8:	bf00      	nop
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	2000023c 	.word	0x2000023c
 8000be4:	40010000 	.word	0x40010000

08000be8 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bec:	4b11      	ldr	r3, [pc, #68]	@ (8000c34 <MX_USART1_UART_Init+0x4c>)
 8000bee:	4a12      	ldr	r2, [pc, #72]	@ (8000c38 <MX_USART1_UART_Init+0x50>)
 8000bf0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000bf2:	4b10      	ldr	r3, [pc, #64]	@ (8000c34 <MX_USART1_UART_Init+0x4c>)
 8000bf4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000bf8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000bfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000c34 <MX_USART1_UART_Init+0x4c>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c00:	4b0c      	ldr	r3, [pc, #48]	@ (8000c34 <MX_USART1_UART_Init+0x4c>)
 8000c02:	2200      	movs	r2, #0
 8000c04:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c06:	4b0b      	ldr	r3, [pc, #44]	@ (8000c34 <MX_USART1_UART_Init+0x4c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c0c:	4b09      	ldr	r3, [pc, #36]	@ (8000c34 <MX_USART1_UART_Init+0x4c>)
 8000c0e:	220c      	movs	r2, #12
 8000c10:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c12:	4b08      	ldr	r3, [pc, #32]	@ (8000c34 <MX_USART1_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c18:	4b06      	ldr	r3, [pc, #24]	@ (8000c34 <MX_USART1_UART_Init+0x4c>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c1e:	4805      	ldr	r0, [pc, #20]	@ (8000c34 <MX_USART1_UART_Init+0x4c>)
 8000c20:	f006 fc04 	bl	800742c <HAL_UART_Init>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c2a:	f000 f98f 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	20000284 	.word	0x20000284
 8000c38:	40011000 	.word	0x40011000

08000c3c <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b088      	sub	sp, #32
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000c42:	1d3b      	adds	r3, r7, #4
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]
 8000c4e:	611a      	str	r2, [r3, #16]
 8000c50:	615a      	str	r2, [r3, #20]
 8000c52:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000c54:	4b1f      	ldr	r3, [pc, #124]	@ (8000cd4 <MX_FMC_Init+0x98>)
 8000c56:	4a20      	ldr	r2, [pc, #128]	@ (8000cd8 <MX_FMC_Init+0x9c>)
 8000c58:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000c5a:	4b1e      	ldr	r3, [pc, #120]	@ (8000cd4 <MX_FMC_Init+0x98>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000c60:	4b1c      	ldr	r3, [pc, #112]	@ (8000cd4 <MX_FMC_Init+0x98>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8000c66:	4b1b      	ldr	r3, [pc, #108]	@ (8000cd4 <MX_FMC_Init+0x98>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000c6c:	4b19      	ldr	r3, [pc, #100]	@ (8000cd4 <MX_FMC_Init+0x98>)
 8000c6e:	2210      	movs	r2, #16
 8000c70:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000c72:	4b18      	ldr	r3, [pc, #96]	@ (8000cd4 <MX_FMC_Init+0x98>)
 8000c74:	2240      	movs	r2, #64	@ 0x40
 8000c76:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000c78:	4b16      	ldr	r3, [pc, #88]	@ (8000cd4 <MX_FMC_Init+0x98>)
 8000c7a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000c7e:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000c80:	4b14      	ldr	r3, [pc, #80]	@ (8000cd4 <MX_FMC_Init+0x98>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000c86:	4b13      	ldr	r3, [pc, #76]	@ (8000cd4 <MX_FMC_Init+0x98>)
 8000c88:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000c8c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000c8e:	4b11      	ldr	r3, [pc, #68]	@ (8000cd4 <MX_FMC_Init+0x98>)
 8000c90:	2200      	movs	r2, #0
 8000c92:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000c94:	4b0f      	ldr	r3, [pc, #60]	@ (8000cd4 <MX_FMC_Init+0x98>)
 8000c96:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c9a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000c9c:	2302      	movs	r3, #2
 8000c9e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000ca0:	2307      	movs	r3, #7
 8000ca2:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000ca4:	2304      	movs	r3, #4
 8000ca6:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000ca8:	2307      	movs	r3, #7
 8000caa:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000cac:	2303      	movs	r3, #3
 8000cae:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000cb4:	2302      	movs	r3, #2
 8000cb6:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000cb8:	1d3b      	adds	r3, r7, #4
 8000cba:	4619      	mov	r1, r3
 8000cbc:	4805      	ldr	r0, [pc, #20]	@ (8000cd4 <MX_FMC_Init+0x98>)
 8000cbe:	f005 f81b 	bl	8005cf8 <HAL_SDRAM_Init>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000cc8:	f000 f940 	bl	8000f4c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000ccc:	bf00      	nop
 8000cce:	3720      	adds	r7, #32
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	200002cc 	.word	0x200002cc
 8000cd8:	a0000140 	.word	0xa0000140

08000cdc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b08e      	sub	sp, #56	@ 0x38
 8000ce0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	601a      	str	r2, [r3, #0]
 8000cea:	605a      	str	r2, [r3, #4]
 8000cec:	609a      	str	r2, [r3, #8]
 8000cee:	60da      	str	r2, [r3, #12]
 8000cf0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	623b      	str	r3, [r7, #32]
 8000cf6:	4b85      	ldr	r3, [pc, #532]	@ (8000f0c <MX_GPIO_Init+0x230>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	4a84      	ldr	r2, [pc, #528]	@ (8000f0c <MX_GPIO_Init+0x230>)
 8000cfc:	f043 0304 	orr.w	r3, r3, #4
 8000d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d02:	4b82      	ldr	r3, [pc, #520]	@ (8000f0c <MX_GPIO_Init+0x230>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	f003 0304 	and.w	r3, r3, #4
 8000d0a:	623b      	str	r3, [r7, #32]
 8000d0c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
 8000d12:	4b7e      	ldr	r3, [pc, #504]	@ (8000f0c <MX_GPIO_Init+0x230>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	4a7d      	ldr	r2, [pc, #500]	@ (8000f0c <MX_GPIO_Init+0x230>)
 8000d18:	f043 0320 	orr.w	r3, r3, #32
 8000d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1e:	4b7b      	ldr	r3, [pc, #492]	@ (8000f0c <MX_GPIO_Init+0x230>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	f003 0320 	and.w	r3, r3, #32
 8000d26:	61fb      	str	r3, [r7, #28]
 8000d28:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	61bb      	str	r3, [r7, #24]
 8000d2e:	4b77      	ldr	r3, [pc, #476]	@ (8000f0c <MX_GPIO_Init+0x230>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	4a76      	ldr	r2, [pc, #472]	@ (8000f0c <MX_GPIO_Init+0x230>)
 8000d34:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3a:	4b74      	ldr	r3, [pc, #464]	@ (8000f0c <MX_GPIO_Init+0x230>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d42:	61bb      	str	r3, [r7, #24]
 8000d44:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
 8000d4a:	4b70      	ldr	r3, [pc, #448]	@ (8000f0c <MX_GPIO_Init+0x230>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	4a6f      	ldr	r2, [pc, #444]	@ (8000f0c <MX_GPIO_Init+0x230>)
 8000d50:	f043 0301 	orr.w	r3, r3, #1
 8000d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d56:	4b6d      	ldr	r3, [pc, #436]	@ (8000f0c <MX_GPIO_Init+0x230>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	f003 0301 	and.w	r3, r3, #1
 8000d5e:	617b      	str	r3, [r7, #20]
 8000d60:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
 8000d66:	4b69      	ldr	r3, [pc, #420]	@ (8000f0c <MX_GPIO_Init+0x230>)
 8000d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6a:	4a68      	ldr	r2, [pc, #416]	@ (8000f0c <MX_GPIO_Init+0x230>)
 8000d6c:	f043 0302 	orr.w	r3, r3, #2
 8000d70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d72:	4b66      	ldr	r3, [pc, #408]	@ (8000f0c <MX_GPIO_Init+0x230>)
 8000d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d7e:	2300      	movs	r3, #0
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	4b62      	ldr	r3, [pc, #392]	@ (8000f0c <MX_GPIO_Init+0x230>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	4a61      	ldr	r2, [pc, #388]	@ (8000f0c <MX_GPIO_Init+0x230>)
 8000d88:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d8e:	4b5f      	ldr	r3, [pc, #380]	@ (8000f0c <MX_GPIO_Init+0x230>)
 8000d90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d96:	60fb      	str	r3, [r7, #12]
 8000d98:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	4b5b      	ldr	r3, [pc, #364]	@ (8000f0c <MX_GPIO_Init+0x230>)
 8000da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000da2:	4a5a      	ldr	r2, [pc, #360]	@ (8000f0c <MX_GPIO_Init+0x230>)
 8000da4:	f043 0310 	orr.w	r3, r3, #16
 8000da8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000daa:	4b58      	ldr	r3, [pc, #352]	@ (8000f0c <MX_GPIO_Init+0x230>)
 8000dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dae:	f003 0310 	and.w	r3, r3, #16
 8000db2:	60bb      	str	r3, [r7, #8]
 8000db4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	607b      	str	r3, [r7, #4]
 8000dba:	4b54      	ldr	r3, [pc, #336]	@ (8000f0c <MX_GPIO_Init+0x230>)
 8000dbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dbe:	4a53      	ldr	r2, [pc, #332]	@ (8000f0c <MX_GPIO_Init+0x230>)
 8000dc0:	f043 0308 	orr.w	r3, r3, #8
 8000dc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dc6:	4b51      	ldr	r3, [pc, #324]	@ (8000f0c <MX_GPIO_Init+0x230>)
 8000dc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dca:	f003 0308 	and.w	r3, r3, #8
 8000dce:	607b      	str	r3, [r7, #4]
 8000dd0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2116      	movs	r1, #22
 8000dd6:	484e      	ldr	r0, [pc, #312]	@ (8000f10 <MX_GPIO_Init+0x234>)
 8000dd8:	f001 fa8e 	bl	80022f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000ddc:	2200      	movs	r2, #0
 8000dde:	2180      	movs	r1, #128	@ 0x80
 8000de0:	484c      	ldr	r0, [pc, #304]	@ (8000f14 <MX_GPIO_Init+0x238>)
 8000de2:	f001 fa89 	bl	80022f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000de6:	2200      	movs	r2, #0
 8000de8:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000dec:	484a      	ldr	r0, [pc, #296]	@ (8000f18 <MX_GPIO_Init+0x23c>)
 8000dee:	f001 fa83 	bl	80022f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000df2:	2200      	movs	r2, #0
 8000df4:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000df8:	4848      	ldr	r0, [pc, #288]	@ (8000f1c <MX_GPIO_Init+0x240>)
 8000dfa:	f001 fa7d 	bl	80022f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000dfe:	2200      	movs	r2, #0
 8000e00:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000e04:	4846      	ldr	r0, [pc, #280]	@ (8000f20 <MX_GPIO_Init+0x244>)
 8000e06:	f001 fa77 	bl	80022f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000e0a:	2316      	movs	r3, #22
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e12:	2300      	movs	r3, #0
 8000e14:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e16:	2300      	movs	r3, #0
 8000e18:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e1a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e1e:	4619      	mov	r1, r3
 8000e20:	483b      	ldr	r0, [pc, #236]	@ (8000f10 <MX_GPIO_Init+0x234>)
 8000e22:	f001 f8bd 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000e26:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000e2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e2c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e30:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	4835      	ldr	r0, [pc, #212]	@ (8000f14 <MX_GPIO_Init+0x238>)
 8000e3e:	f001 f8af 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000e42:	2380      	movs	r3, #128	@ 0x80
 8000e44:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000e52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e56:	4619      	mov	r1, r3
 8000e58:	482e      	ldr	r0, [pc, #184]	@ (8000f14 <MX_GPIO_Init+0x238>)
 8000e5a:	f001 f8a1 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000e5e:	2320      	movs	r3, #32
 8000e60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e62:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000e66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000e6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e70:	4619      	mov	r1, r3
 8000e72:	4827      	ldr	r0, [pc, #156]	@ (8000f10 <MX_GPIO_Init+0x234>)
 8000e74:	f001 f894 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000e78:	2304      	movs	r3, #4
 8000e7a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000e84:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4826      	ldr	r0, [pc, #152]	@ (8000f24 <MX_GPIO_Init+0x248>)
 8000e8c:	f001 f888 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF12 PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8000e90:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000e94:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e96:	2301      	movs	r3, #1
 8000e98:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ea2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ea6:	4619      	mov	r1, r3
 8000ea8:	481b      	ldr	r0, [pc, #108]	@ (8000f18 <MX_GPIO_Init+0x23c>)
 8000eaa:	f001 f879 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000eae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000ebc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	4816      	ldr	r0, [pc, #88]	@ (8000f1c <MX_GPIO_Init+0x240>)
 8000ec4:	f001 f86c 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000ec8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000ecc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000eda:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ede:	4619      	mov	r1, r3
 8000ee0:	480e      	ldr	r0, [pc, #56]	@ (8000f1c <MX_GPIO_Init+0x240>)
 8000ee2:	f001 f85d 	bl	8001fa0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000ee6:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000eea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eec:	2301      	movs	r3, #1
 8000eee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ef8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000efc:	4619      	mov	r1, r3
 8000efe:	4808      	ldr	r0, [pc, #32]	@ (8000f20 <MX_GPIO_Init+0x244>)
 8000f00:	f001 f84e 	bl	8001fa0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000f04:	bf00      	nop
 8000f06:	3738      	adds	r7, #56	@ 0x38
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}
 8000f0c:	40023800 	.word	0x40023800
 8000f10:	40020800 	.word	0x40020800
 8000f14:	40020000 	.word	0x40020000
 8000f18:	40021400 	.word	0x40021400
 8000f1c:	40020c00 	.word	0x40020c00
 8000f20:	40021800 	.word	0x40021800
 8000f24:	40020400 	.word	0x40020400

08000f28 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b082      	sub	sp, #8
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4a04      	ldr	r2, [pc, #16]	@ (8000f48 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f36:	4293      	cmp	r3, r2
 8000f38:	d101      	bne.n	8000f3e <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000f3a:	f000 fce1 	bl	8001900 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f3e:	bf00      	nop
 8000f40:	3708      	adds	r7, #8
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40001000 	.word	0x40001000

08000f4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f50:	b672      	cpsid	i
}
 8000f52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f54:	bf00      	nop
 8000f56:	e7fd      	b.n	8000f54 <Error_Handler+0x8>

08000f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	607b      	str	r3, [r7, #4]
 8000f62:	4b10      	ldr	r3, [pc, #64]	@ (8000fa4 <HAL_MspInit+0x4c>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f66:	4a0f      	ldr	r2, [pc, #60]	@ (8000fa4 <HAL_MspInit+0x4c>)
 8000f68:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f6c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fa4 <HAL_MspInit+0x4c>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f72:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000f76:	607b      	str	r3, [r7, #4]
 8000f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	603b      	str	r3, [r7, #0]
 8000f7e:	4b09      	ldr	r3, [pc, #36]	@ (8000fa4 <HAL_MspInit+0x4c>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f82:	4a08      	ldr	r2, [pc, #32]	@ (8000fa4 <HAL_MspInit+0x4c>)
 8000f84:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f88:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f8a:	4b06      	ldr	r3, [pc, #24]	@ (8000fa4 <HAL_MspInit+0x4c>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	40023800 	.word	0x40023800

08000fa8 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	b085      	sub	sp, #20
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a0b      	ldr	r2, [pc, #44]	@ (8000fe4 <HAL_CRC_MspInit+0x3c>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d10d      	bne.n	8000fd6 <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60fb      	str	r3, [r7, #12]
 8000fbe:	4b0a      	ldr	r3, [pc, #40]	@ (8000fe8 <HAL_CRC_MspInit+0x40>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fc2:	4a09      	ldr	r2, [pc, #36]	@ (8000fe8 <HAL_CRC_MspInit+0x40>)
 8000fc4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fca:	4b07      	ldr	r3, [pc, #28]	@ (8000fe8 <HAL_CRC_MspInit+0x40>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000fd2:	60fb      	str	r3, [r7, #12]
 8000fd4:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8000fd6:	bf00      	nop
 8000fd8:	3714      	adds	r7, #20
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	40023000 	.word	0x40023000
 8000fe8:	40023800 	.word	0x40023800

08000fec <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b084      	sub	sp, #16
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	4a0e      	ldr	r2, [pc, #56]	@ (8001034 <HAL_DMA2D_MspInit+0x48>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d115      	bne.n	800102a <HAL_DMA2D_MspInit+0x3e>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
 8001002:	4b0d      	ldr	r3, [pc, #52]	@ (8001038 <HAL_DMA2D_MspInit+0x4c>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	4a0c      	ldr	r2, [pc, #48]	@ (8001038 <HAL_DMA2D_MspInit+0x4c>)
 8001008:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800100c:	6313      	str	r3, [r2, #48]	@ 0x30
 800100e:	4b0a      	ldr	r3, [pc, #40]	@ (8001038 <HAL_DMA2D_MspInit+0x4c>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 800101a:	2200      	movs	r2, #0
 800101c:	2105      	movs	r1, #5
 800101e:	205a      	movs	r0, #90	@ 0x5a
 8001020:	f000 fd6a 	bl	8001af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001024:	205a      	movs	r0, #90	@ 0x5a
 8001026:	f000 fd83 	bl	8001b30 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	4002b000 	.word	0x4002b000
 8001038:	40023800 	.word	0x40023800

0800103c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	@ 0x28
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001044:	f107 0314 	add.w	r3, r7, #20
 8001048:	2200      	movs	r2, #0
 800104a:	601a      	str	r2, [r3, #0]
 800104c:	605a      	str	r2, [r3, #4]
 800104e:	609a      	str	r2, [r3, #8]
 8001050:	60da      	str	r2, [r3, #12]
 8001052:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a29      	ldr	r2, [pc, #164]	@ (8001100 <HAL_I2C_MspInit+0xc4>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d14b      	bne.n	80010f6 <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800105e:	2300      	movs	r3, #0
 8001060:	613b      	str	r3, [r7, #16]
 8001062:	4b28      	ldr	r3, [pc, #160]	@ (8001104 <HAL_I2C_MspInit+0xc8>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	4a27      	ldr	r2, [pc, #156]	@ (8001104 <HAL_I2C_MspInit+0xc8>)
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	6313      	str	r3, [r2, #48]	@ 0x30
 800106e:	4b25      	ldr	r3, [pc, #148]	@ (8001104 <HAL_I2C_MspInit+0xc8>)
 8001070:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001072:	f003 0304 	and.w	r3, r3, #4
 8001076:	613b      	str	r3, [r7, #16]
 8001078:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800107a:	2300      	movs	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
 800107e:	4b21      	ldr	r3, [pc, #132]	@ (8001104 <HAL_I2C_MspInit+0xc8>)
 8001080:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001082:	4a20      	ldr	r2, [pc, #128]	@ (8001104 <HAL_I2C_MspInit+0xc8>)
 8001084:	f043 0301 	orr.w	r3, r3, #1
 8001088:	6313      	str	r3, [r2, #48]	@ 0x30
 800108a:	4b1e      	ldr	r3, [pc, #120]	@ (8001104 <HAL_I2C_MspInit+0xc8>)
 800108c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800108e:	f003 0301 	and.w	r3, r3, #1
 8001092:	60fb      	str	r3, [r7, #12]
 8001094:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001096:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800109a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800109c:	2312      	movs	r3, #18
 800109e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010a0:	2301      	movs	r3, #1
 80010a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2300      	movs	r3, #0
 80010a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80010a8:	2304      	movs	r3, #4
 80010aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 80010ac:	f107 0314 	add.w	r3, r7, #20
 80010b0:	4619      	mov	r1, r3
 80010b2:	4815      	ldr	r0, [pc, #84]	@ (8001108 <HAL_I2C_MspInit+0xcc>)
 80010b4:	f000 ff74 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 80010b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010be:	2312      	movs	r3, #18
 80010c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c2:	2301      	movs	r3, #1
 80010c4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010c6:	2300      	movs	r3, #0
 80010c8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80010ca:	2304      	movs	r3, #4
 80010cc:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80010ce:	f107 0314 	add.w	r3, r7, #20
 80010d2:	4619      	mov	r1, r3
 80010d4:	480d      	ldr	r0, [pc, #52]	@ (800110c <HAL_I2C_MspInit+0xd0>)
 80010d6:	f000 ff63 	bl	8001fa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	4b09      	ldr	r3, [pc, #36]	@ (8001104 <HAL_I2C_MspInit+0xc8>)
 80010e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e2:	4a08      	ldr	r2, [pc, #32]	@ (8001104 <HAL_I2C_MspInit+0xc8>)
 80010e4:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80010e8:	6413      	str	r3, [r2, #64]	@ 0x40
 80010ea:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <HAL_I2C_MspInit+0xc8>)
 80010ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80010f2:	60bb      	str	r3, [r7, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 80010f6:	bf00      	nop
 80010f8:	3728      	adds	r7, #40	@ 0x28
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	40005c00 	.word	0x40005c00
 8001104:	40023800 	.word	0x40023800
 8001108:	40020800 	.word	0x40020800
 800110c:	40020000 	.word	0x40020000

08001110 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b09a      	sub	sp, #104	@ 0x68
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800111c:	2200      	movs	r2, #0
 800111e:	601a      	str	r2, [r3, #0]
 8001120:	605a      	str	r2, [r3, #4]
 8001122:	609a      	str	r2, [r3, #8]
 8001124:	60da      	str	r2, [r3, #12]
 8001126:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001128:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800112c:	2230      	movs	r2, #48	@ 0x30
 800112e:	2100      	movs	r1, #0
 8001130:	4618      	mov	r0, r3
 8001132:	f00a fc3f 	bl	800b9b4 <memset>
  if(hltdc->Instance==LTDC)
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4a85      	ldr	r2, [pc, #532]	@ (8001350 <HAL_LTDC_MspInit+0x240>)
 800113c:	4293      	cmp	r3, r2
 800113e:	f040 8102 	bne.w	8001346 <HAL_LTDC_MspInit+0x236>

    /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001142:	2308      	movs	r3, #8
 8001144:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8001146:	2332      	movs	r3, #50	@ 0x32
 8001148:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 800114a:	2302      	movs	r3, #2
 800114c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 800114e:	2300      	movs	r3, #0
 8001150:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001152:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001156:	4618      	mov	r0, r3
 8001158:	f004 fc0e 	bl	8005978 <HAL_RCCEx_PeriphCLKConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8001162:	f7ff fef3 	bl	8000f4c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001166:	2300      	movs	r3, #0
 8001168:	623b      	str	r3, [r7, #32]
 800116a:	4b7a      	ldr	r3, [pc, #488]	@ (8001354 <HAL_LTDC_MspInit+0x244>)
 800116c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116e:	4a79      	ldr	r2, [pc, #484]	@ (8001354 <HAL_LTDC_MspInit+0x244>)
 8001170:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001174:	6453      	str	r3, [r2, #68]	@ 0x44
 8001176:	4b77      	ldr	r3, [pc, #476]	@ (8001354 <HAL_LTDC_MspInit+0x244>)
 8001178:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800117e:	623b      	str	r3, [r7, #32]
 8001180:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
 8001186:	4b73      	ldr	r3, [pc, #460]	@ (8001354 <HAL_LTDC_MspInit+0x244>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800118a:	4a72      	ldr	r2, [pc, #456]	@ (8001354 <HAL_LTDC_MspInit+0x244>)
 800118c:	f043 0320 	orr.w	r3, r3, #32
 8001190:	6313      	str	r3, [r2, #48]	@ 0x30
 8001192:	4b70      	ldr	r3, [pc, #448]	@ (8001354 <HAL_LTDC_MspInit+0x244>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	f003 0320 	and.w	r3, r3, #32
 800119a:	61fb      	str	r3, [r7, #28]
 800119c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800119e:	2300      	movs	r3, #0
 80011a0:	61bb      	str	r3, [r7, #24]
 80011a2:	4b6c      	ldr	r3, [pc, #432]	@ (8001354 <HAL_LTDC_MspInit+0x244>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a6:	4a6b      	ldr	r2, [pc, #428]	@ (8001354 <HAL_LTDC_MspInit+0x244>)
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ae:	4b69      	ldr	r3, [pc, #420]	@ (8001354 <HAL_LTDC_MspInit+0x244>)
 80011b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011b2:	f003 0301 	and.w	r3, r3, #1
 80011b6:	61bb      	str	r3, [r7, #24]
 80011b8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	617b      	str	r3, [r7, #20]
 80011be:	4b65      	ldr	r3, [pc, #404]	@ (8001354 <HAL_LTDC_MspInit+0x244>)
 80011c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011c2:	4a64      	ldr	r2, [pc, #400]	@ (8001354 <HAL_LTDC_MspInit+0x244>)
 80011c4:	f043 0302 	orr.w	r3, r3, #2
 80011c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80011ca:	4b62      	ldr	r3, [pc, #392]	@ (8001354 <HAL_LTDC_MspInit+0x244>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	f003 0302 	and.w	r3, r3, #2
 80011d2:	617b      	str	r3, [r7, #20]
 80011d4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	4b5e      	ldr	r3, [pc, #376]	@ (8001354 <HAL_LTDC_MspInit+0x244>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011de:	4a5d      	ldr	r2, [pc, #372]	@ (8001354 <HAL_LTDC_MspInit+0x244>)
 80011e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011e6:	4b5b      	ldr	r3, [pc, #364]	@ (8001354 <HAL_LTDC_MspInit+0x244>)
 80011e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	4b57      	ldr	r3, [pc, #348]	@ (8001354 <HAL_LTDC_MspInit+0x244>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	4a56      	ldr	r2, [pc, #344]	@ (8001354 <HAL_LTDC_MspInit+0x244>)
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	6313      	str	r3, [r2, #48]	@ 0x30
 8001202:	4b54      	ldr	r3, [pc, #336]	@ (8001354 <HAL_LTDC_MspInit+0x244>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	f003 0304 	and.w	r3, r3, #4
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60bb      	str	r3, [r7, #8]
 8001212:	4b50      	ldr	r3, [pc, #320]	@ (8001354 <HAL_LTDC_MspInit+0x244>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001216:	4a4f      	ldr	r2, [pc, #316]	@ (8001354 <HAL_LTDC_MspInit+0x244>)
 8001218:	f043 0308 	orr.w	r3, r3, #8
 800121c:	6313      	str	r3, [r2, #48]	@ 0x30
 800121e:	4b4d      	ldr	r3, [pc, #308]	@ (8001354 <HAL_LTDC_MspInit+0x244>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001222:	f003 0308 	and.w	r3, r3, #8
 8001226:	60bb      	str	r3, [r7, #8]
 8001228:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800122a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800122e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001230:	2302      	movs	r3, #2
 8001232:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001234:	2300      	movs	r3, #0
 8001236:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001238:	2300      	movs	r3, #0
 800123a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800123c:	230e      	movs	r3, #14
 800123e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001240:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001244:	4619      	mov	r1, r3
 8001246:	4844      	ldr	r0, [pc, #272]	@ (8001358 <HAL_LTDC_MspInit+0x248>)
 8001248:	f000 feaa 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800124c:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001250:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800125e:	230e      	movs	r3, #14
 8001260:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001262:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001266:	4619      	mov	r1, r3
 8001268:	483c      	ldr	r0, [pc, #240]	@ (800135c <HAL_LTDC_MspInit+0x24c>)
 800126a:	f000 fe99 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800126e:	2303      	movs	r3, #3
 8001270:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001272:	2302      	movs	r3, #2
 8001274:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001276:	2300      	movs	r3, #0
 8001278:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127a:	2300      	movs	r3, #0
 800127c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800127e:	2309      	movs	r3, #9
 8001280:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001282:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001286:	4619      	mov	r1, r3
 8001288:	4835      	ldr	r0, [pc, #212]	@ (8001360 <HAL_LTDC_MspInit+0x250>)
 800128a:	f000 fe89 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800128e:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001292:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001294:	2302      	movs	r3, #2
 8001296:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012a0:	230e      	movs	r3, #14
 80012a2:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012a8:	4619      	mov	r1, r3
 80012aa:	482d      	ldr	r0, [pc, #180]	@ (8001360 <HAL_LTDC_MspInit+0x250>)
 80012ac:	f000 fe78 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80012b0:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80012b4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b6:	2302      	movs	r3, #2
 80012b8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ba:	2300      	movs	r3, #0
 80012bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012be:	2300      	movs	r3, #0
 80012c0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012c2:	230e      	movs	r3, #14
 80012c4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012c6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012ca:	4619      	mov	r1, r3
 80012cc:	4825      	ldr	r0, [pc, #148]	@ (8001364 <HAL_LTDC_MspInit+0x254>)
 80012ce:	f000 fe67 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80012d2:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80012d6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d8:	2302      	movs	r3, #2
 80012da:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012e0:	2300      	movs	r3, #0
 80012e2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80012e4:	230e      	movs	r3, #14
 80012e6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80012ec:	4619      	mov	r1, r3
 80012ee:	481e      	ldr	r0, [pc, #120]	@ (8001368 <HAL_LTDC_MspInit+0x258>)
 80012f0:	f000 fe56 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80012f4:	2348      	movs	r3, #72	@ 0x48
 80012f6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001304:	230e      	movs	r3, #14
 8001306:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001308:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800130c:	4619      	mov	r1, r3
 800130e:	4817      	ldr	r0, [pc, #92]	@ (800136c <HAL_LTDC_MspInit+0x25c>)
 8001310:	f000 fe46 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001314:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001318:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800131a:	2302      	movs	r3, #2
 800131c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800131e:	2300      	movs	r3, #0
 8001320:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001322:	2300      	movs	r3, #0
 8001324:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001326:	2309      	movs	r3, #9
 8001328:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800132a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800132e:	4619      	mov	r1, r3
 8001330:	480c      	ldr	r0, [pc, #48]	@ (8001364 <HAL_LTDC_MspInit+0x254>)
 8001332:	f000 fe35 	bl	8001fa0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8001336:	2200      	movs	r2, #0
 8001338:	2105      	movs	r1, #5
 800133a:	2058      	movs	r0, #88	@ 0x58
 800133c:	f000 fbdc 	bl	8001af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001340:	2058      	movs	r0, #88	@ 0x58
 8001342:	f000 fbf5 	bl	8001b30 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 8001346:	bf00      	nop
 8001348:	3768      	adds	r7, #104	@ 0x68
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}
 800134e:	bf00      	nop
 8001350:	40016800 	.word	0x40016800
 8001354:	40023800 	.word	0x40023800
 8001358:	40021400 	.word	0x40021400
 800135c:	40020000 	.word	0x40020000
 8001360:	40020400 	.word	0x40020400
 8001364:	40021800 	.word	0x40021800
 8001368:	40020800 	.word	0x40020800
 800136c:	40020c00 	.word	0x40020c00

08001370 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b08a      	sub	sp, #40	@ 0x28
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	f107 0314 	add.w	r3, r7, #20
 800137c:	2200      	movs	r2, #0
 800137e:	601a      	str	r2, [r3, #0]
 8001380:	605a      	str	r2, [r3, #4]
 8001382:	609a      	str	r2, [r3, #8]
 8001384:	60da      	str	r2, [r3, #12]
 8001386:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a1d      	ldr	r2, [pc, #116]	@ (8001404 <HAL_SPI_MspInit+0x94>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d134      	bne.n	80013fc <HAL_SPI_MspInit+0x8c>
  {
    /* USER CODE BEGIN SPI5_MspInit 0 */

    /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	4b1c      	ldr	r3, [pc, #112]	@ (8001408 <HAL_SPI_MspInit+0x98>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800139a:	4a1b      	ldr	r2, [pc, #108]	@ (8001408 <HAL_SPI_MspInit+0x98>)
 800139c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80013a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013a2:	4b19      	ldr	r3, [pc, #100]	@ (8001408 <HAL_SPI_MspInit+0x98>)
 80013a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80013ae:	2300      	movs	r3, #0
 80013b0:	60fb      	str	r3, [r7, #12]
 80013b2:	4b15      	ldr	r3, [pc, #84]	@ (8001408 <HAL_SPI_MspInit+0x98>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b6:	4a14      	ldr	r2, [pc, #80]	@ (8001408 <HAL_SPI_MspInit+0x98>)
 80013b8:	f043 0320 	orr.w	r3, r3, #32
 80013bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013be:	4b12      	ldr	r3, [pc, #72]	@ (8001408 <HAL_SPI_MspInit+0x98>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	f003 0320 	and.w	r3, r3, #32
 80013c6:	60fb      	str	r3, [r7, #12]
 80013c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80013ca:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80013ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013d0:	2302      	movs	r3, #2
 80013d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d8:	2300      	movs	r3, #0
 80013da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80013dc:	2305      	movs	r3, #5
 80013de:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80013e0:	f107 0314 	add.w	r3, r7, #20
 80013e4:	4619      	mov	r1, r3
 80013e6:	4809      	ldr	r0, [pc, #36]	@ (800140c <HAL_SPI_MspInit+0x9c>)
 80013e8:	f000 fdda 	bl	8001fa0 <HAL_GPIO_Init>

    /* SPI5 interrupt Init */
    HAL_NVIC_SetPriority(SPI5_IRQn, 0, 0);
 80013ec:	2200      	movs	r2, #0
 80013ee:	2100      	movs	r1, #0
 80013f0:	2055      	movs	r0, #85	@ 0x55
 80013f2:	f000 fb81 	bl	8001af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI5_IRQn);
 80013f6:	2055      	movs	r0, #85	@ 0x55
 80013f8:	f000 fb9a 	bl	8001b30 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI5_MspInit 1 */

  }

}
 80013fc:	bf00      	nop
 80013fe:	3728      	adds	r7, #40	@ 0x28
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40015000 	.word	0x40015000
 8001408:	40023800 	.word	0x40023800
 800140c:	40021400 	.word	0x40021400

08001410 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001410:	b480      	push	{r7}
 8001412:	b085      	sub	sp, #20
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a0b      	ldr	r2, [pc, #44]	@ (800144c <HAL_TIM_Base_MspInit+0x3c>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d10d      	bne.n	800143e <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001422:	2300      	movs	r3, #0
 8001424:	60fb      	str	r3, [r7, #12]
 8001426:	4b0a      	ldr	r3, [pc, #40]	@ (8001450 <HAL_TIM_Base_MspInit+0x40>)
 8001428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800142a:	4a09      	ldr	r2, [pc, #36]	@ (8001450 <HAL_TIM_Base_MspInit+0x40>)
 800142c:	f043 0301 	orr.w	r3, r3, #1
 8001430:	6453      	str	r3, [r2, #68]	@ 0x44
 8001432:	4b07      	ldr	r3, [pc, #28]	@ (8001450 <HAL_TIM_Base_MspInit+0x40>)
 8001434:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	60fb      	str	r3, [r7, #12]
 800143c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 800143e:	bf00      	nop
 8001440:	3714      	adds	r7, #20
 8001442:	46bd      	mov	sp, r7
 8001444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001448:	4770      	bx	lr
 800144a:	bf00      	nop
 800144c:	40010000 	.word	0x40010000
 8001450:	40023800 	.word	0x40023800

08001454 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	@ 0x28
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a19      	ldr	r2, [pc, #100]	@ (80014d8 <HAL_UART_MspInit+0x84>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d12c      	bne.n	80014d0 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	4b18      	ldr	r3, [pc, #96]	@ (80014dc <HAL_UART_MspInit+0x88>)
 800147c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800147e:	4a17      	ldr	r2, [pc, #92]	@ (80014dc <HAL_UART_MspInit+0x88>)
 8001480:	f043 0310 	orr.w	r3, r3, #16
 8001484:	6453      	str	r3, [r2, #68]	@ 0x44
 8001486:	4b15      	ldr	r3, [pc, #84]	@ (80014dc <HAL_UART_MspInit+0x88>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800148a:	f003 0310 	and.w	r3, r3, #16
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	4b11      	ldr	r3, [pc, #68]	@ (80014dc <HAL_UART_MspInit+0x88>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800149a:	4a10      	ldr	r2, [pc, #64]	@ (80014dc <HAL_UART_MspInit+0x88>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80014a2:	4b0e      	ldr	r3, [pc, #56]	@ (80014dc <HAL_UART_MspInit+0x88>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80014ae:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80014b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014bc:	2303      	movs	r3, #3
 80014be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80014c0:	2307      	movs	r3, #7
 80014c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4619      	mov	r1, r3
 80014ca:	4805      	ldr	r0, [pc, #20]	@ (80014e0 <HAL_UART_MspInit+0x8c>)
 80014cc:	f000 fd68 	bl	8001fa0 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80014d0:	bf00      	nop
 80014d2:	3728      	adds	r7, #40	@ 0x28
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}
 80014d8:	40011000 	.word	0x40011000
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40020000 	.word	0x40020000

080014e4 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b086      	sub	sp, #24
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80014ea:	1d3b      	adds	r3, r7, #4
 80014ec:	2200      	movs	r2, #0
 80014ee:	601a      	str	r2, [r3, #0]
 80014f0:	605a      	str	r2, [r3, #4]
 80014f2:	609a      	str	r2, [r3, #8]
 80014f4:	60da      	str	r2, [r3, #12]
 80014f6:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80014f8:	4b3b      	ldr	r3, [pc, #236]	@ (80015e8 <HAL_FMC_MspInit+0x104>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d16f      	bne.n	80015e0 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001500:	4b39      	ldr	r3, [pc, #228]	@ (80015e8 <HAL_FMC_MspInit+0x104>)
 8001502:	2201      	movs	r2, #1
 8001504:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	603b      	str	r3, [r7, #0]
 800150a:	4b38      	ldr	r3, [pc, #224]	@ (80015ec <HAL_FMC_MspInit+0x108>)
 800150c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800150e:	4a37      	ldr	r2, [pc, #220]	@ (80015ec <HAL_FMC_MspInit+0x108>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6393      	str	r3, [r2, #56]	@ 0x38
 8001516:	4b35      	ldr	r3, [pc, #212]	@ (80015ec <HAL_FMC_MspInit+0x108>)
 8001518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001522:	f64c 033f 	movw	r3, #51263	@ 0xc83f
 8001526:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A8_Pin
                          |A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001528:	2302      	movs	r3, #2
 800152a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001530:	2303      	movs	r3, #3
 8001532:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001534:	230c      	movs	r3, #12
 8001536:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001538:	1d3b      	adds	r3, r7, #4
 800153a:	4619      	mov	r1, r3
 800153c:	482c      	ldr	r0, [pc, #176]	@ (80015f0 <HAL_FMC_MspInit+0x10c>)
 800153e:	f000 fd2f 	bl	8001fa0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001542:	2301      	movs	r3, #1
 8001544:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	2302      	movs	r3, #2
 8001548:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800154a:	2300      	movs	r3, #0
 800154c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800154e:	2303      	movs	r3, #3
 8001550:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001552:	230c      	movs	r3, #12
 8001554:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001556:	1d3b      	adds	r3, r7, #4
 8001558:	4619      	mov	r1, r3
 800155a:	4826      	ldr	r0, [pc, #152]	@ (80015f4 <HAL_FMC_MspInit+0x110>)
 800155c:	f000 fd20 	bl	8001fa0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001560:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001564:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	2302      	movs	r3, #2
 8001568:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800156e:	2303      	movs	r3, #3
 8001570:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001572:	230c      	movs	r3, #12
 8001574:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001576:	1d3b      	adds	r3, r7, #4
 8001578:	4619      	mov	r1, r3
 800157a:	481f      	ldr	r0, [pc, #124]	@ (80015f8 <HAL_FMC_MspInit+0x114>)
 800157c:	f000 fd10 	bl	8001fa0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001580:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001584:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001586:	2302      	movs	r3, #2
 8001588:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800158e:	2303      	movs	r3, #3
 8001590:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001592:	230c      	movs	r3, #12
 8001594:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001596:	1d3b      	adds	r3, r7, #4
 8001598:	4619      	mov	r1, r3
 800159a:	4818      	ldr	r0, [pc, #96]	@ (80015fc <HAL_FMC_MspInit+0x118>)
 800159c:	f000 fd00 	bl	8001fa0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80015a0:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80015a4:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a6:	2302      	movs	r3, #2
 80015a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ae:	2303      	movs	r3, #3
 80015b0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015b2:	230c      	movs	r3, #12
 80015b4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015b6:	1d3b      	adds	r3, r7, #4
 80015b8:	4619      	mov	r1, r3
 80015ba:	4811      	ldr	r0, [pc, #68]	@ (8001600 <HAL_FMC_MspInit+0x11c>)
 80015bc:	f000 fcf0 	bl	8001fa0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80015c0:	2360      	movs	r3, #96	@ 0x60
 80015c2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c4:	2302      	movs	r3, #2
 80015c6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c8:	2300      	movs	r3, #0
 80015ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015cc:	2303      	movs	r3, #3
 80015ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80015d0:	230c      	movs	r3, #12
 80015d2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d4:	1d3b      	adds	r3, r7, #4
 80015d6:	4619      	mov	r1, r3
 80015d8:	480a      	ldr	r0, [pc, #40]	@ (8001604 <HAL_FMC_MspInit+0x120>)
 80015da:	f000 fce1 	bl	8001fa0 <HAL_GPIO_Init>
 80015de:	e000      	b.n	80015e2 <HAL_FMC_MspInit+0xfe>
    return;
 80015e0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20000300 	.word	0x20000300
 80015ec:	40023800 	.word	0x40023800
 80015f0:	40021400 	.word	0x40021400
 80015f4:	40020800 	.word	0x40020800
 80015f8:	40021800 	.word	0x40021800
 80015fc:	40021000 	.word	0x40021000
 8001600:	40020c00 	.word	0x40020c00
 8001604:	40020400 	.word	0x40020400

08001608 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001610:	f7ff ff68 	bl	80014e4 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001614:	bf00      	nop
 8001616:	3708      	adds	r7, #8
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <HAL_InitTick>:
 800161c:	b580      	push	{r7, lr}
 800161e:	b08e      	sub	sp, #56	@ 0x38
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	2300      	movs	r3, #0
 8001626:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001628:	2300      	movs	r3, #0
 800162a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800162c:	2300      	movs	r3, #0
 800162e:	60fb      	str	r3, [r7, #12]
 8001630:	4b33      	ldr	r3, [pc, #204]	@ (8001700 <HAL_InitTick+0xe4>)
 8001632:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001634:	4a32      	ldr	r2, [pc, #200]	@ (8001700 <HAL_InitTick+0xe4>)
 8001636:	f043 0310 	orr.w	r3, r3, #16
 800163a:	6413      	str	r3, [r2, #64]	@ 0x40
 800163c:	4b30      	ldr	r3, [pc, #192]	@ (8001700 <HAL_InitTick+0xe4>)
 800163e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001640:	f003 0310 	and.w	r3, r3, #16
 8001644:	60fb      	str	r3, [r7, #12]
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f107 0210 	add.w	r2, r7, #16
 800164c:	f107 0314 	add.w	r3, r7, #20
 8001650:	4611      	mov	r1, r2
 8001652:	4618      	mov	r0, r3
 8001654:	f004 f95e 	bl	8005914 <HAL_RCC_GetClockConfig>
 8001658:	6a3b      	ldr	r3, [r7, #32]
 800165a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800165c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800165e:	2b00      	cmp	r3, #0
 8001660:	d103      	bne.n	800166a <HAL_InitTick+0x4e>
 8001662:	f004 f92f 	bl	80058c4 <HAL_RCC_GetPCLK1Freq>
 8001666:	6378      	str	r0, [r7, #52]	@ 0x34
 8001668:	e004      	b.n	8001674 <HAL_InitTick+0x58>
 800166a:	f004 f92b 	bl	80058c4 <HAL_RCC_GetPCLK1Freq>
 800166e:	4603      	mov	r3, r0
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	637b      	str	r3, [r7, #52]	@ 0x34
 8001674:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001676:	4a23      	ldr	r2, [pc, #140]	@ (8001704 <HAL_InitTick+0xe8>)
 8001678:	fba2 2303 	umull	r2, r3, r2, r3
 800167c:	0c9b      	lsrs	r3, r3, #18
 800167e:	3b01      	subs	r3, #1
 8001680:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001682:	4b21      	ldr	r3, [pc, #132]	@ (8001708 <HAL_InitTick+0xec>)
 8001684:	4a21      	ldr	r2, [pc, #132]	@ (800170c <HAL_InitTick+0xf0>)
 8001686:	601a      	str	r2, [r3, #0]
 8001688:	4b1f      	ldr	r3, [pc, #124]	@ (8001708 <HAL_InitTick+0xec>)
 800168a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800168e:	60da      	str	r2, [r3, #12]
 8001690:	4a1d      	ldr	r2, [pc, #116]	@ (8001708 <HAL_InitTick+0xec>)
 8001692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001694:	6053      	str	r3, [r2, #4]
 8001696:	4b1c      	ldr	r3, [pc, #112]	@ (8001708 <HAL_InitTick+0xec>)
 8001698:	2200      	movs	r2, #0
 800169a:	611a      	str	r2, [r3, #16]
 800169c:	4b1a      	ldr	r3, [pc, #104]	@ (8001708 <HAL_InitTick+0xec>)
 800169e:	2200      	movs	r2, #0
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	4b19      	ldr	r3, [pc, #100]	@ (8001708 <HAL_InitTick+0xec>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	619a      	str	r2, [r3, #24]
 80016a8:	4817      	ldr	r0, [pc, #92]	@ (8001708 <HAL_InitTick+0xec>)
 80016aa:	f005 fa49 	bl	8006b40 <HAL_TIM_Base_Init>
 80016ae:	4603      	mov	r3, r0
 80016b0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80016b4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d11b      	bne.n	80016f4 <HAL_InitTick+0xd8>
 80016bc:	4812      	ldr	r0, [pc, #72]	@ (8001708 <HAL_InitTick+0xec>)
 80016be:	f005 fa8f 	bl	8006be0 <HAL_TIM_Base_Start_IT>
 80016c2:	4603      	mov	r3, r0
 80016c4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80016c8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d111      	bne.n	80016f4 <HAL_InitTick+0xd8>
 80016d0:	2036      	movs	r0, #54	@ 0x36
 80016d2:	f000 fa2d 	bl	8001b30 <HAL_NVIC_EnableIRQ>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2b0f      	cmp	r3, #15
 80016da:	d808      	bhi.n	80016ee <HAL_InitTick+0xd2>
 80016dc:	2200      	movs	r2, #0
 80016de:	6879      	ldr	r1, [r7, #4]
 80016e0:	2036      	movs	r0, #54	@ 0x36
 80016e2:	f000 fa09 	bl	8001af8 <HAL_NVIC_SetPriority>
 80016e6:	4a0a      	ldr	r2, [pc, #40]	@ (8001710 <HAL_InitTick+0xf4>)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6013      	str	r3, [r2, #0]
 80016ec:	e002      	b.n	80016f4 <HAL_InitTick+0xd8>
 80016ee:	2301      	movs	r3, #1
 80016f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80016f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80016f8:	4618      	mov	r0, r3
 80016fa:	3738      	adds	r7, #56	@ 0x38
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40023800 	.word	0x40023800
 8001704:	431bde83 	.word	0x431bde83
 8001708:	20000304 	.word	0x20000304
 800170c:	40001000 	.word	0x40001000
 8001710:	2000000c 	.word	0x2000000c

08001714 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001714:	b480      	push	{r7}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001718:	bf00      	nop
 800171a:	e7fd      	b.n	8001718 <NMI_Handler+0x4>

0800171c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001720:	bf00      	nop
 8001722:	e7fd      	b.n	8001720 <HardFault_Handler+0x4>

08001724 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001724:	b480      	push	{r7}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001728:	bf00      	nop
 800172a:	e7fd      	b.n	8001728 <MemManage_Handler+0x4>

0800172c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001730:	bf00      	nop
 8001732:	e7fd      	b.n	8001730 <BusFault_Handler+0x4>

08001734 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001734:	b480      	push	{r7}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001738:	bf00      	nop
 800173a:	e7fd      	b.n	8001738 <UsageFault_Handler+0x4>

0800173c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800173c:	b480      	push	{r7}
 800173e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001740:	bf00      	nop
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr

0800174a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800174a:	b480      	push	{r7}
 800174c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	46bd      	mov	sp, r7
 8001752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001756:	4770      	bx	lr

08001758 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001758:	b480      	push	{r7}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr

08001766 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001766:	b480      	push	{r7}
 8001768:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800176a:	bf00      	nop
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr

08001774 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001778:	4802      	ldr	r0, [pc, #8]	@ (8001784 <TIM6_DAC_IRQHandler+0x10>)
 800177a:	f005 faa1 	bl	8006cc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000304 	.word	0x20000304

08001788 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 800178c:	4802      	ldr	r0, [pc, #8]	@ (8001798 <OTG_HS_IRQHandler+0x10>)
 800178e:	f001 f8ad 	bl	80028ec <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000730 	.word	0x20000730

0800179c <SPI5_IRQHandler>:

/**
  * @brief This function handles SPI5 global interrupt.
  */
void SPI5_IRQHandler(void)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI5_IRQn 0 */

  /* USER CODE END SPI5_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi5);
 80017a0:	4802      	ldr	r0, [pc, #8]	@ (80017ac <SPI5_IRQHandler+0x10>)
 80017a2:	f004 ff6d 	bl	8006680 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI5_IRQn 1 */

  /* USER CODE END SPI5_IRQn 1 */
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	200001e4 	.word	0x200001e4

080017b0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80017b4:	4802      	ldr	r0, [pc, #8]	@ (80017c0 <LTDC_IRQHandler+0x10>)
 80017b6:	f003 f97d 	bl	8004ab4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	2000013c 	.word	0x2000013c

080017c4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80017c8:	4802      	ldr	r0, [pc, #8]	@ (80017d4 <DMA2D_IRQHandler+0x10>)
 80017ca:	f000 fa46 	bl	8001c5a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80017ce:	bf00      	nop
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	200000a8 	.word	0x200000a8

080017d8 <_sbrk>:
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	4a14      	ldr	r2, [pc, #80]	@ (8001834 <_sbrk+0x5c>)
 80017e2:	4b15      	ldr	r3, [pc, #84]	@ (8001838 <_sbrk+0x60>)
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	617b      	str	r3, [r7, #20]
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	613b      	str	r3, [r7, #16]
 80017ec:	4b13      	ldr	r3, [pc, #76]	@ (800183c <_sbrk+0x64>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d102      	bne.n	80017fa <_sbrk+0x22>
 80017f4:	4b11      	ldr	r3, [pc, #68]	@ (800183c <_sbrk+0x64>)
 80017f6:	4a12      	ldr	r2, [pc, #72]	@ (8001840 <_sbrk+0x68>)
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	4b10      	ldr	r3, [pc, #64]	@ (800183c <_sbrk+0x64>)
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4413      	add	r3, r2
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	429a      	cmp	r2, r3
 8001806:	d207      	bcs.n	8001818 <_sbrk+0x40>
 8001808:	f00a f8ec 	bl	800b9e4 <__errno>
 800180c:	4603      	mov	r3, r0
 800180e:	220c      	movs	r2, #12
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	f04f 33ff 	mov.w	r3, #4294967295
 8001816:	e009      	b.n	800182c <_sbrk+0x54>
 8001818:	4b08      	ldr	r3, [pc, #32]	@ (800183c <_sbrk+0x64>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	60fb      	str	r3, [r7, #12]
 800181e:	4b07      	ldr	r3, [pc, #28]	@ (800183c <_sbrk+0x64>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4413      	add	r3, r2
 8001826:	4a05      	ldr	r2, [pc, #20]	@ (800183c <_sbrk+0x64>)
 8001828:	6013      	str	r3, [r2, #0]
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	4618      	mov	r0, r3
 800182e:	3718      	adds	r7, #24
 8001830:	46bd      	mov	sp, r7
 8001832:	bd80      	pop	{r7, pc}
 8001834:	20030000 	.word	0x20030000
 8001838:	00000400 	.word	0x00000400
 800183c:	2000034c 	.word	0x2000034c
 8001840:	20000c58 	.word	0x20000c58

08001844 <SystemInit>:
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
 8001848:	4b06      	ldr	r3, [pc, #24]	@ (8001864 <SystemInit+0x20>)
 800184a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800184e:	4a05      	ldr	r2, [pc, #20]	@ (8001864 <SystemInit+0x20>)
 8001850:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001854:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 8001858:	bf00      	nop
 800185a:	46bd      	mov	sp, r7
 800185c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001860:	4770      	bx	lr
 8001862:	bf00      	nop
 8001864:	e000ed00 	.word	0xe000ed00

08001868 <Reset_Handler>:
 8001868:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80018a0 <LoopFillZerobss+0xe>
 800186c:	f7ff ffea 	bl	8001844 <SystemInit>
 8001870:	480c      	ldr	r0, [pc, #48]	@ (80018a4 <LoopFillZerobss+0x12>)
 8001872:	490d      	ldr	r1, [pc, #52]	@ (80018a8 <LoopFillZerobss+0x16>)
 8001874:	4a0d      	ldr	r2, [pc, #52]	@ (80018ac <LoopFillZerobss+0x1a>)
 8001876:	2300      	movs	r3, #0
 8001878:	e002      	b.n	8001880 <LoopCopyDataInit>

0800187a <CopyDataInit>:
 800187a:	58d4      	ldr	r4, [r2, r3]
 800187c:	50c4      	str	r4, [r0, r3]
 800187e:	3304      	adds	r3, #4

08001880 <LoopCopyDataInit>:
 8001880:	18c4      	adds	r4, r0, r3
 8001882:	428c      	cmp	r4, r1
 8001884:	d3f9      	bcc.n	800187a <CopyDataInit>
 8001886:	4a0a      	ldr	r2, [pc, #40]	@ (80018b0 <LoopFillZerobss+0x1e>)
 8001888:	4c0a      	ldr	r4, [pc, #40]	@ (80018b4 <LoopFillZerobss+0x22>)
 800188a:	2300      	movs	r3, #0
 800188c:	e001      	b.n	8001892 <LoopFillZerobss>

0800188e <FillZerobss>:
 800188e:	6013      	str	r3, [r2, #0]
 8001890:	3204      	adds	r2, #4

08001892 <LoopFillZerobss>:
 8001892:	42a2      	cmp	r2, r4
 8001894:	d3fb      	bcc.n	800188e <FillZerobss>
 8001896:	f00a f8ab 	bl	800b9f0 <__libc_init_array>
 800189a:	f7fe ff8b 	bl	80007b4 <main>
 800189e:	4770      	bx	lr
 80018a0:	20030000 	.word	0x20030000
 80018a4:	20000000 	.word	0x20000000
 80018a8:	20000084 	.word	0x20000084
 80018ac:	0800c20c 	.word	0x0800c20c
 80018b0:	20000084 	.word	0x20000084
 80018b4:	20000c58 	.word	0x20000c58

080018b8 <ADC_IRQHandler>:
 80018b8:	e7fe      	b.n	80018b8 <ADC_IRQHandler>
	...

080018bc <HAL_Init>:
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
 80018c0:	4b0e      	ldr	r3, [pc, #56]	@ (80018fc <HAL_Init+0x40>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a0d      	ldr	r2, [pc, #52]	@ (80018fc <HAL_Init+0x40>)
 80018c6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80018ca:	6013      	str	r3, [r2, #0]
 80018cc:	4b0b      	ldr	r3, [pc, #44]	@ (80018fc <HAL_Init+0x40>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a0a      	ldr	r2, [pc, #40]	@ (80018fc <HAL_Init+0x40>)
 80018d2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80018d6:	6013      	str	r3, [r2, #0]
 80018d8:	4b08      	ldr	r3, [pc, #32]	@ (80018fc <HAL_Init+0x40>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a07      	ldr	r2, [pc, #28]	@ (80018fc <HAL_Init+0x40>)
 80018de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	2003      	movs	r0, #3
 80018e6:	f000 f8fc 	bl	8001ae2 <HAL_NVIC_SetPriorityGrouping>
 80018ea:	200f      	movs	r0, #15
 80018ec:	f7ff fe96 	bl	800161c <HAL_InitTick>
 80018f0:	f7ff fb32 	bl	8000f58 <HAL_MspInit>
 80018f4:	2300      	movs	r3, #0
 80018f6:	4618      	mov	r0, r3
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40023c00 	.word	0x40023c00

08001900 <HAL_IncTick>:
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
 8001904:	4b06      	ldr	r3, [pc, #24]	@ (8001920 <HAL_IncTick+0x20>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	4b06      	ldr	r3, [pc, #24]	@ (8001924 <HAL_IncTick+0x24>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4413      	add	r3, r2
 8001910:	4a04      	ldr	r2, [pc, #16]	@ (8001924 <HAL_IncTick+0x24>)
 8001912:	6013      	str	r3, [r2, #0]
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191c:	4770      	bx	lr
 800191e:	bf00      	nop
 8001920:	20000010 	.word	0x20000010
 8001924:	20000350 	.word	0x20000350

08001928 <HAL_GetTick>:
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
 800192c:	4b03      	ldr	r3, [pc, #12]	@ (800193c <HAL_GetTick+0x14>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
 800193a:	bf00      	nop
 800193c:	20000350 	.word	0x20000350

08001940 <HAL_Delay>:
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	f7ff ffee 	bl	8001928 <HAL_GetTick>
 800194c:	60b8      	str	r0, [r7, #8]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001958:	d005      	beq.n	8001966 <HAL_Delay+0x26>
 800195a:	4b0a      	ldr	r3, [pc, #40]	@ (8001984 <HAL_Delay+0x44>)
 800195c:	781b      	ldrb	r3, [r3, #0]
 800195e:	461a      	mov	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4413      	add	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]
 8001966:	bf00      	nop
 8001968:	f7ff ffde 	bl	8001928 <HAL_GetTick>
 800196c:	4602      	mov	r2, r0
 800196e:	68bb      	ldr	r3, [r7, #8]
 8001970:	1ad3      	subs	r3, r2, r3
 8001972:	68fa      	ldr	r2, [r7, #12]
 8001974:	429a      	cmp	r2, r3
 8001976:	d8f7      	bhi.n	8001968 <HAL_Delay+0x28>
 8001978:	bf00      	nop
 800197a:	bf00      	nop
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000010 	.word	0x20000010

08001988 <__NVIC_SetPriorityGrouping>:
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	f003 0307 	and.w	r3, r3, #7
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	4b0c      	ldr	r3, [pc, #48]	@ (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 800199a:	68db      	ldr	r3, [r3, #12]
 800199c:	60bb      	str	r3, [r7, #8]
 800199e:	68ba      	ldr	r2, [r7, #8]
 80019a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80019a4:	4013      	ands	r3, r2
 80019a6:	60bb      	str	r3, [r7, #8]
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	021a      	lsls	r2, r3, #8
 80019ac:	68bb      	ldr	r3, [r7, #8]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80019b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80019b8:	60bb      	str	r3, [r7, #8]
 80019ba:	4a04      	ldr	r2, [pc, #16]	@ (80019cc <__NVIC_SetPriorityGrouping+0x44>)
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	60d3      	str	r3, [r2, #12]
 80019c0:	bf00      	nop
 80019c2:	3714      	adds	r7, #20
 80019c4:	46bd      	mov	sp, r7
 80019c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ca:	4770      	bx	lr
 80019cc:	e000ed00 	.word	0xe000ed00

080019d0 <__NVIC_GetPriorityGrouping>:
 80019d0:	b480      	push	{r7}
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4b04      	ldr	r3, [pc, #16]	@ (80019e8 <__NVIC_GetPriorityGrouping+0x18>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	0a1b      	lsrs	r3, r3, #8
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	4618      	mov	r0, r3
 80019e0:	46bd      	mov	sp, r7
 80019e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e6:	4770      	bx	lr
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <__NVIC_EnableIRQ>:
 80019ec:	b480      	push	{r7}
 80019ee:	b083      	sub	sp, #12
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	71fb      	strb	r3, [r7, #7]
 80019f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	db0b      	blt.n	8001a16 <__NVIC_EnableIRQ+0x2a>
 80019fe:	79fb      	ldrb	r3, [r7, #7]
 8001a00:	f003 021f 	and.w	r2, r3, #31
 8001a04:	4907      	ldr	r1, [pc, #28]	@ (8001a24 <__NVIC_EnableIRQ+0x38>)
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	095b      	lsrs	r3, r3, #5
 8001a0c:	2001      	movs	r0, #1
 8001a0e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8001a16:	bf00      	nop
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
 8001a22:	bf00      	nop
 8001a24:	e000e100 	.word	0xe000e100

08001a28 <__NVIC_SetPriority>:
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	6039      	str	r1, [r7, #0]
 8001a32:	71fb      	strb	r3, [r7, #7]
 8001a34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	db0a      	blt.n	8001a52 <__NVIC_SetPriority+0x2a>
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	b2da      	uxtb	r2, r3
 8001a40:	490c      	ldr	r1, [pc, #48]	@ (8001a74 <__NVIC_SetPriority+0x4c>)
 8001a42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a46:	0112      	lsls	r2, r2, #4
 8001a48:	b2d2      	uxtb	r2, r2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8001a50:	e00a      	b.n	8001a68 <__NVIC_SetPriority+0x40>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	b2da      	uxtb	r2, r3
 8001a56:	4908      	ldr	r1, [pc, #32]	@ (8001a78 <__NVIC_SetPriority+0x50>)
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	f003 030f 	and.w	r3, r3, #15
 8001a5e:	3b04      	subs	r3, #4
 8001a60:	0112      	lsls	r2, r2, #4
 8001a62:	b2d2      	uxtb	r2, r2
 8001a64:	440b      	add	r3, r1
 8001a66:	761a      	strb	r2, [r3, #24]
 8001a68:	bf00      	nop
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000e100 	.word	0xe000e100
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <NVIC_EncodePriority>:
 8001a7c:	b480      	push	{r7}
 8001a7e:	b089      	sub	sp, #36	@ 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 0307 	and.w	r3, r3, #7
 8001a8e:	61fb      	str	r3, [r7, #28]
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	f1c3 0307 	rsb	r3, r3, #7
 8001a96:	2b04      	cmp	r3, #4
 8001a98:	bf28      	it	cs
 8001a9a:	2304      	movcs	r3, #4
 8001a9c:	61bb      	str	r3, [r7, #24]
 8001a9e:	69fb      	ldr	r3, [r7, #28]
 8001aa0:	3304      	adds	r3, #4
 8001aa2:	2b06      	cmp	r3, #6
 8001aa4:	d902      	bls.n	8001aac <NVIC_EncodePriority+0x30>
 8001aa6:	69fb      	ldr	r3, [r7, #28]
 8001aa8:	3b03      	subs	r3, #3
 8001aaa:	e000      	b.n	8001aae <NVIC_EncodePriority+0x32>
 8001aac:	2300      	movs	r3, #0
 8001aae:	617b      	str	r3, [r7, #20]
 8001ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8001aba:	43da      	mvns	r2, r3
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	401a      	ands	r2, r3
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	409a      	lsls	r2, r3
 8001ac4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	43d9      	mvns	r1, r3
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	400b      	ands	r3, r1
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3724      	adds	r7, #36	@ 0x24
 8001ada:	46bd      	mov	sp, r7
 8001adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae0:	4770      	bx	lr

08001ae2 <HAL_NVIC_SetPriorityGrouping>:
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ff4c 	bl	8001988 <__NVIC_SetPriorityGrouping>
 8001af0:	bf00      	nop
 8001af2:	3708      	adds	r7, #8
 8001af4:	46bd      	mov	sp, r7
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <HAL_NVIC_SetPriority>:
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	4603      	mov	r3, r0
 8001b00:	60b9      	str	r1, [r7, #8]
 8001b02:	607a      	str	r2, [r7, #4]
 8001b04:	73fb      	strb	r3, [r7, #15]
 8001b06:	2300      	movs	r3, #0
 8001b08:	617b      	str	r3, [r7, #20]
 8001b0a:	f7ff ff61 	bl	80019d0 <__NVIC_GetPriorityGrouping>
 8001b0e:	6178      	str	r0, [r7, #20]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	68b9      	ldr	r1, [r7, #8]
 8001b14:	6978      	ldr	r0, [r7, #20]
 8001b16:	f7ff ffb1 	bl	8001a7c <NVIC_EncodePriority>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b20:	4611      	mov	r1, r2
 8001b22:	4618      	mov	r0, r3
 8001b24:	f7ff ff80 	bl	8001a28 <__NVIC_SetPriority>
 8001b28:	bf00      	nop
 8001b2a:	3718      	adds	r7, #24
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bd80      	pop	{r7, pc}

08001b30 <HAL_NVIC_EnableIRQ>:
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
 8001b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3e:	4618      	mov	r0, r3
 8001b40:	f7ff ff54 	bl	80019ec <__NVIC_EnableIRQ>
 8001b44:	bf00      	nop
 8001b46:	3708      	adds	r7, #8
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <HAL_CRC_Init>:
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b082      	sub	sp, #8
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d101      	bne.n	8001b5e <HAL_CRC_Init+0x12>
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e00e      	b.n	8001b7c <HAL_CRC_Init+0x30>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	795b      	ldrb	r3, [r3, #5]
 8001b62:	b2db      	uxtb	r3, r3
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d105      	bne.n	8001b74 <HAL_CRC_Init+0x28>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	711a      	strb	r2, [r3, #4]
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f7ff fa1a 	bl	8000fa8 <HAL_CRC_MspInit>
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2201      	movs	r2, #1
 8001b78:	715a      	strb	r2, [r3, #5]
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3708      	adds	r7, #8
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <HAL_DMA_Abort_IT>:
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b92:	b2db      	uxtb	r3, r3
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d004      	beq.n	8001ba2 <HAL_DMA_Abort_IT+0x1e>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2280      	movs	r2, #128	@ 0x80
 8001b9c:	655a      	str	r2, [r3, #84]	@ 0x54
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e00c      	b.n	8001bbc <HAL_DMA_Abort_IT+0x38>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2205      	movs	r2, #5
 8001ba6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f022 0201 	bic.w	r2, r2, #1
 8001bb8:	601a      	str	r2, [r3, #0]
 8001bba:	2300      	movs	r3, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_DMA2D_Init>:
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <HAL_DMA2D_Init+0x12>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e03b      	b.n	8001c52 <HAL_DMA2D_Init+0x8a>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d106      	bne.n	8001bf4 <HAL_DMA2D_Init+0x2c>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f7ff f9fc 	bl	8000fec <HAL_DMA2D_MspInit>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2202      	movs	r2, #2
 8001bf8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685a      	ldr	r2, [r3, #4]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	601a      	str	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c18:	f023 0107 	bic.w	r1, r3, #7
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	635a      	str	r2, [r3, #52]	@ 0x34
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c2e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001c32:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	68d1      	ldr	r1, [r2, #12]
 8001c3a:	687a      	ldr	r2, [r7, #4]
 8001c3c:	6812      	ldr	r2, [r2, #0]
 8001c3e:	430b      	orrs	r3, r1
 8001c40:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8001c50:	2300      	movs	r3, #0
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}

08001c5a <HAL_DMA2D_IRQHandler>:
 8001c5a:	b580      	push	{r7, lr}
 8001c5c:	b084      	sub	sp, #16
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	60bb      	str	r3, [r7, #8]
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	f003 0301 	and.w	r3, r3, #1
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d026      	beq.n	8001cca <HAL_DMA2D_IRQHandler+0x70>
 8001c7c:	68bb      	ldr	r3, [r7, #8]
 8001c7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d021      	beq.n	8001cca <HAL_DMA2D_IRQHandler+0x70>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	681a      	ldr	r2, [r3, #0]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	681b      	ldr	r3, [r3, #0]
 8001c90:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c9a:	f043 0201 	orr.w	r2, r3, #1
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	609a      	str	r2, [r3, #8]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	2204      	movs	r2, #4
 8001cae:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <HAL_DMA2D_IRQHandler+0x70>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	695b      	ldr	r3, [r3, #20]
 8001cc6:	6878      	ldr	r0, [r7, #4]
 8001cc8:	4798      	blx	r3
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	f003 0320 	and.w	r3, r3, #32
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d026      	beq.n	8001d22 <HAL_DMA2D_IRQHandler+0xc8>
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d021      	beq.n	8001d22 <HAL_DMA2D_IRQHandler+0xc8>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	681a      	ldr	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001cec:	601a      	str	r2, [r3, #0]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	2220      	movs	r2, #32
 8001cf4:	609a      	str	r2, [r3, #8]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001cfa:	f043 0202 	orr.w	r2, r3, #2
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2204      	movs	r2, #4
 8001d06:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	695b      	ldr	r3, [r3, #20]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d003      	beq.n	8001d22 <HAL_DMA2D_IRQHandler+0xc8>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	695b      	ldr	r3, [r3, #20]
 8001d1e:	6878      	ldr	r0, [r7, #4]
 8001d20:	4798      	blx	r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	f003 0308 	and.w	r3, r3, #8
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d026      	beq.n	8001d7a <HAL_DMA2D_IRQHandler+0x120>
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d021      	beq.n	8001d7a <HAL_DMA2D_IRQHandler+0x120>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	2208      	movs	r2, #8
 8001d4c:	609a      	str	r2, [r3, #8]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001d52:	f043 0204 	orr.w	r2, r3, #4
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	2204      	movs	r2, #4
 8001d5e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	2200      	movs	r2, #0
 8001d66:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	695b      	ldr	r3, [r3, #20]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d003      	beq.n	8001d7a <HAL_DMA2D_IRQHandler+0x120>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	4798      	blx	r3
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	f003 0304 	and.w	r3, r3, #4
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d013      	beq.n	8001dac <HAL_DMA2D_IRQHandler+0x152>
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d00e      	beq.n	8001dac <HAL_DMA2D_IRQHandler+0x152>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001d9c:	601a      	str	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2204      	movs	r2, #4
 8001da4:	609a      	str	r2, [r3, #8]
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f000 f853 	bl	8001e52 <HAL_DMA2D_LineEventCallback>
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d024      	beq.n	8001e00 <HAL_DMA2D_IRQHandler+0x1a6>
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d01f      	beq.n	8001e00 <HAL_DMA2D_IRQHandler+0x1a6>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001dce:	601a      	str	r2, [r3, #0]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2202      	movs	r2, #2
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2201      	movs	r2, #1
 8001de4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <HAL_DMA2D_IRQHandler+0x1a6>
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	4798      	blx	r3
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	f003 0310 	and.w	r3, r3, #16
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d01f      	beq.n	8001e4a <HAL_DMA2D_IRQHandler+0x1f0>
 8001e0a:	68bb      	ldr	r3, [r7, #8]
 8001e0c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d01a      	beq.n	8001e4a <HAL_DMA2D_IRQHandler+0x1f0>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	2210      	movs	r2, #16
 8001e2a:	609a      	str	r2, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2201      	movs	r2, #1
 8001e38:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	f000 f80e 	bl	8001e66 <HAL_DMA2D_CLUTLoadingCpltCallback>
 8001e4a:	bf00      	nop
 8001e4c:	3710      	adds	r7, #16
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bd80      	pop	{r7, pc}

08001e52 <HAL_DMA2D_LineEventCallback>:
 8001e52:	b480      	push	{r7}
 8001e54:	b083      	sub	sp, #12
 8001e56:	af00      	add	r7, sp, #0
 8001e58:	6078      	str	r0, [r7, #4]
 8001e5a:	bf00      	nop
 8001e5c:	370c      	adds	r7, #12
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e64:	4770      	bx	lr

08001e66 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 8001e66:	b480      	push	{r7}
 8001e68:	b083      	sub	sp, #12
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	6078      	str	r0, [r7, #4]
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
	...

08001e7c <HAL_DMA2D_ConfigLayer>:
 8001e7c:	b480      	push	{r7}
 8001e7e:	b087      	sub	sp, #28
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
 8001e84:	6039      	str	r1, [r7, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d101      	bne.n	8001e9c <HAL_DMA2D_ConfigLayer+0x20>
 8001e98:	2302      	movs	r3, #2
 8001e9a:	e079      	b.n	8001f90 <HAL_DMA2D_ConfigLayer+0x114>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	011b      	lsls	r3, r3, #4
 8001eb0:	3318      	adds	r3, #24
 8001eb2:	687a      	ldr	r2, [r7, #4]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	693b      	ldr	r3, [r7, #16]
 8001eba:	685a      	ldr	r2, [r3, #4]
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	041b      	lsls	r3, r3, #16
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	4b35      	ldr	r3, [pc, #212]	@ (8001f9c <HAL_DMA2D_ConfigLayer+0x120>)
 8001ec8:	60fb      	str	r3, [r7, #12]
 8001eca:	693b      	ldr	r3, [r7, #16]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b0a      	cmp	r3, #10
 8001ed0:	d003      	beq.n	8001eda <HAL_DMA2D_ConfigLayer+0x5e>
 8001ed2:	693b      	ldr	r3, [r7, #16]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	2b09      	cmp	r3, #9
 8001ed8:	d107      	bne.n	8001eea <HAL_DMA2D_ConfigLayer+0x6e>
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	68db      	ldr	r3, [r3, #12]
 8001ede:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]
 8001ee8:	e005      	b.n	8001ef6 <HAL_DMA2D_ConfigLayer+0x7a>
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	68db      	ldr	r3, [r3, #12]
 8001eee:	061b      	lsls	r3, r3, #24
 8001ef0:	697a      	ldr	r2, [r7, #20]
 8001ef2:	4313      	orrs	r3, r2
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d120      	bne.n	8001f3e <HAL_DMA2D_ConfigLayer+0xc2>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	43db      	mvns	r3, r3
 8001f06:	ea02 0103 	and.w	r1, r2, r3
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	697a      	ldr	r2, [r7, #20]
 8001f10:	430a      	orrs	r2, r1
 8001f12:	625a      	str	r2, [r3, #36]	@ 0x24
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	693a      	ldr	r2, [r7, #16]
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	619a      	str	r2, [r3, #24]
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	2b0a      	cmp	r3, #10
 8001f24:	d003      	beq.n	8001f2e <HAL_DMA2D_ConfigLayer+0xb2>
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b09      	cmp	r3, #9
 8001f2c:	d127      	bne.n	8001f7e <HAL_DMA2D_ConfigLayer+0x102>
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001f3a:	629a      	str	r2, [r3, #40]	@ 0x28
 8001f3c:	e01f      	b.n	8001f7e <HAL_DMA2D_ConfigLayer+0x102>
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	69da      	ldr	r2, [r3, #28]
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	43db      	mvns	r3, r3
 8001f48:	ea02 0103 	and.w	r1, r2, r3
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	697a      	ldr	r2, [r7, #20]
 8001f52:	430a      	orrs	r2, r1
 8001f54:	61da      	str	r2, [r3, #28]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	693a      	ldr	r2, [r7, #16]
 8001f5c:	6812      	ldr	r2, [r2, #0]
 8001f5e:	611a      	str	r2, [r3, #16]
 8001f60:	693b      	ldr	r3, [r7, #16]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	2b0a      	cmp	r3, #10
 8001f66:	d003      	beq.n	8001f70 <HAL_DMA2D_ConfigLayer+0xf4>
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b09      	cmp	r3, #9
 8001f6e:	d106      	bne.n	8001f7e <HAL_DMA2D_ConfigLayer+0x102>
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	68da      	ldr	r2, [r3, #12]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001f7c:	621a      	str	r2, [r3, #32]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2200      	movs	r2, #0
 8001f8a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8001f8e:	2300      	movs	r3, #0
 8001f90:	4618      	mov	r0, r3
 8001f92:	371c      	adds	r7, #28
 8001f94:	46bd      	mov	sp, r7
 8001f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9a:	4770      	bx	lr
 8001f9c:	ff03000f 	.word	0xff03000f

08001fa0 <HAL_GPIO_Init>:
 8001fa0:	b480      	push	{r7}
 8001fa2:	b089      	sub	sp, #36	@ 0x24
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]
 8001fae:	2300      	movs	r3, #0
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	61bb      	str	r3, [r7, #24]
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	61fb      	str	r3, [r7, #28]
 8001fba:	e177      	b.n	80022ac <HAL_GPIO_Init+0x30c>
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	69fb      	ldr	r3, [r7, #28]
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	617b      	str	r3, [r7, #20]
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	697a      	ldr	r2, [r7, #20]
 8001fcc:	4013      	ands	r3, r2
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	693a      	ldr	r2, [r7, #16]
 8001fd2:	697b      	ldr	r3, [r7, #20]
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	f040 8166 	bne.w	80022a6 <HAL_GPIO_Init+0x306>
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f003 0303 	and.w	r3, r3, #3
 8001fe2:	2b01      	cmp	r3, #1
 8001fe4:	d005      	beq.n	8001ff2 <HAL_GPIO_Init+0x52>
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d130      	bne.n	8002054 <HAL_GPIO_Init+0xb4>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	689b      	ldr	r3, [r3, #8]
 8001ff6:	61bb      	str	r3, [r7, #24]
 8001ff8:	69fb      	ldr	r3, [r7, #28]
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	2203      	movs	r2, #3
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43db      	mvns	r3, r3
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	4013      	ands	r3, r2
 8002008:	61bb      	str	r3, [r7, #24]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	68da      	ldr	r2, [r3, #12]
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	005b      	lsls	r3, r3, #1
 8002012:	fa02 f303 	lsl.w	r3, r2, r3
 8002016:	69ba      	ldr	r2, [r7, #24]
 8002018:	4313      	orrs	r3, r2
 800201a:	61bb      	str	r3, [r7, #24]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	609a      	str	r2, [r3, #8]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	61bb      	str	r3, [r7, #24]
 8002028:	2201      	movs	r2, #1
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	43db      	mvns	r3, r3
 8002032:	69ba      	ldr	r2, [r7, #24]
 8002034:	4013      	ands	r3, r2
 8002036:	61bb      	str	r3, [r7, #24]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	091b      	lsrs	r3, r3, #4
 800203e:	f003 0201 	and.w	r2, r3, #1
 8002042:	69fb      	ldr	r3, [r7, #28]
 8002044:	fa02 f303 	lsl.w	r3, r2, r3
 8002048:	69ba      	ldr	r2, [r7, #24]
 800204a:	4313      	orrs	r3, r2
 800204c:	61bb      	str	r3, [r7, #24]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	69ba      	ldr	r2, [r7, #24]
 8002052:	605a      	str	r2, [r3, #4]
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 0303 	and.w	r3, r3, #3
 800205c:	2b03      	cmp	r3, #3
 800205e:	d017      	beq.n	8002090 <HAL_GPIO_Init+0xf0>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	61bb      	str	r3, [r7, #24]
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	2203      	movs	r2, #3
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	69ba      	ldr	r2, [r7, #24]
 8002074:	4013      	ands	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	69fb      	ldr	r3, [r7, #28]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	60da      	str	r2, [r3, #12]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 0303 	and.w	r3, r3, #3
 8002098:	2b02      	cmp	r3, #2
 800209a:	d123      	bne.n	80020e4 <HAL_GPIO_Init+0x144>
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	08da      	lsrs	r2, r3, #3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3208      	adds	r2, #8
 80020a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a8:	61bb      	str	r3, [r7, #24]
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	f003 0307 	and.w	r3, r3, #7
 80020b0:	009b      	lsls	r3, r3, #2
 80020b2:	220f      	movs	r2, #15
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	43db      	mvns	r3, r3
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	4013      	ands	r3, r2
 80020be:	61bb      	str	r3, [r7, #24]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	691a      	ldr	r2, [r3, #16]
 80020c4:	69fb      	ldr	r3, [r7, #28]
 80020c6:	f003 0307 	and.w	r3, r3, #7
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	69ba      	ldr	r2, [r7, #24]
 80020d2:	4313      	orrs	r3, r2
 80020d4:	61bb      	str	r3, [r7, #24]
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	08da      	lsrs	r2, r3, #3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	3208      	adds	r2, #8
 80020de:	69b9      	ldr	r1, [r7, #24]
 80020e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	61bb      	str	r3, [r7, #24]
 80020ea:	69fb      	ldr	r3, [r7, #28]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	2203      	movs	r2, #3
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f003 0203 	and.w	r2, r3, #3
 8002104:	69fb      	ldr	r3, [r7, #28]
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	69ba      	ldr	r2, [r7, #24]
 8002116:	601a      	str	r2, [r3, #0]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80c0 	beq.w	80022a6 <HAL_GPIO_Init+0x306>
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
 800212a:	4b66      	ldr	r3, [pc, #408]	@ (80022c4 <HAL_GPIO_Init+0x324>)
 800212c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800212e:	4a65      	ldr	r2, [pc, #404]	@ (80022c4 <HAL_GPIO_Init+0x324>)
 8002130:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002134:	6453      	str	r3, [r2, #68]	@ 0x44
 8002136:	4b63      	ldr	r3, [pc, #396]	@ (80022c4 <HAL_GPIO_Init+0x324>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800213a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800213e:	60fb      	str	r3, [r7, #12]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4a61      	ldr	r2, [pc, #388]	@ (80022c8 <HAL_GPIO_Init+0x328>)
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	089b      	lsrs	r3, r3, #2
 8002148:	3302      	adds	r3, #2
 800214a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800214e:	61bb      	str	r3, [r7, #24]
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f003 0303 	and.w	r3, r3, #3
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	220f      	movs	r2, #15
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	43db      	mvns	r3, r3
 8002160:	69ba      	ldr	r2, [r7, #24]
 8002162:	4013      	ands	r3, r2
 8002164:	61bb      	str	r3, [r7, #24]
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a58      	ldr	r2, [pc, #352]	@ (80022cc <HAL_GPIO_Init+0x32c>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d037      	beq.n	80021de <HAL_GPIO_Init+0x23e>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a57      	ldr	r2, [pc, #348]	@ (80022d0 <HAL_GPIO_Init+0x330>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d031      	beq.n	80021da <HAL_GPIO_Init+0x23a>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a56      	ldr	r2, [pc, #344]	@ (80022d4 <HAL_GPIO_Init+0x334>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d02b      	beq.n	80021d6 <HAL_GPIO_Init+0x236>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a55      	ldr	r2, [pc, #340]	@ (80022d8 <HAL_GPIO_Init+0x338>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d025      	beq.n	80021d2 <HAL_GPIO_Init+0x232>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a54      	ldr	r2, [pc, #336]	@ (80022dc <HAL_GPIO_Init+0x33c>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d01f      	beq.n	80021ce <HAL_GPIO_Init+0x22e>
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	4a53      	ldr	r2, [pc, #332]	@ (80022e0 <HAL_GPIO_Init+0x340>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d019      	beq.n	80021ca <HAL_GPIO_Init+0x22a>
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4a52      	ldr	r2, [pc, #328]	@ (80022e4 <HAL_GPIO_Init+0x344>)
 800219a:	4293      	cmp	r3, r2
 800219c:	d013      	beq.n	80021c6 <HAL_GPIO_Init+0x226>
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a51      	ldr	r2, [pc, #324]	@ (80022e8 <HAL_GPIO_Init+0x348>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d00d      	beq.n	80021c2 <HAL_GPIO_Init+0x222>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a50      	ldr	r2, [pc, #320]	@ (80022ec <HAL_GPIO_Init+0x34c>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d007      	beq.n	80021be <HAL_GPIO_Init+0x21e>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a4f      	ldr	r2, [pc, #316]	@ (80022f0 <HAL_GPIO_Init+0x350>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d101      	bne.n	80021ba <HAL_GPIO_Init+0x21a>
 80021b6:	2309      	movs	r3, #9
 80021b8:	e012      	b.n	80021e0 <HAL_GPIO_Init+0x240>
 80021ba:	230a      	movs	r3, #10
 80021bc:	e010      	b.n	80021e0 <HAL_GPIO_Init+0x240>
 80021be:	2308      	movs	r3, #8
 80021c0:	e00e      	b.n	80021e0 <HAL_GPIO_Init+0x240>
 80021c2:	2307      	movs	r3, #7
 80021c4:	e00c      	b.n	80021e0 <HAL_GPIO_Init+0x240>
 80021c6:	2306      	movs	r3, #6
 80021c8:	e00a      	b.n	80021e0 <HAL_GPIO_Init+0x240>
 80021ca:	2305      	movs	r3, #5
 80021cc:	e008      	b.n	80021e0 <HAL_GPIO_Init+0x240>
 80021ce:	2304      	movs	r3, #4
 80021d0:	e006      	b.n	80021e0 <HAL_GPIO_Init+0x240>
 80021d2:	2303      	movs	r3, #3
 80021d4:	e004      	b.n	80021e0 <HAL_GPIO_Init+0x240>
 80021d6:	2302      	movs	r3, #2
 80021d8:	e002      	b.n	80021e0 <HAL_GPIO_Init+0x240>
 80021da:	2301      	movs	r3, #1
 80021dc:	e000      	b.n	80021e0 <HAL_GPIO_Init+0x240>
 80021de:	2300      	movs	r3, #0
 80021e0:	69fa      	ldr	r2, [r7, #28]
 80021e2:	f002 0203 	and.w	r2, r2, #3
 80021e6:	0092      	lsls	r2, r2, #2
 80021e8:	4093      	lsls	r3, r2
 80021ea:	69ba      	ldr	r2, [r7, #24]
 80021ec:	4313      	orrs	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
 80021f0:	4935      	ldr	r1, [pc, #212]	@ (80022c8 <HAL_GPIO_Init+0x328>)
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	089b      	lsrs	r3, r3, #2
 80021f6:	3302      	adds	r3, #2
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80021fe:	4b3d      	ldr	r3, [pc, #244]	@ (80022f4 <HAL_GPIO_Init+0x354>)
 8002200:	689b      	ldr	r3, [r3, #8]
 8002202:	61bb      	str	r3, [r7, #24]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	43db      	mvns	r3, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4013      	ands	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	685b      	ldr	r3, [r3, #4]
 8002212:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d003      	beq.n	8002222 <HAL_GPIO_Init+0x282>
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
 8002222:	4a34      	ldr	r2, [pc, #208]	@ (80022f4 <HAL_GPIO_Init+0x354>)
 8002224:	69bb      	ldr	r3, [r7, #24]
 8002226:	6093      	str	r3, [r2, #8]
 8002228:	4b32      	ldr	r3, [pc, #200]	@ (80022f4 <HAL_GPIO_Init+0x354>)
 800222a:	68db      	ldr	r3, [r3, #12]
 800222c:	61bb      	str	r3, [r7, #24]
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	43db      	mvns	r3, r3
 8002232:	69ba      	ldr	r2, [r7, #24]
 8002234:	4013      	ands	r3, r2
 8002236:	61bb      	str	r3, [r7, #24]
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d003      	beq.n	800224c <HAL_GPIO_Init+0x2ac>
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	4313      	orrs	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
 800224c:	4a29      	ldr	r2, [pc, #164]	@ (80022f4 <HAL_GPIO_Init+0x354>)
 800224e:	69bb      	ldr	r3, [r7, #24]
 8002250:	60d3      	str	r3, [r2, #12]
 8002252:	4b28      	ldr	r3, [pc, #160]	@ (80022f4 <HAL_GPIO_Init+0x354>)
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	61bb      	str	r3, [r7, #24]
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	43db      	mvns	r3, r3
 800225c:	69ba      	ldr	r2, [r7, #24]
 800225e:	4013      	ands	r3, r2
 8002260:	61bb      	str	r3, [r7, #24]
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d003      	beq.n	8002276 <HAL_GPIO_Init+0x2d6>
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	693b      	ldr	r3, [r7, #16]
 8002272:	4313      	orrs	r3, r2
 8002274:	61bb      	str	r3, [r7, #24]
 8002276:	4a1f      	ldr	r2, [pc, #124]	@ (80022f4 <HAL_GPIO_Init+0x354>)
 8002278:	69bb      	ldr	r3, [r7, #24]
 800227a:	6053      	str	r3, [r2, #4]
 800227c:	4b1d      	ldr	r3, [pc, #116]	@ (80022f4 <HAL_GPIO_Init+0x354>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	61bb      	str	r3, [r7, #24]
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	43db      	mvns	r3, r3
 8002286:	69ba      	ldr	r2, [r7, #24]
 8002288:	4013      	ands	r3, r2
 800228a:	61bb      	str	r3, [r7, #24]
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d003      	beq.n	80022a0 <HAL_GPIO_Init+0x300>
 8002298:	69ba      	ldr	r2, [r7, #24]
 800229a:	693b      	ldr	r3, [r7, #16]
 800229c:	4313      	orrs	r3, r2
 800229e:	61bb      	str	r3, [r7, #24]
 80022a0:	4a14      	ldr	r2, [pc, #80]	@ (80022f4 <HAL_GPIO_Init+0x354>)
 80022a2:	69bb      	ldr	r3, [r7, #24]
 80022a4:	6013      	str	r3, [r2, #0]
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	3301      	adds	r3, #1
 80022aa:	61fb      	str	r3, [r7, #28]
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	2b0f      	cmp	r3, #15
 80022b0:	f67f ae84 	bls.w	8001fbc <HAL_GPIO_Init+0x1c>
 80022b4:	bf00      	nop
 80022b6:	bf00      	nop
 80022b8:	3724      	adds	r7, #36	@ 0x24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	40023800 	.word	0x40023800
 80022c8:	40013800 	.word	0x40013800
 80022cc:	40020000 	.word	0x40020000
 80022d0:	40020400 	.word	0x40020400
 80022d4:	40020800 	.word	0x40020800
 80022d8:	40020c00 	.word	0x40020c00
 80022dc:	40021000 	.word	0x40021000
 80022e0:	40021400 	.word	0x40021400
 80022e4:	40021800 	.word	0x40021800
 80022e8:	40021c00 	.word	0x40021c00
 80022ec:	40022000 	.word	0x40022000
 80022f0:	40022400 	.word	0x40022400
 80022f4:	40013c00 	.word	0x40013c00

080022f8 <HAL_GPIO_WritePin>:
 80022f8:	b480      	push	{r7}
 80022fa:	b083      	sub	sp, #12
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
 8002300:	460b      	mov	r3, r1
 8002302:	807b      	strh	r3, [r7, #2]
 8002304:	4613      	mov	r3, r2
 8002306:	707b      	strb	r3, [r7, #1]
 8002308:	787b      	ldrb	r3, [r7, #1]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d003      	beq.n	8002316 <HAL_GPIO_WritePin+0x1e>
 800230e:	887a      	ldrh	r2, [r7, #2]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	619a      	str	r2, [r3, #24]
 8002314:	e003      	b.n	800231e <HAL_GPIO_WritePin+0x26>
 8002316:	887b      	ldrh	r3, [r7, #2]
 8002318:	041a      	lsls	r2, r3, #16
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	619a      	str	r2, [r3, #24]
 800231e:	bf00      	nop
 8002320:	370c      	adds	r7, #12
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <HAL_HCD_Init>:
 800232a:	b580      	push	{r7, lr}
 800232c:	b086      	sub	sp, #24
 800232e:	af02      	add	r7, sp, #8
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_HCD_Init+0x12>
 8002338:	2301      	movs	r3, #1
 800233a:	e059      	b.n	80023f0 <HAL_HCD_Init+0xc6>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	60fb      	str	r3, [r7, #12]
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002348:	b2db      	uxtb	r3, r3
 800234a:	2b00      	cmp	r3, #0
 800234c:	d106      	bne.n	800235c <HAL_HCD_Init+0x32>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2200      	movs	r2, #0
 8002352:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
 8002356:	6878      	ldr	r0, [r7, #4]
 8002358:	f008 ff86 	bl	800b268 <HAL_HCD_MspInit>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2203      	movs	r2, #3
 8002360:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800236a:	d102      	bne.n	8002372 <HAL_HCD_Init+0x48>
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2200      	movs	r2, #0
 8002370:	719a      	strb	r2, [r3, #6]
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4618      	mov	r0, r3
 8002378:	f005 fd9f 	bl	8007eba <USB_DisableGlobalInt>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6818      	ldr	r0, [r3, #0]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	7c1a      	ldrb	r2, [r3, #16]
 8002384:	f88d 2000 	strb.w	r2, [sp]
 8002388:	3304      	adds	r3, #4
 800238a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800238c:	f005 fd20 	bl	8007dd0 <USB_CoreInit>
 8002390:	4603      	mov	r3, r0
 8002392:	2b00      	cmp	r3, #0
 8002394:	d005      	beq.n	80023a2 <HAL_HCD_Init+0x78>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2202      	movs	r2, #2
 800239a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
 800239e:	2301      	movs	r3, #1
 80023a0:	e026      	b.n	80023f0 <HAL_HCD_Init+0xc6>
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2101      	movs	r1, #1
 80023a8:	4618      	mov	r0, r3
 80023aa:	f005 fd97 	bl	8007edc <USB_SetCurrentMode>
 80023ae:	4603      	mov	r3, r0
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d005      	beq.n	80023c0 <HAL_HCD_Init+0x96>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2202      	movs	r2, #2
 80023b8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
 80023bc:	2301      	movs	r3, #1
 80023be:	e017      	b.n	80023f0 <HAL_HCD_Init+0xc6>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6818      	ldr	r0, [r3, #0]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	7c1a      	ldrb	r2, [r3, #16]
 80023c8:	f88d 2000 	strb.w	r2, [sp]
 80023cc:	3304      	adds	r3, #4
 80023ce:	cb0e      	ldmia	r3, {r1, r2, r3}
 80023d0:	f005 ff3a 	bl	8008248 <USB_HostInit>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d005      	beq.n	80023e6 <HAL_HCD_Init+0xbc>
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2202      	movs	r2, #2
 80023de:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
 80023e2:	2301      	movs	r3, #1
 80023e4:	e004      	b.n	80023f0 <HAL_HCD_Init+0xc6>
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2201      	movs	r2, #1
 80023ea:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
 80023ee:	2300      	movs	r3, #0
 80023f0:	4618      	mov	r0, r3
 80023f2:	3710      	adds	r7, #16
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <HAL_HCD_HC_Init>:
 80023f8:	b590      	push	{r4, r7, lr}
 80023fa:	b08b      	sub	sp, #44	@ 0x2c
 80023fc:	af04      	add	r7, sp, #16
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	4608      	mov	r0, r1
 8002402:	4611      	mov	r1, r2
 8002404:	461a      	mov	r2, r3
 8002406:	4603      	mov	r3, r0
 8002408:	70fb      	strb	r3, [r7, #3]
 800240a:	460b      	mov	r3, r1
 800240c:	70bb      	strb	r3, [r7, #2]
 800240e:	4613      	mov	r3, r2
 8002410:	707b      	strb	r3, [r7, #1]
 8002412:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002414:	617b      	str	r3, [r7, #20]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800241c:	2b01      	cmp	r3, #1
 800241e:	d101      	bne.n	8002424 <HAL_HCD_HC_Init+0x2c>
 8002420:	2302      	movs	r3, #2
 8002422:	e09d      	b.n	8002560 <HAL_HCD_HC_Init+0x168>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
 800242c:	78fa      	ldrb	r2, [r7, #3]
 800242e:	6879      	ldr	r1, [r7, #4]
 8002430:	4613      	mov	r3, r2
 8002432:	011b      	lsls	r3, r3, #4
 8002434:	1a9b      	subs	r3, r3, r2
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	440b      	add	r3, r1
 800243a:	3319      	adds	r3, #25
 800243c:	2200      	movs	r2, #0
 800243e:	701a      	strb	r2, [r3, #0]
 8002440:	78fa      	ldrb	r2, [r7, #3]
 8002442:	6879      	ldr	r1, [r7, #4]
 8002444:	4613      	mov	r3, r2
 8002446:	011b      	lsls	r3, r3, #4
 8002448:	1a9b      	subs	r3, r3, r2
 800244a:	009b      	lsls	r3, r3, #2
 800244c:	440b      	add	r3, r1
 800244e:	3314      	adds	r3, #20
 8002450:	787a      	ldrb	r2, [r7, #1]
 8002452:	701a      	strb	r2, [r3, #0]
 8002454:	78fa      	ldrb	r2, [r7, #3]
 8002456:	6879      	ldr	r1, [r7, #4]
 8002458:	4613      	mov	r3, r2
 800245a:	011b      	lsls	r3, r3, #4
 800245c:	1a9b      	subs	r3, r3, r2
 800245e:	009b      	lsls	r3, r3, #2
 8002460:	440b      	add	r3, r1
 8002462:	3315      	adds	r3, #21
 8002464:	78fa      	ldrb	r2, [r7, #3]
 8002466:	701a      	strb	r2, [r3, #0]
 8002468:	78fa      	ldrb	r2, [r7, #3]
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	4613      	mov	r3, r2
 800246e:	011b      	lsls	r3, r3, #4
 8002470:	1a9b      	subs	r3, r3, r2
 8002472:	009b      	lsls	r3, r3, #2
 8002474:	440b      	add	r3, r1
 8002476:	3326      	adds	r3, #38	@ 0x26
 8002478:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800247c:	701a      	strb	r2, [r3, #0]
 800247e:	78fa      	ldrb	r2, [r7, #3]
 8002480:	78bb      	ldrb	r3, [r7, #2]
 8002482:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002486:	b2d8      	uxtb	r0, r3
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	4613      	mov	r3, r2
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	1a9b      	subs	r3, r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	440b      	add	r3, r1
 8002494:	3316      	adds	r3, #22
 8002496:	4602      	mov	r2, r0
 8002498:	701a      	strb	r2, [r3, #0]
 800249a:	78fb      	ldrb	r3, [r7, #3]
 800249c:	4619      	mov	r1, r3
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f000 fbc8 	bl	8002c34 <HAL_HCD_HC_ClearHubInfo>
 80024a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	da0a      	bge.n	80024c2 <HAL_HCD_HC_Init+0xca>
 80024ac:	78fa      	ldrb	r2, [r7, #3]
 80024ae:	6879      	ldr	r1, [r7, #4]
 80024b0:	4613      	mov	r3, r2
 80024b2:	011b      	lsls	r3, r3, #4
 80024b4:	1a9b      	subs	r3, r3, r2
 80024b6:	009b      	lsls	r3, r3, #2
 80024b8:	440b      	add	r3, r1
 80024ba:	3317      	adds	r3, #23
 80024bc:	2201      	movs	r2, #1
 80024be:	701a      	strb	r2, [r3, #0]
 80024c0:	e009      	b.n	80024d6 <HAL_HCD_HC_Init+0xde>
 80024c2:	78fa      	ldrb	r2, [r7, #3]
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	4613      	mov	r3, r2
 80024c8:	011b      	lsls	r3, r3, #4
 80024ca:	1a9b      	subs	r3, r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	3317      	adds	r3, #23
 80024d2:	2200      	movs	r2, #0
 80024d4:	701a      	strb	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4618      	mov	r0, r3
 80024dc:	f006 f818 	bl	8008510 <USB_GetHostSpeed>
 80024e0:	6138      	str	r0, [r7, #16]
 80024e2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80024e6:	2b01      	cmp	r3, #1
 80024e8:	d10b      	bne.n	8002502 <HAL_HCD_HC_Init+0x10a>
 80024ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d107      	bne.n	8002502 <HAL_HCD_HC_Init+0x10a>
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d104      	bne.n	8002502 <HAL_HCD_HC_Init+0x10a>
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	2bbc      	cmp	r3, #188	@ 0xbc
 80024fc:	d901      	bls.n	8002502 <HAL_HCD_HC_Init+0x10a>
 80024fe:	23bc      	movs	r3, #188	@ 0xbc
 8002500:	617b      	str	r3, [r7, #20]
 8002502:	78fa      	ldrb	r2, [r7, #3]
 8002504:	6879      	ldr	r1, [r7, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	011b      	lsls	r3, r3, #4
 800250a:	1a9b      	subs	r3, r3, r2
 800250c:	009b      	lsls	r3, r3, #2
 800250e:	440b      	add	r3, r1
 8002510:	3318      	adds	r3, #24
 8002512:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002516:	701a      	strb	r2, [r3, #0]
 8002518:	78fa      	ldrb	r2, [r7, #3]
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	b298      	uxth	r0, r3
 800251e:	6879      	ldr	r1, [r7, #4]
 8002520:	4613      	mov	r3, r2
 8002522:	011b      	lsls	r3, r3, #4
 8002524:	1a9b      	subs	r3, r3, r2
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	440b      	add	r3, r1
 800252a:	3328      	adds	r3, #40	@ 0x28
 800252c:	4602      	mov	r2, r0
 800252e:	801a      	strh	r2, [r3, #0]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6818      	ldr	r0, [r3, #0]
 8002534:	697b      	ldr	r3, [r7, #20]
 8002536:	b29b      	uxth	r3, r3
 8002538:	787c      	ldrb	r4, [r7, #1]
 800253a:	78ba      	ldrb	r2, [r7, #2]
 800253c:	78f9      	ldrb	r1, [r7, #3]
 800253e:	9302      	str	r3, [sp, #8]
 8002540:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002544:	9301      	str	r3, [sp, #4]
 8002546:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800254a:	9300      	str	r3, [sp, #0]
 800254c:	4623      	mov	r3, r4
 800254e:	f006 f807 	bl	8008560 <USB_HC_Init>
 8002552:	4603      	mov	r3, r0
 8002554:	73fb      	strb	r3, [r7, #15]
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2200      	movs	r2, #0
 800255a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
 800255e:	7bfb      	ldrb	r3, [r7, #15]
 8002560:	4618      	mov	r0, r3
 8002562:	371c      	adds	r7, #28
 8002564:	46bd      	mov	sp, r7
 8002566:	bd90      	pop	{r4, r7, pc}

08002568 <HAL_HCD_HC_Halt>:
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
 8002570:	460b      	mov	r3, r1
 8002572:	70fb      	strb	r3, [r7, #3]
 8002574:	2300      	movs	r3, #0
 8002576:	73fb      	strb	r3, [r7, #15]
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800257e:	2b01      	cmp	r3, #1
 8002580:	d101      	bne.n	8002586 <HAL_HCD_HC_Halt+0x1e>
 8002582:	2302      	movs	r3, #2
 8002584:	e00f      	b.n	80025a6 <HAL_HCD_HC_Halt+0x3e>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2201      	movs	r2, #1
 800258a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	78fa      	ldrb	r2, [r7, #3]
 8002594:	4611      	mov	r1, r2
 8002596:	4618      	mov	r0, r3
 8002598:	f006 fb99 	bl	8008cce <USB_HC_Halt>
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2200      	movs	r2, #0
 80025a0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	4618      	mov	r0, r3
 80025a8:	3710      	adds	r7, #16
 80025aa:	46bd      	mov	sp, r7
 80025ac:	bd80      	pop	{r7, pc}
	...

080025b0 <HAL_HCD_HC_SubmitRequest>:
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	4608      	mov	r0, r1
 80025ba:	4611      	mov	r1, r2
 80025bc:	461a      	mov	r2, r3
 80025be:	4603      	mov	r3, r0
 80025c0:	70fb      	strb	r3, [r7, #3]
 80025c2:	460b      	mov	r3, r1
 80025c4:	70bb      	strb	r3, [r7, #2]
 80025c6:	4613      	mov	r3, r2
 80025c8:	707b      	strb	r3, [r7, #1]
 80025ca:	78fa      	ldrb	r2, [r7, #3]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	011b      	lsls	r3, r3, #4
 80025d2:	1a9b      	subs	r3, r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	3317      	adds	r3, #23
 80025da:	78ba      	ldrb	r2, [r7, #2]
 80025dc:	701a      	strb	r2, [r3, #0]
 80025de:	78fa      	ldrb	r2, [r7, #3]
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	4613      	mov	r3, r2
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	1a9b      	subs	r3, r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	440b      	add	r3, r1
 80025ec:	3326      	adds	r3, #38	@ 0x26
 80025ee:	787a      	ldrb	r2, [r7, #1]
 80025f0:	701a      	strb	r2, [r3, #0]
 80025f2:	7c3b      	ldrb	r3, [r7, #16]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d114      	bne.n	8002622 <HAL_HCD_HC_SubmitRequest+0x72>
 80025f8:	78fa      	ldrb	r2, [r7, #3]
 80025fa:	6879      	ldr	r1, [r7, #4]
 80025fc:	4613      	mov	r3, r2
 80025fe:	011b      	lsls	r3, r3, #4
 8002600:	1a9b      	subs	r3, r3, r2
 8002602:	009b      	lsls	r3, r3, #2
 8002604:	440b      	add	r3, r1
 8002606:	332a      	adds	r3, #42	@ 0x2a
 8002608:	2203      	movs	r2, #3
 800260a:	701a      	strb	r2, [r3, #0]
 800260c:	78fa      	ldrb	r2, [r7, #3]
 800260e:	6879      	ldr	r1, [r7, #4]
 8002610:	4613      	mov	r3, r2
 8002612:	011b      	lsls	r3, r3, #4
 8002614:	1a9b      	subs	r3, r3, r2
 8002616:	009b      	lsls	r3, r3, #2
 8002618:	440b      	add	r3, r1
 800261a:	3319      	adds	r3, #25
 800261c:	7f3a      	ldrb	r2, [r7, #28]
 800261e:	701a      	strb	r2, [r3, #0]
 8002620:	e009      	b.n	8002636 <HAL_HCD_HC_SubmitRequest+0x86>
 8002622:	78fa      	ldrb	r2, [r7, #3]
 8002624:	6879      	ldr	r1, [r7, #4]
 8002626:	4613      	mov	r3, r2
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	1a9b      	subs	r3, r3, r2
 800262c:	009b      	lsls	r3, r3, #2
 800262e:	440b      	add	r3, r1
 8002630:	332a      	adds	r3, #42	@ 0x2a
 8002632:	2202      	movs	r2, #2
 8002634:	701a      	strb	r2, [r3, #0]
 8002636:	787b      	ldrb	r3, [r7, #1]
 8002638:	2b03      	cmp	r3, #3
 800263a:	f200 8102 	bhi.w	8002842 <HAL_HCD_HC_SubmitRequest+0x292>
 800263e:	a201      	add	r2, pc, #4	@ (adr r2, 8002644 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002644:	08002655 	.word	0x08002655
 8002648:	0800282d 	.word	0x0800282d
 800264c:	08002719 	.word	0x08002719
 8002650:	080027a3 	.word	0x080027a3
 8002654:	7c3b      	ldrb	r3, [r7, #16]
 8002656:	2b01      	cmp	r3, #1
 8002658:	f040 80f5 	bne.w	8002846 <HAL_HCD_HC_SubmitRequest+0x296>
 800265c:	78bb      	ldrb	r3, [r7, #2]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d12d      	bne.n	80026be <HAL_HCD_HC_SubmitRequest+0x10e>
 8002662:	8b3b      	ldrh	r3, [r7, #24]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d109      	bne.n	800267c <HAL_HCD_HC_SubmitRequest+0xcc>
 8002668:	78fa      	ldrb	r2, [r7, #3]
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	4613      	mov	r3, r2
 800266e:	011b      	lsls	r3, r3, #4
 8002670:	1a9b      	subs	r3, r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	333d      	adds	r3, #61	@ 0x3d
 8002678:	2201      	movs	r2, #1
 800267a:	701a      	strb	r2, [r3, #0]
 800267c:	78fa      	ldrb	r2, [r7, #3]
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	011b      	lsls	r3, r3, #4
 8002684:	1a9b      	subs	r3, r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	333d      	adds	r3, #61	@ 0x3d
 800268c:	781b      	ldrb	r3, [r3, #0]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d10a      	bne.n	80026a8 <HAL_HCD_HC_SubmitRequest+0xf8>
 8002692:	78fa      	ldrb	r2, [r7, #3]
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	4613      	mov	r3, r2
 8002698:	011b      	lsls	r3, r3, #4
 800269a:	1a9b      	subs	r3, r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	440b      	add	r3, r1
 80026a0:	332a      	adds	r3, #42	@ 0x2a
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]
 80026a6:	e0ce      	b.n	8002846 <HAL_HCD_HC_SubmitRequest+0x296>
 80026a8:	78fa      	ldrb	r2, [r7, #3]
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	011b      	lsls	r3, r3, #4
 80026b0:	1a9b      	subs	r3, r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	332a      	adds	r3, #42	@ 0x2a
 80026b8:	2202      	movs	r2, #2
 80026ba:	701a      	strb	r2, [r3, #0]
 80026bc:	e0c3      	b.n	8002846 <HAL_HCD_HC_SubmitRequest+0x296>
 80026be:	78fa      	ldrb	r2, [r7, #3]
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	4613      	mov	r3, r2
 80026c4:	011b      	lsls	r3, r3, #4
 80026c6:	1a9b      	subs	r3, r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	440b      	add	r3, r1
 80026cc:	331a      	adds	r3, #26
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	f040 80b8 	bne.w	8002846 <HAL_HCD_HC_SubmitRequest+0x296>
 80026d6:	78fa      	ldrb	r2, [r7, #3]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	4613      	mov	r3, r2
 80026dc:	011b      	lsls	r3, r3, #4
 80026de:	1a9b      	subs	r3, r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	440b      	add	r3, r1
 80026e4:	333c      	adds	r3, #60	@ 0x3c
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d10a      	bne.n	8002702 <HAL_HCD_HC_SubmitRequest+0x152>
 80026ec:	78fa      	ldrb	r2, [r7, #3]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	1a9b      	subs	r3, r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	332a      	adds	r3, #42	@ 0x2a
 80026fc:	2200      	movs	r2, #0
 80026fe:	701a      	strb	r2, [r3, #0]
 8002700:	e0a1      	b.n	8002846 <HAL_HCD_HC_SubmitRequest+0x296>
 8002702:	78fa      	ldrb	r2, [r7, #3]
 8002704:	6879      	ldr	r1, [r7, #4]
 8002706:	4613      	mov	r3, r2
 8002708:	011b      	lsls	r3, r3, #4
 800270a:	1a9b      	subs	r3, r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	440b      	add	r3, r1
 8002710:	332a      	adds	r3, #42	@ 0x2a
 8002712:	2202      	movs	r2, #2
 8002714:	701a      	strb	r2, [r3, #0]
 8002716:	e096      	b.n	8002846 <HAL_HCD_HC_SubmitRequest+0x296>
 8002718:	78bb      	ldrb	r3, [r7, #2]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d120      	bne.n	8002760 <HAL_HCD_HC_SubmitRequest+0x1b0>
 800271e:	78fa      	ldrb	r2, [r7, #3]
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	1a9b      	subs	r3, r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	440b      	add	r3, r1
 800272c:	333d      	adds	r3, #61	@ 0x3d
 800272e:	781b      	ldrb	r3, [r3, #0]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10a      	bne.n	800274a <HAL_HCD_HC_SubmitRequest+0x19a>
 8002734:	78fa      	ldrb	r2, [r7, #3]
 8002736:	6879      	ldr	r1, [r7, #4]
 8002738:	4613      	mov	r3, r2
 800273a:	011b      	lsls	r3, r3, #4
 800273c:	1a9b      	subs	r3, r3, r2
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	332a      	adds	r3, #42	@ 0x2a
 8002744:	2200      	movs	r2, #0
 8002746:	701a      	strb	r2, [r3, #0]
 8002748:	e07e      	b.n	8002848 <HAL_HCD_HC_SubmitRequest+0x298>
 800274a:	78fa      	ldrb	r2, [r7, #3]
 800274c:	6879      	ldr	r1, [r7, #4]
 800274e:	4613      	mov	r3, r2
 8002750:	011b      	lsls	r3, r3, #4
 8002752:	1a9b      	subs	r3, r3, r2
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	440b      	add	r3, r1
 8002758:	332a      	adds	r3, #42	@ 0x2a
 800275a:	2202      	movs	r2, #2
 800275c:	701a      	strb	r2, [r3, #0]
 800275e:	e073      	b.n	8002848 <HAL_HCD_HC_SubmitRequest+0x298>
 8002760:	78fa      	ldrb	r2, [r7, #3]
 8002762:	6879      	ldr	r1, [r7, #4]
 8002764:	4613      	mov	r3, r2
 8002766:	011b      	lsls	r3, r3, #4
 8002768:	1a9b      	subs	r3, r3, r2
 800276a:	009b      	lsls	r3, r3, #2
 800276c:	440b      	add	r3, r1
 800276e:	333c      	adds	r3, #60	@ 0x3c
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d10a      	bne.n	800278c <HAL_HCD_HC_SubmitRequest+0x1dc>
 8002776:	78fa      	ldrb	r2, [r7, #3]
 8002778:	6879      	ldr	r1, [r7, #4]
 800277a:	4613      	mov	r3, r2
 800277c:	011b      	lsls	r3, r3, #4
 800277e:	1a9b      	subs	r3, r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	440b      	add	r3, r1
 8002784:	332a      	adds	r3, #42	@ 0x2a
 8002786:	2200      	movs	r2, #0
 8002788:	701a      	strb	r2, [r3, #0]
 800278a:	e05d      	b.n	8002848 <HAL_HCD_HC_SubmitRequest+0x298>
 800278c:	78fa      	ldrb	r2, [r7, #3]
 800278e:	6879      	ldr	r1, [r7, #4]
 8002790:	4613      	mov	r3, r2
 8002792:	011b      	lsls	r3, r3, #4
 8002794:	1a9b      	subs	r3, r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	440b      	add	r3, r1
 800279a:	332a      	adds	r3, #42	@ 0x2a
 800279c:	2202      	movs	r2, #2
 800279e:	701a      	strb	r2, [r3, #0]
 80027a0:	e052      	b.n	8002848 <HAL_HCD_HC_SubmitRequest+0x298>
 80027a2:	78bb      	ldrb	r3, [r7, #2]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d120      	bne.n	80027ea <HAL_HCD_HC_SubmitRequest+0x23a>
 80027a8:	78fa      	ldrb	r2, [r7, #3]
 80027aa:	6879      	ldr	r1, [r7, #4]
 80027ac:	4613      	mov	r3, r2
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	1a9b      	subs	r3, r3, r2
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	333d      	adds	r3, #61	@ 0x3d
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d10a      	bne.n	80027d4 <HAL_HCD_HC_SubmitRequest+0x224>
 80027be:	78fa      	ldrb	r2, [r7, #3]
 80027c0:	6879      	ldr	r1, [r7, #4]
 80027c2:	4613      	mov	r3, r2
 80027c4:	011b      	lsls	r3, r3, #4
 80027c6:	1a9b      	subs	r3, r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	440b      	add	r3, r1
 80027cc:	332a      	adds	r3, #42	@ 0x2a
 80027ce:	2200      	movs	r2, #0
 80027d0:	701a      	strb	r2, [r3, #0]
 80027d2:	e039      	b.n	8002848 <HAL_HCD_HC_SubmitRequest+0x298>
 80027d4:	78fa      	ldrb	r2, [r7, #3]
 80027d6:	6879      	ldr	r1, [r7, #4]
 80027d8:	4613      	mov	r3, r2
 80027da:	011b      	lsls	r3, r3, #4
 80027dc:	1a9b      	subs	r3, r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	332a      	adds	r3, #42	@ 0x2a
 80027e4:	2202      	movs	r2, #2
 80027e6:	701a      	strb	r2, [r3, #0]
 80027e8:	e02e      	b.n	8002848 <HAL_HCD_HC_SubmitRequest+0x298>
 80027ea:	78fa      	ldrb	r2, [r7, #3]
 80027ec:	6879      	ldr	r1, [r7, #4]
 80027ee:	4613      	mov	r3, r2
 80027f0:	011b      	lsls	r3, r3, #4
 80027f2:	1a9b      	subs	r3, r3, r2
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	440b      	add	r3, r1
 80027f8:	333c      	adds	r3, #60	@ 0x3c
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10a      	bne.n	8002816 <HAL_HCD_HC_SubmitRequest+0x266>
 8002800:	78fa      	ldrb	r2, [r7, #3]
 8002802:	6879      	ldr	r1, [r7, #4]
 8002804:	4613      	mov	r3, r2
 8002806:	011b      	lsls	r3, r3, #4
 8002808:	1a9b      	subs	r3, r3, r2
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	440b      	add	r3, r1
 800280e:	332a      	adds	r3, #42	@ 0x2a
 8002810:	2200      	movs	r2, #0
 8002812:	701a      	strb	r2, [r3, #0]
 8002814:	e018      	b.n	8002848 <HAL_HCD_HC_SubmitRequest+0x298>
 8002816:	78fa      	ldrb	r2, [r7, #3]
 8002818:	6879      	ldr	r1, [r7, #4]
 800281a:	4613      	mov	r3, r2
 800281c:	011b      	lsls	r3, r3, #4
 800281e:	1a9b      	subs	r3, r3, r2
 8002820:	009b      	lsls	r3, r3, #2
 8002822:	440b      	add	r3, r1
 8002824:	332a      	adds	r3, #42	@ 0x2a
 8002826:	2202      	movs	r2, #2
 8002828:	701a      	strb	r2, [r3, #0]
 800282a:	e00d      	b.n	8002848 <HAL_HCD_HC_SubmitRequest+0x298>
 800282c:	78fa      	ldrb	r2, [r7, #3]
 800282e:	6879      	ldr	r1, [r7, #4]
 8002830:	4613      	mov	r3, r2
 8002832:	011b      	lsls	r3, r3, #4
 8002834:	1a9b      	subs	r3, r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	440b      	add	r3, r1
 800283a:	332a      	adds	r3, #42	@ 0x2a
 800283c:	2200      	movs	r2, #0
 800283e:	701a      	strb	r2, [r3, #0]
 8002840:	e002      	b.n	8002848 <HAL_HCD_HC_SubmitRequest+0x298>
 8002842:	bf00      	nop
 8002844:	e000      	b.n	8002848 <HAL_HCD_HC_SubmitRequest+0x298>
 8002846:	bf00      	nop
 8002848:	78fa      	ldrb	r2, [r7, #3]
 800284a:	6879      	ldr	r1, [r7, #4]
 800284c:	4613      	mov	r3, r2
 800284e:	011b      	lsls	r3, r3, #4
 8002850:	1a9b      	subs	r3, r3, r2
 8002852:	009b      	lsls	r3, r3, #2
 8002854:	440b      	add	r3, r1
 8002856:	332c      	adds	r3, #44	@ 0x2c
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	601a      	str	r2, [r3, #0]
 800285c:	78fa      	ldrb	r2, [r7, #3]
 800285e:	8b39      	ldrh	r1, [r7, #24]
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	4613      	mov	r3, r2
 8002864:	011b      	lsls	r3, r3, #4
 8002866:	1a9b      	subs	r3, r3, r2
 8002868:	009b      	lsls	r3, r3, #2
 800286a:	4403      	add	r3, r0
 800286c:	3334      	adds	r3, #52	@ 0x34
 800286e:	6019      	str	r1, [r3, #0]
 8002870:	78fa      	ldrb	r2, [r7, #3]
 8002872:	6879      	ldr	r1, [r7, #4]
 8002874:	4613      	mov	r3, r2
 8002876:	011b      	lsls	r3, r3, #4
 8002878:	1a9b      	subs	r3, r3, r2
 800287a:	009b      	lsls	r3, r3, #2
 800287c:	440b      	add	r3, r1
 800287e:	334c      	adds	r3, #76	@ 0x4c
 8002880:	2200      	movs	r2, #0
 8002882:	701a      	strb	r2, [r3, #0]
 8002884:	78fa      	ldrb	r2, [r7, #3]
 8002886:	6879      	ldr	r1, [r7, #4]
 8002888:	4613      	mov	r3, r2
 800288a:	011b      	lsls	r3, r3, #4
 800288c:	1a9b      	subs	r3, r3, r2
 800288e:	009b      	lsls	r3, r3, #2
 8002890:	440b      	add	r3, r1
 8002892:	3338      	adds	r3, #56	@ 0x38
 8002894:	2200      	movs	r2, #0
 8002896:	601a      	str	r2, [r3, #0]
 8002898:	78fa      	ldrb	r2, [r7, #3]
 800289a:	6879      	ldr	r1, [r7, #4]
 800289c:	4613      	mov	r3, r2
 800289e:	011b      	lsls	r3, r3, #4
 80028a0:	1a9b      	subs	r3, r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	3315      	adds	r3, #21
 80028a8:	78fa      	ldrb	r2, [r7, #3]
 80028aa:	701a      	strb	r2, [r3, #0]
 80028ac:	78fa      	ldrb	r2, [r7, #3]
 80028ae:	6879      	ldr	r1, [r7, #4]
 80028b0:	4613      	mov	r3, r2
 80028b2:	011b      	lsls	r3, r3, #4
 80028b4:	1a9b      	subs	r3, r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	334d      	adds	r3, #77	@ 0x4d
 80028bc:	2200      	movs	r2, #0
 80028be:	701a      	strb	r2, [r3, #0]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6818      	ldr	r0, [r3, #0]
 80028c4:	78fa      	ldrb	r2, [r7, #3]
 80028c6:	4613      	mov	r3, r2
 80028c8:	011b      	lsls	r3, r3, #4
 80028ca:	1a9b      	subs	r3, r3, r2
 80028cc:	009b      	lsls	r3, r3, #2
 80028ce:	3310      	adds	r3, #16
 80028d0:	687a      	ldr	r2, [r7, #4]
 80028d2:	4413      	add	r3, r2
 80028d4:	1d19      	adds	r1, r3, #4
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	799b      	ldrb	r3, [r3, #6]
 80028da:	461a      	mov	r2, r3
 80028dc:	f005 ff6c 	bl	80087b8 <USB_HC_StartXfer>
 80028e0:	4603      	mov	r3, r0
 80028e2:	4618      	mov	r0, r3
 80028e4:	3708      	adds	r7, #8
 80028e6:	46bd      	mov	sp, r7
 80028e8:	bd80      	pop	{r7, pc}
 80028ea:	bf00      	nop

080028ec <HAL_HCD_IRQHandler>:
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b086      	sub	sp, #24
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	613b      	str	r3, [r7, #16]
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	60fb      	str	r3, [r7, #12]
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4618      	mov	r0, r3
 8002904:	f005 fc60 	bl	80081c8 <USB_GetMode>
 8002908:	4603      	mov	r3, r0
 800290a:	2b01      	cmp	r3, #1
 800290c:	f040 80fb 	bne.w	8002b06 <HAL_HCD_IRQHandler+0x21a>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4618      	mov	r0, r3
 8002916:	f005 fc23 	bl	8008160 <USB_ReadInterrupts>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	f000 80f1 	beq.w	8002b04 <HAL_HCD_IRQHandler+0x218>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	4618      	mov	r0, r3
 8002928:	f005 fc1a 	bl	8008160 <USB_ReadInterrupts>
 800292c:	4603      	mov	r3, r0
 800292e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002932:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002936:	d104      	bne.n	8002942 <HAL_HCD_IRQHandler+0x56>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002940:	615a      	str	r2, [r3, #20]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f005 fc0a 	bl	8008160 <USB_ReadInterrupts>
 800294c:	4603      	mov	r3, r0
 800294e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002952:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002956:	d104      	bne.n	8002962 <HAL_HCD_IRQHandler+0x76>
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002960:	615a      	str	r2, [r3, #20]
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4618      	mov	r0, r3
 8002968:	f005 fbfa 	bl	8008160 <USB_ReadInterrupts>
 800296c:	4603      	mov	r3, r0
 800296e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002972:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002976:	d104      	bne.n	8002982 <HAL_HCD_IRQHandler+0x96>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002980:	615a      	str	r2, [r3, #20]
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4618      	mov	r0, r3
 8002988:	f005 fbea 	bl	8008160 <USB_ReadInterrupts>
 800298c:	4603      	mov	r3, r0
 800298e:	f003 0302 	and.w	r3, r3, #2
 8002992:	2b02      	cmp	r3, #2
 8002994:	d103      	bne.n	800299e <HAL_HCD_IRQHandler+0xb2>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2202      	movs	r2, #2
 800299c:	615a      	str	r2, [r3, #20]
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4618      	mov	r0, r3
 80029a4:	f005 fbdc 	bl	8008160 <USB_ReadInterrupts>
 80029a8:	4603      	mov	r3, r0
 80029aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80029ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80029b2:	d120      	bne.n	80029f6 <HAL_HCD_IRQHandler+0x10a>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80029bc:	615a      	str	r2, [r3, #20]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d113      	bne.n	80029f6 <HAL_HCD_IRQHandler+0x10a>
 80029ce:	2110      	movs	r1, #16
 80029d0:	6938      	ldr	r0, [r7, #16]
 80029d2:	f005 facf 	bl	8007f74 <USB_FlushTxFifo>
 80029d6:	6938      	ldr	r0, [r7, #16]
 80029d8:	f005 fafe 	bl	8007fd8 <USB_FlushRxFifo>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	7a5b      	ldrb	r3, [r3, #9]
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d105      	bne.n	80029f0 <HAL_HCD_IRQHandler+0x104>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2101      	movs	r1, #1
 80029ea:	4618      	mov	r0, r3
 80029ec:	f005 fcf0 	bl	80083d0 <USB_InitFSLSPClkSel>
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f008 fcb3 	bl	800b35c <HAL_HCD_Disconnect_Callback>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f005 fbb0 	bl	8008160 <USB_ReadInterrupts>
 8002a00:	4603      	mov	r3, r0
 8002a02:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002a06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a0a:	d102      	bne.n	8002a12 <HAL_HCD_IRQHandler+0x126>
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	f001 fd4d 	bl	80044ac <HCD_Port_IRQHandler>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4618      	mov	r0, r3
 8002a18:	f005 fba2 	bl	8008160 <USB_ReadInterrupts>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	f003 0308 	and.w	r3, r3, #8
 8002a22:	2b08      	cmp	r3, #8
 8002a24:	d106      	bne.n	8002a34 <HAL_HCD_IRQHandler+0x148>
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f008 fc7c 	bl	800b324 <HAL_HCD_SOF_Callback>
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	2208      	movs	r2, #8
 8002a32:	615a      	str	r2, [r3, #20]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f005 fb91 	bl	8008160 <USB_ReadInterrupts>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002a48:	d139      	bne.n	8002abe <HAL_HCD_IRQHandler+0x1d2>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f006 f92c 	bl	8008cac <USB_HC_ReadInterrupt>
 8002a54:	60b8      	str	r0, [r7, #8]
 8002a56:	2300      	movs	r3, #0
 8002a58:	617b      	str	r3, [r7, #20]
 8002a5a:	e025      	b.n	8002aa8 <HAL_HCD_IRQHandler+0x1bc>
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	68ba      	ldr	r2, [r7, #8]
 8002a64:	fa22 f303 	lsr.w	r3, r2, r3
 8002a68:	f003 0301 	and.w	r3, r3, #1
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d018      	beq.n	8002aa2 <HAL_HCD_IRQHandler+0x1b6>
 8002a70:	697b      	ldr	r3, [r7, #20]
 8002a72:	015a      	lsls	r2, r3, #5
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4413      	add	r3, r2
 8002a78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002a82:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a86:	d106      	bne.n	8002a96 <HAL_HCD_IRQHandler+0x1aa>
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	b2db      	uxtb	r3, r3
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f000 f905 	bl	8002c9e <HCD_HC_IN_IRQHandler>
 8002a94:	e005      	b.n	8002aa2 <HAL_HCD_IRQHandler+0x1b6>
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	b2db      	uxtb	r3, r3
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f000 ff67 	bl	8003970 <HCD_HC_OUT_IRQHandler>
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	617b      	str	r3, [r7, #20]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	795b      	ldrb	r3, [r3, #5]
 8002aac:	461a      	mov	r2, r3
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d3d3      	bcc.n	8002a5c <HAL_HCD_IRQHandler+0x170>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002abc:	615a      	str	r2, [r3, #20]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f005 fb4c 	bl	8008160 <USB_ReadInterrupts>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	f003 0310 	and.w	r3, r3, #16
 8002ace:	2b10      	cmp	r3, #16
 8002ad0:	d101      	bne.n	8002ad6 <HAL_HCD_IRQHandler+0x1ea>
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e000      	b.n	8002ad8 <HAL_HCD_IRQHandler+0x1ec>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d014      	beq.n	8002b06 <HAL_HCD_IRQHandler+0x21a>
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	699a      	ldr	r2, [r3, #24]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f022 0210 	bic.w	r2, r2, #16
 8002aea:	619a      	str	r2, [r3, #24]
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f001 fbfe 	bl	80042ee <HCD_RXQLVL_IRQHandler>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	699a      	ldr	r2, [r3, #24]
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	f042 0210 	orr.w	r2, r2, #16
 8002b00:	619a      	str	r2, [r3, #24]
 8002b02:	e000      	b.n	8002b06 <HAL_HCD_IRQHandler+0x21a>
 8002b04:	bf00      	nop
 8002b06:	3718      	adds	r7, #24
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <HAL_HCD_Start>:
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002b1a:	2b01      	cmp	r3, #1
 8002b1c:	d101      	bne.n	8002b22 <HAL_HCD_Start+0x16>
 8002b1e:	2302      	movs	r3, #2
 8002b20:	e013      	b.n	8002b4a <HAL_HCD_Start+0x3e>
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2201      	movs	r2, #1
 8002b26:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2101      	movs	r1, #1
 8002b30:	4618      	mov	r0, r3
 8002b32:	f005 fcb4 	bl	800849e <USB_DriveVbus>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f005 f9ac 	bl	8007e98 <USB_EnableGlobalInt>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
 8002b48:	2300      	movs	r3, #0
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3708      	adds	r7, #8
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}

08002b52 <HAL_HCD_Stop>:
 8002b52:	b580      	push	{r7, lr}
 8002b54:	b082      	sub	sp, #8
 8002b56:	af00      	add	r7, sp, #0
 8002b58:	6078      	str	r0, [r7, #4]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002b60:	2b01      	cmp	r3, #1
 8002b62:	d101      	bne.n	8002b68 <HAL_HCD_Stop+0x16>
 8002b64:	2302      	movs	r3, #2
 8002b66:	e00d      	b.n	8002b84 <HAL_HCD_Stop+0x32>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f006 fa07 	bl	8008f88 <USB_StopHost>
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
 8002b82:	2300      	movs	r3, #0
 8002b84:	4618      	mov	r0, r3
 8002b86:	3708      	adds	r7, #8
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <HAL_HCD_ResetPort>:
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b082      	sub	sp, #8
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f005 fc56 	bl	800844a <USB_ResetPort>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_HCD_HC_GetURBState>:
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	70fb      	strb	r3, [r7, #3]
 8002bb4:	78fa      	ldrb	r2, [r7, #3]
 8002bb6:	6879      	ldr	r1, [r7, #4]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	011b      	lsls	r3, r3, #4
 8002bbc:	1a9b      	subs	r3, r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	440b      	add	r3, r1
 8002bc2:	334c      	adds	r3, #76	@ 0x4c
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	370c      	adds	r7, #12
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <HAL_HCD_HC_GetXferCount>:
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
 8002bda:	460b      	mov	r3, r1
 8002bdc:	70fb      	strb	r3, [r7, #3]
 8002bde:	78fa      	ldrb	r2, [r7, #3]
 8002be0:	6879      	ldr	r1, [r7, #4]
 8002be2:	4613      	mov	r3, r2
 8002be4:	011b      	lsls	r3, r3, #4
 8002be6:	1a9b      	subs	r3, r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	440b      	add	r3, r1
 8002bec:	3338      	adds	r3, #56	@ 0x38
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	4618      	mov	r0, r3
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfa:	4770      	bx	lr

08002bfc <HAL_HCD_GetCurrentFrame>:
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f005 fc98 	bl	800853e <USB_GetCurrentFrame>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_HCD_GetCurrentSpeed>:
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4618      	mov	r0, r3
 8002c26:	f005 fc73 	bl	8008510 <USB_GetHostSpeed>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <HAL_HCD_HC_ClearHubInfo>:
 8002c34:	b480      	push	{r7}
 8002c36:	b083      	sub	sp, #12
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	70fb      	strb	r3, [r7, #3]
 8002c40:	78fa      	ldrb	r2, [r7, #3]
 8002c42:	6879      	ldr	r1, [r7, #4]
 8002c44:	4613      	mov	r3, r2
 8002c46:	011b      	lsls	r3, r3, #4
 8002c48:	1a9b      	subs	r3, r3, r2
 8002c4a:	009b      	lsls	r3, r3, #2
 8002c4c:	440b      	add	r3, r1
 8002c4e:	331a      	adds	r3, #26
 8002c50:	2200      	movs	r2, #0
 8002c52:	701a      	strb	r2, [r3, #0]
 8002c54:	78fa      	ldrb	r2, [r7, #3]
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	011b      	lsls	r3, r3, #4
 8002c5c:	1a9b      	subs	r3, r3, r2
 8002c5e:	009b      	lsls	r3, r3, #2
 8002c60:	440b      	add	r3, r1
 8002c62:	331b      	adds	r3, #27
 8002c64:	2200      	movs	r2, #0
 8002c66:	701a      	strb	r2, [r3, #0]
 8002c68:	78fa      	ldrb	r2, [r7, #3]
 8002c6a:	6879      	ldr	r1, [r7, #4]
 8002c6c:	4613      	mov	r3, r2
 8002c6e:	011b      	lsls	r3, r3, #4
 8002c70:	1a9b      	subs	r3, r3, r2
 8002c72:	009b      	lsls	r3, r3, #2
 8002c74:	440b      	add	r3, r1
 8002c76:	3325      	adds	r3, #37	@ 0x25
 8002c78:	2200      	movs	r2, #0
 8002c7a:	701a      	strb	r2, [r3, #0]
 8002c7c:	78fa      	ldrb	r2, [r7, #3]
 8002c7e:	6879      	ldr	r1, [r7, #4]
 8002c80:	4613      	mov	r3, r2
 8002c82:	011b      	lsls	r3, r3, #4
 8002c84:	1a9b      	subs	r3, r3, r2
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	440b      	add	r3, r1
 8002c8a:	3324      	adds	r3, #36	@ 0x24
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	701a      	strb	r2, [r3, #0]
 8002c90:	2300      	movs	r3, #0
 8002c92:	4618      	mov	r0, r3
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr

08002c9e <HCD_HC_IN_IRQHandler>:
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b086      	sub	sp, #24
 8002ca2:	af00      	add	r7, sp, #0
 8002ca4:	6078      	str	r0, [r7, #4]
 8002ca6:	460b      	mov	r3, r1
 8002ca8:	70fb      	strb	r3, [r7, #3]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	617b      	str	r3, [r7, #20]
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	613b      	str	r3, [r7, #16]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	78fa      	ldrb	r2, [r7, #3]
 8002cba:	4611      	mov	r1, r2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f005 fa62 	bl	8008186 <USB_ReadChInterrupts>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	f003 0304 	and.w	r3, r3, #4
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d11a      	bne.n	8002d02 <HCD_HC_IN_IRQHandler+0x64>
 8002ccc:	78fb      	ldrb	r3, [r7, #3]
 8002cce:	015a      	lsls	r2, r3, #5
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cd8:	461a      	mov	r2, r3
 8002cda:	2304      	movs	r3, #4
 8002cdc:	6093      	str	r3, [r2, #8]
 8002cde:	78fa      	ldrb	r2, [r7, #3]
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	1a9b      	subs	r3, r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	440b      	add	r3, r1
 8002cec:	334d      	adds	r3, #77	@ 0x4d
 8002cee:	2207      	movs	r2, #7
 8002cf0:	701a      	strb	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	78fa      	ldrb	r2, [r7, #3]
 8002cf8:	4611      	mov	r1, r2
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f005 ffe7 	bl	8008cce <USB_HC_Halt>
 8002d00:	e09e      	b.n	8002e40 <HCD_HC_IN_IRQHandler+0x1a2>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	78fa      	ldrb	r2, [r7, #3]
 8002d08:	4611      	mov	r1, r2
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f005 fa3b 	bl	8008186 <USB_ReadChInterrupts>
 8002d10:	4603      	mov	r3, r0
 8002d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d16:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002d1a:	d11b      	bne.n	8002d54 <HCD_HC_IN_IRQHandler+0xb6>
 8002d1c:	78fb      	ldrb	r3, [r7, #3]
 8002d1e:	015a      	lsls	r2, r3, #5
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	4413      	add	r3, r2
 8002d24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d28:	461a      	mov	r2, r3
 8002d2a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d2e:	6093      	str	r3, [r2, #8]
 8002d30:	78fa      	ldrb	r2, [r7, #3]
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	4613      	mov	r3, r2
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	1a9b      	subs	r3, r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	334d      	adds	r3, #77	@ 0x4d
 8002d40:	2208      	movs	r2, #8
 8002d42:	701a      	strb	r2, [r3, #0]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	78fa      	ldrb	r2, [r7, #3]
 8002d4a:	4611      	mov	r1, r2
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f005 ffbe 	bl	8008cce <USB_HC_Halt>
 8002d52:	e075      	b.n	8002e40 <HCD_HC_IN_IRQHandler+0x1a2>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	78fa      	ldrb	r2, [r7, #3]
 8002d5a:	4611      	mov	r1, r2
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f005 fa12 	bl	8008186 <USB_ReadChInterrupts>
 8002d62:	4603      	mov	r3, r0
 8002d64:	f003 0308 	and.w	r3, r3, #8
 8002d68:	2b08      	cmp	r3, #8
 8002d6a:	d11a      	bne.n	8002da2 <HCD_HC_IN_IRQHandler+0x104>
 8002d6c:	78fb      	ldrb	r3, [r7, #3]
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	693b      	ldr	r3, [r7, #16]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d78:	461a      	mov	r2, r3
 8002d7a:	2308      	movs	r3, #8
 8002d7c:	6093      	str	r3, [r2, #8]
 8002d7e:	78fa      	ldrb	r2, [r7, #3]
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	334d      	adds	r3, #77	@ 0x4d
 8002d8e:	2206      	movs	r2, #6
 8002d90:	701a      	strb	r2, [r3, #0]
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	78fa      	ldrb	r2, [r7, #3]
 8002d98:	4611      	mov	r1, r2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f005 ff97 	bl	8008cce <USB_HC_Halt>
 8002da0:	e04e      	b.n	8002e40 <HCD_HC_IN_IRQHandler+0x1a2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	78fa      	ldrb	r2, [r7, #3]
 8002da8:	4611      	mov	r1, r2
 8002daa:	4618      	mov	r0, r3
 8002dac:	f005 f9eb 	bl	8008186 <USB_ReadChInterrupts>
 8002db0:	4603      	mov	r3, r0
 8002db2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002db6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002dba:	d11b      	bne.n	8002df4 <HCD_HC_IN_IRQHandler+0x156>
 8002dbc:	78fb      	ldrb	r3, [r7, #3]
 8002dbe:	015a      	lsls	r2, r3, #5
 8002dc0:	693b      	ldr	r3, [r7, #16]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dc8:	461a      	mov	r2, r3
 8002dca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002dce:	6093      	str	r3, [r2, #8]
 8002dd0:	78fa      	ldrb	r2, [r7, #3]
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	011b      	lsls	r3, r3, #4
 8002dd8:	1a9b      	subs	r3, r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	334d      	adds	r3, #77	@ 0x4d
 8002de0:	2209      	movs	r2, #9
 8002de2:	701a      	strb	r2, [r3, #0]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	78fa      	ldrb	r2, [r7, #3]
 8002dea:	4611      	mov	r1, r2
 8002dec:	4618      	mov	r0, r3
 8002dee:	f005 ff6e 	bl	8008cce <USB_HC_Halt>
 8002df2:	e025      	b.n	8002e40 <HCD_HC_IN_IRQHandler+0x1a2>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	78fa      	ldrb	r2, [r7, #3]
 8002dfa:	4611      	mov	r1, r2
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	f005 f9c2 	bl	8008186 <USB_ReadChInterrupts>
 8002e02:	4603      	mov	r3, r0
 8002e04:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e08:	2b80      	cmp	r3, #128	@ 0x80
 8002e0a:	d119      	bne.n	8002e40 <HCD_HC_IN_IRQHandler+0x1a2>
 8002e0c:	78fb      	ldrb	r3, [r7, #3]
 8002e0e:	015a      	lsls	r2, r3, #5
 8002e10:	693b      	ldr	r3, [r7, #16]
 8002e12:	4413      	add	r3, r2
 8002e14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e18:	461a      	mov	r2, r3
 8002e1a:	2380      	movs	r3, #128	@ 0x80
 8002e1c:	6093      	str	r3, [r2, #8]
 8002e1e:	78fa      	ldrb	r2, [r7, #3]
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	4613      	mov	r3, r2
 8002e24:	011b      	lsls	r3, r3, #4
 8002e26:	1a9b      	subs	r3, r3, r2
 8002e28:	009b      	lsls	r3, r3, #2
 8002e2a:	440b      	add	r3, r1
 8002e2c:	334d      	adds	r3, #77	@ 0x4d
 8002e2e:	2207      	movs	r2, #7
 8002e30:	701a      	strb	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	78fa      	ldrb	r2, [r7, #3]
 8002e38:	4611      	mov	r1, r2
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f005 ff47 	bl	8008cce <USB_HC_Halt>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	78fa      	ldrb	r2, [r7, #3]
 8002e46:	4611      	mov	r1, r2
 8002e48:	4618      	mov	r0, r3
 8002e4a:	f005 f99c 	bl	8008186 <USB_ReadChInterrupts>
 8002e4e:	4603      	mov	r3, r0
 8002e50:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002e54:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002e58:	d112      	bne.n	8002e80 <HCD_HC_IN_IRQHandler+0x1e2>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	78fa      	ldrb	r2, [r7, #3]
 8002e60:	4611      	mov	r1, r2
 8002e62:	4618      	mov	r0, r3
 8002e64:	f005 ff33 	bl	8008cce <USB_HC_Halt>
 8002e68:	78fb      	ldrb	r3, [r7, #3]
 8002e6a:	015a      	lsls	r2, r3, #5
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e74:	461a      	mov	r2, r3
 8002e76:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002e7a:	6093      	str	r3, [r2, #8]
 8002e7c:	f000 bd75 	b.w	800396a <HCD_HC_IN_IRQHandler+0xccc>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	78fa      	ldrb	r2, [r7, #3]
 8002e86:	4611      	mov	r1, r2
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f005 f97c 	bl	8008186 <USB_ReadChInterrupts>
 8002e8e:	4603      	mov	r3, r0
 8002e90:	f003 0301 	and.w	r3, r3, #1
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	f040 8128 	bne.w	80030ea <HCD_HC_IN_IRQHandler+0x44c>
 8002e9a:	78fb      	ldrb	r3, [r7, #3]
 8002e9c:	015a      	lsls	r2, r3, #5
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	2320      	movs	r3, #32
 8002eaa:	6093      	str	r3, [r2, #8]
 8002eac:	78fa      	ldrb	r2, [r7, #3]
 8002eae:	6879      	ldr	r1, [r7, #4]
 8002eb0:	4613      	mov	r3, r2
 8002eb2:	011b      	lsls	r3, r3, #4
 8002eb4:	1a9b      	subs	r3, r3, r2
 8002eb6:	009b      	lsls	r3, r3, #2
 8002eb8:	440b      	add	r3, r1
 8002eba:	331b      	adds	r3, #27
 8002ebc:	781b      	ldrb	r3, [r3, #0]
 8002ebe:	2b01      	cmp	r3, #1
 8002ec0:	d119      	bne.n	8002ef6 <HCD_HC_IN_IRQHandler+0x258>
 8002ec2:	78fa      	ldrb	r2, [r7, #3]
 8002ec4:	6879      	ldr	r1, [r7, #4]
 8002ec6:	4613      	mov	r3, r2
 8002ec8:	011b      	lsls	r3, r3, #4
 8002eca:	1a9b      	subs	r3, r3, r2
 8002ecc:	009b      	lsls	r3, r3, #2
 8002ece:	440b      	add	r3, r1
 8002ed0:	331b      	adds	r3, #27
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	701a      	strb	r2, [r3, #0]
 8002ed6:	78fb      	ldrb	r3, [r7, #3]
 8002ed8:	015a      	lsls	r2, r3, #5
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	4413      	add	r3, r2
 8002ede:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	78fa      	ldrb	r2, [r7, #3]
 8002ee6:	0151      	lsls	r1, r2, #5
 8002ee8:	693a      	ldr	r2, [r7, #16]
 8002eea:	440a      	add	r2, r1
 8002eec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ef0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ef4:	6053      	str	r3, [r2, #4]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	799b      	ldrb	r3, [r3, #6]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d01b      	beq.n	8002f36 <HCD_HC_IN_IRQHandler+0x298>
 8002efe:	78fa      	ldrb	r2, [r7, #3]
 8002f00:	6879      	ldr	r1, [r7, #4]
 8002f02:	4613      	mov	r3, r2
 8002f04:	011b      	lsls	r3, r3, #4
 8002f06:	1a9b      	subs	r3, r3, r2
 8002f08:	009b      	lsls	r3, r3, #2
 8002f0a:	440b      	add	r3, r1
 8002f0c:	3330      	adds	r3, #48	@ 0x30
 8002f0e:	6819      	ldr	r1, [r3, #0]
 8002f10:	78fb      	ldrb	r3, [r7, #3]
 8002f12:	015a      	lsls	r2, r3, #5
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	4413      	add	r3, r2
 8002f18:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f1c:	691b      	ldr	r3, [r3, #16]
 8002f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f22:	78fa      	ldrb	r2, [r7, #3]
 8002f24:	1ac9      	subs	r1, r1, r3
 8002f26:	6878      	ldr	r0, [r7, #4]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	011b      	lsls	r3, r3, #4
 8002f2c:	1a9b      	subs	r3, r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	4403      	add	r3, r0
 8002f32:	3338      	adds	r3, #56	@ 0x38
 8002f34:	6019      	str	r1, [r3, #0]
 8002f36:	78fa      	ldrb	r2, [r7, #3]
 8002f38:	6879      	ldr	r1, [r7, #4]
 8002f3a:	4613      	mov	r3, r2
 8002f3c:	011b      	lsls	r3, r3, #4
 8002f3e:	1a9b      	subs	r3, r3, r2
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	440b      	add	r3, r1
 8002f44:	334d      	adds	r3, #77	@ 0x4d
 8002f46:	2201      	movs	r2, #1
 8002f48:	701a      	strb	r2, [r3, #0]
 8002f4a:	78fa      	ldrb	r2, [r7, #3]
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	011b      	lsls	r3, r3, #4
 8002f52:	1a9b      	subs	r3, r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	440b      	add	r3, r1
 8002f58:	3344      	adds	r3, #68	@ 0x44
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	78fb      	ldrb	r3, [r7, #3]
 8002f60:	015a      	lsls	r2, r3, #5
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	4413      	add	r3, r2
 8002f66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	2301      	movs	r3, #1
 8002f6e:	6093      	str	r3, [r2, #8]
 8002f70:	78fa      	ldrb	r2, [r7, #3]
 8002f72:	6879      	ldr	r1, [r7, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	011b      	lsls	r3, r3, #4
 8002f78:	1a9b      	subs	r3, r3, r2
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	3326      	adds	r3, #38	@ 0x26
 8002f80:	781b      	ldrb	r3, [r3, #0]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d00a      	beq.n	8002f9c <HCD_HC_IN_IRQHandler+0x2fe>
 8002f86:	78fa      	ldrb	r2, [r7, #3]
 8002f88:	6879      	ldr	r1, [r7, #4]
 8002f8a:	4613      	mov	r3, r2
 8002f8c:	011b      	lsls	r3, r3, #4
 8002f8e:	1a9b      	subs	r3, r3, r2
 8002f90:	009b      	lsls	r3, r3, #2
 8002f92:	440b      	add	r3, r1
 8002f94:	3326      	adds	r3, #38	@ 0x26
 8002f96:	781b      	ldrb	r3, [r3, #0]
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d110      	bne.n	8002fbe <HCD_HC_IN_IRQHandler+0x320>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	78fa      	ldrb	r2, [r7, #3]
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f005 fe92 	bl	8008cce <USB_HC_Halt>
 8002faa:	78fb      	ldrb	r3, [r7, #3]
 8002fac:	015a      	lsls	r2, r3, #5
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	4413      	add	r3, r2
 8002fb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	2310      	movs	r3, #16
 8002fba:	6093      	str	r3, [r2, #8]
 8002fbc:	e03d      	b.n	800303a <HCD_HC_IN_IRQHandler+0x39c>
 8002fbe:	78fa      	ldrb	r2, [r7, #3]
 8002fc0:	6879      	ldr	r1, [r7, #4]
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	1a9b      	subs	r3, r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	3326      	adds	r3, #38	@ 0x26
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b03      	cmp	r3, #3
 8002fd2:	d00a      	beq.n	8002fea <HCD_HC_IN_IRQHandler+0x34c>
 8002fd4:	78fa      	ldrb	r2, [r7, #3]
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	1a9b      	subs	r3, r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	3326      	adds	r3, #38	@ 0x26
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d127      	bne.n	800303a <HCD_HC_IN_IRQHandler+0x39c>
 8002fea:	78fb      	ldrb	r3, [r7, #3]
 8002fec:	015a      	lsls	r2, r3, #5
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	4413      	add	r3, r2
 8002ff2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	78fa      	ldrb	r2, [r7, #3]
 8002ffa:	0151      	lsls	r1, r2, #5
 8002ffc:	693a      	ldr	r2, [r7, #16]
 8002ffe:	440a      	add	r2, r1
 8003000:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003004:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8003008:	6013      	str	r3, [r2, #0]
 800300a:	78fa      	ldrb	r2, [r7, #3]
 800300c:	6879      	ldr	r1, [r7, #4]
 800300e:	4613      	mov	r3, r2
 8003010:	011b      	lsls	r3, r3, #4
 8003012:	1a9b      	subs	r3, r3, r2
 8003014:	009b      	lsls	r3, r3, #2
 8003016:	440b      	add	r3, r1
 8003018:	334c      	adds	r3, #76	@ 0x4c
 800301a:	2201      	movs	r2, #1
 800301c:	701a      	strb	r2, [r3, #0]
 800301e:	78fa      	ldrb	r2, [r7, #3]
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	4613      	mov	r3, r2
 8003024:	011b      	lsls	r3, r3, #4
 8003026:	1a9b      	subs	r3, r3, r2
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	440b      	add	r3, r1
 800302c:	334c      	adds	r3, #76	@ 0x4c
 800302e:	781a      	ldrb	r2, [r3, #0]
 8003030:	78fb      	ldrb	r3, [r7, #3]
 8003032:	4619      	mov	r1, r3
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f008 f99f 	bl	800b378 <HAL_HCD_HC_NotifyURBChange_Callback>
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	799b      	ldrb	r3, [r3, #6]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d13b      	bne.n	80030ba <HCD_HC_IN_IRQHandler+0x41c>
 8003042:	78fa      	ldrb	r2, [r7, #3]
 8003044:	6879      	ldr	r1, [r7, #4]
 8003046:	4613      	mov	r3, r2
 8003048:	011b      	lsls	r3, r3, #4
 800304a:	1a9b      	subs	r3, r3, r2
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	440b      	add	r3, r1
 8003050:	3338      	adds	r3, #56	@ 0x38
 8003052:	6819      	ldr	r1, [r3, #0]
 8003054:	78fa      	ldrb	r2, [r7, #3]
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	4613      	mov	r3, r2
 800305a:	011b      	lsls	r3, r3, #4
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	4403      	add	r3, r0
 8003062:	3328      	adds	r3, #40	@ 0x28
 8003064:	881b      	ldrh	r3, [r3, #0]
 8003066:	440b      	add	r3, r1
 8003068:	1e59      	subs	r1, r3, #1
 800306a:	78fa      	ldrb	r2, [r7, #3]
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	4613      	mov	r3, r2
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	1a9b      	subs	r3, r3, r2
 8003074:	009b      	lsls	r3, r3, #2
 8003076:	4403      	add	r3, r0
 8003078:	3328      	adds	r3, #40	@ 0x28
 800307a:	881b      	ldrh	r3, [r3, #0]
 800307c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 8470 	beq.w	800396a <HCD_HC_IN_IRQHandler+0xccc>
 800308a:	78fa      	ldrb	r2, [r7, #3]
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	4613      	mov	r3, r2
 8003090:	011b      	lsls	r3, r3, #4
 8003092:	1a9b      	subs	r3, r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	440b      	add	r3, r1
 8003098:	333c      	adds	r3, #60	@ 0x3c
 800309a:	781b      	ldrb	r3, [r3, #0]
 800309c:	78fa      	ldrb	r2, [r7, #3]
 800309e:	f083 0301 	eor.w	r3, r3, #1
 80030a2:	b2d8      	uxtb	r0, r3
 80030a4:	6879      	ldr	r1, [r7, #4]
 80030a6:	4613      	mov	r3, r2
 80030a8:	011b      	lsls	r3, r3, #4
 80030aa:	1a9b      	subs	r3, r3, r2
 80030ac:	009b      	lsls	r3, r3, #2
 80030ae:	440b      	add	r3, r1
 80030b0:	333c      	adds	r3, #60	@ 0x3c
 80030b2:	4602      	mov	r2, r0
 80030b4:	701a      	strb	r2, [r3, #0]
 80030b6:	f000 bc58 	b.w	800396a <HCD_HC_IN_IRQHandler+0xccc>
 80030ba:	78fa      	ldrb	r2, [r7, #3]
 80030bc:	6879      	ldr	r1, [r7, #4]
 80030be:	4613      	mov	r3, r2
 80030c0:	011b      	lsls	r3, r3, #4
 80030c2:	1a9b      	subs	r3, r3, r2
 80030c4:	009b      	lsls	r3, r3, #2
 80030c6:	440b      	add	r3, r1
 80030c8:	333c      	adds	r3, #60	@ 0x3c
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	78fa      	ldrb	r2, [r7, #3]
 80030ce:	f083 0301 	eor.w	r3, r3, #1
 80030d2:	b2d8      	uxtb	r0, r3
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	1a9b      	subs	r3, r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	440b      	add	r3, r1
 80030e0:	333c      	adds	r3, #60	@ 0x3c
 80030e2:	4602      	mov	r2, r0
 80030e4:	701a      	strb	r2, [r3, #0]
 80030e6:	f000 bc40 	b.w	800396a <HCD_HC_IN_IRQHandler+0xccc>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	78fa      	ldrb	r2, [r7, #3]
 80030f0:	4611      	mov	r1, r2
 80030f2:	4618      	mov	r0, r3
 80030f4:	f005 f847 	bl	8008186 <USB_ReadChInterrupts>
 80030f8:	4603      	mov	r3, r0
 80030fa:	f003 0320 	and.w	r3, r3, #32
 80030fe:	2b20      	cmp	r3, #32
 8003100:	d131      	bne.n	8003166 <HCD_HC_IN_IRQHandler+0x4c8>
 8003102:	78fb      	ldrb	r3, [r7, #3]
 8003104:	015a      	lsls	r2, r3, #5
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	4413      	add	r3, r2
 800310a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800310e:	461a      	mov	r2, r3
 8003110:	2320      	movs	r3, #32
 8003112:	6093      	str	r3, [r2, #8]
 8003114:	78fa      	ldrb	r2, [r7, #3]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	1a9b      	subs	r3, r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	331a      	adds	r3, #26
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b01      	cmp	r3, #1
 8003128:	f040 841f 	bne.w	800396a <HCD_HC_IN_IRQHandler+0xccc>
 800312c:	78fa      	ldrb	r2, [r7, #3]
 800312e:	6879      	ldr	r1, [r7, #4]
 8003130:	4613      	mov	r3, r2
 8003132:	011b      	lsls	r3, r3, #4
 8003134:	1a9b      	subs	r3, r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	331b      	adds	r3, #27
 800313c:	2201      	movs	r2, #1
 800313e:	701a      	strb	r2, [r3, #0]
 8003140:	78fa      	ldrb	r2, [r7, #3]
 8003142:	6879      	ldr	r1, [r7, #4]
 8003144:	4613      	mov	r3, r2
 8003146:	011b      	lsls	r3, r3, #4
 8003148:	1a9b      	subs	r3, r3, r2
 800314a:	009b      	lsls	r3, r3, #2
 800314c:	440b      	add	r3, r1
 800314e:	334d      	adds	r3, #77	@ 0x4d
 8003150:	2203      	movs	r2, #3
 8003152:	701a      	strb	r2, [r3, #0]
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	78fa      	ldrb	r2, [r7, #3]
 800315a:	4611      	mov	r1, r2
 800315c:	4618      	mov	r0, r3
 800315e:	f005 fdb6 	bl	8008cce <USB_HC_Halt>
 8003162:	f000 bc02 	b.w	800396a <HCD_HC_IN_IRQHandler+0xccc>
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	78fa      	ldrb	r2, [r7, #3]
 800316c:	4611      	mov	r1, r2
 800316e:	4618      	mov	r0, r3
 8003170:	f005 f809 	bl	8008186 <USB_ReadChInterrupts>
 8003174:	4603      	mov	r3, r0
 8003176:	f003 0302 	and.w	r3, r3, #2
 800317a:	2b02      	cmp	r3, #2
 800317c:	f040 8305 	bne.w	800378a <HCD_HC_IN_IRQHandler+0xaec>
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	015a      	lsls	r2, r3, #5
 8003184:	693b      	ldr	r3, [r7, #16]
 8003186:	4413      	add	r3, r2
 8003188:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800318c:	461a      	mov	r2, r3
 800318e:	2302      	movs	r3, #2
 8003190:	6093      	str	r3, [r2, #8]
 8003192:	78fa      	ldrb	r2, [r7, #3]
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	1a9b      	subs	r3, r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	334d      	adds	r3, #77	@ 0x4d
 80031a2:	781b      	ldrb	r3, [r3, #0]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d114      	bne.n	80031d2 <HCD_HC_IN_IRQHandler+0x534>
 80031a8:	78fa      	ldrb	r2, [r7, #3]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	1a9b      	subs	r3, r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	334d      	adds	r3, #77	@ 0x4d
 80031b8:	2202      	movs	r2, #2
 80031ba:	701a      	strb	r2, [r3, #0]
 80031bc:	78fa      	ldrb	r2, [r7, #3]
 80031be:	6879      	ldr	r1, [r7, #4]
 80031c0:	4613      	mov	r3, r2
 80031c2:	011b      	lsls	r3, r3, #4
 80031c4:	1a9b      	subs	r3, r3, r2
 80031c6:	009b      	lsls	r3, r3, #2
 80031c8:	440b      	add	r3, r1
 80031ca:	334c      	adds	r3, #76	@ 0x4c
 80031cc:	2201      	movs	r2, #1
 80031ce:	701a      	strb	r2, [r3, #0]
 80031d0:	e2cc      	b.n	800376c <HCD_HC_IN_IRQHandler+0xace>
 80031d2:	78fa      	ldrb	r2, [r7, #3]
 80031d4:	6879      	ldr	r1, [r7, #4]
 80031d6:	4613      	mov	r3, r2
 80031d8:	011b      	lsls	r3, r3, #4
 80031da:	1a9b      	subs	r3, r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	440b      	add	r3, r1
 80031e0:	334d      	adds	r3, #77	@ 0x4d
 80031e2:	781b      	ldrb	r3, [r3, #0]
 80031e4:	2b06      	cmp	r3, #6
 80031e6:	d114      	bne.n	8003212 <HCD_HC_IN_IRQHandler+0x574>
 80031e8:	78fa      	ldrb	r2, [r7, #3]
 80031ea:	6879      	ldr	r1, [r7, #4]
 80031ec:	4613      	mov	r3, r2
 80031ee:	011b      	lsls	r3, r3, #4
 80031f0:	1a9b      	subs	r3, r3, r2
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	440b      	add	r3, r1
 80031f6:	334d      	adds	r3, #77	@ 0x4d
 80031f8:	2202      	movs	r2, #2
 80031fa:	701a      	strb	r2, [r3, #0]
 80031fc:	78fa      	ldrb	r2, [r7, #3]
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	4613      	mov	r3, r2
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	1a9b      	subs	r3, r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	440b      	add	r3, r1
 800320a:	334c      	adds	r3, #76	@ 0x4c
 800320c:	2205      	movs	r2, #5
 800320e:	701a      	strb	r2, [r3, #0]
 8003210:	e2ac      	b.n	800376c <HCD_HC_IN_IRQHandler+0xace>
 8003212:	78fa      	ldrb	r2, [r7, #3]
 8003214:	6879      	ldr	r1, [r7, #4]
 8003216:	4613      	mov	r3, r2
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	1a9b      	subs	r3, r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	440b      	add	r3, r1
 8003220:	334d      	adds	r3, #77	@ 0x4d
 8003222:	781b      	ldrb	r3, [r3, #0]
 8003224:	2b07      	cmp	r3, #7
 8003226:	d00b      	beq.n	8003240 <HCD_HC_IN_IRQHandler+0x5a2>
 8003228:	78fa      	ldrb	r2, [r7, #3]
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	4613      	mov	r3, r2
 800322e:	011b      	lsls	r3, r3, #4
 8003230:	1a9b      	subs	r3, r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	440b      	add	r3, r1
 8003236:	334d      	adds	r3, #77	@ 0x4d
 8003238:	781b      	ldrb	r3, [r3, #0]
 800323a:	2b09      	cmp	r3, #9
 800323c:	f040 80a6 	bne.w	800338c <HCD_HC_IN_IRQHandler+0x6ee>
 8003240:	78fa      	ldrb	r2, [r7, #3]
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	4613      	mov	r3, r2
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	1a9b      	subs	r3, r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	334d      	adds	r3, #77	@ 0x4d
 8003250:	2202      	movs	r2, #2
 8003252:	701a      	strb	r2, [r3, #0]
 8003254:	78fa      	ldrb	r2, [r7, #3]
 8003256:	6879      	ldr	r1, [r7, #4]
 8003258:	4613      	mov	r3, r2
 800325a:	011b      	lsls	r3, r3, #4
 800325c:	1a9b      	subs	r3, r3, r2
 800325e:	009b      	lsls	r3, r3, #2
 8003260:	440b      	add	r3, r1
 8003262:	3344      	adds	r3, #68	@ 0x44
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	1c59      	adds	r1, r3, #1
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	4613      	mov	r3, r2
 800326c:	011b      	lsls	r3, r3, #4
 800326e:	1a9b      	subs	r3, r3, r2
 8003270:	009b      	lsls	r3, r3, #2
 8003272:	4403      	add	r3, r0
 8003274:	3344      	adds	r3, #68	@ 0x44
 8003276:	6019      	str	r1, [r3, #0]
 8003278:	78fa      	ldrb	r2, [r7, #3]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	3344      	adds	r3, #68	@ 0x44
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d943      	bls.n	8003316 <HCD_HC_IN_IRQHandler+0x678>
 800328e:	78fa      	ldrb	r2, [r7, #3]
 8003290:	6879      	ldr	r1, [r7, #4]
 8003292:	4613      	mov	r3, r2
 8003294:	011b      	lsls	r3, r3, #4
 8003296:	1a9b      	subs	r3, r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	440b      	add	r3, r1
 800329c:	3344      	adds	r3, #68	@ 0x44
 800329e:	2200      	movs	r2, #0
 80032a0:	601a      	str	r2, [r3, #0]
 80032a2:	78fa      	ldrb	r2, [r7, #3]
 80032a4:	6879      	ldr	r1, [r7, #4]
 80032a6:	4613      	mov	r3, r2
 80032a8:	011b      	lsls	r3, r3, #4
 80032aa:	1a9b      	subs	r3, r3, r2
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	440b      	add	r3, r1
 80032b0:	331a      	adds	r3, #26
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d123      	bne.n	8003300 <HCD_HC_IN_IRQHandler+0x662>
 80032b8:	78fa      	ldrb	r2, [r7, #3]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	1a9b      	subs	r3, r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	331b      	adds	r3, #27
 80032c8:	2200      	movs	r2, #0
 80032ca:	701a      	strb	r2, [r3, #0]
 80032cc:	78fa      	ldrb	r2, [r7, #3]
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	4613      	mov	r3, r2
 80032d2:	011b      	lsls	r3, r3, #4
 80032d4:	1a9b      	subs	r3, r3, r2
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	440b      	add	r3, r1
 80032da:	331c      	adds	r3, #28
 80032dc:	2200      	movs	r2, #0
 80032de:	701a      	strb	r2, [r3, #0]
 80032e0:	78fb      	ldrb	r3, [r7, #3]
 80032e2:	015a      	lsls	r2, r3, #5
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	4413      	add	r3, r2
 80032e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	78fa      	ldrb	r2, [r7, #3]
 80032f0:	0151      	lsls	r1, r2, #5
 80032f2:	693a      	ldr	r2, [r7, #16]
 80032f4:	440a      	add	r2, r1
 80032f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032fe:	6053      	str	r3, [r2, #4]
 8003300:	78fa      	ldrb	r2, [r7, #3]
 8003302:	6879      	ldr	r1, [r7, #4]
 8003304:	4613      	mov	r3, r2
 8003306:	011b      	lsls	r3, r3, #4
 8003308:	1a9b      	subs	r3, r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	334c      	adds	r3, #76	@ 0x4c
 8003310:	2204      	movs	r2, #4
 8003312:	701a      	strb	r2, [r3, #0]
 8003314:	e229      	b.n	800376a <HCD_HC_IN_IRQHandler+0xacc>
 8003316:	78fa      	ldrb	r2, [r7, #3]
 8003318:	6879      	ldr	r1, [r7, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	011b      	lsls	r3, r3, #4
 800331e:	1a9b      	subs	r3, r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	440b      	add	r3, r1
 8003324:	334c      	adds	r3, #76	@ 0x4c
 8003326:	2202      	movs	r2, #2
 8003328:	701a      	strb	r2, [r3, #0]
 800332a:	78fa      	ldrb	r2, [r7, #3]
 800332c:	6879      	ldr	r1, [r7, #4]
 800332e:	4613      	mov	r3, r2
 8003330:	011b      	lsls	r3, r3, #4
 8003332:	1a9b      	subs	r3, r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	3326      	adds	r3, #38	@ 0x26
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00b      	beq.n	8003358 <HCD_HC_IN_IRQHandler+0x6ba>
 8003340:	78fa      	ldrb	r2, [r7, #3]
 8003342:	6879      	ldr	r1, [r7, #4]
 8003344:	4613      	mov	r3, r2
 8003346:	011b      	lsls	r3, r3, #4
 8003348:	1a9b      	subs	r3, r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	440b      	add	r3, r1
 800334e:	3326      	adds	r3, #38	@ 0x26
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	2b02      	cmp	r3, #2
 8003354:	f040 8209 	bne.w	800376a <HCD_HC_IN_IRQHandler+0xacc>
 8003358:	78fb      	ldrb	r3, [r7, #3]
 800335a:	015a      	lsls	r2, r3, #5
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	4413      	add	r3, r2
 8003360:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800336e:	60fb      	str	r3, [r7, #12]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003376:	60fb      	str	r3, [r7, #12]
 8003378:	78fb      	ldrb	r3, [r7, #3]
 800337a:	015a      	lsls	r2, r3, #5
 800337c:	693b      	ldr	r3, [r7, #16]
 800337e:	4413      	add	r3, r2
 8003380:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003384:	461a      	mov	r2, r3
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	e1ee      	b.n	800376a <HCD_HC_IN_IRQHandler+0xacc>
 800338c:	78fa      	ldrb	r2, [r7, #3]
 800338e:	6879      	ldr	r1, [r7, #4]
 8003390:	4613      	mov	r3, r2
 8003392:	011b      	lsls	r3, r3, #4
 8003394:	1a9b      	subs	r3, r3, r2
 8003396:	009b      	lsls	r3, r3, #2
 8003398:	440b      	add	r3, r1
 800339a:	334d      	adds	r3, #77	@ 0x4d
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	2b05      	cmp	r3, #5
 80033a0:	f040 80c8 	bne.w	8003534 <HCD_HC_IN_IRQHandler+0x896>
 80033a4:	78fa      	ldrb	r2, [r7, #3]
 80033a6:	6879      	ldr	r1, [r7, #4]
 80033a8:	4613      	mov	r3, r2
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	1a9b      	subs	r3, r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	440b      	add	r3, r1
 80033b2:	334d      	adds	r3, #77	@ 0x4d
 80033b4:	2202      	movs	r2, #2
 80033b6:	701a      	strb	r2, [r3, #0]
 80033b8:	78fa      	ldrb	r2, [r7, #3]
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	4613      	mov	r3, r2
 80033be:	011b      	lsls	r3, r3, #4
 80033c0:	1a9b      	subs	r3, r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	331b      	adds	r3, #27
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	f040 81ce 	bne.w	800376c <HCD_HC_IN_IRQHandler+0xace>
 80033d0:	78fa      	ldrb	r2, [r7, #3]
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	4613      	mov	r3, r2
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	1a9b      	subs	r3, r3, r2
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	440b      	add	r3, r1
 80033de:	3326      	adds	r3, #38	@ 0x26
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	2b03      	cmp	r3, #3
 80033e4:	d16b      	bne.n	80034be <HCD_HC_IN_IRQHandler+0x820>
 80033e6:	78fa      	ldrb	r2, [r7, #3]
 80033e8:	6879      	ldr	r1, [r7, #4]
 80033ea:	4613      	mov	r3, r2
 80033ec:	011b      	lsls	r3, r3, #4
 80033ee:	1a9b      	subs	r3, r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	440b      	add	r3, r1
 80033f4:	3348      	adds	r3, #72	@ 0x48
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	1c59      	adds	r1, r3, #1
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	4613      	mov	r3, r2
 80033fe:	011b      	lsls	r3, r3, #4
 8003400:	1a9b      	subs	r3, r3, r2
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	4403      	add	r3, r0
 8003406:	3348      	adds	r3, #72	@ 0x48
 8003408:	6019      	str	r1, [r3, #0]
 800340a:	78fa      	ldrb	r2, [r7, #3]
 800340c:	6879      	ldr	r1, [r7, #4]
 800340e:	4613      	mov	r3, r2
 8003410:	011b      	lsls	r3, r3, #4
 8003412:	1a9b      	subs	r3, r3, r2
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	440b      	add	r3, r1
 8003418:	3348      	adds	r3, #72	@ 0x48
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	2b02      	cmp	r3, #2
 800341e:	d943      	bls.n	80034a8 <HCD_HC_IN_IRQHandler+0x80a>
 8003420:	78fa      	ldrb	r2, [r7, #3]
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	4613      	mov	r3, r2
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	1a9b      	subs	r3, r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	3348      	adds	r3, #72	@ 0x48
 8003430:	2200      	movs	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	78fa      	ldrb	r2, [r7, #3]
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	4613      	mov	r3, r2
 800343a:	011b      	lsls	r3, r3, #4
 800343c:	1a9b      	subs	r3, r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	331b      	adds	r3, #27
 8003444:	2200      	movs	r2, #0
 8003446:	701a      	strb	r2, [r3, #0]
 8003448:	78fa      	ldrb	r2, [r7, #3]
 800344a:	6879      	ldr	r1, [r7, #4]
 800344c:	4613      	mov	r3, r2
 800344e:	011b      	lsls	r3, r3, #4
 8003450:	1a9b      	subs	r3, r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	3344      	adds	r3, #68	@ 0x44
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2b02      	cmp	r3, #2
 800345c:	d809      	bhi.n	8003472 <HCD_HC_IN_IRQHandler+0x7d4>
 800345e:	78fa      	ldrb	r2, [r7, #3]
 8003460:	6879      	ldr	r1, [r7, #4]
 8003462:	4613      	mov	r3, r2
 8003464:	011b      	lsls	r3, r3, #4
 8003466:	1a9b      	subs	r3, r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	440b      	add	r3, r1
 800346c:	331c      	adds	r3, #28
 800346e:	2201      	movs	r2, #1
 8003470:	701a      	strb	r2, [r3, #0]
 8003472:	78fb      	ldrb	r3, [r7, #3]
 8003474:	015a      	lsls	r2, r3, #5
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	4413      	add	r3, r2
 800347a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	78fa      	ldrb	r2, [r7, #3]
 8003482:	0151      	lsls	r1, r2, #5
 8003484:	693a      	ldr	r2, [r7, #16]
 8003486:	440a      	add	r2, r1
 8003488:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800348c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003490:	6053      	str	r3, [r2, #4]
 8003492:	78fa      	ldrb	r2, [r7, #3]
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	4613      	mov	r3, r2
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	1a9b      	subs	r3, r3, r2
 800349c:	009b      	lsls	r3, r3, #2
 800349e:	440b      	add	r3, r1
 80034a0:	334c      	adds	r3, #76	@ 0x4c
 80034a2:	2204      	movs	r2, #4
 80034a4:	701a      	strb	r2, [r3, #0]
 80034a6:	e014      	b.n	80034d2 <HCD_HC_IN_IRQHandler+0x834>
 80034a8:	78fa      	ldrb	r2, [r7, #3]
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	4613      	mov	r3, r2
 80034ae:	011b      	lsls	r3, r3, #4
 80034b0:	1a9b      	subs	r3, r3, r2
 80034b2:	009b      	lsls	r3, r3, #2
 80034b4:	440b      	add	r3, r1
 80034b6:	334c      	adds	r3, #76	@ 0x4c
 80034b8:	2202      	movs	r2, #2
 80034ba:	701a      	strb	r2, [r3, #0]
 80034bc:	e009      	b.n	80034d2 <HCD_HC_IN_IRQHandler+0x834>
 80034be:	78fa      	ldrb	r2, [r7, #3]
 80034c0:	6879      	ldr	r1, [r7, #4]
 80034c2:	4613      	mov	r3, r2
 80034c4:	011b      	lsls	r3, r3, #4
 80034c6:	1a9b      	subs	r3, r3, r2
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	440b      	add	r3, r1
 80034cc:	334c      	adds	r3, #76	@ 0x4c
 80034ce:	2202      	movs	r2, #2
 80034d0:	701a      	strb	r2, [r3, #0]
 80034d2:	78fa      	ldrb	r2, [r7, #3]
 80034d4:	6879      	ldr	r1, [r7, #4]
 80034d6:	4613      	mov	r3, r2
 80034d8:	011b      	lsls	r3, r3, #4
 80034da:	1a9b      	subs	r3, r3, r2
 80034dc:	009b      	lsls	r3, r3, #2
 80034de:	440b      	add	r3, r1
 80034e0:	3326      	adds	r3, #38	@ 0x26
 80034e2:	781b      	ldrb	r3, [r3, #0]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00b      	beq.n	8003500 <HCD_HC_IN_IRQHandler+0x862>
 80034e8:	78fa      	ldrb	r2, [r7, #3]
 80034ea:	6879      	ldr	r1, [r7, #4]
 80034ec:	4613      	mov	r3, r2
 80034ee:	011b      	lsls	r3, r3, #4
 80034f0:	1a9b      	subs	r3, r3, r2
 80034f2:	009b      	lsls	r3, r3, #2
 80034f4:	440b      	add	r3, r1
 80034f6:	3326      	adds	r3, #38	@ 0x26
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	f040 8136 	bne.w	800376c <HCD_HC_IN_IRQHandler+0xace>
 8003500:	78fb      	ldrb	r3, [r7, #3]
 8003502:	015a      	lsls	r2, r3, #5
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	4413      	add	r3, r2
 8003508:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	60fb      	str	r3, [r7, #12]
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003516:	60fb      	str	r3, [r7, #12]
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	78fb      	ldrb	r3, [r7, #3]
 8003522:	015a      	lsls	r2, r3, #5
 8003524:	693b      	ldr	r3, [r7, #16]
 8003526:	4413      	add	r3, r2
 8003528:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800352c:	461a      	mov	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	6013      	str	r3, [r2, #0]
 8003532:	e11b      	b.n	800376c <HCD_HC_IN_IRQHandler+0xace>
 8003534:	78fa      	ldrb	r2, [r7, #3]
 8003536:	6879      	ldr	r1, [r7, #4]
 8003538:	4613      	mov	r3, r2
 800353a:	011b      	lsls	r3, r3, #4
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	009b      	lsls	r3, r3, #2
 8003540:	440b      	add	r3, r1
 8003542:	334d      	adds	r3, #77	@ 0x4d
 8003544:	781b      	ldrb	r3, [r3, #0]
 8003546:	2b03      	cmp	r3, #3
 8003548:	f040 8081 	bne.w	800364e <HCD_HC_IN_IRQHandler+0x9b0>
 800354c:	78fa      	ldrb	r2, [r7, #3]
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	4613      	mov	r3, r2
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	1a9b      	subs	r3, r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	334d      	adds	r3, #77	@ 0x4d
 800355c:	2202      	movs	r2, #2
 800355e:	701a      	strb	r2, [r3, #0]
 8003560:	78fa      	ldrb	r2, [r7, #3]
 8003562:	6879      	ldr	r1, [r7, #4]
 8003564:	4613      	mov	r3, r2
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	1a9b      	subs	r3, r3, r2
 800356a:	009b      	lsls	r3, r3, #2
 800356c:	440b      	add	r3, r1
 800356e:	331b      	adds	r3, #27
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b01      	cmp	r3, #1
 8003574:	f040 80fa 	bne.w	800376c <HCD_HC_IN_IRQHandler+0xace>
 8003578:	78fa      	ldrb	r2, [r7, #3]
 800357a:	6879      	ldr	r1, [r7, #4]
 800357c:	4613      	mov	r3, r2
 800357e:	011b      	lsls	r3, r3, #4
 8003580:	1a9b      	subs	r3, r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	440b      	add	r3, r1
 8003586:	334c      	adds	r3, #76	@ 0x4c
 8003588:	2202      	movs	r2, #2
 800358a:	701a      	strb	r2, [r3, #0]
 800358c:	78fb      	ldrb	r3, [r7, #3]
 800358e:	015a      	lsls	r2, r3, #5
 8003590:	693b      	ldr	r3, [r7, #16]
 8003592:	4413      	add	r3, r2
 8003594:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	78fa      	ldrb	r2, [r7, #3]
 800359c:	0151      	lsls	r1, r2, #5
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	440a      	add	r2, r1
 80035a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80035a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80035aa:	6053      	str	r3, [r2, #4]
 80035ac:	78fb      	ldrb	r3, [r7, #3]
 80035ae:	015a      	lsls	r2, r3, #5
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	4413      	add	r3, r2
 80035b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035b8:	68db      	ldr	r3, [r3, #12]
 80035ba:	78fa      	ldrb	r2, [r7, #3]
 80035bc:	0151      	lsls	r1, r2, #5
 80035be:	693a      	ldr	r2, [r7, #16]
 80035c0:	440a      	add	r2, r1
 80035c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80035c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80035ca:	60d3      	str	r3, [r2, #12]
 80035cc:	78fb      	ldrb	r3, [r7, #3]
 80035ce:	015a      	lsls	r2, r3, #5
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	4413      	add	r3, r2
 80035d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	78fa      	ldrb	r2, [r7, #3]
 80035dc:	0151      	lsls	r1, r2, #5
 80035de:	693a      	ldr	r2, [r7, #16]
 80035e0:	440a      	add	r2, r1
 80035e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80035e6:	f023 0320 	bic.w	r3, r3, #32
 80035ea:	60d3      	str	r3, [r2, #12]
 80035ec:	78fa      	ldrb	r2, [r7, #3]
 80035ee:	6879      	ldr	r1, [r7, #4]
 80035f0:	4613      	mov	r3, r2
 80035f2:	011b      	lsls	r3, r3, #4
 80035f4:	1a9b      	subs	r3, r3, r2
 80035f6:	009b      	lsls	r3, r3, #2
 80035f8:	440b      	add	r3, r1
 80035fa:	3326      	adds	r3, #38	@ 0x26
 80035fc:	781b      	ldrb	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d00b      	beq.n	800361a <HCD_HC_IN_IRQHandler+0x97c>
 8003602:	78fa      	ldrb	r2, [r7, #3]
 8003604:	6879      	ldr	r1, [r7, #4]
 8003606:	4613      	mov	r3, r2
 8003608:	011b      	lsls	r3, r3, #4
 800360a:	1a9b      	subs	r3, r3, r2
 800360c:	009b      	lsls	r3, r3, #2
 800360e:	440b      	add	r3, r1
 8003610:	3326      	adds	r3, #38	@ 0x26
 8003612:	781b      	ldrb	r3, [r3, #0]
 8003614:	2b02      	cmp	r3, #2
 8003616:	f040 80a9 	bne.w	800376c <HCD_HC_IN_IRQHandler+0xace>
 800361a:	78fb      	ldrb	r3, [r7, #3]
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	4413      	add	r3, r2
 8003622:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	60fb      	str	r3, [r7, #12]
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003630:	60fb      	str	r3, [r7, #12]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003638:	60fb      	str	r3, [r7, #12]
 800363a:	78fb      	ldrb	r3, [r7, #3]
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4413      	add	r3, r2
 8003642:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003646:	461a      	mov	r2, r3
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6013      	str	r3, [r2, #0]
 800364c:	e08e      	b.n	800376c <HCD_HC_IN_IRQHandler+0xace>
 800364e:	78fa      	ldrb	r2, [r7, #3]
 8003650:	6879      	ldr	r1, [r7, #4]
 8003652:	4613      	mov	r3, r2
 8003654:	011b      	lsls	r3, r3, #4
 8003656:	1a9b      	subs	r3, r3, r2
 8003658:	009b      	lsls	r3, r3, #2
 800365a:	440b      	add	r3, r1
 800365c:	334d      	adds	r3, #77	@ 0x4d
 800365e:	781b      	ldrb	r3, [r3, #0]
 8003660:	2b04      	cmp	r3, #4
 8003662:	d143      	bne.n	80036ec <HCD_HC_IN_IRQHandler+0xa4e>
 8003664:	78fa      	ldrb	r2, [r7, #3]
 8003666:	6879      	ldr	r1, [r7, #4]
 8003668:	4613      	mov	r3, r2
 800366a:	011b      	lsls	r3, r3, #4
 800366c:	1a9b      	subs	r3, r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	334d      	adds	r3, #77	@ 0x4d
 8003674:	2202      	movs	r2, #2
 8003676:	701a      	strb	r2, [r3, #0]
 8003678:	78fa      	ldrb	r2, [r7, #3]
 800367a:	6879      	ldr	r1, [r7, #4]
 800367c:	4613      	mov	r3, r2
 800367e:	011b      	lsls	r3, r3, #4
 8003680:	1a9b      	subs	r3, r3, r2
 8003682:	009b      	lsls	r3, r3, #2
 8003684:	440b      	add	r3, r1
 8003686:	334c      	adds	r3, #76	@ 0x4c
 8003688:	2202      	movs	r2, #2
 800368a:	701a      	strb	r2, [r3, #0]
 800368c:	78fa      	ldrb	r2, [r7, #3]
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	4613      	mov	r3, r2
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	1a9b      	subs	r3, r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	3326      	adds	r3, #38	@ 0x26
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d00a      	beq.n	80036b8 <HCD_HC_IN_IRQHandler+0xa1a>
 80036a2:	78fa      	ldrb	r2, [r7, #3]
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	4613      	mov	r3, r2
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	1a9b      	subs	r3, r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	440b      	add	r3, r1
 80036b0:	3326      	adds	r3, #38	@ 0x26
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d159      	bne.n	800376c <HCD_HC_IN_IRQHandler+0xace>
 80036b8:	78fb      	ldrb	r3, [r7, #3]
 80036ba:	015a      	lsls	r2, r3, #5
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	4413      	add	r3, r2
 80036c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80036d6:	60fb      	str	r3, [r7, #12]
 80036d8:	78fb      	ldrb	r3, [r7, #3]
 80036da:	015a      	lsls	r2, r3, #5
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	4413      	add	r3, r2
 80036e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036e4:	461a      	mov	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6013      	str	r3, [r2, #0]
 80036ea:	e03f      	b.n	800376c <HCD_HC_IN_IRQHandler+0xace>
 80036ec:	78fa      	ldrb	r2, [r7, #3]
 80036ee:	6879      	ldr	r1, [r7, #4]
 80036f0:	4613      	mov	r3, r2
 80036f2:	011b      	lsls	r3, r3, #4
 80036f4:	1a9b      	subs	r3, r3, r2
 80036f6:	009b      	lsls	r3, r3, #2
 80036f8:	440b      	add	r3, r1
 80036fa:	334d      	adds	r3, #77	@ 0x4d
 80036fc:	781b      	ldrb	r3, [r3, #0]
 80036fe:	2b08      	cmp	r3, #8
 8003700:	d126      	bne.n	8003750 <HCD_HC_IN_IRQHandler+0xab2>
 8003702:	78fa      	ldrb	r2, [r7, #3]
 8003704:	6879      	ldr	r1, [r7, #4]
 8003706:	4613      	mov	r3, r2
 8003708:	011b      	lsls	r3, r3, #4
 800370a:	1a9b      	subs	r3, r3, r2
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	440b      	add	r3, r1
 8003710:	334d      	adds	r3, #77	@ 0x4d
 8003712:	2202      	movs	r2, #2
 8003714:	701a      	strb	r2, [r3, #0]
 8003716:	78fa      	ldrb	r2, [r7, #3]
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	4613      	mov	r3, r2
 800371c:	011b      	lsls	r3, r3, #4
 800371e:	1a9b      	subs	r3, r3, r2
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	440b      	add	r3, r1
 8003724:	3344      	adds	r3, #68	@ 0x44
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	1c59      	adds	r1, r3, #1
 800372a:	6878      	ldr	r0, [r7, #4]
 800372c:	4613      	mov	r3, r2
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	1a9b      	subs	r3, r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4403      	add	r3, r0
 8003736:	3344      	adds	r3, #68	@ 0x44
 8003738:	6019      	str	r1, [r3, #0]
 800373a:	78fa      	ldrb	r2, [r7, #3]
 800373c:	6879      	ldr	r1, [r7, #4]
 800373e:	4613      	mov	r3, r2
 8003740:	011b      	lsls	r3, r3, #4
 8003742:	1a9b      	subs	r3, r3, r2
 8003744:	009b      	lsls	r3, r3, #2
 8003746:	440b      	add	r3, r1
 8003748:	334c      	adds	r3, #76	@ 0x4c
 800374a:	2204      	movs	r2, #4
 800374c:	701a      	strb	r2, [r3, #0]
 800374e:	e00d      	b.n	800376c <HCD_HC_IN_IRQHandler+0xace>
 8003750:	78fa      	ldrb	r2, [r7, #3]
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	4613      	mov	r3, r2
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	1a9b      	subs	r3, r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	334d      	adds	r3, #77	@ 0x4d
 8003760:	781b      	ldrb	r3, [r3, #0]
 8003762:	2b02      	cmp	r3, #2
 8003764:	f000 8100 	beq.w	8003968 <HCD_HC_IN_IRQHandler+0xcca>
 8003768:	e000      	b.n	800376c <HCD_HC_IN_IRQHandler+0xace>
 800376a:	bf00      	nop
 800376c:	78fa      	ldrb	r2, [r7, #3]
 800376e:	6879      	ldr	r1, [r7, #4]
 8003770:	4613      	mov	r3, r2
 8003772:	011b      	lsls	r3, r3, #4
 8003774:	1a9b      	subs	r3, r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	440b      	add	r3, r1
 800377a:	334c      	adds	r3, #76	@ 0x4c
 800377c:	781a      	ldrb	r2, [r3, #0]
 800377e:	78fb      	ldrb	r3, [r7, #3]
 8003780:	4619      	mov	r1, r3
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f007 fdf8 	bl	800b378 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003788:	e0ef      	b.n	800396a <HCD_HC_IN_IRQHandler+0xccc>
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	78fa      	ldrb	r2, [r7, #3]
 8003790:	4611      	mov	r1, r2
 8003792:	4618      	mov	r0, r3
 8003794:	f004 fcf7 	bl	8008186 <USB_ReadChInterrupts>
 8003798:	4603      	mov	r3, r0
 800379a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800379e:	2b40      	cmp	r3, #64	@ 0x40
 80037a0:	d12f      	bne.n	8003802 <HCD_HC_IN_IRQHandler+0xb64>
 80037a2:	78fb      	ldrb	r3, [r7, #3]
 80037a4:	015a      	lsls	r2, r3, #5
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	4413      	add	r3, r2
 80037aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037ae:	461a      	mov	r2, r3
 80037b0:	2340      	movs	r3, #64	@ 0x40
 80037b2:	6093      	str	r3, [r2, #8]
 80037b4:	78fa      	ldrb	r2, [r7, #3]
 80037b6:	6879      	ldr	r1, [r7, #4]
 80037b8:	4613      	mov	r3, r2
 80037ba:	011b      	lsls	r3, r3, #4
 80037bc:	1a9b      	subs	r3, r3, r2
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	440b      	add	r3, r1
 80037c2:	334d      	adds	r3, #77	@ 0x4d
 80037c4:	2205      	movs	r2, #5
 80037c6:	701a      	strb	r2, [r3, #0]
 80037c8:	78fa      	ldrb	r2, [r7, #3]
 80037ca:	6879      	ldr	r1, [r7, #4]
 80037cc:	4613      	mov	r3, r2
 80037ce:	011b      	lsls	r3, r3, #4
 80037d0:	1a9b      	subs	r3, r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	440b      	add	r3, r1
 80037d6:	331a      	adds	r3, #26
 80037d8:	781b      	ldrb	r3, [r3, #0]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d109      	bne.n	80037f2 <HCD_HC_IN_IRQHandler+0xb54>
 80037de:	78fa      	ldrb	r2, [r7, #3]
 80037e0:	6879      	ldr	r1, [r7, #4]
 80037e2:	4613      	mov	r3, r2
 80037e4:	011b      	lsls	r3, r3, #4
 80037e6:	1a9b      	subs	r3, r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	440b      	add	r3, r1
 80037ec:	3344      	adds	r3, #68	@ 0x44
 80037ee:	2200      	movs	r2, #0
 80037f0:	601a      	str	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	78fa      	ldrb	r2, [r7, #3]
 80037f8:	4611      	mov	r1, r2
 80037fa:	4618      	mov	r0, r3
 80037fc:	f005 fa67 	bl	8008cce <USB_HC_Halt>
 8003800:	e0b3      	b.n	800396a <HCD_HC_IN_IRQHandler+0xccc>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	78fa      	ldrb	r2, [r7, #3]
 8003808:	4611      	mov	r1, r2
 800380a:	4618      	mov	r0, r3
 800380c:	f004 fcbb 	bl	8008186 <USB_ReadChInterrupts>
 8003810:	4603      	mov	r3, r0
 8003812:	f003 0310 	and.w	r3, r3, #16
 8003816:	2b10      	cmp	r3, #16
 8003818:	f040 80a7 	bne.w	800396a <HCD_HC_IN_IRQHandler+0xccc>
 800381c:	78fa      	ldrb	r2, [r7, #3]
 800381e:	6879      	ldr	r1, [r7, #4]
 8003820:	4613      	mov	r3, r2
 8003822:	011b      	lsls	r3, r3, #4
 8003824:	1a9b      	subs	r3, r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	440b      	add	r3, r1
 800382a:	3326      	adds	r3, #38	@ 0x26
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	2b03      	cmp	r3, #3
 8003830:	d11b      	bne.n	800386a <HCD_HC_IN_IRQHandler+0xbcc>
 8003832:	78fa      	ldrb	r2, [r7, #3]
 8003834:	6879      	ldr	r1, [r7, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	011b      	lsls	r3, r3, #4
 800383a:	1a9b      	subs	r3, r3, r2
 800383c:	009b      	lsls	r3, r3, #2
 800383e:	440b      	add	r3, r1
 8003840:	3344      	adds	r3, #68	@ 0x44
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	78fa      	ldrb	r2, [r7, #3]
 8003848:	6879      	ldr	r1, [r7, #4]
 800384a:	4613      	mov	r3, r2
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	1a9b      	subs	r3, r3, r2
 8003850:	009b      	lsls	r3, r3, #2
 8003852:	440b      	add	r3, r1
 8003854:	334d      	adds	r3, #77	@ 0x4d
 8003856:	2204      	movs	r2, #4
 8003858:	701a      	strb	r2, [r3, #0]
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	78fa      	ldrb	r2, [r7, #3]
 8003860:	4611      	mov	r1, r2
 8003862:	4618      	mov	r0, r3
 8003864:	f005 fa33 	bl	8008cce <USB_HC_Halt>
 8003868:	e03f      	b.n	80038ea <HCD_HC_IN_IRQHandler+0xc4c>
 800386a:	78fa      	ldrb	r2, [r7, #3]
 800386c:	6879      	ldr	r1, [r7, #4]
 800386e:	4613      	mov	r3, r2
 8003870:	011b      	lsls	r3, r3, #4
 8003872:	1a9b      	subs	r3, r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	440b      	add	r3, r1
 8003878:	3326      	adds	r3, #38	@ 0x26
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d00a      	beq.n	8003896 <HCD_HC_IN_IRQHandler+0xbf8>
 8003880:	78fa      	ldrb	r2, [r7, #3]
 8003882:	6879      	ldr	r1, [r7, #4]
 8003884:	4613      	mov	r3, r2
 8003886:	011b      	lsls	r3, r3, #4
 8003888:	1a9b      	subs	r3, r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	440b      	add	r3, r1
 800388e:	3326      	adds	r3, #38	@ 0x26
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	2b02      	cmp	r3, #2
 8003894:	d129      	bne.n	80038ea <HCD_HC_IN_IRQHandler+0xc4c>
 8003896:	78fa      	ldrb	r2, [r7, #3]
 8003898:	6879      	ldr	r1, [r7, #4]
 800389a:	4613      	mov	r3, r2
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	1a9b      	subs	r3, r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	440b      	add	r3, r1
 80038a4:	3344      	adds	r3, #68	@ 0x44
 80038a6:	2200      	movs	r2, #0
 80038a8:	601a      	str	r2, [r3, #0]
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	799b      	ldrb	r3, [r3, #6]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00a      	beq.n	80038c8 <HCD_HC_IN_IRQHandler+0xc2a>
 80038b2:	78fa      	ldrb	r2, [r7, #3]
 80038b4:	6879      	ldr	r1, [r7, #4]
 80038b6:	4613      	mov	r3, r2
 80038b8:	011b      	lsls	r3, r3, #4
 80038ba:	1a9b      	subs	r3, r3, r2
 80038bc:	009b      	lsls	r3, r3, #2
 80038be:	440b      	add	r3, r1
 80038c0:	331b      	adds	r3, #27
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2b01      	cmp	r3, #1
 80038c6:	d110      	bne.n	80038ea <HCD_HC_IN_IRQHandler+0xc4c>
 80038c8:	78fa      	ldrb	r2, [r7, #3]
 80038ca:	6879      	ldr	r1, [r7, #4]
 80038cc:	4613      	mov	r3, r2
 80038ce:	011b      	lsls	r3, r3, #4
 80038d0:	1a9b      	subs	r3, r3, r2
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	440b      	add	r3, r1
 80038d6:	334d      	adds	r3, #77	@ 0x4d
 80038d8:	2204      	movs	r2, #4
 80038da:	701a      	strb	r2, [r3, #0]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	78fa      	ldrb	r2, [r7, #3]
 80038e2:	4611      	mov	r1, r2
 80038e4:	4618      	mov	r0, r3
 80038e6:	f005 f9f2 	bl	8008cce <USB_HC_Halt>
 80038ea:	78fa      	ldrb	r2, [r7, #3]
 80038ec:	6879      	ldr	r1, [r7, #4]
 80038ee:	4613      	mov	r3, r2
 80038f0:	011b      	lsls	r3, r3, #4
 80038f2:	1a9b      	subs	r3, r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	440b      	add	r3, r1
 80038f8:	331b      	adds	r3, #27
 80038fa:	781b      	ldrb	r3, [r3, #0]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d129      	bne.n	8003954 <HCD_HC_IN_IRQHandler+0xcb6>
 8003900:	78fa      	ldrb	r2, [r7, #3]
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	4613      	mov	r3, r2
 8003906:	011b      	lsls	r3, r3, #4
 8003908:	1a9b      	subs	r3, r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	331b      	adds	r3, #27
 8003910:	2200      	movs	r2, #0
 8003912:	701a      	strb	r2, [r3, #0]
 8003914:	78fb      	ldrb	r3, [r7, #3]
 8003916:	015a      	lsls	r2, r3, #5
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	4413      	add	r3, r2
 800391c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	78fa      	ldrb	r2, [r7, #3]
 8003924:	0151      	lsls	r1, r2, #5
 8003926:	693a      	ldr	r2, [r7, #16]
 8003928:	440a      	add	r2, r1
 800392a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800392e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003932:	6053      	str	r3, [r2, #4]
 8003934:	78fb      	ldrb	r3, [r7, #3]
 8003936:	015a      	lsls	r2, r3, #5
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	4413      	add	r3, r2
 800393c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003940:	68db      	ldr	r3, [r3, #12]
 8003942:	78fa      	ldrb	r2, [r7, #3]
 8003944:	0151      	lsls	r1, r2, #5
 8003946:	693a      	ldr	r2, [r7, #16]
 8003948:	440a      	add	r2, r1
 800394a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800394e:	f043 0320 	orr.w	r3, r3, #32
 8003952:	60d3      	str	r3, [r2, #12]
 8003954:	78fb      	ldrb	r3, [r7, #3]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	4413      	add	r3, r2
 800395c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003960:	461a      	mov	r2, r3
 8003962:	2310      	movs	r3, #16
 8003964:	6093      	str	r3, [r2, #8]
 8003966:	e000      	b.n	800396a <HCD_HC_IN_IRQHandler+0xccc>
 8003968:	bf00      	nop
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <HCD_HC_OUT_IRQHandler>:
 8003970:	b580      	push	{r7, lr}
 8003972:	b086      	sub	sp, #24
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	460b      	mov	r3, r1
 800397a:	70fb      	strb	r3, [r7, #3]
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	617b      	str	r3, [r7, #20]
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	78fa      	ldrb	r2, [r7, #3]
 800398c:	4611      	mov	r1, r2
 800398e:	4618      	mov	r0, r3
 8003990:	f004 fbf9 	bl	8008186 <USB_ReadChInterrupts>
 8003994:	4603      	mov	r3, r0
 8003996:	f003 0304 	and.w	r3, r3, #4
 800399a:	2b04      	cmp	r3, #4
 800399c:	d11b      	bne.n	80039d6 <HCD_HC_OUT_IRQHandler+0x66>
 800399e:	78fb      	ldrb	r3, [r7, #3]
 80039a0:	015a      	lsls	r2, r3, #5
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	4413      	add	r3, r2
 80039a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039aa:	461a      	mov	r2, r3
 80039ac:	2304      	movs	r3, #4
 80039ae:	6093      	str	r3, [r2, #8]
 80039b0:	78fa      	ldrb	r2, [r7, #3]
 80039b2:	6879      	ldr	r1, [r7, #4]
 80039b4:	4613      	mov	r3, r2
 80039b6:	011b      	lsls	r3, r3, #4
 80039b8:	1a9b      	subs	r3, r3, r2
 80039ba:	009b      	lsls	r3, r3, #2
 80039bc:	440b      	add	r3, r1
 80039be:	334d      	adds	r3, #77	@ 0x4d
 80039c0:	2207      	movs	r2, #7
 80039c2:	701a      	strb	r2, [r3, #0]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	78fa      	ldrb	r2, [r7, #3]
 80039ca:	4611      	mov	r1, r2
 80039cc:	4618      	mov	r0, r3
 80039ce:	f005 f97e 	bl	8008cce <USB_HC_Halt>
 80039d2:	f000 bc89 	b.w	80042e8 <HCD_HC_OUT_IRQHandler+0x978>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	78fa      	ldrb	r2, [r7, #3]
 80039dc:	4611      	mov	r1, r2
 80039de:	4618      	mov	r0, r3
 80039e0:	f004 fbd1 	bl	8008186 <USB_ReadChInterrupts>
 80039e4:	4603      	mov	r3, r0
 80039e6:	f003 0320 	and.w	r3, r3, #32
 80039ea:	2b20      	cmp	r3, #32
 80039ec:	f040 8082 	bne.w	8003af4 <HCD_HC_OUT_IRQHandler+0x184>
 80039f0:	78fb      	ldrb	r3, [r7, #3]
 80039f2:	015a      	lsls	r2, r3, #5
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	4413      	add	r3, r2
 80039f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039fc:	461a      	mov	r2, r3
 80039fe:	2320      	movs	r3, #32
 8003a00:	6093      	str	r3, [r2, #8]
 8003a02:	78fa      	ldrb	r2, [r7, #3]
 8003a04:	6879      	ldr	r1, [r7, #4]
 8003a06:	4613      	mov	r3, r2
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	1a9b      	subs	r3, r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	440b      	add	r3, r1
 8003a10:	3319      	adds	r3, #25
 8003a12:	781b      	ldrb	r3, [r3, #0]
 8003a14:	2b01      	cmp	r3, #1
 8003a16:	d124      	bne.n	8003a62 <HCD_HC_OUT_IRQHandler+0xf2>
 8003a18:	78fa      	ldrb	r2, [r7, #3]
 8003a1a:	6879      	ldr	r1, [r7, #4]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	011b      	lsls	r3, r3, #4
 8003a20:	1a9b      	subs	r3, r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	3319      	adds	r3, #25
 8003a28:	2200      	movs	r2, #0
 8003a2a:	701a      	strb	r2, [r3, #0]
 8003a2c:	78fa      	ldrb	r2, [r7, #3]
 8003a2e:	6879      	ldr	r1, [r7, #4]
 8003a30:	4613      	mov	r3, r2
 8003a32:	011b      	lsls	r3, r3, #4
 8003a34:	1a9b      	subs	r3, r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	440b      	add	r3, r1
 8003a3a:	334c      	adds	r3, #76	@ 0x4c
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	701a      	strb	r2, [r3, #0]
 8003a40:	78fa      	ldrb	r2, [r7, #3]
 8003a42:	6879      	ldr	r1, [r7, #4]
 8003a44:	4613      	mov	r3, r2
 8003a46:	011b      	lsls	r3, r3, #4
 8003a48:	1a9b      	subs	r3, r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	334d      	adds	r3, #77	@ 0x4d
 8003a50:	2203      	movs	r2, #3
 8003a52:	701a      	strb	r2, [r3, #0]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	78fa      	ldrb	r2, [r7, #3]
 8003a5a:	4611      	mov	r1, r2
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f005 f936 	bl	8008cce <USB_HC_Halt>
 8003a62:	78fa      	ldrb	r2, [r7, #3]
 8003a64:	6879      	ldr	r1, [r7, #4]
 8003a66:	4613      	mov	r3, r2
 8003a68:	011b      	lsls	r3, r3, #4
 8003a6a:	1a9b      	subs	r3, r3, r2
 8003a6c:	009b      	lsls	r3, r3, #2
 8003a6e:	440b      	add	r3, r1
 8003a70:	331a      	adds	r3, #26
 8003a72:	781b      	ldrb	r3, [r3, #0]
 8003a74:	2b01      	cmp	r3, #1
 8003a76:	f040 8437 	bne.w	80042e8 <HCD_HC_OUT_IRQHandler+0x978>
 8003a7a:	78fa      	ldrb	r2, [r7, #3]
 8003a7c:	6879      	ldr	r1, [r7, #4]
 8003a7e:	4613      	mov	r3, r2
 8003a80:	011b      	lsls	r3, r3, #4
 8003a82:	1a9b      	subs	r3, r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	440b      	add	r3, r1
 8003a88:	331b      	adds	r3, #27
 8003a8a:	781b      	ldrb	r3, [r3, #0]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	f040 842b 	bne.w	80042e8 <HCD_HC_OUT_IRQHandler+0x978>
 8003a92:	78fa      	ldrb	r2, [r7, #3]
 8003a94:	6879      	ldr	r1, [r7, #4]
 8003a96:	4613      	mov	r3, r2
 8003a98:	011b      	lsls	r3, r3, #4
 8003a9a:	1a9b      	subs	r3, r3, r2
 8003a9c:	009b      	lsls	r3, r3, #2
 8003a9e:	440b      	add	r3, r1
 8003aa0:	3326      	adds	r3, #38	@ 0x26
 8003aa2:	781b      	ldrb	r3, [r3, #0]
 8003aa4:	2b01      	cmp	r3, #1
 8003aa6:	d009      	beq.n	8003abc <HCD_HC_OUT_IRQHandler+0x14c>
 8003aa8:	78fa      	ldrb	r2, [r7, #3]
 8003aaa:	6879      	ldr	r1, [r7, #4]
 8003aac:	4613      	mov	r3, r2
 8003aae:	011b      	lsls	r3, r3, #4
 8003ab0:	1a9b      	subs	r3, r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	440b      	add	r3, r1
 8003ab6:	331b      	adds	r3, #27
 8003ab8:	2201      	movs	r2, #1
 8003aba:	701a      	strb	r2, [r3, #0]
 8003abc:	78fa      	ldrb	r2, [r7, #3]
 8003abe:	6879      	ldr	r1, [r7, #4]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	011b      	lsls	r3, r3, #4
 8003ac4:	1a9b      	subs	r3, r3, r2
 8003ac6:	009b      	lsls	r3, r3, #2
 8003ac8:	440b      	add	r3, r1
 8003aca:	334d      	adds	r3, #77	@ 0x4d
 8003acc:	2203      	movs	r2, #3
 8003ace:	701a      	strb	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	78fa      	ldrb	r2, [r7, #3]
 8003ad6:	4611      	mov	r1, r2
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f005 f8f8 	bl	8008cce <USB_HC_Halt>
 8003ade:	78fa      	ldrb	r2, [r7, #3]
 8003ae0:	6879      	ldr	r1, [r7, #4]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	1a9b      	subs	r3, r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	440b      	add	r3, r1
 8003aec:	3344      	adds	r3, #68	@ 0x44
 8003aee:	2200      	movs	r2, #0
 8003af0:	601a      	str	r2, [r3, #0]
 8003af2:	e3f9      	b.n	80042e8 <HCD_HC_OUT_IRQHandler+0x978>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	78fa      	ldrb	r2, [r7, #3]
 8003afa:	4611      	mov	r1, r2
 8003afc:	4618      	mov	r0, r3
 8003afe:	f004 fb42 	bl	8008186 <USB_ReadChInterrupts>
 8003b02:	4603      	mov	r3, r0
 8003b04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b0c:	d111      	bne.n	8003b32 <HCD_HC_OUT_IRQHandler+0x1c2>
 8003b0e:	78fb      	ldrb	r3, [r7, #3]
 8003b10:	015a      	lsls	r2, r3, #5
 8003b12:	693b      	ldr	r3, [r7, #16]
 8003b14:	4413      	add	r3, r2
 8003b16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003b20:	6093      	str	r3, [r2, #8]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	78fa      	ldrb	r2, [r7, #3]
 8003b28:	4611      	mov	r1, r2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f005 f8cf 	bl	8008cce <USB_HC_Halt>
 8003b30:	e3da      	b.n	80042e8 <HCD_HC_OUT_IRQHandler+0x978>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	78fa      	ldrb	r2, [r7, #3]
 8003b38:	4611      	mov	r1, r2
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f004 fb23 	bl	8008186 <USB_ReadChInterrupts>
 8003b40:	4603      	mov	r3, r0
 8003b42:	f003 0301 	and.w	r3, r3, #1
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d168      	bne.n	8003c1c <HCD_HC_OUT_IRQHandler+0x2ac>
 8003b4a:	78fa      	ldrb	r2, [r7, #3]
 8003b4c:	6879      	ldr	r1, [r7, #4]
 8003b4e:	4613      	mov	r3, r2
 8003b50:	011b      	lsls	r3, r3, #4
 8003b52:	1a9b      	subs	r3, r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	440b      	add	r3, r1
 8003b58:	3344      	adds	r3, #68	@ 0x44
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	78fa      	ldrb	r2, [r7, #3]
 8003b64:	4611      	mov	r1, r2
 8003b66:	4618      	mov	r0, r3
 8003b68:	f004 fb0d 	bl	8008186 <USB_ReadChInterrupts>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b72:	2b40      	cmp	r3, #64	@ 0x40
 8003b74:	d112      	bne.n	8003b9c <HCD_HC_OUT_IRQHandler+0x22c>
 8003b76:	78fa      	ldrb	r2, [r7, #3]
 8003b78:	6879      	ldr	r1, [r7, #4]
 8003b7a:	4613      	mov	r3, r2
 8003b7c:	011b      	lsls	r3, r3, #4
 8003b7e:	1a9b      	subs	r3, r3, r2
 8003b80:	009b      	lsls	r3, r3, #2
 8003b82:	440b      	add	r3, r1
 8003b84:	3319      	adds	r3, #25
 8003b86:	2201      	movs	r2, #1
 8003b88:	701a      	strb	r2, [r3, #0]
 8003b8a:	78fb      	ldrb	r3, [r7, #3]
 8003b8c:	015a      	lsls	r2, r3, #5
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	4413      	add	r3, r2
 8003b92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b96:	461a      	mov	r2, r3
 8003b98:	2340      	movs	r3, #64	@ 0x40
 8003b9a:	6093      	str	r3, [r2, #8]
 8003b9c:	78fa      	ldrb	r2, [r7, #3]
 8003b9e:	6879      	ldr	r1, [r7, #4]
 8003ba0:	4613      	mov	r3, r2
 8003ba2:	011b      	lsls	r3, r3, #4
 8003ba4:	1a9b      	subs	r3, r3, r2
 8003ba6:	009b      	lsls	r3, r3, #2
 8003ba8:	440b      	add	r3, r1
 8003baa:	331b      	adds	r3, #27
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d019      	beq.n	8003be6 <HCD_HC_OUT_IRQHandler+0x276>
 8003bb2:	78fa      	ldrb	r2, [r7, #3]
 8003bb4:	6879      	ldr	r1, [r7, #4]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	011b      	lsls	r3, r3, #4
 8003bba:	1a9b      	subs	r3, r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	440b      	add	r3, r1
 8003bc0:	331b      	adds	r3, #27
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	701a      	strb	r2, [r3, #0]
 8003bc6:	78fb      	ldrb	r3, [r7, #3]
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	78fa      	ldrb	r2, [r7, #3]
 8003bd6:	0151      	lsls	r1, r2, #5
 8003bd8:	693a      	ldr	r2, [r7, #16]
 8003bda:	440a      	add	r2, r1
 8003bdc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003be0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003be4:	6053      	str	r3, [r2, #4]
 8003be6:	78fb      	ldrb	r3, [r7, #3]
 8003be8:	015a      	lsls	r2, r3, #5
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bf2:	461a      	mov	r2, r3
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	6093      	str	r3, [r2, #8]
 8003bf8:	78fa      	ldrb	r2, [r7, #3]
 8003bfa:	6879      	ldr	r1, [r7, #4]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	011b      	lsls	r3, r3, #4
 8003c00:	1a9b      	subs	r3, r3, r2
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	334d      	adds	r3, #77	@ 0x4d
 8003c08:	2201      	movs	r2, #1
 8003c0a:	701a      	strb	r2, [r3, #0]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	78fa      	ldrb	r2, [r7, #3]
 8003c12:	4611      	mov	r1, r2
 8003c14:	4618      	mov	r0, r3
 8003c16:	f005 f85a 	bl	8008cce <USB_HC_Halt>
 8003c1a:	e365      	b.n	80042e8 <HCD_HC_OUT_IRQHandler+0x978>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	78fa      	ldrb	r2, [r7, #3]
 8003c22:	4611      	mov	r1, r2
 8003c24:	4618      	mov	r0, r3
 8003c26:	f004 faae 	bl	8008186 <USB_ReadChInterrupts>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c30:	2b40      	cmp	r3, #64	@ 0x40
 8003c32:	d139      	bne.n	8003ca8 <HCD_HC_OUT_IRQHandler+0x338>
 8003c34:	78fa      	ldrb	r2, [r7, #3]
 8003c36:	6879      	ldr	r1, [r7, #4]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	1a9b      	subs	r3, r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	334d      	adds	r3, #77	@ 0x4d
 8003c44:	2205      	movs	r2, #5
 8003c46:	701a      	strb	r2, [r3, #0]
 8003c48:	78fa      	ldrb	r2, [r7, #3]
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	011b      	lsls	r3, r3, #4
 8003c50:	1a9b      	subs	r3, r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	331a      	adds	r3, #26
 8003c58:	781b      	ldrb	r3, [r3, #0]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d109      	bne.n	8003c72 <HCD_HC_OUT_IRQHandler+0x302>
 8003c5e:	78fa      	ldrb	r2, [r7, #3]
 8003c60:	6879      	ldr	r1, [r7, #4]
 8003c62:	4613      	mov	r3, r2
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	1a9b      	subs	r3, r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	440b      	add	r3, r1
 8003c6c:	3319      	adds	r3, #25
 8003c6e:	2201      	movs	r2, #1
 8003c70:	701a      	strb	r2, [r3, #0]
 8003c72:	78fa      	ldrb	r2, [r7, #3]
 8003c74:	6879      	ldr	r1, [r7, #4]
 8003c76:	4613      	mov	r3, r2
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	1a9b      	subs	r3, r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	440b      	add	r3, r1
 8003c80:	3344      	adds	r3, #68	@ 0x44
 8003c82:	2200      	movs	r2, #0
 8003c84:	601a      	str	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	78fa      	ldrb	r2, [r7, #3]
 8003c8c:	4611      	mov	r1, r2
 8003c8e:	4618      	mov	r0, r3
 8003c90:	f005 f81d 	bl	8008cce <USB_HC_Halt>
 8003c94:	78fb      	ldrb	r3, [r7, #3]
 8003c96:	015a      	lsls	r2, r3, #5
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	4413      	add	r3, r2
 8003c9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	2340      	movs	r3, #64	@ 0x40
 8003ca4:	6093      	str	r3, [r2, #8]
 8003ca6:	e31f      	b.n	80042e8 <HCD_HC_OUT_IRQHandler+0x978>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	78fa      	ldrb	r2, [r7, #3]
 8003cae:	4611      	mov	r1, r2
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	f004 fa68 	bl	8008186 <USB_ReadChInterrupts>
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	f003 0308 	and.w	r3, r3, #8
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d11a      	bne.n	8003cf6 <HCD_HC_OUT_IRQHandler+0x386>
 8003cc0:	78fb      	ldrb	r3, [r7, #3]
 8003cc2:	015a      	lsls	r2, r3, #5
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	4413      	add	r3, r2
 8003cc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ccc:	461a      	mov	r2, r3
 8003cce:	2308      	movs	r3, #8
 8003cd0:	6093      	str	r3, [r2, #8]
 8003cd2:	78fa      	ldrb	r2, [r7, #3]
 8003cd4:	6879      	ldr	r1, [r7, #4]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	1a9b      	subs	r3, r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	440b      	add	r3, r1
 8003ce0:	334d      	adds	r3, #77	@ 0x4d
 8003ce2:	2206      	movs	r2, #6
 8003ce4:	701a      	strb	r2, [r3, #0]
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	78fa      	ldrb	r2, [r7, #3]
 8003cec:	4611      	mov	r1, r2
 8003cee:	4618      	mov	r0, r3
 8003cf0:	f004 ffed 	bl	8008cce <USB_HC_Halt>
 8003cf4:	e2f8      	b.n	80042e8 <HCD_HC_OUT_IRQHandler+0x978>
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	78fa      	ldrb	r2, [r7, #3]
 8003cfc:	4611      	mov	r1, r2
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f004 fa41 	bl	8008186 <USB_ReadChInterrupts>
 8003d04:	4603      	mov	r3, r0
 8003d06:	f003 0310 	and.w	r3, r3, #16
 8003d0a:	2b10      	cmp	r3, #16
 8003d0c:	d144      	bne.n	8003d98 <HCD_HC_OUT_IRQHandler+0x428>
 8003d0e:	78fa      	ldrb	r2, [r7, #3]
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	4613      	mov	r3, r2
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	1a9b      	subs	r3, r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	440b      	add	r3, r1
 8003d1c:	3344      	adds	r3, #68	@ 0x44
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]
 8003d22:	78fa      	ldrb	r2, [r7, #3]
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	4613      	mov	r3, r2
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	1a9b      	subs	r3, r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	440b      	add	r3, r1
 8003d30:	334d      	adds	r3, #77	@ 0x4d
 8003d32:	2204      	movs	r2, #4
 8003d34:	701a      	strb	r2, [r3, #0]
 8003d36:	78fa      	ldrb	r2, [r7, #3]
 8003d38:	6879      	ldr	r1, [r7, #4]
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	011b      	lsls	r3, r3, #4
 8003d3e:	1a9b      	subs	r3, r3, r2
 8003d40:	009b      	lsls	r3, r3, #2
 8003d42:	440b      	add	r3, r1
 8003d44:	3319      	adds	r3, #25
 8003d46:	781b      	ldrb	r3, [r3, #0]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d114      	bne.n	8003d76 <HCD_HC_OUT_IRQHandler+0x406>
 8003d4c:	78fa      	ldrb	r2, [r7, #3]
 8003d4e:	6879      	ldr	r1, [r7, #4]
 8003d50:	4613      	mov	r3, r2
 8003d52:	011b      	lsls	r3, r3, #4
 8003d54:	1a9b      	subs	r3, r3, r2
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	440b      	add	r3, r1
 8003d5a:	3318      	adds	r3, #24
 8003d5c:	781b      	ldrb	r3, [r3, #0]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d109      	bne.n	8003d76 <HCD_HC_OUT_IRQHandler+0x406>
 8003d62:	78fa      	ldrb	r2, [r7, #3]
 8003d64:	6879      	ldr	r1, [r7, #4]
 8003d66:	4613      	mov	r3, r2
 8003d68:	011b      	lsls	r3, r3, #4
 8003d6a:	1a9b      	subs	r3, r3, r2
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	440b      	add	r3, r1
 8003d70:	3319      	adds	r3, #25
 8003d72:	2201      	movs	r2, #1
 8003d74:	701a      	strb	r2, [r3, #0]
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	78fa      	ldrb	r2, [r7, #3]
 8003d7c:	4611      	mov	r1, r2
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f004 ffa5 	bl	8008cce <USB_HC_Halt>
 8003d84:	78fb      	ldrb	r3, [r7, #3]
 8003d86:	015a      	lsls	r2, r3, #5
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	4413      	add	r3, r2
 8003d8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d90:	461a      	mov	r2, r3
 8003d92:	2310      	movs	r3, #16
 8003d94:	6093      	str	r3, [r2, #8]
 8003d96:	e2a7      	b.n	80042e8 <HCD_HC_OUT_IRQHandler+0x978>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	78fa      	ldrb	r2, [r7, #3]
 8003d9e:	4611      	mov	r1, r2
 8003da0:	4618      	mov	r0, r3
 8003da2:	f004 f9f0 	bl	8008186 <USB_ReadChInterrupts>
 8003da6:	4603      	mov	r3, r0
 8003da8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dac:	2b80      	cmp	r3, #128	@ 0x80
 8003dae:	f040 8083 	bne.w	8003eb8 <HCD_HC_OUT_IRQHandler+0x548>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	799b      	ldrb	r3, [r3, #6]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d111      	bne.n	8003dde <HCD_HC_OUT_IRQHandler+0x46e>
 8003dba:	78fa      	ldrb	r2, [r7, #3]
 8003dbc:	6879      	ldr	r1, [r7, #4]
 8003dbe:	4613      	mov	r3, r2
 8003dc0:	011b      	lsls	r3, r3, #4
 8003dc2:	1a9b      	subs	r3, r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	440b      	add	r3, r1
 8003dc8:	334d      	adds	r3, #77	@ 0x4d
 8003dca:	2207      	movs	r2, #7
 8003dcc:	701a      	strb	r2, [r3, #0]
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	78fa      	ldrb	r2, [r7, #3]
 8003dd4:	4611      	mov	r1, r2
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f004 ff79 	bl	8008cce <USB_HC_Halt>
 8003ddc:	e062      	b.n	8003ea4 <HCD_HC_OUT_IRQHandler+0x534>
 8003dde:	78fa      	ldrb	r2, [r7, #3]
 8003de0:	6879      	ldr	r1, [r7, #4]
 8003de2:	4613      	mov	r3, r2
 8003de4:	011b      	lsls	r3, r3, #4
 8003de6:	1a9b      	subs	r3, r3, r2
 8003de8:	009b      	lsls	r3, r3, #2
 8003dea:	440b      	add	r3, r1
 8003dec:	3344      	adds	r3, #68	@ 0x44
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	1c59      	adds	r1, r3, #1
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	4613      	mov	r3, r2
 8003df6:	011b      	lsls	r3, r3, #4
 8003df8:	1a9b      	subs	r3, r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4403      	add	r3, r0
 8003dfe:	3344      	adds	r3, #68	@ 0x44
 8003e00:	6019      	str	r1, [r3, #0]
 8003e02:	78fa      	ldrb	r2, [r7, #3]
 8003e04:	6879      	ldr	r1, [r7, #4]
 8003e06:	4613      	mov	r3, r2
 8003e08:	011b      	lsls	r3, r3, #4
 8003e0a:	1a9b      	subs	r3, r3, r2
 8003e0c:	009b      	lsls	r3, r3, #2
 8003e0e:	440b      	add	r3, r1
 8003e10:	3344      	adds	r3, #68	@ 0x44
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2b02      	cmp	r3, #2
 8003e16:	d922      	bls.n	8003e5e <HCD_HC_OUT_IRQHandler+0x4ee>
 8003e18:	78fa      	ldrb	r2, [r7, #3]
 8003e1a:	6879      	ldr	r1, [r7, #4]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	1a9b      	subs	r3, r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	440b      	add	r3, r1
 8003e26:	3344      	adds	r3, #68	@ 0x44
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	78fa      	ldrb	r2, [r7, #3]
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	4613      	mov	r3, r2
 8003e32:	011b      	lsls	r3, r3, #4
 8003e34:	1a9b      	subs	r3, r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	334c      	adds	r3, #76	@ 0x4c
 8003e3c:	2204      	movs	r2, #4
 8003e3e:	701a      	strb	r2, [r3, #0]
 8003e40:	78fa      	ldrb	r2, [r7, #3]
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	4613      	mov	r3, r2
 8003e46:	011b      	lsls	r3, r3, #4
 8003e48:	1a9b      	subs	r3, r3, r2
 8003e4a:	009b      	lsls	r3, r3, #2
 8003e4c:	440b      	add	r3, r1
 8003e4e:	334c      	adds	r3, #76	@ 0x4c
 8003e50:	781a      	ldrb	r2, [r3, #0]
 8003e52:	78fb      	ldrb	r3, [r7, #3]
 8003e54:	4619      	mov	r1, r3
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f007 fa8e 	bl	800b378 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003e5c:	e022      	b.n	8003ea4 <HCD_HC_OUT_IRQHandler+0x534>
 8003e5e:	78fa      	ldrb	r2, [r7, #3]
 8003e60:	6879      	ldr	r1, [r7, #4]
 8003e62:	4613      	mov	r3, r2
 8003e64:	011b      	lsls	r3, r3, #4
 8003e66:	1a9b      	subs	r3, r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	334c      	adds	r3, #76	@ 0x4c
 8003e6e:	2202      	movs	r2, #2
 8003e70:	701a      	strb	r2, [r3, #0]
 8003e72:	78fb      	ldrb	r3, [r7, #3]
 8003e74:	015a      	lsls	r2, r3, #5
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	4413      	add	r3, r2
 8003e7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	60fb      	str	r3, [r7, #12]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003e88:	60fb      	str	r3, [r7, #12]
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003e90:	60fb      	str	r3, [r7, #12]
 8003e92:	78fb      	ldrb	r3, [r7, #3]
 8003e94:	015a      	lsls	r2, r3, #5
 8003e96:	693b      	ldr	r3, [r7, #16]
 8003e98:	4413      	add	r3, r2
 8003e9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6013      	str	r3, [r2, #0]
 8003ea4:	78fb      	ldrb	r3, [r7, #3]
 8003ea6:	015a      	lsls	r2, r3, #5
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	4413      	add	r3, r2
 8003eac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	2380      	movs	r3, #128	@ 0x80
 8003eb4:	6093      	str	r3, [r2, #8]
 8003eb6:	e217      	b.n	80042e8 <HCD_HC_OUT_IRQHandler+0x978>
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	78fa      	ldrb	r2, [r7, #3]
 8003ebe:	4611      	mov	r1, r2
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f004 f960 	bl	8008186 <USB_ReadChInterrupts>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ecc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ed0:	d11b      	bne.n	8003f0a <HCD_HC_OUT_IRQHandler+0x59a>
 8003ed2:	78fa      	ldrb	r2, [r7, #3]
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	011b      	lsls	r3, r3, #4
 8003eda:	1a9b      	subs	r3, r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	440b      	add	r3, r1
 8003ee0:	334d      	adds	r3, #77	@ 0x4d
 8003ee2:	2209      	movs	r2, #9
 8003ee4:	701a      	strb	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	78fa      	ldrb	r2, [r7, #3]
 8003eec:	4611      	mov	r1, r2
 8003eee:	4618      	mov	r0, r3
 8003ef0:	f004 feed 	bl	8008cce <USB_HC_Halt>
 8003ef4:	78fb      	ldrb	r3, [r7, #3]
 8003ef6:	015a      	lsls	r2, r3, #5
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	4413      	add	r3, r2
 8003efc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f00:	461a      	mov	r2, r3
 8003f02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003f06:	6093      	str	r3, [r2, #8]
 8003f08:	e1ee      	b.n	80042e8 <HCD_HC_OUT_IRQHandler+0x978>
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	78fa      	ldrb	r2, [r7, #3]
 8003f10:	4611      	mov	r1, r2
 8003f12:	4618      	mov	r0, r3
 8003f14:	f004 f937 	bl	8008186 <USB_ReadChInterrupts>
 8003f18:	4603      	mov	r3, r0
 8003f1a:	f003 0302 	and.w	r3, r3, #2
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	f040 81df 	bne.w	80042e2 <HCD_HC_OUT_IRQHandler+0x972>
 8003f24:	78fb      	ldrb	r3, [r7, #3]
 8003f26:	015a      	lsls	r2, r3, #5
 8003f28:	693b      	ldr	r3, [r7, #16]
 8003f2a:	4413      	add	r3, r2
 8003f2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f30:	461a      	mov	r2, r3
 8003f32:	2302      	movs	r3, #2
 8003f34:	6093      	str	r3, [r2, #8]
 8003f36:	78fa      	ldrb	r2, [r7, #3]
 8003f38:	6879      	ldr	r1, [r7, #4]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	011b      	lsls	r3, r3, #4
 8003f3e:	1a9b      	subs	r3, r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	440b      	add	r3, r1
 8003f44:	334d      	adds	r3, #77	@ 0x4d
 8003f46:	781b      	ldrb	r3, [r3, #0]
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	f040 8093 	bne.w	8004074 <HCD_HC_OUT_IRQHandler+0x704>
 8003f4e:	78fa      	ldrb	r2, [r7, #3]
 8003f50:	6879      	ldr	r1, [r7, #4]
 8003f52:	4613      	mov	r3, r2
 8003f54:	011b      	lsls	r3, r3, #4
 8003f56:	1a9b      	subs	r3, r3, r2
 8003f58:	009b      	lsls	r3, r3, #2
 8003f5a:	440b      	add	r3, r1
 8003f5c:	334d      	adds	r3, #77	@ 0x4d
 8003f5e:	2202      	movs	r2, #2
 8003f60:	701a      	strb	r2, [r3, #0]
 8003f62:	78fa      	ldrb	r2, [r7, #3]
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	4613      	mov	r3, r2
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	1a9b      	subs	r3, r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	440b      	add	r3, r1
 8003f70:	334c      	adds	r3, #76	@ 0x4c
 8003f72:	2201      	movs	r2, #1
 8003f74:	701a      	strb	r2, [r3, #0]
 8003f76:	78fa      	ldrb	r2, [r7, #3]
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	1a9b      	subs	r3, r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	440b      	add	r3, r1
 8003f84:	3326      	adds	r3, #38	@ 0x26
 8003f86:	781b      	ldrb	r3, [r3, #0]
 8003f88:	2b02      	cmp	r3, #2
 8003f8a:	d00b      	beq.n	8003fa4 <HCD_HC_OUT_IRQHandler+0x634>
 8003f8c:	78fa      	ldrb	r2, [r7, #3]
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	4613      	mov	r3, r2
 8003f92:	011b      	lsls	r3, r3, #4
 8003f94:	1a9b      	subs	r3, r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	440b      	add	r3, r1
 8003f9a:	3326      	adds	r3, #38	@ 0x26
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	2b03      	cmp	r3, #3
 8003fa0:	f040 8190 	bne.w	80042c4 <HCD_HC_OUT_IRQHandler+0x954>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	799b      	ldrb	r3, [r3, #6]
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d115      	bne.n	8003fd8 <HCD_HC_OUT_IRQHandler+0x668>
 8003fac:	78fa      	ldrb	r2, [r7, #3]
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	011b      	lsls	r3, r3, #4
 8003fb4:	1a9b      	subs	r3, r3, r2
 8003fb6:	009b      	lsls	r3, r3, #2
 8003fb8:	440b      	add	r3, r1
 8003fba:	333d      	adds	r3, #61	@ 0x3d
 8003fbc:	781b      	ldrb	r3, [r3, #0]
 8003fbe:	78fa      	ldrb	r2, [r7, #3]
 8003fc0:	f083 0301 	eor.w	r3, r3, #1
 8003fc4:	b2d8      	uxtb	r0, r3
 8003fc6:	6879      	ldr	r1, [r7, #4]
 8003fc8:	4613      	mov	r3, r2
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	1a9b      	subs	r3, r3, r2
 8003fce:	009b      	lsls	r3, r3, #2
 8003fd0:	440b      	add	r3, r1
 8003fd2:	333d      	adds	r3, #61	@ 0x3d
 8003fd4:	4602      	mov	r2, r0
 8003fd6:	701a      	strb	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	799b      	ldrb	r3, [r3, #6]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	f040 8171 	bne.w	80042c4 <HCD_HC_OUT_IRQHandler+0x954>
 8003fe2:	78fa      	ldrb	r2, [r7, #3]
 8003fe4:	6879      	ldr	r1, [r7, #4]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	1a9b      	subs	r3, r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	440b      	add	r3, r1
 8003ff0:	3334      	adds	r3, #52	@ 0x34
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	f000 8165 	beq.w	80042c4 <HCD_HC_OUT_IRQHandler+0x954>
 8003ffa:	78fa      	ldrb	r2, [r7, #3]
 8003ffc:	6879      	ldr	r1, [r7, #4]
 8003ffe:	4613      	mov	r3, r2
 8004000:	011b      	lsls	r3, r3, #4
 8004002:	1a9b      	subs	r3, r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	440b      	add	r3, r1
 8004008:	3334      	adds	r3, #52	@ 0x34
 800400a:	6819      	ldr	r1, [r3, #0]
 800400c:	78fa      	ldrb	r2, [r7, #3]
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	4613      	mov	r3, r2
 8004012:	011b      	lsls	r3, r3, #4
 8004014:	1a9b      	subs	r3, r3, r2
 8004016:	009b      	lsls	r3, r3, #2
 8004018:	4403      	add	r3, r0
 800401a:	3328      	adds	r3, #40	@ 0x28
 800401c:	881b      	ldrh	r3, [r3, #0]
 800401e:	440b      	add	r3, r1
 8004020:	1e59      	subs	r1, r3, #1
 8004022:	78fa      	ldrb	r2, [r7, #3]
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	011b      	lsls	r3, r3, #4
 800402a:	1a9b      	subs	r3, r3, r2
 800402c:	009b      	lsls	r3, r3, #2
 800402e:	4403      	add	r3, r0
 8004030:	3328      	adds	r3, #40	@ 0x28
 8004032:	881b      	ldrh	r3, [r3, #0]
 8004034:	fbb1 f3f3 	udiv	r3, r1, r3
 8004038:	60bb      	str	r3, [r7, #8]
 800403a:	68bb      	ldr	r3, [r7, #8]
 800403c:	f003 0301 	and.w	r3, r3, #1
 8004040:	2b00      	cmp	r3, #0
 8004042:	f000 813f 	beq.w	80042c4 <HCD_HC_OUT_IRQHandler+0x954>
 8004046:	78fa      	ldrb	r2, [r7, #3]
 8004048:	6879      	ldr	r1, [r7, #4]
 800404a:	4613      	mov	r3, r2
 800404c:	011b      	lsls	r3, r3, #4
 800404e:	1a9b      	subs	r3, r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	440b      	add	r3, r1
 8004054:	333d      	adds	r3, #61	@ 0x3d
 8004056:	781b      	ldrb	r3, [r3, #0]
 8004058:	78fa      	ldrb	r2, [r7, #3]
 800405a:	f083 0301 	eor.w	r3, r3, #1
 800405e:	b2d8      	uxtb	r0, r3
 8004060:	6879      	ldr	r1, [r7, #4]
 8004062:	4613      	mov	r3, r2
 8004064:	011b      	lsls	r3, r3, #4
 8004066:	1a9b      	subs	r3, r3, r2
 8004068:	009b      	lsls	r3, r3, #2
 800406a:	440b      	add	r3, r1
 800406c:	333d      	adds	r3, #61	@ 0x3d
 800406e:	4602      	mov	r2, r0
 8004070:	701a      	strb	r2, [r3, #0]
 8004072:	e127      	b.n	80042c4 <HCD_HC_OUT_IRQHandler+0x954>
 8004074:	78fa      	ldrb	r2, [r7, #3]
 8004076:	6879      	ldr	r1, [r7, #4]
 8004078:	4613      	mov	r3, r2
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	1a9b      	subs	r3, r3, r2
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	440b      	add	r3, r1
 8004082:	334d      	adds	r3, #77	@ 0x4d
 8004084:	781b      	ldrb	r3, [r3, #0]
 8004086:	2b03      	cmp	r3, #3
 8004088:	d120      	bne.n	80040cc <HCD_HC_OUT_IRQHandler+0x75c>
 800408a:	78fa      	ldrb	r2, [r7, #3]
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	4613      	mov	r3, r2
 8004090:	011b      	lsls	r3, r3, #4
 8004092:	1a9b      	subs	r3, r3, r2
 8004094:	009b      	lsls	r3, r3, #2
 8004096:	440b      	add	r3, r1
 8004098:	334d      	adds	r3, #77	@ 0x4d
 800409a:	2202      	movs	r2, #2
 800409c:	701a      	strb	r2, [r3, #0]
 800409e:	78fa      	ldrb	r2, [r7, #3]
 80040a0:	6879      	ldr	r1, [r7, #4]
 80040a2:	4613      	mov	r3, r2
 80040a4:	011b      	lsls	r3, r3, #4
 80040a6:	1a9b      	subs	r3, r3, r2
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	440b      	add	r3, r1
 80040ac:	331b      	adds	r3, #27
 80040ae:	781b      	ldrb	r3, [r3, #0]
 80040b0:	2b01      	cmp	r3, #1
 80040b2:	f040 8107 	bne.w	80042c4 <HCD_HC_OUT_IRQHandler+0x954>
 80040b6:	78fa      	ldrb	r2, [r7, #3]
 80040b8:	6879      	ldr	r1, [r7, #4]
 80040ba:	4613      	mov	r3, r2
 80040bc:	011b      	lsls	r3, r3, #4
 80040be:	1a9b      	subs	r3, r3, r2
 80040c0:	009b      	lsls	r3, r3, #2
 80040c2:	440b      	add	r3, r1
 80040c4:	334c      	adds	r3, #76	@ 0x4c
 80040c6:	2202      	movs	r2, #2
 80040c8:	701a      	strb	r2, [r3, #0]
 80040ca:	e0fb      	b.n	80042c4 <HCD_HC_OUT_IRQHandler+0x954>
 80040cc:	78fa      	ldrb	r2, [r7, #3]
 80040ce:	6879      	ldr	r1, [r7, #4]
 80040d0:	4613      	mov	r3, r2
 80040d2:	011b      	lsls	r3, r3, #4
 80040d4:	1a9b      	subs	r3, r3, r2
 80040d6:	009b      	lsls	r3, r3, #2
 80040d8:	440b      	add	r3, r1
 80040da:	334d      	adds	r3, #77	@ 0x4d
 80040dc:	781b      	ldrb	r3, [r3, #0]
 80040de:	2b04      	cmp	r3, #4
 80040e0:	d13a      	bne.n	8004158 <HCD_HC_OUT_IRQHandler+0x7e8>
 80040e2:	78fa      	ldrb	r2, [r7, #3]
 80040e4:	6879      	ldr	r1, [r7, #4]
 80040e6:	4613      	mov	r3, r2
 80040e8:	011b      	lsls	r3, r3, #4
 80040ea:	1a9b      	subs	r3, r3, r2
 80040ec:	009b      	lsls	r3, r3, #2
 80040ee:	440b      	add	r3, r1
 80040f0:	334d      	adds	r3, #77	@ 0x4d
 80040f2:	2202      	movs	r2, #2
 80040f4:	701a      	strb	r2, [r3, #0]
 80040f6:	78fa      	ldrb	r2, [r7, #3]
 80040f8:	6879      	ldr	r1, [r7, #4]
 80040fa:	4613      	mov	r3, r2
 80040fc:	011b      	lsls	r3, r3, #4
 80040fe:	1a9b      	subs	r3, r3, r2
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	440b      	add	r3, r1
 8004104:	334c      	adds	r3, #76	@ 0x4c
 8004106:	2202      	movs	r2, #2
 8004108:	701a      	strb	r2, [r3, #0]
 800410a:	78fa      	ldrb	r2, [r7, #3]
 800410c:	6879      	ldr	r1, [r7, #4]
 800410e:	4613      	mov	r3, r2
 8004110:	011b      	lsls	r3, r3, #4
 8004112:	1a9b      	subs	r3, r3, r2
 8004114:	009b      	lsls	r3, r3, #2
 8004116:	440b      	add	r3, r1
 8004118:	331b      	adds	r3, #27
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b01      	cmp	r3, #1
 800411e:	f040 80d1 	bne.w	80042c4 <HCD_HC_OUT_IRQHandler+0x954>
 8004122:	78fa      	ldrb	r2, [r7, #3]
 8004124:	6879      	ldr	r1, [r7, #4]
 8004126:	4613      	mov	r3, r2
 8004128:	011b      	lsls	r3, r3, #4
 800412a:	1a9b      	subs	r3, r3, r2
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	440b      	add	r3, r1
 8004130:	331b      	adds	r3, #27
 8004132:	2200      	movs	r2, #0
 8004134:	701a      	strb	r2, [r3, #0]
 8004136:	78fb      	ldrb	r3, [r7, #3]
 8004138:	015a      	lsls	r2, r3, #5
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	4413      	add	r3, r2
 800413e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	78fa      	ldrb	r2, [r7, #3]
 8004146:	0151      	lsls	r1, r2, #5
 8004148:	693a      	ldr	r2, [r7, #16]
 800414a:	440a      	add	r2, r1
 800414c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004150:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004154:	6053      	str	r3, [r2, #4]
 8004156:	e0b5      	b.n	80042c4 <HCD_HC_OUT_IRQHandler+0x954>
 8004158:	78fa      	ldrb	r2, [r7, #3]
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	4613      	mov	r3, r2
 800415e:	011b      	lsls	r3, r3, #4
 8004160:	1a9b      	subs	r3, r3, r2
 8004162:	009b      	lsls	r3, r3, #2
 8004164:	440b      	add	r3, r1
 8004166:	334d      	adds	r3, #77	@ 0x4d
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	2b05      	cmp	r3, #5
 800416c:	d114      	bne.n	8004198 <HCD_HC_OUT_IRQHandler+0x828>
 800416e:	78fa      	ldrb	r2, [r7, #3]
 8004170:	6879      	ldr	r1, [r7, #4]
 8004172:	4613      	mov	r3, r2
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	1a9b      	subs	r3, r3, r2
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	440b      	add	r3, r1
 800417c:	334d      	adds	r3, #77	@ 0x4d
 800417e:	2202      	movs	r2, #2
 8004180:	701a      	strb	r2, [r3, #0]
 8004182:	78fa      	ldrb	r2, [r7, #3]
 8004184:	6879      	ldr	r1, [r7, #4]
 8004186:	4613      	mov	r3, r2
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	1a9b      	subs	r3, r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	440b      	add	r3, r1
 8004190:	334c      	adds	r3, #76	@ 0x4c
 8004192:	2202      	movs	r2, #2
 8004194:	701a      	strb	r2, [r3, #0]
 8004196:	e095      	b.n	80042c4 <HCD_HC_OUT_IRQHandler+0x954>
 8004198:	78fa      	ldrb	r2, [r7, #3]
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	4613      	mov	r3, r2
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	1a9b      	subs	r3, r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	440b      	add	r3, r1
 80041a6:	334d      	adds	r3, #77	@ 0x4d
 80041a8:	781b      	ldrb	r3, [r3, #0]
 80041aa:	2b06      	cmp	r3, #6
 80041ac:	d114      	bne.n	80041d8 <HCD_HC_OUT_IRQHandler+0x868>
 80041ae:	78fa      	ldrb	r2, [r7, #3]
 80041b0:	6879      	ldr	r1, [r7, #4]
 80041b2:	4613      	mov	r3, r2
 80041b4:	011b      	lsls	r3, r3, #4
 80041b6:	1a9b      	subs	r3, r3, r2
 80041b8:	009b      	lsls	r3, r3, #2
 80041ba:	440b      	add	r3, r1
 80041bc:	334d      	adds	r3, #77	@ 0x4d
 80041be:	2202      	movs	r2, #2
 80041c0:	701a      	strb	r2, [r3, #0]
 80041c2:	78fa      	ldrb	r2, [r7, #3]
 80041c4:	6879      	ldr	r1, [r7, #4]
 80041c6:	4613      	mov	r3, r2
 80041c8:	011b      	lsls	r3, r3, #4
 80041ca:	1a9b      	subs	r3, r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	440b      	add	r3, r1
 80041d0:	334c      	adds	r3, #76	@ 0x4c
 80041d2:	2205      	movs	r2, #5
 80041d4:	701a      	strb	r2, [r3, #0]
 80041d6:	e075      	b.n	80042c4 <HCD_HC_OUT_IRQHandler+0x954>
 80041d8:	78fa      	ldrb	r2, [r7, #3]
 80041da:	6879      	ldr	r1, [r7, #4]
 80041dc:	4613      	mov	r3, r2
 80041de:	011b      	lsls	r3, r3, #4
 80041e0:	1a9b      	subs	r3, r3, r2
 80041e2:	009b      	lsls	r3, r3, #2
 80041e4:	440b      	add	r3, r1
 80041e6:	334d      	adds	r3, #77	@ 0x4d
 80041e8:	781b      	ldrb	r3, [r3, #0]
 80041ea:	2b07      	cmp	r3, #7
 80041ec:	d00a      	beq.n	8004204 <HCD_HC_OUT_IRQHandler+0x894>
 80041ee:	78fa      	ldrb	r2, [r7, #3]
 80041f0:	6879      	ldr	r1, [r7, #4]
 80041f2:	4613      	mov	r3, r2
 80041f4:	011b      	lsls	r3, r3, #4
 80041f6:	1a9b      	subs	r3, r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	440b      	add	r3, r1
 80041fc:	334d      	adds	r3, #77	@ 0x4d
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	2b09      	cmp	r3, #9
 8004202:	d170      	bne.n	80042e6 <HCD_HC_OUT_IRQHandler+0x976>
 8004204:	78fa      	ldrb	r2, [r7, #3]
 8004206:	6879      	ldr	r1, [r7, #4]
 8004208:	4613      	mov	r3, r2
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	1a9b      	subs	r3, r3, r2
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	440b      	add	r3, r1
 8004212:	334d      	adds	r3, #77	@ 0x4d
 8004214:	2202      	movs	r2, #2
 8004216:	701a      	strb	r2, [r3, #0]
 8004218:	78fa      	ldrb	r2, [r7, #3]
 800421a:	6879      	ldr	r1, [r7, #4]
 800421c:	4613      	mov	r3, r2
 800421e:	011b      	lsls	r3, r3, #4
 8004220:	1a9b      	subs	r3, r3, r2
 8004222:	009b      	lsls	r3, r3, #2
 8004224:	440b      	add	r3, r1
 8004226:	3344      	adds	r3, #68	@ 0x44
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	1c59      	adds	r1, r3, #1
 800422c:	6878      	ldr	r0, [r7, #4]
 800422e:	4613      	mov	r3, r2
 8004230:	011b      	lsls	r3, r3, #4
 8004232:	1a9b      	subs	r3, r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4403      	add	r3, r0
 8004238:	3344      	adds	r3, #68	@ 0x44
 800423a:	6019      	str	r1, [r3, #0]
 800423c:	78fa      	ldrb	r2, [r7, #3]
 800423e:	6879      	ldr	r1, [r7, #4]
 8004240:	4613      	mov	r3, r2
 8004242:	011b      	lsls	r3, r3, #4
 8004244:	1a9b      	subs	r3, r3, r2
 8004246:	009b      	lsls	r3, r3, #2
 8004248:	440b      	add	r3, r1
 800424a:	3344      	adds	r3, #68	@ 0x44
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2b02      	cmp	r3, #2
 8004250:	d914      	bls.n	800427c <HCD_HC_OUT_IRQHandler+0x90c>
 8004252:	78fa      	ldrb	r2, [r7, #3]
 8004254:	6879      	ldr	r1, [r7, #4]
 8004256:	4613      	mov	r3, r2
 8004258:	011b      	lsls	r3, r3, #4
 800425a:	1a9b      	subs	r3, r3, r2
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	440b      	add	r3, r1
 8004260:	3344      	adds	r3, #68	@ 0x44
 8004262:	2200      	movs	r2, #0
 8004264:	601a      	str	r2, [r3, #0]
 8004266:	78fa      	ldrb	r2, [r7, #3]
 8004268:	6879      	ldr	r1, [r7, #4]
 800426a:	4613      	mov	r3, r2
 800426c:	011b      	lsls	r3, r3, #4
 800426e:	1a9b      	subs	r3, r3, r2
 8004270:	009b      	lsls	r3, r3, #2
 8004272:	440b      	add	r3, r1
 8004274:	334c      	adds	r3, #76	@ 0x4c
 8004276:	2204      	movs	r2, #4
 8004278:	701a      	strb	r2, [r3, #0]
 800427a:	e022      	b.n	80042c2 <HCD_HC_OUT_IRQHandler+0x952>
 800427c:	78fa      	ldrb	r2, [r7, #3]
 800427e:	6879      	ldr	r1, [r7, #4]
 8004280:	4613      	mov	r3, r2
 8004282:	011b      	lsls	r3, r3, #4
 8004284:	1a9b      	subs	r3, r3, r2
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	440b      	add	r3, r1
 800428a:	334c      	adds	r3, #76	@ 0x4c
 800428c:	2202      	movs	r2, #2
 800428e:	701a      	strb	r2, [r3, #0]
 8004290:	78fb      	ldrb	r3, [r7, #3]
 8004292:	015a      	lsls	r2, r3, #5
 8004294:	693b      	ldr	r3, [r7, #16]
 8004296:	4413      	add	r3, r2
 8004298:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	60fb      	str	r3, [r7, #12]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80042a6:	60fb      	str	r3, [r7, #12]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80042ae:	60fb      	str	r3, [r7, #12]
 80042b0:	78fb      	ldrb	r3, [r7, #3]
 80042b2:	015a      	lsls	r2, r3, #5
 80042b4:	693b      	ldr	r3, [r7, #16]
 80042b6:	4413      	add	r3, r2
 80042b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042bc:	461a      	mov	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6013      	str	r3, [r2, #0]
 80042c2:	bf00      	nop
 80042c4:	78fa      	ldrb	r2, [r7, #3]
 80042c6:	6879      	ldr	r1, [r7, #4]
 80042c8:	4613      	mov	r3, r2
 80042ca:	011b      	lsls	r3, r3, #4
 80042cc:	1a9b      	subs	r3, r3, r2
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	440b      	add	r3, r1
 80042d2:	334c      	adds	r3, #76	@ 0x4c
 80042d4:	781a      	ldrb	r2, [r3, #0]
 80042d6:	78fb      	ldrb	r3, [r7, #3]
 80042d8:	4619      	mov	r1, r3
 80042da:	6878      	ldr	r0, [r7, #4]
 80042dc:	f007 f84c 	bl	800b378 <HAL_HCD_HC_NotifyURBChange_Callback>
 80042e0:	e002      	b.n	80042e8 <HCD_HC_OUT_IRQHandler+0x978>
 80042e2:	bf00      	nop
 80042e4:	e000      	b.n	80042e8 <HCD_HC_OUT_IRQHandler+0x978>
 80042e6:	bf00      	nop
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}

080042ee <HCD_RXQLVL_IRQHandler>:
 80042ee:	b580      	push	{r7, lr}
 80042f0:	b08a      	sub	sp, #40	@ 0x28
 80042f2:	af00      	add	r7, sp, #0
 80042f4:	6078      	str	r0, [r7, #4]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80042fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042fe:	623b      	str	r3, [r7, #32]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	61fb      	str	r3, [r7, #28]
 8004308:	69fb      	ldr	r3, [r7, #28]
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	61bb      	str	r3, [r7, #24]
 8004310:	69fb      	ldr	r3, [r7, #28]
 8004312:	0c5b      	lsrs	r3, r3, #17
 8004314:	f003 030f 	and.w	r3, r3, #15
 8004318:	617b      	str	r3, [r7, #20]
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	091b      	lsrs	r3, r3, #4
 800431e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004322:	613b      	str	r3, [r7, #16]
 8004324:	697b      	ldr	r3, [r7, #20]
 8004326:	2b02      	cmp	r3, #2
 8004328:	d004      	beq.n	8004334 <HCD_RXQLVL_IRQHandler+0x46>
 800432a:	697b      	ldr	r3, [r7, #20]
 800432c:	2b05      	cmp	r3, #5
 800432e:	f000 80b6 	beq.w	800449e <HCD_RXQLVL_IRQHandler+0x1b0>
 8004332:	e0b7      	b.n	80044a4 <HCD_RXQLVL_IRQHandler+0x1b6>
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 80b3 	beq.w	80044a2 <HCD_RXQLVL_IRQHandler+0x1b4>
 800433c:	6879      	ldr	r1, [r7, #4]
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	4613      	mov	r3, r2
 8004342:	011b      	lsls	r3, r3, #4
 8004344:	1a9b      	subs	r3, r3, r2
 8004346:	009b      	lsls	r3, r3, #2
 8004348:	440b      	add	r3, r1
 800434a:	332c      	adds	r3, #44	@ 0x2c
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	f000 80a7 	beq.w	80044a2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004354:	6879      	ldr	r1, [r7, #4]
 8004356:	69ba      	ldr	r2, [r7, #24]
 8004358:	4613      	mov	r3, r2
 800435a:	011b      	lsls	r3, r3, #4
 800435c:	1a9b      	subs	r3, r3, r2
 800435e:	009b      	lsls	r3, r3, #2
 8004360:	440b      	add	r3, r1
 8004362:	3338      	adds	r3, #56	@ 0x38
 8004364:	681a      	ldr	r2, [r3, #0]
 8004366:	693b      	ldr	r3, [r7, #16]
 8004368:	18d1      	adds	r1, r2, r3
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	69ba      	ldr	r2, [r7, #24]
 800436e:	4613      	mov	r3, r2
 8004370:	011b      	lsls	r3, r3, #4
 8004372:	1a9b      	subs	r3, r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4403      	add	r3, r0
 8004378:	3334      	adds	r3, #52	@ 0x34
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4299      	cmp	r1, r3
 800437e:	f200 8083 	bhi.w	8004488 <HCD_RXQLVL_IRQHandler+0x19a>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6818      	ldr	r0, [r3, #0]
 8004386:	6879      	ldr	r1, [r7, #4]
 8004388:	69ba      	ldr	r2, [r7, #24]
 800438a:	4613      	mov	r3, r2
 800438c:	011b      	lsls	r3, r3, #4
 800438e:	1a9b      	subs	r3, r3, r2
 8004390:	009b      	lsls	r3, r3, #2
 8004392:	440b      	add	r3, r1
 8004394:	332c      	adds	r3, #44	@ 0x2c
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	693a      	ldr	r2, [r7, #16]
 800439a:	b292      	uxth	r2, r2
 800439c:	4619      	mov	r1, r3
 800439e:	f003 fe87 	bl	80080b0 <USB_ReadPacket>
 80043a2:	6879      	ldr	r1, [r7, #4]
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	4613      	mov	r3, r2
 80043a8:	011b      	lsls	r3, r3, #4
 80043aa:	1a9b      	subs	r3, r3, r2
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	440b      	add	r3, r1
 80043b0:	332c      	adds	r3, #44	@ 0x2c
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	18d1      	adds	r1, r2, r3
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	69ba      	ldr	r2, [r7, #24]
 80043bc:	4613      	mov	r3, r2
 80043be:	011b      	lsls	r3, r3, #4
 80043c0:	1a9b      	subs	r3, r3, r2
 80043c2:	009b      	lsls	r3, r3, #2
 80043c4:	4403      	add	r3, r0
 80043c6:	332c      	adds	r3, #44	@ 0x2c
 80043c8:	6019      	str	r1, [r3, #0]
 80043ca:	6879      	ldr	r1, [r7, #4]
 80043cc:	69ba      	ldr	r2, [r7, #24]
 80043ce:	4613      	mov	r3, r2
 80043d0:	011b      	lsls	r3, r3, #4
 80043d2:	1a9b      	subs	r3, r3, r2
 80043d4:	009b      	lsls	r3, r3, #2
 80043d6:	440b      	add	r3, r1
 80043d8:	3338      	adds	r3, #56	@ 0x38
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	18d1      	adds	r1, r2, r3
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	69ba      	ldr	r2, [r7, #24]
 80043e4:	4613      	mov	r3, r2
 80043e6:	011b      	lsls	r3, r3, #4
 80043e8:	1a9b      	subs	r3, r3, r2
 80043ea:	009b      	lsls	r3, r3, #2
 80043ec:	4403      	add	r3, r0
 80043ee:	3338      	adds	r3, #56	@ 0x38
 80043f0:	6019      	str	r1, [r3, #0]
 80043f2:	69bb      	ldr	r3, [r7, #24]
 80043f4:	015a      	lsls	r2, r3, #5
 80043f6:	6a3b      	ldr	r3, [r7, #32]
 80043f8:	4413      	add	r3, r2
 80043fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	0cdb      	lsrs	r3, r3, #19
 8004402:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	6879      	ldr	r1, [r7, #4]
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	4613      	mov	r3, r2
 800440e:	011b      	lsls	r3, r3, #4
 8004410:	1a9b      	subs	r3, r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	440b      	add	r3, r1
 8004416:	3328      	adds	r3, #40	@ 0x28
 8004418:	881b      	ldrh	r3, [r3, #0]
 800441a:	461a      	mov	r2, r3
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	4293      	cmp	r3, r2
 8004420:	d13f      	bne.n	80044a2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d03c      	beq.n	80044a2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	015a      	lsls	r2, r3, #5
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	4413      	add	r3, r2
 8004430:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	60bb      	str	r3, [r7, #8]
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800443e:	60bb      	str	r3, [r7, #8]
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004446:	60bb      	str	r3, [r7, #8]
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	015a      	lsls	r2, r3, #5
 800444c:	6a3b      	ldr	r3, [r7, #32]
 800444e:	4413      	add	r3, r2
 8004450:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004454:	461a      	mov	r2, r3
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	6013      	str	r3, [r2, #0]
 800445a:	6879      	ldr	r1, [r7, #4]
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	4613      	mov	r3, r2
 8004460:	011b      	lsls	r3, r3, #4
 8004462:	1a9b      	subs	r3, r3, r2
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	440b      	add	r3, r1
 8004468:	333c      	adds	r3, #60	@ 0x3c
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	f083 0301 	eor.w	r3, r3, #1
 8004470:	b2d8      	uxtb	r0, r3
 8004472:	6879      	ldr	r1, [r7, #4]
 8004474:	69ba      	ldr	r2, [r7, #24]
 8004476:	4613      	mov	r3, r2
 8004478:	011b      	lsls	r3, r3, #4
 800447a:	1a9b      	subs	r3, r3, r2
 800447c:	009b      	lsls	r3, r3, #2
 800447e:	440b      	add	r3, r1
 8004480:	333c      	adds	r3, #60	@ 0x3c
 8004482:	4602      	mov	r2, r0
 8004484:	701a      	strb	r2, [r3, #0]
 8004486:	e00c      	b.n	80044a2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004488:	6879      	ldr	r1, [r7, #4]
 800448a:	69ba      	ldr	r2, [r7, #24]
 800448c:	4613      	mov	r3, r2
 800448e:	011b      	lsls	r3, r3, #4
 8004490:	1a9b      	subs	r3, r3, r2
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	440b      	add	r3, r1
 8004496:	334c      	adds	r3, #76	@ 0x4c
 8004498:	2204      	movs	r2, #4
 800449a:	701a      	strb	r2, [r3, #0]
 800449c:	e001      	b.n	80044a2 <HCD_RXQLVL_IRQHandler+0x1b4>
 800449e:	bf00      	nop
 80044a0:	e000      	b.n	80044a4 <HCD_RXQLVL_IRQHandler+0x1b6>
 80044a2:	bf00      	nop
 80044a4:	bf00      	nop
 80044a6:	3728      	adds	r7, #40	@ 0x28
 80044a8:	46bd      	mov	sp, r7
 80044aa:	bd80      	pop	{r7, pc}

080044ac <HCD_Port_IRQHandler>:
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	617b      	str	r3, [r7, #20]
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	613b      	str	r3, [r7, #16]
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	60fb      	str	r3, [r7, #12]
 80044c8:	693b      	ldr	r3, [r7, #16]
 80044ca:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	60bb      	str	r3, [r7, #8]
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80044d8:	60bb      	str	r3, [r7, #8]
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	f003 0302 	and.w	r3, r3, #2
 80044e0:	2b02      	cmp	r3, #2
 80044e2:	d10b      	bne.n	80044fc <HCD_Port_IRQHandler+0x50>
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d102      	bne.n	80044f4 <HCD_Port_IRQHandler+0x48>
 80044ee:	6878      	ldr	r0, [r7, #4]
 80044f0:	f006 ff26 	bl	800b340 <HAL_HCD_Connect_Callback>
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	f043 0302 	orr.w	r3, r3, #2
 80044fa:	60bb      	str	r3, [r7, #8]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	f003 0308 	and.w	r3, r3, #8
 8004502:	2b08      	cmp	r3, #8
 8004504:	d132      	bne.n	800456c <HCD_Port_IRQHandler+0xc0>
 8004506:	68bb      	ldr	r3, [r7, #8]
 8004508:	f043 0308 	orr.w	r3, r3, #8
 800450c:	60bb      	str	r3, [r7, #8]
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	2b04      	cmp	r3, #4
 8004516:	d126      	bne.n	8004566 <HCD_Port_IRQHandler+0xba>
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	7a5b      	ldrb	r3, [r3, #9]
 800451c:	2b02      	cmp	r3, #2
 800451e:	d113      	bne.n	8004548 <HCD_Port_IRQHandler+0x9c>
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004526:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800452a:	d106      	bne.n	800453a <HCD_Port_IRQHandler+0x8e>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2102      	movs	r1, #2
 8004532:	4618      	mov	r0, r3
 8004534:	f003 ff4c 	bl	80083d0 <USB_InitFSLSPClkSel>
 8004538:	e011      	b.n	800455e <HCD_Port_IRQHandler+0xb2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2101      	movs	r1, #1
 8004540:	4618      	mov	r0, r3
 8004542:	f003 ff45 	bl	80083d0 <USB_InitFSLSPClkSel>
 8004546:	e00a      	b.n	800455e <HCD_Port_IRQHandler+0xb2>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	79db      	ldrb	r3, [r3, #7]
 800454c:	2b01      	cmp	r3, #1
 800454e:	d106      	bne.n	800455e <HCD_Port_IRQHandler+0xb2>
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004556:	461a      	mov	r2, r3
 8004558:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800455c:	6053      	str	r3, [r2, #4]
 800455e:	6878      	ldr	r0, [r7, #4]
 8004560:	f006 ff18 	bl	800b394 <HAL_HCD_PortEnabled_Callback>
 8004564:	e002      	b.n	800456c <HCD_Port_IRQHandler+0xc0>
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f006 ff22 	bl	800b3b0 <HAL_HCD_PortDisabled_Callback>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	f003 0320 	and.w	r3, r3, #32
 8004572:	2b20      	cmp	r3, #32
 8004574:	d103      	bne.n	800457e <HCD_Port_IRQHandler+0xd2>
 8004576:	68bb      	ldr	r3, [r7, #8]
 8004578:	f043 0320 	orr.w	r3, r3, #32
 800457c:	60bb      	str	r3, [r7, #8]
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004584:	461a      	mov	r2, r3
 8004586:	68bb      	ldr	r3, [r7, #8]
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	bf00      	nop
 800458c:	3718      	adds	r7, #24
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
	...

08004594 <HAL_I2C_Init>:
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d101      	bne.n	80045a6 <HAL_I2C_Init+0x12>
 80045a2:	2301      	movs	r3, #1
 80045a4:	e12b      	b.n	80047fe <HAL_I2C_Init+0x26a>
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d106      	bne.n	80045c0 <HAL_I2C_Init+0x2c>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f7fc fd3e 	bl	800103c <HAL_I2C_MspInit>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2224      	movs	r2, #36	@ 0x24
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 0201 	bic.w	r2, r2, #1
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80045e6:	601a      	str	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	681a      	ldr	r2, [r3, #0]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80045f6:	601a      	str	r2, [r3, #0]
 80045f8:	f001 f964 	bl	80058c4 <HAL_RCC_GetPCLK1Freq>
 80045fc:	60f8      	str	r0, [r7, #12]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	4a81      	ldr	r2, [pc, #516]	@ (8004808 <HAL_I2C_Init+0x274>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d807      	bhi.n	8004618 <HAL_I2C_Init+0x84>
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	4a80      	ldr	r2, [pc, #512]	@ (800480c <HAL_I2C_Init+0x278>)
 800460c:	4293      	cmp	r3, r2
 800460e:	bf94      	ite	ls
 8004610:	2301      	movls	r3, #1
 8004612:	2300      	movhi	r3, #0
 8004614:	b2db      	uxtb	r3, r3
 8004616:	e006      	b.n	8004626 <HAL_I2C_Init+0x92>
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	4a7d      	ldr	r2, [pc, #500]	@ (8004810 <HAL_I2C_Init+0x27c>)
 800461c:	4293      	cmp	r3, r2
 800461e:	bf94      	ite	ls
 8004620:	2301      	movls	r3, #1
 8004622:	2300      	movhi	r3, #0
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b00      	cmp	r3, #0
 8004628:	d001      	beq.n	800462e <HAL_I2C_Init+0x9a>
 800462a:	2301      	movs	r3, #1
 800462c:	e0e7      	b.n	80047fe <HAL_I2C_Init+0x26a>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	4a78      	ldr	r2, [pc, #480]	@ (8004814 <HAL_I2C_Init+0x280>)
 8004632:	fba2 2303 	umull	r2, r3, r2, r3
 8004636:	0c9b      	lsrs	r3, r3, #18
 8004638:	60bb      	str	r3, [r7, #8]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68ba      	ldr	r2, [r7, #8]
 800464a:	430a      	orrs	r2, r1
 800464c:	605a      	str	r2, [r3, #4]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	6a1b      	ldr	r3, [r3, #32]
 8004654:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	4a6a      	ldr	r2, [pc, #424]	@ (8004808 <HAL_I2C_Init+0x274>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d802      	bhi.n	8004668 <HAL_I2C_Init+0xd4>
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	3301      	adds	r3, #1
 8004666:	e009      	b.n	800467c <HAL_I2C_Init+0xe8>
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800466e:	fb02 f303 	mul.w	r3, r2, r3
 8004672:	4a69      	ldr	r2, [pc, #420]	@ (8004818 <HAL_I2C_Init+0x284>)
 8004674:	fba2 2303 	umull	r2, r3, r2, r3
 8004678:	099b      	lsrs	r3, r3, #6
 800467a:	3301      	adds	r3, #1
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	6812      	ldr	r2, [r2, #0]
 8004680:	430b      	orrs	r3, r1
 8004682:	6213      	str	r3, [r2, #32]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800468e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	495c      	ldr	r1, [pc, #368]	@ (8004808 <HAL_I2C_Init+0x274>)
 8004698:	428b      	cmp	r3, r1
 800469a:	d819      	bhi.n	80046d0 <HAL_I2C_Init+0x13c>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	1e59      	subs	r1, r3, #1
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	005b      	lsls	r3, r3, #1
 80046a6:	fbb1 f3f3 	udiv	r3, r1, r3
 80046aa:	1c59      	adds	r1, r3, #1
 80046ac:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80046b0:	400b      	ands	r3, r1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d00a      	beq.n	80046cc <HAL_I2C_Init+0x138>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	1e59      	subs	r1, r3, #1
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	fbb1 f3f3 	udiv	r3, r1, r3
 80046c4:	3301      	adds	r3, #1
 80046c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046ca:	e051      	b.n	8004770 <HAL_I2C_Init+0x1dc>
 80046cc:	2304      	movs	r3, #4
 80046ce:	e04f      	b.n	8004770 <HAL_I2C_Init+0x1dc>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	689b      	ldr	r3, [r3, #8]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d111      	bne.n	80046fc <HAL_I2C_Init+0x168>
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	1e58      	subs	r0, r3, #1
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	6859      	ldr	r1, [r3, #4]
 80046e0:	460b      	mov	r3, r1
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	440b      	add	r3, r1
 80046e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80046ea:	3301      	adds	r3, #1
 80046ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	bf0c      	ite	eq
 80046f4:	2301      	moveq	r3, #1
 80046f6:	2300      	movne	r3, #0
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	e012      	b.n	8004722 <HAL_I2C_Init+0x18e>
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	1e58      	subs	r0, r3, #1
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6859      	ldr	r1, [r3, #4]
 8004704:	460b      	mov	r3, r1
 8004706:	009b      	lsls	r3, r3, #2
 8004708:	440b      	add	r3, r1
 800470a:	0099      	lsls	r1, r3, #2
 800470c:	440b      	add	r3, r1
 800470e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004712:	3301      	adds	r3, #1
 8004714:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004718:	2b00      	cmp	r3, #0
 800471a:	bf0c      	ite	eq
 800471c:	2301      	moveq	r3, #1
 800471e:	2300      	movne	r3, #0
 8004720:	b2db      	uxtb	r3, r3
 8004722:	2b00      	cmp	r3, #0
 8004724:	d001      	beq.n	800472a <HAL_I2C_Init+0x196>
 8004726:	2301      	movs	r3, #1
 8004728:	e022      	b.n	8004770 <HAL_I2C_Init+0x1dc>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10e      	bne.n	8004750 <HAL_I2C_Init+0x1bc>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	1e58      	subs	r0, r3, #1
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6859      	ldr	r1, [r3, #4]
 800473a:	460b      	mov	r3, r1
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	440b      	add	r3, r1
 8004740:	fbb0 f3f3 	udiv	r3, r0, r3
 8004744:	3301      	adds	r3, #1
 8004746:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800474a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800474e:	e00f      	b.n	8004770 <HAL_I2C_Init+0x1dc>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	1e58      	subs	r0, r3, #1
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6859      	ldr	r1, [r3, #4]
 8004758:	460b      	mov	r3, r1
 800475a:	009b      	lsls	r3, r3, #2
 800475c:	440b      	add	r3, r1
 800475e:	0099      	lsls	r1, r3, #2
 8004760:	440b      	add	r3, r1
 8004762:	fbb0 f3f3 	udiv	r3, r0, r3
 8004766:	3301      	adds	r3, #1
 8004768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800476c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004770:	6879      	ldr	r1, [r7, #4]
 8004772:	6809      	ldr	r1, [r1, #0]
 8004774:	4313      	orrs	r3, r2
 8004776:	61cb      	str	r3, [r1, #28]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	69da      	ldr	r2, [r3, #28]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6a1b      	ldr	r3, [r3, #32]
 800478a:	431a      	orrs	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	430a      	orrs	r2, r1
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689b      	ldr	r3, [r3, #8]
 800479a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800479e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	6911      	ldr	r1, [r2, #16]
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	68d2      	ldr	r2, [r2, #12]
 80047aa:	4311      	orrs	r1, r2
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6812      	ldr	r2, [r2, #0]
 80047b0:	430b      	orrs	r3, r1
 80047b2:	6093      	str	r3, [r2, #8]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68db      	ldr	r3, [r3, #12]
 80047ba:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	695a      	ldr	r2, [r3, #20]
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	699b      	ldr	r3, [r3, #24]
 80047c6:	431a      	orrs	r2, r3
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	430a      	orrs	r2, r1
 80047ce:	60da      	str	r2, [r3, #12]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	681a      	ldr	r2, [r3, #0]
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	f042 0201 	orr.w	r2, r2, #1
 80047de:	601a      	str	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2200      	movs	r2, #0
 80047e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2220      	movs	r2, #32
 80047ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047fc:	2300      	movs	r3, #0
 80047fe:	4618      	mov	r0, r3
 8004800:	3710      	adds	r7, #16
 8004802:	46bd      	mov	sp, r7
 8004804:	bd80      	pop	{r7, pc}
 8004806:	bf00      	nop
 8004808:	000186a0 	.word	0x000186a0
 800480c:	001e847f 	.word	0x001e847f
 8004810:	003d08ff 	.word	0x003d08ff
 8004814:	431bde83 	.word	0x431bde83
 8004818:	10624dd3 	.word	0x10624dd3

0800481c <HAL_I2CEx_ConfigAnalogFilter>:
 800481c:	b480      	push	{r7}
 800481e:	b083      	sub	sp, #12
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
 8004824:	6039      	str	r1, [r7, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800482c:	b2db      	uxtb	r3, r3
 800482e:	2b20      	cmp	r3, #32
 8004830:	d129      	bne.n	8004886 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2224      	movs	r2, #36	@ 0x24
 8004836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	681a      	ldr	r2, [r3, #0]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f022 0201 	bic.w	r2, r2, #1
 8004848:	601a      	str	r2, [r3, #0]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f022 0210 	bic.w	r2, r2, #16
 8004858:	625a      	str	r2, [r3, #36]	@ 0x24
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	625a      	str	r2, [r3, #36]	@ 0x24
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	681a      	ldr	r2, [r3, #0]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f042 0201 	orr.w	r2, r2, #1
 8004878:	601a      	str	r2, [r3, #0]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2220      	movs	r2, #32
 800487e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004882:	2300      	movs	r3, #0
 8004884:	e000      	b.n	8004888 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
 8004886:	2302      	movs	r3, #2
 8004888:	4618      	mov	r0, r3
 800488a:	370c      	adds	r7, #12
 800488c:	46bd      	mov	sp, r7
 800488e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004892:	4770      	bx	lr

08004894 <HAL_I2CEx_ConfigDigitalFilter>:
 8004894:	b480      	push	{r7}
 8004896:	b085      	sub	sp, #20
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
 800489e:	2300      	movs	r3, #0
 80048a0:	81fb      	strh	r3, [r7, #14]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b20      	cmp	r3, #32
 80048ac:	d12a      	bne.n	8004904 <HAL_I2CEx_ConfigDigitalFilter+0x70>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2224      	movs	r2, #36	@ 0x24
 80048b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f022 0201 	bic.w	r2, r2, #1
 80048c4:	601a      	str	r2, [r3, #0]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048cc:	81fb      	strh	r3, [r7, #14]
 80048ce:	89fb      	ldrh	r3, [r7, #14]
 80048d0:	f023 030f 	bic.w	r3, r3, #15
 80048d4:	81fb      	strh	r3, [r7, #14]
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	b29a      	uxth	r2, r3
 80048da:	89fb      	ldrh	r3, [r7, #14]
 80048dc:	4313      	orrs	r3, r2
 80048de:	81fb      	strh	r3, [r7, #14]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	89fa      	ldrh	r2, [r7, #14]
 80048e6:	625a      	str	r2, [r3, #36]	@ 0x24
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	681a      	ldr	r2, [r3, #0]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f042 0201 	orr.w	r2, r2, #1
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004900:	2300      	movs	r3, #0
 8004902:	e000      	b.n	8004906 <HAL_I2CEx_ConfigDigitalFilter+0x72>
 8004904:	2302      	movs	r3, #2
 8004906:	4618      	mov	r0, r3
 8004908:	3714      	adds	r7, #20
 800490a:	46bd      	mov	sp, r7
 800490c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004910:	4770      	bx	lr
	...

08004914 <HAL_LTDC_Init>:
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_LTDC_Init+0x12>
 8004922:	2301      	movs	r3, #1
 8004924:	e0bf      	b.n	8004aa6 <HAL_LTDC_Init+0x192>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d106      	bne.n	8004940 <HAL_LTDC_Init+0x2c>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7fc fbe8 	bl	8001110 <HAL_LTDC_MspInit>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2202      	movs	r2, #2
 8004944:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	699a      	ldr	r2, [r3, #24]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004956:	619a      	str	r2, [r3, #24]
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	6999      	ldr	r1, [r3, #24]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685a      	ldr	r2, [r3, #4]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	431a      	orrs	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	68db      	ldr	r3, [r3, #12]
 800496c:	431a      	orrs	r2, r3
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	431a      	orrs	r2, r3
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	430a      	orrs	r2, r1
 800497a:	619a      	str	r2, [r3, #24]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6899      	ldr	r1, [r3, #8]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	4b4a      	ldr	r3, [pc, #296]	@ (8004ab0 <HAL_LTDC_Init+0x19c>)
 8004988:	400b      	ands	r3, r1
 800498a:	6093      	str	r3, [r2, #8]
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	695b      	ldr	r3, [r3, #20]
 8004990:	041b      	lsls	r3, r3, #16
 8004992:	60fb      	str	r3, [r7, #12]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	6899      	ldr	r1, [r3, #8]
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	699a      	ldr	r2, [r3, #24]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	431a      	orrs	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	609a      	str	r2, [r3, #8]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	68d9      	ldr	r1, [r3, #12]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	4b3e      	ldr	r3, [pc, #248]	@ (8004ab0 <HAL_LTDC_Init+0x19c>)
 80049b6:	400b      	ands	r3, r1
 80049b8:	60d3      	str	r3, [r2, #12]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	041b      	lsls	r3, r3, #16
 80049c0:	60fb      	str	r3, [r7, #12]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	68d9      	ldr	r1, [r3, #12]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6a1a      	ldr	r2, [r3, #32]
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	431a      	orrs	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	430a      	orrs	r2, r1
 80049d6:	60da      	str	r2, [r3, #12]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	6919      	ldr	r1, [r3, #16]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681a      	ldr	r2, [r3, #0]
 80049e2:	4b33      	ldr	r3, [pc, #204]	@ (8004ab0 <HAL_LTDC_Init+0x19c>)
 80049e4:	400b      	ands	r3, r1
 80049e6:	6113      	str	r3, [r2, #16]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ec:	041b      	lsls	r3, r3, #16
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6919      	ldr	r1, [r3, #16]
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	431a      	orrs	r2, r3
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	611a      	str	r2, [r3, #16]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6959      	ldr	r1, [r3, #20]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681a      	ldr	r2, [r3, #0]
 8004a10:	4b27      	ldr	r3, [pc, #156]	@ (8004ab0 <HAL_LTDC_Init+0x19c>)
 8004a12:	400b      	ands	r3, r1
 8004a14:	6153      	str	r3, [r2, #20]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a1a:	041b      	lsls	r3, r3, #16
 8004a1c:	60fb      	str	r3, [r7, #12]
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6959      	ldr	r1, [r3, #20]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	615a      	str	r2, [r3, #20]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004a3a:	021b      	lsls	r3, r3, #8
 8004a3c:	60fb      	str	r3, [r7, #12]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004a44:	041b      	lsls	r3, r3, #16
 8004a46:	60bb      	str	r3, [r7, #8]
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004a56:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4313      	orrs	r3, r2
 8004a64:	687a      	ldr	r2, [r7, #4]
 8004a66:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8004a6a:	431a      	orrs	r2, r3
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	430a      	orrs	r2, r1
 8004a72:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f042 0206 	orr.w	r2, r2, #6
 8004a82:	635a      	str	r2, [r3, #52]	@ 0x34
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	699a      	ldr	r2, [r3, #24]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f042 0201 	orr.w	r2, r2, #1
 8004a92:	619a      	str	r2, [r3, #24]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	f000f800 	.word	0xf000f800

08004ab4 <HAL_LTDC_IRQHandler>:
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac2:	60fb      	str	r3, [r7, #12]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004aca:	60bb      	str	r3, [r7, #8]
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d023      	beq.n	8004b1e <HAL_LTDC_IRQHandler+0x6a>
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	f003 0304 	and.w	r3, r3, #4
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d01e      	beq.n	8004b1e <HAL_LTDC_IRQHandler+0x6a>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f022 0204 	bic.w	r2, r2, #4
 8004aee:	635a      	str	r2, [r3, #52]	@ 0x34
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2204      	movs	r2, #4
 8004af6:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004afe:	f043 0201 	orr.w	r2, r3, #1
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2204      	movs	r2, #4
 8004b0c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 8004b18:	6878      	ldr	r0, [r7, #4]
 8004b1a:	f000 f86f 	bl	8004bfc <HAL_LTDC_ErrorCallback>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	f003 0302 	and.w	r3, r3, #2
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d023      	beq.n	8004b70 <HAL_LTDC_IRQHandler+0xbc>
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	f003 0302 	and.w	r3, r3, #2
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d01e      	beq.n	8004b70 <HAL_LTDC_IRQHandler+0xbc>
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f022 0202 	bic.w	r2, r2, #2
 8004b40:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	2202      	movs	r2, #2
 8004b48:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004b50:	f043 0202 	orr.w	r2, r3, #2
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2204      	movs	r2, #4
 8004b5e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f000 f846 	bl	8004bfc <HAL_LTDC_ErrorCallback>
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d01b      	beq.n	8004bb2 <HAL_LTDC_IRQHandler+0xfe>
 8004b7a:	68bb      	ldr	r3, [r7, #8]
 8004b7c:	f003 0301 	and.w	r3, r3, #1
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d016      	beq.n	8004bb2 <HAL_LTDC_IRQHandler+0xfe>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f022 0201 	bic.w	r2, r2, #1
 8004b92:	635a      	str	r2, [r3, #52]	@ 0x34
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2201      	movs	r2, #1
 8004b9a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	2201      	movs	r2, #1
 8004ba0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 f82f 	bl	8004c10 <HAL_LTDC_LineEventCallback>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f003 0308 	and.w	r3, r3, #8
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d01b      	beq.n	8004bf4 <HAL_LTDC_IRQHandler+0x140>
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	f003 0308 	and.w	r3, r3, #8
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d016      	beq.n	8004bf4 <HAL_LTDC_IRQHandler+0x140>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f022 0208 	bic.w	r2, r2, #8
 8004bd4:	635a      	str	r2, [r3, #52]	@ 0x34
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	2208      	movs	r2, #8
 8004bdc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 8004bee:	6878      	ldr	r0, [r7, #4]
 8004bf0:	f000 f818 	bl	8004c24 <HAL_LTDC_ReloadEventCallback>
 8004bf4:	bf00      	nop
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <HAL_LTDC_ErrorCallback>:
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
 8004c04:	bf00      	nop
 8004c06:	370c      	adds	r7, #12
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0e:	4770      	bx	lr

08004c10 <HAL_LTDC_LineEventCallback>:
 8004c10:	b480      	push	{r7}
 8004c12:	b083      	sub	sp, #12
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
 8004c18:	bf00      	nop
 8004c1a:	370c      	adds	r7, #12
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c22:	4770      	bx	lr

08004c24 <HAL_LTDC_ReloadEventCallback>:
 8004c24:	b480      	push	{r7}
 8004c26:	b083      	sub	sp, #12
 8004c28:	af00      	add	r7, sp, #0
 8004c2a:	6078      	str	r0, [r7, #4]
 8004c2c:	bf00      	nop
 8004c2e:	370c      	adds	r7, #12
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <HAL_LTDC_ConfigLayer>:
 8004c38:	b5b0      	push	{r4, r5, r7, lr}
 8004c3a:	b084      	sub	sp, #16
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	60f8      	str	r0, [r7, #12]
 8004c40:	60b9      	str	r1, [r7, #8]
 8004c42:	607a      	str	r2, [r7, #4]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004c4a:	2b01      	cmp	r3, #1
 8004c4c:	d101      	bne.n	8004c52 <HAL_LTDC_ConfigLayer+0x1a>
 8004c4e:	2302      	movs	r3, #2
 8004c50:	e02c      	b.n	8004cac <HAL_LTDC_ConfigLayer+0x74>
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	2201      	movs	r2, #1
 8004c56:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	2202      	movs	r2, #2
 8004c5e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 8004c62:	68fa      	ldr	r2, [r7, #12]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2134      	movs	r1, #52	@ 0x34
 8004c68:	fb01 f303 	mul.w	r3, r1, r3
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004c72:	68bb      	ldr	r3, [r7, #8]
 8004c74:	4614      	mov	r4, r2
 8004c76:	461d      	mov	r5, r3
 8004c78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c84:	682b      	ldr	r3, [r5, #0]
 8004c86:	6023      	str	r3, [r4, #0]
 8004c88:	687a      	ldr	r2, [r7, #4]
 8004c8a:	68b9      	ldr	r1, [r7, #8]
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 f811 	bl	8004cb4 <LTDC_SetConfig>
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2201      	movs	r2, #1
 8004c98:	625a      	str	r2, [r3, #36]	@ 0x24
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2201      	movs	r2, #1
 8004c9e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2200      	movs	r2, #0
 8004ca6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 8004caa:	2300      	movs	r3, #0
 8004cac:	4618      	mov	r0, r3
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bdb0      	pop	{r4, r5, r7, pc}

08004cb4 <LTDC_SetConfig>:
 8004cb4:	b480      	push	{r7}
 8004cb6:	b089      	sub	sp, #36	@ 0x24
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	60f8      	str	r0, [r7, #12]
 8004cbc:	60b9      	str	r1, [r7, #8]
 8004cbe:	607a      	str	r2, [r7, #4]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	685a      	ldr	r2, [r3, #4]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	68db      	ldr	r3, [r3, #12]
 8004cca:	0c1b      	lsrs	r3, r3, #16
 8004ccc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cd0:	4413      	add	r3, r2
 8004cd2:	041b      	lsls	r3, r3, #16
 8004cd4:	61fb      	str	r3, [r7, #28]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	461a      	mov	r2, r3
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	01db      	lsls	r3, r3, #7
 8004ce0:	4413      	add	r3, r2
 8004ce2:	3384      	adds	r3, #132	@ 0x84
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	6812      	ldr	r2, [r2, #0]
 8004cea:	4611      	mov	r1, r2
 8004cec:	687a      	ldr	r2, [r7, #4]
 8004cee:	01d2      	lsls	r2, r2, #7
 8004cf0:	440a      	add	r2, r1
 8004cf2:	3284      	adds	r2, #132	@ 0x84
 8004cf4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004cf8:	6053      	str	r3, [r2, #4]
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	681a      	ldr	r2, [r3, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	68db      	ldr	r3, [r3, #12]
 8004d04:	0c1b      	lsrs	r3, r3, #16
 8004d06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d0a:	4413      	add	r3, r2
 8004d0c:	1c5a      	adds	r2, r3, #1
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	4619      	mov	r1, r3
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	01db      	lsls	r3, r3, #7
 8004d18:	440b      	add	r3, r1
 8004d1a:	3384      	adds	r3, #132	@ 0x84
 8004d1c:	4619      	mov	r1, r3
 8004d1e:	69fb      	ldr	r3, [r7, #28]
 8004d20:	4313      	orrs	r3, r2
 8004d22:	604b      	str	r3, [r1, #4]
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	68da      	ldr	r2, [r3, #12]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	68db      	ldr	r3, [r3, #12]
 8004d2e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d32:	4413      	add	r3, r2
 8004d34:	041b      	lsls	r3, r3, #16
 8004d36:	61fb      	str	r3, [r7, #28]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	01db      	lsls	r3, r3, #7
 8004d42:	4413      	add	r3, r2
 8004d44:	3384      	adds	r3, #132	@ 0x84
 8004d46:	689b      	ldr	r3, [r3, #8]
 8004d48:	68fa      	ldr	r2, [r7, #12]
 8004d4a:	6812      	ldr	r2, [r2, #0]
 8004d4c:	4611      	mov	r1, r2
 8004d4e:	687a      	ldr	r2, [r7, #4]
 8004d50:	01d2      	lsls	r2, r2, #7
 8004d52:	440a      	add	r2, r1
 8004d54:	3284      	adds	r2, #132	@ 0x84
 8004d56:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004d5a:	6093      	str	r3, [r2, #8]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	689a      	ldr	r2, [r3, #8]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	68db      	ldr	r3, [r3, #12]
 8004d66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d6a:	4413      	add	r3, r2
 8004d6c:	1c5a      	adds	r2, r3, #1
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	4619      	mov	r1, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	01db      	lsls	r3, r3, #7
 8004d78:	440b      	add	r3, r1
 8004d7a:	3384      	adds	r3, #132	@ 0x84
 8004d7c:	4619      	mov	r1, r3
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	4313      	orrs	r3, r2
 8004d82:	608b      	str	r3, [r1, #8]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	461a      	mov	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	01db      	lsls	r3, r3, #7
 8004d8e:	4413      	add	r3, r2
 8004d90:	3384      	adds	r3, #132	@ 0x84
 8004d92:	691b      	ldr	r3, [r3, #16]
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	6812      	ldr	r2, [r2, #0]
 8004d98:	4611      	mov	r1, r2
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	01d2      	lsls	r2, r2, #7
 8004d9e:	440a      	add	r2, r1
 8004da0:	3284      	adds	r2, #132	@ 0x84
 8004da2:	f023 0307 	bic.w	r3, r3, #7
 8004da6:	6113      	str	r3, [r2, #16]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	461a      	mov	r2, r3
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	01db      	lsls	r3, r3, #7
 8004db2:	4413      	add	r3, r2
 8004db4:	3384      	adds	r3, #132	@ 0x84
 8004db6:	461a      	mov	r2, r3
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	691b      	ldr	r3, [r3, #16]
 8004dbc:	6113      	str	r3, [r2, #16]
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004dc4:	021b      	lsls	r3, r3, #8
 8004dc6:	61fb      	str	r3, [r7, #28]
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004dce:	041b      	lsls	r3, r3, #16
 8004dd0:	61bb      	str	r3, [r7, #24]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	699b      	ldr	r3, [r3, #24]
 8004dd6:	061b      	lsls	r3, r3, #24
 8004dd8:	617b      	str	r3, [r7, #20]
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	461a      	mov	r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	01db      	lsls	r3, r3, #7
 8004de4:	4413      	add	r3, r2
 8004de6:	3384      	adds	r3, #132	@ 0x84
 8004de8:	699b      	ldr	r3, [r3, #24]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	461a      	mov	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	01db      	lsls	r3, r3, #7
 8004df4:	4413      	add	r3, r2
 8004df6:	3384      	adds	r3, #132	@ 0x84
 8004df8:	461a      	mov	r2, r3
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	6193      	str	r3, [r2, #24]
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004e04:	461a      	mov	r2, r3
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	4619      	mov	r1, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	01db      	lsls	r3, r3, #7
 8004e18:	440b      	add	r3, r1
 8004e1a:	3384      	adds	r3, #132	@ 0x84
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	4313      	orrs	r3, r2
 8004e22:	618b      	str	r3, [r1, #24]
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	461a      	mov	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	01db      	lsls	r3, r3, #7
 8004e2e:	4413      	add	r3, r2
 8004e30:	3384      	adds	r3, #132	@ 0x84
 8004e32:	695b      	ldr	r3, [r3, #20]
 8004e34:	68fa      	ldr	r2, [r7, #12]
 8004e36:	6812      	ldr	r2, [r2, #0]
 8004e38:	4611      	mov	r1, r2
 8004e3a:	687a      	ldr	r2, [r7, #4]
 8004e3c:	01d2      	lsls	r2, r2, #7
 8004e3e:	440a      	add	r2, r1
 8004e40:	3284      	adds	r2, #132	@ 0x84
 8004e42:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004e46:	6153      	str	r3, [r2, #20]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	01db      	lsls	r3, r3, #7
 8004e52:	4413      	add	r3, r2
 8004e54:	3384      	adds	r3, #132	@ 0x84
 8004e56:	461a      	mov	r2, r3
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	6153      	str	r3, [r2, #20]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	461a      	mov	r2, r3
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	01db      	lsls	r3, r3, #7
 8004e68:	4413      	add	r3, r2
 8004e6a:	3384      	adds	r3, #132	@ 0x84
 8004e6c:	69db      	ldr	r3, [r3, #28]
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	6812      	ldr	r2, [r2, #0]
 8004e72:	4611      	mov	r1, r2
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	01d2      	lsls	r2, r2, #7
 8004e78:	440a      	add	r2, r1
 8004e7a:	3284      	adds	r2, #132	@ 0x84
 8004e7c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004e80:	f023 0307 	bic.w	r3, r3, #7
 8004e84:	61d3      	str	r3, [r2, #28]
 8004e86:	68bb      	ldr	r3, [r7, #8]
 8004e88:	69da      	ldr	r2, [r3, #28]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	6a1b      	ldr	r3, [r3, #32]
 8004e8e:	68f9      	ldr	r1, [r7, #12]
 8004e90:	6809      	ldr	r1, [r1, #0]
 8004e92:	4608      	mov	r0, r1
 8004e94:	6879      	ldr	r1, [r7, #4]
 8004e96:	01c9      	lsls	r1, r1, #7
 8004e98:	4401      	add	r1, r0
 8004e9a:	3184      	adds	r1, #132	@ 0x84
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	61cb      	str	r3, [r1, #28]
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	461a      	mov	r2, r3
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	01db      	lsls	r3, r3, #7
 8004eaa:	4413      	add	r3, r2
 8004eac:	3384      	adds	r3, #132	@ 0x84
 8004eae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	461a      	mov	r2, r3
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	01db      	lsls	r3, r3, #7
 8004eba:	4413      	add	r3, r2
 8004ebc:	3384      	adds	r3, #132	@ 0x84
 8004ebe:	461a      	mov	r2, r3
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	6293      	str	r3, [r2, #40]	@ 0x28
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	461a      	mov	r2, r3
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	01db      	lsls	r3, r3, #7
 8004ece:	4413      	add	r3, r2
 8004ed0:	3384      	adds	r3, #132	@ 0x84
 8004ed2:	461a      	mov	r2, r3
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed8:	6293      	str	r3, [r2, #40]	@ 0x28
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	691b      	ldr	r3, [r3, #16]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d102      	bne.n	8004ee8 <LTDC_SetConfig+0x234>
 8004ee2:	2304      	movs	r3, #4
 8004ee4:	61fb      	str	r3, [r7, #28]
 8004ee6:	e01b      	b.n	8004f20 <LTDC_SetConfig+0x26c>
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d102      	bne.n	8004ef6 <LTDC_SetConfig+0x242>
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	61fb      	str	r3, [r7, #28]
 8004ef4:	e014      	b.n	8004f20 <LTDC_SetConfig+0x26c>
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	2b04      	cmp	r3, #4
 8004efc:	d00b      	beq.n	8004f16 <LTDC_SetConfig+0x262>
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	2b02      	cmp	r3, #2
 8004f04:	d007      	beq.n	8004f16 <LTDC_SetConfig+0x262>
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	691b      	ldr	r3, [r3, #16]
 8004f0a:	2b03      	cmp	r3, #3
 8004f0c:	d003      	beq.n	8004f16 <LTDC_SetConfig+0x262>
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	691b      	ldr	r3, [r3, #16]
 8004f12:	2b07      	cmp	r3, #7
 8004f14:	d102      	bne.n	8004f1c <LTDC_SetConfig+0x268>
 8004f16:	2302      	movs	r3, #2
 8004f18:	61fb      	str	r3, [r7, #28]
 8004f1a:	e001      	b.n	8004f20 <LTDC_SetConfig+0x26c>
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	61fb      	str	r3, [r7, #28]
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	461a      	mov	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	01db      	lsls	r3, r3, #7
 8004f2a:	4413      	add	r3, r2
 8004f2c:	3384      	adds	r3, #132	@ 0x84
 8004f2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f30:	68fa      	ldr	r2, [r7, #12]
 8004f32:	6812      	ldr	r2, [r2, #0]
 8004f34:	4611      	mov	r1, r2
 8004f36:	687a      	ldr	r2, [r7, #4]
 8004f38:	01d2      	lsls	r2, r2, #7
 8004f3a:	440a      	add	r2, r1
 8004f3c:	3284      	adds	r2, #132	@ 0x84
 8004f3e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004f42:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004f44:	68bb      	ldr	r3, [r7, #8]
 8004f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f48:	69fa      	ldr	r2, [r7, #28]
 8004f4a:	fb02 f303 	mul.w	r3, r2, r3
 8004f4e:	041a      	lsls	r2, r3, #16
 8004f50:	68bb      	ldr	r3, [r7, #8]
 8004f52:	6859      	ldr	r1, [r3, #4]
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	1acb      	subs	r3, r1, r3
 8004f5a:	69f9      	ldr	r1, [r7, #28]
 8004f5c:	fb01 f303 	mul.w	r3, r1, r3
 8004f60:	3303      	adds	r3, #3
 8004f62:	68f9      	ldr	r1, [r7, #12]
 8004f64:	6809      	ldr	r1, [r1, #0]
 8004f66:	4608      	mov	r0, r1
 8004f68:	6879      	ldr	r1, [r7, #4]
 8004f6a:	01c9      	lsls	r1, r1, #7
 8004f6c:	4401      	add	r1, r0
 8004f6e:	3184      	adds	r1, #132	@ 0x84
 8004f70:	4313      	orrs	r3, r2
 8004f72:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	461a      	mov	r2, r3
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	01db      	lsls	r3, r3, #7
 8004f7e:	4413      	add	r3, r2
 8004f80:	3384      	adds	r3, #132	@ 0x84
 8004f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004f84:	68fa      	ldr	r2, [r7, #12]
 8004f86:	6812      	ldr	r2, [r2, #0]
 8004f88:	4611      	mov	r1, r2
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	01d2      	lsls	r2, r2, #7
 8004f8e:	440a      	add	r2, r1
 8004f90:	3284      	adds	r2, #132	@ 0x84
 8004f92:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004f96:	f023 0307 	bic.w	r3, r3, #7
 8004f9a:	6313      	str	r3, [r2, #48]	@ 0x30
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	01db      	lsls	r3, r3, #7
 8004fa6:	4413      	add	r3, r2
 8004fa8:	3384      	adds	r3, #132	@ 0x84
 8004faa:	461a      	mov	r2, r3
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	01db      	lsls	r3, r3, #7
 8004fbc:	4413      	add	r3, r2
 8004fbe:	3384      	adds	r3, #132	@ 0x84
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68fa      	ldr	r2, [r7, #12]
 8004fc4:	6812      	ldr	r2, [r2, #0]
 8004fc6:	4611      	mov	r1, r2
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	01d2      	lsls	r2, r2, #7
 8004fcc:	440a      	add	r2, r1
 8004fce:	3284      	adds	r2, #132	@ 0x84
 8004fd0:	f043 0301 	orr.w	r3, r3, #1
 8004fd4:	6013      	str	r3, [r2, #0]
 8004fd6:	bf00      	nop
 8004fd8:	3724      	adds	r7, #36	@ 0x24
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
	...

08004fe4 <HAL_RCC_OscConfig>:
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b086      	sub	sp, #24
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d101      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x12>
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e267      	b.n	80054c6 <HAL_RCC_OscConfig+0x4e2>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f003 0301 	and.w	r3, r3, #1
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d075      	beq.n	80050ee <HAL_RCC_OscConfig+0x10a>
 8005002:	4b88      	ldr	r3, [pc, #544]	@ (8005224 <HAL_RCC_OscConfig+0x240>)
 8005004:	689b      	ldr	r3, [r3, #8]
 8005006:	f003 030c 	and.w	r3, r3, #12
 800500a:	2b04      	cmp	r3, #4
 800500c:	d00c      	beq.n	8005028 <HAL_RCC_OscConfig+0x44>
 800500e:	4b85      	ldr	r3, [pc, #532]	@ (8005224 <HAL_RCC_OscConfig+0x240>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f003 030c 	and.w	r3, r3, #12
 8005016:	2b08      	cmp	r3, #8
 8005018:	d112      	bne.n	8005040 <HAL_RCC_OscConfig+0x5c>
 800501a:	4b82      	ldr	r3, [pc, #520]	@ (8005224 <HAL_RCC_OscConfig+0x240>)
 800501c:	685b      	ldr	r3, [r3, #4]
 800501e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005022:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005026:	d10b      	bne.n	8005040 <HAL_RCC_OscConfig+0x5c>
 8005028:	4b7e      	ldr	r3, [pc, #504]	@ (8005224 <HAL_RCC_OscConfig+0x240>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005030:	2b00      	cmp	r3, #0
 8005032:	d05b      	beq.n	80050ec <HAL_RCC_OscConfig+0x108>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d157      	bne.n	80050ec <HAL_RCC_OscConfig+0x108>
 800503c:	2301      	movs	r3, #1
 800503e:	e242      	b.n	80054c6 <HAL_RCC_OscConfig+0x4e2>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005048:	d106      	bne.n	8005058 <HAL_RCC_OscConfig+0x74>
 800504a:	4b76      	ldr	r3, [pc, #472]	@ (8005224 <HAL_RCC_OscConfig+0x240>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a75      	ldr	r2, [pc, #468]	@ (8005224 <HAL_RCC_OscConfig+0x240>)
 8005050:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005054:	6013      	str	r3, [r2, #0]
 8005056:	e01d      	b.n	8005094 <HAL_RCC_OscConfig+0xb0>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005060:	d10c      	bne.n	800507c <HAL_RCC_OscConfig+0x98>
 8005062:	4b70      	ldr	r3, [pc, #448]	@ (8005224 <HAL_RCC_OscConfig+0x240>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	4a6f      	ldr	r2, [pc, #444]	@ (8005224 <HAL_RCC_OscConfig+0x240>)
 8005068:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800506c:	6013      	str	r3, [r2, #0]
 800506e:	4b6d      	ldr	r3, [pc, #436]	@ (8005224 <HAL_RCC_OscConfig+0x240>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a6c      	ldr	r2, [pc, #432]	@ (8005224 <HAL_RCC_OscConfig+0x240>)
 8005074:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005078:	6013      	str	r3, [r2, #0]
 800507a:	e00b      	b.n	8005094 <HAL_RCC_OscConfig+0xb0>
 800507c:	4b69      	ldr	r3, [pc, #420]	@ (8005224 <HAL_RCC_OscConfig+0x240>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a68      	ldr	r2, [pc, #416]	@ (8005224 <HAL_RCC_OscConfig+0x240>)
 8005082:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005086:	6013      	str	r3, [r2, #0]
 8005088:	4b66      	ldr	r3, [pc, #408]	@ (8005224 <HAL_RCC_OscConfig+0x240>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a65      	ldr	r2, [pc, #404]	@ (8005224 <HAL_RCC_OscConfig+0x240>)
 800508e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005092:	6013      	str	r3, [r2, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d013      	beq.n	80050c4 <HAL_RCC_OscConfig+0xe0>
 800509c:	f7fc fc44 	bl	8001928 <HAL_GetTick>
 80050a0:	6138      	str	r0, [r7, #16]
 80050a2:	e008      	b.n	80050b6 <HAL_RCC_OscConfig+0xd2>
 80050a4:	f7fc fc40 	bl	8001928 <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b64      	cmp	r3, #100	@ 0x64
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_OscConfig+0xd2>
 80050b2:	2303      	movs	r3, #3
 80050b4:	e207      	b.n	80054c6 <HAL_RCC_OscConfig+0x4e2>
 80050b6:	4b5b      	ldr	r3, [pc, #364]	@ (8005224 <HAL_RCC_OscConfig+0x240>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d0f0      	beq.n	80050a4 <HAL_RCC_OscConfig+0xc0>
 80050c2:	e014      	b.n	80050ee <HAL_RCC_OscConfig+0x10a>
 80050c4:	f7fc fc30 	bl	8001928 <HAL_GetTick>
 80050c8:	6138      	str	r0, [r7, #16]
 80050ca:	e008      	b.n	80050de <HAL_RCC_OscConfig+0xfa>
 80050cc:	f7fc fc2c 	bl	8001928 <HAL_GetTick>
 80050d0:	4602      	mov	r2, r0
 80050d2:	693b      	ldr	r3, [r7, #16]
 80050d4:	1ad3      	subs	r3, r2, r3
 80050d6:	2b64      	cmp	r3, #100	@ 0x64
 80050d8:	d901      	bls.n	80050de <HAL_RCC_OscConfig+0xfa>
 80050da:	2303      	movs	r3, #3
 80050dc:	e1f3      	b.n	80054c6 <HAL_RCC_OscConfig+0x4e2>
 80050de:	4b51      	ldr	r3, [pc, #324]	@ (8005224 <HAL_RCC_OscConfig+0x240>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1f0      	bne.n	80050cc <HAL_RCC_OscConfig+0xe8>
 80050ea:	e000      	b.n	80050ee <HAL_RCC_OscConfig+0x10a>
 80050ec:	bf00      	nop
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d063      	beq.n	80051c2 <HAL_RCC_OscConfig+0x1de>
 80050fa:	4b4a      	ldr	r3, [pc, #296]	@ (8005224 <HAL_RCC_OscConfig+0x240>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f003 030c 	and.w	r3, r3, #12
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00b      	beq.n	800511e <HAL_RCC_OscConfig+0x13a>
 8005106:	4b47      	ldr	r3, [pc, #284]	@ (8005224 <HAL_RCC_OscConfig+0x240>)
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	f003 030c 	and.w	r3, r3, #12
 800510e:	2b08      	cmp	r3, #8
 8005110:	d11c      	bne.n	800514c <HAL_RCC_OscConfig+0x168>
 8005112:	4b44      	ldr	r3, [pc, #272]	@ (8005224 <HAL_RCC_OscConfig+0x240>)
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d116      	bne.n	800514c <HAL_RCC_OscConfig+0x168>
 800511e:	4b41      	ldr	r3, [pc, #260]	@ (8005224 <HAL_RCC_OscConfig+0x240>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0302 	and.w	r3, r3, #2
 8005126:	2b00      	cmp	r3, #0
 8005128:	d005      	beq.n	8005136 <HAL_RCC_OscConfig+0x152>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	68db      	ldr	r3, [r3, #12]
 800512e:	2b01      	cmp	r3, #1
 8005130:	d001      	beq.n	8005136 <HAL_RCC_OscConfig+0x152>
 8005132:	2301      	movs	r3, #1
 8005134:	e1c7      	b.n	80054c6 <HAL_RCC_OscConfig+0x4e2>
 8005136:	4b3b      	ldr	r3, [pc, #236]	@ (8005224 <HAL_RCC_OscConfig+0x240>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	00db      	lsls	r3, r3, #3
 8005144:	4937      	ldr	r1, [pc, #220]	@ (8005224 <HAL_RCC_OscConfig+0x240>)
 8005146:	4313      	orrs	r3, r2
 8005148:	600b      	str	r3, [r1, #0]
 800514a:	e03a      	b.n	80051c2 <HAL_RCC_OscConfig+0x1de>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	68db      	ldr	r3, [r3, #12]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d020      	beq.n	8005196 <HAL_RCC_OscConfig+0x1b2>
 8005154:	4b34      	ldr	r3, [pc, #208]	@ (8005228 <HAL_RCC_OscConfig+0x244>)
 8005156:	2201      	movs	r2, #1
 8005158:	601a      	str	r2, [r3, #0]
 800515a:	f7fc fbe5 	bl	8001928 <HAL_GetTick>
 800515e:	6138      	str	r0, [r7, #16]
 8005160:	e008      	b.n	8005174 <HAL_RCC_OscConfig+0x190>
 8005162:	f7fc fbe1 	bl	8001928 <HAL_GetTick>
 8005166:	4602      	mov	r2, r0
 8005168:	693b      	ldr	r3, [r7, #16]
 800516a:	1ad3      	subs	r3, r2, r3
 800516c:	2b02      	cmp	r3, #2
 800516e:	d901      	bls.n	8005174 <HAL_RCC_OscConfig+0x190>
 8005170:	2303      	movs	r3, #3
 8005172:	e1a8      	b.n	80054c6 <HAL_RCC_OscConfig+0x4e2>
 8005174:	4b2b      	ldr	r3, [pc, #172]	@ (8005224 <HAL_RCC_OscConfig+0x240>)
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f003 0302 	and.w	r3, r3, #2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d0f0      	beq.n	8005162 <HAL_RCC_OscConfig+0x17e>
 8005180:	4b28      	ldr	r3, [pc, #160]	@ (8005224 <HAL_RCC_OscConfig+0x240>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	691b      	ldr	r3, [r3, #16]
 800518c:	00db      	lsls	r3, r3, #3
 800518e:	4925      	ldr	r1, [pc, #148]	@ (8005224 <HAL_RCC_OscConfig+0x240>)
 8005190:	4313      	orrs	r3, r2
 8005192:	600b      	str	r3, [r1, #0]
 8005194:	e015      	b.n	80051c2 <HAL_RCC_OscConfig+0x1de>
 8005196:	4b24      	ldr	r3, [pc, #144]	@ (8005228 <HAL_RCC_OscConfig+0x244>)
 8005198:	2200      	movs	r2, #0
 800519a:	601a      	str	r2, [r3, #0]
 800519c:	f7fc fbc4 	bl	8001928 <HAL_GetTick>
 80051a0:	6138      	str	r0, [r7, #16]
 80051a2:	e008      	b.n	80051b6 <HAL_RCC_OscConfig+0x1d2>
 80051a4:	f7fc fbc0 	bl	8001928 <HAL_GetTick>
 80051a8:	4602      	mov	r2, r0
 80051aa:	693b      	ldr	r3, [r7, #16]
 80051ac:	1ad3      	subs	r3, r2, r3
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d901      	bls.n	80051b6 <HAL_RCC_OscConfig+0x1d2>
 80051b2:	2303      	movs	r3, #3
 80051b4:	e187      	b.n	80054c6 <HAL_RCC_OscConfig+0x4e2>
 80051b6:	4b1b      	ldr	r3, [pc, #108]	@ (8005224 <HAL_RCC_OscConfig+0x240>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d1f0      	bne.n	80051a4 <HAL_RCC_OscConfig+0x1c0>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f003 0308 	and.w	r3, r3, #8
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d036      	beq.n	800523c <HAL_RCC_OscConfig+0x258>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d016      	beq.n	8005204 <HAL_RCC_OscConfig+0x220>
 80051d6:	4b15      	ldr	r3, [pc, #84]	@ (800522c <HAL_RCC_OscConfig+0x248>)
 80051d8:	2201      	movs	r2, #1
 80051da:	601a      	str	r2, [r3, #0]
 80051dc:	f7fc fba4 	bl	8001928 <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0x212>
 80051e4:	f7fc fba0 	bl	8001928 <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x212>
 80051f2:	2303      	movs	r3, #3
 80051f4:	e167      	b.n	80054c6 <HAL_RCC_OscConfig+0x4e2>
 80051f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005224 <HAL_RCC_OscConfig+0x240>)
 80051f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80051fa:	f003 0302 	and.w	r3, r3, #2
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0f0      	beq.n	80051e4 <HAL_RCC_OscConfig+0x200>
 8005202:	e01b      	b.n	800523c <HAL_RCC_OscConfig+0x258>
 8005204:	4b09      	ldr	r3, [pc, #36]	@ (800522c <HAL_RCC_OscConfig+0x248>)
 8005206:	2200      	movs	r2, #0
 8005208:	601a      	str	r2, [r3, #0]
 800520a:	f7fc fb8d 	bl	8001928 <HAL_GetTick>
 800520e:	6138      	str	r0, [r7, #16]
 8005210:	e00e      	b.n	8005230 <HAL_RCC_OscConfig+0x24c>
 8005212:	f7fc fb89 	bl	8001928 <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	2b02      	cmp	r3, #2
 800521e:	d907      	bls.n	8005230 <HAL_RCC_OscConfig+0x24c>
 8005220:	2303      	movs	r3, #3
 8005222:	e150      	b.n	80054c6 <HAL_RCC_OscConfig+0x4e2>
 8005224:	40023800 	.word	0x40023800
 8005228:	42470000 	.word	0x42470000
 800522c:	42470e80 	.word	0x42470e80
 8005230:	4b88      	ldr	r3, [pc, #544]	@ (8005454 <HAL_RCC_OscConfig+0x470>)
 8005232:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005234:	f003 0302 	and.w	r3, r3, #2
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1ea      	bne.n	8005212 <HAL_RCC_OscConfig+0x22e>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b00      	cmp	r3, #0
 8005246:	f000 8097 	beq.w	8005378 <HAL_RCC_OscConfig+0x394>
 800524a:	2300      	movs	r3, #0
 800524c:	75fb      	strb	r3, [r7, #23]
 800524e:	4b81      	ldr	r3, [pc, #516]	@ (8005454 <HAL_RCC_OscConfig+0x470>)
 8005250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d10f      	bne.n	800527a <HAL_RCC_OscConfig+0x296>
 800525a:	2300      	movs	r3, #0
 800525c:	60bb      	str	r3, [r7, #8]
 800525e:	4b7d      	ldr	r3, [pc, #500]	@ (8005454 <HAL_RCC_OscConfig+0x470>)
 8005260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005262:	4a7c      	ldr	r2, [pc, #496]	@ (8005454 <HAL_RCC_OscConfig+0x470>)
 8005264:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005268:	6413      	str	r3, [r2, #64]	@ 0x40
 800526a:	4b7a      	ldr	r3, [pc, #488]	@ (8005454 <HAL_RCC_OscConfig+0x470>)
 800526c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800526e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005272:	60bb      	str	r3, [r7, #8]
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	2301      	movs	r3, #1
 8005278:	75fb      	strb	r3, [r7, #23]
 800527a:	4b77      	ldr	r3, [pc, #476]	@ (8005458 <HAL_RCC_OscConfig+0x474>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005282:	2b00      	cmp	r3, #0
 8005284:	d118      	bne.n	80052b8 <HAL_RCC_OscConfig+0x2d4>
 8005286:	4b74      	ldr	r3, [pc, #464]	@ (8005458 <HAL_RCC_OscConfig+0x474>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	4a73      	ldr	r2, [pc, #460]	@ (8005458 <HAL_RCC_OscConfig+0x474>)
 800528c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005290:	6013      	str	r3, [r2, #0]
 8005292:	f7fc fb49 	bl	8001928 <HAL_GetTick>
 8005296:	6138      	str	r0, [r7, #16]
 8005298:	e008      	b.n	80052ac <HAL_RCC_OscConfig+0x2c8>
 800529a:	f7fc fb45 	bl	8001928 <HAL_GetTick>
 800529e:	4602      	mov	r2, r0
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	1ad3      	subs	r3, r2, r3
 80052a4:	2b02      	cmp	r3, #2
 80052a6:	d901      	bls.n	80052ac <HAL_RCC_OscConfig+0x2c8>
 80052a8:	2303      	movs	r3, #3
 80052aa:	e10c      	b.n	80054c6 <HAL_RCC_OscConfig+0x4e2>
 80052ac:	4b6a      	ldr	r3, [pc, #424]	@ (8005458 <HAL_RCC_OscConfig+0x474>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d0f0      	beq.n	800529a <HAL_RCC_OscConfig+0x2b6>
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d106      	bne.n	80052ce <HAL_RCC_OscConfig+0x2ea>
 80052c0:	4b64      	ldr	r3, [pc, #400]	@ (8005454 <HAL_RCC_OscConfig+0x470>)
 80052c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052c4:	4a63      	ldr	r2, [pc, #396]	@ (8005454 <HAL_RCC_OscConfig+0x470>)
 80052c6:	f043 0301 	orr.w	r3, r3, #1
 80052ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80052cc:	e01c      	b.n	8005308 <HAL_RCC_OscConfig+0x324>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	689b      	ldr	r3, [r3, #8]
 80052d2:	2b05      	cmp	r3, #5
 80052d4:	d10c      	bne.n	80052f0 <HAL_RCC_OscConfig+0x30c>
 80052d6:	4b5f      	ldr	r3, [pc, #380]	@ (8005454 <HAL_RCC_OscConfig+0x470>)
 80052d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052da:	4a5e      	ldr	r2, [pc, #376]	@ (8005454 <HAL_RCC_OscConfig+0x470>)
 80052dc:	f043 0304 	orr.w	r3, r3, #4
 80052e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80052e2:	4b5c      	ldr	r3, [pc, #368]	@ (8005454 <HAL_RCC_OscConfig+0x470>)
 80052e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052e6:	4a5b      	ldr	r2, [pc, #364]	@ (8005454 <HAL_RCC_OscConfig+0x470>)
 80052e8:	f043 0301 	orr.w	r3, r3, #1
 80052ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80052ee:	e00b      	b.n	8005308 <HAL_RCC_OscConfig+0x324>
 80052f0:	4b58      	ldr	r3, [pc, #352]	@ (8005454 <HAL_RCC_OscConfig+0x470>)
 80052f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80052f4:	4a57      	ldr	r2, [pc, #348]	@ (8005454 <HAL_RCC_OscConfig+0x470>)
 80052f6:	f023 0301 	bic.w	r3, r3, #1
 80052fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80052fc:	4b55      	ldr	r3, [pc, #340]	@ (8005454 <HAL_RCC_OscConfig+0x470>)
 80052fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005300:	4a54      	ldr	r2, [pc, #336]	@ (8005454 <HAL_RCC_OscConfig+0x470>)
 8005302:	f023 0304 	bic.w	r3, r3, #4
 8005306:	6713      	str	r3, [r2, #112]	@ 0x70
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d015      	beq.n	800533c <HAL_RCC_OscConfig+0x358>
 8005310:	f7fc fb0a 	bl	8001928 <HAL_GetTick>
 8005314:	6138      	str	r0, [r7, #16]
 8005316:	e00a      	b.n	800532e <HAL_RCC_OscConfig+0x34a>
 8005318:	f7fc fb06 	bl	8001928 <HAL_GetTick>
 800531c:	4602      	mov	r2, r0
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	1ad3      	subs	r3, r2, r3
 8005322:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005326:	4293      	cmp	r3, r2
 8005328:	d901      	bls.n	800532e <HAL_RCC_OscConfig+0x34a>
 800532a:	2303      	movs	r3, #3
 800532c:	e0cb      	b.n	80054c6 <HAL_RCC_OscConfig+0x4e2>
 800532e:	4b49      	ldr	r3, [pc, #292]	@ (8005454 <HAL_RCC_OscConfig+0x470>)
 8005330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005332:	f003 0302 	and.w	r3, r3, #2
 8005336:	2b00      	cmp	r3, #0
 8005338:	d0ee      	beq.n	8005318 <HAL_RCC_OscConfig+0x334>
 800533a:	e014      	b.n	8005366 <HAL_RCC_OscConfig+0x382>
 800533c:	f7fc faf4 	bl	8001928 <HAL_GetTick>
 8005340:	6138      	str	r0, [r7, #16]
 8005342:	e00a      	b.n	800535a <HAL_RCC_OscConfig+0x376>
 8005344:	f7fc faf0 	bl	8001928 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005352:	4293      	cmp	r3, r2
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0x376>
 8005356:	2303      	movs	r3, #3
 8005358:	e0b5      	b.n	80054c6 <HAL_RCC_OscConfig+0x4e2>
 800535a:	4b3e      	ldr	r3, [pc, #248]	@ (8005454 <HAL_RCC_OscConfig+0x470>)
 800535c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800535e:	f003 0302 	and.w	r3, r3, #2
 8005362:	2b00      	cmp	r3, #0
 8005364:	d1ee      	bne.n	8005344 <HAL_RCC_OscConfig+0x360>
 8005366:	7dfb      	ldrb	r3, [r7, #23]
 8005368:	2b01      	cmp	r3, #1
 800536a:	d105      	bne.n	8005378 <HAL_RCC_OscConfig+0x394>
 800536c:	4b39      	ldr	r3, [pc, #228]	@ (8005454 <HAL_RCC_OscConfig+0x470>)
 800536e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005370:	4a38      	ldr	r2, [pc, #224]	@ (8005454 <HAL_RCC_OscConfig+0x470>)
 8005372:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005376:	6413      	str	r3, [r2, #64]	@ 0x40
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	2b00      	cmp	r3, #0
 800537e:	f000 80a1 	beq.w	80054c4 <HAL_RCC_OscConfig+0x4e0>
 8005382:	4b34      	ldr	r3, [pc, #208]	@ (8005454 <HAL_RCC_OscConfig+0x470>)
 8005384:	689b      	ldr	r3, [r3, #8]
 8005386:	f003 030c 	and.w	r3, r3, #12
 800538a:	2b08      	cmp	r3, #8
 800538c:	d05c      	beq.n	8005448 <HAL_RCC_OscConfig+0x464>
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	2b02      	cmp	r3, #2
 8005394:	d141      	bne.n	800541a <HAL_RCC_OscConfig+0x436>
 8005396:	4b31      	ldr	r3, [pc, #196]	@ (800545c <HAL_RCC_OscConfig+0x478>)
 8005398:	2200      	movs	r2, #0
 800539a:	601a      	str	r2, [r3, #0]
 800539c:	f7fc fac4 	bl	8001928 <HAL_GetTick>
 80053a0:	6138      	str	r0, [r7, #16]
 80053a2:	e008      	b.n	80053b6 <HAL_RCC_OscConfig+0x3d2>
 80053a4:	f7fc fac0 	bl	8001928 <HAL_GetTick>
 80053a8:	4602      	mov	r2, r0
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	1ad3      	subs	r3, r2, r3
 80053ae:	2b02      	cmp	r3, #2
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_OscConfig+0x3d2>
 80053b2:	2303      	movs	r3, #3
 80053b4:	e087      	b.n	80054c6 <HAL_RCC_OscConfig+0x4e2>
 80053b6:	4b27      	ldr	r3, [pc, #156]	@ (8005454 <HAL_RCC_OscConfig+0x470>)
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d1f0      	bne.n	80053a4 <HAL_RCC_OscConfig+0x3c0>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	69da      	ldr	r2, [r3, #28]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	431a      	orrs	r2, r3
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053d0:	019b      	lsls	r3, r3, #6
 80053d2:	431a      	orrs	r2, r3
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053d8:	085b      	lsrs	r3, r3, #1
 80053da:	3b01      	subs	r3, #1
 80053dc:	041b      	lsls	r3, r3, #16
 80053de:	431a      	orrs	r2, r3
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80053e4:	061b      	lsls	r3, r3, #24
 80053e6:	491b      	ldr	r1, [pc, #108]	@ (8005454 <HAL_RCC_OscConfig+0x470>)
 80053e8:	4313      	orrs	r3, r2
 80053ea:	604b      	str	r3, [r1, #4]
 80053ec:	4b1b      	ldr	r3, [pc, #108]	@ (800545c <HAL_RCC_OscConfig+0x478>)
 80053ee:	2201      	movs	r2, #1
 80053f0:	601a      	str	r2, [r3, #0]
 80053f2:	f7fc fa99 	bl	8001928 <HAL_GetTick>
 80053f6:	6138      	str	r0, [r7, #16]
 80053f8:	e008      	b.n	800540c <HAL_RCC_OscConfig+0x428>
 80053fa:	f7fc fa95 	bl	8001928 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	2b02      	cmp	r3, #2
 8005406:	d901      	bls.n	800540c <HAL_RCC_OscConfig+0x428>
 8005408:	2303      	movs	r3, #3
 800540a:	e05c      	b.n	80054c6 <HAL_RCC_OscConfig+0x4e2>
 800540c:	4b11      	ldr	r3, [pc, #68]	@ (8005454 <HAL_RCC_OscConfig+0x470>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d0f0      	beq.n	80053fa <HAL_RCC_OscConfig+0x416>
 8005418:	e054      	b.n	80054c4 <HAL_RCC_OscConfig+0x4e0>
 800541a:	4b10      	ldr	r3, [pc, #64]	@ (800545c <HAL_RCC_OscConfig+0x478>)
 800541c:	2200      	movs	r2, #0
 800541e:	601a      	str	r2, [r3, #0]
 8005420:	f7fc fa82 	bl	8001928 <HAL_GetTick>
 8005424:	6138      	str	r0, [r7, #16]
 8005426:	e008      	b.n	800543a <HAL_RCC_OscConfig+0x456>
 8005428:	f7fc fa7e 	bl	8001928 <HAL_GetTick>
 800542c:	4602      	mov	r2, r0
 800542e:	693b      	ldr	r3, [r7, #16]
 8005430:	1ad3      	subs	r3, r2, r3
 8005432:	2b02      	cmp	r3, #2
 8005434:	d901      	bls.n	800543a <HAL_RCC_OscConfig+0x456>
 8005436:	2303      	movs	r3, #3
 8005438:	e045      	b.n	80054c6 <HAL_RCC_OscConfig+0x4e2>
 800543a:	4b06      	ldr	r3, [pc, #24]	@ (8005454 <HAL_RCC_OscConfig+0x470>)
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005442:	2b00      	cmp	r3, #0
 8005444:	d1f0      	bne.n	8005428 <HAL_RCC_OscConfig+0x444>
 8005446:	e03d      	b.n	80054c4 <HAL_RCC_OscConfig+0x4e0>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	2b01      	cmp	r3, #1
 800544e:	d107      	bne.n	8005460 <HAL_RCC_OscConfig+0x47c>
 8005450:	2301      	movs	r3, #1
 8005452:	e038      	b.n	80054c6 <HAL_RCC_OscConfig+0x4e2>
 8005454:	40023800 	.word	0x40023800
 8005458:	40007000 	.word	0x40007000
 800545c:	42470060 	.word	0x42470060
 8005460:	4b1b      	ldr	r3, [pc, #108]	@ (80054d0 <HAL_RCC_OscConfig+0x4ec>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	60fb      	str	r3, [r7, #12]
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	699b      	ldr	r3, [r3, #24]
 800546a:	2b01      	cmp	r3, #1
 800546c:	d028      	beq.n	80054c0 <HAL_RCC_OscConfig+0x4dc>
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	69db      	ldr	r3, [r3, #28]
 8005478:	429a      	cmp	r2, r3
 800547a:	d121      	bne.n	80054c0 <HAL_RCC_OscConfig+0x4dc>
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a1b      	ldr	r3, [r3, #32]
 8005486:	429a      	cmp	r2, r3
 8005488:	d11a      	bne.n	80054c0 <HAL_RCC_OscConfig+0x4dc>
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005490:	4013      	ands	r3, r2
 8005492:	687a      	ldr	r2, [r7, #4]
 8005494:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005496:	0192      	lsls	r2, r2, #6
 8005498:	4293      	cmp	r3, r2
 800549a:	d111      	bne.n	80054c0 <HAL_RCC_OscConfig+0x4dc>
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a6:	085b      	lsrs	r3, r3, #1
 80054a8:	3b01      	subs	r3, #1
 80054aa:	041b      	lsls	r3, r3, #16
 80054ac:	429a      	cmp	r2, r3
 80054ae:	d107      	bne.n	80054c0 <HAL_RCC_OscConfig+0x4dc>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80054ba:	061b      	lsls	r3, r3, #24
 80054bc:	429a      	cmp	r2, r3
 80054be:	d001      	beq.n	80054c4 <HAL_RCC_OscConfig+0x4e0>
 80054c0:	2301      	movs	r3, #1
 80054c2:	e000      	b.n	80054c6 <HAL_RCC_OscConfig+0x4e2>
 80054c4:	2300      	movs	r3, #0
 80054c6:	4618      	mov	r0, r3
 80054c8:	3718      	adds	r7, #24
 80054ca:	46bd      	mov	sp, r7
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	bf00      	nop
 80054d0:	40023800 	.word	0x40023800

080054d4 <HAL_RCC_ClockConfig>:
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d101      	bne.n	80054e8 <HAL_RCC_ClockConfig+0x14>
 80054e4:	2301      	movs	r3, #1
 80054e6:	e0cc      	b.n	8005682 <HAL_RCC_ClockConfig+0x1ae>
 80054e8:	4b68      	ldr	r3, [pc, #416]	@ (800568c <HAL_RCC_ClockConfig+0x1b8>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 030f 	and.w	r3, r3, #15
 80054f0:	683a      	ldr	r2, [r7, #0]
 80054f2:	429a      	cmp	r2, r3
 80054f4:	d90c      	bls.n	8005510 <HAL_RCC_ClockConfig+0x3c>
 80054f6:	4b65      	ldr	r3, [pc, #404]	@ (800568c <HAL_RCC_ClockConfig+0x1b8>)
 80054f8:	683a      	ldr	r2, [r7, #0]
 80054fa:	b2d2      	uxtb	r2, r2
 80054fc:	701a      	strb	r2, [r3, #0]
 80054fe:	4b63      	ldr	r3, [pc, #396]	@ (800568c <HAL_RCC_ClockConfig+0x1b8>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 030f 	and.w	r3, r3, #15
 8005506:	683a      	ldr	r2, [r7, #0]
 8005508:	429a      	cmp	r2, r3
 800550a:	d001      	beq.n	8005510 <HAL_RCC_ClockConfig+0x3c>
 800550c:	2301      	movs	r3, #1
 800550e:	e0b8      	b.n	8005682 <HAL_RCC_ClockConfig+0x1ae>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d020      	beq.n	800555e <HAL_RCC_ClockConfig+0x8a>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0304 	and.w	r3, r3, #4
 8005524:	2b00      	cmp	r3, #0
 8005526:	d005      	beq.n	8005534 <HAL_RCC_ClockConfig+0x60>
 8005528:	4b59      	ldr	r3, [pc, #356]	@ (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	4a58      	ldr	r2, [pc, #352]	@ (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 800552e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005532:	6093      	str	r3, [r2, #8]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f003 0308 	and.w	r3, r3, #8
 800553c:	2b00      	cmp	r3, #0
 800553e:	d005      	beq.n	800554c <HAL_RCC_ClockConfig+0x78>
 8005540:	4b53      	ldr	r3, [pc, #332]	@ (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	4a52      	ldr	r2, [pc, #328]	@ (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 8005546:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800554a:	6093      	str	r3, [r2, #8]
 800554c:	4b50      	ldr	r3, [pc, #320]	@ (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	689b      	ldr	r3, [r3, #8]
 8005558:	494d      	ldr	r1, [pc, #308]	@ (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 800555a:	4313      	orrs	r3, r2
 800555c:	608b      	str	r3, [r1, #8]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0301 	and.w	r3, r3, #1
 8005566:	2b00      	cmp	r3, #0
 8005568:	d044      	beq.n	80055f4 <HAL_RCC_ClockConfig+0x120>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	685b      	ldr	r3, [r3, #4]
 800556e:	2b01      	cmp	r3, #1
 8005570:	d107      	bne.n	8005582 <HAL_RCC_ClockConfig+0xae>
 8005572:	4b47      	ldr	r3, [pc, #284]	@ (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800557a:	2b00      	cmp	r3, #0
 800557c:	d119      	bne.n	80055b2 <HAL_RCC_ClockConfig+0xde>
 800557e:	2301      	movs	r3, #1
 8005580:	e07f      	b.n	8005682 <HAL_RCC_ClockConfig+0x1ae>
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	685b      	ldr	r3, [r3, #4]
 8005586:	2b02      	cmp	r3, #2
 8005588:	d003      	beq.n	8005592 <HAL_RCC_ClockConfig+0xbe>
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	2b03      	cmp	r3, #3
 8005590:	d107      	bne.n	80055a2 <HAL_RCC_ClockConfig+0xce>
 8005592:	4b3f      	ldr	r3, [pc, #252]	@ (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800559a:	2b00      	cmp	r3, #0
 800559c:	d109      	bne.n	80055b2 <HAL_RCC_ClockConfig+0xde>
 800559e:	2301      	movs	r3, #1
 80055a0:	e06f      	b.n	8005682 <HAL_RCC_ClockConfig+0x1ae>
 80055a2:	4b3b      	ldr	r3, [pc, #236]	@ (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d101      	bne.n	80055b2 <HAL_RCC_ClockConfig+0xde>
 80055ae:	2301      	movs	r3, #1
 80055b0:	e067      	b.n	8005682 <HAL_RCC_ClockConfig+0x1ae>
 80055b2:	4b37      	ldr	r3, [pc, #220]	@ (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 80055b4:	689b      	ldr	r3, [r3, #8]
 80055b6:	f023 0203 	bic.w	r2, r3, #3
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	4934      	ldr	r1, [pc, #208]	@ (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 80055c0:	4313      	orrs	r3, r2
 80055c2:	608b      	str	r3, [r1, #8]
 80055c4:	f7fc f9b0 	bl	8001928 <HAL_GetTick>
 80055c8:	60f8      	str	r0, [r7, #12]
 80055ca:	e00a      	b.n	80055e2 <HAL_RCC_ClockConfig+0x10e>
 80055cc:	f7fc f9ac 	bl	8001928 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055da:	4293      	cmp	r3, r2
 80055dc:	d901      	bls.n	80055e2 <HAL_RCC_ClockConfig+0x10e>
 80055de:	2303      	movs	r3, #3
 80055e0:	e04f      	b.n	8005682 <HAL_RCC_ClockConfig+0x1ae>
 80055e2:	4b2b      	ldr	r3, [pc, #172]	@ (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 80055e4:	689b      	ldr	r3, [r3, #8]
 80055e6:	f003 020c 	and.w	r2, r3, #12
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	429a      	cmp	r2, r3
 80055f2:	d1eb      	bne.n	80055cc <HAL_RCC_ClockConfig+0xf8>
 80055f4:	4b25      	ldr	r3, [pc, #148]	@ (800568c <HAL_RCC_ClockConfig+0x1b8>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 030f 	and.w	r3, r3, #15
 80055fc:	683a      	ldr	r2, [r7, #0]
 80055fe:	429a      	cmp	r2, r3
 8005600:	d20c      	bcs.n	800561c <HAL_RCC_ClockConfig+0x148>
 8005602:	4b22      	ldr	r3, [pc, #136]	@ (800568c <HAL_RCC_ClockConfig+0x1b8>)
 8005604:	683a      	ldr	r2, [r7, #0]
 8005606:	b2d2      	uxtb	r2, r2
 8005608:	701a      	strb	r2, [r3, #0]
 800560a:	4b20      	ldr	r3, [pc, #128]	@ (800568c <HAL_RCC_ClockConfig+0x1b8>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f003 030f 	and.w	r3, r3, #15
 8005612:	683a      	ldr	r2, [r7, #0]
 8005614:	429a      	cmp	r2, r3
 8005616:	d001      	beq.n	800561c <HAL_RCC_ClockConfig+0x148>
 8005618:	2301      	movs	r3, #1
 800561a:	e032      	b.n	8005682 <HAL_RCC_ClockConfig+0x1ae>
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0304 	and.w	r3, r3, #4
 8005624:	2b00      	cmp	r3, #0
 8005626:	d008      	beq.n	800563a <HAL_RCC_ClockConfig+0x166>
 8005628:	4b19      	ldr	r3, [pc, #100]	@ (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	68db      	ldr	r3, [r3, #12]
 8005634:	4916      	ldr	r1, [pc, #88]	@ (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 8005636:	4313      	orrs	r3, r2
 8005638:	608b      	str	r3, [r1, #8]
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0308 	and.w	r3, r3, #8
 8005642:	2b00      	cmp	r3, #0
 8005644:	d009      	beq.n	800565a <HAL_RCC_ClockConfig+0x186>
 8005646:	4b12      	ldr	r3, [pc, #72]	@ (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	691b      	ldr	r3, [r3, #16]
 8005652:	00db      	lsls	r3, r3, #3
 8005654:	490e      	ldr	r1, [pc, #56]	@ (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 8005656:	4313      	orrs	r3, r2
 8005658:	608b      	str	r3, [r1, #8]
 800565a:	f000 f821 	bl	80056a0 <HAL_RCC_GetSysClockFreq>
 800565e:	4602      	mov	r2, r0
 8005660:	4b0b      	ldr	r3, [pc, #44]	@ (8005690 <HAL_RCC_ClockConfig+0x1bc>)
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	091b      	lsrs	r3, r3, #4
 8005666:	f003 030f 	and.w	r3, r3, #15
 800566a:	490a      	ldr	r1, [pc, #40]	@ (8005694 <HAL_RCC_ClockConfig+0x1c0>)
 800566c:	5ccb      	ldrb	r3, [r1, r3]
 800566e:	fa22 f303 	lsr.w	r3, r2, r3
 8005672:	4a09      	ldr	r2, [pc, #36]	@ (8005698 <HAL_RCC_ClockConfig+0x1c4>)
 8005674:	6013      	str	r3, [r2, #0]
 8005676:	4b09      	ldr	r3, [pc, #36]	@ (800569c <HAL_RCC_ClockConfig+0x1c8>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	4618      	mov	r0, r3
 800567c:	f7fb ffce 	bl	800161c <HAL_InitTick>
 8005680:	2300      	movs	r3, #0
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	40023c00 	.word	0x40023c00
 8005690:	40023800 	.word	0x40023800
 8005694:	0800c1b0 	.word	0x0800c1b0
 8005698:	20000008 	.word	0x20000008
 800569c:	2000000c 	.word	0x2000000c

080056a0 <HAL_RCC_GetSysClockFreq>:
 80056a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80056a4:	b094      	sub	sp, #80	@ 0x50
 80056a6:	af00      	add	r7, sp, #0
 80056a8:	2300      	movs	r3, #0
 80056aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80056ac:	2300      	movs	r3, #0
 80056ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80056b0:	2300      	movs	r3, #0
 80056b2:	643b      	str	r3, [r7, #64]	@ 0x40
 80056b4:	2300      	movs	r3, #0
 80056b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056b8:	4b79      	ldr	r3, [pc, #484]	@ (80058a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	f003 030c 	and.w	r3, r3, #12
 80056c0:	2b08      	cmp	r3, #8
 80056c2:	d00d      	beq.n	80056e0 <HAL_RCC_GetSysClockFreq+0x40>
 80056c4:	2b08      	cmp	r3, #8
 80056c6:	f200 80e1 	bhi.w	800588c <HAL_RCC_GetSysClockFreq+0x1ec>
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d002      	beq.n	80056d4 <HAL_RCC_GetSysClockFreq+0x34>
 80056ce:	2b04      	cmp	r3, #4
 80056d0:	d003      	beq.n	80056da <HAL_RCC_GetSysClockFreq+0x3a>
 80056d2:	e0db      	b.n	800588c <HAL_RCC_GetSysClockFreq+0x1ec>
 80056d4:	4b73      	ldr	r3, [pc, #460]	@ (80058a4 <HAL_RCC_GetSysClockFreq+0x204>)
 80056d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056d8:	e0db      	b.n	8005892 <HAL_RCC_GetSysClockFreq+0x1f2>
 80056da:	4b73      	ldr	r3, [pc, #460]	@ (80058a8 <HAL_RCC_GetSysClockFreq+0x208>)
 80056dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80056de:	e0d8      	b.n	8005892 <HAL_RCC_GetSysClockFreq+0x1f2>
 80056e0:	4b6f      	ldr	r3, [pc, #444]	@ (80058a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80056e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80056ea:	4b6d      	ldr	r3, [pc, #436]	@ (80058a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80056ec:	685b      	ldr	r3, [r3, #4]
 80056ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d063      	beq.n	80057be <HAL_RCC_GetSysClockFreq+0x11e>
 80056f6:	4b6a      	ldr	r3, [pc, #424]	@ (80058a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	099b      	lsrs	r3, r3, #6
 80056fc:	2200      	movs	r2, #0
 80056fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005700:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005704:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005708:	633b      	str	r3, [r7, #48]	@ 0x30
 800570a:	2300      	movs	r3, #0
 800570c:	637b      	str	r3, [r7, #52]	@ 0x34
 800570e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005712:	4622      	mov	r2, r4
 8005714:	462b      	mov	r3, r5
 8005716:	f04f 0000 	mov.w	r0, #0
 800571a:	f04f 0100 	mov.w	r1, #0
 800571e:	0159      	lsls	r1, r3, #5
 8005720:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005724:	0150      	lsls	r0, r2, #5
 8005726:	4602      	mov	r2, r0
 8005728:	460b      	mov	r3, r1
 800572a:	4621      	mov	r1, r4
 800572c:	1a51      	subs	r1, r2, r1
 800572e:	6139      	str	r1, [r7, #16]
 8005730:	4629      	mov	r1, r5
 8005732:	eb63 0301 	sbc.w	r3, r3, r1
 8005736:	617b      	str	r3, [r7, #20]
 8005738:	f04f 0200 	mov.w	r2, #0
 800573c:	f04f 0300 	mov.w	r3, #0
 8005740:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005744:	4659      	mov	r1, fp
 8005746:	018b      	lsls	r3, r1, #6
 8005748:	4651      	mov	r1, sl
 800574a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800574e:	4651      	mov	r1, sl
 8005750:	018a      	lsls	r2, r1, #6
 8005752:	4651      	mov	r1, sl
 8005754:	ebb2 0801 	subs.w	r8, r2, r1
 8005758:	4659      	mov	r1, fp
 800575a:	eb63 0901 	sbc.w	r9, r3, r1
 800575e:	f04f 0200 	mov.w	r2, #0
 8005762:	f04f 0300 	mov.w	r3, #0
 8005766:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800576a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800576e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005772:	4690      	mov	r8, r2
 8005774:	4699      	mov	r9, r3
 8005776:	4623      	mov	r3, r4
 8005778:	eb18 0303 	adds.w	r3, r8, r3
 800577c:	60bb      	str	r3, [r7, #8]
 800577e:	462b      	mov	r3, r5
 8005780:	eb49 0303 	adc.w	r3, r9, r3
 8005784:	60fb      	str	r3, [r7, #12]
 8005786:	f04f 0200 	mov.w	r2, #0
 800578a:	f04f 0300 	mov.w	r3, #0
 800578e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005792:	4629      	mov	r1, r5
 8005794:	024b      	lsls	r3, r1, #9
 8005796:	4621      	mov	r1, r4
 8005798:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800579c:	4621      	mov	r1, r4
 800579e:	024a      	lsls	r2, r1, #9
 80057a0:	4610      	mov	r0, r2
 80057a2:	4619      	mov	r1, r3
 80057a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057a6:	2200      	movs	r2, #0
 80057a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80057b0:	f7fa fd76 	bl	80002a0 <__aeabi_uldivmod>
 80057b4:	4602      	mov	r2, r0
 80057b6:	460b      	mov	r3, r1
 80057b8:	4613      	mov	r3, r2
 80057ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80057bc:	e058      	b.n	8005870 <HAL_RCC_GetSysClockFreq+0x1d0>
 80057be:	4b38      	ldr	r3, [pc, #224]	@ (80058a0 <HAL_RCC_GetSysClockFreq+0x200>)
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	099b      	lsrs	r3, r3, #6
 80057c4:	2200      	movs	r2, #0
 80057c6:	4618      	mov	r0, r3
 80057c8:	4611      	mov	r1, r2
 80057ca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80057ce:	623b      	str	r3, [r7, #32]
 80057d0:	2300      	movs	r3, #0
 80057d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80057d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80057d8:	4642      	mov	r2, r8
 80057da:	464b      	mov	r3, r9
 80057dc:	f04f 0000 	mov.w	r0, #0
 80057e0:	f04f 0100 	mov.w	r1, #0
 80057e4:	0159      	lsls	r1, r3, #5
 80057e6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057ea:	0150      	lsls	r0, r2, #5
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	4641      	mov	r1, r8
 80057f2:	ebb2 0a01 	subs.w	sl, r2, r1
 80057f6:	4649      	mov	r1, r9
 80057f8:	eb63 0b01 	sbc.w	fp, r3, r1
 80057fc:	f04f 0200 	mov.w	r2, #0
 8005800:	f04f 0300 	mov.w	r3, #0
 8005804:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005808:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800580c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005810:	ebb2 040a 	subs.w	r4, r2, sl
 8005814:	eb63 050b 	sbc.w	r5, r3, fp
 8005818:	f04f 0200 	mov.w	r2, #0
 800581c:	f04f 0300 	mov.w	r3, #0
 8005820:	00eb      	lsls	r3, r5, #3
 8005822:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005826:	00e2      	lsls	r2, r4, #3
 8005828:	4614      	mov	r4, r2
 800582a:	461d      	mov	r5, r3
 800582c:	4643      	mov	r3, r8
 800582e:	18e3      	adds	r3, r4, r3
 8005830:	603b      	str	r3, [r7, #0]
 8005832:	464b      	mov	r3, r9
 8005834:	eb45 0303 	adc.w	r3, r5, r3
 8005838:	607b      	str	r3, [r7, #4]
 800583a:	f04f 0200 	mov.w	r2, #0
 800583e:	f04f 0300 	mov.w	r3, #0
 8005842:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005846:	4629      	mov	r1, r5
 8005848:	028b      	lsls	r3, r1, #10
 800584a:	4621      	mov	r1, r4
 800584c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005850:	4621      	mov	r1, r4
 8005852:	028a      	lsls	r2, r1, #10
 8005854:	4610      	mov	r0, r2
 8005856:	4619      	mov	r1, r3
 8005858:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800585a:	2200      	movs	r2, #0
 800585c:	61bb      	str	r3, [r7, #24]
 800585e:	61fa      	str	r2, [r7, #28]
 8005860:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005864:	f7fa fd1c 	bl	80002a0 <__aeabi_uldivmod>
 8005868:	4602      	mov	r2, r0
 800586a:	460b      	mov	r3, r1
 800586c:	4613      	mov	r3, r2
 800586e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005870:	4b0b      	ldr	r3, [pc, #44]	@ (80058a0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	0c1b      	lsrs	r3, r3, #16
 8005876:	f003 0303 	and.w	r3, r3, #3
 800587a:	3301      	adds	r3, #1
 800587c:	005b      	lsls	r3, r3, #1
 800587e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005880:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005882:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005884:	fbb2 f3f3 	udiv	r3, r2, r3
 8005888:	64bb      	str	r3, [r7, #72]	@ 0x48
 800588a:	e002      	b.n	8005892 <HAL_RCC_GetSysClockFreq+0x1f2>
 800588c:	4b05      	ldr	r3, [pc, #20]	@ (80058a4 <HAL_RCC_GetSysClockFreq+0x204>)
 800588e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005890:	bf00      	nop
 8005892:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005894:	4618      	mov	r0, r3
 8005896:	3750      	adds	r7, #80	@ 0x50
 8005898:	46bd      	mov	sp, r7
 800589a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800589e:	bf00      	nop
 80058a0:	40023800 	.word	0x40023800
 80058a4:	00f42400 	.word	0x00f42400
 80058a8:	007a1200 	.word	0x007a1200

080058ac <HAL_RCC_GetHCLKFreq>:
 80058ac:	b480      	push	{r7}
 80058ae:	af00      	add	r7, sp, #0
 80058b0:	4b03      	ldr	r3, [pc, #12]	@ (80058c0 <HAL_RCC_GetHCLKFreq+0x14>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4618      	mov	r0, r3
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr
 80058be:	bf00      	nop
 80058c0:	20000008 	.word	0x20000008

080058c4 <HAL_RCC_GetPCLK1Freq>:
 80058c4:	b580      	push	{r7, lr}
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	f7ff fff0 	bl	80058ac <HAL_RCC_GetHCLKFreq>
 80058cc:	4602      	mov	r2, r0
 80058ce:	4b05      	ldr	r3, [pc, #20]	@ (80058e4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058d0:	689b      	ldr	r3, [r3, #8]
 80058d2:	0a9b      	lsrs	r3, r3, #10
 80058d4:	f003 0307 	and.w	r3, r3, #7
 80058d8:	4903      	ldr	r1, [pc, #12]	@ (80058e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80058da:	5ccb      	ldrb	r3, [r1, r3]
 80058dc:	fa22 f303 	lsr.w	r3, r2, r3
 80058e0:	4618      	mov	r0, r3
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	40023800 	.word	0x40023800
 80058e8:	0800c1c0 	.word	0x0800c1c0

080058ec <HAL_RCC_GetPCLK2Freq>:
 80058ec:	b580      	push	{r7, lr}
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	f7ff ffdc 	bl	80058ac <HAL_RCC_GetHCLKFreq>
 80058f4:	4602      	mov	r2, r0
 80058f6:	4b05      	ldr	r3, [pc, #20]	@ (800590c <HAL_RCC_GetPCLK2Freq+0x20>)
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	0b5b      	lsrs	r3, r3, #13
 80058fc:	f003 0307 	and.w	r3, r3, #7
 8005900:	4903      	ldr	r1, [pc, #12]	@ (8005910 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005902:	5ccb      	ldrb	r3, [r1, r3]
 8005904:	fa22 f303 	lsr.w	r3, r2, r3
 8005908:	4618      	mov	r0, r3
 800590a:	bd80      	pop	{r7, pc}
 800590c:	40023800 	.word	0x40023800
 8005910:	0800c1c0 	.word	0x0800c1c0

08005914 <HAL_RCC_GetClockConfig>:
 8005914:	b480      	push	{r7}
 8005916:	b083      	sub	sp, #12
 8005918:	af00      	add	r7, sp, #0
 800591a:	6078      	str	r0, [r7, #4]
 800591c:	6039      	str	r1, [r7, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	220f      	movs	r2, #15
 8005922:	601a      	str	r2, [r3, #0]
 8005924:	4b12      	ldr	r3, [pc, #72]	@ (8005970 <HAL_RCC_GetClockConfig+0x5c>)
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	f003 0203 	and.w	r2, r3, #3
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	605a      	str	r2, [r3, #4]
 8005930:	4b0f      	ldr	r3, [pc, #60]	@ (8005970 <HAL_RCC_GetClockConfig+0x5c>)
 8005932:	689b      	ldr	r3, [r3, #8]
 8005934:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	609a      	str	r2, [r3, #8]
 800593c:	4b0c      	ldr	r3, [pc, #48]	@ (8005970 <HAL_RCC_GetClockConfig+0x5c>)
 800593e:	689b      	ldr	r3, [r3, #8]
 8005940:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	60da      	str	r2, [r3, #12]
 8005948:	4b09      	ldr	r3, [pc, #36]	@ (8005970 <HAL_RCC_GetClockConfig+0x5c>)
 800594a:	689b      	ldr	r3, [r3, #8]
 800594c:	08db      	lsrs	r3, r3, #3
 800594e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	611a      	str	r2, [r3, #16]
 8005956:	4b07      	ldr	r3, [pc, #28]	@ (8005974 <HAL_RCC_GetClockConfig+0x60>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f003 020f 	and.w	r2, r3, #15
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	601a      	str	r2, [r3, #0]
 8005962:	bf00      	nop
 8005964:	370c      	adds	r7, #12
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	40023800 	.word	0x40023800
 8005974:	40023c00 	.word	0x40023c00

08005978 <HAL_RCCEx_PeriphCLKConfig>:
 8005978:	b580      	push	{r7, lr}
 800597a:	b086      	sub	sp, #24
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	2300      	movs	r3, #0
 8005982:	617b      	str	r3, [r7, #20]
 8005984:	2300      	movs	r3, #0
 8005986:	613b      	str	r3, [r7, #16]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0301 	and.w	r3, r3, #1
 8005990:	2b00      	cmp	r3, #0
 8005992:	d10b      	bne.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x34>
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0302 	and.w	r3, r3, #2
 800599c:	2b00      	cmp	r3, #0
 800599e:	d105      	bne.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x34>
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d075      	beq.n	8005a98 <HAL_RCCEx_PeriphCLKConfig+0x120>
 80059ac:	4b91      	ldr	r3, [pc, #580]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80059ae:	2200      	movs	r2, #0
 80059b0:	601a      	str	r2, [r3, #0]
 80059b2:	f7fb ffb9 	bl	8001928 <HAL_GetTick>
 80059b6:	6178      	str	r0, [r7, #20]
 80059b8:	e008      	b.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x54>
 80059ba:	f7fb ffb5 	bl	8001928 <HAL_GetTick>
 80059be:	4602      	mov	r2, r0
 80059c0:	697b      	ldr	r3, [r7, #20]
 80059c2:	1ad3      	subs	r3, r2, r3
 80059c4:	2b02      	cmp	r3, #2
 80059c6:	d901      	bls.n	80059cc <HAL_RCCEx_PeriphCLKConfig+0x54>
 80059c8:	2303      	movs	r3, #3
 80059ca:	e189      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80059cc:	4b8a      	ldr	r3, [pc, #552]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d1f0      	bne.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x42>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0301 	and.w	r3, r3, #1
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d009      	beq.n	80059f8 <HAL_RCCEx_PeriphCLKConfig+0x80>
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	685b      	ldr	r3, [r3, #4]
 80059e8:	019a      	lsls	r2, r3, #6
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	071b      	lsls	r3, r3, #28
 80059f0:	4981      	ldr	r1, [pc, #516]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	f003 0302 	and.w	r3, r3, #2
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d01f      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8005a04:	4b7c      	ldr	r3, [pc, #496]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005a0a:	0f1b      	lsrs	r3, r3, #28
 8005a0c:	f003 0307 	and.w	r3, r3, #7
 8005a10:	613b      	str	r3, [r7, #16]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	019a      	lsls	r2, r3, #6
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	061b      	lsls	r3, r3, #24
 8005a1e:	431a      	orrs	r2, r3
 8005a20:	693b      	ldr	r3, [r7, #16]
 8005a22:	071b      	lsls	r3, r3, #28
 8005a24:	4974      	ldr	r1, [pc, #464]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 8005a2c:	4b72      	ldr	r3, [pc, #456]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a2e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a32:	f023 021f 	bic.w	r2, r3, #31
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	69db      	ldr	r3, [r3, #28]
 8005a3a:	3b01      	subs	r3, #1
 8005a3c:	496e      	ldr	r1, [pc, #440]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00d      	beq.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	685b      	ldr	r3, [r3, #4]
 8005a54:	019a      	lsls	r2, r3, #6
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	68db      	ldr	r3, [r3, #12]
 8005a5a:	061b      	lsls	r3, r3, #24
 8005a5c:	431a      	orrs	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	071b      	lsls	r3, r3, #28
 8005a64:	4964      	ldr	r1, [pc, #400]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a66:	4313      	orrs	r3, r2
 8005a68:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 8005a6c:	4b61      	ldr	r3, [pc, #388]	@ (8005bf4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8005a6e:	2201      	movs	r2, #1
 8005a70:	601a      	str	r2, [r3, #0]
 8005a72:	f7fb ff59 	bl	8001928 <HAL_GetTick>
 8005a76:	6178      	str	r0, [r7, #20]
 8005a78:	e008      	b.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x114>
 8005a7a:	f7fb ff55 	bl	8001928 <HAL_GetTick>
 8005a7e:	4602      	mov	r2, r0
 8005a80:	697b      	ldr	r3, [r7, #20]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	2b02      	cmp	r3, #2
 8005a86:	d901      	bls.n	8005a8c <HAL_RCCEx_PeriphCLKConfig+0x114>
 8005a88:	2303      	movs	r3, #3
 8005a8a:	e129      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005a8c:	4b5a      	ldr	r3, [pc, #360]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d0f0      	beq.n	8005a7a <HAL_RCCEx_PeriphCLKConfig+0x102>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f003 0304 	and.w	r3, r3, #4
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d105      	bne.n	8005ab0 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f003 0308 	and.w	r3, r3, #8
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d079      	beq.n	8005ba4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8005ab0:	4b52      	ldr	r3, [pc, #328]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	601a      	str	r2, [r3, #0]
 8005ab6:	f7fb ff37 	bl	8001928 <HAL_GetTick>
 8005aba:	6178      	str	r0, [r7, #20]
 8005abc:	e008      	b.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8005abe:	f7fb ff33 	bl	8001928 <HAL_GetTick>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	697b      	ldr	r3, [r7, #20]
 8005ac6:	1ad3      	subs	r3, r2, r3
 8005ac8:	2b02      	cmp	r3, #2
 8005aca:	d901      	bls.n	8005ad0 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8005acc:	2303      	movs	r3, #3
 8005ace:	e107      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005ad0:	4b49      	ldr	r3, [pc, #292]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005ad8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005adc:	d0ef      	beq.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x146>
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f003 0304 	and.w	r3, r3, #4
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d020      	beq.n	8005b2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 8005aea:	4b43      	ldr	r3, [pc, #268]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005aec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005af0:	0f1b      	lsrs	r3, r3, #28
 8005af2:	f003 0307 	and.w	r3, r3, #7
 8005af6:	613b      	str	r3, [r7, #16]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	691b      	ldr	r3, [r3, #16]
 8005afc:	019a      	lsls	r2, r3, #6
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	695b      	ldr	r3, [r3, #20]
 8005b02:	061b      	lsls	r3, r3, #24
 8005b04:	431a      	orrs	r2, r3
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	071b      	lsls	r3, r3, #28
 8005b0a:	493b      	ldr	r1, [pc, #236]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b0c:	4313      	orrs	r3, r2
 8005b0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005b12:	4b39      	ldr	r3, [pc, #228]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b14:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b18:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	6a1b      	ldr	r3, [r3, #32]
 8005b20:	3b01      	subs	r3, #1
 8005b22:	021b      	lsls	r3, r3, #8
 8005b24:	4934      	ldr	r1, [pc, #208]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 0308 	and.w	r3, r3, #8
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d01e      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 8005b38:	4b2f      	ldr	r3, [pc, #188]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b3e:	0e1b      	lsrs	r3, r3, #24
 8005b40:	f003 030f 	and.w	r3, r3, #15
 8005b44:	613b      	str	r3, [r7, #16]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	691b      	ldr	r3, [r3, #16]
 8005b4a:	019a      	lsls	r2, r3, #6
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	061b      	lsls	r3, r3, #24
 8005b50:	431a      	orrs	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	699b      	ldr	r3, [r3, #24]
 8005b56:	071b      	lsls	r3, r3, #28
 8005b58:	4927      	ldr	r1, [pc, #156]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005b60:	4b25      	ldr	r3, [pc, #148]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b62:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005b66:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b6e:	4922      	ldr	r1, [pc, #136]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b70:	4313      	orrs	r3, r2
 8005b72:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 8005b76:	4b21      	ldr	r3, [pc, #132]	@ (8005bfc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005b78:	2201      	movs	r2, #1
 8005b7a:	601a      	str	r2, [r3, #0]
 8005b7c:	f7fb fed4 	bl	8001928 <HAL_GetTick>
 8005b80:	6178      	str	r0, [r7, #20]
 8005b82:	e008      	b.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005b84:	f7fb fed0 	bl	8001928 <HAL_GetTick>
 8005b88:	4602      	mov	r2, r0
 8005b8a:	697b      	ldr	r3, [r7, #20]
 8005b8c:	1ad3      	subs	r3, r2, r3
 8005b8e:	2b02      	cmp	r3, #2
 8005b90:	d901      	bls.n	8005b96 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005b92:	2303      	movs	r3, #3
 8005b94:	e0a4      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005b96:	4b18      	ldr	r3, [pc, #96]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005b9e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005ba2:	d1ef      	bne.n	8005b84 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f003 0320 	and.w	r3, r3, #32
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f000 808b 	beq.w	8005cc8 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	60fb      	str	r3, [r7, #12]
 8005bb6:	4b10      	ldr	r3, [pc, #64]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bba:	4a0f      	ldr	r2, [pc, #60]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bbc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005bc0:	6413      	str	r3, [r2, #64]	@ 0x40
 8005bc2:	4b0d      	ldr	r3, [pc, #52]	@ (8005bf8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005bc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bc6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005bca:	60fb      	str	r3, [r7, #12]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	4b0c      	ldr	r3, [pc, #48]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a0b      	ldr	r2, [pc, #44]	@ (8005c00 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005bd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005bd8:	6013      	str	r3, [r2, #0]
 8005bda:	f7fb fea5 	bl	8001928 <HAL_GetTick>
 8005bde:	6178      	str	r0, [r7, #20]
 8005be0:	e010      	b.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8005be2:	f7fb fea1 	bl	8001928 <HAL_GetTick>
 8005be6:	4602      	mov	r2, r0
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	1ad3      	subs	r3, r2, r3
 8005bec:	2b02      	cmp	r3, #2
 8005bee:	d909      	bls.n	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8005bf0:	2303      	movs	r3, #3
 8005bf2:	e075      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005bf4:	42470068 	.word	0x42470068
 8005bf8:	40023800 	.word	0x40023800
 8005bfc:	42470070 	.word	0x42470070
 8005c00:	40007000 	.word	0x40007000
 8005c04:	4b38      	ldr	r3, [pc, #224]	@ (8005ce8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d0e8      	beq.n	8005be2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005c10:	4b36      	ldr	r3, [pc, #216]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c12:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c18:	613b      	str	r3, [r7, #16]
 8005c1a:	693b      	ldr	r3, [r7, #16]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d02f      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c28:	693a      	ldr	r2, [r7, #16]
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d028      	beq.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005c2e:	4b2f      	ldr	r3, [pc, #188]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c30:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c36:	613b      	str	r3, [r7, #16]
 8005c38:	4b2d      	ldr	r3, [pc, #180]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	4b2c      	ldr	r3, [pc, #176]	@ (8005cf0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	601a      	str	r2, [r3, #0]
 8005c44:	4a29      	ldr	r2, [pc, #164]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	6713      	str	r3, [r2, #112]	@ 0x70
 8005c4a:	4b28      	ldr	r3, [pc, #160]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c4e:	f003 0301 	and.w	r3, r3, #1
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d114      	bne.n	8005c80 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005c56:	f7fb fe67 	bl	8001928 <HAL_GetTick>
 8005c5a:	6178      	str	r0, [r7, #20]
 8005c5c:	e00a      	b.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005c5e:	f7fb fe63 	bl	8001928 <HAL_GetTick>
 8005c62:	4602      	mov	r2, r0
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	1ad3      	subs	r3, r2, r3
 8005c68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d901      	bls.n	8005c74 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005c70:	2303      	movs	r3, #3
 8005c72:	e035      	b.n	8005ce0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005c74:	4b1d      	ldr	r3, [pc, #116]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c76:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d0ee      	beq.n	8005c5e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c84:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005c88:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005c8c:	d10d      	bne.n	8005caa <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005c8e:	4b17      	ldr	r3, [pc, #92]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c9a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005c9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ca2:	4912      	ldr	r1, [pc, #72]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	608b      	str	r3, [r1, #8]
 8005ca8:	e005      	b.n	8005cb6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005caa:	4b10      	ldr	r3, [pc, #64]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	4a0f      	ldr	r2, [pc, #60]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005cb0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005cb4:	6093      	str	r3, [r2, #8]
 8005cb6:	4b0d      	ldr	r3, [pc, #52]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005cb8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005cbe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005cc2:	490a      	ldr	r1, [pc, #40]	@ (8005cec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	670b      	str	r3, [r1, #112]	@ 0x70
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0310 	and.w	r3, r3, #16
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d004      	beq.n	8005cde <HAL_RCCEx_PeriphCLKConfig+0x366>
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005cda:	4b06      	ldr	r3, [pc, #24]	@ (8005cf4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005cdc:	601a      	str	r2, [r3, #0]
 8005cde:	2300      	movs	r3, #0
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	3718      	adds	r7, #24
 8005ce4:	46bd      	mov	sp, r7
 8005ce6:	bd80      	pop	{r7, pc}
 8005ce8:	40007000 	.word	0x40007000
 8005cec:	40023800 	.word	0x40023800
 8005cf0:	42470e40 	.word	0x42470e40
 8005cf4:	424711e0 	.word	0x424711e0

08005cf8 <HAL_SDRAM_Init>:
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b082      	sub	sp, #8
 8005cfc:	af00      	add	r7, sp, #0
 8005cfe:	6078      	str	r0, [r7, #4]
 8005d00:	6039      	str	r1, [r7, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d101      	bne.n	8005d0c <HAL_SDRAM_Init+0x14>
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e025      	b.n	8005d58 <HAL_SDRAM_Init+0x60>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005d12:	b2db      	uxtb	r3, r3
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d106      	bne.n	8005d26 <HAL_SDRAM_Init+0x2e>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 8005d20:	6878      	ldr	r0, [r7, #4]
 8005d22:	f7fb fc71 	bl	8001608 <HAL_SDRAM_MspInit>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	2202      	movs	r2, #2
 8005d2a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681a      	ldr	r2, [r3, #0]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	3304      	adds	r3, #4
 8005d36:	4619      	mov	r1, r3
 8005d38:	4610      	mov	r0, r2
 8005d3a:	f001 ff83 	bl	8007c44 <FMC_SDRAM_Init>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6818      	ldr	r0, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	685b      	ldr	r3, [r3, #4]
 8005d46:	461a      	mov	r2, r3
 8005d48:	6839      	ldr	r1, [r7, #0]
 8005d4a:	f001 ffd8 	bl	8007cfe <FMC_SDRAM_Timing_Init>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	2201      	movs	r2, #1
 8005d52:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8005d56:	2300      	movs	r3, #0
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3708      	adds	r7, #8
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <HAL_SPI_Init>:
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b082      	sub	sp, #8
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <HAL_SPI_Init+0x12>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e07b      	b.n	8005e6a <HAL_SPI_Init+0x10a>
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d108      	bne.n	8005d8c <HAL_SPI_Init+0x2c>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005d82:	d009      	beq.n	8005d98 <HAL_SPI_Init+0x38>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	61da      	str	r2, [r3, #28]
 8005d8a:	e005      	b.n	8005d98 <HAL_SPI_Init+0x38>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	611a      	str	r2, [r3, #16]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2200      	movs	r2, #0
 8005d96:	615a      	str	r2, [r3, #20]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d106      	bne.n	8005db8 <HAL_SPI_Init+0x58>
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f7fb fadc 	bl	8001370 <HAL_SPI_MspInit>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dce:	601a      	str	r2, [r3, #0]
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005de0:	431a      	orrs	r2, r3
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005dea:	431a      	orrs	r2, r3
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	f003 0302 	and.w	r3, r3, #2
 8005df4:	431a      	orrs	r2, r3
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	f003 0301 	and.w	r3, r3, #1
 8005dfe:	431a      	orrs	r2, r3
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	699b      	ldr	r3, [r3, #24]
 8005e04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005e08:	431a      	orrs	r2, r3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	69db      	ldr	r3, [r3, #28]
 8005e0e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005e12:	431a      	orrs	r2, r3
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	6a1b      	ldr	r3, [r3, #32]
 8005e18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e1c:	ea42 0103 	orr.w	r1, r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005e24:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	601a      	str	r2, [r3, #0]
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	699b      	ldr	r3, [r3, #24]
 8005e34:	0c1b      	lsrs	r3, r3, #16
 8005e36:	f003 0104 	and.w	r1, r3, #4
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e3e:	f003 0210 	and.w	r2, r3, #16
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	430a      	orrs	r2, r1
 8005e48:	605a      	str	r2, [r3, #4]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	69da      	ldr	r2, [r3, #28]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005e58:	61da      	str	r2, [r3, #28]
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2200      	movs	r2, #0
 8005e5e:	655a      	str	r2, [r3, #84]	@ 0x54
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005e68:	2300      	movs	r3, #0
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	3708      	adds	r7, #8
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}

08005e72 <HAL_SPI_Transmit>:
 8005e72:	b580      	push	{r7, lr}
 8005e74:	b088      	sub	sp, #32
 8005e76:	af00      	add	r7, sp, #0
 8005e78:	60f8      	str	r0, [r7, #12]
 8005e7a:	60b9      	str	r1, [r7, #8]
 8005e7c:	603b      	str	r3, [r7, #0]
 8005e7e:	4613      	mov	r3, r2
 8005e80:	80fb      	strh	r3, [r7, #6]
 8005e82:	f7fb fd51 	bl	8001928 <HAL_GetTick>
 8005e86:	61f8      	str	r0, [r7, #28]
 8005e88:	88fb      	ldrh	r3, [r7, #6]
 8005e8a:	837b      	strh	r3, [r7, #26]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005e92:	b2db      	uxtb	r3, r3
 8005e94:	2b01      	cmp	r3, #1
 8005e96:	d001      	beq.n	8005e9c <HAL_SPI_Transmit+0x2a>
 8005e98:	2302      	movs	r3, #2
 8005e9a:	e12a      	b.n	80060f2 <HAL_SPI_Transmit+0x280>
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d002      	beq.n	8005ea8 <HAL_SPI_Transmit+0x36>
 8005ea2:	88fb      	ldrh	r3, [r7, #6]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d101      	bne.n	8005eac <HAL_SPI_Transmit+0x3a>
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	e122      	b.n	80060f2 <HAL_SPI_Transmit+0x280>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005eb2:	2b01      	cmp	r3, #1
 8005eb4:	d101      	bne.n	8005eba <HAL_SPI_Transmit+0x48>
 8005eb6:	2302      	movs	r3, #2
 8005eb8:	e11b      	b.n	80060f2 <HAL_SPI_Transmit+0x280>
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	2201      	movs	r2, #1
 8005ebe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2203      	movs	r2, #3
 8005ec6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	655a      	str	r2, [r3, #84]	@ 0x54
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	68ba      	ldr	r2, [r7, #8]
 8005ed4:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	88fa      	ldrh	r2, [r7, #6]
 8005eda:	869a      	strh	r2, [r3, #52]	@ 0x34
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	88fa      	ldrh	r2, [r7, #6]
 8005ee0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	2200      	movs	r2, #0
 8005ee6:	639a      	str	r2, [r3, #56]	@ 0x38
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	2200      	movs	r2, #0
 8005eec:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	645a      	str	r2, [r3, #68]	@ 0x44
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	641a      	str	r2, [r3, #64]	@ 0x40
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f08:	d10f      	bne.n	8005f2a <HAL_SPI_Transmit+0xb8>
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	681a      	ldr	r2, [r3, #0]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005f18:	601a      	str	r2, [r3, #0]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005f28:	601a      	str	r2, [r3, #0]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f34:	2b40      	cmp	r3, #64	@ 0x40
 8005f36:	d007      	beq.n	8005f48 <HAL_SPI_Transmit+0xd6>
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	681a      	ldr	r2, [r3, #0]
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005f46:	601a      	str	r2, [r3, #0]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005f50:	d152      	bne.n	8005ff8 <HAL_SPI_Transmit+0x186>
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	685b      	ldr	r3, [r3, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d002      	beq.n	8005f60 <HAL_SPI_Transmit+0xee>
 8005f5a:	8b7b      	ldrh	r3, [r7, #26]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d145      	bne.n	8005fec <HAL_SPI_Transmit+0x17a>
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f64:	881a      	ldrh	r2, [r3, #0]
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	60da      	str	r2, [r3, #12]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f70:	1c9a      	adds	r2, r3, #2
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f7a:	b29b      	uxth	r3, r3
 8005f7c:	3b01      	subs	r3, #1
 8005f7e:	b29a      	uxth	r2, r3
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005f84:	e032      	b.n	8005fec <HAL_SPI_Transmit+0x17a>
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f003 0302 	and.w	r3, r3, #2
 8005f90:	2b02      	cmp	r3, #2
 8005f92:	d112      	bne.n	8005fba <HAL_SPI_Transmit+0x148>
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f98:	881a      	ldrh	r2, [r3, #0]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	60da      	str	r2, [r3, #12]
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fa4:	1c9a      	adds	r2, r3, #2
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	631a      	str	r2, [r3, #48]	@ 0x30
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005fae:	b29b      	uxth	r3, r3
 8005fb0:	3b01      	subs	r3, #1
 8005fb2:	b29a      	uxth	r2, r3
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005fb8:	e018      	b.n	8005fec <HAL_SPI_Transmit+0x17a>
 8005fba:	f7fb fcb5 	bl	8001928 <HAL_GetTick>
 8005fbe:	4602      	mov	r2, r0
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	1ad3      	subs	r3, r2, r3
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	429a      	cmp	r2, r3
 8005fc8:	d803      	bhi.n	8005fd2 <HAL_SPI_Transmit+0x160>
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fd0:	d102      	bne.n	8005fd8 <HAL_SPI_Transmit+0x166>
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d109      	bne.n	8005fec <HAL_SPI_Transmit+0x17a>
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005fe8:	2303      	movs	r3, #3
 8005fea:	e082      	b.n	80060f2 <HAL_SPI_Transmit+0x280>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d1c7      	bne.n	8005f86 <HAL_SPI_Transmit+0x114>
 8005ff6:	e053      	b.n	80060a0 <HAL_SPI_Transmit+0x22e>
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d002      	beq.n	8006006 <HAL_SPI_Transmit+0x194>
 8006000:	8b7b      	ldrh	r3, [r7, #26]
 8006002:	2b01      	cmp	r3, #1
 8006004:	d147      	bne.n	8006096 <HAL_SPI_Transmit+0x224>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	330c      	adds	r3, #12
 8006010:	7812      	ldrb	r2, [r2, #0]
 8006012:	701a      	strb	r2, [r3, #0]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006018:	1c5a      	adds	r2, r3, #1
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	631a      	str	r2, [r3, #48]	@ 0x30
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006022:	b29b      	uxth	r3, r3
 8006024:	3b01      	subs	r3, #1
 8006026:	b29a      	uxth	r2, r3
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800602c:	e033      	b.n	8006096 <HAL_SPI_Transmit+0x224>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	689b      	ldr	r3, [r3, #8]
 8006034:	f003 0302 	and.w	r3, r3, #2
 8006038:	2b02      	cmp	r3, #2
 800603a:	d113      	bne.n	8006064 <HAL_SPI_Transmit+0x1f2>
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	330c      	adds	r3, #12
 8006046:	7812      	ldrb	r2, [r2, #0]
 8006048:	701a      	strb	r2, [r3, #0]
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800604e:	1c5a      	adds	r2, r3, #1
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	631a      	str	r2, [r3, #48]	@ 0x30
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006058:	b29b      	uxth	r3, r3
 800605a:	3b01      	subs	r3, #1
 800605c:	b29a      	uxth	r2, r3
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006062:	e018      	b.n	8006096 <HAL_SPI_Transmit+0x224>
 8006064:	f7fb fc60 	bl	8001928 <HAL_GetTick>
 8006068:	4602      	mov	r2, r0
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	1ad3      	subs	r3, r2, r3
 800606e:	683a      	ldr	r2, [r7, #0]
 8006070:	429a      	cmp	r2, r3
 8006072:	d803      	bhi.n	800607c <HAL_SPI_Transmit+0x20a>
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607a:	d102      	bne.n	8006082 <HAL_SPI_Transmit+0x210>
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d109      	bne.n	8006096 <HAL_SPI_Transmit+0x224>
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2201      	movs	r2, #1
 8006086:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	2200      	movs	r2, #0
 800608e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006092:	2303      	movs	r3, #3
 8006094:	e02d      	b.n	80060f2 <HAL_SPI_Transmit+0x280>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800609a:	b29b      	uxth	r3, r3
 800609c:	2b00      	cmp	r3, #0
 800609e:	d1c6      	bne.n	800602e <HAL_SPI_Transmit+0x1bc>
 80060a0:	69fa      	ldr	r2, [r7, #28]
 80060a2:	6839      	ldr	r1, [r7, #0]
 80060a4:	68f8      	ldr	r0, [r7, #12]
 80060a6:	f000 fcf7 	bl	8006a98 <SPI_EndRxTxTransaction>
 80060aa:	4603      	mov	r3, r0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d002      	beq.n	80060b6 <HAL_SPI_Transmit+0x244>
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2220      	movs	r2, #32
 80060b4:	655a      	str	r2, [r3, #84]	@ 0x54
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d10a      	bne.n	80060d4 <HAL_SPI_Transmit+0x262>
 80060be:	2300      	movs	r3, #0
 80060c0:	617b      	str	r3, [r7, #20]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	617b      	str	r3, [r7, #20]
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	689b      	ldr	r3, [r3, #8]
 80060d0:	617b      	str	r3, [r7, #20]
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	2201      	movs	r2, #1
 80060d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	2200      	movs	r2, #0
 80060e0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d001      	beq.n	80060f0 <HAL_SPI_Transmit+0x27e>
 80060ec:	2301      	movs	r3, #1
 80060ee:	e000      	b.n	80060f2 <HAL_SPI_Transmit+0x280>
 80060f0:	2300      	movs	r3, #0
 80060f2:	4618      	mov	r0, r3
 80060f4:	3720      	adds	r7, #32
 80060f6:	46bd      	mov	sp, r7
 80060f8:	bd80      	pop	{r7, pc}

080060fa <HAL_SPI_Receive>:
 80060fa:	b580      	push	{r7, lr}
 80060fc:	b088      	sub	sp, #32
 80060fe:	af02      	add	r7, sp, #8
 8006100:	60f8      	str	r0, [r7, #12]
 8006102:	60b9      	str	r1, [r7, #8]
 8006104:	603b      	str	r3, [r7, #0]
 8006106:	4613      	mov	r3, r2
 8006108:	80fb      	strh	r3, [r7, #6]
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006110:	b2db      	uxtb	r3, r3
 8006112:	2b01      	cmp	r3, #1
 8006114:	d001      	beq.n	800611a <HAL_SPI_Receive+0x20>
 8006116:	2302      	movs	r3, #2
 8006118:	e104      	b.n	8006324 <HAL_SPI_Receive+0x22a>
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006122:	d112      	bne.n	800614a <HAL_SPI_Receive+0x50>
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	689b      	ldr	r3, [r3, #8]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d10e      	bne.n	800614a <HAL_SPI_Receive+0x50>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2204      	movs	r2, #4
 8006130:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006134:	88fa      	ldrh	r2, [r7, #6]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	9300      	str	r3, [sp, #0]
 800613a:	4613      	mov	r3, r2
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	68b9      	ldr	r1, [r7, #8]
 8006140:	68f8      	ldr	r0, [r7, #12]
 8006142:	f000 f8f3 	bl	800632c <HAL_SPI_TransmitReceive>
 8006146:	4603      	mov	r3, r0
 8006148:	e0ec      	b.n	8006324 <HAL_SPI_Receive+0x22a>
 800614a:	f7fb fbed 	bl	8001928 <HAL_GetTick>
 800614e:	6178      	str	r0, [r7, #20]
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	2b00      	cmp	r3, #0
 8006154:	d002      	beq.n	800615c <HAL_SPI_Receive+0x62>
 8006156:	88fb      	ldrh	r3, [r7, #6]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d101      	bne.n	8006160 <HAL_SPI_Receive+0x66>
 800615c:	2301      	movs	r3, #1
 800615e:	e0e1      	b.n	8006324 <HAL_SPI_Receive+0x22a>
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006166:	2b01      	cmp	r3, #1
 8006168:	d101      	bne.n	800616e <HAL_SPI_Receive+0x74>
 800616a:	2302      	movs	r3, #2
 800616c:	e0da      	b.n	8006324 <HAL_SPI_Receive+0x22a>
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2201      	movs	r2, #1
 8006172:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2204      	movs	r2, #4
 800617a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2200      	movs	r2, #0
 8006182:	655a      	str	r2, [r3, #84]	@ 0x54
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	639a      	str	r2, [r3, #56]	@ 0x38
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	88fa      	ldrh	r2, [r7, #6]
 800618e:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	88fa      	ldrh	r2, [r7, #6]
 8006194:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	2200      	movs	r2, #0
 800619a:	631a      	str	r2, [r3, #48]	@ 0x30
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	2200      	movs	r2, #0
 80061a0:	869a      	strh	r2, [r3, #52]	@ 0x34
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2200      	movs	r2, #0
 80061a6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2200      	movs	r2, #0
 80061ac:	641a      	str	r2, [r3, #64]	@ 0x40
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2200      	movs	r2, #0
 80061b2:	645a      	str	r2, [r3, #68]	@ 0x44
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	689b      	ldr	r3, [r3, #8]
 80061b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80061bc:	d10f      	bne.n	80061de <HAL_SPI_Receive+0xe4>
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80061cc:	601a      	str	r2, [r3, #0]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80061dc:	601a      	str	r2, [r3, #0]
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80061e8:	2b40      	cmp	r3, #64	@ 0x40
 80061ea:	d007      	beq.n	80061fc <HAL_SPI_Receive+0x102>
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681a      	ldr	r2, [r3, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061fa:	601a      	str	r2, [r3, #0]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	68db      	ldr	r3, [r3, #12]
 8006200:	2b00      	cmp	r3, #0
 8006202:	d170      	bne.n	80062e6 <HAL_SPI_Receive+0x1ec>
 8006204:	e035      	b.n	8006272 <HAL_SPI_Receive+0x178>
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	f003 0301 	and.w	r3, r3, #1
 8006210:	2b01      	cmp	r3, #1
 8006212:	d115      	bne.n	8006240 <HAL_SPI_Receive+0x146>
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f103 020c 	add.w	r2, r3, #12
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006220:	7812      	ldrb	r2, [r2, #0]
 8006222:	b2d2      	uxtb	r2, r2
 8006224:	701a      	strb	r2, [r3, #0]
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800622a:	1c5a      	adds	r2, r3, #1
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006234:	b29b      	uxth	r3, r3
 8006236:	3b01      	subs	r3, #1
 8006238:	b29a      	uxth	r2, r3
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800623e:	e018      	b.n	8006272 <HAL_SPI_Receive+0x178>
 8006240:	f7fb fb72 	bl	8001928 <HAL_GetTick>
 8006244:	4602      	mov	r2, r0
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	1ad3      	subs	r3, r2, r3
 800624a:	683a      	ldr	r2, [r7, #0]
 800624c:	429a      	cmp	r2, r3
 800624e:	d803      	bhi.n	8006258 <HAL_SPI_Receive+0x15e>
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006256:	d102      	bne.n	800625e <HAL_SPI_Receive+0x164>
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d109      	bne.n	8006272 <HAL_SPI_Receive+0x178>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2201      	movs	r2, #1
 8006262:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2200      	movs	r2, #0
 800626a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800626e:	2303      	movs	r3, #3
 8006270:	e058      	b.n	8006324 <HAL_SPI_Receive+0x22a>
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006276:	b29b      	uxth	r3, r3
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1c4      	bne.n	8006206 <HAL_SPI_Receive+0x10c>
 800627c:	e038      	b.n	80062f0 <HAL_SPI_Receive+0x1f6>
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	689b      	ldr	r3, [r3, #8]
 8006284:	f003 0301 	and.w	r3, r3, #1
 8006288:	2b01      	cmp	r3, #1
 800628a:	d113      	bne.n	80062b4 <HAL_SPI_Receive+0x1ba>
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	68da      	ldr	r2, [r3, #12]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006296:	b292      	uxth	r2, r2
 8006298:	801a      	strh	r2, [r3, #0]
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800629e:	1c9a      	adds	r2, r3, #2
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	639a      	str	r2, [r3, #56]	@ 0x38
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	3b01      	subs	r3, #1
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80062b2:	e018      	b.n	80062e6 <HAL_SPI_Receive+0x1ec>
 80062b4:	f7fb fb38 	bl	8001928 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	697b      	ldr	r3, [r7, #20]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	683a      	ldr	r2, [r7, #0]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d803      	bhi.n	80062cc <HAL_SPI_Receive+0x1d2>
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ca:	d102      	bne.n	80062d2 <HAL_SPI_Receive+0x1d8>
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d109      	bne.n	80062e6 <HAL_SPI_Receive+0x1ec>
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2201      	movs	r2, #1
 80062d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80062e2:	2303      	movs	r3, #3
 80062e4:	e01e      	b.n	8006324 <HAL_SPI_Receive+0x22a>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d1c6      	bne.n	800627e <HAL_SPI_Receive+0x184>
 80062f0:	697a      	ldr	r2, [r7, #20]
 80062f2:	6839      	ldr	r1, [r7, #0]
 80062f4:	68f8      	ldr	r0, [r7, #12]
 80062f6:	f000 fb69 	bl	80069cc <SPI_EndRxTransaction>
 80062fa:	4603      	mov	r3, r0
 80062fc:	2b00      	cmp	r3, #0
 80062fe:	d002      	beq.n	8006306 <HAL_SPI_Receive+0x20c>
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2220      	movs	r2, #32
 8006304:	655a      	str	r2, [r3, #84]	@ 0x54
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800631a:	2b00      	cmp	r3, #0
 800631c:	d001      	beq.n	8006322 <HAL_SPI_Receive+0x228>
 800631e:	2301      	movs	r3, #1
 8006320:	e000      	b.n	8006324 <HAL_SPI_Receive+0x22a>
 8006322:	2300      	movs	r3, #0
 8006324:	4618      	mov	r0, r3
 8006326:	3718      	adds	r7, #24
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <HAL_SPI_TransmitReceive>:
 800632c:	b580      	push	{r7, lr}
 800632e:	b08a      	sub	sp, #40	@ 0x28
 8006330:	af00      	add	r7, sp, #0
 8006332:	60f8      	str	r0, [r7, #12]
 8006334:	60b9      	str	r1, [r7, #8]
 8006336:	607a      	str	r2, [r7, #4]
 8006338:	807b      	strh	r3, [r7, #2]
 800633a:	2301      	movs	r3, #1
 800633c:	627b      	str	r3, [r7, #36]	@ 0x24
 800633e:	f7fb faf3 	bl	8001928 <HAL_GetTick>
 8006342:	6238      	str	r0, [r7, #32]
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800634a:	77fb      	strb	r3, [r7, #31]
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	61bb      	str	r3, [r7, #24]
 8006352:	887b      	ldrh	r3, [r7, #2]
 8006354:	82fb      	strh	r3, [r7, #22]
 8006356:	7ffb      	ldrb	r3, [r7, #31]
 8006358:	2b01      	cmp	r3, #1
 800635a:	d00c      	beq.n	8006376 <HAL_SPI_TransmitReceive+0x4a>
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006362:	d106      	bne.n	8006372 <HAL_SPI_TransmitReceive+0x46>
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d102      	bne.n	8006372 <HAL_SPI_TransmitReceive+0x46>
 800636c:	7ffb      	ldrb	r3, [r7, #31]
 800636e:	2b04      	cmp	r3, #4
 8006370:	d001      	beq.n	8006376 <HAL_SPI_TransmitReceive+0x4a>
 8006372:	2302      	movs	r3, #2
 8006374:	e17f      	b.n	8006676 <HAL_SPI_TransmitReceive+0x34a>
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d005      	beq.n	8006388 <HAL_SPI_TransmitReceive+0x5c>
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d002      	beq.n	8006388 <HAL_SPI_TransmitReceive+0x5c>
 8006382:	887b      	ldrh	r3, [r7, #2]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d101      	bne.n	800638c <HAL_SPI_TransmitReceive+0x60>
 8006388:	2301      	movs	r3, #1
 800638a:	e174      	b.n	8006676 <HAL_SPI_TransmitReceive+0x34a>
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006392:	2b01      	cmp	r3, #1
 8006394:	d101      	bne.n	800639a <HAL_SPI_TransmitReceive+0x6e>
 8006396:	2302      	movs	r3, #2
 8006398:	e16d      	b.n	8006676 <HAL_SPI_TransmitReceive+0x34a>
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	2201      	movs	r2, #1
 800639e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80063a8:	b2db      	uxtb	r3, r3
 80063aa:	2b04      	cmp	r3, #4
 80063ac:	d003      	beq.n	80063b6 <HAL_SPI_TransmitReceive+0x8a>
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2205      	movs	r2, #5
 80063b2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	2200      	movs	r2, #0
 80063ba:	655a      	str	r2, [r3, #84]	@ 0x54
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	639a      	str	r2, [r3, #56]	@ 0x38
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	887a      	ldrh	r2, [r7, #2]
 80063c6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	887a      	ldrh	r2, [r7, #2]
 80063cc:	879a      	strh	r2, [r3, #60]	@ 0x3c
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	68ba      	ldr	r2, [r7, #8]
 80063d2:	631a      	str	r2, [r3, #48]	@ 0x30
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	887a      	ldrh	r2, [r7, #2]
 80063d8:	86da      	strh	r2, [r3, #54]	@ 0x36
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	887a      	ldrh	r2, [r7, #2]
 80063de:	869a      	strh	r2, [r3, #52]	@ 0x34
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	641a      	str	r2, [r3, #64]	@ 0x40
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	645a      	str	r2, [r3, #68]	@ 0x44
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063f6:	2b40      	cmp	r3, #64	@ 0x40
 80063f8:	d007      	beq.n	800640a <HAL_SPI_TransmitReceive+0xde>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006408:	601a      	str	r2, [r3, #0]
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006412:	d17e      	bne.n	8006512 <HAL_SPI_TransmitReceive+0x1e6>
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	685b      	ldr	r3, [r3, #4]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d002      	beq.n	8006422 <HAL_SPI_TransmitReceive+0xf6>
 800641c:	8afb      	ldrh	r3, [r7, #22]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d16c      	bne.n	80064fc <HAL_SPI_TransmitReceive+0x1d0>
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006426:	881a      	ldrh	r2, [r3, #0]
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	60da      	str	r2, [r3, #12]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006432:	1c9a      	adds	r2, r3, #2
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	631a      	str	r2, [r3, #48]	@ 0x30
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800643c:	b29b      	uxth	r3, r3
 800643e:	3b01      	subs	r3, #1
 8006440:	b29a      	uxth	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006446:	e059      	b.n	80064fc <HAL_SPI_TransmitReceive+0x1d0>
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f003 0302 	and.w	r3, r3, #2
 8006452:	2b02      	cmp	r3, #2
 8006454:	d11b      	bne.n	800648e <HAL_SPI_TransmitReceive+0x162>
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800645a:	b29b      	uxth	r3, r3
 800645c:	2b00      	cmp	r3, #0
 800645e:	d016      	beq.n	800648e <HAL_SPI_TransmitReceive+0x162>
 8006460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006462:	2b01      	cmp	r3, #1
 8006464:	d113      	bne.n	800648e <HAL_SPI_TransmitReceive+0x162>
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800646a:	881a      	ldrh	r2, [r3, #0]
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	60da      	str	r2, [r3, #12]
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006476:	1c9a      	adds	r2, r3, #2
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	631a      	str	r2, [r3, #48]	@ 0x30
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006480:	b29b      	uxth	r3, r3
 8006482:	3b01      	subs	r3, #1
 8006484:	b29a      	uxth	r2, r3
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	86da      	strh	r2, [r3, #54]	@ 0x36
 800648a:	2300      	movs	r3, #0
 800648c:	627b      	str	r3, [r7, #36]	@ 0x24
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f003 0301 	and.w	r3, r3, #1
 8006498:	2b01      	cmp	r3, #1
 800649a:	d119      	bne.n	80064d0 <HAL_SPI_TransmitReceive+0x1a4>
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064a0:	b29b      	uxth	r3, r3
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d014      	beq.n	80064d0 <HAL_SPI_TransmitReceive+0x1a4>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	68da      	ldr	r2, [r3, #12]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b0:	b292      	uxth	r2, r2
 80064b2:	801a      	strh	r2, [r3, #0]
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80064b8:	1c9a      	adds	r2, r3, #2
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	639a      	str	r2, [r3, #56]	@ 0x38
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064c2:	b29b      	uxth	r3, r3
 80064c4:	3b01      	subs	r3, #1
 80064c6:	b29a      	uxth	r2, r3
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80064cc:	2301      	movs	r3, #1
 80064ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80064d0:	f7fb fa2a 	bl	8001928 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	6a3b      	ldr	r3, [r7, #32]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064dc:	429a      	cmp	r2, r3
 80064de:	d80d      	bhi.n	80064fc <HAL_SPI_TransmitReceive+0x1d0>
 80064e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064e6:	d009      	beq.n	80064fc <HAL_SPI_TransmitReceive+0x1d0>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2200      	movs	r2, #0
 80064f4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80064f8:	2303      	movs	r3, #3
 80064fa:	e0bc      	b.n	8006676 <HAL_SPI_TransmitReceive+0x34a>
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006500:	b29b      	uxth	r3, r3
 8006502:	2b00      	cmp	r3, #0
 8006504:	d1a0      	bne.n	8006448 <HAL_SPI_TransmitReceive+0x11c>
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800650a:	b29b      	uxth	r3, r3
 800650c:	2b00      	cmp	r3, #0
 800650e:	d19b      	bne.n	8006448 <HAL_SPI_TransmitReceive+0x11c>
 8006510:	e082      	b.n	8006618 <HAL_SPI_TransmitReceive+0x2ec>
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	685b      	ldr	r3, [r3, #4]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d002      	beq.n	8006520 <HAL_SPI_TransmitReceive+0x1f4>
 800651a:	8afb      	ldrh	r3, [r7, #22]
 800651c:	2b01      	cmp	r3, #1
 800651e:	d171      	bne.n	8006604 <HAL_SPI_TransmitReceive+0x2d8>
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	330c      	adds	r3, #12
 800652a:	7812      	ldrb	r2, [r2, #0]
 800652c:	701a      	strb	r2, [r3, #0]
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006532:	1c5a      	adds	r2, r3, #1
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	631a      	str	r2, [r3, #48]	@ 0x30
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800653c:	b29b      	uxth	r3, r3
 800653e:	3b01      	subs	r3, #1
 8006540:	b29a      	uxth	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006546:	e05d      	b.n	8006604 <HAL_SPI_TransmitReceive+0x2d8>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	689b      	ldr	r3, [r3, #8]
 800654e:	f003 0302 	and.w	r3, r3, #2
 8006552:	2b02      	cmp	r3, #2
 8006554:	d11c      	bne.n	8006590 <HAL_SPI_TransmitReceive+0x264>
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800655a:	b29b      	uxth	r3, r3
 800655c:	2b00      	cmp	r3, #0
 800655e:	d017      	beq.n	8006590 <HAL_SPI_TransmitReceive+0x264>
 8006560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006562:	2b01      	cmp	r3, #1
 8006564:	d114      	bne.n	8006590 <HAL_SPI_TransmitReceive+0x264>
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	330c      	adds	r3, #12
 8006570:	7812      	ldrb	r2, [r2, #0]
 8006572:	701a      	strb	r2, [r3, #0]
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006578:	1c5a      	adds	r2, r3, #1
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	631a      	str	r2, [r3, #48]	@ 0x30
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006582:	b29b      	uxth	r3, r3
 8006584:	3b01      	subs	r3, #1
 8006586:	b29a      	uxth	r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800658c:	2300      	movs	r3, #0
 800658e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	689b      	ldr	r3, [r3, #8]
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	2b01      	cmp	r3, #1
 800659c:	d119      	bne.n	80065d2 <HAL_SPI_TransmitReceive+0x2a6>
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d014      	beq.n	80065d2 <HAL_SPI_TransmitReceive+0x2a6>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	68da      	ldr	r2, [r3, #12]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065b2:	b2d2      	uxtb	r2, r2
 80065b4:	701a      	strb	r2, [r3, #0]
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065ba:	1c5a      	adds	r2, r3, #1
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	639a      	str	r2, [r3, #56]	@ 0x38
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	3b01      	subs	r3, #1
 80065c8:	b29a      	uxth	r2, r3
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80065ce:	2301      	movs	r3, #1
 80065d0:	627b      	str	r3, [r7, #36]	@ 0x24
 80065d2:	f7fb f9a9 	bl	8001928 <HAL_GetTick>
 80065d6:	4602      	mov	r2, r0
 80065d8:	6a3b      	ldr	r3, [r7, #32]
 80065da:	1ad3      	subs	r3, r2, r3
 80065dc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065de:	429a      	cmp	r2, r3
 80065e0:	d803      	bhi.n	80065ea <HAL_SPI_TransmitReceive+0x2be>
 80065e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e8:	d102      	bne.n	80065f0 <HAL_SPI_TransmitReceive+0x2c4>
 80065ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d109      	bne.n	8006604 <HAL_SPI_TransmitReceive+0x2d8>
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006600:	2303      	movs	r3, #3
 8006602:	e038      	b.n	8006676 <HAL_SPI_TransmitReceive+0x34a>
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006608:	b29b      	uxth	r3, r3
 800660a:	2b00      	cmp	r3, #0
 800660c:	d19c      	bne.n	8006548 <HAL_SPI_TransmitReceive+0x21c>
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006612:	b29b      	uxth	r3, r3
 8006614:	2b00      	cmp	r3, #0
 8006616:	d197      	bne.n	8006548 <HAL_SPI_TransmitReceive+0x21c>
 8006618:	6a3a      	ldr	r2, [r7, #32]
 800661a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800661c:	68f8      	ldr	r0, [r7, #12]
 800661e:	f000 fa3b 	bl	8006a98 <SPI_EndRxTxTransaction>
 8006622:	4603      	mov	r3, r0
 8006624:	2b00      	cmp	r3, #0
 8006626:	d008      	beq.n	800663a <HAL_SPI_TransmitReceive+0x30e>
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2220      	movs	r2, #32
 800662c:	655a      	str	r2, [r3, #84]	@ 0x54
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	2200      	movs	r2, #0
 8006632:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006636:	2301      	movs	r3, #1
 8006638:	e01d      	b.n	8006676 <HAL_SPI_TransmitReceive+0x34a>
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	689b      	ldr	r3, [r3, #8]
 800663e:	2b00      	cmp	r3, #0
 8006640:	d10a      	bne.n	8006658 <HAL_SPI_TransmitReceive+0x32c>
 8006642:	2300      	movs	r3, #0
 8006644:	613b      	str	r3, [r7, #16]
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	68db      	ldr	r3, [r3, #12]
 800664c:	613b      	str	r3, [r7, #16]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	689b      	ldr	r3, [r3, #8]
 8006654:	613b      	str	r3, [r7, #16]
 8006656:	693b      	ldr	r3, [r7, #16]
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800666c:	2b00      	cmp	r3, #0
 800666e:	d001      	beq.n	8006674 <HAL_SPI_TransmitReceive+0x348>
 8006670:	2301      	movs	r3, #1
 8006672:	e000      	b.n	8006676 <HAL_SPI_TransmitReceive+0x34a>
 8006674:	2300      	movs	r3, #0
 8006676:	4618      	mov	r0, r3
 8006678:	3728      	adds	r7, #40	@ 0x28
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}
	...

08006680 <HAL_SPI_IRQHandler>:
 8006680:	b580      	push	{r7, lr}
 8006682:	b088      	sub	sp, #32
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	61fb      	str	r3, [r7, #28]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	61bb      	str	r3, [r7, #24]
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	099b      	lsrs	r3, r3, #6
 800669c:	f003 0301 	and.w	r3, r3, #1
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10f      	bne.n	80066c4 <HAL_SPI_IRQHandler+0x44>
 80066a4:	69bb      	ldr	r3, [r7, #24]
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d00a      	beq.n	80066c4 <HAL_SPI_IRQHandler+0x44>
 80066ae:	69fb      	ldr	r3, [r7, #28]
 80066b0:	099b      	lsrs	r3, r3, #6
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d004      	beq.n	80066c4 <HAL_SPI_IRQHandler+0x44>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	4798      	blx	r3
 80066c2:	e0d7      	b.n	8006874 <HAL_SPI_IRQHandler+0x1f4>
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	085b      	lsrs	r3, r3, #1
 80066c8:	f003 0301 	and.w	r3, r3, #1
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d00a      	beq.n	80066e6 <HAL_SPI_IRQHandler+0x66>
 80066d0:	69fb      	ldr	r3, [r7, #28]
 80066d2:	09db      	lsrs	r3, r3, #7
 80066d4:	f003 0301 	and.w	r3, r3, #1
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d004      	beq.n	80066e6 <HAL_SPI_IRQHandler+0x66>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	4798      	blx	r3
 80066e4:	e0c6      	b.n	8006874 <HAL_SPI_IRQHandler+0x1f4>
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	095b      	lsrs	r3, r3, #5
 80066ea:	f003 0301 	and.w	r3, r3, #1
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d10c      	bne.n	800670c <HAL_SPI_IRQHandler+0x8c>
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	099b      	lsrs	r3, r3, #6
 80066f6:	f003 0301 	and.w	r3, r3, #1
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d106      	bne.n	800670c <HAL_SPI_IRQHandler+0x8c>
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	0a1b      	lsrs	r3, r3, #8
 8006702:	f003 0301 	and.w	r3, r3, #1
 8006706:	2b00      	cmp	r3, #0
 8006708:	f000 80b4 	beq.w	8006874 <HAL_SPI_IRQHandler+0x1f4>
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	095b      	lsrs	r3, r3, #5
 8006710:	f003 0301 	and.w	r3, r3, #1
 8006714:	2b00      	cmp	r3, #0
 8006716:	f000 80ad 	beq.w	8006874 <HAL_SPI_IRQHandler+0x1f4>
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	099b      	lsrs	r3, r3, #6
 800671e:	f003 0301 	and.w	r3, r3, #1
 8006722:	2b00      	cmp	r3, #0
 8006724:	d023      	beq.n	800676e <HAL_SPI_IRQHandler+0xee>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800672c:	b2db      	uxtb	r3, r3
 800672e:	2b03      	cmp	r3, #3
 8006730:	d011      	beq.n	8006756 <HAL_SPI_IRQHandler+0xd6>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006736:	f043 0204 	orr.w	r2, r3, #4
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	655a      	str	r2, [r3, #84]	@ 0x54
 800673e:	2300      	movs	r3, #0
 8006740:	617b      	str	r3, [r7, #20]
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	617b      	str	r3, [r7, #20]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	617b      	str	r3, [r7, #20]
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	e00b      	b.n	800676e <HAL_SPI_IRQHandler+0xee>
 8006756:	2300      	movs	r3, #0
 8006758:	613b      	str	r3, [r7, #16]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	68db      	ldr	r3, [r3, #12]
 8006760:	613b      	str	r3, [r7, #16]
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	689b      	ldr	r3, [r3, #8]
 8006768:	613b      	str	r3, [r7, #16]
 800676a:	693b      	ldr	r3, [r7, #16]
 800676c:	e082      	b.n	8006874 <HAL_SPI_IRQHandler+0x1f4>
 800676e:	69bb      	ldr	r3, [r7, #24]
 8006770:	095b      	lsrs	r3, r3, #5
 8006772:	f003 0301 	and.w	r3, r3, #1
 8006776:	2b00      	cmp	r3, #0
 8006778:	d014      	beq.n	80067a4 <HAL_SPI_IRQHandler+0x124>
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800677e:	f043 0201 	orr.w	r2, r3, #1
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	655a      	str	r2, [r3, #84]	@ 0x54
 8006786:	2300      	movs	r3, #0
 8006788:	60fb      	str	r3, [r7, #12]
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	689b      	ldr	r3, [r3, #8]
 8006790:	60fb      	str	r3, [r7, #12]
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	681a      	ldr	r2, [r3, #0]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80067a0:	601a      	str	r2, [r3, #0]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	69bb      	ldr	r3, [r7, #24]
 80067a6:	0a1b      	lsrs	r3, r3, #8
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00c      	beq.n	80067ca <HAL_SPI_IRQHandler+0x14a>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067b4:	f043 0208 	orr.w	r2, r3, #8
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	655a      	str	r2, [r3, #84]	@ 0x54
 80067bc:	2300      	movs	r3, #0
 80067be:	60bb      	str	r3, [r7, #8]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	689b      	ldr	r3, [r3, #8]
 80067c6:	60bb      	str	r3, [r7, #8]
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d04f      	beq.n	8006872 <HAL_SPI_IRQHandler+0x1f2>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	685a      	ldr	r2, [r3, #4]
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80067e0:	605a      	str	r2, [r3, #4]
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2201      	movs	r2, #1
 80067e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80067ea:	69fb      	ldr	r3, [r7, #28]
 80067ec:	f003 0302 	and.w	r3, r3, #2
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d104      	bne.n	80067fe <HAL_SPI_IRQHandler+0x17e>
 80067f4:	69fb      	ldr	r3, [r7, #28]
 80067f6:	f003 0301 	and.w	r3, r3, #1
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d034      	beq.n	8006868 <HAL_SPI_IRQHandler+0x1e8>
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	685a      	ldr	r2, [r3, #4]
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f022 0203 	bic.w	r2, r2, #3
 800680c:	605a      	str	r2, [r3, #4]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006812:	2b00      	cmp	r3, #0
 8006814:	d011      	beq.n	800683a <HAL_SPI_IRQHandler+0x1ba>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800681a:	4a18      	ldr	r2, [pc, #96]	@ (800687c <HAL_SPI_IRQHandler+0x1fc>)
 800681c:	651a      	str	r2, [r3, #80]	@ 0x50
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006822:	4618      	mov	r0, r3
 8006824:	f7fb f9ae 	bl	8001b84 <HAL_DMA_Abort_IT>
 8006828:	4603      	mov	r3, r0
 800682a:	2b00      	cmp	r3, #0
 800682c:	d005      	beq.n	800683a <HAL_SPI_IRQHandler+0x1ba>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006832:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	655a      	str	r2, [r3, #84]	@ 0x54
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800683e:	2b00      	cmp	r3, #0
 8006840:	d016      	beq.n	8006870 <HAL_SPI_IRQHandler+0x1f0>
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006846:	4a0d      	ldr	r2, [pc, #52]	@ (800687c <HAL_SPI_IRQHandler+0x1fc>)
 8006848:	651a      	str	r2, [r3, #80]	@ 0x50
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800684e:	4618      	mov	r0, r3
 8006850:	f7fb f998 	bl	8001b84 <HAL_DMA_Abort_IT>
 8006854:	4603      	mov	r3, r0
 8006856:	2b00      	cmp	r3, #0
 8006858:	d00a      	beq.n	8006870 <HAL_SPI_IRQHandler+0x1f0>
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800685e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	655a      	str	r2, [r3, #84]	@ 0x54
 8006866:	e003      	b.n	8006870 <HAL_SPI_IRQHandler+0x1f0>
 8006868:	6878      	ldr	r0, [r7, #4]
 800686a:	f000 f809 	bl	8006880 <HAL_SPI_ErrorCallback>
 800686e:	e000      	b.n	8006872 <HAL_SPI_IRQHandler+0x1f2>
 8006870:	bf00      	nop
 8006872:	bf00      	nop
 8006874:	3720      	adds	r7, #32
 8006876:	46bd      	mov	sp, r7
 8006878:	bd80      	pop	{r7, pc}
 800687a:	bf00      	nop
 800687c:	08006895 	.word	0x08006895

08006880 <HAL_SPI_ErrorCallback>:
 8006880:	b480      	push	{r7}
 8006882:	b083      	sub	sp, #12
 8006884:	af00      	add	r7, sp, #0
 8006886:	6078      	str	r0, [r7, #4]
 8006888:	bf00      	nop
 800688a:	370c      	adds	r7, #12
 800688c:	46bd      	mov	sp, r7
 800688e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006892:	4770      	bx	lr

08006894 <SPI_DMAAbortOnError>:
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80068a0:	60fb      	str	r3, [r7, #12]
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2200      	movs	r2, #0
 80068a6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	86da      	strh	r2, [r3, #54]	@ 0x36
 80068ae:	68f8      	ldr	r0, [r7, #12]
 80068b0:	f7ff ffe6 	bl	8006880 <HAL_SPI_ErrorCallback>
 80068b4:	bf00      	nop
 80068b6:	3710      	adds	r7, #16
 80068b8:	46bd      	mov	sp, r7
 80068ba:	bd80      	pop	{r7, pc}

080068bc <SPI_WaitFlagStateUntilTimeout>:
 80068bc:	b580      	push	{r7, lr}
 80068be:	b088      	sub	sp, #32
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	60f8      	str	r0, [r7, #12]
 80068c4:	60b9      	str	r1, [r7, #8]
 80068c6:	603b      	str	r3, [r7, #0]
 80068c8:	4613      	mov	r3, r2
 80068ca:	71fb      	strb	r3, [r7, #7]
 80068cc:	f7fb f82c 	bl	8001928 <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80068d4:	1a9b      	subs	r3, r3, r2
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	4413      	add	r3, r2
 80068da:	61fb      	str	r3, [r7, #28]
 80068dc:	f7fb f824 	bl	8001928 <HAL_GetTick>
 80068e0:	61b8      	str	r0, [r7, #24]
 80068e2:	4b39      	ldr	r3, [pc, #228]	@ (80069c8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	015b      	lsls	r3, r3, #5
 80068e8:	0d1b      	lsrs	r3, r3, #20
 80068ea:	69fa      	ldr	r2, [r7, #28]
 80068ec:	fb02 f303 	mul.w	r3, r2, r3
 80068f0:	617b      	str	r3, [r7, #20]
 80068f2:	e054      	b.n	800699e <SPI_WaitFlagStateUntilTimeout+0xe2>
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068fa:	d050      	beq.n	800699e <SPI_WaitFlagStateUntilTimeout+0xe2>
 80068fc:	f7fb f814 	bl	8001928 <HAL_GetTick>
 8006900:	4602      	mov	r2, r0
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	1ad3      	subs	r3, r2, r3
 8006906:	69fa      	ldr	r2, [r7, #28]
 8006908:	429a      	cmp	r2, r3
 800690a:	d902      	bls.n	8006912 <SPI_WaitFlagStateUntilTimeout+0x56>
 800690c:	69fb      	ldr	r3, [r7, #28]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d13d      	bne.n	800698e <SPI_WaitFlagStateUntilTimeout+0xd2>
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	685a      	ldr	r2, [r3, #4]
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8006920:	605a      	str	r2, [r3, #4]
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	685b      	ldr	r3, [r3, #4]
 8006926:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800692a:	d111      	bne.n	8006950 <SPI_WaitFlagStateUntilTimeout+0x94>
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006934:	d004      	beq.n	8006940 <SPI_WaitFlagStateUntilTimeout+0x84>
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	689b      	ldr	r3, [r3, #8]
 800693a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800693e:	d107      	bne.n	8006950 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	681a      	ldr	r2, [r3, #0]
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800694e:	601a      	str	r2, [r3, #0]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006954:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006958:	d10f      	bne.n	800697a <SPI_WaitFlagStateUntilTimeout+0xbe>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	681a      	ldr	r2, [r3, #0]
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006968:	601a      	str	r2, [r3, #0]
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	681a      	ldr	r2, [r3, #0]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006978:	601a      	str	r2, [r3, #0]
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	2201      	movs	r2, #1
 800697e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	2200      	movs	r2, #0
 8006986:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800698a:	2303      	movs	r3, #3
 800698c:	e017      	b.n	80069be <SPI_WaitFlagStateUntilTimeout+0x102>
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d101      	bne.n	8006998 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8006994:	2300      	movs	r3, #0
 8006996:	61fb      	str	r3, [r7, #28]
 8006998:	697b      	ldr	r3, [r7, #20]
 800699a:	3b01      	subs	r3, #1
 800699c:	617b      	str	r3, [r7, #20]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	689a      	ldr	r2, [r3, #8]
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	4013      	ands	r3, r2
 80069a8:	68ba      	ldr	r2, [r7, #8]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	bf0c      	ite	eq
 80069ae:	2301      	moveq	r3, #1
 80069b0:	2300      	movne	r3, #0
 80069b2:	b2db      	uxtb	r3, r3
 80069b4:	461a      	mov	r2, r3
 80069b6:	79fb      	ldrb	r3, [r7, #7]
 80069b8:	429a      	cmp	r2, r3
 80069ba:	d19b      	bne.n	80068f4 <SPI_WaitFlagStateUntilTimeout+0x38>
 80069bc:	2300      	movs	r3, #0
 80069be:	4618      	mov	r0, r3
 80069c0:	3720      	adds	r7, #32
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}
 80069c6:	bf00      	nop
 80069c8:	20000008 	.word	0x20000008

080069cc <SPI_EndRxTransaction>:
 80069cc:	b580      	push	{r7, lr}
 80069ce:	b086      	sub	sp, #24
 80069d0:	af02      	add	r7, sp, #8
 80069d2:	60f8      	str	r0, [r7, #12]
 80069d4:	60b9      	str	r1, [r7, #8]
 80069d6:	607a      	str	r2, [r7, #4]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80069e0:	d111      	bne.n	8006a06 <SPI_EndRxTransaction+0x3a>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80069ea:	d004      	beq.n	80069f6 <SPI_EndRxTransaction+0x2a>
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	689b      	ldr	r3, [r3, #8]
 80069f0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80069f4:	d107      	bne.n	8006a06 <SPI_EndRxTransaction+0x3a>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	681a      	ldr	r2, [r3, #0]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a04:	601a      	str	r2, [r3, #0]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a0e:	d12a      	bne.n	8006a66 <SPI_EndRxTransaction+0x9a>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006a18:	d012      	beq.n	8006a40 <SPI_EndRxTransaction+0x74>
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	68bb      	ldr	r3, [r7, #8]
 8006a20:	2200      	movs	r2, #0
 8006a22:	2180      	movs	r1, #128	@ 0x80
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f7ff ff49 	bl	80068bc <SPI_WaitFlagStateUntilTimeout>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d02d      	beq.n	8006a8c <SPI_EndRxTransaction+0xc0>
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a34:	f043 0220 	orr.w	r2, r3, #32
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	655a      	str	r2, [r3, #84]	@ 0x54
 8006a3c:	2303      	movs	r3, #3
 8006a3e:	e026      	b.n	8006a8e <SPI_EndRxTransaction+0xc2>
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	9300      	str	r3, [sp, #0]
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	2200      	movs	r2, #0
 8006a48:	2101      	movs	r1, #1
 8006a4a:	68f8      	ldr	r0, [r7, #12]
 8006a4c:	f7ff ff36 	bl	80068bc <SPI_WaitFlagStateUntilTimeout>
 8006a50:	4603      	mov	r3, r0
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d01a      	beq.n	8006a8c <SPI_EndRxTransaction+0xc0>
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a5a:	f043 0220 	orr.w	r2, r3, #32
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	655a      	str	r2, [r3, #84]	@ 0x54
 8006a62:	2303      	movs	r3, #3
 8006a64:	e013      	b.n	8006a8e <SPI_EndRxTransaction+0xc2>
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	68bb      	ldr	r3, [r7, #8]
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	2101      	movs	r1, #1
 8006a70:	68f8      	ldr	r0, [r7, #12]
 8006a72:	f7ff ff23 	bl	80068bc <SPI_WaitFlagStateUntilTimeout>
 8006a76:	4603      	mov	r3, r0
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d007      	beq.n	8006a8c <SPI_EndRxTransaction+0xc0>
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a80:	f043 0220 	orr.w	r2, r3, #32
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	655a      	str	r2, [r3, #84]	@ 0x54
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e000      	b.n	8006a8e <SPI_EndRxTransaction+0xc2>
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	4618      	mov	r0, r3
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
	...

08006a98 <SPI_EndRxTxTransaction>:
 8006a98:	b580      	push	{r7, lr}
 8006a9a:	b088      	sub	sp, #32
 8006a9c:	af02      	add	r7, sp, #8
 8006a9e:	60f8      	str	r0, [r7, #12]
 8006aa0:	60b9      	str	r1, [r7, #8]
 8006aa2:	607a      	str	r2, [r7, #4]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	2102      	movs	r1, #2
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f7ff ff04 	bl	80068bc <SPI_WaitFlagStateUntilTimeout>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d007      	beq.n	8006aca <SPI_EndRxTxTransaction+0x32>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006abe:	f043 0220 	orr.w	r2, r3, #32
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	655a      	str	r2, [r3, #84]	@ 0x54
 8006ac6:	2303      	movs	r3, #3
 8006ac8:	e032      	b.n	8006b30 <SPI_EndRxTxTransaction+0x98>
 8006aca:	4b1b      	ldr	r3, [pc, #108]	@ (8006b38 <SPI_EndRxTxTransaction+0xa0>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4a1b      	ldr	r2, [pc, #108]	@ (8006b3c <SPI_EndRxTxTransaction+0xa4>)
 8006ad0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ad4:	0d5b      	lsrs	r3, r3, #21
 8006ad6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8006ada:	fb02 f303 	mul.w	r3, r2, r3
 8006ade:	617b      	str	r3, [r7, #20]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ae8:	d112      	bne.n	8006b10 <SPI_EndRxTxTransaction+0x78>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	9300      	str	r3, [sp, #0]
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	2200      	movs	r2, #0
 8006af2:	2180      	movs	r1, #128	@ 0x80
 8006af4:	68f8      	ldr	r0, [r7, #12]
 8006af6:	f7ff fee1 	bl	80068bc <SPI_WaitFlagStateUntilTimeout>
 8006afa:	4603      	mov	r3, r0
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d016      	beq.n	8006b2e <SPI_EndRxTxTransaction+0x96>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006b04:	f043 0220 	orr.w	r2, r3, #32
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	655a      	str	r2, [r3, #84]	@ 0x54
 8006b0c:	2303      	movs	r3, #3
 8006b0e:	e00f      	b.n	8006b30 <SPI_EndRxTxTransaction+0x98>
 8006b10:	697b      	ldr	r3, [r7, #20]
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d00a      	beq.n	8006b2c <SPI_EndRxTxTransaction+0x94>
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	3b01      	subs	r3, #1
 8006b1a:	617b      	str	r3, [r7, #20]
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	689b      	ldr	r3, [r3, #8]
 8006b22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b26:	2b80      	cmp	r3, #128	@ 0x80
 8006b28:	d0f2      	beq.n	8006b10 <SPI_EndRxTxTransaction+0x78>
 8006b2a:	e000      	b.n	8006b2e <SPI_EndRxTxTransaction+0x96>
 8006b2c:	bf00      	nop
 8006b2e:	2300      	movs	r3, #0
 8006b30:	4618      	mov	r0, r3
 8006b32:	3718      	adds	r7, #24
 8006b34:	46bd      	mov	sp, r7
 8006b36:	bd80      	pop	{r7, pc}
 8006b38:	20000008 	.word	0x20000008
 8006b3c:	165e9f81 	.word	0x165e9f81

08006b40 <HAL_TIM_Base_Init>:
 8006b40:	b580      	push	{r7, lr}
 8006b42:	b082      	sub	sp, #8
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d101      	bne.n	8006b52 <HAL_TIM_Base_Init+0x12>
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e041      	b.n	8006bd6 <HAL_TIM_Base_Init+0x96>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b58:	b2db      	uxtb	r3, r3
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d106      	bne.n	8006b6c <HAL_TIM_Base_Init+0x2c>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7fa fc52 	bl	8001410 <HAL_TIM_Base_MspInit>
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2202      	movs	r2, #2
 8006b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681a      	ldr	r2, [r3, #0]
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	3304      	adds	r3, #4
 8006b7c:	4619      	mov	r1, r3
 8006b7e:	4610      	mov	r0, r2
 8006b80:	f000 fa7e 	bl	8007080 <TIM_Base_SetConfig>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2201      	movs	r2, #1
 8006b88:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2201      	movs	r2, #1
 8006b90:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2201      	movs	r2, #1
 8006b98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	2201      	movs	r2, #1
 8006ba0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2201      	movs	r2, #1
 8006ba8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2201      	movs	r2, #1
 8006bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2201      	movs	r2, #1
 8006bc0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2201      	movs	r2, #1
 8006bc8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006bd4:	2300      	movs	r3, #0
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	3708      	adds	r7, #8
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
	...

08006be0 <HAL_TIM_Base_Start_IT>:
 8006be0:	b480      	push	{r7}
 8006be2:	b085      	sub	sp, #20
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bee:	b2db      	uxtb	r3, r3
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d001      	beq.n	8006bf8 <HAL_TIM_Base_Start_IT+0x18>
 8006bf4:	2301      	movs	r3, #1
 8006bf6:	e04e      	b.n	8006c96 <HAL_TIM_Base_Start_IT+0xb6>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2202      	movs	r2, #2
 8006bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68da      	ldr	r2, [r3, #12]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f042 0201 	orr.w	r2, r2, #1
 8006c0e:	60da      	str	r2, [r3, #12]
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	4a23      	ldr	r2, [pc, #140]	@ (8006ca4 <HAL_TIM_Base_Start_IT+0xc4>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d022      	beq.n	8006c60 <HAL_TIM_Base_Start_IT+0x80>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c22:	d01d      	beq.n	8006c60 <HAL_TIM_Base_Start_IT+0x80>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	4a1f      	ldr	r2, [pc, #124]	@ (8006ca8 <HAL_TIM_Base_Start_IT+0xc8>)
 8006c2a:	4293      	cmp	r3, r2
 8006c2c:	d018      	beq.n	8006c60 <HAL_TIM_Base_Start_IT+0x80>
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	4a1e      	ldr	r2, [pc, #120]	@ (8006cac <HAL_TIM_Base_Start_IT+0xcc>)
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d013      	beq.n	8006c60 <HAL_TIM_Base_Start_IT+0x80>
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	4a1c      	ldr	r2, [pc, #112]	@ (8006cb0 <HAL_TIM_Base_Start_IT+0xd0>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d00e      	beq.n	8006c60 <HAL_TIM_Base_Start_IT+0x80>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	4a1b      	ldr	r2, [pc, #108]	@ (8006cb4 <HAL_TIM_Base_Start_IT+0xd4>)
 8006c48:	4293      	cmp	r3, r2
 8006c4a:	d009      	beq.n	8006c60 <HAL_TIM_Base_Start_IT+0x80>
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	4a19      	ldr	r2, [pc, #100]	@ (8006cb8 <HAL_TIM_Base_Start_IT+0xd8>)
 8006c52:	4293      	cmp	r3, r2
 8006c54:	d004      	beq.n	8006c60 <HAL_TIM_Base_Start_IT+0x80>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4a18      	ldr	r2, [pc, #96]	@ (8006cbc <HAL_TIM_Base_Start_IT+0xdc>)
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d111      	bne.n	8006c84 <HAL_TIM_Base_Start_IT+0xa4>
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	689b      	ldr	r3, [r3, #8]
 8006c66:	f003 0307 	and.w	r3, r3, #7
 8006c6a:	60fb      	str	r3, [r7, #12]
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	2b06      	cmp	r3, #6
 8006c70:	d010      	beq.n	8006c94 <HAL_TIM_Base_Start_IT+0xb4>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	681a      	ldr	r2, [r3, #0]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	f042 0201 	orr.w	r2, r2, #1
 8006c80:	601a      	str	r2, [r3, #0]
 8006c82:	e007      	b.n	8006c94 <HAL_TIM_Base_Start_IT+0xb4>
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f042 0201 	orr.w	r2, r2, #1
 8006c92:	601a      	str	r2, [r3, #0]
 8006c94:	2300      	movs	r3, #0
 8006c96:	4618      	mov	r0, r3
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	40010000 	.word	0x40010000
 8006ca8:	40000400 	.word	0x40000400
 8006cac:	40000800 	.word	0x40000800
 8006cb0:	40000c00 	.word	0x40000c00
 8006cb4:	40010400 	.word	0x40010400
 8006cb8:	40014000 	.word	0x40014000
 8006cbc:	40001800 	.word	0x40001800

08006cc0 <HAL_TIM_IRQHandler>:
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b084      	sub	sp, #16
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	60fb      	str	r3, [r7, #12]
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	60bb      	str	r3, [r7, #8]
 8006cd8:	68bb      	ldr	r3, [r7, #8]
 8006cda:	f003 0302 	and.w	r3, r3, #2
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d020      	beq.n	8006d24 <HAL_TIM_IRQHandler+0x64>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f003 0302 	and.w	r3, r3, #2
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d01b      	beq.n	8006d24 <HAL_TIM_IRQHandler+0x64>
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f06f 0202 	mvn.w	r2, #2
 8006cf4:	611a      	str	r2, [r3, #16]
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2201      	movs	r2, #1
 8006cfa:	771a      	strb	r2, [r3, #28]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	699b      	ldr	r3, [r3, #24]
 8006d02:	f003 0303 	and.w	r3, r3, #3
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d003      	beq.n	8006d12 <HAL_TIM_IRQHandler+0x52>
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f000 f999 	bl	8007042 <HAL_TIM_IC_CaptureCallback>
 8006d10:	e005      	b.n	8006d1e <HAL_TIM_IRQHandler+0x5e>
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 f98b 	bl	800702e <HAL_TIM_OC_DelayElapsedCallback>
 8006d18:	6878      	ldr	r0, [r7, #4]
 8006d1a:	f000 f99c 	bl	8007056 <HAL_TIM_PWM_PulseFinishedCallback>
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	2200      	movs	r2, #0
 8006d22:	771a      	strb	r2, [r3, #28]
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	f003 0304 	and.w	r3, r3, #4
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d020      	beq.n	8006d70 <HAL_TIM_IRQHandler+0xb0>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	f003 0304 	and.w	r3, r3, #4
 8006d34:	2b00      	cmp	r3, #0
 8006d36:	d01b      	beq.n	8006d70 <HAL_TIM_IRQHandler+0xb0>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f06f 0204 	mvn.w	r2, #4
 8006d40:	611a      	str	r2, [r3, #16]
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	2202      	movs	r2, #2
 8006d46:	771a      	strb	r2, [r3, #28]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	699b      	ldr	r3, [r3, #24]
 8006d4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d003      	beq.n	8006d5e <HAL_TIM_IRQHandler+0x9e>
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f000 f973 	bl	8007042 <HAL_TIM_IC_CaptureCallback>
 8006d5c:	e005      	b.n	8006d6a <HAL_TIM_IRQHandler+0xaa>
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f000 f965 	bl	800702e <HAL_TIM_OC_DelayElapsedCallback>
 8006d64:	6878      	ldr	r0, [r7, #4]
 8006d66:	f000 f976 	bl	8007056 <HAL_TIM_PWM_PulseFinishedCallback>
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	771a      	strb	r2, [r3, #28]
 8006d70:	68bb      	ldr	r3, [r7, #8]
 8006d72:	f003 0308 	and.w	r3, r3, #8
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d020      	beq.n	8006dbc <HAL_TIM_IRQHandler+0xfc>
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	f003 0308 	and.w	r3, r3, #8
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d01b      	beq.n	8006dbc <HAL_TIM_IRQHandler+0xfc>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f06f 0208 	mvn.w	r2, #8
 8006d8c:	611a      	str	r2, [r3, #16]
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2204      	movs	r2, #4
 8006d92:	771a      	strb	r2, [r3, #28]
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	69db      	ldr	r3, [r3, #28]
 8006d9a:	f003 0303 	and.w	r3, r3, #3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d003      	beq.n	8006daa <HAL_TIM_IRQHandler+0xea>
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f94d 	bl	8007042 <HAL_TIM_IC_CaptureCallback>
 8006da8:	e005      	b.n	8006db6 <HAL_TIM_IRQHandler+0xf6>
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 f93f 	bl	800702e <HAL_TIM_OC_DelayElapsedCallback>
 8006db0:	6878      	ldr	r0, [r7, #4]
 8006db2:	f000 f950 	bl	8007056 <HAL_TIM_PWM_PulseFinishedCallback>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	2200      	movs	r2, #0
 8006dba:	771a      	strb	r2, [r3, #28]
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	f003 0310 	and.w	r3, r3, #16
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d020      	beq.n	8006e08 <HAL_TIM_IRQHandler+0x148>
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	f003 0310 	and.w	r3, r3, #16
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d01b      	beq.n	8006e08 <HAL_TIM_IRQHandler+0x148>
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f06f 0210 	mvn.w	r2, #16
 8006dd8:	611a      	str	r2, [r3, #16]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	2208      	movs	r2, #8
 8006dde:	771a      	strb	r2, [r3, #28]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	69db      	ldr	r3, [r3, #28]
 8006de6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d003      	beq.n	8006df6 <HAL_TIM_IRQHandler+0x136>
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 f927 	bl	8007042 <HAL_TIM_IC_CaptureCallback>
 8006df4:	e005      	b.n	8006e02 <HAL_TIM_IRQHandler+0x142>
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 f919 	bl	800702e <HAL_TIM_OC_DelayElapsedCallback>
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f000 f92a 	bl	8007056 <HAL_TIM_PWM_PulseFinishedCallback>
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	771a      	strb	r2, [r3, #28]
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	f003 0301 	and.w	r3, r3, #1
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00c      	beq.n	8006e2c <HAL_TIM_IRQHandler+0x16c>
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f003 0301 	and.w	r3, r3, #1
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d007      	beq.n	8006e2c <HAL_TIM_IRQHandler+0x16c>
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f06f 0201 	mvn.w	r2, #1
 8006e24:	611a      	str	r2, [r3, #16]
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f7fa f87e 	bl	8000f28 <HAL_TIM_PeriodElapsedCallback>
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d00c      	beq.n	8006e50 <HAL_TIM_IRQHandler+0x190>
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d007      	beq.n	8006e50 <HAL_TIM_IRQHandler+0x190>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006e48:	611a      	str	r2, [r3, #16]
 8006e4a:	6878      	ldr	r0, [r7, #4]
 8006e4c:	f000 fae4 	bl	8007418 <HAL_TIMEx_BreakCallback>
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d00c      	beq.n	8006e74 <HAL_TIM_IRQHandler+0x1b4>
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d007      	beq.n	8006e74 <HAL_TIM_IRQHandler+0x1b4>
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006e6c:	611a      	str	r2, [r3, #16]
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f000 f8fb 	bl	800706a <HAL_TIM_TriggerCallback>
 8006e74:	68bb      	ldr	r3, [r7, #8]
 8006e76:	f003 0320 	and.w	r3, r3, #32
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00c      	beq.n	8006e98 <HAL_TIM_IRQHandler+0x1d8>
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	f003 0320 	and.w	r3, r3, #32
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d007      	beq.n	8006e98 <HAL_TIM_IRQHandler+0x1d8>
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f06f 0220 	mvn.w	r2, #32
 8006e90:	611a      	str	r2, [r3, #16]
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 fab6 	bl	8007404 <HAL_TIMEx_CommutCallback>
 8006e98:	bf00      	nop
 8006e9a:	3710      	adds	r7, #16
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <HAL_TIM_ConfigClockSource>:
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b084      	sub	sp, #16
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	6078      	str	r0, [r7, #4]
 8006ea8:	6039      	str	r1, [r7, #0]
 8006eaa:	2300      	movs	r3, #0
 8006eac:	73fb      	strb	r3, [r7, #15]
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006eb4:	2b01      	cmp	r3, #1
 8006eb6:	d101      	bne.n	8006ebc <HAL_TIM_ConfigClockSource+0x1c>
 8006eb8:	2302      	movs	r3, #2
 8006eba:	e0b4      	b.n	8007026 <HAL_TIM_ConfigClockSource+0x186>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2202      	movs	r2, #2
 8006ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	60bb      	str	r3, [r7, #8]
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006eda:	60bb      	str	r3, [r7, #8]
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006ee2:	60bb      	str	r3, [r7, #8]
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	68ba      	ldr	r2, [r7, #8]
 8006eea:	609a      	str	r2, [r3, #8]
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006ef4:	d03e      	beq.n	8006f74 <HAL_TIM_ConfigClockSource+0xd4>
 8006ef6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006efa:	f200 8087 	bhi.w	800700c <HAL_TIM_ConfigClockSource+0x16c>
 8006efe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f02:	f000 8086 	beq.w	8007012 <HAL_TIM_ConfigClockSource+0x172>
 8006f06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f0a:	d87f      	bhi.n	800700c <HAL_TIM_ConfigClockSource+0x16c>
 8006f0c:	2b70      	cmp	r3, #112	@ 0x70
 8006f0e:	d01a      	beq.n	8006f46 <HAL_TIM_ConfigClockSource+0xa6>
 8006f10:	2b70      	cmp	r3, #112	@ 0x70
 8006f12:	d87b      	bhi.n	800700c <HAL_TIM_ConfigClockSource+0x16c>
 8006f14:	2b60      	cmp	r3, #96	@ 0x60
 8006f16:	d050      	beq.n	8006fba <HAL_TIM_ConfigClockSource+0x11a>
 8006f18:	2b60      	cmp	r3, #96	@ 0x60
 8006f1a:	d877      	bhi.n	800700c <HAL_TIM_ConfigClockSource+0x16c>
 8006f1c:	2b50      	cmp	r3, #80	@ 0x50
 8006f1e:	d03c      	beq.n	8006f9a <HAL_TIM_ConfigClockSource+0xfa>
 8006f20:	2b50      	cmp	r3, #80	@ 0x50
 8006f22:	d873      	bhi.n	800700c <HAL_TIM_ConfigClockSource+0x16c>
 8006f24:	2b40      	cmp	r3, #64	@ 0x40
 8006f26:	d058      	beq.n	8006fda <HAL_TIM_ConfigClockSource+0x13a>
 8006f28:	2b40      	cmp	r3, #64	@ 0x40
 8006f2a:	d86f      	bhi.n	800700c <HAL_TIM_ConfigClockSource+0x16c>
 8006f2c:	2b30      	cmp	r3, #48	@ 0x30
 8006f2e:	d064      	beq.n	8006ffa <HAL_TIM_ConfigClockSource+0x15a>
 8006f30:	2b30      	cmp	r3, #48	@ 0x30
 8006f32:	d86b      	bhi.n	800700c <HAL_TIM_ConfigClockSource+0x16c>
 8006f34:	2b20      	cmp	r3, #32
 8006f36:	d060      	beq.n	8006ffa <HAL_TIM_ConfigClockSource+0x15a>
 8006f38:	2b20      	cmp	r3, #32
 8006f3a:	d867      	bhi.n	800700c <HAL_TIM_ConfigClockSource+0x16c>
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d05c      	beq.n	8006ffa <HAL_TIM_ConfigClockSource+0x15a>
 8006f40:	2b10      	cmp	r3, #16
 8006f42:	d05a      	beq.n	8006ffa <HAL_TIM_ConfigClockSource+0x15a>
 8006f44:	e062      	b.n	800700c <HAL_TIM_ConfigClockSource+0x16c>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	6818      	ldr	r0, [r3, #0]
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	6899      	ldr	r1, [r3, #8]
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	685a      	ldr	r2, [r3, #4]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	f000 f9b9 	bl	80072cc <TIM_ETR_SetConfig>
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	60bb      	str	r3, [r7, #8]
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006f68:	60bb      	str	r3, [r7, #8]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	68ba      	ldr	r2, [r7, #8]
 8006f70:	609a      	str	r2, [r3, #8]
 8006f72:	e04f      	b.n	8007014 <HAL_TIM_ConfigClockSource+0x174>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	6818      	ldr	r0, [r3, #0]
 8006f78:	683b      	ldr	r3, [r7, #0]
 8006f7a:	6899      	ldr	r1, [r3, #8]
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	685a      	ldr	r2, [r3, #4]
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	68db      	ldr	r3, [r3, #12]
 8006f84:	f000 f9a2 	bl	80072cc <TIM_ETR_SetConfig>
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	689a      	ldr	r2, [r3, #8]
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006f96:	609a      	str	r2, [r3, #8]
 8006f98:	e03c      	b.n	8007014 <HAL_TIM_ConfigClockSource+0x174>
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6818      	ldr	r0, [r3, #0]
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	6859      	ldr	r1, [r3, #4]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	68db      	ldr	r3, [r3, #12]
 8006fa6:	461a      	mov	r2, r3
 8006fa8:	f000 f916 	bl	80071d8 <TIM_TI1_ConfigInputStage>
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	2150      	movs	r1, #80	@ 0x50
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f000 f96f 	bl	8007296 <TIM_ITRx_SetConfig>
 8006fb8:	e02c      	b.n	8007014 <HAL_TIM_ConfigClockSource+0x174>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6818      	ldr	r0, [r3, #0]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	6859      	ldr	r1, [r3, #4]
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	461a      	mov	r2, r3
 8006fc8:	f000 f935 	bl	8007236 <TIM_TI2_ConfigInputStage>
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	2160      	movs	r1, #96	@ 0x60
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	f000 f95f 	bl	8007296 <TIM_ITRx_SetConfig>
 8006fd8:	e01c      	b.n	8007014 <HAL_TIM_ConfigClockSource+0x174>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6818      	ldr	r0, [r3, #0]
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	6859      	ldr	r1, [r3, #4]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	68db      	ldr	r3, [r3, #12]
 8006fe6:	461a      	mov	r2, r3
 8006fe8:	f000 f8f6 	bl	80071d8 <TIM_TI1_ConfigInputStage>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2140      	movs	r1, #64	@ 0x40
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	f000 f94f 	bl	8007296 <TIM_ITRx_SetConfig>
 8006ff8:	e00c      	b.n	8007014 <HAL_TIM_ConfigClockSource+0x174>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681a      	ldr	r2, [r3, #0]
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4619      	mov	r1, r3
 8007004:	4610      	mov	r0, r2
 8007006:	f000 f946 	bl	8007296 <TIM_ITRx_SetConfig>
 800700a:	e003      	b.n	8007014 <HAL_TIM_ConfigClockSource+0x174>
 800700c:	2301      	movs	r3, #1
 800700e:	73fb      	strb	r3, [r7, #15]
 8007010:	e000      	b.n	8007014 <HAL_TIM_ConfigClockSource+0x174>
 8007012:	bf00      	nop
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2201      	movs	r2, #1
 8007018:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2200      	movs	r2, #0
 8007020:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8007024:	7bfb      	ldrb	r3, [r7, #15]
 8007026:	4618      	mov	r0, r3
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}

0800702e <HAL_TIM_OC_DelayElapsedCallback>:
 800702e:	b480      	push	{r7}
 8007030:	b083      	sub	sp, #12
 8007032:	af00      	add	r7, sp, #0
 8007034:	6078      	str	r0, [r7, #4]
 8007036:	bf00      	nop
 8007038:	370c      	adds	r7, #12
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr

08007042 <HAL_TIM_IC_CaptureCallback>:
 8007042:	b480      	push	{r7}
 8007044:	b083      	sub	sp, #12
 8007046:	af00      	add	r7, sp, #0
 8007048:	6078      	str	r0, [r7, #4]
 800704a:	bf00      	nop
 800704c:	370c      	adds	r7, #12
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr

08007056 <HAL_TIM_PWM_PulseFinishedCallback>:
 8007056:	b480      	push	{r7}
 8007058:	b083      	sub	sp, #12
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
 800705e:	bf00      	nop
 8007060:	370c      	adds	r7, #12
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr

0800706a <HAL_TIM_TriggerCallback>:
 800706a:	b480      	push	{r7}
 800706c:	b083      	sub	sp, #12
 800706e:	af00      	add	r7, sp, #0
 8007070:	6078      	str	r0, [r7, #4]
 8007072:	bf00      	nop
 8007074:	370c      	adds	r7, #12
 8007076:	46bd      	mov	sp, r7
 8007078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707c:	4770      	bx	lr
	...

08007080 <TIM_Base_SetConfig>:
 8007080:	b480      	push	{r7}
 8007082:	b085      	sub	sp, #20
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
 8007088:	6039      	str	r1, [r7, #0]
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	60fb      	str	r3, [r7, #12]
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a46      	ldr	r2, [pc, #280]	@ (80071ac <TIM_Base_SetConfig+0x12c>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d013      	beq.n	80070c0 <TIM_Base_SetConfig+0x40>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800709e:	d00f      	beq.n	80070c0 <TIM_Base_SetConfig+0x40>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a43      	ldr	r2, [pc, #268]	@ (80071b0 <TIM_Base_SetConfig+0x130>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d00b      	beq.n	80070c0 <TIM_Base_SetConfig+0x40>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4a42      	ldr	r2, [pc, #264]	@ (80071b4 <TIM_Base_SetConfig+0x134>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d007      	beq.n	80070c0 <TIM_Base_SetConfig+0x40>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	4a41      	ldr	r2, [pc, #260]	@ (80071b8 <TIM_Base_SetConfig+0x138>)
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d003      	beq.n	80070c0 <TIM_Base_SetConfig+0x40>
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	4a40      	ldr	r2, [pc, #256]	@ (80071bc <TIM_Base_SetConfig+0x13c>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	d108      	bne.n	80070d2 <TIM_Base_SetConfig+0x52>
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070c6:	60fb      	str	r3, [r7, #12]
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	685b      	ldr	r3, [r3, #4]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	4313      	orrs	r3, r2
 80070d0:	60fb      	str	r3, [r7, #12]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a35      	ldr	r2, [pc, #212]	@ (80071ac <TIM_Base_SetConfig+0x12c>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d02b      	beq.n	8007132 <TIM_Base_SetConfig+0xb2>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070e0:	d027      	beq.n	8007132 <TIM_Base_SetConfig+0xb2>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a32      	ldr	r2, [pc, #200]	@ (80071b0 <TIM_Base_SetConfig+0x130>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d023      	beq.n	8007132 <TIM_Base_SetConfig+0xb2>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a31      	ldr	r2, [pc, #196]	@ (80071b4 <TIM_Base_SetConfig+0x134>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d01f      	beq.n	8007132 <TIM_Base_SetConfig+0xb2>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a30      	ldr	r2, [pc, #192]	@ (80071b8 <TIM_Base_SetConfig+0x138>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d01b      	beq.n	8007132 <TIM_Base_SetConfig+0xb2>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a2f      	ldr	r2, [pc, #188]	@ (80071bc <TIM_Base_SetConfig+0x13c>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d017      	beq.n	8007132 <TIM_Base_SetConfig+0xb2>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a2e      	ldr	r2, [pc, #184]	@ (80071c0 <TIM_Base_SetConfig+0x140>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d013      	beq.n	8007132 <TIM_Base_SetConfig+0xb2>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a2d      	ldr	r2, [pc, #180]	@ (80071c4 <TIM_Base_SetConfig+0x144>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d00f      	beq.n	8007132 <TIM_Base_SetConfig+0xb2>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a2c      	ldr	r2, [pc, #176]	@ (80071c8 <TIM_Base_SetConfig+0x148>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d00b      	beq.n	8007132 <TIM_Base_SetConfig+0xb2>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a2b      	ldr	r2, [pc, #172]	@ (80071cc <TIM_Base_SetConfig+0x14c>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d007      	beq.n	8007132 <TIM_Base_SetConfig+0xb2>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a2a      	ldr	r2, [pc, #168]	@ (80071d0 <TIM_Base_SetConfig+0x150>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d003      	beq.n	8007132 <TIM_Base_SetConfig+0xb2>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a29      	ldr	r2, [pc, #164]	@ (80071d4 <TIM_Base_SetConfig+0x154>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d108      	bne.n	8007144 <TIM_Base_SetConfig+0xc4>
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007138:	60fb      	str	r3, [r7, #12]
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	68db      	ldr	r3, [r3, #12]
 800713e:	68fa      	ldr	r2, [r7, #12]
 8007140:	4313      	orrs	r3, r2
 8007142:	60fb      	str	r3, [r7, #12]
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800714a:	683b      	ldr	r3, [r7, #0]
 800714c:	695b      	ldr	r3, [r3, #20]
 800714e:	4313      	orrs	r3, r2
 8007150:	60fb      	str	r3, [r7, #12]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	601a      	str	r2, [r3, #0]
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	689a      	ldr	r2, [r3, #8]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	681a      	ldr	r2, [r3, #0]
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	629a      	str	r2, [r3, #40]	@ 0x28
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	4a10      	ldr	r2, [pc, #64]	@ (80071ac <TIM_Base_SetConfig+0x12c>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d003      	beq.n	8007178 <TIM_Base_SetConfig+0xf8>
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	4a12      	ldr	r2, [pc, #72]	@ (80071bc <TIM_Base_SetConfig+0x13c>)
 8007174:	4293      	cmp	r3, r2
 8007176:	d103      	bne.n	8007180 <TIM_Base_SetConfig+0x100>
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	691a      	ldr	r2, [r3, #16]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	615a      	str	r2, [r3, #20]
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	f003 0301 	and.w	r3, r3, #1
 800718e:	2b01      	cmp	r3, #1
 8007190:	d105      	bne.n	800719e <TIM_Base_SetConfig+0x11e>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	691b      	ldr	r3, [r3, #16]
 8007196:	f023 0201 	bic.w	r2, r3, #1
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	611a      	str	r2, [r3, #16]
 800719e:	bf00      	nop
 80071a0:	3714      	adds	r7, #20
 80071a2:	46bd      	mov	sp, r7
 80071a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a8:	4770      	bx	lr
 80071aa:	bf00      	nop
 80071ac:	40010000 	.word	0x40010000
 80071b0:	40000400 	.word	0x40000400
 80071b4:	40000800 	.word	0x40000800
 80071b8:	40000c00 	.word	0x40000c00
 80071bc:	40010400 	.word	0x40010400
 80071c0:	40014000 	.word	0x40014000
 80071c4:	40014400 	.word	0x40014400
 80071c8:	40014800 	.word	0x40014800
 80071cc:	40001800 	.word	0x40001800
 80071d0:	40001c00 	.word	0x40001c00
 80071d4:	40002000 	.word	0x40002000

080071d8 <TIM_TI1_ConfigInputStage>:
 80071d8:	b480      	push	{r7}
 80071da:	b087      	sub	sp, #28
 80071dc:	af00      	add	r7, sp, #0
 80071de:	60f8      	str	r0, [r7, #12]
 80071e0:	60b9      	str	r1, [r7, #8]
 80071e2:	607a      	str	r2, [r7, #4]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6a1b      	ldr	r3, [r3, #32]
 80071e8:	617b      	str	r3, [r7, #20]
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	6a1b      	ldr	r3, [r3, #32]
 80071ee:	f023 0201 	bic.w	r2, r3, #1
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	621a      	str	r2, [r3, #32]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	699b      	ldr	r3, [r3, #24]
 80071fa:	613b      	str	r3, [r7, #16]
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8007202:	613b      	str	r3, [r7, #16]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	011b      	lsls	r3, r3, #4
 8007208:	693a      	ldr	r2, [r7, #16]
 800720a:	4313      	orrs	r3, r2
 800720c:	613b      	str	r3, [r7, #16]
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	f023 030a 	bic.w	r3, r3, #10
 8007214:	617b      	str	r3, [r7, #20]
 8007216:	697a      	ldr	r2, [r7, #20]
 8007218:	68bb      	ldr	r3, [r7, #8]
 800721a:	4313      	orrs	r3, r2
 800721c:	617b      	str	r3, [r7, #20]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	693a      	ldr	r2, [r7, #16]
 8007222:	619a      	str	r2, [r3, #24]
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	697a      	ldr	r2, [r7, #20]
 8007228:	621a      	str	r2, [r3, #32]
 800722a:	bf00      	nop
 800722c:	371c      	adds	r7, #28
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr

08007236 <TIM_TI2_ConfigInputStage>:
 8007236:	b480      	push	{r7}
 8007238:	b087      	sub	sp, #28
 800723a:	af00      	add	r7, sp, #0
 800723c:	60f8      	str	r0, [r7, #12]
 800723e:	60b9      	str	r1, [r7, #8]
 8007240:	607a      	str	r2, [r7, #4]
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	617b      	str	r3, [r7, #20]
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	6a1b      	ldr	r3, [r3, #32]
 800724c:	f023 0210 	bic.w	r2, r3, #16
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	621a      	str	r2, [r3, #32]
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	699b      	ldr	r3, [r3, #24]
 8007258:	613b      	str	r3, [r7, #16]
 800725a:	693b      	ldr	r3, [r7, #16]
 800725c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007260:	613b      	str	r3, [r7, #16]
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	031b      	lsls	r3, r3, #12
 8007266:	693a      	ldr	r2, [r7, #16]
 8007268:	4313      	orrs	r3, r2
 800726a:	613b      	str	r3, [r7, #16]
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007272:	617b      	str	r3, [r7, #20]
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	011b      	lsls	r3, r3, #4
 8007278:	697a      	ldr	r2, [r7, #20]
 800727a:	4313      	orrs	r3, r2
 800727c:	617b      	str	r3, [r7, #20]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	693a      	ldr	r2, [r7, #16]
 8007282:	619a      	str	r2, [r3, #24]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	697a      	ldr	r2, [r7, #20]
 8007288:	621a      	str	r2, [r3, #32]
 800728a:	bf00      	nop
 800728c:	371c      	adds	r7, #28
 800728e:	46bd      	mov	sp, r7
 8007290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007294:	4770      	bx	lr

08007296 <TIM_ITRx_SetConfig>:
 8007296:	b480      	push	{r7}
 8007298:	b085      	sub	sp, #20
 800729a:	af00      	add	r7, sp, #0
 800729c:	6078      	str	r0, [r7, #4]
 800729e:	6039      	str	r1, [r7, #0]
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	689b      	ldr	r3, [r3, #8]
 80072a4:	60fb      	str	r3, [r7, #12]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80072ac:	60fb      	str	r3, [r7, #12]
 80072ae:	683a      	ldr	r2, [r7, #0]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	4313      	orrs	r3, r2
 80072b4:	f043 0307 	orr.w	r3, r3, #7
 80072b8:	60fb      	str	r3, [r7, #12]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	68fa      	ldr	r2, [r7, #12]
 80072be:	609a      	str	r2, [r3, #8]
 80072c0:	bf00      	nop
 80072c2:	3714      	adds	r7, #20
 80072c4:	46bd      	mov	sp, r7
 80072c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ca:	4770      	bx	lr

080072cc <TIM_ETR_SetConfig>:
 80072cc:	b480      	push	{r7}
 80072ce:	b087      	sub	sp, #28
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	60f8      	str	r0, [r7, #12]
 80072d4:	60b9      	str	r1, [r7, #8]
 80072d6:	607a      	str	r2, [r7, #4]
 80072d8:	603b      	str	r3, [r7, #0]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	617b      	str	r3, [r7, #20]
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80072e6:	617b      	str	r3, [r7, #20]
 80072e8:	683b      	ldr	r3, [r7, #0]
 80072ea:	021a      	lsls	r2, r3, #8
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	431a      	orrs	r2, r3
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	4313      	orrs	r3, r2
 80072f4:	697a      	ldr	r2, [r7, #20]
 80072f6:	4313      	orrs	r3, r2
 80072f8:	617b      	str	r3, [r7, #20]
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	697a      	ldr	r2, [r7, #20]
 80072fe:	609a      	str	r2, [r3, #8]
 8007300:	bf00      	nop
 8007302:	371c      	adds	r7, #28
 8007304:	46bd      	mov	sp, r7
 8007306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730a:	4770      	bx	lr

0800730c <HAL_TIMEx_MasterConfigSynchronization>:
 800730c:	b480      	push	{r7}
 800730e:	b085      	sub	sp, #20
 8007310:	af00      	add	r7, sp, #0
 8007312:	6078      	str	r0, [r7, #4]
 8007314:	6039      	str	r1, [r7, #0]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800731c:	2b01      	cmp	r3, #1
 800731e:	d101      	bne.n	8007324 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007320:	2302      	movs	r3, #2
 8007322:	e05a      	b.n	80073da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2201      	movs	r2, #1
 8007328:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2202      	movs	r2, #2
 8007330:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	60fb      	str	r3, [r7, #12]
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	689b      	ldr	r3, [r3, #8]
 8007342:	60bb      	str	r3, [r7, #8]
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800734a:	60fb      	str	r3, [r7, #12]
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68fa      	ldr	r2, [r7, #12]
 8007352:	4313      	orrs	r3, r2
 8007354:	60fb      	str	r3, [r7, #12]
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	605a      	str	r2, [r3, #4]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a21      	ldr	r2, [pc, #132]	@ (80073e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d022      	beq.n	80073ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007370:	d01d      	beq.n	80073ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a1d      	ldr	r2, [pc, #116]	@ (80073ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007378:	4293      	cmp	r3, r2
 800737a:	d018      	beq.n	80073ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a1b      	ldr	r2, [pc, #108]	@ (80073f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d013      	beq.n	80073ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	4a1a      	ldr	r2, [pc, #104]	@ (80073f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800738c:	4293      	cmp	r3, r2
 800738e:	d00e      	beq.n	80073ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a18      	ldr	r2, [pc, #96]	@ (80073f8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d009      	beq.n	80073ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	4a17      	ldr	r2, [pc, #92]	@ (80073fc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80073a0:	4293      	cmp	r3, r2
 80073a2:	d004      	beq.n	80073ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a15      	ldr	r2, [pc, #84]	@ (8007400 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d10c      	bne.n	80073c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 80073ae:	68bb      	ldr	r3, [r7, #8]
 80073b0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073b4:	60bb      	str	r3, [r7, #8]
 80073b6:	683b      	ldr	r3, [r7, #0]
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	68ba      	ldr	r2, [r7, #8]
 80073bc:	4313      	orrs	r3, r2
 80073be:	60bb      	str	r3, [r7, #8]
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68ba      	ldr	r2, [r7, #8]
 80073c6:	609a      	str	r2, [r3, #8]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2200      	movs	r2, #0
 80073d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80073d8:	2300      	movs	r3, #0
 80073da:	4618      	mov	r0, r3
 80073dc:	3714      	adds	r7, #20
 80073de:	46bd      	mov	sp, r7
 80073e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e4:	4770      	bx	lr
 80073e6:	bf00      	nop
 80073e8:	40010000 	.word	0x40010000
 80073ec:	40000400 	.word	0x40000400
 80073f0:	40000800 	.word	0x40000800
 80073f4:	40000c00 	.word	0x40000c00
 80073f8:	40010400 	.word	0x40010400
 80073fc:	40014000 	.word	0x40014000
 8007400:	40001800 	.word	0x40001800

08007404 <HAL_TIMEx_CommutCallback>:
 8007404:	b480      	push	{r7}
 8007406:	b083      	sub	sp, #12
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
 800740c:	bf00      	nop
 800740e:	370c      	adds	r7, #12
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr

08007418 <HAL_TIMEx_BreakCallback>:
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
 8007420:	bf00      	nop
 8007422:	370c      	adds	r7, #12
 8007424:	46bd      	mov	sp, r7
 8007426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742a:	4770      	bx	lr

0800742c <HAL_UART_Init>:
 800742c:	b580      	push	{r7, lr}
 800742e:	b082      	sub	sp, #8
 8007430:	af00      	add	r7, sp, #0
 8007432:	6078      	str	r0, [r7, #4]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2b00      	cmp	r3, #0
 8007438:	d101      	bne.n	800743e <HAL_UART_Init+0x12>
 800743a:	2301      	movs	r3, #1
 800743c:	e042      	b.n	80074c4 <HAL_UART_Init+0x98>
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007444:	b2db      	uxtb	r3, r3
 8007446:	2b00      	cmp	r3, #0
 8007448:	d106      	bne.n	8007458 <HAL_UART_Init+0x2c>
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f7f9 fffe 	bl	8001454 <HAL_UART_MspInit>
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	2224      	movs	r2, #36	@ 0x24
 800745c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	68da      	ldr	r2, [r3, #12]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800746e:	60da      	str	r2, [r3, #12]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f973 	bl	800775c <UART_SetConfig>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	691a      	ldr	r2, [r3, #16]
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007484:	611a      	str	r2, [r3, #16]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	695a      	ldr	r2, [r3, #20]
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007494:	615a      	str	r2, [r3, #20]
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	68da      	ldr	r2, [r3, #12]
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80074a4:	60da      	str	r2, [r3, #12]
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	2200      	movs	r2, #0
 80074aa:	645a      	str	r2, [r3, #68]	@ 0x44
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2220      	movs	r2, #32
 80074b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2220      	movs	r2, #32
 80074b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80074c2:	2300      	movs	r3, #0
 80074c4:	4618      	mov	r0, r3
 80074c6:	3708      	adds	r7, #8
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}

080074cc <HAL_UART_Transmit>:
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b08a      	sub	sp, #40	@ 0x28
 80074d0:	af02      	add	r7, sp, #8
 80074d2:	60f8      	str	r0, [r7, #12]
 80074d4:	60b9      	str	r1, [r7, #8]
 80074d6:	603b      	str	r3, [r7, #0]
 80074d8:	4613      	mov	r3, r2
 80074da:	80fb      	strh	r3, [r7, #6]
 80074dc:	2300      	movs	r3, #0
 80074de:	617b      	str	r3, [r7, #20]
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074e6:	b2db      	uxtb	r3, r3
 80074e8:	2b20      	cmp	r3, #32
 80074ea:	d175      	bne.n	80075d8 <HAL_UART_Transmit+0x10c>
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d002      	beq.n	80074f8 <HAL_UART_Transmit+0x2c>
 80074f2:	88fb      	ldrh	r3, [r7, #6]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d101      	bne.n	80074fc <HAL_UART_Transmit+0x30>
 80074f8:	2301      	movs	r3, #1
 80074fa:	e06e      	b.n	80075da <HAL_UART_Transmit+0x10e>
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2200      	movs	r2, #0
 8007500:	645a      	str	r2, [r3, #68]	@ 0x44
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2221      	movs	r2, #33	@ 0x21
 8007506:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800750a:	f7fa fa0d 	bl	8001928 <HAL_GetTick>
 800750e:	6178      	str	r0, [r7, #20]
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	88fa      	ldrh	r2, [r7, #6]
 8007514:	849a      	strh	r2, [r3, #36]	@ 0x24
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	88fa      	ldrh	r2, [r7, #6]
 800751a:	84da      	strh	r2, [r3, #38]	@ 0x26
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007524:	d108      	bne.n	8007538 <HAL_UART_Transmit+0x6c>
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	691b      	ldr	r3, [r3, #16]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d104      	bne.n	8007538 <HAL_UART_Transmit+0x6c>
 800752e:	2300      	movs	r3, #0
 8007530:	61fb      	str	r3, [r7, #28]
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	61bb      	str	r3, [r7, #24]
 8007536:	e003      	b.n	8007540 <HAL_UART_Transmit+0x74>
 8007538:	68bb      	ldr	r3, [r7, #8]
 800753a:	61fb      	str	r3, [r7, #28]
 800753c:	2300      	movs	r3, #0
 800753e:	61bb      	str	r3, [r7, #24]
 8007540:	e02e      	b.n	80075a0 <HAL_UART_Transmit+0xd4>
 8007542:	683b      	ldr	r3, [r7, #0]
 8007544:	9300      	str	r3, [sp, #0]
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	2200      	movs	r2, #0
 800754a:	2180      	movs	r1, #128	@ 0x80
 800754c:	68f8      	ldr	r0, [r7, #12]
 800754e:	f000 f848 	bl	80075e2 <UART_WaitOnFlagUntilTimeout>
 8007552:	4603      	mov	r3, r0
 8007554:	2b00      	cmp	r3, #0
 8007556:	d005      	beq.n	8007564 <HAL_UART_Transmit+0x98>
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2220      	movs	r2, #32
 800755c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007560:	2303      	movs	r3, #3
 8007562:	e03a      	b.n	80075da <HAL_UART_Transmit+0x10e>
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	2b00      	cmp	r3, #0
 8007568:	d10b      	bne.n	8007582 <HAL_UART_Transmit+0xb6>
 800756a:	69bb      	ldr	r3, [r7, #24]
 800756c:	881b      	ldrh	r3, [r3, #0]
 800756e:	461a      	mov	r2, r3
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007578:	605a      	str	r2, [r3, #4]
 800757a:	69bb      	ldr	r3, [r7, #24]
 800757c:	3302      	adds	r3, #2
 800757e:	61bb      	str	r3, [r7, #24]
 8007580:	e007      	b.n	8007592 <HAL_UART_Transmit+0xc6>
 8007582:	69fb      	ldr	r3, [r7, #28]
 8007584:	781a      	ldrb	r2, [r3, #0]
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	605a      	str	r2, [r3, #4]
 800758c:	69fb      	ldr	r3, [r7, #28]
 800758e:	3301      	adds	r3, #1
 8007590:	61fb      	str	r3, [r7, #28]
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007596:	b29b      	uxth	r3, r3
 8007598:	3b01      	subs	r3, #1
 800759a:	b29a      	uxth	r2, r3
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	84da      	strh	r2, [r3, #38]	@ 0x26
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80075a4:	b29b      	uxth	r3, r3
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d1cb      	bne.n	8007542 <HAL_UART_Transmit+0x76>
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	9300      	str	r3, [sp, #0]
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	2200      	movs	r2, #0
 80075b2:	2140      	movs	r1, #64	@ 0x40
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f000 f814 	bl	80075e2 <UART_WaitOnFlagUntilTimeout>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d005      	beq.n	80075cc <HAL_UART_Transmit+0x100>
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2220      	movs	r2, #32
 80075c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80075c8:	2303      	movs	r3, #3
 80075ca:	e006      	b.n	80075da <HAL_UART_Transmit+0x10e>
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2220      	movs	r2, #32
 80075d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80075d4:	2300      	movs	r3, #0
 80075d6:	e000      	b.n	80075da <HAL_UART_Transmit+0x10e>
 80075d8:	2302      	movs	r3, #2
 80075da:	4618      	mov	r0, r3
 80075dc:	3720      	adds	r7, #32
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <UART_WaitOnFlagUntilTimeout>:
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b086      	sub	sp, #24
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	60f8      	str	r0, [r7, #12]
 80075ea:	60b9      	str	r1, [r7, #8]
 80075ec:	603b      	str	r3, [r7, #0]
 80075ee:	4613      	mov	r3, r2
 80075f0:	71fb      	strb	r3, [r7, #7]
 80075f2:	e03b      	b.n	800766c <UART_WaitOnFlagUntilTimeout+0x8a>
 80075f4:	6a3b      	ldr	r3, [r7, #32]
 80075f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075fa:	d037      	beq.n	800766c <UART_WaitOnFlagUntilTimeout+0x8a>
 80075fc:	f7fa f994 	bl	8001928 <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	6a3a      	ldr	r2, [r7, #32]
 8007608:	429a      	cmp	r2, r3
 800760a:	d302      	bcc.n	8007612 <UART_WaitOnFlagUntilTimeout+0x30>
 800760c:	6a3b      	ldr	r3, [r7, #32]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d101      	bne.n	8007616 <UART_WaitOnFlagUntilTimeout+0x34>
 8007612:	2303      	movs	r3, #3
 8007614:	e03a      	b.n	800768c <UART_WaitOnFlagUntilTimeout+0xaa>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	68db      	ldr	r3, [r3, #12]
 800761c:	f003 0304 	and.w	r3, r3, #4
 8007620:	2b00      	cmp	r3, #0
 8007622:	d023      	beq.n	800766c <UART_WaitOnFlagUntilTimeout+0x8a>
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	2b80      	cmp	r3, #128	@ 0x80
 8007628:	d020      	beq.n	800766c <UART_WaitOnFlagUntilTimeout+0x8a>
 800762a:	68bb      	ldr	r3, [r7, #8]
 800762c:	2b40      	cmp	r3, #64	@ 0x40
 800762e:	d01d      	beq.n	800766c <UART_WaitOnFlagUntilTimeout+0x8a>
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	f003 0308 	and.w	r3, r3, #8
 800763a:	2b08      	cmp	r3, #8
 800763c:	d116      	bne.n	800766c <UART_WaitOnFlagUntilTimeout+0x8a>
 800763e:	2300      	movs	r3, #0
 8007640:	617b      	str	r3, [r7, #20]
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	617b      	str	r3, [r7, #20]
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	617b      	str	r3, [r7, #20]
 8007652:	697b      	ldr	r3, [r7, #20]
 8007654:	68f8      	ldr	r0, [r7, #12]
 8007656:	f000 f81d 	bl	8007694 <UART_EndRxTransfer>
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	2208      	movs	r2, #8
 800765e:	645a      	str	r2, [r3, #68]	@ 0x44
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	2200      	movs	r2, #0
 8007664:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007668:	2301      	movs	r3, #1
 800766a:	e00f      	b.n	800768c <UART_WaitOnFlagUntilTimeout+0xaa>
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	4013      	ands	r3, r2
 8007676:	68ba      	ldr	r2, [r7, #8]
 8007678:	429a      	cmp	r2, r3
 800767a:	bf0c      	ite	eq
 800767c:	2301      	moveq	r3, #1
 800767e:	2300      	movne	r3, #0
 8007680:	b2db      	uxtb	r3, r3
 8007682:	461a      	mov	r2, r3
 8007684:	79fb      	ldrb	r3, [r7, #7]
 8007686:	429a      	cmp	r2, r3
 8007688:	d0b4      	beq.n	80075f4 <UART_WaitOnFlagUntilTimeout+0x12>
 800768a:	2300      	movs	r3, #0
 800768c:	4618      	mov	r0, r3
 800768e:	3718      	adds	r7, #24
 8007690:	46bd      	mov	sp, r7
 8007692:	bd80      	pop	{r7, pc}

08007694 <UART_EndRxTransfer>:
 8007694:	b480      	push	{r7}
 8007696:	b095      	sub	sp, #84	@ 0x54
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	681b      	ldr	r3, [r3, #0]
 80076a0:	330c      	adds	r3, #12
 80076a2:	637b      	str	r3, [r7, #52]	@ 0x34
 80076a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80076a6:	e853 3f00 	ldrex	r3, [r3]
 80076aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80076ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076ae:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80076b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	330c      	adds	r3, #12
 80076ba:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80076bc:	643a      	str	r2, [r7, #64]	@ 0x40
 80076be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80076c0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80076c2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80076c4:	e841 2300 	strex	r3, r2, [r1]
 80076c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80076ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d1e5      	bne.n	800769c <UART_EndRxTransfer+0x8>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	3314      	adds	r3, #20
 80076d6:	623b      	str	r3, [r7, #32]
 80076d8:	6a3b      	ldr	r3, [r7, #32]
 80076da:	e853 3f00 	ldrex	r3, [r3]
 80076de:	61fb      	str	r3, [r7, #28]
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	f023 0301 	bic.w	r3, r3, #1
 80076e6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	3314      	adds	r3, #20
 80076ee:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80076f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80076f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80076f4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80076f6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80076f8:	e841 2300 	strex	r3, r2, [r1]
 80076fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80076fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007700:	2b00      	cmp	r3, #0
 8007702:	d1e5      	bne.n	80076d0 <UART_EndRxTransfer+0x3c>
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007708:	2b01      	cmp	r3, #1
 800770a:	d119      	bne.n	8007740 <UART_EndRxTransfer+0xac>
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	330c      	adds	r3, #12
 8007712:	60fb      	str	r3, [r7, #12]
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	e853 3f00 	ldrex	r3, [r3]
 800771a:	60bb      	str	r3, [r7, #8]
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	f023 0310 	bic.w	r3, r3, #16
 8007722:	647b      	str	r3, [r7, #68]	@ 0x44
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	330c      	adds	r3, #12
 800772a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800772c:	61ba      	str	r2, [r7, #24]
 800772e:	617b      	str	r3, [r7, #20]
 8007730:	6979      	ldr	r1, [r7, #20]
 8007732:	69ba      	ldr	r2, [r7, #24]
 8007734:	e841 2300 	strex	r3, r2, [r1]
 8007738:	613b      	str	r3, [r7, #16]
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d1e5      	bne.n	800770c <UART_EndRxTransfer+0x78>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2220      	movs	r2, #32
 8007744:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2200      	movs	r2, #0
 800774c:	631a      	str	r2, [r3, #48]	@ 0x30
 800774e:	bf00      	nop
 8007750:	3754      	adds	r7, #84	@ 0x54
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr
	...

0800775c <UART_SetConfig>:
 800775c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007760:	b0c0      	sub	sp, #256	@ 0x100
 8007762:	af00      	add	r7, sp, #0
 8007764:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
 8007768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007778:	68d9      	ldr	r1, [r3, #12]
 800777a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800777e:	681a      	ldr	r2, [r3, #0]
 8007780:	ea40 0301 	orr.w	r3, r0, r1
 8007784:	6113      	str	r3, [r2, #16]
 8007786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800778a:	689a      	ldr	r2, [r3, #8]
 800778c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	431a      	orrs	r2, r3
 8007794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007798:	695b      	ldr	r3, [r3, #20]
 800779a:	431a      	orrs	r2, r3
 800779c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077a0:	69db      	ldr	r3, [r3, #28]
 80077a2:	4313      	orrs	r3, r2
 80077a4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80077a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80077b4:	f021 010c 	bic.w	r1, r1, #12
 80077b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80077c2:	430b      	orrs	r3, r1
 80077c4:	60d3      	str	r3, [r2, #12]
 80077c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	695b      	ldr	r3, [r3, #20]
 80077ce:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80077d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077d6:	6999      	ldr	r1, [r3, #24]
 80077d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	ea40 0301 	orr.w	r3, r0, r1
 80077e2:	6153      	str	r3, [r2, #20]
 80077e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077e8:	681a      	ldr	r2, [r3, #0]
 80077ea:	4b8f      	ldr	r3, [pc, #572]	@ (8007a28 <UART_SetConfig+0x2cc>)
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d005      	beq.n	80077fc <UART_SetConfig+0xa0>
 80077f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077f4:	681a      	ldr	r2, [r3, #0]
 80077f6:	4b8d      	ldr	r3, [pc, #564]	@ (8007a2c <UART_SetConfig+0x2d0>)
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d104      	bne.n	8007806 <UART_SetConfig+0xaa>
 80077fc:	f7fe f876 	bl	80058ec <HAL_RCC_GetPCLK2Freq>
 8007800:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007804:	e003      	b.n	800780e <UART_SetConfig+0xb2>
 8007806:	f7fe f85d 	bl	80058c4 <HAL_RCC_GetPCLK1Freq>
 800780a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800780e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007812:	69db      	ldr	r3, [r3, #28]
 8007814:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007818:	f040 810c 	bne.w	8007a34 <UART_SetConfig+0x2d8>
 800781c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007820:	2200      	movs	r2, #0
 8007822:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007826:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800782a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800782e:	4622      	mov	r2, r4
 8007830:	462b      	mov	r3, r5
 8007832:	1891      	adds	r1, r2, r2
 8007834:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007836:	415b      	adcs	r3, r3
 8007838:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800783a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800783e:	4621      	mov	r1, r4
 8007840:	eb12 0801 	adds.w	r8, r2, r1
 8007844:	4629      	mov	r1, r5
 8007846:	eb43 0901 	adc.w	r9, r3, r1
 800784a:	f04f 0200 	mov.w	r2, #0
 800784e:	f04f 0300 	mov.w	r3, #0
 8007852:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007856:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800785a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800785e:	4690      	mov	r8, r2
 8007860:	4699      	mov	r9, r3
 8007862:	4623      	mov	r3, r4
 8007864:	eb18 0303 	adds.w	r3, r8, r3
 8007868:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800786c:	462b      	mov	r3, r5
 800786e:	eb49 0303 	adc.w	r3, r9, r3
 8007872:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	2200      	movs	r2, #0
 800787e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007882:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007886:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800788a:	460b      	mov	r3, r1
 800788c:	18db      	adds	r3, r3, r3
 800788e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007890:	4613      	mov	r3, r2
 8007892:	eb42 0303 	adc.w	r3, r2, r3
 8007896:	657b      	str	r3, [r7, #84]	@ 0x54
 8007898:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800789c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80078a0:	f7f8 fcfe 	bl	80002a0 <__aeabi_uldivmod>
 80078a4:	4602      	mov	r2, r0
 80078a6:	460b      	mov	r3, r1
 80078a8:	4b61      	ldr	r3, [pc, #388]	@ (8007a30 <UART_SetConfig+0x2d4>)
 80078aa:	fba3 2302 	umull	r2, r3, r3, r2
 80078ae:	095b      	lsrs	r3, r3, #5
 80078b0:	011c      	lsls	r4, r3, #4
 80078b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80078b6:	2200      	movs	r2, #0
 80078b8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80078bc:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80078c0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80078c4:	4642      	mov	r2, r8
 80078c6:	464b      	mov	r3, r9
 80078c8:	1891      	adds	r1, r2, r2
 80078ca:	64b9      	str	r1, [r7, #72]	@ 0x48
 80078cc:	415b      	adcs	r3, r3
 80078ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078d0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80078d4:	4641      	mov	r1, r8
 80078d6:	eb12 0a01 	adds.w	sl, r2, r1
 80078da:	4649      	mov	r1, r9
 80078dc:	eb43 0b01 	adc.w	fp, r3, r1
 80078e0:	f04f 0200 	mov.w	r2, #0
 80078e4:	f04f 0300 	mov.w	r3, #0
 80078e8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80078ec:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80078f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078f4:	4692      	mov	sl, r2
 80078f6:	469b      	mov	fp, r3
 80078f8:	4643      	mov	r3, r8
 80078fa:	eb1a 0303 	adds.w	r3, sl, r3
 80078fe:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007902:	464b      	mov	r3, r9
 8007904:	eb4b 0303 	adc.w	r3, fp, r3
 8007908:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800790c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	2200      	movs	r2, #0
 8007914:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007918:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800791c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007920:	460b      	mov	r3, r1
 8007922:	18db      	adds	r3, r3, r3
 8007924:	643b      	str	r3, [r7, #64]	@ 0x40
 8007926:	4613      	mov	r3, r2
 8007928:	eb42 0303 	adc.w	r3, r2, r3
 800792c:	647b      	str	r3, [r7, #68]	@ 0x44
 800792e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007932:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007936:	f7f8 fcb3 	bl	80002a0 <__aeabi_uldivmod>
 800793a:	4602      	mov	r2, r0
 800793c:	460b      	mov	r3, r1
 800793e:	4611      	mov	r1, r2
 8007940:	4b3b      	ldr	r3, [pc, #236]	@ (8007a30 <UART_SetConfig+0x2d4>)
 8007942:	fba3 2301 	umull	r2, r3, r3, r1
 8007946:	095b      	lsrs	r3, r3, #5
 8007948:	2264      	movs	r2, #100	@ 0x64
 800794a:	fb02 f303 	mul.w	r3, r2, r3
 800794e:	1acb      	subs	r3, r1, r3
 8007950:	00db      	lsls	r3, r3, #3
 8007952:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007956:	4b36      	ldr	r3, [pc, #216]	@ (8007a30 <UART_SetConfig+0x2d4>)
 8007958:	fba3 2302 	umull	r2, r3, r3, r2
 800795c:	095b      	lsrs	r3, r3, #5
 800795e:	005b      	lsls	r3, r3, #1
 8007960:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007964:	441c      	add	r4, r3
 8007966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800796a:	2200      	movs	r2, #0
 800796c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007970:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007974:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007978:	4642      	mov	r2, r8
 800797a:	464b      	mov	r3, r9
 800797c:	1891      	adds	r1, r2, r2
 800797e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007980:	415b      	adcs	r3, r3
 8007982:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007984:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007988:	4641      	mov	r1, r8
 800798a:	1851      	adds	r1, r2, r1
 800798c:	6339      	str	r1, [r7, #48]	@ 0x30
 800798e:	4649      	mov	r1, r9
 8007990:	414b      	adcs	r3, r1
 8007992:	637b      	str	r3, [r7, #52]	@ 0x34
 8007994:	f04f 0200 	mov.w	r2, #0
 8007998:	f04f 0300 	mov.w	r3, #0
 800799c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80079a0:	4659      	mov	r1, fp
 80079a2:	00cb      	lsls	r3, r1, #3
 80079a4:	4651      	mov	r1, sl
 80079a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80079aa:	4651      	mov	r1, sl
 80079ac:	00ca      	lsls	r2, r1, #3
 80079ae:	4610      	mov	r0, r2
 80079b0:	4619      	mov	r1, r3
 80079b2:	4603      	mov	r3, r0
 80079b4:	4642      	mov	r2, r8
 80079b6:	189b      	adds	r3, r3, r2
 80079b8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80079bc:	464b      	mov	r3, r9
 80079be:	460a      	mov	r2, r1
 80079c0:	eb42 0303 	adc.w	r3, r2, r3
 80079c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80079c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80079d4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80079d8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80079dc:	460b      	mov	r3, r1
 80079de:	18db      	adds	r3, r3, r3
 80079e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079e2:	4613      	mov	r3, r2
 80079e4:	eb42 0303 	adc.w	r3, r2, r3
 80079e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079ea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80079ee:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80079f2:	f7f8 fc55 	bl	80002a0 <__aeabi_uldivmod>
 80079f6:	4602      	mov	r2, r0
 80079f8:	460b      	mov	r3, r1
 80079fa:	4b0d      	ldr	r3, [pc, #52]	@ (8007a30 <UART_SetConfig+0x2d4>)
 80079fc:	fba3 1302 	umull	r1, r3, r3, r2
 8007a00:	095b      	lsrs	r3, r3, #5
 8007a02:	2164      	movs	r1, #100	@ 0x64
 8007a04:	fb01 f303 	mul.w	r3, r1, r3
 8007a08:	1ad3      	subs	r3, r2, r3
 8007a0a:	00db      	lsls	r3, r3, #3
 8007a0c:	3332      	adds	r3, #50	@ 0x32
 8007a0e:	4a08      	ldr	r2, [pc, #32]	@ (8007a30 <UART_SetConfig+0x2d4>)
 8007a10:	fba2 2303 	umull	r2, r3, r2, r3
 8007a14:	095b      	lsrs	r3, r3, #5
 8007a16:	f003 0207 	and.w	r2, r3, #7
 8007a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	4422      	add	r2, r4
 8007a22:	609a      	str	r2, [r3, #8]
 8007a24:	e106      	b.n	8007c34 <UART_SetConfig+0x4d8>
 8007a26:	bf00      	nop
 8007a28:	40011000 	.word	0x40011000
 8007a2c:	40011400 	.word	0x40011400
 8007a30:	51eb851f 	.word	0x51eb851f
 8007a34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a38:	2200      	movs	r2, #0
 8007a3a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007a3e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007a42:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007a46:	4642      	mov	r2, r8
 8007a48:	464b      	mov	r3, r9
 8007a4a:	1891      	adds	r1, r2, r2
 8007a4c:	6239      	str	r1, [r7, #32]
 8007a4e:	415b      	adcs	r3, r3
 8007a50:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a52:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007a56:	4641      	mov	r1, r8
 8007a58:	1854      	adds	r4, r2, r1
 8007a5a:	4649      	mov	r1, r9
 8007a5c:	eb43 0501 	adc.w	r5, r3, r1
 8007a60:	f04f 0200 	mov.w	r2, #0
 8007a64:	f04f 0300 	mov.w	r3, #0
 8007a68:	00eb      	lsls	r3, r5, #3
 8007a6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a6e:	00e2      	lsls	r2, r4, #3
 8007a70:	4614      	mov	r4, r2
 8007a72:	461d      	mov	r5, r3
 8007a74:	4643      	mov	r3, r8
 8007a76:	18e3      	adds	r3, r4, r3
 8007a78:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a7c:	464b      	mov	r3, r9
 8007a7e:	eb45 0303 	adc.w	r3, r5, r3
 8007a82:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a8a:	685b      	ldr	r3, [r3, #4]
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a92:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007a96:	f04f 0200 	mov.w	r2, #0
 8007a9a:	f04f 0300 	mov.w	r3, #0
 8007a9e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007aa2:	4629      	mov	r1, r5
 8007aa4:	008b      	lsls	r3, r1, #2
 8007aa6:	4621      	mov	r1, r4
 8007aa8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007aac:	4621      	mov	r1, r4
 8007aae:	008a      	lsls	r2, r1, #2
 8007ab0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007ab4:	f7f8 fbf4 	bl	80002a0 <__aeabi_uldivmod>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	460b      	mov	r3, r1
 8007abc:	4b60      	ldr	r3, [pc, #384]	@ (8007c40 <UART_SetConfig+0x4e4>)
 8007abe:	fba3 2302 	umull	r2, r3, r3, r2
 8007ac2:	095b      	lsrs	r3, r3, #5
 8007ac4:	011c      	lsls	r4, r3, #4
 8007ac6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007aca:	2200      	movs	r2, #0
 8007acc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007ad0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007ad4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007ad8:	4642      	mov	r2, r8
 8007ada:	464b      	mov	r3, r9
 8007adc:	1891      	adds	r1, r2, r2
 8007ade:	61b9      	str	r1, [r7, #24]
 8007ae0:	415b      	adcs	r3, r3
 8007ae2:	61fb      	str	r3, [r7, #28]
 8007ae4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ae8:	4641      	mov	r1, r8
 8007aea:	1851      	adds	r1, r2, r1
 8007aec:	6139      	str	r1, [r7, #16]
 8007aee:	4649      	mov	r1, r9
 8007af0:	414b      	adcs	r3, r1
 8007af2:	617b      	str	r3, [r7, #20]
 8007af4:	f04f 0200 	mov.w	r2, #0
 8007af8:	f04f 0300 	mov.w	r3, #0
 8007afc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007b00:	4659      	mov	r1, fp
 8007b02:	00cb      	lsls	r3, r1, #3
 8007b04:	4651      	mov	r1, sl
 8007b06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007b0a:	4651      	mov	r1, sl
 8007b0c:	00ca      	lsls	r2, r1, #3
 8007b0e:	4610      	mov	r0, r2
 8007b10:	4619      	mov	r1, r3
 8007b12:	4603      	mov	r3, r0
 8007b14:	4642      	mov	r2, r8
 8007b16:	189b      	adds	r3, r3, r2
 8007b18:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007b1c:	464b      	mov	r3, r9
 8007b1e:	460a      	mov	r2, r1
 8007b20:	eb42 0303 	adc.w	r3, r2, r3
 8007b24:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b2c:	685b      	ldr	r3, [r3, #4]
 8007b2e:	2200      	movs	r2, #0
 8007b30:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007b32:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007b34:	f04f 0200 	mov.w	r2, #0
 8007b38:	f04f 0300 	mov.w	r3, #0
 8007b3c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007b40:	4649      	mov	r1, r9
 8007b42:	008b      	lsls	r3, r1, #2
 8007b44:	4641      	mov	r1, r8
 8007b46:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b4a:	4641      	mov	r1, r8
 8007b4c:	008a      	lsls	r2, r1, #2
 8007b4e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007b52:	f7f8 fba5 	bl	80002a0 <__aeabi_uldivmod>
 8007b56:	4602      	mov	r2, r0
 8007b58:	460b      	mov	r3, r1
 8007b5a:	4611      	mov	r1, r2
 8007b5c:	4b38      	ldr	r3, [pc, #224]	@ (8007c40 <UART_SetConfig+0x4e4>)
 8007b5e:	fba3 2301 	umull	r2, r3, r3, r1
 8007b62:	095b      	lsrs	r3, r3, #5
 8007b64:	2264      	movs	r2, #100	@ 0x64
 8007b66:	fb02 f303 	mul.w	r3, r2, r3
 8007b6a:	1acb      	subs	r3, r1, r3
 8007b6c:	011b      	lsls	r3, r3, #4
 8007b6e:	3332      	adds	r3, #50	@ 0x32
 8007b70:	4a33      	ldr	r2, [pc, #204]	@ (8007c40 <UART_SetConfig+0x4e4>)
 8007b72:	fba2 2303 	umull	r2, r3, r2, r3
 8007b76:	095b      	lsrs	r3, r3, #5
 8007b78:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b7c:	441c      	add	r4, r3
 8007b7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b82:	2200      	movs	r2, #0
 8007b84:	673b      	str	r3, [r7, #112]	@ 0x70
 8007b86:	677a      	str	r2, [r7, #116]	@ 0x74
 8007b88:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007b8c:	4642      	mov	r2, r8
 8007b8e:	464b      	mov	r3, r9
 8007b90:	1891      	adds	r1, r2, r2
 8007b92:	60b9      	str	r1, [r7, #8]
 8007b94:	415b      	adcs	r3, r3
 8007b96:	60fb      	str	r3, [r7, #12]
 8007b98:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b9c:	4641      	mov	r1, r8
 8007b9e:	1851      	adds	r1, r2, r1
 8007ba0:	6039      	str	r1, [r7, #0]
 8007ba2:	4649      	mov	r1, r9
 8007ba4:	414b      	adcs	r3, r1
 8007ba6:	607b      	str	r3, [r7, #4]
 8007ba8:	f04f 0200 	mov.w	r2, #0
 8007bac:	f04f 0300 	mov.w	r3, #0
 8007bb0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007bb4:	4659      	mov	r1, fp
 8007bb6:	00cb      	lsls	r3, r1, #3
 8007bb8:	4651      	mov	r1, sl
 8007bba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bbe:	4651      	mov	r1, sl
 8007bc0:	00ca      	lsls	r2, r1, #3
 8007bc2:	4610      	mov	r0, r2
 8007bc4:	4619      	mov	r1, r3
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	4642      	mov	r2, r8
 8007bca:	189b      	adds	r3, r3, r2
 8007bcc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007bce:	464b      	mov	r3, r9
 8007bd0:	460a      	mov	r2, r1
 8007bd2:	eb42 0303 	adc.w	r3, r2, r3
 8007bd6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007bd8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bdc:	685b      	ldr	r3, [r3, #4]
 8007bde:	2200      	movs	r2, #0
 8007be0:	663b      	str	r3, [r7, #96]	@ 0x60
 8007be2:	667a      	str	r2, [r7, #100]	@ 0x64
 8007be4:	f04f 0200 	mov.w	r2, #0
 8007be8:	f04f 0300 	mov.w	r3, #0
 8007bec:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007bf0:	4649      	mov	r1, r9
 8007bf2:	008b      	lsls	r3, r1, #2
 8007bf4:	4641      	mov	r1, r8
 8007bf6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007bfa:	4641      	mov	r1, r8
 8007bfc:	008a      	lsls	r2, r1, #2
 8007bfe:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007c02:	f7f8 fb4d 	bl	80002a0 <__aeabi_uldivmod>
 8007c06:	4602      	mov	r2, r0
 8007c08:	460b      	mov	r3, r1
 8007c0a:	4b0d      	ldr	r3, [pc, #52]	@ (8007c40 <UART_SetConfig+0x4e4>)
 8007c0c:	fba3 1302 	umull	r1, r3, r3, r2
 8007c10:	095b      	lsrs	r3, r3, #5
 8007c12:	2164      	movs	r1, #100	@ 0x64
 8007c14:	fb01 f303 	mul.w	r3, r1, r3
 8007c18:	1ad3      	subs	r3, r2, r3
 8007c1a:	011b      	lsls	r3, r3, #4
 8007c1c:	3332      	adds	r3, #50	@ 0x32
 8007c1e:	4a08      	ldr	r2, [pc, #32]	@ (8007c40 <UART_SetConfig+0x4e4>)
 8007c20:	fba2 2303 	umull	r2, r3, r2, r3
 8007c24:	095b      	lsrs	r3, r3, #5
 8007c26:	f003 020f 	and.w	r2, r3, #15
 8007c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	4422      	add	r2, r4
 8007c32:	609a      	str	r2, [r3, #8]
 8007c34:	bf00      	nop
 8007c36:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007c3a:	46bd      	mov	sp, r7
 8007c3c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c40:	51eb851f 	.word	0x51eb851f

08007c44 <FMC_SDRAM_Init>:
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d123      	bne.n	8007c9e <FMC_SDRAM_Init+0x5a>
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007c5e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007c62:	683a      	ldr	r2, [r7, #0]
 8007c64:	6851      	ldr	r1, [r2, #4]
 8007c66:	683a      	ldr	r2, [r7, #0]
 8007c68:	6892      	ldr	r2, [r2, #8]
 8007c6a:	4311      	orrs	r1, r2
 8007c6c:	683a      	ldr	r2, [r7, #0]
 8007c6e:	68d2      	ldr	r2, [r2, #12]
 8007c70:	4311      	orrs	r1, r2
 8007c72:	683a      	ldr	r2, [r7, #0]
 8007c74:	6912      	ldr	r2, [r2, #16]
 8007c76:	4311      	orrs	r1, r2
 8007c78:	683a      	ldr	r2, [r7, #0]
 8007c7a:	6952      	ldr	r2, [r2, #20]
 8007c7c:	4311      	orrs	r1, r2
 8007c7e:	683a      	ldr	r2, [r7, #0]
 8007c80:	6992      	ldr	r2, [r2, #24]
 8007c82:	4311      	orrs	r1, r2
 8007c84:	683a      	ldr	r2, [r7, #0]
 8007c86:	69d2      	ldr	r2, [r2, #28]
 8007c88:	4311      	orrs	r1, r2
 8007c8a:	683a      	ldr	r2, [r7, #0]
 8007c8c:	6a12      	ldr	r2, [r2, #32]
 8007c8e:	4311      	orrs	r1, r2
 8007c90:	683a      	ldr	r2, [r7, #0]
 8007c92:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007c94:	430a      	orrs	r2, r1
 8007c96:	431a      	orrs	r2, r3
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	601a      	str	r2, [r3, #0]
 8007c9c:	e028      	b.n	8007cf0 <FMC_SDRAM_Init+0xac>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	69d9      	ldr	r1, [r3, #28]
 8007caa:	683b      	ldr	r3, [r7, #0]
 8007cac:	6a1b      	ldr	r3, [r3, #32]
 8007cae:	4319      	orrs	r1, r3
 8007cb0:	683b      	ldr	r3, [r7, #0]
 8007cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cb4:	430b      	orrs	r3, r1
 8007cb6:	431a      	orrs	r2, r3
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	601a      	str	r2, [r3, #0]
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	685b      	ldr	r3, [r3, #4]
 8007cc0:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007cc4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007cc8:	683a      	ldr	r2, [r7, #0]
 8007cca:	6851      	ldr	r1, [r2, #4]
 8007ccc:	683a      	ldr	r2, [r7, #0]
 8007cce:	6892      	ldr	r2, [r2, #8]
 8007cd0:	4311      	orrs	r1, r2
 8007cd2:	683a      	ldr	r2, [r7, #0]
 8007cd4:	68d2      	ldr	r2, [r2, #12]
 8007cd6:	4311      	orrs	r1, r2
 8007cd8:	683a      	ldr	r2, [r7, #0]
 8007cda:	6912      	ldr	r2, [r2, #16]
 8007cdc:	4311      	orrs	r1, r2
 8007cde:	683a      	ldr	r2, [r7, #0]
 8007ce0:	6952      	ldr	r2, [r2, #20]
 8007ce2:	4311      	orrs	r1, r2
 8007ce4:	683a      	ldr	r2, [r7, #0]
 8007ce6:	6992      	ldr	r2, [r2, #24]
 8007ce8:	430a      	orrs	r2, r1
 8007cea:	431a      	orrs	r2, r3
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	605a      	str	r2, [r3, #4]
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	370c      	adds	r7, #12
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfc:	4770      	bx	lr

08007cfe <FMC_SDRAM_Timing_Init>:
 8007cfe:	b480      	push	{r7}
 8007d00:	b085      	sub	sp, #20
 8007d02:	af00      	add	r7, sp, #0
 8007d04:	60f8      	str	r0, [r7, #12]
 8007d06:	60b9      	str	r1, [r7, #8]
 8007d08:	607a      	str	r2, [r7, #4]
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d128      	bne.n	8007d62 <FMC_SDRAM_Timing_Init+0x64>
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8007d18:	68bb      	ldr	r3, [r7, #8]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	1e59      	subs	r1, r3, #1
 8007d1e:	68bb      	ldr	r3, [r7, #8]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	3b01      	subs	r3, #1
 8007d24:	011b      	lsls	r3, r3, #4
 8007d26:	4319      	orrs	r1, r3
 8007d28:	68bb      	ldr	r3, [r7, #8]
 8007d2a:	689b      	ldr	r3, [r3, #8]
 8007d2c:	3b01      	subs	r3, #1
 8007d2e:	021b      	lsls	r3, r3, #8
 8007d30:	4319      	orrs	r1, r3
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	68db      	ldr	r3, [r3, #12]
 8007d36:	3b01      	subs	r3, #1
 8007d38:	031b      	lsls	r3, r3, #12
 8007d3a:	4319      	orrs	r1, r3
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	3b01      	subs	r3, #1
 8007d42:	041b      	lsls	r3, r3, #16
 8007d44:	4319      	orrs	r1, r3
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	695b      	ldr	r3, [r3, #20]
 8007d4a:	3b01      	subs	r3, #1
 8007d4c:	051b      	lsls	r3, r3, #20
 8007d4e:	4319      	orrs	r1, r3
 8007d50:	68bb      	ldr	r3, [r7, #8]
 8007d52:	699b      	ldr	r3, [r3, #24]
 8007d54:	3b01      	subs	r3, #1
 8007d56:	061b      	lsls	r3, r3, #24
 8007d58:	430b      	orrs	r3, r1
 8007d5a:	431a      	orrs	r2, r3
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	609a      	str	r2, [r3, #8]
 8007d60:	e02f      	b.n	8007dc2 <FMC_SDRAM_Timing_Init+0xc4>
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	689b      	ldr	r3, [r3, #8]
 8007d66:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007d6a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007d6e:	68ba      	ldr	r2, [r7, #8]
 8007d70:	68d2      	ldr	r2, [r2, #12]
 8007d72:	3a01      	subs	r2, #1
 8007d74:	0311      	lsls	r1, r2, #12
 8007d76:	68ba      	ldr	r2, [r7, #8]
 8007d78:	6952      	ldr	r2, [r2, #20]
 8007d7a:	3a01      	subs	r2, #1
 8007d7c:	0512      	lsls	r2, r2, #20
 8007d7e:	430a      	orrs	r2, r1
 8007d80:	431a      	orrs	r2, r3
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	609a      	str	r2, [r3, #8]
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	68db      	ldr	r3, [r3, #12]
 8007d8a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	1e59      	subs	r1, r3, #1
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	3b01      	subs	r3, #1
 8007d9a:	011b      	lsls	r3, r3, #4
 8007d9c:	4319      	orrs	r1, r3
 8007d9e:	68bb      	ldr	r3, [r7, #8]
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	3b01      	subs	r3, #1
 8007da4:	021b      	lsls	r3, r3, #8
 8007da6:	4319      	orrs	r1, r3
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	691b      	ldr	r3, [r3, #16]
 8007dac:	3b01      	subs	r3, #1
 8007dae:	041b      	lsls	r3, r3, #16
 8007db0:	4319      	orrs	r1, r3
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	699b      	ldr	r3, [r3, #24]
 8007db6:	3b01      	subs	r3, #1
 8007db8:	061b      	lsls	r3, r3, #24
 8007dba:	430b      	orrs	r3, r1
 8007dbc:	431a      	orrs	r2, r3
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	60da      	str	r2, [r3, #12]
 8007dc2:	2300      	movs	r3, #0
 8007dc4:	4618      	mov	r0, r3
 8007dc6:	3714      	adds	r7, #20
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dce:	4770      	bx	lr

08007dd0 <USB_CoreInit>:
 8007dd0:	b084      	sub	sp, #16
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b084      	sub	sp, #16
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	f107 001c 	add.w	r0, r7, #28
 8007dde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8007de2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d123      	bne.n	8007e32 <USB_CoreInit+0x62>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007dee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	639a      	str	r2, [r3, #56]	@ 0x38
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	68db      	ldr	r3, [r3, #12]
 8007dfa:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007dfe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007e02:	687a      	ldr	r2, [r7, #4]
 8007e04:	60d3      	str	r3, [r2, #12]
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	68db      	ldr	r3, [r3, #12]
 8007e0a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	60da      	str	r2, [r3, #12]
 8007e12:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007e16:	2b01      	cmp	r3, #1
 8007e18:	d105      	bne.n	8007e26 <USB_CoreInit+0x56>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	60da      	str	r2, [r3, #12]
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f9dc 	bl	80081e4 <USB_CoreReset>
 8007e2c:	4603      	mov	r3, r0
 8007e2e:	73fb      	strb	r3, [r7, #15]
 8007e30:	e01b      	b.n	8007e6a <USB_CoreInit+0x9a>
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	60da      	str	r2, [r3, #12]
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f000 f9d0 	bl	80081e4 <USB_CoreReset>
 8007e44:	4603      	mov	r3, r0
 8007e46:	73fb      	strb	r3, [r7, #15]
 8007e48:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d106      	bne.n	8007e5e <USB_CoreInit+0x8e>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e54:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	639a      	str	r2, [r3, #56]	@ 0x38
 8007e5c:	e005      	b.n	8007e6a <USB_CoreInit+0x9a>
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e62:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	639a      	str	r2, [r3, #56]	@ 0x38
 8007e6a:	7fbb      	ldrb	r3, [r7, #30]
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d10b      	bne.n	8007e88 <USB_CoreInit+0xb8>
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	f043 0206 	orr.w	r2, r3, #6
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	609a      	str	r2, [r3, #8]
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	689b      	ldr	r3, [r3, #8]
 8007e80:	f043 0220 	orr.w	r2, r3, #32
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	609a      	str	r2, [r3, #8]
 8007e88:	7bfb      	ldrb	r3, [r7, #15]
 8007e8a:	4618      	mov	r0, r3
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007e94:	b004      	add	sp, #16
 8007e96:	4770      	bx	lr

08007e98 <USB_EnableGlobalInt>:
 8007e98:	b480      	push	{r7}
 8007e9a:	b083      	sub	sp, #12
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	689b      	ldr	r3, [r3, #8]
 8007ea4:	f043 0201 	orr.w	r2, r3, #1
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	609a      	str	r2, [r3, #8]
 8007eac:	2300      	movs	r3, #0
 8007eae:	4618      	mov	r0, r3
 8007eb0:	370c      	adds	r7, #12
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb8:	4770      	bx	lr

08007eba <USB_DisableGlobalInt>:
 8007eba:	b480      	push	{r7}
 8007ebc:	b083      	sub	sp, #12
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	f023 0201 	bic.w	r2, r3, #1
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	609a      	str	r2, [r3, #8]
 8007ece:	2300      	movs	r3, #0
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	370c      	adds	r7, #12
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eda:	4770      	bx	lr

08007edc <USB_SetCurrentMode>:
 8007edc:	b580      	push	{r7, lr}
 8007ede:	b084      	sub	sp, #16
 8007ee0:	af00      	add	r7, sp, #0
 8007ee2:	6078      	str	r0, [r7, #4]
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	70fb      	strb	r3, [r7, #3]
 8007ee8:	2300      	movs	r3, #0
 8007eea:	60fb      	str	r3, [r7, #12]
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	60da      	str	r2, [r3, #12]
 8007ef8:	78fb      	ldrb	r3, [r7, #3]
 8007efa:	2b01      	cmp	r3, #1
 8007efc:	d115      	bne.n	8007f2a <USB_SetCurrentMode+0x4e>
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	68db      	ldr	r3, [r3, #12]
 8007f02:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	60da      	str	r2, [r3, #12]
 8007f0a:	200a      	movs	r0, #10
 8007f0c:	f7f9 fd18 	bl	8001940 <HAL_Delay>
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	330a      	adds	r3, #10
 8007f14:	60fb      	str	r3, [r7, #12]
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 f956 	bl	80081c8 <USB_GetMode>
 8007f1c:	4603      	mov	r3, r0
 8007f1e:	2b01      	cmp	r3, #1
 8007f20:	d01e      	beq.n	8007f60 <USB_SetCurrentMode+0x84>
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2bc7      	cmp	r3, #199	@ 0xc7
 8007f26:	d9f0      	bls.n	8007f0a <USB_SetCurrentMode+0x2e>
 8007f28:	e01a      	b.n	8007f60 <USB_SetCurrentMode+0x84>
 8007f2a:	78fb      	ldrb	r3, [r7, #3]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d115      	bne.n	8007f5c <USB_SetCurrentMode+0x80>
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	68db      	ldr	r3, [r3, #12]
 8007f34:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	60da      	str	r2, [r3, #12]
 8007f3c:	200a      	movs	r0, #10
 8007f3e:	f7f9 fcff 	bl	8001940 <HAL_Delay>
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	330a      	adds	r3, #10
 8007f46:	60fb      	str	r3, [r7, #12]
 8007f48:	6878      	ldr	r0, [r7, #4]
 8007f4a:	f000 f93d 	bl	80081c8 <USB_GetMode>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d005      	beq.n	8007f60 <USB_SetCurrentMode+0x84>
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	2bc7      	cmp	r3, #199	@ 0xc7
 8007f58:	d9f0      	bls.n	8007f3c <USB_SetCurrentMode+0x60>
 8007f5a:	e001      	b.n	8007f60 <USB_SetCurrentMode+0x84>
 8007f5c:	2301      	movs	r3, #1
 8007f5e:	e005      	b.n	8007f6c <USB_SetCurrentMode+0x90>
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	2bc8      	cmp	r3, #200	@ 0xc8
 8007f64:	d101      	bne.n	8007f6a <USB_SetCurrentMode+0x8e>
 8007f66:	2301      	movs	r3, #1
 8007f68:	e000      	b.n	8007f6c <USB_SetCurrentMode+0x90>
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	4618      	mov	r0, r3
 8007f6e:	3710      	adds	r7, #16
 8007f70:	46bd      	mov	sp, r7
 8007f72:	bd80      	pop	{r7, pc}

08007f74 <USB_FlushTxFifo>:
 8007f74:	b480      	push	{r7}
 8007f76:	b085      	sub	sp, #20
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	6078      	str	r0, [r7, #4]
 8007f7c:	6039      	str	r1, [r7, #0]
 8007f7e:	2300      	movs	r3, #0
 8007f80:	60fb      	str	r3, [r7, #12]
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	3301      	adds	r3, #1
 8007f86:	60fb      	str	r3, [r7, #12]
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007f8e:	d901      	bls.n	8007f94 <USB_FlushTxFifo+0x20>
 8007f90:	2303      	movs	r3, #3
 8007f92:	e01b      	b.n	8007fcc <USB_FlushTxFifo+0x58>
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	691b      	ldr	r3, [r3, #16]
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	daf2      	bge.n	8007f82 <USB_FlushTxFifo+0xe>
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	60fb      	str	r3, [r7, #12]
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	019b      	lsls	r3, r3, #6
 8007fa4:	f043 0220 	orr.w	r2, r3, #32
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	611a      	str	r2, [r3, #16]
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	3301      	adds	r3, #1
 8007fb0:	60fb      	str	r3, [r7, #12]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007fb8:	d901      	bls.n	8007fbe <USB_FlushTxFifo+0x4a>
 8007fba:	2303      	movs	r3, #3
 8007fbc:	e006      	b.n	8007fcc <USB_FlushTxFifo+0x58>
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	691b      	ldr	r3, [r3, #16]
 8007fc2:	f003 0320 	and.w	r3, r3, #32
 8007fc6:	2b20      	cmp	r3, #32
 8007fc8:	d0f0      	beq.n	8007fac <USB_FlushTxFifo+0x38>
 8007fca:	2300      	movs	r3, #0
 8007fcc:	4618      	mov	r0, r3
 8007fce:	3714      	adds	r7, #20
 8007fd0:	46bd      	mov	sp, r7
 8007fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fd6:	4770      	bx	lr

08007fd8 <USB_FlushRxFifo>:
 8007fd8:	b480      	push	{r7}
 8007fda:	b085      	sub	sp, #20
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	2300      	movs	r3, #0
 8007fe2:	60fb      	str	r3, [r7, #12]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	60fb      	str	r3, [r7, #12]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007ff0:	d901      	bls.n	8007ff6 <USB_FlushRxFifo+0x1e>
 8007ff2:	2303      	movs	r3, #3
 8007ff4:	e018      	b.n	8008028 <USB_FlushRxFifo+0x50>
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	691b      	ldr	r3, [r3, #16]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	daf2      	bge.n	8007fe4 <USB_FlushRxFifo+0xc>
 8007ffe:	2300      	movs	r3, #0
 8008000:	60fb      	str	r3, [r7, #12]
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	2210      	movs	r2, #16
 8008006:	611a      	str	r2, [r3, #16]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	3301      	adds	r3, #1
 800800c:	60fb      	str	r3, [r7, #12]
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008014:	d901      	bls.n	800801a <USB_FlushRxFifo+0x42>
 8008016:	2303      	movs	r3, #3
 8008018:	e006      	b.n	8008028 <USB_FlushRxFifo+0x50>
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	691b      	ldr	r3, [r3, #16]
 800801e:	f003 0310 	and.w	r3, r3, #16
 8008022:	2b10      	cmp	r3, #16
 8008024:	d0f0      	beq.n	8008008 <USB_FlushRxFifo+0x30>
 8008026:	2300      	movs	r3, #0
 8008028:	4618      	mov	r0, r3
 800802a:	3714      	adds	r7, #20
 800802c:	46bd      	mov	sp, r7
 800802e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008032:	4770      	bx	lr

08008034 <USB_WritePacket>:
 8008034:	b480      	push	{r7}
 8008036:	b089      	sub	sp, #36	@ 0x24
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	4611      	mov	r1, r2
 8008040:	461a      	mov	r2, r3
 8008042:	460b      	mov	r3, r1
 8008044:	71fb      	strb	r3, [r7, #7]
 8008046:	4613      	mov	r3, r2
 8008048:	80bb      	strh	r3, [r7, #4]
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	617b      	str	r3, [r7, #20]
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	61fb      	str	r3, [r7, #28]
 8008052:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008056:	2b00      	cmp	r3, #0
 8008058:	d123      	bne.n	80080a2 <USB_WritePacket+0x6e>
 800805a:	88bb      	ldrh	r3, [r7, #4]
 800805c:	3303      	adds	r3, #3
 800805e:	089b      	lsrs	r3, r3, #2
 8008060:	613b      	str	r3, [r7, #16]
 8008062:	2300      	movs	r3, #0
 8008064:	61bb      	str	r3, [r7, #24]
 8008066:	e018      	b.n	800809a <USB_WritePacket+0x66>
 8008068:	79fb      	ldrb	r3, [r7, #7]
 800806a:	031a      	lsls	r2, r3, #12
 800806c:	697b      	ldr	r3, [r7, #20]
 800806e:	4413      	add	r3, r2
 8008070:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8008074:	461a      	mov	r2, r3
 8008076:	69fb      	ldr	r3, [r7, #28]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	6013      	str	r3, [r2, #0]
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	3301      	adds	r3, #1
 8008080:	61fb      	str	r3, [r7, #28]
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	3301      	adds	r3, #1
 8008086:	61fb      	str	r3, [r7, #28]
 8008088:	69fb      	ldr	r3, [r7, #28]
 800808a:	3301      	adds	r3, #1
 800808c:	61fb      	str	r3, [r7, #28]
 800808e:	69fb      	ldr	r3, [r7, #28]
 8008090:	3301      	adds	r3, #1
 8008092:	61fb      	str	r3, [r7, #28]
 8008094:	69bb      	ldr	r3, [r7, #24]
 8008096:	3301      	adds	r3, #1
 8008098:	61bb      	str	r3, [r7, #24]
 800809a:	69ba      	ldr	r2, [r7, #24]
 800809c:	693b      	ldr	r3, [r7, #16]
 800809e:	429a      	cmp	r2, r3
 80080a0:	d3e2      	bcc.n	8008068 <USB_WritePacket+0x34>
 80080a2:	2300      	movs	r3, #0
 80080a4:	4618      	mov	r0, r3
 80080a6:	3724      	adds	r7, #36	@ 0x24
 80080a8:	46bd      	mov	sp, r7
 80080aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ae:	4770      	bx	lr

080080b0 <USB_ReadPacket>:
 80080b0:	b480      	push	{r7}
 80080b2:	b08b      	sub	sp, #44	@ 0x2c
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	4613      	mov	r3, r2
 80080bc:	80fb      	strh	r3, [r7, #6]
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	61bb      	str	r3, [r7, #24]
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80080c6:	88fb      	ldrh	r3, [r7, #6]
 80080c8:	089b      	lsrs	r3, r3, #2
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	617b      	str	r3, [r7, #20]
 80080ce:	88fb      	ldrh	r3, [r7, #6]
 80080d0:	f003 0303 	and.w	r3, r3, #3
 80080d4:	83fb      	strh	r3, [r7, #30]
 80080d6:	2300      	movs	r3, #0
 80080d8:	623b      	str	r3, [r7, #32]
 80080da:	e014      	b.n	8008106 <USB_ReadPacket+0x56>
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80080e2:	681a      	ldr	r2, [r3, #0]
 80080e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e6:	601a      	str	r2, [r3, #0]
 80080e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080ea:	3301      	adds	r3, #1
 80080ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80080ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f0:	3301      	adds	r3, #1
 80080f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80080f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f6:	3301      	adds	r3, #1
 80080f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80080fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080fc:	3301      	adds	r3, #1
 80080fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8008100:	6a3b      	ldr	r3, [r7, #32]
 8008102:	3301      	adds	r3, #1
 8008104:	623b      	str	r3, [r7, #32]
 8008106:	6a3a      	ldr	r2, [r7, #32]
 8008108:	697b      	ldr	r3, [r7, #20]
 800810a:	429a      	cmp	r2, r3
 800810c:	d3e6      	bcc.n	80080dc <USB_ReadPacket+0x2c>
 800810e:	8bfb      	ldrh	r3, [r7, #30]
 8008110:	2b00      	cmp	r3, #0
 8008112:	d01e      	beq.n	8008152 <USB_ReadPacket+0xa2>
 8008114:	2300      	movs	r3, #0
 8008116:	623b      	str	r3, [r7, #32]
 8008118:	69bb      	ldr	r3, [r7, #24]
 800811a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800811e:	461a      	mov	r2, r3
 8008120:	f107 0310 	add.w	r3, r7, #16
 8008124:	6812      	ldr	r2, [r2, #0]
 8008126:	601a      	str	r2, [r3, #0]
 8008128:	693a      	ldr	r2, [r7, #16]
 800812a:	6a3b      	ldr	r3, [r7, #32]
 800812c:	b2db      	uxtb	r3, r3
 800812e:	00db      	lsls	r3, r3, #3
 8008130:	fa22 f303 	lsr.w	r3, r2, r3
 8008134:	b2da      	uxtb	r2, r3
 8008136:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008138:	701a      	strb	r2, [r3, #0]
 800813a:	6a3b      	ldr	r3, [r7, #32]
 800813c:	3301      	adds	r3, #1
 800813e:	623b      	str	r3, [r7, #32]
 8008140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008142:	3301      	adds	r3, #1
 8008144:	627b      	str	r3, [r7, #36]	@ 0x24
 8008146:	8bfb      	ldrh	r3, [r7, #30]
 8008148:	3b01      	subs	r3, #1
 800814a:	83fb      	strh	r3, [r7, #30]
 800814c:	8bfb      	ldrh	r3, [r7, #30]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d1ea      	bne.n	8008128 <USB_ReadPacket+0x78>
 8008152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008154:	4618      	mov	r0, r3
 8008156:	372c      	adds	r7, #44	@ 0x2c
 8008158:	46bd      	mov	sp, r7
 800815a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800815e:	4770      	bx	lr

08008160 <USB_ReadInterrupts>:
 8008160:	b480      	push	{r7}
 8008162:	b085      	sub	sp, #20
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	695b      	ldr	r3, [r3, #20]
 800816c:	60fb      	str	r3, [r7, #12]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	699b      	ldr	r3, [r3, #24]
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	4013      	ands	r3, r2
 8008176:	60fb      	str	r3, [r7, #12]
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	4618      	mov	r0, r3
 800817c:	3714      	adds	r7, #20
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr

08008186 <USB_ReadChInterrupts>:
 8008186:	b480      	push	{r7}
 8008188:	b085      	sub	sp, #20
 800818a:	af00      	add	r7, sp, #0
 800818c:	6078      	str	r0, [r7, #4]
 800818e:	460b      	mov	r3, r1
 8008190:	70fb      	strb	r3, [r7, #3]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	60fb      	str	r3, [r7, #12]
 8008196:	78fb      	ldrb	r3, [r7, #3]
 8008198:	015a      	lsls	r2, r3, #5
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	4413      	add	r3, r2
 800819e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081a2:	689b      	ldr	r3, [r3, #8]
 80081a4:	60bb      	str	r3, [r7, #8]
 80081a6:	78fb      	ldrb	r3, [r7, #3]
 80081a8:	015a      	lsls	r2, r3, #5
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	4413      	add	r3, r2
 80081ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	68ba      	ldr	r2, [r7, #8]
 80081b6:	4013      	ands	r3, r2
 80081b8:	60bb      	str	r3, [r7, #8]
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	4618      	mov	r0, r3
 80081be:	3714      	adds	r7, #20
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr

080081c8 <USB_GetMode>:
 80081c8:	b480      	push	{r7}
 80081ca:	b083      	sub	sp, #12
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	695b      	ldr	r3, [r3, #20]
 80081d4:	f003 0301 	and.w	r3, r3, #1
 80081d8:	4618      	mov	r0, r3
 80081da:	370c      	adds	r7, #12
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <USB_CoreReset>:
 80081e4:	b480      	push	{r7}
 80081e6:	b085      	sub	sp, #20
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	2300      	movs	r3, #0
 80081ee:	60fb      	str	r3, [r7, #12]
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	3301      	adds	r3, #1
 80081f4:	60fb      	str	r3, [r7, #12]
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80081fc:	d901      	bls.n	8008202 <USB_CoreReset+0x1e>
 80081fe:	2303      	movs	r3, #3
 8008200:	e01b      	b.n	800823a <USB_CoreReset+0x56>
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	691b      	ldr	r3, [r3, #16]
 8008206:	2b00      	cmp	r3, #0
 8008208:	daf2      	bge.n	80081f0 <USB_CoreReset+0xc>
 800820a:	2300      	movs	r3, #0
 800820c:	60fb      	str	r3, [r7, #12]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	691b      	ldr	r3, [r3, #16]
 8008212:	f043 0201 	orr.w	r2, r3, #1
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	611a      	str	r2, [r3, #16]
 800821a:	68fb      	ldr	r3, [r7, #12]
 800821c:	3301      	adds	r3, #1
 800821e:	60fb      	str	r3, [r7, #12]
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008226:	d901      	bls.n	800822c <USB_CoreReset+0x48>
 8008228:	2303      	movs	r3, #3
 800822a:	e006      	b.n	800823a <USB_CoreReset+0x56>
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	691b      	ldr	r3, [r3, #16]
 8008230:	f003 0301 	and.w	r3, r3, #1
 8008234:	2b01      	cmp	r3, #1
 8008236:	d0f0      	beq.n	800821a <USB_CoreReset+0x36>
 8008238:	2300      	movs	r3, #0
 800823a:	4618      	mov	r0, r3
 800823c:	3714      	adds	r7, #20
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr
	...

08008248 <USB_HostInit>:
 8008248:	b084      	sub	sp, #16
 800824a:	b580      	push	{r7, lr}
 800824c:	b086      	sub	sp, #24
 800824e:	af00      	add	r7, sp, #0
 8008250:	6078      	str	r0, [r7, #4]
 8008252:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008256:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800825a:	2300      	movs	r3, #0
 800825c:	75fb      	strb	r3, [r7, #23]
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	60fb      	str	r3, [r7, #12]
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008268:	461a      	mov	r2, r3
 800826a:	2300      	movs	r3, #0
 800826c:	6013      	str	r3, [r2, #0]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008272:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	639a      	str	r2, [r3, #56]	@ 0x38
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800827e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	639a      	str	r2, [r3, #56]	@ 0x38
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800828a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	639a      	str	r2, [r3, #56]	@ 0x38
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800829a:	2b00      	cmp	r3, #0
 800829c:	d119      	bne.n	80082d2 <USB_HostInit+0x8a>
 800829e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80082a2:	2b01      	cmp	r3, #1
 80082a4:	d10a      	bne.n	80082bc <USB_HostInit+0x74>
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68fa      	ldr	r2, [r7, #12]
 80082b0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80082b4:	f043 0304 	orr.w	r3, r3, #4
 80082b8:	6013      	str	r3, [r2, #0]
 80082ba:	e014      	b.n	80082e6 <USB_HostInit+0x9e>
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68fa      	ldr	r2, [r7, #12]
 80082c6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80082ca:	f023 0304 	bic.w	r3, r3, #4
 80082ce:	6013      	str	r3, [r2, #0]
 80082d0:	e009      	b.n	80082e6 <USB_HostInit+0x9e>
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	68fa      	ldr	r2, [r7, #12]
 80082dc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80082e0:	f023 0304 	bic.w	r3, r3, #4
 80082e4:	6013      	str	r3, [r2, #0]
 80082e6:	2110      	movs	r1, #16
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f7ff fe43 	bl	8007f74 <USB_FlushTxFifo>
 80082ee:	4603      	mov	r3, r0
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d001      	beq.n	80082f8 <USB_HostInit+0xb0>
 80082f4:	2301      	movs	r3, #1
 80082f6:	75fb      	strb	r3, [r7, #23]
 80082f8:	6878      	ldr	r0, [r7, #4]
 80082fa:	f7ff fe6d 	bl	8007fd8 <USB_FlushRxFifo>
 80082fe:	4603      	mov	r3, r0
 8008300:	2b00      	cmp	r3, #0
 8008302:	d001      	beq.n	8008308 <USB_HostInit+0xc0>
 8008304:	2301      	movs	r3, #1
 8008306:	75fb      	strb	r3, [r7, #23]
 8008308:	2300      	movs	r3, #0
 800830a:	613b      	str	r3, [r7, #16]
 800830c:	e015      	b.n	800833a <USB_HostInit+0xf2>
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	015a      	lsls	r2, r3, #5
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	4413      	add	r3, r2
 8008316:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800831a:	461a      	mov	r2, r3
 800831c:	f04f 33ff 	mov.w	r3, #4294967295
 8008320:	6093      	str	r3, [r2, #8]
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	015a      	lsls	r2, r3, #5
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	4413      	add	r3, r2
 800832a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800832e:	461a      	mov	r2, r3
 8008330:	2300      	movs	r3, #0
 8008332:	60d3      	str	r3, [r2, #12]
 8008334:	693b      	ldr	r3, [r7, #16]
 8008336:	3301      	adds	r3, #1
 8008338:	613b      	str	r3, [r7, #16]
 800833a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800833e:	461a      	mov	r2, r3
 8008340:	693b      	ldr	r3, [r7, #16]
 8008342:	4293      	cmp	r3, r2
 8008344:	d3e3      	bcc.n	800830e <USB_HostInit+0xc6>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2200      	movs	r2, #0
 800834a:	619a      	str	r2, [r3, #24]
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	f04f 32ff 	mov.w	r2, #4294967295
 8008352:	615a      	str	r2, [r3, #20]
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	4a18      	ldr	r2, [pc, #96]	@ (80083b8 <USB_HostInit+0x170>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d10b      	bne.n	8008374 <USB_HostInit+0x12c>
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008362:	625a      	str	r2, [r3, #36]	@ 0x24
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	4a15      	ldr	r2, [pc, #84]	@ (80083bc <USB_HostInit+0x174>)
 8008368:	629a      	str	r2, [r3, #40]	@ 0x28
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	4a14      	ldr	r2, [pc, #80]	@ (80083c0 <USB_HostInit+0x178>)
 800836e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8008372:	e009      	b.n	8008388 <USB_HostInit+0x140>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2280      	movs	r2, #128	@ 0x80
 8008378:	625a      	str	r2, [r3, #36]	@ 0x24
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	4a11      	ldr	r2, [pc, #68]	@ (80083c4 <USB_HostInit+0x17c>)
 800837e:	629a      	str	r2, [r3, #40]	@ 0x28
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	4a11      	ldr	r2, [pc, #68]	@ (80083c8 <USB_HostInit+0x180>)
 8008384:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8008388:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800838c:	2b00      	cmp	r3, #0
 800838e:	d105      	bne.n	800839c <USB_HostInit+0x154>
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	699b      	ldr	r3, [r3, #24]
 8008394:	f043 0210 	orr.w	r2, r3, #16
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	619a      	str	r2, [r3, #24]
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	699a      	ldr	r2, [r3, #24]
 80083a0:	4b0a      	ldr	r3, [pc, #40]	@ (80083cc <USB_HostInit+0x184>)
 80083a2:	4313      	orrs	r3, r2
 80083a4:	687a      	ldr	r2, [r7, #4]
 80083a6:	6193      	str	r3, [r2, #24]
 80083a8:	7dfb      	ldrb	r3, [r7, #23]
 80083aa:	4618      	mov	r0, r3
 80083ac:	3718      	adds	r7, #24
 80083ae:	46bd      	mov	sp, r7
 80083b0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80083b4:	b004      	add	sp, #16
 80083b6:	4770      	bx	lr
 80083b8:	40040000 	.word	0x40040000
 80083bc:	01000200 	.word	0x01000200
 80083c0:	00e00300 	.word	0x00e00300
 80083c4:	00600080 	.word	0x00600080
 80083c8:	004000e0 	.word	0x004000e0
 80083cc:	a3200008 	.word	0xa3200008

080083d0 <USB_InitFSLSPClkSel>:
 80083d0:	b480      	push	{r7}
 80083d2:	b085      	sub	sp, #20
 80083d4:	af00      	add	r7, sp, #0
 80083d6:	6078      	str	r0, [r7, #4]
 80083d8:	460b      	mov	r3, r1
 80083da:	70fb      	strb	r3, [r7, #3]
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	60fb      	str	r3, [r7, #12]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	68fa      	ldr	r2, [r7, #12]
 80083ea:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80083ee:	f023 0303 	bic.w	r3, r3, #3
 80083f2:	6013      	str	r3, [r2, #0]
 80083f4:	68fb      	ldr	r3, [r7, #12]
 80083f6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80083fa:	681a      	ldr	r2, [r3, #0]
 80083fc:	78fb      	ldrb	r3, [r7, #3]
 80083fe:	f003 0303 	and.w	r3, r3, #3
 8008402:	68f9      	ldr	r1, [r7, #12]
 8008404:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008408:	4313      	orrs	r3, r2
 800840a:	600b      	str	r3, [r1, #0]
 800840c:	78fb      	ldrb	r3, [r7, #3]
 800840e:	2b01      	cmp	r3, #1
 8008410:	d107      	bne.n	8008422 <USB_InitFSLSPClkSel+0x52>
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008418:	461a      	mov	r2, r3
 800841a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800841e:	6053      	str	r3, [r2, #4]
 8008420:	e00c      	b.n	800843c <USB_InitFSLSPClkSel+0x6c>
 8008422:	78fb      	ldrb	r3, [r7, #3]
 8008424:	2b02      	cmp	r3, #2
 8008426:	d107      	bne.n	8008438 <USB_InitFSLSPClkSel+0x68>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800842e:	461a      	mov	r2, r3
 8008430:	f241 7370 	movw	r3, #6000	@ 0x1770
 8008434:	6053      	str	r3, [r2, #4]
 8008436:	e001      	b.n	800843c <USB_InitFSLSPClkSel+0x6c>
 8008438:	2301      	movs	r3, #1
 800843a:	e000      	b.n	800843e <USB_InitFSLSPClkSel+0x6e>
 800843c:	2300      	movs	r3, #0
 800843e:	4618      	mov	r0, r3
 8008440:	3714      	adds	r7, #20
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr

0800844a <USB_ResetPort>:
 800844a:	b580      	push	{r7, lr}
 800844c:	b084      	sub	sp, #16
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	60fb      	str	r3, [r7, #12]
 8008456:	2300      	movs	r3, #0
 8008458:	60bb      	str	r3, [r7, #8]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	60bb      	str	r3, [r7, #8]
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800846a:	60bb      	str	r3, [r7, #8]
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	68fa      	ldr	r2, [r7, #12]
 8008470:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008474:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008478:	6013      	str	r3, [r2, #0]
 800847a:	2064      	movs	r0, #100	@ 0x64
 800847c:	f7f9 fa60 	bl	8001940 <HAL_Delay>
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	68fa      	ldr	r2, [r7, #12]
 8008484:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008488:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800848c:	6013      	str	r3, [r2, #0]
 800848e:	200a      	movs	r0, #10
 8008490:	f7f9 fa56 	bl	8001940 <HAL_Delay>
 8008494:	2300      	movs	r3, #0
 8008496:	4618      	mov	r0, r3
 8008498:	3710      	adds	r7, #16
 800849a:	46bd      	mov	sp, r7
 800849c:	bd80      	pop	{r7, pc}

0800849e <USB_DriveVbus>:
 800849e:	b480      	push	{r7}
 80084a0:	b085      	sub	sp, #20
 80084a2:	af00      	add	r7, sp, #0
 80084a4:	6078      	str	r0, [r7, #4]
 80084a6:	460b      	mov	r3, r1
 80084a8:	70fb      	strb	r3, [r7, #3]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	60fb      	str	r3, [r7, #12]
 80084ae:	2300      	movs	r3, #0
 80084b0:	60bb      	str	r3, [r7, #8]
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	60bb      	str	r3, [r7, #8]
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80084c2:	60bb      	str	r3, [r7, #8]
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d109      	bne.n	80084e2 <USB_DriveVbus+0x44>
 80084ce:	78fb      	ldrb	r3, [r7, #3]
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d106      	bne.n	80084e2 <USB_DriveVbus+0x44>
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	68fa      	ldr	r2, [r7, #12]
 80084d8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80084dc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80084e0:	6013      	str	r3, [r2, #0]
 80084e2:	68bb      	ldr	r3, [r7, #8]
 80084e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80084e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80084ec:	d109      	bne.n	8008502 <USB_DriveVbus+0x64>
 80084ee:	78fb      	ldrb	r3, [r7, #3]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d106      	bne.n	8008502 <USB_DriveVbus+0x64>
 80084f4:	68bb      	ldr	r3, [r7, #8]
 80084f6:	68fa      	ldr	r2, [r7, #12]
 80084f8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80084fc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008500:	6013      	str	r3, [r2, #0]
 8008502:	2300      	movs	r3, #0
 8008504:	4618      	mov	r0, r3
 8008506:	3714      	adds	r7, #20
 8008508:	46bd      	mov	sp, r7
 800850a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850e:	4770      	bx	lr

08008510 <USB_GetHostSpeed>:
 8008510:	b480      	push	{r7}
 8008512:	b085      	sub	sp, #20
 8008514:	af00      	add	r7, sp, #0
 8008516:	6078      	str	r0, [r7, #4]
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	60fb      	str	r3, [r7, #12]
 800851c:	2300      	movs	r3, #0
 800851e:	60bb      	str	r3, [r7, #8]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	60bb      	str	r3, [r7, #8]
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	0c5b      	lsrs	r3, r3, #17
 800852e:	f003 0303 	and.w	r3, r3, #3
 8008532:	4618      	mov	r0, r3
 8008534:	3714      	adds	r7, #20
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <USB_GetCurrentFrame>:
 800853e:	b480      	push	{r7}
 8008540:	b085      	sub	sp, #20
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	60fb      	str	r3, [r7, #12]
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008550:	689b      	ldr	r3, [r3, #8]
 8008552:	b29b      	uxth	r3, r3
 8008554:	4618      	mov	r0, r3
 8008556:	3714      	adds	r7, #20
 8008558:	46bd      	mov	sp, r7
 800855a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855e:	4770      	bx	lr

08008560 <USB_HC_Init>:
 8008560:	b580      	push	{r7, lr}
 8008562:	b088      	sub	sp, #32
 8008564:	af00      	add	r7, sp, #0
 8008566:	6078      	str	r0, [r7, #4]
 8008568:	4608      	mov	r0, r1
 800856a:	4611      	mov	r1, r2
 800856c:	461a      	mov	r2, r3
 800856e:	4603      	mov	r3, r0
 8008570:	70fb      	strb	r3, [r7, #3]
 8008572:	460b      	mov	r3, r1
 8008574:	70bb      	strb	r3, [r7, #2]
 8008576:	4613      	mov	r3, r2
 8008578:	707b      	strb	r3, [r7, #1]
 800857a:	2300      	movs	r3, #0
 800857c:	77fb      	strb	r3, [r7, #31]
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	613b      	str	r3, [r7, #16]
 8008582:	78fb      	ldrb	r3, [r7, #3]
 8008584:	015a      	lsls	r2, r3, #5
 8008586:	693b      	ldr	r3, [r7, #16]
 8008588:	4413      	add	r3, r2
 800858a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800858e:	461a      	mov	r2, r3
 8008590:	f04f 33ff 	mov.w	r3, #4294967295
 8008594:	6093      	str	r3, [r2, #8]
 8008596:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800859a:	2b03      	cmp	r3, #3
 800859c:	d87c      	bhi.n	8008698 <USB_HC_Init+0x138>
 800859e:	a201      	add	r2, pc, #4	@ (adr r2, 80085a4 <USB_HC_Init+0x44>)
 80085a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a4:	080085b5 	.word	0x080085b5
 80085a8:	0800865b 	.word	0x0800865b
 80085ac:	080085b5 	.word	0x080085b5
 80085b0:	0800861d 	.word	0x0800861d
 80085b4:	78fb      	ldrb	r3, [r7, #3]
 80085b6:	015a      	lsls	r2, r3, #5
 80085b8:	693b      	ldr	r3, [r7, #16]
 80085ba:	4413      	add	r3, r2
 80085bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085c0:	461a      	mov	r2, r3
 80085c2:	f240 439d 	movw	r3, #1181	@ 0x49d
 80085c6:	60d3      	str	r3, [r2, #12]
 80085c8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	da10      	bge.n	80085f2 <USB_HC_Init+0x92>
 80085d0:	78fb      	ldrb	r3, [r7, #3]
 80085d2:	015a      	lsls	r2, r3, #5
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	4413      	add	r3, r2
 80085d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80085dc:	68db      	ldr	r3, [r3, #12]
 80085de:	78fa      	ldrb	r2, [r7, #3]
 80085e0:	0151      	lsls	r1, r2, #5
 80085e2:	693a      	ldr	r2, [r7, #16]
 80085e4:	440a      	add	r2, r1
 80085e6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80085ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80085ee:	60d3      	str	r3, [r2, #12]
 80085f0:	e055      	b.n	800869e <USB_HC_Init+0x13e>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4a6f      	ldr	r2, [pc, #444]	@ (80087b4 <USB_HC_Init+0x254>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d151      	bne.n	800869e <USB_HC_Init+0x13e>
 80085fa:	78fb      	ldrb	r3, [r7, #3]
 80085fc:	015a      	lsls	r2, r3, #5
 80085fe:	693b      	ldr	r3, [r7, #16]
 8008600:	4413      	add	r3, r2
 8008602:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008606:	68db      	ldr	r3, [r3, #12]
 8008608:	78fa      	ldrb	r2, [r7, #3]
 800860a:	0151      	lsls	r1, r2, #5
 800860c:	693a      	ldr	r2, [r7, #16]
 800860e:	440a      	add	r2, r1
 8008610:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008614:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008618:	60d3      	str	r3, [r2, #12]
 800861a:	e040      	b.n	800869e <USB_HC_Init+0x13e>
 800861c:	78fb      	ldrb	r3, [r7, #3]
 800861e:	015a      	lsls	r2, r3, #5
 8008620:	693b      	ldr	r3, [r7, #16]
 8008622:	4413      	add	r3, r2
 8008624:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008628:	461a      	mov	r2, r3
 800862a:	f240 639d 	movw	r3, #1693	@ 0x69d
 800862e:	60d3      	str	r3, [r2, #12]
 8008630:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008634:	2b00      	cmp	r3, #0
 8008636:	da34      	bge.n	80086a2 <USB_HC_Init+0x142>
 8008638:	78fb      	ldrb	r3, [r7, #3]
 800863a:	015a      	lsls	r2, r3, #5
 800863c:	693b      	ldr	r3, [r7, #16]
 800863e:	4413      	add	r3, r2
 8008640:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008644:	68db      	ldr	r3, [r3, #12]
 8008646:	78fa      	ldrb	r2, [r7, #3]
 8008648:	0151      	lsls	r1, r2, #5
 800864a:	693a      	ldr	r2, [r7, #16]
 800864c:	440a      	add	r2, r1
 800864e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008652:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008656:	60d3      	str	r3, [r2, #12]
 8008658:	e023      	b.n	80086a2 <USB_HC_Init+0x142>
 800865a:	78fb      	ldrb	r3, [r7, #3]
 800865c:	015a      	lsls	r2, r3, #5
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	4413      	add	r3, r2
 8008662:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008666:	461a      	mov	r2, r3
 8008668:	f240 2325 	movw	r3, #549	@ 0x225
 800866c:	60d3      	str	r3, [r2, #12]
 800866e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008672:	2b00      	cmp	r3, #0
 8008674:	da17      	bge.n	80086a6 <USB_HC_Init+0x146>
 8008676:	78fb      	ldrb	r3, [r7, #3]
 8008678:	015a      	lsls	r2, r3, #5
 800867a:	693b      	ldr	r3, [r7, #16]
 800867c:	4413      	add	r3, r2
 800867e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	78fa      	ldrb	r2, [r7, #3]
 8008686:	0151      	lsls	r1, r2, #5
 8008688:	693a      	ldr	r2, [r7, #16]
 800868a:	440a      	add	r2, r1
 800868c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008690:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8008694:	60d3      	str	r3, [r2, #12]
 8008696:	e006      	b.n	80086a6 <USB_HC_Init+0x146>
 8008698:	2301      	movs	r3, #1
 800869a:	77fb      	strb	r3, [r7, #31]
 800869c:	e004      	b.n	80086a8 <USB_HC_Init+0x148>
 800869e:	bf00      	nop
 80086a0:	e002      	b.n	80086a8 <USB_HC_Init+0x148>
 80086a2:	bf00      	nop
 80086a4:	e000      	b.n	80086a8 <USB_HC_Init+0x148>
 80086a6:	bf00      	nop
 80086a8:	78fb      	ldrb	r3, [r7, #3]
 80086aa:	015a      	lsls	r2, r3, #5
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	4413      	add	r3, r2
 80086b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086b4:	461a      	mov	r2, r3
 80086b6:	2300      	movs	r3, #0
 80086b8:	6053      	str	r3, [r2, #4]
 80086ba:	78fb      	ldrb	r3, [r7, #3]
 80086bc:	015a      	lsls	r2, r3, #5
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	4413      	add	r3, r2
 80086c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	78fa      	ldrb	r2, [r7, #3]
 80086ca:	0151      	lsls	r1, r2, #5
 80086cc:	693a      	ldr	r2, [r7, #16]
 80086ce:	440a      	add	r2, r1
 80086d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80086d4:	f043 0302 	orr.w	r3, r3, #2
 80086d8:	60d3      	str	r3, [r2, #12]
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80086e0:	699a      	ldr	r2, [r3, #24]
 80086e2:	78fb      	ldrb	r3, [r7, #3]
 80086e4:	f003 030f 	and.w	r3, r3, #15
 80086e8:	2101      	movs	r1, #1
 80086ea:	fa01 f303 	lsl.w	r3, r1, r3
 80086ee:	6939      	ldr	r1, [r7, #16]
 80086f0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80086f4:	4313      	orrs	r3, r2
 80086f6:	618b      	str	r3, [r1, #24]
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	699b      	ldr	r3, [r3, #24]
 80086fc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	619a      	str	r2, [r3, #24]
 8008704:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008708:	2b00      	cmp	r3, #0
 800870a:	da03      	bge.n	8008714 <USB_HC_Init+0x1b4>
 800870c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008710:	61bb      	str	r3, [r7, #24]
 8008712:	e001      	b.n	8008718 <USB_HC_Init+0x1b8>
 8008714:	2300      	movs	r3, #0
 8008716:	61bb      	str	r3, [r7, #24]
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f7ff fef9 	bl	8008510 <USB_GetHostSpeed>
 800871e:	60f8      	str	r0, [r7, #12]
 8008720:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008724:	2b02      	cmp	r3, #2
 8008726:	d106      	bne.n	8008736 <USB_HC_Init+0x1d6>
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	2b02      	cmp	r3, #2
 800872c:	d003      	beq.n	8008736 <USB_HC_Init+0x1d6>
 800872e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8008732:	617b      	str	r3, [r7, #20]
 8008734:	e001      	b.n	800873a <USB_HC_Init+0x1da>
 8008736:	2300      	movs	r3, #0
 8008738:	617b      	str	r3, [r7, #20]
 800873a:	787b      	ldrb	r3, [r7, #1]
 800873c:	059b      	lsls	r3, r3, #22
 800873e:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
 8008742:	78bb      	ldrb	r3, [r7, #2]
 8008744:	02db      	lsls	r3, r3, #11
 8008746:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
 800874a:	431a      	orrs	r2, r3
 800874c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008750:	049b      	lsls	r3, r3, #18
 8008752:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8008756:	431a      	orrs	r2, r3
 8008758:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800875a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800875e:	431a      	orrs	r2, r3
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	431a      	orrs	r2, r3
 8008764:	697b      	ldr	r3, [r7, #20]
 8008766:	4313      	orrs	r3, r2
 8008768:	78fa      	ldrb	r2, [r7, #3]
 800876a:	0151      	lsls	r1, r2, #5
 800876c:	693a      	ldr	r2, [r7, #16]
 800876e:	440a      	add	r2, r1
 8008770:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008774:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008778:	6013      	str	r3, [r2, #0]
 800877a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800877e:	2b03      	cmp	r3, #3
 8008780:	d003      	beq.n	800878a <USB_HC_Init+0x22a>
 8008782:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008786:	2b01      	cmp	r3, #1
 8008788:	d10f      	bne.n	80087aa <USB_HC_Init+0x24a>
 800878a:	78fb      	ldrb	r3, [r7, #3]
 800878c:	015a      	lsls	r2, r3, #5
 800878e:	693b      	ldr	r3, [r7, #16]
 8008790:	4413      	add	r3, r2
 8008792:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	78fa      	ldrb	r2, [r7, #3]
 800879a:	0151      	lsls	r1, r2, #5
 800879c:	693a      	ldr	r2, [r7, #16]
 800879e:	440a      	add	r2, r1
 80087a0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80087a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80087a8:	6013      	str	r3, [r2, #0]
 80087aa:	7ffb      	ldrb	r3, [r7, #31]
 80087ac:	4618      	mov	r0, r3
 80087ae:	3720      	adds	r7, #32
 80087b0:	46bd      	mov	sp, r7
 80087b2:	bd80      	pop	{r7, pc}
 80087b4:	40040000 	.word	0x40040000

080087b8 <USB_HC_StartXfer>:
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b08c      	sub	sp, #48	@ 0x30
 80087bc:	af02      	add	r7, sp, #8
 80087be:	60f8      	str	r0, [r7, #12]
 80087c0:	60b9      	str	r1, [r7, #8]
 80087c2:	4613      	mov	r3, r2
 80087c4:	71fb      	strb	r3, [r7, #7]
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	623b      	str	r3, [r7, #32]
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	785b      	ldrb	r3, [r3, #1]
 80087ce:	61fb      	str	r3, [r7, #28]
 80087d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80087d4:	837b      	strh	r3, [r7, #26]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	4a5d      	ldr	r2, [pc, #372]	@ (8008950 <USB_HC_StartXfer+0x198>)
 80087da:	4293      	cmp	r3, r2
 80087dc:	d12f      	bne.n	800883e <USB_HC_StartXfer+0x86>
 80087de:	79fb      	ldrb	r3, [r7, #7]
 80087e0:	2b01      	cmp	r3, #1
 80087e2:	d11c      	bne.n	800881e <USB_HC_StartXfer+0x66>
 80087e4:	68bb      	ldr	r3, [r7, #8]
 80087e6:	7c9b      	ldrb	r3, [r3, #18]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d003      	beq.n	80087f4 <USB_HC_StartXfer+0x3c>
 80087ec:	68bb      	ldr	r3, [r7, #8]
 80087ee:	7c9b      	ldrb	r3, [r3, #18]
 80087f0:	2b02      	cmp	r3, #2
 80087f2:	d124      	bne.n	800883e <USB_HC_StartXfer+0x86>
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	799b      	ldrb	r3, [r3, #6]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d120      	bne.n	800883e <USB_HC_StartXfer+0x86>
 80087fc:	69fb      	ldr	r3, [r7, #28]
 80087fe:	015a      	lsls	r2, r3, #5
 8008800:	6a3b      	ldr	r3, [r7, #32]
 8008802:	4413      	add	r3, r2
 8008804:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	69fa      	ldr	r2, [r7, #28]
 800880c:	0151      	lsls	r1, r2, #5
 800880e:	6a3a      	ldr	r2, [r7, #32]
 8008810:	440a      	add	r2, r1
 8008812:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800881a:	60d3      	str	r3, [r2, #12]
 800881c:	e00f      	b.n	800883e <USB_HC_StartXfer+0x86>
 800881e:	68bb      	ldr	r3, [r7, #8]
 8008820:	791b      	ldrb	r3, [r3, #4]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d10b      	bne.n	800883e <USB_HC_StartXfer+0x86>
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	795b      	ldrb	r3, [r3, #5]
 800882a:	2b01      	cmp	r3, #1
 800882c:	d107      	bne.n	800883e <USB_HC_StartXfer+0x86>
 800882e:	68bb      	ldr	r3, [r7, #8]
 8008830:	785b      	ldrb	r3, [r3, #1]
 8008832:	4619      	mov	r1, r3
 8008834:	68f8      	ldr	r0, [r7, #12]
 8008836:	f000 fb6b 	bl	8008f10 <USB_DoPing>
 800883a:	2300      	movs	r3, #0
 800883c:	e232      	b.n	8008ca4 <USB_HC_StartXfer+0x4ec>
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	799b      	ldrb	r3, [r3, #6]
 8008842:	2b01      	cmp	r3, #1
 8008844:	d158      	bne.n	80088f8 <USB_HC_StartXfer+0x140>
 8008846:	2301      	movs	r3, #1
 8008848:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800884a:	68bb      	ldr	r3, [r7, #8]
 800884c:	78db      	ldrb	r3, [r3, #3]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d007      	beq.n	8008862 <USB_HC_StartXfer+0xaa>
 8008852:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008854:	68ba      	ldr	r2, [r7, #8]
 8008856:	8a92      	ldrh	r2, [r2, #20]
 8008858:	fb03 f202 	mul.w	r2, r3, r2
 800885c:	68bb      	ldr	r3, [r7, #8]
 800885e:	61da      	str	r2, [r3, #28]
 8008860:	e07c      	b.n	800895c <USB_HC_StartXfer+0x1a4>
 8008862:	68bb      	ldr	r3, [r7, #8]
 8008864:	7c9b      	ldrb	r3, [r3, #18]
 8008866:	2b01      	cmp	r3, #1
 8008868:	d130      	bne.n	80088cc <USB_HC_StartXfer+0x114>
 800886a:	68bb      	ldr	r3, [r7, #8]
 800886c:	6a1b      	ldr	r3, [r3, #32]
 800886e:	2bbc      	cmp	r3, #188	@ 0xbc
 8008870:	d918      	bls.n	80088a4 <USB_HC_StartXfer+0xec>
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	8a9b      	ldrh	r3, [r3, #20]
 8008876:	461a      	mov	r2, r3
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	61da      	str	r2, [r3, #28]
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	69da      	ldr	r2, [r3, #28]
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	621a      	str	r2, [r3, #32]
 8008884:	68bb      	ldr	r3, [r7, #8]
 8008886:	68db      	ldr	r3, [r3, #12]
 8008888:	2b01      	cmp	r3, #1
 800888a:	d003      	beq.n	8008894 <USB_HC_StartXfer+0xdc>
 800888c:	68bb      	ldr	r3, [r7, #8]
 800888e:	68db      	ldr	r3, [r3, #12]
 8008890:	2b02      	cmp	r3, #2
 8008892:	d103      	bne.n	800889c <USB_HC_StartXfer+0xe4>
 8008894:	68bb      	ldr	r3, [r7, #8]
 8008896:	2202      	movs	r2, #2
 8008898:	60da      	str	r2, [r3, #12]
 800889a:	e05f      	b.n	800895c <USB_HC_StartXfer+0x1a4>
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	2201      	movs	r2, #1
 80088a0:	60da      	str	r2, [r3, #12]
 80088a2:	e05b      	b.n	800895c <USB_HC_StartXfer+0x1a4>
 80088a4:	68bb      	ldr	r3, [r7, #8]
 80088a6:	6a1a      	ldr	r2, [r3, #32]
 80088a8:	68bb      	ldr	r3, [r7, #8]
 80088aa:	61da      	str	r2, [r3, #28]
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	68db      	ldr	r3, [r3, #12]
 80088b0:	2b01      	cmp	r3, #1
 80088b2:	d007      	beq.n	80088c4 <USB_HC_StartXfer+0x10c>
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	68db      	ldr	r3, [r3, #12]
 80088b8:	2b02      	cmp	r3, #2
 80088ba:	d003      	beq.n	80088c4 <USB_HC_StartXfer+0x10c>
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	2204      	movs	r2, #4
 80088c0:	60da      	str	r2, [r3, #12]
 80088c2:	e04b      	b.n	800895c <USB_HC_StartXfer+0x1a4>
 80088c4:	68bb      	ldr	r3, [r7, #8]
 80088c6:	2203      	movs	r2, #3
 80088c8:	60da      	str	r2, [r3, #12]
 80088ca:	e047      	b.n	800895c <USB_HC_StartXfer+0x1a4>
 80088cc:	79fb      	ldrb	r3, [r7, #7]
 80088ce:	2b01      	cmp	r3, #1
 80088d0:	d10d      	bne.n	80088ee <USB_HC_StartXfer+0x136>
 80088d2:	68bb      	ldr	r3, [r7, #8]
 80088d4:	6a1b      	ldr	r3, [r3, #32]
 80088d6:	68ba      	ldr	r2, [r7, #8]
 80088d8:	8a92      	ldrh	r2, [r2, #20]
 80088da:	4293      	cmp	r3, r2
 80088dc:	d907      	bls.n	80088ee <USB_HC_StartXfer+0x136>
 80088de:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80088e0:	68ba      	ldr	r2, [r7, #8]
 80088e2:	8a92      	ldrh	r2, [r2, #20]
 80088e4:	fb03 f202 	mul.w	r2, r3, r2
 80088e8:	68bb      	ldr	r3, [r7, #8]
 80088ea:	61da      	str	r2, [r3, #28]
 80088ec:	e036      	b.n	800895c <USB_HC_StartXfer+0x1a4>
 80088ee:	68bb      	ldr	r3, [r7, #8]
 80088f0:	6a1a      	ldr	r2, [r3, #32]
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	61da      	str	r2, [r3, #28]
 80088f6:	e031      	b.n	800895c <USB_HC_StartXfer+0x1a4>
 80088f8:	68bb      	ldr	r3, [r7, #8]
 80088fa:	6a1b      	ldr	r3, [r3, #32]
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d018      	beq.n	8008932 <USB_HC_StartXfer+0x17a>
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	6a1b      	ldr	r3, [r3, #32]
 8008904:	68ba      	ldr	r2, [r7, #8]
 8008906:	8a92      	ldrh	r2, [r2, #20]
 8008908:	4413      	add	r3, r2
 800890a:	3b01      	subs	r3, #1
 800890c:	68ba      	ldr	r2, [r7, #8]
 800890e:	8a92      	ldrh	r2, [r2, #20]
 8008910:	fbb3 f3f2 	udiv	r3, r3, r2
 8008914:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008916:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8008918:	8b7b      	ldrh	r3, [r7, #26]
 800891a:	429a      	cmp	r2, r3
 800891c:	d90b      	bls.n	8008936 <USB_HC_StartXfer+0x17e>
 800891e:	8b7b      	ldrh	r3, [r7, #26]
 8008920:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008922:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008924:	68ba      	ldr	r2, [r7, #8]
 8008926:	8a92      	ldrh	r2, [r2, #20]
 8008928:	fb03 f202 	mul.w	r2, r3, r2
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	61da      	str	r2, [r3, #28]
 8008930:	e001      	b.n	8008936 <USB_HC_StartXfer+0x17e>
 8008932:	2301      	movs	r3, #1
 8008934:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	78db      	ldrb	r3, [r3, #3]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d00a      	beq.n	8008954 <USB_HC_StartXfer+0x19c>
 800893e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008940:	68ba      	ldr	r2, [r7, #8]
 8008942:	8a92      	ldrh	r2, [r2, #20]
 8008944:	fb03 f202 	mul.w	r2, r3, r2
 8008948:	68bb      	ldr	r3, [r7, #8]
 800894a:	61da      	str	r2, [r3, #28]
 800894c:	e006      	b.n	800895c <USB_HC_StartXfer+0x1a4>
 800894e:	bf00      	nop
 8008950:	40040000 	.word	0x40040000
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	6a1a      	ldr	r2, [r3, #32]
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	61da      	str	r2, [r3, #28]
 800895c:	68bb      	ldr	r3, [r7, #8]
 800895e:	69db      	ldr	r3, [r3, #28]
 8008960:	f3c3 0212 	ubfx	r2, r3, #0, #19
 8008964:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008966:	04d9      	lsls	r1, r3, #19
 8008968:	4ba3      	ldr	r3, [pc, #652]	@ (8008bf8 <USB_HC_StartXfer+0x440>)
 800896a:	400b      	ands	r3, r1
 800896c:	431a      	orrs	r2, r3
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	7d9b      	ldrb	r3, [r3, #22]
 8008972:	075b      	lsls	r3, r3, #29
 8008974:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008978:	69f9      	ldr	r1, [r7, #28]
 800897a:	0148      	lsls	r0, r1, #5
 800897c:	6a39      	ldr	r1, [r7, #32]
 800897e:	4401      	add	r1, r0
 8008980:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8008984:	4313      	orrs	r3, r2
 8008986:	610b      	str	r3, [r1, #16]
 8008988:	79fb      	ldrb	r3, [r7, #7]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d009      	beq.n	80089a2 <USB_HC_StartXfer+0x1ea>
 800898e:	68bb      	ldr	r3, [r7, #8]
 8008990:	6999      	ldr	r1, [r3, #24]
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	015a      	lsls	r2, r3, #5
 8008996:	6a3b      	ldr	r3, [r7, #32]
 8008998:	4413      	add	r3, r2
 800899a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800899e:	460a      	mov	r2, r1
 80089a0:	615a      	str	r2, [r3, #20]
 80089a2:	6a3b      	ldr	r3, [r7, #32]
 80089a4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80089a8:	689b      	ldr	r3, [r3, #8]
 80089aa:	f003 0301 	and.w	r3, r3, #1
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	bf0c      	ite	eq
 80089b2:	2301      	moveq	r3, #1
 80089b4:	2300      	movne	r3, #0
 80089b6:	b2db      	uxtb	r3, r3
 80089b8:	767b      	strb	r3, [r7, #25]
 80089ba:	69fb      	ldr	r3, [r7, #28]
 80089bc:	015a      	lsls	r2, r3, #5
 80089be:	6a3b      	ldr	r3, [r7, #32]
 80089c0:	4413      	add	r3, r2
 80089c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	69fa      	ldr	r2, [r7, #28]
 80089ca:	0151      	lsls	r1, r2, #5
 80089cc:	6a3a      	ldr	r2, [r7, #32]
 80089ce:	440a      	add	r2, r1
 80089d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089d4:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80089d8:	6013      	str	r3, [r2, #0]
 80089da:	69fb      	ldr	r3, [r7, #28]
 80089dc:	015a      	lsls	r2, r3, #5
 80089de:	6a3b      	ldr	r3, [r7, #32]
 80089e0:	4413      	add	r3, r2
 80089e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089e6:	681a      	ldr	r2, [r3, #0]
 80089e8:	7e7b      	ldrb	r3, [r7, #25]
 80089ea:	075b      	lsls	r3, r3, #29
 80089ec:	69f9      	ldr	r1, [r7, #28]
 80089ee:	0148      	lsls	r0, r1, #5
 80089f0:	6a39      	ldr	r1, [r7, #32]
 80089f2:	4401      	add	r1, r0
 80089f4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80089f8:	4313      	orrs	r3, r2
 80089fa:	600b      	str	r3, [r1, #0]
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	799b      	ldrb	r3, [r3, #6]
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	f040 80c3 	bne.w	8008b8c <USB_HC_StartXfer+0x3d4>
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	7c5b      	ldrb	r3, [r3, #17]
 8008a0a:	01db      	lsls	r3, r3, #7
 8008a0c:	68ba      	ldr	r2, [r7, #8]
 8008a0e:	7c12      	ldrb	r2, [r2, #16]
 8008a10:	4313      	orrs	r3, r2
 8008a12:	69fa      	ldr	r2, [r7, #28]
 8008a14:	0151      	lsls	r1, r2, #5
 8008a16:	6a3a      	ldr	r2, [r7, #32]
 8008a18:	440a      	add	r2, r1
 8008a1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008a22:	6053      	str	r3, [r2, #4]
 8008a24:	69fb      	ldr	r3, [r7, #28]
 8008a26:	015a      	lsls	r2, r3, #5
 8008a28:	6a3b      	ldr	r3, [r7, #32]
 8008a2a:	4413      	add	r3, r2
 8008a2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	69fa      	ldr	r2, [r7, #28]
 8008a34:	0151      	lsls	r1, r2, #5
 8008a36:	6a3a      	ldr	r2, [r7, #32]
 8008a38:	440a      	add	r2, r1
 8008a3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a3e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008a42:	60d3      	str	r3, [r2, #12]
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	79db      	ldrb	r3, [r3, #7]
 8008a48:	2b01      	cmp	r3, #1
 8008a4a:	d123      	bne.n	8008a94 <USB_HC_StartXfer+0x2dc>
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	78db      	ldrb	r3, [r3, #3]
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d11f      	bne.n	8008a94 <USB_HC_StartXfer+0x2dc>
 8008a54:	69fb      	ldr	r3, [r7, #28]
 8008a56:	015a      	lsls	r2, r3, #5
 8008a58:	6a3b      	ldr	r3, [r7, #32]
 8008a5a:	4413      	add	r3, r2
 8008a5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a60:	685b      	ldr	r3, [r3, #4]
 8008a62:	69fa      	ldr	r2, [r7, #28]
 8008a64:	0151      	lsls	r1, r2, #5
 8008a66:	6a3a      	ldr	r2, [r7, #32]
 8008a68:	440a      	add	r2, r1
 8008a6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a72:	6053      	str	r3, [r2, #4]
 8008a74:	69fb      	ldr	r3, [r7, #28]
 8008a76:	015a      	lsls	r2, r3, #5
 8008a78:	6a3b      	ldr	r3, [r7, #32]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a80:	68db      	ldr	r3, [r3, #12]
 8008a82:	69fa      	ldr	r2, [r7, #28]
 8008a84:	0151      	lsls	r1, r2, #5
 8008a86:	6a3a      	ldr	r2, [r7, #32]
 8008a88:	440a      	add	r2, r1
 8008a8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a8e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008a92:	60d3      	str	r3, [r2, #12]
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	7c9b      	ldrb	r3, [r3, #18]
 8008a98:	2b01      	cmp	r3, #1
 8008a9a:	d003      	beq.n	8008aa4 <USB_HC_StartXfer+0x2ec>
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	7c9b      	ldrb	r3, [r3, #18]
 8008aa0:	2b03      	cmp	r3, #3
 8008aa2:	d117      	bne.n	8008ad4 <USB_HC_StartXfer+0x31c>
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	79db      	ldrb	r3, [r3, #7]
 8008aa8:	2b01      	cmp	r3, #1
 8008aaa:	d113      	bne.n	8008ad4 <USB_HC_StartXfer+0x31c>
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	78db      	ldrb	r3, [r3, #3]
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d10f      	bne.n	8008ad4 <USB_HC_StartXfer+0x31c>
 8008ab4:	69fb      	ldr	r3, [r7, #28]
 8008ab6:	015a      	lsls	r2, r3, #5
 8008ab8:	6a3b      	ldr	r3, [r7, #32]
 8008aba:	4413      	add	r3, r2
 8008abc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ac0:	685b      	ldr	r3, [r3, #4]
 8008ac2:	69fa      	ldr	r2, [r7, #28]
 8008ac4:	0151      	lsls	r1, r2, #5
 8008ac6:	6a3a      	ldr	r2, [r7, #32]
 8008ac8:	440a      	add	r2, r1
 8008aca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ace:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008ad2:	6053      	str	r3, [r2, #4]
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	7c9b      	ldrb	r3, [r3, #18]
 8008ad8:	2b01      	cmp	r3, #1
 8008ada:	d162      	bne.n	8008ba2 <USB_HC_StartXfer+0x3ea>
 8008adc:	68bb      	ldr	r3, [r7, #8]
 8008ade:	78db      	ldrb	r3, [r3, #3]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d15e      	bne.n	8008ba2 <USB_HC_StartXfer+0x3ea>
 8008ae4:	68bb      	ldr	r3, [r7, #8]
 8008ae6:	68db      	ldr	r3, [r3, #12]
 8008ae8:	3b01      	subs	r3, #1
 8008aea:	2b03      	cmp	r3, #3
 8008aec:	d858      	bhi.n	8008ba0 <USB_HC_StartXfer+0x3e8>
 8008aee:	a201      	add	r2, pc, #4	@ (adr r2, 8008af4 <USB_HC_StartXfer+0x33c>)
 8008af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008af4:	08008b05 	.word	0x08008b05
 8008af8:	08008b27 	.word	0x08008b27
 8008afc:	08008b49 	.word	0x08008b49
 8008b00:	08008b6b 	.word	0x08008b6b
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	015a      	lsls	r2, r3, #5
 8008b08:	6a3b      	ldr	r3, [r7, #32]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	69fa      	ldr	r2, [r7, #28]
 8008b14:	0151      	lsls	r1, r2, #5
 8008b16:	6a3a      	ldr	r2, [r7, #32]
 8008b18:	440a      	add	r2, r1
 8008b1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b1e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008b22:	6053      	str	r3, [r2, #4]
 8008b24:	e03d      	b.n	8008ba2 <USB_HC_StartXfer+0x3ea>
 8008b26:	69fb      	ldr	r3, [r7, #28]
 8008b28:	015a      	lsls	r2, r3, #5
 8008b2a:	6a3b      	ldr	r3, [r7, #32]
 8008b2c:	4413      	add	r3, r2
 8008b2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b32:	685b      	ldr	r3, [r3, #4]
 8008b34:	69fa      	ldr	r2, [r7, #28]
 8008b36:	0151      	lsls	r1, r2, #5
 8008b38:	6a3a      	ldr	r2, [r7, #32]
 8008b3a:	440a      	add	r2, r1
 8008b3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b40:	f043 030e 	orr.w	r3, r3, #14
 8008b44:	6053      	str	r3, [r2, #4]
 8008b46:	e02c      	b.n	8008ba2 <USB_HC_StartXfer+0x3ea>
 8008b48:	69fb      	ldr	r3, [r7, #28]
 8008b4a:	015a      	lsls	r2, r3, #5
 8008b4c:	6a3b      	ldr	r3, [r7, #32]
 8008b4e:	4413      	add	r3, r2
 8008b50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b54:	685b      	ldr	r3, [r3, #4]
 8008b56:	69fa      	ldr	r2, [r7, #28]
 8008b58:	0151      	lsls	r1, r2, #5
 8008b5a:	6a3a      	ldr	r2, [r7, #32]
 8008b5c:	440a      	add	r2, r1
 8008b5e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008b66:	6053      	str	r3, [r2, #4]
 8008b68:	e01b      	b.n	8008ba2 <USB_HC_StartXfer+0x3ea>
 8008b6a:	69fb      	ldr	r3, [r7, #28]
 8008b6c:	015a      	lsls	r2, r3, #5
 8008b6e:	6a3b      	ldr	r3, [r7, #32]
 8008b70:	4413      	add	r3, r2
 8008b72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b76:	685b      	ldr	r3, [r3, #4]
 8008b78:	69fa      	ldr	r2, [r7, #28]
 8008b7a:	0151      	lsls	r1, r2, #5
 8008b7c:	6a3a      	ldr	r2, [r7, #32]
 8008b7e:	440a      	add	r2, r1
 8008b80:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b84:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8008b88:	6053      	str	r3, [r2, #4]
 8008b8a:	e00a      	b.n	8008ba2 <USB_HC_StartXfer+0x3ea>
 8008b8c:	69fb      	ldr	r3, [r7, #28]
 8008b8e:	015a      	lsls	r2, r3, #5
 8008b90:	6a3b      	ldr	r3, [r7, #32]
 8008b92:	4413      	add	r3, r2
 8008b94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b98:	461a      	mov	r2, r3
 8008b9a:	2300      	movs	r3, #0
 8008b9c:	6053      	str	r3, [r2, #4]
 8008b9e:	e000      	b.n	8008ba2 <USB_HC_StartXfer+0x3ea>
 8008ba0:	bf00      	nop
 8008ba2:	69fb      	ldr	r3, [r7, #28]
 8008ba4:	015a      	lsls	r2, r3, #5
 8008ba6:	6a3b      	ldr	r3, [r7, #32]
 8008ba8:	4413      	add	r3, r2
 8008baa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	613b      	str	r3, [r7, #16]
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008bb8:	613b      	str	r3, [r7, #16]
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	78db      	ldrb	r3, [r3, #3]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d004      	beq.n	8008bcc <USB_HC_StartXfer+0x414>
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008bc8:	613b      	str	r3, [r7, #16]
 8008bca:	e003      	b.n	8008bd4 <USB_HC_StartXfer+0x41c>
 8008bcc:	693b      	ldr	r3, [r7, #16]
 8008bce:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008bd2:	613b      	str	r3, [r7, #16]
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008bda:	613b      	str	r3, [r7, #16]
 8008bdc:	69fb      	ldr	r3, [r7, #28]
 8008bde:	015a      	lsls	r2, r3, #5
 8008be0:	6a3b      	ldr	r3, [r7, #32]
 8008be2:	4413      	add	r3, r2
 8008be4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008be8:	461a      	mov	r2, r3
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	6013      	str	r3, [r2, #0]
 8008bee:	79fb      	ldrb	r3, [r7, #7]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d003      	beq.n	8008bfc <USB_HC_StartXfer+0x444>
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	e055      	b.n	8008ca4 <USB_HC_StartXfer+0x4ec>
 8008bf8:	1ff80000 	.word	0x1ff80000
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	78db      	ldrb	r3, [r3, #3]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d14e      	bne.n	8008ca2 <USB_HC_StartXfer+0x4ea>
 8008c04:	68bb      	ldr	r3, [r7, #8]
 8008c06:	6a1b      	ldr	r3, [r3, #32]
 8008c08:	2b00      	cmp	r3, #0
 8008c0a:	d04a      	beq.n	8008ca2 <USB_HC_StartXfer+0x4ea>
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	79db      	ldrb	r3, [r3, #7]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d146      	bne.n	8008ca2 <USB_HC_StartXfer+0x4ea>
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	7c9b      	ldrb	r3, [r3, #18]
 8008c18:	2b03      	cmp	r3, #3
 8008c1a:	d831      	bhi.n	8008c80 <USB_HC_StartXfer+0x4c8>
 8008c1c:	a201      	add	r2, pc, #4	@ (adr r2, 8008c24 <USB_HC_StartXfer+0x46c>)
 8008c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c22:	bf00      	nop
 8008c24:	08008c35 	.word	0x08008c35
 8008c28:	08008c59 	.word	0x08008c59
 8008c2c:	08008c35 	.word	0x08008c35
 8008c30:	08008c59 	.word	0x08008c59
 8008c34:	68bb      	ldr	r3, [r7, #8]
 8008c36:	6a1b      	ldr	r3, [r3, #32]
 8008c38:	3303      	adds	r3, #3
 8008c3a:	089b      	lsrs	r3, r3, #2
 8008c3c:	82fb      	strh	r3, [r7, #22]
 8008c3e:	8afa      	ldrh	r2, [r7, #22]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c44:	b29b      	uxth	r3, r3
 8008c46:	429a      	cmp	r2, r3
 8008c48:	d91c      	bls.n	8008c84 <USB_HC_StartXfer+0x4cc>
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	699b      	ldr	r3, [r3, #24]
 8008c4e:	f043 0220 	orr.w	r2, r3, #32
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	619a      	str	r2, [r3, #24]
 8008c56:	e015      	b.n	8008c84 <USB_HC_StartXfer+0x4cc>
 8008c58:	68bb      	ldr	r3, [r7, #8]
 8008c5a:	6a1b      	ldr	r3, [r3, #32]
 8008c5c:	3303      	adds	r3, #3
 8008c5e:	089b      	lsrs	r3, r3, #2
 8008c60:	82fb      	strh	r3, [r7, #22]
 8008c62:	8afa      	ldrh	r2, [r7, #22]
 8008c64:	6a3b      	ldr	r3, [r7, #32]
 8008c66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008c6a:	691b      	ldr	r3, [r3, #16]
 8008c6c:	b29b      	uxth	r3, r3
 8008c6e:	429a      	cmp	r2, r3
 8008c70:	d90a      	bls.n	8008c88 <USB_HC_StartXfer+0x4d0>
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	699b      	ldr	r3, [r3, #24]
 8008c76:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	619a      	str	r2, [r3, #24]
 8008c7e:	e003      	b.n	8008c88 <USB_HC_StartXfer+0x4d0>
 8008c80:	bf00      	nop
 8008c82:	e002      	b.n	8008c8a <USB_HC_StartXfer+0x4d2>
 8008c84:	bf00      	nop
 8008c86:	e000      	b.n	8008c8a <USB_HC_StartXfer+0x4d2>
 8008c88:	bf00      	nop
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	6999      	ldr	r1, [r3, #24]
 8008c8e:	68bb      	ldr	r3, [r7, #8]
 8008c90:	785a      	ldrb	r2, [r3, #1]
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	6a1b      	ldr	r3, [r3, #32]
 8008c96:	b29b      	uxth	r3, r3
 8008c98:	2000      	movs	r0, #0
 8008c9a:	9000      	str	r0, [sp, #0]
 8008c9c:	68f8      	ldr	r0, [r7, #12]
 8008c9e:	f7ff f9c9 	bl	8008034 <USB_WritePacket>
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	4618      	mov	r0, r3
 8008ca6:	3728      	adds	r7, #40	@ 0x28
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	bd80      	pop	{r7, pc}

08008cac <USB_HC_ReadInterrupt>:
 8008cac:	b480      	push	{r7}
 8008cae:	b085      	sub	sp, #20
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	60fb      	str	r3, [r7, #12]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008cbe:	695b      	ldr	r3, [r3, #20]
 8008cc0:	b29b      	uxth	r3, r3
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	3714      	adds	r7, #20
 8008cc6:	46bd      	mov	sp, r7
 8008cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ccc:	4770      	bx	lr

08008cce <USB_HC_Halt>:
 8008cce:	b480      	push	{r7}
 8008cd0:	b089      	sub	sp, #36	@ 0x24
 8008cd2:	af00      	add	r7, sp, #0
 8008cd4:	6078      	str	r0, [r7, #4]
 8008cd6:	460b      	mov	r3, r1
 8008cd8:	70fb      	strb	r3, [r7, #3]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	61fb      	str	r3, [r7, #28]
 8008cde:	78fb      	ldrb	r3, [r7, #3]
 8008ce0:	61bb      	str	r3, [r7, #24]
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	60bb      	str	r3, [r7, #8]
 8008ce6:	69bb      	ldr	r3, [r7, #24]
 8008ce8:	015a      	lsls	r2, r3, #5
 8008cea:	69fb      	ldr	r3, [r7, #28]
 8008cec:	4413      	add	r3, r2
 8008cee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	0c9b      	lsrs	r3, r3, #18
 8008cf6:	f003 0303 	and.w	r3, r3, #3
 8008cfa:	617b      	str	r3, [r7, #20]
 8008cfc:	69bb      	ldr	r3, [r7, #24]
 8008cfe:	015a      	lsls	r2, r3, #5
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	4413      	add	r3, r2
 8008d04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	0fdb      	lsrs	r3, r3, #31
 8008d0c:	f003 0301 	and.w	r3, r3, #1
 8008d10:	613b      	str	r3, [r7, #16]
 8008d12:	69bb      	ldr	r3, [r7, #24]
 8008d14:	015a      	lsls	r2, r3, #5
 8008d16:	69fb      	ldr	r3, [r7, #28]
 8008d18:	4413      	add	r3, r2
 8008d1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d1e:	685b      	ldr	r3, [r3, #4]
 8008d20:	0fdb      	lsrs	r3, r3, #31
 8008d22:	f003 0301 	and.w	r3, r3, #1
 8008d26:	60fb      	str	r3, [r7, #12]
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	689b      	ldr	r3, [r3, #8]
 8008d2c:	f003 0320 	and.w	r3, r3, #32
 8008d30:	2b20      	cmp	r3, #32
 8008d32:	d10d      	bne.n	8008d50 <USB_HC_Halt+0x82>
 8008d34:	68fb      	ldr	r3, [r7, #12]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d10a      	bne.n	8008d50 <USB_HC_Halt+0x82>
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d005      	beq.n	8008d4c <USB_HC_Halt+0x7e>
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	2b01      	cmp	r3, #1
 8008d44:	d002      	beq.n	8008d4c <USB_HC_Halt+0x7e>
 8008d46:	697b      	ldr	r3, [r7, #20]
 8008d48:	2b03      	cmp	r3, #3
 8008d4a:	d101      	bne.n	8008d50 <USB_HC_Halt+0x82>
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	e0d8      	b.n	8008f02 <USB_HC_Halt+0x234>
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d002      	beq.n	8008d5c <USB_HC_Halt+0x8e>
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	2b02      	cmp	r3, #2
 8008d5a:	d173      	bne.n	8008e44 <USB_HC_Halt+0x176>
 8008d5c:	69bb      	ldr	r3, [r7, #24]
 8008d5e:	015a      	lsls	r2, r3, #5
 8008d60:	69fb      	ldr	r3, [r7, #28]
 8008d62:	4413      	add	r3, r2
 8008d64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	69ba      	ldr	r2, [r7, #24]
 8008d6c:	0151      	lsls	r1, r2, #5
 8008d6e:	69fa      	ldr	r2, [r7, #28]
 8008d70:	440a      	add	r2, r1
 8008d72:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d76:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008d7a:	6013      	str	r3, [r2, #0]
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	f003 0320 	and.w	r3, r3, #32
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d14a      	bne.n	8008e1e <USB_HC_Halt+0x150>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d8c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d133      	bne.n	8008dfc <USB_HC_Halt+0x12e>
 8008d94:	69bb      	ldr	r3, [r7, #24]
 8008d96:	015a      	lsls	r2, r3, #5
 8008d98:	69fb      	ldr	r3, [r7, #28]
 8008d9a:	4413      	add	r3, r2
 8008d9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	69ba      	ldr	r2, [r7, #24]
 8008da4:	0151      	lsls	r1, r2, #5
 8008da6:	69fa      	ldr	r2, [r7, #28]
 8008da8:	440a      	add	r2, r1
 8008daa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008dae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008db2:	6013      	str	r3, [r2, #0]
 8008db4:	69bb      	ldr	r3, [r7, #24]
 8008db6:	015a      	lsls	r2, r3, #5
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	4413      	add	r3, r2
 8008dbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	69ba      	ldr	r2, [r7, #24]
 8008dc4:	0151      	lsls	r1, r2, #5
 8008dc6:	69fa      	ldr	r2, [r7, #28]
 8008dc8:	440a      	add	r2, r1
 8008dca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008dce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008dd2:	6013      	str	r3, [r2, #0]
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	3301      	adds	r3, #1
 8008dd8:	60bb      	str	r3, [r7, #8]
 8008dda:	68bb      	ldr	r3, [r7, #8]
 8008ddc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008de0:	d82e      	bhi.n	8008e40 <USB_HC_Halt+0x172>
 8008de2:	69bb      	ldr	r3, [r7, #24]
 8008de4:	015a      	lsls	r2, r3, #5
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	4413      	add	r3, r2
 8008dea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008df4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008df8:	d0ec      	beq.n	8008dd4 <USB_HC_Halt+0x106>
 8008dfa:	e081      	b.n	8008f00 <USB_HC_Halt+0x232>
 8008dfc:	69bb      	ldr	r3, [r7, #24]
 8008dfe:	015a      	lsls	r2, r3, #5
 8008e00:	69fb      	ldr	r3, [r7, #28]
 8008e02:	4413      	add	r3, r2
 8008e04:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	69ba      	ldr	r2, [r7, #24]
 8008e0c:	0151      	lsls	r1, r2, #5
 8008e0e:	69fa      	ldr	r2, [r7, #28]
 8008e10:	440a      	add	r2, r1
 8008e12:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008e1a:	6013      	str	r3, [r2, #0]
 8008e1c:	e070      	b.n	8008f00 <USB_HC_Halt+0x232>
 8008e1e:	69bb      	ldr	r3, [r7, #24]
 8008e20:	015a      	lsls	r2, r3, #5
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	4413      	add	r3, r2
 8008e26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	69ba      	ldr	r2, [r7, #24]
 8008e2e:	0151      	lsls	r1, r2, #5
 8008e30:	69fa      	ldr	r2, [r7, #28]
 8008e32:	440a      	add	r2, r1
 8008e34:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e38:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008e3c:	6013      	str	r3, [r2, #0]
 8008e3e:	e05f      	b.n	8008f00 <USB_HC_Halt+0x232>
 8008e40:	bf00      	nop
 8008e42:	e05d      	b.n	8008f00 <USB_HC_Halt+0x232>
 8008e44:	69bb      	ldr	r3, [r7, #24]
 8008e46:	015a      	lsls	r2, r3, #5
 8008e48:	69fb      	ldr	r3, [r7, #28]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	69ba      	ldr	r2, [r7, #24]
 8008e54:	0151      	lsls	r1, r2, #5
 8008e56:	69fa      	ldr	r2, [r7, #28]
 8008e58:	440a      	add	r2, r1
 8008e5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e5e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008e62:	6013      	str	r3, [r2, #0]
 8008e64:	69fb      	ldr	r3, [r7, #28]
 8008e66:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008e6a:	691b      	ldr	r3, [r3, #16]
 8008e6c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008e70:	2b00      	cmp	r3, #0
 8008e72:	d133      	bne.n	8008edc <USB_HC_Halt+0x20e>
 8008e74:	69bb      	ldr	r3, [r7, #24]
 8008e76:	015a      	lsls	r2, r3, #5
 8008e78:	69fb      	ldr	r3, [r7, #28]
 8008e7a:	4413      	add	r3, r2
 8008e7c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	69ba      	ldr	r2, [r7, #24]
 8008e84:	0151      	lsls	r1, r2, #5
 8008e86:	69fa      	ldr	r2, [r7, #28]
 8008e88:	440a      	add	r2, r1
 8008e8a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e8e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008e92:	6013      	str	r3, [r2, #0]
 8008e94:	69bb      	ldr	r3, [r7, #24]
 8008e96:	015a      	lsls	r2, r3, #5
 8008e98:	69fb      	ldr	r3, [r7, #28]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	69ba      	ldr	r2, [r7, #24]
 8008ea4:	0151      	lsls	r1, r2, #5
 8008ea6:	69fa      	ldr	r2, [r7, #28]
 8008ea8:	440a      	add	r2, r1
 8008eaa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008eae:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008eb2:	6013      	str	r3, [r2, #0]
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	3301      	adds	r3, #1
 8008eb8:	60bb      	str	r3, [r7, #8]
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008ec0:	d81d      	bhi.n	8008efe <USB_HC_Halt+0x230>
 8008ec2:	69bb      	ldr	r3, [r7, #24]
 8008ec4:	015a      	lsls	r2, r3, #5
 8008ec6:	69fb      	ldr	r3, [r7, #28]
 8008ec8:	4413      	add	r3, r2
 8008eca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ed4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ed8:	d0ec      	beq.n	8008eb4 <USB_HC_Halt+0x1e6>
 8008eda:	e011      	b.n	8008f00 <USB_HC_Halt+0x232>
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	015a      	lsls	r2, r3, #5
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	69ba      	ldr	r2, [r7, #24]
 8008eec:	0151      	lsls	r1, r2, #5
 8008eee:	69fa      	ldr	r2, [r7, #28]
 8008ef0:	440a      	add	r2, r1
 8008ef2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ef6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008efa:	6013      	str	r3, [r2, #0]
 8008efc:	e000      	b.n	8008f00 <USB_HC_Halt+0x232>
 8008efe:	bf00      	nop
 8008f00:	2300      	movs	r3, #0
 8008f02:	4618      	mov	r0, r3
 8008f04:	3724      	adds	r7, #36	@ 0x24
 8008f06:	46bd      	mov	sp, r7
 8008f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0c:	4770      	bx	lr
	...

08008f10 <USB_DoPing>:
 8008f10:	b480      	push	{r7}
 8008f12:	b087      	sub	sp, #28
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	460b      	mov	r3, r1
 8008f1a:	70fb      	strb	r3, [r7, #3]
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	617b      	str	r3, [r7, #20]
 8008f20:	78fb      	ldrb	r3, [r7, #3]
 8008f22:	613b      	str	r3, [r7, #16]
 8008f24:	2301      	movs	r3, #1
 8008f26:	60fb      	str	r3, [r7, #12]
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	04da      	lsls	r2, r3, #19
 8008f2c:	4b15      	ldr	r3, [pc, #84]	@ (8008f84 <USB_DoPing+0x74>)
 8008f2e:	4013      	ands	r3, r2
 8008f30:	693a      	ldr	r2, [r7, #16]
 8008f32:	0151      	lsls	r1, r2, #5
 8008f34:	697a      	ldr	r2, [r7, #20]
 8008f36:	440a      	add	r2, r1
 8008f38:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008f3c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008f40:	6113      	str	r3, [r2, #16]
 8008f42:	693b      	ldr	r3, [r7, #16]
 8008f44:	015a      	lsls	r2, r3, #5
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	4413      	add	r3, r2
 8008f4a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	60bb      	str	r3, [r7, #8]
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008f58:	60bb      	str	r3, [r7, #8]
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008f60:	60bb      	str	r3, [r7, #8]
 8008f62:	693b      	ldr	r3, [r7, #16]
 8008f64:	015a      	lsls	r2, r3, #5
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	4413      	add	r3, r2
 8008f6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f6e:	461a      	mov	r2, r3
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	6013      	str	r3, [r2, #0]
 8008f74:	2300      	movs	r3, #0
 8008f76:	4618      	mov	r0, r3
 8008f78:	371c      	adds	r7, #28
 8008f7a:	46bd      	mov	sp, r7
 8008f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f80:	4770      	bx	lr
 8008f82:	bf00      	nop
 8008f84:	1ff80000 	.word	0x1ff80000

08008f88 <USB_StopHost>:
 8008f88:	b580      	push	{r7, lr}
 8008f8a:	b088      	sub	sp, #32
 8008f8c:	af00      	add	r7, sp, #0
 8008f8e:	6078      	str	r0, [r7, #4]
 8008f90:	2300      	movs	r3, #0
 8008f92:	77fb      	strb	r3, [r7, #31]
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	617b      	str	r3, [r7, #20]
 8008f98:	2300      	movs	r3, #0
 8008f9a:	60fb      	str	r3, [r7, #12]
 8008f9c:	6878      	ldr	r0, [r7, #4]
 8008f9e:	f7fe ff8c 	bl	8007eba <USB_DisableGlobalInt>
 8008fa2:	2110      	movs	r1, #16
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f7fe ffe5 	bl	8007f74 <USB_FlushTxFifo>
 8008faa:	4603      	mov	r3, r0
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d001      	beq.n	8008fb4 <USB_StopHost+0x2c>
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	77fb      	strb	r3, [r7, #31]
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	f7ff f80f 	bl	8007fd8 <USB_FlushRxFifo>
 8008fba:	4603      	mov	r3, r0
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d001      	beq.n	8008fc4 <USB_StopHost+0x3c>
 8008fc0:	2301      	movs	r3, #1
 8008fc2:	77fb      	strb	r3, [r7, #31]
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	61bb      	str	r3, [r7, #24]
 8008fc8:	e01f      	b.n	800900a <USB_StopHost+0x82>
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	015a      	lsls	r2, r3, #5
 8008fce:	697b      	ldr	r3, [r7, #20]
 8008fd0:	4413      	add	r3, r2
 8008fd2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	613b      	str	r3, [r7, #16]
 8008fda:	693b      	ldr	r3, [r7, #16]
 8008fdc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008fe0:	613b      	str	r3, [r7, #16]
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008fe8:	613b      	str	r3, [r7, #16]
 8008fea:	693b      	ldr	r3, [r7, #16]
 8008fec:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008ff0:	613b      	str	r3, [r7, #16]
 8008ff2:	69bb      	ldr	r3, [r7, #24]
 8008ff4:	015a      	lsls	r2, r3, #5
 8008ff6:	697b      	ldr	r3, [r7, #20]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ffe:	461a      	mov	r2, r3
 8009000:	693b      	ldr	r3, [r7, #16]
 8009002:	6013      	str	r3, [r2, #0]
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	3301      	adds	r3, #1
 8009008:	61bb      	str	r3, [r7, #24]
 800900a:	69bb      	ldr	r3, [r7, #24]
 800900c:	2b0f      	cmp	r3, #15
 800900e:	d9dc      	bls.n	8008fca <USB_StopHost+0x42>
 8009010:	2300      	movs	r3, #0
 8009012:	61bb      	str	r3, [r7, #24]
 8009014:	e034      	b.n	8009080 <USB_StopHost+0xf8>
 8009016:	69bb      	ldr	r3, [r7, #24]
 8009018:	015a      	lsls	r2, r3, #5
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	4413      	add	r3, r2
 800901e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	613b      	str	r3, [r7, #16]
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800902c:	613b      	str	r3, [r7, #16]
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009034:	613b      	str	r3, [r7, #16]
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800903c:	613b      	str	r3, [r7, #16]
 800903e:	69bb      	ldr	r3, [r7, #24]
 8009040:	015a      	lsls	r2, r3, #5
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	4413      	add	r3, r2
 8009046:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800904a:	461a      	mov	r2, r3
 800904c:	693b      	ldr	r3, [r7, #16]
 800904e:	6013      	str	r3, [r2, #0]
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	3301      	adds	r3, #1
 8009054:	60fb      	str	r3, [r7, #12]
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800905c:	d80c      	bhi.n	8009078 <USB_StopHost+0xf0>
 800905e:	69bb      	ldr	r3, [r7, #24]
 8009060:	015a      	lsls	r2, r3, #5
 8009062:	697b      	ldr	r3, [r7, #20]
 8009064:	4413      	add	r3, r2
 8009066:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009070:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009074:	d0ec      	beq.n	8009050 <USB_StopHost+0xc8>
 8009076:	e000      	b.n	800907a <USB_StopHost+0xf2>
 8009078:	bf00      	nop
 800907a:	69bb      	ldr	r3, [r7, #24]
 800907c:	3301      	adds	r3, #1
 800907e:	61bb      	str	r3, [r7, #24]
 8009080:	69bb      	ldr	r3, [r7, #24]
 8009082:	2b0f      	cmp	r3, #15
 8009084:	d9c7      	bls.n	8009016 <USB_StopHost+0x8e>
 8009086:	697b      	ldr	r3, [r7, #20]
 8009088:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800908c:	461a      	mov	r2, r3
 800908e:	f04f 33ff 	mov.w	r3, #4294967295
 8009092:	6153      	str	r3, [r2, #20]
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	f04f 32ff 	mov.w	r2, #4294967295
 800909a:	615a      	str	r2, [r3, #20]
 800909c:	6878      	ldr	r0, [r7, #4]
 800909e:	f7fe fefb 	bl	8007e98 <USB_EnableGlobalInt>
 80090a2:	7ffb      	ldrb	r3, [r7, #31]
 80090a4:	4618      	mov	r0, r3
 80090a6:	3720      	adds	r7, #32
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80090ac:	b590      	push	{r4, r7, lr}
 80090ae:	b089      	sub	sp, #36	@ 0x24
 80090b0:	af04      	add	r7, sp, #16
 80090b2:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80090b4:	2301      	movs	r3, #1
 80090b6:	2202      	movs	r2, #2
 80090b8:	2102      	movs	r1, #2
 80090ba:	6878      	ldr	r0, [r7, #4]
 80090bc:	f000 fc85 	bl	80099ca <USBH_FindInterface>
 80090c0:	4603      	mov	r3, r0
 80090c2:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80090c4:	7bfb      	ldrb	r3, [r7, #15]
 80090c6:	2bff      	cmp	r3, #255	@ 0xff
 80090c8:	d002      	beq.n	80090d0 <USBH_CDC_InterfaceInit+0x24>
 80090ca:	7bfb      	ldrb	r3, [r7, #15]
 80090cc:	2b01      	cmp	r3, #1
 80090ce:	d901      	bls.n	80090d4 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80090d0:	2302      	movs	r3, #2
 80090d2:	e13d      	b.n	8009350 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80090d4:	7bfb      	ldrb	r3, [r7, #15]
 80090d6:	4619      	mov	r1, r3
 80090d8:	6878      	ldr	r0, [r7, #4]
 80090da:	f000 fc5a 	bl	8009992 <USBH_SelectInterface>
 80090de:	4603      	mov	r3, r0
 80090e0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80090e2:	7bbb      	ldrb	r3, [r7, #14]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d001      	beq.n	80090ec <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80090e8:	2302      	movs	r3, #2
 80090ea:	e131      	b.n	8009350 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80090f2:	2050      	movs	r0, #80	@ 0x50
 80090f4:	f002 fb6a 	bl	800b7cc <malloc>
 80090f8:	4603      	mov	r3, r0
 80090fa:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009102:	69db      	ldr	r3, [r3, #28]
 8009104:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8009106:	68bb      	ldr	r3, [r7, #8]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d101      	bne.n	8009110 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800910c:	2302      	movs	r3, #2
 800910e:	e11f      	b.n	8009350 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8009110:	2250      	movs	r2, #80	@ 0x50
 8009112:	2100      	movs	r1, #0
 8009114:	68b8      	ldr	r0, [r7, #8]
 8009116:	f002 fc4d 	bl	800b9b4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800911a:	7bfb      	ldrb	r3, [r7, #15]
 800911c:	687a      	ldr	r2, [r7, #4]
 800911e:	211a      	movs	r1, #26
 8009120:	fb01 f303 	mul.w	r3, r1, r3
 8009124:	4413      	add	r3, r2
 8009126:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800912a:	781b      	ldrb	r3, [r3, #0]
 800912c:	b25b      	sxtb	r3, r3
 800912e:	2b00      	cmp	r3, #0
 8009130:	da15      	bge.n	800915e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009132:	7bfb      	ldrb	r3, [r7, #15]
 8009134:	687a      	ldr	r2, [r7, #4]
 8009136:	211a      	movs	r1, #26
 8009138:	fb01 f303 	mul.w	r3, r1, r3
 800913c:	4413      	add	r3, r2
 800913e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009142:	781a      	ldrb	r2, [r3, #0]
 8009144:	68bb      	ldr	r3, [r7, #8]
 8009146:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009148:	7bfb      	ldrb	r3, [r7, #15]
 800914a:	687a      	ldr	r2, [r7, #4]
 800914c:	211a      	movs	r1, #26
 800914e:	fb01 f303 	mul.w	r3, r1, r3
 8009152:	4413      	add	r3, r2
 8009154:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009158:	881a      	ldrh	r2, [r3, #0]
 800915a:	68bb      	ldr	r3, [r7, #8]
 800915c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	785b      	ldrb	r3, [r3, #1]
 8009162:	4619      	mov	r1, r3
 8009164:	6878      	ldr	r0, [r7, #4]
 8009166:	f001 ffbe 	bl	800b0e6 <USBH_AllocPipe>
 800916a:	4603      	mov	r3, r0
 800916c:	461a      	mov	r2, r3
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	7819      	ldrb	r1, [r3, #0]
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	7858      	ldrb	r0, [r3, #1]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009186:	68ba      	ldr	r2, [r7, #8]
 8009188:	8952      	ldrh	r2, [r2, #10]
 800918a:	9202      	str	r2, [sp, #8]
 800918c:	2203      	movs	r2, #3
 800918e:	9201      	str	r2, [sp, #4]
 8009190:	9300      	str	r3, [sp, #0]
 8009192:	4623      	mov	r3, r4
 8009194:	4602      	mov	r2, r0
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f001 ff76 	bl	800b088 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	781b      	ldrb	r3, [r3, #0]
 80091a0:	2200      	movs	r2, #0
 80091a2:	4619      	mov	r1, r3
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f002 fa8b 	bl	800b6c0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80091aa:	2300      	movs	r3, #0
 80091ac:	2200      	movs	r2, #0
 80091ae:	210a      	movs	r1, #10
 80091b0:	6878      	ldr	r0, [r7, #4]
 80091b2:	f000 fc0a 	bl	80099ca <USBH_FindInterface>
 80091b6:	4603      	mov	r3, r0
 80091b8:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80091ba:	7bfb      	ldrb	r3, [r7, #15]
 80091bc:	2bff      	cmp	r3, #255	@ 0xff
 80091be:	d002      	beq.n	80091c6 <USBH_CDC_InterfaceInit+0x11a>
 80091c0:	7bfb      	ldrb	r3, [r7, #15]
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d901      	bls.n	80091ca <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80091c6:	2302      	movs	r3, #2
 80091c8:	e0c2      	b.n	8009350 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80091ca:	7bfb      	ldrb	r3, [r7, #15]
 80091cc:	687a      	ldr	r2, [r7, #4]
 80091ce:	211a      	movs	r1, #26
 80091d0:	fb01 f303 	mul.w	r3, r1, r3
 80091d4:	4413      	add	r3, r2
 80091d6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80091da:	781b      	ldrb	r3, [r3, #0]
 80091dc:	b25b      	sxtb	r3, r3
 80091de:	2b00      	cmp	r3, #0
 80091e0:	da16      	bge.n	8009210 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80091e2:	7bfb      	ldrb	r3, [r7, #15]
 80091e4:	687a      	ldr	r2, [r7, #4]
 80091e6:	211a      	movs	r1, #26
 80091e8:	fb01 f303 	mul.w	r3, r1, r3
 80091ec:	4413      	add	r3, r2
 80091ee:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80091f2:	781a      	ldrb	r2, [r3, #0]
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80091f8:	7bfb      	ldrb	r3, [r7, #15]
 80091fa:	687a      	ldr	r2, [r7, #4]
 80091fc:	211a      	movs	r1, #26
 80091fe:	fb01 f303 	mul.w	r3, r1, r3
 8009202:	4413      	add	r3, r2
 8009204:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009208:	881a      	ldrh	r2, [r3, #0]
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	835a      	strh	r2, [r3, #26]
 800920e:	e015      	b.n	800923c <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8009210:	7bfb      	ldrb	r3, [r7, #15]
 8009212:	687a      	ldr	r2, [r7, #4]
 8009214:	211a      	movs	r1, #26
 8009216:	fb01 f303 	mul.w	r3, r1, r3
 800921a:	4413      	add	r3, r2
 800921c:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8009220:	781a      	ldrb	r2, [r3, #0]
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8009226:	7bfb      	ldrb	r3, [r7, #15]
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	211a      	movs	r1, #26
 800922c:	fb01 f303 	mul.w	r3, r1, r3
 8009230:	4413      	add	r3, r2
 8009232:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8009236:	881a      	ldrh	r2, [r3, #0]
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800923c:	7bfb      	ldrb	r3, [r7, #15]
 800923e:	687a      	ldr	r2, [r7, #4]
 8009240:	211a      	movs	r1, #26
 8009242:	fb01 f303 	mul.w	r3, r1, r3
 8009246:	4413      	add	r3, r2
 8009248:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800924c:	781b      	ldrb	r3, [r3, #0]
 800924e:	b25b      	sxtb	r3, r3
 8009250:	2b00      	cmp	r3, #0
 8009252:	da16      	bge.n	8009282 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009254:	7bfb      	ldrb	r3, [r7, #15]
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	211a      	movs	r1, #26
 800925a:	fb01 f303 	mul.w	r3, r1, r3
 800925e:	4413      	add	r3, r2
 8009260:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009264:	781a      	ldrb	r2, [r3, #0]
 8009266:	68bb      	ldr	r3, [r7, #8]
 8009268:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800926a:	7bfb      	ldrb	r3, [r7, #15]
 800926c:	687a      	ldr	r2, [r7, #4]
 800926e:	211a      	movs	r1, #26
 8009270:	fb01 f303 	mul.w	r3, r1, r3
 8009274:	4413      	add	r3, r2
 8009276:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800927a:	881a      	ldrh	r2, [r3, #0]
 800927c:	68bb      	ldr	r3, [r7, #8]
 800927e:	835a      	strh	r2, [r3, #26]
 8009280:	e015      	b.n	80092ae <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8009282:	7bfb      	ldrb	r3, [r7, #15]
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	211a      	movs	r1, #26
 8009288:	fb01 f303 	mul.w	r3, r1, r3
 800928c:	4413      	add	r3, r2
 800928e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8009292:	781a      	ldrb	r2, [r3, #0]
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8009298:	7bfb      	ldrb	r3, [r7, #15]
 800929a:	687a      	ldr	r2, [r7, #4]
 800929c:	211a      	movs	r1, #26
 800929e:	fb01 f303 	mul.w	r3, r1, r3
 80092a2:	4413      	add	r3, r2
 80092a4:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80092a8:	881a      	ldrh	r2, [r3, #0]
 80092aa:	68bb      	ldr	r3, [r7, #8]
 80092ac:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80092ae:	68bb      	ldr	r3, [r7, #8]
 80092b0:	7b9b      	ldrb	r3, [r3, #14]
 80092b2:	4619      	mov	r1, r3
 80092b4:	6878      	ldr	r0, [r7, #4]
 80092b6:	f001 ff16 	bl	800b0e6 <USBH_AllocPipe>
 80092ba:	4603      	mov	r3, r0
 80092bc:	461a      	mov	r2, r3
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80092c2:	68bb      	ldr	r3, [r7, #8]
 80092c4:	7bdb      	ldrb	r3, [r3, #15]
 80092c6:	4619      	mov	r1, r3
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f001 ff0c 	bl	800b0e6 <USBH_AllocPipe>
 80092ce:	4603      	mov	r3, r0
 80092d0:	461a      	mov	r2, r3
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	7b59      	ldrb	r1, [r3, #13]
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	7b98      	ldrb	r0, [r3, #14]
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80092ea:	68ba      	ldr	r2, [r7, #8]
 80092ec:	8b12      	ldrh	r2, [r2, #24]
 80092ee:	9202      	str	r2, [sp, #8]
 80092f0:	2202      	movs	r2, #2
 80092f2:	9201      	str	r2, [sp, #4]
 80092f4:	9300      	str	r3, [sp, #0]
 80092f6:	4623      	mov	r3, r4
 80092f8:	4602      	mov	r2, r0
 80092fa:	6878      	ldr	r0, [r7, #4]
 80092fc:	f001 fec4 	bl	800b088 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	7b19      	ldrb	r1, [r3, #12]
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	7bd8      	ldrb	r0, [r3, #15]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009314:	68ba      	ldr	r2, [r7, #8]
 8009316:	8b52      	ldrh	r2, [r2, #26]
 8009318:	9202      	str	r2, [sp, #8]
 800931a:	2202      	movs	r2, #2
 800931c:	9201      	str	r2, [sp, #4]
 800931e:	9300      	str	r3, [sp, #0]
 8009320:	4623      	mov	r3, r4
 8009322:	4602      	mov	r2, r0
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f001 feaf 	bl	800b088 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800932a:	68bb      	ldr	r3, [r7, #8]
 800932c:	2200      	movs	r2, #0
 800932e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	7b5b      	ldrb	r3, [r3, #13]
 8009336:	2200      	movs	r2, #0
 8009338:	4619      	mov	r1, r3
 800933a:	6878      	ldr	r0, [r7, #4]
 800933c:	f002 f9c0 	bl	800b6c0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	7b1b      	ldrb	r3, [r3, #12]
 8009344:	2200      	movs	r2, #0
 8009346:	4619      	mov	r1, r3
 8009348:	6878      	ldr	r0, [r7, #4]
 800934a:	f002 f9b9 	bl	800b6c0 <USBH_LL_SetToggle>

  return USBH_OK;
 800934e:	2300      	movs	r3, #0
}
 8009350:	4618      	mov	r0, r3
 8009352:	3714      	adds	r7, #20
 8009354:	46bd      	mov	sp, r7
 8009356:	bd90      	pop	{r4, r7, pc}

08009358 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
 800935e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009366:	69db      	ldr	r3, [r3, #28]
 8009368:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	781b      	ldrb	r3, [r3, #0]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d00e      	beq.n	8009390 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	4619      	mov	r1, r3
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f001 fea4 	bl	800b0c6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	781b      	ldrb	r3, [r3, #0]
 8009382:	4619      	mov	r1, r3
 8009384:	6878      	ldr	r0, [r7, #4]
 8009386:	f001 fecf 	bl	800b128 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	2200      	movs	r2, #0
 800938e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	7b1b      	ldrb	r3, [r3, #12]
 8009394:	2b00      	cmp	r3, #0
 8009396:	d00e      	beq.n	80093b6 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	7b1b      	ldrb	r3, [r3, #12]
 800939c:	4619      	mov	r1, r3
 800939e:	6878      	ldr	r0, [r7, #4]
 80093a0:	f001 fe91 	bl	800b0c6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	7b1b      	ldrb	r3, [r3, #12]
 80093a8:	4619      	mov	r1, r3
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f001 febc 	bl	800b128 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	2200      	movs	r2, #0
 80093b4:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	7b5b      	ldrb	r3, [r3, #13]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d00e      	beq.n	80093dc <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	7b5b      	ldrb	r3, [r3, #13]
 80093c2:	4619      	mov	r1, r3
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f001 fe7e 	bl	800b0c6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80093ca:	68fb      	ldr	r3, [r7, #12]
 80093cc:	7b5b      	ldrb	r3, [r3, #13]
 80093ce:	4619      	mov	r1, r3
 80093d0:	6878      	ldr	r0, [r7, #4]
 80093d2:	f001 fea9 	bl	800b128 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	2200      	movs	r2, #0
 80093da:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80093e2:	69db      	ldr	r3, [r3, #28]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d00b      	beq.n	8009400 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80093ee:	69db      	ldr	r3, [r3, #28]
 80093f0:	4618      	mov	r0, r3
 80093f2:	f002 f9f3 	bl	800b7dc <free>
    phost->pActiveClass->pData = 0U;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80093fc:	2200      	movs	r2, #0
 80093fe:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009400:	2300      	movs	r3, #0
}
 8009402:	4618      	mov	r0, r3
 8009404:	3710      	adds	r7, #16
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}

0800940a <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800940a:	b580      	push	{r7, lr}
 800940c:	b084      	sub	sp, #16
 800940e:	af00      	add	r7, sp, #0
 8009410:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009418:	69db      	ldr	r3, [r3, #28]
 800941a:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	3340      	adds	r3, #64	@ 0x40
 8009420:	4619      	mov	r1, r3
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 f8b1 	bl	800958a <GetLineCoding>
 8009428:	4603      	mov	r3, r0
 800942a:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800942c:	7afb      	ldrb	r3, [r7, #11]
 800942e:	2b00      	cmp	r3, #0
 8009430:	d105      	bne.n	800943e <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009438:	2102      	movs	r1, #2
 800943a:	6878      	ldr	r0, [r7, #4]
 800943c:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800943e:	7afb      	ldrb	r3, [r7, #11]
}
 8009440:	4618      	mov	r0, r3
 8009442:	3710      	adds	r7, #16
 8009444:	46bd      	mov	sp, r7
 8009446:	bd80      	pop	{r7, pc}

08009448 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8009448:	b580      	push	{r7, lr}
 800944a:	b084      	sub	sp, #16
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8009450:	2301      	movs	r3, #1
 8009452:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8009454:	2300      	movs	r3, #0
 8009456:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800945e:	69db      	ldr	r3, [r3, #28]
 8009460:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8009468:	2b04      	cmp	r3, #4
 800946a:	d877      	bhi.n	800955c <USBH_CDC_Process+0x114>
 800946c:	a201      	add	r2, pc, #4	@ (adr r2, 8009474 <USBH_CDC_Process+0x2c>)
 800946e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009472:	bf00      	nop
 8009474:	08009489 	.word	0x08009489
 8009478:	0800948f 	.word	0x0800948f
 800947c:	080094bf 	.word	0x080094bf
 8009480:	08009533 	.word	0x08009533
 8009484:	08009541 	.word	0x08009541
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8009488:	2300      	movs	r3, #0
 800948a:	73fb      	strb	r3, [r7, #15]
      break;
 800948c:	e06d      	b.n	800956a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009492:	4619      	mov	r1, r3
 8009494:	6878      	ldr	r0, [r7, #4]
 8009496:	f000 f897 	bl	80095c8 <SetLineCoding>
 800949a:	4603      	mov	r3, r0
 800949c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800949e:	7bbb      	ldrb	r3, [r7, #14]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d104      	bne.n	80094ae <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	2202      	movs	r2, #2
 80094a8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80094ac:	e058      	b.n	8009560 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80094ae:	7bbb      	ldrb	r3, [r7, #14]
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d055      	beq.n	8009560 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	2204      	movs	r2, #4
 80094b8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80094bc:	e050      	b.n	8009560 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	3340      	adds	r3, #64	@ 0x40
 80094c2:	4619      	mov	r1, r3
 80094c4:	6878      	ldr	r0, [r7, #4]
 80094c6:	f000 f860 	bl	800958a <GetLineCoding>
 80094ca:	4603      	mov	r3, r0
 80094cc:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80094ce:	7bbb      	ldrb	r3, [r7, #14]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d126      	bne.n	8009522 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	2200      	movs	r2, #0
 80094d8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80094e2:	68bb      	ldr	r3, [r7, #8]
 80094e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094e6:	791b      	ldrb	r3, [r3, #4]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d13b      	bne.n	8009564 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80094f2:	68bb      	ldr	r3, [r7, #8]
 80094f4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80094f6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80094f8:	429a      	cmp	r2, r3
 80094fa:	d133      	bne.n	8009564 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8009502:	68bb      	ldr	r3, [r7, #8]
 8009504:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009506:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009508:	429a      	cmp	r2, r3
 800950a:	d12b      	bne.n	8009564 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009514:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009516:	429a      	cmp	r2, r3
 8009518:	d124      	bne.n	8009564 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 f958 	bl	80097d0 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009520:	e020      	b.n	8009564 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8009522:	7bbb      	ldrb	r3, [r7, #14]
 8009524:	2b01      	cmp	r3, #1
 8009526:	d01d      	beq.n	8009564 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	2204      	movs	r2, #4
 800952c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009530:	e018      	b.n	8009564 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8009532:	6878      	ldr	r0, [r7, #4]
 8009534:	f000 f867 	bl	8009606 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8009538:	6878      	ldr	r0, [r7, #4]
 800953a:	f000 f8da 	bl	80096f2 <CDC_ProcessReception>
      break;
 800953e:	e014      	b.n	800956a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8009540:	2100      	movs	r1, #0
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f001 f81a 	bl	800a57c <USBH_ClrFeature>
 8009548:	4603      	mov	r3, r0
 800954a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800954c:	7bbb      	ldrb	r3, [r7, #14]
 800954e:	2b00      	cmp	r3, #0
 8009550:	d10a      	bne.n	8009568 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8009552:	68bb      	ldr	r3, [r7, #8]
 8009554:	2200      	movs	r2, #0
 8009556:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800955a:	e005      	b.n	8009568 <USBH_CDC_Process+0x120>

    default:
      break;
 800955c:	bf00      	nop
 800955e:	e004      	b.n	800956a <USBH_CDC_Process+0x122>
      break;
 8009560:	bf00      	nop
 8009562:	e002      	b.n	800956a <USBH_CDC_Process+0x122>
      break;
 8009564:	bf00      	nop
 8009566:	e000      	b.n	800956a <USBH_CDC_Process+0x122>
      break;
 8009568:	bf00      	nop

  }

  return status;
 800956a:	7bfb      	ldrb	r3, [r7, #15]
}
 800956c:	4618      	mov	r0, r3
 800956e:	3710      	adds	r7, #16
 8009570:	46bd      	mov	sp, r7
 8009572:	bd80      	pop	{r7, pc}

08009574 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8009574:	b480      	push	{r7}
 8009576:	b083      	sub	sp, #12
 8009578:	af00      	add	r7, sp, #0
 800957a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800957c:	2300      	movs	r3, #0
}
 800957e:	4618      	mov	r0, r3
 8009580:	370c      	adds	r7, #12
 8009582:	46bd      	mov	sp, r7
 8009584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009588:	4770      	bx	lr

0800958a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800958a:	b580      	push	{r7, lr}
 800958c:	b082      	sub	sp, #8
 800958e:	af00      	add	r7, sp, #0
 8009590:	6078      	str	r0, [r7, #4]
 8009592:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	22a1      	movs	r2, #161	@ 0xa1
 8009598:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2221      	movs	r2, #33	@ 0x21
 800959e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	2200      	movs	r2, #0
 80095a4:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2207      	movs	r2, #7
 80095b0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	2207      	movs	r2, #7
 80095b6:	4619      	mov	r1, r3
 80095b8:	6878      	ldr	r0, [r7, #4]
 80095ba:	f001 fb14 	bl	800abe6 <USBH_CtlReq>
 80095be:	4603      	mov	r3, r0
}
 80095c0:	4618      	mov	r0, r3
 80095c2:	3708      	adds	r7, #8
 80095c4:	46bd      	mov	sp, r7
 80095c6:	bd80      	pop	{r7, pc}

080095c8 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80095c8:	b580      	push	{r7, lr}
 80095ca:	b082      	sub	sp, #8
 80095cc:	af00      	add	r7, sp, #0
 80095ce:	6078      	str	r0, [r7, #4]
 80095d0:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2221      	movs	r2, #33	@ 0x21
 80095d6:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	2220      	movs	r2, #32
 80095dc:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	2200      	movs	r2, #0
 80095e2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2200      	movs	r2, #0
 80095e8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2207      	movs	r2, #7
 80095ee:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	2207      	movs	r2, #7
 80095f4:	4619      	mov	r1, r3
 80095f6:	6878      	ldr	r0, [r7, #4]
 80095f8:	f001 faf5 	bl	800abe6 <USBH_CtlReq>
 80095fc:	4603      	mov	r3, r0
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3708      	adds	r7, #8
 8009602:	46bd      	mov	sp, r7
 8009604:	bd80      	pop	{r7, pc}

08009606 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8009606:	b580      	push	{r7, lr}
 8009608:	b086      	sub	sp, #24
 800960a:	af02      	add	r7, sp, #8
 800960c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009614:	69db      	ldr	r3, [r3, #28]
 8009616:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009618:	2300      	movs	r3, #0
 800961a:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8009622:	2b01      	cmp	r3, #1
 8009624:	d002      	beq.n	800962c <CDC_ProcessTransmission+0x26>
 8009626:	2b02      	cmp	r3, #2
 8009628:	d023      	beq.n	8009672 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800962a:	e05e      	b.n	80096ea <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009630:	68fa      	ldr	r2, [r7, #12]
 8009632:	8b12      	ldrh	r2, [r2, #24]
 8009634:	4293      	cmp	r3, r2
 8009636:	d90b      	bls.n	8009650 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8009638:	68fb      	ldr	r3, [r7, #12]
 800963a:	69d9      	ldr	r1, [r3, #28]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	8b1a      	ldrh	r2, [r3, #24]
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	7b5b      	ldrb	r3, [r3, #13]
 8009644:	2001      	movs	r0, #1
 8009646:	9000      	str	r0, [sp, #0]
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f001 fcda 	bl	800b002 <USBH_BulkSendData>
 800964e:	e00b      	b.n	8009668 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8009658:	b29a      	uxth	r2, r3
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	7b5b      	ldrb	r3, [r3, #13]
 800965e:	2001      	movs	r0, #1
 8009660:	9000      	str	r0, [sp, #0]
 8009662:	6878      	ldr	r0, [r7, #4]
 8009664:	f001 fccd 	bl	800b002 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	2202      	movs	r2, #2
 800966c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8009670:	e03b      	b.n	80096ea <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	7b5b      	ldrb	r3, [r3, #13]
 8009676:	4619      	mov	r1, r3
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f001 fff7 	bl	800b66c <USBH_LL_GetURBState>
 800967e:	4603      	mov	r3, r0
 8009680:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009682:	7afb      	ldrb	r3, [r7, #11]
 8009684:	2b01      	cmp	r3, #1
 8009686:	d128      	bne.n	80096da <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800968c:	68fa      	ldr	r2, [r7, #12]
 800968e:	8b12      	ldrh	r2, [r2, #24]
 8009690:	4293      	cmp	r3, r2
 8009692:	d90e      	bls.n	80096b2 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009698:	68fa      	ldr	r2, [r7, #12]
 800969a:	8b12      	ldrh	r2, [r2, #24]
 800969c:	1a9a      	subs	r2, r3, r2
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	69db      	ldr	r3, [r3, #28]
 80096a6:	68fa      	ldr	r2, [r7, #12]
 80096a8:	8b12      	ldrh	r2, [r2, #24]
 80096aa:	441a      	add	r2, r3
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	61da      	str	r2, [r3, #28]
 80096b0:	e002      	b.n	80096b8 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	2200      	movs	r2, #0
 80096b6:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80096b8:	68fb      	ldr	r3, [r7, #12]
 80096ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d004      	beq.n	80096ca <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	2201      	movs	r2, #1
 80096c4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80096c8:	e00e      	b.n	80096e8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	2200      	movs	r2, #0
 80096ce:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80096d2:	6878      	ldr	r0, [r7, #4]
 80096d4:	f000 f868 	bl	80097a8 <USBH_CDC_TransmitCallback>
      break;
 80096d8:	e006      	b.n	80096e8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80096da:	7afb      	ldrb	r3, [r7, #11]
 80096dc:	2b02      	cmp	r3, #2
 80096de:	d103      	bne.n	80096e8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	2201      	movs	r2, #1
 80096e4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80096e8:	bf00      	nop
  }
}
 80096ea:	bf00      	nop
 80096ec:	3710      	adds	r7, #16
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}

080096f2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b086      	sub	sp, #24
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009700:	69db      	ldr	r3, [r3, #28]
 8009702:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009704:	2300      	movs	r3, #0
 8009706:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8009708:	697b      	ldr	r3, [r7, #20]
 800970a:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800970e:	2b03      	cmp	r3, #3
 8009710:	d002      	beq.n	8009718 <CDC_ProcessReception+0x26>
 8009712:	2b04      	cmp	r3, #4
 8009714:	d00e      	beq.n	8009734 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8009716:	e043      	b.n	80097a0 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 8009718:	697b      	ldr	r3, [r7, #20]
 800971a:	6a19      	ldr	r1, [r3, #32]
 800971c:	697b      	ldr	r3, [r7, #20]
 800971e:	8b5a      	ldrh	r2, [r3, #26]
 8009720:	697b      	ldr	r3, [r7, #20]
 8009722:	7b1b      	ldrb	r3, [r3, #12]
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f001 fc91 	bl	800b04c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800972a:	697b      	ldr	r3, [r7, #20]
 800972c:	2204      	movs	r2, #4
 800972e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8009732:	e035      	b.n	80097a0 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8009734:	697b      	ldr	r3, [r7, #20]
 8009736:	7b1b      	ldrb	r3, [r3, #12]
 8009738:	4619      	mov	r1, r3
 800973a:	6878      	ldr	r0, [r7, #4]
 800973c:	f001 ff96 	bl	800b66c <USBH_LL_GetURBState>
 8009740:	4603      	mov	r3, r0
 8009742:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8009744:	7cfb      	ldrb	r3, [r7, #19]
 8009746:	2b01      	cmp	r3, #1
 8009748:	d129      	bne.n	800979e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	7b1b      	ldrb	r3, [r3, #12]
 800974e:	4619      	mov	r1, r3
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f001 fef9 	bl	800b548 <USBH_LL_GetLastXferSize>
 8009756:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800975c:	68fa      	ldr	r2, [r7, #12]
 800975e:	429a      	cmp	r2, r3
 8009760:	d016      	beq.n	8009790 <CDC_ProcessReception+0x9e>
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	8b5b      	ldrh	r3, [r3, #26]
 8009766:	461a      	mov	r2, r3
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	4293      	cmp	r3, r2
 800976c:	d110      	bne.n	8009790 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	1ad2      	subs	r2, r2, r3
 8009776:	697b      	ldr	r3, [r7, #20]
 8009778:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	6a1a      	ldr	r2, [r3, #32]
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	441a      	add	r2, r3
 8009782:	697b      	ldr	r3, [r7, #20]
 8009784:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	2203      	movs	r2, #3
 800978a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800978e:	e006      	b.n	800979e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	2200      	movs	r2, #0
 8009794:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 f80f 	bl	80097bc <USBH_CDC_ReceiveCallback>
      break;
 800979e:	bf00      	nop
  }
}
 80097a0:	bf00      	nop
 80097a2:	3718      	adds	r7, #24
 80097a4:	46bd      	mov	sp, r7
 80097a6:	bd80      	pop	{r7, pc}

080097a8 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b083      	sub	sp, #12
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80097b0:	bf00      	nop
 80097b2:	370c      	adds	r7, #12
 80097b4:	46bd      	mov	sp, r7
 80097b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ba:	4770      	bx	lr

080097bc <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80097bc:	b480      	push	{r7}
 80097be:	b083      	sub	sp, #12
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80097c4:	bf00      	nop
 80097c6:	370c      	adds	r7, #12
 80097c8:	46bd      	mov	sp, r7
 80097ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ce:	4770      	bx	lr

080097d0 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b083      	sub	sp, #12
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80097d8:	bf00      	nop
 80097da:	370c      	adds	r7, #12
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr

080097e4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b084      	sub	sp, #16
 80097e8:	af00      	add	r7, sp, #0
 80097ea:	60f8      	str	r0, [r7, #12]
 80097ec:	60b9      	str	r1, [r7, #8]
 80097ee:	4613      	mov	r3, r2
 80097f0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d101      	bne.n	80097fc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80097f8:	2302      	movs	r3, #2
 80097fa:	e029      	b.n	8009850 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	79fa      	ldrb	r2, [r7, #7]
 8009800:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	2200      	movs	r2, #0
 8009808:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	2200      	movs	r2, #0
 8009810:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009814:	68f8      	ldr	r0, [r7, #12]
 8009816:	f000 f81f 	bl	8009858 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	2200      	movs	r2, #0
 800981e:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8009822:	68fb      	ldr	r3, [r7, #12]
 8009824:	2200      	movs	r2, #0
 8009826:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800982a:	68fb      	ldr	r3, [r7, #12]
 800982c:	2200      	movs	r2, #0
 800982e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	2200      	movs	r2, #0
 8009836:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800983a:	68bb      	ldr	r3, [r7, #8]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d003      	beq.n	8009848 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	68ba      	ldr	r2, [r7, #8]
 8009844:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009848:	68f8      	ldr	r0, [r7, #12]
 800984a:	f001 fdbf 	bl	800b3cc <USBH_LL_Init>

  return USBH_OK;
 800984e:	2300      	movs	r3, #0
}
 8009850:	4618      	mov	r0, r3
 8009852:	3710      	adds	r7, #16
 8009854:	46bd      	mov	sp, r7
 8009856:	bd80      	pop	{r7, pc}

08009858 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009860:	2300      	movs	r3, #0
 8009862:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009864:	2300      	movs	r3, #0
 8009866:	60fb      	str	r3, [r7, #12]
 8009868:	e009      	b.n	800987e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800986a:	687a      	ldr	r2, [r7, #4]
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	33e0      	adds	r3, #224	@ 0xe0
 8009870:	009b      	lsls	r3, r3, #2
 8009872:	4413      	add	r3, r2
 8009874:	2200      	movs	r2, #0
 8009876:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009878:	68fb      	ldr	r3, [r7, #12]
 800987a:	3301      	adds	r3, #1
 800987c:	60fb      	str	r3, [r7, #12]
 800987e:	68fb      	ldr	r3, [r7, #12]
 8009880:	2b0f      	cmp	r3, #15
 8009882:	d9f2      	bls.n	800986a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009884:	2300      	movs	r3, #0
 8009886:	60fb      	str	r3, [r7, #12]
 8009888:	e009      	b.n	800989e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800988a:	687a      	ldr	r2, [r7, #4]
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	4413      	add	r3, r2
 8009890:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009894:	2200      	movs	r2, #0
 8009896:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	3301      	adds	r3, #1
 800989c:	60fb      	str	r3, [r7, #12]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098a4:	d3f1      	bcc.n	800988a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	2200      	movs	r2, #0
 80098aa:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2201      	movs	r2, #1
 80098b6:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	2200      	movs	r2, #0
 80098bc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2201      	movs	r2, #1
 80098c4:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2240      	movs	r2, #64	@ 0x40
 80098ca:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2200      	movs	r2, #0
 80098d0:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	2200      	movs	r2, #0
 80098d6:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2201      	movs	r2, #1
 80098de:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	2200      	movs	r2, #0
 80098e6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	2200      	movs	r2, #0
 80098ee:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	331c      	adds	r3, #28
 80098f6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80098fa:	2100      	movs	r1, #0
 80098fc:	4618      	mov	r0, r3
 80098fe:	f002 f859 	bl	800b9b4 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009908:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800990c:	2100      	movs	r1, #0
 800990e:	4618      	mov	r0, r3
 8009910:	f002 f850 	bl	800b9b4 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800991a:	2212      	movs	r2, #18
 800991c:	2100      	movs	r1, #0
 800991e:	4618      	mov	r0, r3
 8009920:	f002 f848 	bl	800b9b4 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800992a:	223e      	movs	r2, #62	@ 0x3e
 800992c:	2100      	movs	r1, #0
 800992e:	4618      	mov	r0, r3
 8009930:	f002 f840 	bl	800b9b4 <memset>

  return USBH_OK;
 8009934:	2300      	movs	r3, #0
}
 8009936:	4618      	mov	r0, r3
 8009938:	3710      	adds	r7, #16
 800993a:	46bd      	mov	sp, r7
 800993c:	bd80      	pop	{r7, pc}

0800993e <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800993e:	b480      	push	{r7}
 8009940:	b085      	sub	sp, #20
 8009942:	af00      	add	r7, sp, #0
 8009944:	6078      	str	r0, [r7, #4]
 8009946:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009948:	2300      	movs	r3, #0
 800994a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800994c:	683b      	ldr	r3, [r7, #0]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d016      	beq.n	8009980 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009958:	2b00      	cmp	r3, #0
 800995a:	d10e      	bne.n	800997a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009962:	1c59      	adds	r1, r3, #1
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800996a:	687a      	ldr	r2, [r7, #4]
 800996c:	33de      	adds	r3, #222	@ 0xde
 800996e:	6839      	ldr	r1, [r7, #0]
 8009970:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8009974:	2300      	movs	r3, #0
 8009976:	73fb      	strb	r3, [r7, #15]
 8009978:	e004      	b.n	8009984 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800997a:	2302      	movs	r3, #2
 800997c:	73fb      	strb	r3, [r7, #15]
 800997e:	e001      	b.n	8009984 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009980:	2302      	movs	r3, #2
 8009982:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009984:	7bfb      	ldrb	r3, [r7, #15]
}
 8009986:	4618      	mov	r0, r3
 8009988:	3714      	adds	r7, #20
 800998a:	46bd      	mov	sp, r7
 800998c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009990:	4770      	bx	lr

08009992 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009992:	b480      	push	{r7}
 8009994:	b085      	sub	sp, #20
 8009996:	af00      	add	r7, sp, #0
 8009998:	6078      	str	r0, [r7, #4]
 800999a:	460b      	mov	r3, r1
 800999c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800999e:	2300      	movs	r3, #0
 80099a0:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 80099a8:	78fa      	ldrb	r2, [r7, #3]
 80099aa:	429a      	cmp	r2, r3
 80099ac:	d204      	bcs.n	80099b8 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	78fa      	ldrb	r2, [r7, #3]
 80099b2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 80099b6:	e001      	b.n	80099bc <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80099b8:	2302      	movs	r3, #2
 80099ba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80099bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3714      	adds	r7, #20
 80099c2:	46bd      	mov	sp, r7
 80099c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099c8:	4770      	bx	lr

080099ca <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80099ca:	b480      	push	{r7}
 80099cc:	b087      	sub	sp, #28
 80099ce:	af00      	add	r7, sp, #0
 80099d0:	6078      	str	r0, [r7, #4]
 80099d2:	4608      	mov	r0, r1
 80099d4:	4611      	mov	r1, r2
 80099d6:	461a      	mov	r2, r3
 80099d8:	4603      	mov	r3, r0
 80099da:	70fb      	strb	r3, [r7, #3]
 80099dc:	460b      	mov	r3, r1
 80099de:	70bb      	strb	r3, [r7, #2]
 80099e0:	4613      	mov	r3, r2
 80099e2:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80099e4:	2300      	movs	r3, #0
 80099e6:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80099e8:	2300      	movs	r3, #0
 80099ea:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80099f2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80099f4:	e025      	b.n	8009a42 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80099f6:	7dfb      	ldrb	r3, [r7, #23]
 80099f8:	221a      	movs	r2, #26
 80099fa:	fb02 f303 	mul.w	r3, r2, r3
 80099fe:	3308      	adds	r3, #8
 8009a00:	68fa      	ldr	r2, [r7, #12]
 8009a02:	4413      	add	r3, r2
 8009a04:	3302      	adds	r3, #2
 8009a06:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009a08:	693b      	ldr	r3, [r7, #16]
 8009a0a:	795b      	ldrb	r3, [r3, #5]
 8009a0c:	78fa      	ldrb	r2, [r7, #3]
 8009a0e:	429a      	cmp	r2, r3
 8009a10:	d002      	beq.n	8009a18 <USBH_FindInterface+0x4e>
 8009a12:	78fb      	ldrb	r3, [r7, #3]
 8009a14:	2bff      	cmp	r3, #255	@ 0xff
 8009a16:	d111      	bne.n	8009a3c <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009a18:	693b      	ldr	r3, [r7, #16]
 8009a1a:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8009a1c:	78ba      	ldrb	r2, [r7, #2]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d002      	beq.n	8009a28 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009a22:	78bb      	ldrb	r3, [r7, #2]
 8009a24:	2bff      	cmp	r3, #255	@ 0xff
 8009a26:	d109      	bne.n	8009a3c <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009a28:	693b      	ldr	r3, [r7, #16]
 8009a2a:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8009a2c:	787a      	ldrb	r2, [r7, #1]
 8009a2e:	429a      	cmp	r2, r3
 8009a30:	d002      	beq.n	8009a38 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8009a32:	787b      	ldrb	r3, [r7, #1]
 8009a34:	2bff      	cmp	r3, #255	@ 0xff
 8009a36:	d101      	bne.n	8009a3c <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8009a38:	7dfb      	ldrb	r3, [r7, #23]
 8009a3a:	e006      	b.n	8009a4a <USBH_FindInterface+0x80>
    }
    if_ix++;
 8009a3c:	7dfb      	ldrb	r3, [r7, #23]
 8009a3e:	3301      	adds	r3, #1
 8009a40:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009a42:	7dfb      	ldrb	r3, [r7, #23]
 8009a44:	2b01      	cmp	r3, #1
 8009a46:	d9d6      	bls.n	80099f6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009a48:	23ff      	movs	r3, #255	@ 0xff
}
 8009a4a:	4618      	mov	r0, r3
 8009a4c:	371c      	adds	r7, #28
 8009a4e:	46bd      	mov	sp, r7
 8009a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a54:	4770      	bx	lr

08009a56 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b082      	sub	sp, #8
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009a5e:	6878      	ldr	r0, [r7, #4]
 8009a60:	f001 fcfa 	bl	800b458 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8009a64:	2101      	movs	r1, #1
 8009a66:	6878      	ldr	r0, [r7, #4]
 8009a68:	f001 fe13 	bl	800b692 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009a6c:	2300      	movs	r3, #0
}
 8009a6e:	4618      	mov	r0, r3
 8009a70:	3708      	adds	r7, #8
 8009a72:	46bd      	mov	sp, r7
 8009a74:	bd80      	pop	{r7, pc}
	...

08009a78 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8009a78:	b580      	push	{r7, lr}
 8009a7a:	b088      	sub	sp, #32
 8009a7c:	af04      	add	r7, sp, #16
 8009a7e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009a80:	2302      	movs	r3, #2
 8009a82:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009a84:	2300      	movs	r3, #0
 8009a86:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d102      	bne.n	8009a9a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	2203      	movs	r2, #3
 8009a98:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	781b      	ldrb	r3, [r3, #0]
 8009a9e:	b2db      	uxtb	r3, r3
 8009aa0:	2b0b      	cmp	r3, #11
 8009aa2:	f200 81bb 	bhi.w	8009e1c <USBH_Process+0x3a4>
 8009aa6:	a201      	add	r2, pc, #4	@ (adr r2, 8009aac <USBH_Process+0x34>)
 8009aa8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aac:	08009add 	.word	0x08009add
 8009ab0:	08009b0f 	.word	0x08009b0f
 8009ab4:	08009b77 	.word	0x08009b77
 8009ab8:	08009db7 	.word	0x08009db7
 8009abc:	08009e1d 	.word	0x08009e1d
 8009ac0:	08009c17 	.word	0x08009c17
 8009ac4:	08009d5d 	.word	0x08009d5d
 8009ac8:	08009c4d 	.word	0x08009c4d
 8009acc:	08009c6d 	.word	0x08009c6d
 8009ad0:	08009c8b 	.word	0x08009c8b
 8009ad4:	08009ccf 	.word	0x08009ccf
 8009ad8:	08009d9f 	.word	0x08009d9f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8009ae2:	b2db      	uxtb	r3, r3
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	f000 819b 	beq.w	8009e20 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	2201      	movs	r2, #1
 8009aee:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009af0:	20c8      	movs	r0, #200	@ 0xc8
 8009af2:	f001 fe18 	bl	800b726 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f001 fd0b 	bl	800b512 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2200      	movs	r2, #0
 8009b00:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2200      	movs	r2, #0
 8009b08:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009b0c:	e188      	b.n	8009e20 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	d107      	bne.n	8009b28 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2200      	movs	r2, #0
 8009b1c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2202      	movs	r2, #2
 8009b24:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009b26:	e18a      	b.n	8009e3e <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009b2e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8009b32:	d914      	bls.n	8009b5e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009b3a:	3301      	adds	r3, #1
 8009b3c:	b2da      	uxtb	r2, r3
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8009b4a:	2b03      	cmp	r3, #3
 8009b4c:	d903      	bls.n	8009b56 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009b4e:	687b      	ldr	r3, [r7, #4]
 8009b50:	220d      	movs	r2, #13
 8009b52:	701a      	strb	r2, [r3, #0]
      break;
 8009b54:	e173      	b.n	8009e3e <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	2200      	movs	r2, #0
 8009b5a:	701a      	strb	r2, [r3, #0]
      break;
 8009b5c:	e16f      	b.n	8009e3e <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8009b64:	f103 020a 	add.w	r2, r3, #10
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8009b6e:	200a      	movs	r0, #10
 8009b70:	f001 fdd9 	bl	800b726 <USBH_Delay>
      break;
 8009b74:	e163      	b.n	8009e3e <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d005      	beq.n	8009b8c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009b86:	2104      	movs	r1, #4
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009b8c:	2064      	movs	r0, #100	@ 0x64
 8009b8e:	f001 fdca 	bl	800b726 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f001 fc96 	bl	800b4c4 <USBH_LL_GetSpeed>
 8009b98:	4603      	mov	r3, r0
 8009b9a:	461a      	mov	r2, r3
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2205      	movs	r2, #5
 8009ba6:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009ba8:	2100      	movs	r1, #0
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f001 fa9b 	bl	800b0e6 <USBH_AllocPipe>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009bb8:	2180      	movs	r1, #128	@ 0x80
 8009bba:	6878      	ldr	r0, [r7, #4]
 8009bbc:	f001 fa93 	bl	800b0e6 <USBH_AllocPipe>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	461a      	mov	r2, r3
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	7919      	ldrb	r1, [r3, #4]
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009bd8:	687a      	ldr	r2, [r7, #4]
 8009bda:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009bdc:	9202      	str	r2, [sp, #8]
 8009bde:	2200      	movs	r2, #0
 8009be0:	9201      	str	r2, [sp, #4]
 8009be2:	9300      	str	r3, [sp, #0]
 8009be4:	4603      	mov	r3, r0
 8009be6:	2280      	movs	r2, #128	@ 0x80
 8009be8:	6878      	ldr	r0, [r7, #4]
 8009bea:	f001 fa4d 	bl	800b088 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	7959      	ldrb	r1, [r3, #5]
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009bfe:	687a      	ldr	r2, [r7, #4]
 8009c00:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009c02:	9202      	str	r2, [sp, #8]
 8009c04:	2200      	movs	r2, #0
 8009c06:	9201      	str	r2, [sp, #4]
 8009c08:	9300      	str	r3, [sp, #0]
 8009c0a:	4603      	mov	r3, r0
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	6878      	ldr	r0, [r7, #4]
 8009c10:	f001 fa3a 	bl	800b088 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009c14:	e113      	b.n	8009e3e <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 f916 	bl	8009e48 <USBH_HandleEnum>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8009c20:	7bbb      	ldrb	r3, [r7, #14]
 8009c22:	b2db      	uxtb	r3, r3
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	f040 80fd 	bne.w	8009e24 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	2200      	movs	r2, #0
 8009c2e:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8009c32:	687b      	ldr	r3, [r7, #4]
 8009c34:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d103      	bne.n	8009c44 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2208      	movs	r2, #8
 8009c40:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009c42:	e0ef      	b.n	8009e24 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2207      	movs	r2, #7
 8009c48:	701a      	strb	r2, [r3, #0]
      break;
 8009c4a:	e0eb      	b.n	8009e24 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	f000 80e8 	beq.w	8009e28 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009c5e:	2101      	movs	r1, #1
 8009c60:	6878      	ldr	r0, [r7, #4]
 8009c62:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2208      	movs	r2, #8
 8009c68:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009c6a:	e0dd      	b.n	8009e28 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8009c72:	4619      	mov	r1, r3
 8009c74:	6878      	ldr	r0, [r7, #4]
 8009c76:	f000 fc3a 	bl	800a4ee <USBH_SetCfg>
 8009c7a:	4603      	mov	r3, r0
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	f040 80d5 	bne.w	8009e2c <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2209      	movs	r2, #9
 8009c86:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009c88:	e0d0      	b.n	8009e2c <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009c8a:	687b      	ldr	r3, [r7, #4]
 8009c8c:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8009c90:	f003 0320 	and.w	r3, r3, #32
 8009c94:	2b00      	cmp	r3, #0
 8009c96:	d016      	beq.n	8009cc6 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009c98:	2101      	movs	r1, #1
 8009c9a:	6878      	ldr	r0, [r7, #4]
 8009c9c:	f000 fc4a 	bl	800a534 <USBH_SetFeature>
 8009ca0:	4603      	mov	r3, r0
 8009ca2:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009ca4:	7bbb      	ldrb	r3, [r7, #14]
 8009ca6:	b2db      	uxtb	r3, r3
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d103      	bne.n	8009cb4 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	220a      	movs	r2, #10
 8009cb0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009cb2:	e0bd      	b.n	8009e30 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8009cb4:	7bbb      	ldrb	r3, [r7, #14]
 8009cb6:	b2db      	uxtb	r3, r3
 8009cb8:	2b03      	cmp	r3, #3
 8009cba:	f040 80b9 	bne.w	8009e30 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	220a      	movs	r2, #10
 8009cc2:	701a      	strb	r2, [r3, #0]
      break;
 8009cc4:	e0b4      	b.n	8009e30 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	220a      	movs	r2, #10
 8009cca:	701a      	strb	r2, [r3, #0]
      break;
 8009ccc:	e0b0      	b.n	8009e30 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	f000 80ad 	beq.w	8009e34 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2200      	movs	r2, #0
 8009cde:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	73fb      	strb	r3, [r7, #15]
 8009ce6:	e016      	b.n	8009d16 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8009ce8:	7bfa      	ldrb	r2, [r7, #15]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	32de      	adds	r2, #222	@ 0xde
 8009cee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009cf2:	791a      	ldrb	r2, [r3, #4]
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8009cfa:	429a      	cmp	r2, r3
 8009cfc:	d108      	bne.n	8009d10 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009cfe:	7bfa      	ldrb	r2, [r7, #15]
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	32de      	adds	r2, #222	@ 0xde
 8009d04:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8009d0e:	e005      	b.n	8009d1c <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009d10:	7bfb      	ldrb	r3, [r7, #15]
 8009d12:	3301      	adds	r3, #1
 8009d14:	73fb      	strb	r3, [r7, #15]
 8009d16:	7bfb      	ldrb	r3, [r7, #15]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d0e5      	beq.n	8009ce8 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d016      	beq.n	8009d54 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d2c:	689b      	ldr	r3, [r3, #8]
 8009d2e:	6878      	ldr	r0, [r7, #4]
 8009d30:	4798      	blx	r3
 8009d32:	4603      	mov	r3, r0
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d109      	bne.n	8009d4c <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	2206      	movs	r2, #6
 8009d3c:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009d44:	2103      	movs	r1, #3
 8009d46:	6878      	ldr	r0, [r7, #4]
 8009d48:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009d4a:	e073      	b.n	8009e34 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	220d      	movs	r2, #13
 8009d50:	701a      	strb	r2, [r3, #0]
      break;
 8009d52:	e06f      	b.n	8009e34 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	220d      	movs	r2, #13
 8009d58:	701a      	strb	r2, [r3, #0]
      break;
 8009d5a:	e06b      	b.n	8009e34 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d017      	beq.n	8009d96 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009d6c:	691b      	ldr	r3, [r3, #16]
 8009d6e:	6878      	ldr	r0, [r7, #4]
 8009d70:	4798      	blx	r3
 8009d72:	4603      	mov	r3, r0
 8009d74:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009d76:	7bbb      	ldrb	r3, [r7, #14]
 8009d78:	b2db      	uxtb	r3, r3
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d103      	bne.n	8009d86 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	220b      	movs	r2, #11
 8009d82:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009d84:	e058      	b.n	8009e38 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8009d86:	7bbb      	ldrb	r3, [r7, #14]
 8009d88:	b2db      	uxtb	r3, r3
 8009d8a:	2b02      	cmp	r3, #2
 8009d8c:	d154      	bne.n	8009e38 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	220d      	movs	r2, #13
 8009d92:	701a      	strb	r2, [r3, #0]
      break;
 8009d94:	e050      	b.n	8009e38 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	220d      	movs	r2, #13
 8009d9a:	701a      	strb	r2, [r3, #0]
      break;
 8009d9c:	e04c      	b.n	8009e38 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d049      	beq.n	8009e3c <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009dae:	695b      	ldr	r3, [r3, #20]
 8009db0:	6878      	ldr	r0, [r7, #4]
 8009db2:	4798      	blx	r3
      }
      break;
 8009db4:	e042      	b.n	8009e3c <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2200      	movs	r2, #0
 8009dba:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8009dbe:	6878      	ldr	r0, [r7, #4]
 8009dc0:	f7ff fd4a 	bl	8009858 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d009      	beq.n	8009de2 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009dd4:	68db      	ldr	r3, [r3, #12]
 8009dd6:	6878      	ldr	r0, [r7, #4]
 8009dd8:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	2200      	movs	r2, #0
 8009dde:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8009de2:	687b      	ldr	r3, [r7, #4]
 8009de4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d005      	beq.n	8009df8 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009df2:	2105      	movs	r1, #5
 8009df4:	6878      	ldr	r0, [r7, #4]
 8009df6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8009dfe:	b2db      	uxtb	r3, r3
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d107      	bne.n	8009e14 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	2200      	movs	r2, #0
 8009e08:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f7ff fe22 	bl	8009a56 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009e12:	e014      	b.n	8009e3e <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f001 fb1f 	bl	800b458 <USBH_LL_Start>
      break;
 8009e1a:	e010      	b.n	8009e3e <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009e1c:	bf00      	nop
 8009e1e:	e00e      	b.n	8009e3e <USBH_Process+0x3c6>
      break;
 8009e20:	bf00      	nop
 8009e22:	e00c      	b.n	8009e3e <USBH_Process+0x3c6>
      break;
 8009e24:	bf00      	nop
 8009e26:	e00a      	b.n	8009e3e <USBH_Process+0x3c6>
    break;
 8009e28:	bf00      	nop
 8009e2a:	e008      	b.n	8009e3e <USBH_Process+0x3c6>
      break;
 8009e2c:	bf00      	nop
 8009e2e:	e006      	b.n	8009e3e <USBH_Process+0x3c6>
      break;
 8009e30:	bf00      	nop
 8009e32:	e004      	b.n	8009e3e <USBH_Process+0x3c6>
      break;
 8009e34:	bf00      	nop
 8009e36:	e002      	b.n	8009e3e <USBH_Process+0x3c6>
      break;
 8009e38:	bf00      	nop
 8009e3a:	e000      	b.n	8009e3e <USBH_Process+0x3c6>
      break;
 8009e3c:	bf00      	nop
  }
  return USBH_OK;
 8009e3e:	2300      	movs	r3, #0
}
 8009e40:	4618      	mov	r0, r3
 8009e42:	3710      	adds	r7, #16
 8009e44:	46bd      	mov	sp, r7
 8009e46:	bd80      	pop	{r7, pc}

08009e48 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b088      	sub	sp, #32
 8009e4c:	af04      	add	r7, sp, #16
 8009e4e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009e50:	2301      	movs	r3, #1
 8009e52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009e54:	2301      	movs	r3, #1
 8009e56:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	785b      	ldrb	r3, [r3, #1]
 8009e5c:	2b07      	cmp	r3, #7
 8009e5e:	f200 81bd 	bhi.w	800a1dc <USBH_HandleEnum+0x394>
 8009e62:	a201      	add	r2, pc, #4	@ (adr r2, 8009e68 <USBH_HandleEnum+0x20>)
 8009e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e68:	08009e89 	.word	0x08009e89
 8009e6c:	08009f43 	.word	0x08009f43
 8009e70:	08009fad 	.word	0x08009fad
 8009e74:	0800a037 	.word	0x0800a037
 8009e78:	0800a0a1 	.word	0x0800a0a1
 8009e7c:	0800a111 	.word	0x0800a111
 8009e80:	0800a157 	.word	0x0800a157
 8009e84:	0800a19d 	.word	0x0800a19d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009e88:	2108      	movs	r1, #8
 8009e8a:	6878      	ldr	r0, [r7, #4]
 8009e8c:	f000 fa4c 	bl	800a328 <USBH_Get_DevDesc>
 8009e90:	4603      	mov	r3, r0
 8009e92:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009e94:	7bbb      	ldrb	r3, [r7, #14]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d12e      	bne.n	8009ef8 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2201      	movs	r2, #1
 8009ea8:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	7919      	ldrb	r1, [r3, #4]
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009eba:	687a      	ldr	r2, [r7, #4]
 8009ebc:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009ebe:	9202      	str	r2, [sp, #8]
 8009ec0:	2200      	movs	r2, #0
 8009ec2:	9201      	str	r2, [sp, #4]
 8009ec4:	9300      	str	r3, [sp, #0]
 8009ec6:	4603      	mov	r3, r0
 8009ec8:	2280      	movs	r2, #128	@ 0x80
 8009eca:	6878      	ldr	r0, [r7, #4]
 8009ecc:	f001 f8dc 	bl	800b088 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	7959      	ldrb	r1, [r3, #5]
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009ee0:	687a      	ldr	r2, [r7, #4]
 8009ee2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009ee4:	9202      	str	r2, [sp, #8]
 8009ee6:	2200      	movs	r2, #0
 8009ee8:	9201      	str	r2, [sp, #4]
 8009eea:	9300      	str	r3, [sp, #0]
 8009eec:	4603      	mov	r3, r0
 8009eee:	2200      	movs	r2, #0
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f001 f8c9 	bl	800b088 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009ef6:	e173      	b.n	800a1e0 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ef8:	7bbb      	ldrb	r3, [r7, #14]
 8009efa:	2b03      	cmp	r3, #3
 8009efc:	f040 8170 	bne.w	800a1e0 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8009f00:	687b      	ldr	r3, [r7, #4]
 8009f02:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009f06:	3301      	adds	r3, #1
 8009f08:	b2da      	uxtb	r2, r3
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009f10:	687b      	ldr	r3, [r7, #4]
 8009f12:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009f16:	2b03      	cmp	r3, #3
 8009f18:	d903      	bls.n	8009f22 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	220d      	movs	r2, #13
 8009f1e:	701a      	strb	r2, [r3, #0]
      break;
 8009f20:	e15e      	b.n	800a1e0 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	795b      	ldrb	r3, [r3, #5]
 8009f26:	4619      	mov	r1, r3
 8009f28:	6878      	ldr	r0, [r7, #4]
 8009f2a:	f001 f8fd 	bl	800b128 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009f2e:	687b      	ldr	r3, [r7, #4]
 8009f30:	791b      	ldrb	r3, [r3, #4]
 8009f32:	4619      	mov	r1, r3
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f001 f8f7 	bl	800b128 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	2200      	movs	r2, #0
 8009f3e:	701a      	strb	r2, [r3, #0]
      break;
 8009f40:	e14e      	b.n	800a1e0 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009f42:	2112      	movs	r1, #18
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f000 f9ef 	bl	800a328 <USBH_Get_DevDesc>
 8009f4a:	4603      	mov	r3, r0
 8009f4c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009f4e:	7bbb      	ldrb	r3, [r7, #14]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d103      	bne.n	8009f5c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	2202      	movs	r2, #2
 8009f58:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009f5a:	e143      	b.n	800a1e4 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009f5c:	7bbb      	ldrb	r3, [r7, #14]
 8009f5e:	2b03      	cmp	r3, #3
 8009f60:	f040 8140 	bne.w	800a1e4 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	b2da      	uxtb	r2, r3
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009f7a:	2b03      	cmp	r3, #3
 8009f7c:	d903      	bls.n	8009f86 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	220d      	movs	r2, #13
 8009f82:	701a      	strb	r2, [r3, #0]
      break;
 8009f84:	e12e      	b.n	800a1e4 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	795b      	ldrb	r3, [r3, #5]
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	6878      	ldr	r0, [r7, #4]
 8009f8e:	f001 f8cb 	bl	800b128 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	791b      	ldrb	r3, [r3, #4]
 8009f96:	4619      	mov	r1, r3
 8009f98:	6878      	ldr	r0, [r7, #4]
 8009f9a:	f001 f8c5 	bl	800b128 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	2200      	movs	r2, #0
 8009fa8:	701a      	strb	r2, [r3, #0]
      break;
 8009faa:	e11b      	b.n	800a1e4 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009fac:	2101      	movs	r1, #1
 8009fae:	6878      	ldr	r0, [r7, #4]
 8009fb0:	f000 fa79 	bl	800a4a6 <USBH_SetAddress>
 8009fb4:	4603      	mov	r3, r0
 8009fb6:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009fb8:	7bbb      	ldrb	r3, [r7, #14]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d130      	bne.n	800a020 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8009fbe:	2002      	movs	r0, #2
 8009fc0:	f001 fbb1 	bl	800b726 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2201      	movs	r2, #1
 8009fc8:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	2203      	movs	r2, #3
 8009fd0:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	7919      	ldrb	r1, [r3, #4]
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009fe2:	687a      	ldr	r2, [r7, #4]
 8009fe4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009fe6:	9202      	str	r2, [sp, #8]
 8009fe8:	2200      	movs	r2, #0
 8009fea:	9201      	str	r2, [sp, #4]
 8009fec:	9300      	str	r3, [sp, #0]
 8009fee:	4603      	mov	r3, r0
 8009ff0:	2280      	movs	r2, #128	@ 0x80
 8009ff2:	6878      	ldr	r0, [r7, #4]
 8009ff4:	f001 f848 	bl	800b088 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	7959      	ldrb	r1, [r3, #5]
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800a00c:	9202      	str	r2, [sp, #8]
 800a00e:	2200      	movs	r2, #0
 800a010:	9201      	str	r2, [sp, #4]
 800a012:	9300      	str	r3, [sp, #0]
 800a014:	4603      	mov	r3, r0
 800a016:	2200      	movs	r2, #0
 800a018:	6878      	ldr	r0, [r7, #4]
 800a01a:	f001 f835 	bl	800b088 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800a01e:	e0e3      	b.n	800a1e8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a020:	7bbb      	ldrb	r3, [r7, #14]
 800a022:	2b03      	cmp	r3, #3
 800a024:	f040 80e0 	bne.w	800a1e8 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	220d      	movs	r2, #13
 800a02c:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	2200      	movs	r2, #0
 800a032:	705a      	strb	r2, [r3, #1]
      break;
 800a034:	e0d8      	b.n	800a1e8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800a036:	2109      	movs	r1, #9
 800a038:	6878      	ldr	r0, [r7, #4]
 800a03a:	f000 f9a1 	bl	800a380 <USBH_Get_CfgDesc>
 800a03e:	4603      	mov	r3, r0
 800a040:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a042:	7bbb      	ldrb	r3, [r7, #14]
 800a044:	2b00      	cmp	r3, #0
 800a046:	d103      	bne.n	800a050 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	2204      	movs	r2, #4
 800a04c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a04e:	e0cd      	b.n	800a1ec <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a050:	7bbb      	ldrb	r3, [r7, #14]
 800a052:	2b03      	cmp	r3, #3
 800a054:	f040 80ca 	bne.w	800a1ec <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a05e:	3301      	adds	r3, #1
 800a060:	b2da      	uxtb	r2, r3
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a06e:	2b03      	cmp	r3, #3
 800a070:	d903      	bls.n	800a07a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800a072:	687b      	ldr	r3, [r7, #4]
 800a074:	220d      	movs	r2, #13
 800a076:	701a      	strb	r2, [r3, #0]
      break;
 800a078:	e0b8      	b.n	800a1ec <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a07a:	687b      	ldr	r3, [r7, #4]
 800a07c:	795b      	ldrb	r3, [r3, #5]
 800a07e:	4619      	mov	r1, r3
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f001 f851 	bl	800b128 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	791b      	ldrb	r3, [r3, #4]
 800a08a:	4619      	mov	r1, r3
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	f001 f84b 	bl	800b128 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	2200      	movs	r2, #0
 800a096:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	2200      	movs	r2, #0
 800a09c:	701a      	strb	r2, [r3, #0]
      break;
 800a09e:	e0a5      	b.n	800a1ec <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800a0a6:	4619      	mov	r1, r3
 800a0a8:	6878      	ldr	r0, [r7, #4]
 800a0aa:	f000 f969 	bl	800a380 <USBH_Get_CfgDesc>
 800a0ae:	4603      	mov	r3, r0
 800a0b0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800a0b2:	7bbb      	ldrb	r3, [r7, #14]
 800a0b4:	2b00      	cmp	r3, #0
 800a0b6:	d103      	bne.n	800a0c0 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2205      	movs	r2, #5
 800a0bc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800a0be:	e097      	b.n	800a1f0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a0c0:	7bbb      	ldrb	r3, [r7, #14]
 800a0c2:	2b03      	cmp	r3, #3
 800a0c4:	f040 8094 	bne.w	800a1f0 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a0ce:	3301      	adds	r3, #1
 800a0d0:	b2da      	uxtb	r2, r3
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800a0de:	2b03      	cmp	r3, #3
 800a0e0:	d903      	bls.n	800a0ea <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	220d      	movs	r2, #13
 800a0e6:	701a      	strb	r2, [r3, #0]
      break;
 800a0e8:	e082      	b.n	800a1f0 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	795b      	ldrb	r3, [r3, #5]
 800a0ee:	4619      	mov	r1, r3
 800a0f0:	6878      	ldr	r0, [r7, #4]
 800a0f2:	f001 f819 	bl	800b128 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	791b      	ldrb	r3, [r3, #4]
 800a0fa:	4619      	mov	r1, r3
 800a0fc:	6878      	ldr	r0, [r7, #4]
 800a0fe:	f001 f813 	bl	800b128 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2200      	movs	r2, #0
 800a106:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	2200      	movs	r2, #0
 800a10c:	701a      	strb	r2, [r3, #0]
      break;
 800a10e:	e06f      	b.n	800a1f0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800a116:	2b00      	cmp	r3, #0
 800a118:	d019      	beq.n	800a14e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800a126:	23ff      	movs	r3, #255	@ 0xff
 800a128:	6878      	ldr	r0, [r7, #4]
 800a12a:	f000 f953 	bl	800a3d4 <USBH_Get_StringDesc>
 800a12e:	4603      	mov	r3, r0
 800a130:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a132:	7bbb      	ldrb	r3, [r7, #14]
 800a134:	2b00      	cmp	r3, #0
 800a136:	d103      	bne.n	800a140 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2206      	movs	r2, #6
 800a13c:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a13e:	e059      	b.n	800a1f4 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a140:	7bbb      	ldrb	r3, [r7, #14]
 800a142:	2b03      	cmp	r3, #3
 800a144:	d156      	bne.n	800a1f4 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2206      	movs	r2, #6
 800a14a:	705a      	strb	r2, [r3, #1]
      break;
 800a14c:	e052      	b.n	800a1f4 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	2206      	movs	r2, #6
 800a152:	705a      	strb	r2, [r3, #1]
      break;
 800a154:	e04e      	b.n	800a1f4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d019      	beq.n	800a194 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800a166:	687b      	ldr	r3, [r7, #4]
 800a168:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800a16c:	23ff      	movs	r3, #255	@ 0xff
 800a16e:	6878      	ldr	r0, [r7, #4]
 800a170:	f000 f930 	bl	800a3d4 <USBH_Get_StringDesc>
 800a174:	4603      	mov	r3, r0
 800a176:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a178:	7bbb      	ldrb	r3, [r7, #14]
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d103      	bne.n	800a186 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2207      	movs	r2, #7
 800a182:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800a184:	e038      	b.n	800a1f8 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a186:	7bbb      	ldrb	r3, [r7, #14]
 800a188:	2b03      	cmp	r3, #3
 800a18a:	d135      	bne.n	800a1f8 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2207      	movs	r2, #7
 800a190:	705a      	strb	r2, [r3, #1]
      break;
 800a192:	e031      	b.n	800a1f8 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	2207      	movs	r2, #7
 800a198:	705a      	strb	r2, [r3, #1]
      break;
 800a19a:	e02d      	b.n	800a1f8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d017      	beq.n	800a1d6 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800a1ac:	687b      	ldr	r3, [r7, #4]
 800a1ae:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800a1b2:	23ff      	movs	r3, #255	@ 0xff
 800a1b4:	6878      	ldr	r0, [r7, #4]
 800a1b6:	f000 f90d 	bl	800a3d4 <USBH_Get_StringDesc>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800a1be:	7bbb      	ldrb	r3, [r7, #14]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d102      	bne.n	800a1ca <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800a1c8:	e018      	b.n	800a1fc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800a1ca:	7bbb      	ldrb	r3, [r7, #14]
 800a1cc:	2b03      	cmp	r3, #3
 800a1ce:	d115      	bne.n	800a1fc <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800a1d0:	2300      	movs	r3, #0
 800a1d2:	73fb      	strb	r3, [r7, #15]
      break;
 800a1d4:	e012      	b.n	800a1fc <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	73fb      	strb	r3, [r7, #15]
      break;
 800a1da:	e00f      	b.n	800a1fc <USBH_HandleEnum+0x3b4>

    default:
      break;
 800a1dc:	bf00      	nop
 800a1de:	e00e      	b.n	800a1fe <USBH_HandleEnum+0x3b6>
      break;
 800a1e0:	bf00      	nop
 800a1e2:	e00c      	b.n	800a1fe <USBH_HandleEnum+0x3b6>
      break;
 800a1e4:	bf00      	nop
 800a1e6:	e00a      	b.n	800a1fe <USBH_HandleEnum+0x3b6>
      break;
 800a1e8:	bf00      	nop
 800a1ea:	e008      	b.n	800a1fe <USBH_HandleEnum+0x3b6>
      break;
 800a1ec:	bf00      	nop
 800a1ee:	e006      	b.n	800a1fe <USBH_HandleEnum+0x3b6>
      break;
 800a1f0:	bf00      	nop
 800a1f2:	e004      	b.n	800a1fe <USBH_HandleEnum+0x3b6>
      break;
 800a1f4:	bf00      	nop
 800a1f6:	e002      	b.n	800a1fe <USBH_HandleEnum+0x3b6>
      break;
 800a1f8:	bf00      	nop
 800a1fa:	e000      	b.n	800a1fe <USBH_HandleEnum+0x3b6>
      break;
 800a1fc:	bf00      	nop
  }
  return Status;
 800a1fe:	7bfb      	ldrb	r3, [r7, #15]
}
 800a200:	4618      	mov	r0, r3
 800a202:	3710      	adds	r7, #16
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800a208:	b480      	push	{r7}
 800a20a:	b083      	sub	sp, #12
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
 800a210:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	683a      	ldr	r2, [r7, #0]
 800a216:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800a21a:	bf00      	nop
 800a21c:	370c      	adds	r7, #12
 800a21e:	46bd      	mov	sp, r7
 800a220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a224:	4770      	bx	lr

0800a226 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800a226:	b580      	push	{r7, lr}
 800a228:	b082      	sub	sp, #8
 800a22a:	af00      	add	r7, sp, #0
 800a22c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a234:	1c5a      	adds	r2, r3, #1
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800a23c:	6878      	ldr	r0, [r7, #4]
 800a23e:	f000 f804 	bl	800a24a <USBH_HandleSof>
}
 800a242:	bf00      	nop
 800a244:	3708      	adds	r7, #8
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}

0800a24a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800a24a:	b580      	push	{r7, lr}
 800a24c:	b082      	sub	sp, #8
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	781b      	ldrb	r3, [r3, #0]
 800a256:	b2db      	uxtb	r3, r3
 800a258:	2b0b      	cmp	r3, #11
 800a25a:	d10a      	bne.n	800a272 <USBH_HandleSof+0x28>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a262:	2b00      	cmp	r3, #0
 800a264:	d005      	beq.n	800a272 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a26c:	699b      	ldr	r3, [r3, #24]
 800a26e:	6878      	ldr	r0, [r7, #4]
 800a270:	4798      	blx	r3
  }
}
 800a272:	bf00      	nop
 800a274:	3708      	adds	r7, #8
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800a27a:	b480      	push	{r7}
 800a27c:	b083      	sub	sp, #12
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	2201      	movs	r2, #1
 800a286:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800a28a:	bf00      	nop
}
 800a28c:	370c      	adds	r7, #12
 800a28e:	46bd      	mov	sp, r7
 800a290:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a294:	4770      	bx	lr

0800a296 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800a296:	b480      	push	{r7}
 800a298:	b083      	sub	sp, #12
 800a29a:	af00      	add	r7, sp, #0
 800a29c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	2200      	movs	r2, #0
 800a2a2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800a2a6:	bf00      	nop
}
 800a2a8:	370c      	adds	r7, #12
 800a2aa:	46bd      	mov	sp, r7
 800a2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b0:	4770      	bx	lr

0800a2b2 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800a2b2:	b480      	push	{r7}
 800a2b4:	b083      	sub	sp, #12
 800a2b6:	af00      	add	r7, sp, #0
 800a2b8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2201      	movs	r2, #1
 800a2be:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800a2ca:	687b      	ldr	r3, [r7, #4]
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a2d2:	2300      	movs	r3, #0
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	370c      	adds	r7, #12
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b082      	sub	sp, #8
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	2201      	movs	r2, #1
 800a2ec:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2200      	movs	r2, #0
 800a2fc:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800a300:	6878      	ldr	r0, [r7, #4]
 800a302:	f001 f8c4 	bl	800b48e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	791b      	ldrb	r3, [r3, #4]
 800a30a:	4619      	mov	r1, r3
 800a30c:	6878      	ldr	r0, [r7, #4]
 800a30e:	f000 ff0b 	bl	800b128 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	795b      	ldrb	r3, [r3, #5]
 800a316:	4619      	mov	r1, r3
 800a318:	6878      	ldr	r0, [r7, #4]
 800a31a:	f000 ff05 	bl	800b128 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800a31e:	2300      	movs	r3, #0
}
 800a320:	4618      	mov	r0, r3
 800a322:	3708      	adds	r7, #8
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}

0800a328 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b086      	sub	sp, #24
 800a32c:	af02      	add	r7, sp, #8
 800a32e:	6078      	str	r0, [r7, #4]
 800a330:	460b      	mov	r3, r1
 800a332:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800a334:	887b      	ldrh	r3, [r7, #2]
 800a336:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a33a:	d901      	bls.n	800a340 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a33c:	2303      	movs	r3, #3
 800a33e:	e01b      	b.n	800a378 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a346:	887b      	ldrh	r3, [r7, #2]
 800a348:	9300      	str	r3, [sp, #0]
 800a34a:	4613      	mov	r3, r2
 800a34c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a350:	2100      	movs	r1, #0
 800a352:	6878      	ldr	r0, [r7, #4]
 800a354:	f000 f872 	bl	800a43c <USBH_GetDescriptor>
 800a358:	4603      	mov	r3, r0
 800a35a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800a35c:	7bfb      	ldrb	r3, [r7, #15]
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d109      	bne.n	800a376 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a368:	887a      	ldrh	r2, [r7, #2]
 800a36a:	4619      	mov	r1, r3
 800a36c:	6878      	ldr	r0, [r7, #4]
 800a36e:	f000 f929 	bl	800a5c4 <USBH_ParseDevDesc>
 800a372:	4603      	mov	r3, r0
 800a374:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a376:	7bfb      	ldrb	r3, [r7, #15]
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3710      	adds	r7, #16
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b086      	sub	sp, #24
 800a384:	af02      	add	r7, sp, #8
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	460b      	mov	r3, r1
 800a38a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	331c      	adds	r3, #28
 800a390:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800a392:	887b      	ldrh	r3, [r7, #2]
 800a394:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a398:	d901      	bls.n	800a39e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a39a:	2303      	movs	r3, #3
 800a39c:	e016      	b.n	800a3cc <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a39e:	887b      	ldrh	r3, [r7, #2]
 800a3a0:	9300      	str	r3, [sp, #0]
 800a3a2:	68bb      	ldr	r3, [r7, #8]
 800a3a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a3a8:	2100      	movs	r1, #0
 800a3aa:	6878      	ldr	r0, [r7, #4]
 800a3ac:	f000 f846 	bl	800a43c <USBH_GetDescriptor>
 800a3b0:	4603      	mov	r3, r0
 800a3b2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a3b4:	7bfb      	ldrb	r3, [r7, #15]
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d107      	bne.n	800a3ca <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a3ba:	887b      	ldrh	r3, [r7, #2]
 800a3bc:	461a      	mov	r2, r3
 800a3be:	68b9      	ldr	r1, [r7, #8]
 800a3c0:	6878      	ldr	r0, [r7, #4]
 800a3c2:	f000 f9af 	bl	800a724 <USBH_ParseCfgDesc>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a3ca:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3710      	adds	r7, #16
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd80      	pop	{r7, pc}

0800a3d4 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b088      	sub	sp, #32
 800a3d8:	af02      	add	r7, sp, #8
 800a3da:	60f8      	str	r0, [r7, #12]
 800a3dc:	607a      	str	r2, [r7, #4]
 800a3de:	461a      	mov	r2, r3
 800a3e0:	460b      	mov	r3, r1
 800a3e2:	72fb      	strb	r3, [r7, #11]
 800a3e4:	4613      	mov	r3, r2
 800a3e6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800a3e8:	893b      	ldrh	r3, [r7, #8]
 800a3ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a3ee:	d802      	bhi.n	800a3f6 <USBH_Get_StringDesc+0x22>
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d101      	bne.n	800a3fa <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a3f6:	2303      	movs	r3, #3
 800a3f8:	e01c      	b.n	800a434 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800a3fa:	7afb      	ldrb	r3, [r7, #11]
 800a3fc:	b29b      	uxth	r3, r3
 800a3fe:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800a402:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a40a:	893b      	ldrh	r3, [r7, #8]
 800a40c:	9300      	str	r3, [sp, #0]
 800a40e:	460b      	mov	r3, r1
 800a410:	2100      	movs	r1, #0
 800a412:	68f8      	ldr	r0, [r7, #12]
 800a414:	f000 f812 	bl	800a43c <USBH_GetDescriptor>
 800a418:	4603      	mov	r3, r0
 800a41a:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a41c:	7dfb      	ldrb	r3, [r7, #23]
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d107      	bne.n	800a432 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a422:	68fb      	ldr	r3, [r7, #12]
 800a424:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a428:	893a      	ldrh	r2, [r7, #8]
 800a42a:	6879      	ldr	r1, [r7, #4]
 800a42c:	4618      	mov	r0, r3
 800a42e:	f000 fb8d 	bl	800ab4c <USBH_ParseStringDesc>
  }

  return status;
 800a432:	7dfb      	ldrb	r3, [r7, #23]
}
 800a434:	4618      	mov	r0, r3
 800a436:	3718      	adds	r7, #24
 800a438:	46bd      	mov	sp, r7
 800a43a:	bd80      	pop	{r7, pc}

0800a43c <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800a43c:	b580      	push	{r7, lr}
 800a43e:	b084      	sub	sp, #16
 800a440:	af00      	add	r7, sp, #0
 800a442:	60f8      	str	r0, [r7, #12]
 800a444:	607b      	str	r3, [r7, #4]
 800a446:	460b      	mov	r3, r1
 800a448:	72fb      	strb	r3, [r7, #11]
 800a44a:	4613      	mov	r3, r2
 800a44c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	789b      	ldrb	r3, [r3, #2]
 800a452:	2b01      	cmp	r3, #1
 800a454:	d11c      	bne.n	800a490 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a456:	7afb      	ldrb	r3, [r7, #11]
 800a458:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a45c:	b2da      	uxtb	r2, r3
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2206      	movs	r2, #6
 800a466:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	893a      	ldrh	r2, [r7, #8]
 800a46c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a46e:	893b      	ldrh	r3, [r7, #8]
 800a470:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a474:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a478:	d104      	bne.n	800a484 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	f240 4209 	movw	r2, #1033	@ 0x409
 800a480:	829a      	strh	r2, [r3, #20]
 800a482:	e002      	b.n	800a48a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a484:	68fb      	ldr	r3, [r7, #12]
 800a486:	2200      	movs	r2, #0
 800a488:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	8b3a      	ldrh	r2, [r7, #24]
 800a48e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a490:	8b3b      	ldrh	r3, [r7, #24]
 800a492:	461a      	mov	r2, r3
 800a494:	6879      	ldr	r1, [r7, #4]
 800a496:	68f8      	ldr	r0, [r7, #12]
 800a498:	f000 fba5 	bl	800abe6 <USBH_CtlReq>
 800a49c:	4603      	mov	r3, r0
}
 800a49e:	4618      	mov	r0, r3
 800a4a0:	3710      	adds	r7, #16
 800a4a2:	46bd      	mov	sp, r7
 800a4a4:	bd80      	pop	{r7, pc}

0800a4a6 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a4a6:	b580      	push	{r7, lr}
 800a4a8:	b082      	sub	sp, #8
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
 800a4ae:	460b      	mov	r3, r1
 800a4b0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	789b      	ldrb	r3, [r3, #2]
 800a4b6:	2b01      	cmp	r3, #1
 800a4b8:	d10f      	bne.n	800a4da <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	2205      	movs	r2, #5
 800a4c4:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a4c6:	78fb      	ldrb	r3, [r7, #3]
 800a4c8:	b29a      	uxth	r2, r3
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	2200      	movs	r2, #0
 800a4d8:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a4da:	2200      	movs	r2, #0
 800a4dc:	2100      	movs	r1, #0
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f000 fb81 	bl	800abe6 <USBH_CtlReq>
 800a4e4:	4603      	mov	r3, r0
}
 800a4e6:	4618      	mov	r0, r3
 800a4e8:	3708      	adds	r7, #8
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}

0800a4ee <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b082      	sub	sp, #8
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
 800a4f6:	460b      	mov	r3, r1
 800a4f8:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	789b      	ldrb	r3, [r3, #2]
 800a4fe:	2b01      	cmp	r3, #1
 800a500:	d10e      	bne.n	800a520 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	2200      	movs	r2, #0
 800a506:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2209      	movs	r2, #9
 800a50c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	887a      	ldrh	r2, [r7, #2]
 800a512:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	2200      	movs	r2, #0
 800a518:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a51a:	687b      	ldr	r3, [r7, #4]
 800a51c:	2200      	movs	r2, #0
 800a51e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a520:	2200      	movs	r2, #0
 800a522:	2100      	movs	r1, #0
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f000 fb5e 	bl	800abe6 <USBH_CtlReq>
 800a52a:	4603      	mov	r3, r0
}
 800a52c:	4618      	mov	r0, r3
 800a52e:	3708      	adds	r7, #8
 800a530:	46bd      	mov	sp, r7
 800a532:	bd80      	pop	{r7, pc}

0800a534 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a534:	b580      	push	{r7, lr}
 800a536:	b082      	sub	sp, #8
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	460b      	mov	r3, r1
 800a53e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	789b      	ldrb	r3, [r3, #2]
 800a544:	2b01      	cmp	r3, #1
 800a546:	d10f      	bne.n	800a568 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	2200      	movs	r2, #0
 800a54c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	2203      	movs	r2, #3
 800a552:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a554:	78fb      	ldrb	r3, [r7, #3]
 800a556:	b29a      	uxth	r2, r3
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2200      	movs	r2, #0
 800a560:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	2200      	movs	r2, #0
 800a566:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a568:	2200      	movs	r2, #0
 800a56a:	2100      	movs	r1, #0
 800a56c:	6878      	ldr	r0, [r7, #4]
 800a56e:	f000 fb3a 	bl	800abe6 <USBH_CtlReq>
 800a572:	4603      	mov	r3, r0
}
 800a574:	4618      	mov	r0, r3
 800a576:	3708      	adds	r7, #8
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b082      	sub	sp, #8
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
 800a584:	460b      	mov	r3, r1
 800a586:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	789b      	ldrb	r3, [r3, #2]
 800a58c:	2b01      	cmp	r3, #1
 800a58e:	d10f      	bne.n	800a5b0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2202      	movs	r2, #2
 800a594:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2201      	movs	r2, #1
 800a59a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	2200      	movs	r2, #0
 800a5a0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a5a2:	78fb      	ldrb	r3, [r7, #3]
 800a5a4:	b29a      	uxth	r2, r3
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	2200      	movs	r2, #0
 800a5ae:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a5b0:	2200      	movs	r2, #0
 800a5b2:	2100      	movs	r1, #0
 800a5b4:	6878      	ldr	r0, [r7, #4]
 800a5b6:	f000 fb16 	bl	800abe6 <USBH_CtlReq>
 800a5ba:	4603      	mov	r3, r0
}
 800a5bc:	4618      	mov	r0, r3
 800a5be:	3708      	adds	r7, #8
 800a5c0:	46bd      	mov	sp, r7
 800a5c2:	bd80      	pop	{r7, pc}

0800a5c4 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a5c4:	b480      	push	{r7}
 800a5c6:	b087      	sub	sp, #28
 800a5c8:	af00      	add	r7, sp, #0
 800a5ca:	60f8      	str	r0, [r7, #12]
 800a5cc:	60b9      	str	r1, [r7, #8]
 800a5ce:	4613      	mov	r3, r2
 800a5d0:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a5d8:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a5da:	2300      	movs	r3, #0
 800a5dc:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	2b00      	cmp	r3, #0
 800a5e2:	d101      	bne.n	800a5e8 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a5e4:	2302      	movs	r3, #2
 800a5e6:	e094      	b.n	800a712 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	781a      	ldrb	r2, [r3, #0]
 800a5ec:	693b      	ldr	r3, [r7, #16]
 800a5ee:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	785a      	ldrb	r2, [r3, #1]
 800a5f4:	693b      	ldr	r3, [r7, #16]
 800a5f6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a5f8:	68bb      	ldr	r3, [r7, #8]
 800a5fa:	3302      	adds	r3, #2
 800a5fc:	781b      	ldrb	r3, [r3, #0]
 800a5fe:	461a      	mov	r2, r3
 800a600:	68bb      	ldr	r3, [r7, #8]
 800a602:	3303      	adds	r3, #3
 800a604:	781b      	ldrb	r3, [r3, #0]
 800a606:	021b      	lsls	r3, r3, #8
 800a608:	b29b      	uxth	r3, r3
 800a60a:	4313      	orrs	r3, r2
 800a60c:	b29a      	uxth	r2, r3
 800a60e:	693b      	ldr	r3, [r7, #16]
 800a610:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a612:	68bb      	ldr	r3, [r7, #8]
 800a614:	791a      	ldrb	r2, [r3, #4]
 800a616:	693b      	ldr	r3, [r7, #16]
 800a618:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a61a:	68bb      	ldr	r3, [r7, #8]
 800a61c:	795a      	ldrb	r2, [r3, #5]
 800a61e:	693b      	ldr	r3, [r7, #16]
 800a620:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a622:	68bb      	ldr	r3, [r7, #8]
 800a624:	799a      	ldrb	r2, [r3, #6]
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a62a:	68bb      	ldr	r3, [r7, #8]
 800a62c:	79da      	ldrb	r2, [r3, #7]
 800a62e:	693b      	ldr	r3, [r7, #16]
 800a630:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d004      	beq.n	800a646 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a642:	2b01      	cmp	r3, #1
 800a644:	d11b      	bne.n	800a67e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a646:	693b      	ldr	r3, [r7, #16]
 800a648:	79db      	ldrb	r3, [r3, #7]
 800a64a:	2b20      	cmp	r3, #32
 800a64c:	dc0f      	bgt.n	800a66e <USBH_ParseDevDesc+0xaa>
 800a64e:	2b08      	cmp	r3, #8
 800a650:	db0f      	blt.n	800a672 <USBH_ParseDevDesc+0xae>
 800a652:	3b08      	subs	r3, #8
 800a654:	4a32      	ldr	r2, [pc, #200]	@ (800a720 <USBH_ParseDevDesc+0x15c>)
 800a656:	fa22 f303 	lsr.w	r3, r2, r3
 800a65a:	f003 0301 	and.w	r3, r3, #1
 800a65e:	2b00      	cmp	r3, #0
 800a660:	bf14      	ite	ne
 800a662:	2301      	movne	r3, #1
 800a664:	2300      	moveq	r3, #0
 800a666:	b2db      	uxtb	r3, r3
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d106      	bne.n	800a67a <USBH_ParseDevDesc+0xb6>
 800a66c:	e001      	b.n	800a672 <USBH_ParseDevDesc+0xae>
 800a66e:	2b40      	cmp	r3, #64	@ 0x40
 800a670:	d003      	beq.n	800a67a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800a672:	693b      	ldr	r3, [r7, #16]
 800a674:	2208      	movs	r2, #8
 800a676:	71da      	strb	r2, [r3, #7]
        break;
 800a678:	e000      	b.n	800a67c <USBH_ParseDevDesc+0xb8>
        break;
 800a67a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800a67c:	e00e      	b.n	800a69c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a684:	2b02      	cmp	r3, #2
 800a686:	d107      	bne.n	800a698 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	79db      	ldrb	r3, [r3, #7]
 800a68c:	2b08      	cmp	r3, #8
 800a68e:	d005      	beq.n	800a69c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800a690:	693b      	ldr	r3, [r7, #16]
 800a692:	2208      	movs	r2, #8
 800a694:	71da      	strb	r2, [r3, #7]
 800a696:	e001      	b.n	800a69c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a698:	2303      	movs	r3, #3
 800a69a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800a69c:	88fb      	ldrh	r3, [r7, #6]
 800a69e:	2b08      	cmp	r3, #8
 800a6a0:	d936      	bls.n	800a710 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a6a2:	68bb      	ldr	r3, [r7, #8]
 800a6a4:	3308      	adds	r3, #8
 800a6a6:	781b      	ldrb	r3, [r3, #0]
 800a6a8:	461a      	mov	r2, r3
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	3309      	adds	r3, #9
 800a6ae:	781b      	ldrb	r3, [r3, #0]
 800a6b0:	021b      	lsls	r3, r3, #8
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	4313      	orrs	r3, r2
 800a6b6:	b29a      	uxth	r2, r3
 800a6b8:	693b      	ldr	r3, [r7, #16]
 800a6ba:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a6bc:	68bb      	ldr	r3, [r7, #8]
 800a6be:	330a      	adds	r3, #10
 800a6c0:	781b      	ldrb	r3, [r3, #0]
 800a6c2:	461a      	mov	r2, r3
 800a6c4:	68bb      	ldr	r3, [r7, #8]
 800a6c6:	330b      	adds	r3, #11
 800a6c8:	781b      	ldrb	r3, [r3, #0]
 800a6ca:	021b      	lsls	r3, r3, #8
 800a6cc:	b29b      	uxth	r3, r3
 800a6ce:	4313      	orrs	r3, r2
 800a6d0:	b29a      	uxth	r2, r3
 800a6d2:	693b      	ldr	r3, [r7, #16]
 800a6d4:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	330c      	adds	r3, #12
 800a6da:	781b      	ldrb	r3, [r3, #0]
 800a6dc:	461a      	mov	r2, r3
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	330d      	adds	r3, #13
 800a6e2:	781b      	ldrb	r3, [r3, #0]
 800a6e4:	021b      	lsls	r3, r3, #8
 800a6e6:	b29b      	uxth	r3, r3
 800a6e8:	4313      	orrs	r3, r2
 800a6ea:	b29a      	uxth	r2, r3
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	7b9a      	ldrb	r2, [r3, #14]
 800a6f4:	693b      	ldr	r3, [r7, #16]
 800a6f6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a6f8:	68bb      	ldr	r3, [r7, #8]
 800a6fa:	7bda      	ldrb	r2, [r3, #15]
 800a6fc:	693b      	ldr	r3, [r7, #16]
 800a6fe:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	7c1a      	ldrb	r2, [r3, #16]
 800a704:	693b      	ldr	r3, [r7, #16]
 800a706:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a708:	68bb      	ldr	r3, [r7, #8]
 800a70a:	7c5a      	ldrb	r2, [r3, #17]
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a710:	7dfb      	ldrb	r3, [r7, #23]
}
 800a712:	4618      	mov	r0, r3
 800a714:	371c      	adds	r7, #28
 800a716:	46bd      	mov	sp, r7
 800a718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71c:	4770      	bx	lr
 800a71e:	bf00      	nop
 800a720:	01000101 	.word	0x01000101

0800a724 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a724:	b580      	push	{r7, lr}
 800a726:	b08c      	sub	sp, #48	@ 0x30
 800a728:	af00      	add	r7, sp, #0
 800a72a:	60f8      	str	r0, [r7, #12]
 800a72c:	60b9      	str	r1, [r7, #8]
 800a72e:	4613      	mov	r3, r2
 800a730:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a738:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a73a:	2300      	movs	r3, #0
 800a73c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a740:	2300      	movs	r3, #0
 800a742:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800a746:	2300      	movs	r3, #0
 800a748:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800a74c:	68bb      	ldr	r3, [r7, #8]
 800a74e:	2b00      	cmp	r3, #0
 800a750:	d101      	bne.n	800a756 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a752:	2302      	movs	r3, #2
 800a754:	e0da      	b.n	800a90c <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a756:	68bb      	ldr	r3, [r7, #8]
 800a758:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a75a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a75c:	781b      	ldrb	r3, [r3, #0]
 800a75e:	2b09      	cmp	r3, #9
 800a760:	d002      	beq.n	800a768 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a764:	2209      	movs	r2, #9
 800a766:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a768:	68bb      	ldr	r3, [r7, #8]
 800a76a:	781a      	ldrb	r2, [r3, #0]
 800a76c:	6a3b      	ldr	r3, [r7, #32]
 800a76e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a770:	68bb      	ldr	r3, [r7, #8]
 800a772:	785a      	ldrb	r2, [r3, #1]
 800a774:	6a3b      	ldr	r3, [r7, #32]
 800a776:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	3302      	adds	r3, #2
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	461a      	mov	r2, r3
 800a780:	68bb      	ldr	r3, [r7, #8]
 800a782:	3303      	adds	r3, #3
 800a784:	781b      	ldrb	r3, [r3, #0]
 800a786:	021b      	lsls	r3, r3, #8
 800a788:	b29b      	uxth	r3, r3
 800a78a:	4313      	orrs	r3, r2
 800a78c:	b29b      	uxth	r3, r3
 800a78e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a792:	bf28      	it	cs
 800a794:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800a798:	b29a      	uxth	r2, r3
 800a79a:	6a3b      	ldr	r3, [r7, #32]
 800a79c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	791a      	ldrb	r2, [r3, #4]
 800a7a2:	6a3b      	ldr	r3, [r7, #32]
 800a7a4:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	795a      	ldrb	r2, [r3, #5]
 800a7aa:	6a3b      	ldr	r3, [r7, #32]
 800a7ac:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a7ae:	68bb      	ldr	r3, [r7, #8]
 800a7b0:	799a      	ldrb	r2, [r3, #6]
 800a7b2:	6a3b      	ldr	r3, [r7, #32]
 800a7b4:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	79da      	ldrb	r2, [r3, #7]
 800a7ba:	6a3b      	ldr	r3, [r7, #32]
 800a7bc:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a7be:	68bb      	ldr	r3, [r7, #8]
 800a7c0:	7a1a      	ldrb	r2, [r3, #8]
 800a7c2:	6a3b      	ldr	r3, [r7, #32]
 800a7c4:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a7c6:	88fb      	ldrh	r3, [r7, #6]
 800a7c8:	2b09      	cmp	r3, #9
 800a7ca:	f240 809d 	bls.w	800a908 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800a7ce:	2309      	movs	r3, #9
 800a7d0:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a7d6:	e081      	b.n	800a8dc <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a7d8:	f107 0316 	add.w	r3, r7, #22
 800a7dc:	4619      	mov	r1, r3
 800a7de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a7e0:	f000 f9e7 	bl	800abb2 <USBH_GetNextDesc>
 800a7e4:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a7e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7e8:	785b      	ldrb	r3, [r3, #1]
 800a7ea:	2b04      	cmp	r3, #4
 800a7ec:	d176      	bne.n	800a8dc <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a7ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7f0:	781b      	ldrb	r3, [r3, #0]
 800a7f2:	2b09      	cmp	r3, #9
 800a7f4:	d002      	beq.n	800a7fc <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a7f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7f8:	2209      	movs	r2, #9
 800a7fa:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a7fc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a800:	221a      	movs	r2, #26
 800a802:	fb02 f303 	mul.w	r3, r2, r3
 800a806:	3308      	adds	r3, #8
 800a808:	6a3a      	ldr	r2, [r7, #32]
 800a80a:	4413      	add	r3, r2
 800a80c:	3302      	adds	r3, #2
 800a80e:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a810:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a812:	69f8      	ldr	r0, [r7, #28]
 800a814:	f000 f87e 	bl	800a914 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a818:	2300      	movs	r3, #0
 800a81a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a81e:	2300      	movs	r3, #0
 800a820:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a822:	e043      	b.n	800a8ac <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a824:	f107 0316 	add.w	r3, r7, #22
 800a828:	4619      	mov	r1, r3
 800a82a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a82c:	f000 f9c1 	bl	800abb2 <USBH_GetNextDesc>
 800a830:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a834:	785b      	ldrb	r3, [r3, #1]
 800a836:	2b05      	cmp	r3, #5
 800a838:	d138      	bne.n	800a8ac <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a83a:	69fb      	ldr	r3, [r7, #28]
 800a83c:	795b      	ldrb	r3, [r3, #5]
 800a83e:	2b01      	cmp	r3, #1
 800a840:	d113      	bne.n	800a86a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a842:	69fb      	ldr	r3, [r7, #28]
 800a844:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a846:	2b02      	cmp	r3, #2
 800a848:	d003      	beq.n	800a852 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a84a:	69fb      	ldr	r3, [r7, #28]
 800a84c:	799b      	ldrb	r3, [r3, #6]
 800a84e:	2b03      	cmp	r3, #3
 800a850:	d10b      	bne.n	800a86a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a852:	69fb      	ldr	r3, [r7, #28]
 800a854:	79db      	ldrb	r3, [r3, #7]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d10b      	bne.n	800a872 <USBH_ParseCfgDesc+0x14e>
 800a85a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a85c:	781b      	ldrb	r3, [r3, #0]
 800a85e:	2b09      	cmp	r3, #9
 800a860:	d007      	beq.n	800a872 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800a862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a864:	2209      	movs	r2, #9
 800a866:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a868:	e003      	b.n	800a872 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a86a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a86c:	2207      	movs	r2, #7
 800a86e:	701a      	strb	r2, [r3, #0]
 800a870:	e000      	b.n	800a874 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a872:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a874:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a878:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a87c:	3201      	adds	r2, #1
 800a87e:	00d2      	lsls	r2, r2, #3
 800a880:	211a      	movs	r1, #26
 800a882:	fb01 f303 	mul.w	r3, r1, r3
 800a886:	4413      	add	r3, r2
 800a888:	3308      	adds	r3, #8
 800a88a:	6a3a      	ldr	r2, [r7, #32]
 800a88c:	4413      	add	r3, r2
 800a88e:	3304      	adds	r3, #4
 800a890:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a892:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a894:	69b9      	ldr	r1, [r7, #24]
 800a896:	68f8      	ldr	r0, [r7, #12]
 800a898:	f000 f870 	bl	800a97c <USBH_ParseEPDesc>
 800a89c:	4603      	mov	r3, r0
 800a89e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800a8a2:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a8a6:	3301      	adds	r3, #1
 800a8a8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a8ac:	69fb      	ldr	r3, [r7, #28]
 800a8ae:	791b      	ldrb	r3, [r3, #4]
 800a8b0:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a8b4:	429a      	cmp	r2, r3
 800a8b6:	d204      	bcs.n	800a8c2 <USBH_ParseCfgDesc+0x19e>
 800a8b8:	6a3b      	ldr	r3, [r7, #32]
 800a8ba:	885a      	ldrh	r2, [r3, #2]
 800a8bc:	8afb      	ldrh	r3, [r7, #22]
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d8b0      	bhi.n	800a824 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a8c2:	69fb      	ldr	r3, [r7, #28]
 800a8c4:	791b      	ldrb	r3, [r3, #4]
 800a8c6:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a8ca:	429a      	cmp	r2, r3
 800a8cc:	d201      	bcs.n	800a8d2 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800a8ce:	2303      	movs	r3, #3
 800a8d0:	e01c      	b.n	800a90c <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800a8d2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a8d6:	3301      	adds	r3, #1
 800a8d8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a8dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a8e0:	2b01      	cmp	r3, #1
 800a8e2:	d805      	bhi.n	800a8f0 <USBH_ParseCfgDesc+0x1cc>
 800a8e4:	6a3b      	ldr	r3, [r7, #32]
 800a8e6:	885a      	ldrh	r2, [r3, #2]
 800a8e8:	8afb      	ldrh	r3, [r7, #22]
 800a8ea:	429a      	cmp	r2, r3
 800a8ec:	f63f af74 	bhi.w	800a7d8 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a8f0:	6a3b      	ldr	r3, [r7, #32]
 800a8f2:	791b      	ldrb	r3, [r3, #4]
 800a8f4:	2b02      	cmp	r3, #2
 800a8f6:	bf28      	it	cs
 800a8f8:	2302      	movcs	r3, #2
 800a8fa:	b2db      	uxtb	r3, r3
 800a8fc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a900:	429a      	cmp	r2, r3
 800a902:	d201      	bcs.n	800a908 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800a904:	2303      	movs	r3, #3
 800a906:	e001      	b.n	800a90c <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800a908:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3730      	adds	r7, #48	@ 0x30
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}

0800a914 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a914:	b480      	push	{r7}
 800a916:	b083      	sub	sp, #12
 800a918:	af00      	add	r7, sp, #0
 800a91a:	6078      	str	r0, [r7, #4]
 800a91c:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	781a      	ldrb	r2, [r3, #0]
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a926:	683b      	ldr	r3, [r7, #0]
 800a928:	785a      	ldrb	r2, [r3, #1]
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a92e:	683b      	ldr	r3, [r7, #0]
 800a930:	789a      	ldrb	r2, [r3, #2]
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	78da      	ldrb	r2, [r3, #3]
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800a93e:	683b      	ldr	r3, [r7, #0]
 800a940:	3304      	adds	r3, #4
 800a942:	781b      	ldrb	r3, [r3, #0]
 800a944:	2b02      	cmp	r3, #2
 800a946:	bf28      	it	cs
 800a948:	2302      	movcs	r3, #2
 800a94a:	b2da      	uxtb	r2, r3
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a950:	683b      	ldr	r3, [r7, #0]
 800a952:	795a      	ldrb	r2, [r3, #5]
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a958:	683b      	ldr	r3, [r7, #0]
 800a95a:	799a      	ldrb	r2, [r3, #6]
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a960:	683b      	ldr	r3, [r7, #0]
 800a962:	79da      	ldrb	r2, [r3, #7]
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	7a1a      	ldrb	r2, [r3, #8]
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	721a      	strb	r2, [r3, #8]
}
 800a970:	bf00      	nop
 800a972:	370c      	adds	r7, #12
 800a974:	46bd      	mov	sp, r7
 800a976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a97a:	4770      	bx	lr

0800a97c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a97c:	b480      	push	{r7}
 800a97e:	b087      	sub	sp, #28
 800a980:	af00      	add	r7, sp, #0
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	60b9      	str	r1, [r7, #8]
 800a986:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a988:	2300      	movs	r3, #0
 800a98a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	781a      	ldrb	r2, [r3, #0]
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	785a      	ldrb	r2, [r3, #1]
 800a998:	68bb      	ldr	r3, [r7, #8]
 800a99a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	789a      	ldrb	r2, [r3, #2]
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	78da      	ldrb	r2, [r3, #3]
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	3304      	adds	r3, #4
 800a9b0:	781b      	ldrb	r3, [r3, #0]
 800a9b2:	461a      	mov	r2, r3
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	3305      	adds	r3, #5
 800a9b8:	781b      	ldrb	r3, [r3, #0]
 800a9ba:	021b      	lsls	r3, r3, #8
 800a9bc:	b29b      	uxth	r3, r3
 800a9be:	4313      	orrs	r3, r2
 800a9c0:	b29a      	uxth	r2, r3
 800a9c2:	68bb      	ldr	r3, [r7, #8]
 800a9c4:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	799a      	ldrb	r2, [r3, #6]
 800a9ca:	68bb      	ldr	r3, [r7, #8]
 800a9cc:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	889b      	ldrh	r3, [r3, #4]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d009      	beq.n	800a9ea <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a9d6:	68bb      	ldr	r3, [r7, #8]
 800a9d8:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a9da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a9de:	d804      	bhi.n	800a9ea <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a9e0:	68bb      	ldr	r3, [r7, #8]
 800a9e2:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a9e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a9e8:	d901      	bls.n	800a9ee <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800a9ea:	2303      	movs	r3, #3
 800a9ec:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d136      	bne.n	800aa66 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800a9f8:	68bb      	ldr	r3, [r7, #8]
 800a9fa:	78db      	ldrb	r3, [r3, #3]
 800a9fc:	f003 0303 	and.w	r3, r3, #3
 800aa00:	2b02      	cmp	r3, #2
 800aa02:	d108      	bne.n	800aa16 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	889b      	ldrh	r3, [r3, #4]
 800aa08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aa0c:	f240 8097 	bls.w	800ab3e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aa10:	2303      	movs	r3, #3
 800aa12:	75fb      	strb	r3, [r7, #23]
 800aa14:	e093      	b.n	800ab3e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	78db      	ldrb	r3, [r3, #3]
 800aa1a:	f003 0303 	and.w	r3, r3, #3
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d107      	bne.n	800aa32 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800aa22:	68bb      	ldr	r3, [r7, #8]
 800aa24:	889b      	ldrh	r3, [r3, #4]
 800aa26:	2b40      	cmp	r3, #64	@ 0x40
 800aa28:	f240 8089 	bls.w	800ab3e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aa2c:	2303      	movs	r3, #3
 800aa2e:	75fb      	strb	r3, [r7, #23]
 800aa30:	e085      	b.n	800ab3e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800aa32:	68bb      	ldr	r3, [r7, #8]
 800aa34:	78db      	ldrb	r3, [r3, #3]
 800aa36:	f003 0303 	and.w	r3, r3, #3
 800aa3a:	2b01      	cmp	r3, #1
 800aa3c:	d005      	beq.n	800aa4a <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800aa3e:	68bb      	ldr	r3, [r7, #8]
 800aa40:	78db      	ldrb	r3, [r3, #3]
 800aa42:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800aa46:	2b03      	cmp	r3, #3
 800aa48:	d10a      	bne.n	800aa60 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800aa4a:	68bb      	ldr	r3, [r7, #8]
 800aa4c:	799b      	ldrb	r3, [r3, #6]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d003      	beq.n	800aa5a <USBH_ParseEPDesc+0xde>
 800aa52:	68bb      	ldr	r3, [r7, #8]
 800aa54:	799b      	ldrb	r3, [r3, #6]
 800aa56:	2b10      	cmp	r3, #16
 800aa58:	d970      	bls.n	800ab3c <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800aa5a:	2303      	movs	r3, #3
 800aa5c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800aa5e:	e06d      	b.n	800ab3c <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800aa60:	2303      	movs	r3, #3
 800aa62:	75fb      	strb	r3, [r7, #23]
 800aa64:	e06b      	b.n	800ab3e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aa6c:	2b01      	cmp	r3, #1
 800aa6e:	d13c      	bne.n	800aaea <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800aa70:	68bb      	ldr	r3, [r7, #8]
 800aa72:	78db      	ldrb	r3, [r3, #3]
 800aa74:	f003 0303 	and.w	r3, r3, #3
 800aa78:	2b02      	cmp	r3, #2
 800aa7a:	d005      	beq.n	800aa88 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	78db      	ldrb	r3, [r3, #3]
 800aa80:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d106      	bne.n	800aa96 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	889b      	ldrh	r3, [r3, #4]
 800aa8c:	2b40      	cmp	r3, #64	@ 0x40
 800aa8e:	d956      	bls.n	800ab3e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aa90:	2303      	movs	r3, #3
 800aa92:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800aa94:	e053      	b.n	800ab3e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800aa96:	68bb      	ldr	r3, [r7, #8]
 800aa98:	78db      	ldrb	r3, [r3, #3]
 800aa9a:	f003 0303 	and.w	r3, r3, #3
 800aa9e:	2b01      	cmp	r3, #1
 800aaa0:	d10e      	bne.n	800aac0 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800aaa2:	68bb      	ldr	r3, [r7, #8]
 800aaa4:	799b      	ldrb	r3, [r3, #6]
 800aaa6:	2b00      	cmp	r3, #0
 800aaa8:	d007      	beq.n	800aaba <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800aaaa:	68bb      	ldr	r3, [r7, #8]
 800aaac:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800aaae:	2b10      	cmp	r3, #16
 800aab0:	d803      	bhi.n	800aaba <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800aab2:	68bb      	ldr	r3, [r7, #8]
 800aab4:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800aab6:	2b40      	cmp	r3, #64	@ 0x40
 800aab8:	d941      	bls.n	800ab3e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aaba:	2303      	movs	r3, #3
 800aabc:	75fb      	strb	r3, [r7, #23]
 800aabe:	e03e      	b.n	800ab3e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800aac0:	68bb      	ldr	r3, [r7, #8]
 800aac2:	78db      	ldrb	r3, [r3, #3]
 800aac4:	f003 0303 	and.w	r3, r3, #3
 800aac8:	2b03      	cmp	r3, #3
 800aaca:	d10b      	bne.n	800aae4 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800aacc:	68bb      	ldr	r3, [r7, #8]
 800aace:	799b      	ldrb	r3, [r3, #6]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d004      	beq.n	800aade <USBH_ParseEPDesc+0x162>
 800aad4:	68bb      	ldr	r3, [r7, #8]
 800aad6:	889b      	ldrh	r3, [r3, #4]
 800aad8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800aadc:	d32f      	bcc.n	800ab3e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800aade:	2303      	movs	r3, #3
 800aae0:	75fb      	strb	r3, [r7, #23]
 800aae2:	e02c      	b.n	800ab3e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800aae4:	2303      	movs	r3, #3
 800aae6:	75fb      	strb	r3, [r7, #23]
 800aae8:	e029      	b.n	800ab3e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aaf0:	2b02      	cmp	r3, #2
 800aaf2:	d120      	bne.n	800ab36 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800aaf4:	68bb      	ldr	r3, [r7, #8]
 800aaf6:	78db      	ldrb	r3, [r3, #3]
 800aaf8:	f003 0303 	and.w	r3, r3, #3
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d106      	bne.n	800ab0e <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800ab00:	68bb      	ldr	r3, [r7, #8]
 800ab02:	889b      	ldrh	r3, [r3, #4]
 800ab04:	2b08      	cmp	r3, #8
 800ab06:	d01a      	beq.n	800ab3e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ab08:	2303      	movs	r3, #3
 800ab0a:	75fb      	strb	r3, [r7, #23]
 800ab0c:	e017      	b.n	800ab3e <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800ab0e:	68bb      	ldr	r3, [r7, #8]
 800ab10:	78db      	ldrb	r3, [r3, #3]
 800ab12:	f003 0303 	and.w	r3, r3, #3
 800ab16:	2b03      	cmp	r3, #3
 800ab18:	d10a      	bne.n	800ab30 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800ab1a:	68bb      	ldr	r3, [r7, #8]
 800ab1c:	799b      	ldrb	r3, [r3, #6]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d003      	beq.n	800ab2a <USBH_ParseEPDesc+0x1ae>
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	889b      	ldrh	r3, [r3, #4]
 800ab26:	2b08      	cmp	r3, #8
 800ab28:	d909      	bls.n	800ab3e <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800ab2a:	2303      	movs	r3, #3
 800ab2c:	75fb      	strb	r3, [r7, #23]
 800ab2e:	e006      	b.n	800ab3e <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800ab30:	2303      	movs	r3, #3
 800ab32:	75fb      	strb	r3, [r7, #23]
 800ab34:	e003      	b.n	800ab3e <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800ab36:	2303      	movs	r3, #3
 800ab38:	75fb      	strb	r3, [r7, #23]
 800ab3a:	e000      	b.n	800ab3e <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800ab3c:	bf00      	nop
  }

  return status;
 800ab3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab40:	4618      	mov	r0, r3
 800ab42:	371c      	adds	r7, #28
 800ab44:	46bd      	mov	sp, r7
 800ab46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab4a:	4770      	bx	lr

0800ab4c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800ab4c:	b480      	push	{r7}
 800ab4e:	b087      	sub	sp, #28
 800ab50:	af00      	add	r7, sp, #0
 800ab52:	60f8      	str	r0, [r7, #12]
 800ab54:	60b9      	str	r1, [r7, #8]
 800ab56:	4613      	mov	r3, r2
 800ab58:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800ab5a:	68fb      	ldr	r3, [r7, #12]
 800ab5c:	3301      	adds	r3, #1
 800ab5e:	781b      	ldrb	r3, [r3, #0]
 800ab60:	2b03      	cmp	r3, #3
 800ab62:	d120      	bne.n	800aba6 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	781b      	ldrb	r3, [r3, #0]
 800ab68:	1e9a      	subs	r2, r3, #2
 800ab6a:	88fb      	ldrh	r3, [r7, #6]
 800ab6c:	4293      	cmp	r3, r2
 800ab6e:	bf28      	it	cs
 800ab70:	4613      	movcs	r3, r2
 800ab72:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	3302      	adds	r3, #2
 800ab78:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800ab7a:	2300      	movs	r3, #0
 800ab7c:	82fb      	strh	r3, [r7, #22]
 800ab7e:	e00b      	b.n	800ab98 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800ab80:	8afb      	ldrh	r3, [r7, #22]
 800ab82:	68fa      	ldr	r2, [r7, #12]
 800ab84:	4413      	add	r3, r2
 800ab86:	781a      	ldrb	r2, [r3, #0]
 800ab88:	68bb      	ldr	r3, [r7, #8]
 800ab8a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	3301      	adds	r3, #1
 800ab90:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800ab92:	8afb      	ldrh	r3, [r7, #22]
 800ab94:	3302      	adds	r3, #2
 800ab96:	82fb      	strh	r3, [r7, #22]
 800ab98:	8afa      	ldrh	r2, [r7, #22]
 800ab9a:	8abb      	ldrh	r3, [r7, #20]
 800ab9c:	429a      	cmp	r2, r3
 800ab9e:	d3ef      	bcc.n	800ab80 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800aba0:	68bb      	ldr	r3, [r7, #8]
 800aba2:	2200      	movs	r2, #0
 800aba4:	701a      	strb	r2, [r3, #0]
  }
}
 800aba6:	bf00      	nop
 800aba8:	371c      	adds	r7, #28
 800abaa:	46bd      	mov	sp, r7
 800abac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abb0:	4770      	bx	lr

0800abb2 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800abb2:	b480      	push	{r7}
 800abb4:	b085      	sub	sp, #20
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
 800abba:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800abbc:	683b      	ldr	r3, [r7, #0]
 800abbe:	881b      	ldrh	r3, [r3, #0]
 800abc0:	687a      	ldr	r2, [r7, #4]
 800abc2:	7812      	ldrb	r2, [r2, #0]
 800abc4:	4413      	add	r3, r2
 800abc6:	b29a      	uxth	r2, r3
 800abc8:	683b      	ldr	r3, [r7, #0]
 800abca:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	781b      	ldrb	r3, [r3, #0]
 800abd0:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	4413      	add	r3, r2
 800abd6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800abd8:	68fb      	ldr	r3, [r7, #12]
}
 800abda:	4618      	mov	r0, r3
 800abdc:	3714      	adds	r7, #20
 800abde:	46bd      	mov	sp, r7
 800abe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe4:	4770      	bx	lr

0800abe6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800abe6:	b580      	push	{r7, lr}
 800abe8:	b086      	sub	sp, #24
 800abea:	af00      	add	r7, sp, #0
 800abec:	60f8      	str	r0, [r7, #12]
 800abee:	60b9      	str	r1, [r7, #8]
 800abf0:	4613      	mov	r3, r2
 800abf2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800abf4:	2301      	movs	r3, #1
 800abf6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	789b      	ldrb	r3, [r3, #2]
 800abfc:	2b01      	cmp	r3, #1
 800abfe:	d002      	beq.n	800ac06 <USBH_CtlReq+0x20>
 800ac00:	2b02      	cmp	r3, #2
 800ac02:	d00f      	beq.n	800ac24 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800ac04:	e027      	b.n	800ac56 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	68ba      	ldr	r2, [r7, #8]
 800ac0a:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800ac0c:	68fb      	ldr	r3, [r7, #12]
 800ac0e:	88fa      	ldrh	r2, [r7, #6]
 800ac10:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800ac12:	68fb      	ldr	r3, [r7, #12]
 800ac14:	2201      	movs	r2, #1
 800ac16:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	2202      	movs	r2, #2
 800ac1c:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800ac1e:	2301      	movs	r3, #1
 800ac20:	75fb      	strb	r3, [r7, #23]
      break;
 800ac22:	e018      	b.n	800ac56 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800ac24:	68f8      	ldr	r0, [r7, #12]
 800ac26:	f000 f81b 	bl	800ac60 <USBH_HandleControl>
 800ac2a:	4603      	mov	r3, r0
 800ac2c:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800ac2e:	7dfb      	ldrb	r3, [r7, #23]
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d002      	beq.n	800ac3a <USBH_CtlReq+0x54>
 800ac34:	7dfb      	ldrb	r3, [r7, #23]
 800ac36:	2b03      	cmp	r3, #3
 800ac38:	d106      	bne.n	800ac48 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	2201      	movs	r2, #1
 800ac3e:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	2200      	movs	r2, #0
 800ac44:	761a      	strb	r2, [r3, #24]
      break;
 800ac46:	e005      	b.n	800ac54 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800ac48:	7dfb      	ldrb	r3, [r7, #23]
 800ac4a:	2b02      	cmp	r3, #2
 800ac4c:	d102      	bne.n	800ac54 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	2201      	movs	r2, #1
 800ac52:	709a      	strb	r2, [r3, #2]
      break;
 800ac54:	bf00      	nop
  }
  return status;
 800ac56:	7dfb      	ldrb	r3, [r7, #23]
}
 800ac58:	4618      	mov	r0, r3
 800ac5a:	3718      	adds	r7, #24
 800ac5c:	46bd      	mov	sp, r7
 800ac5e:	bd80      	pop	{r7, pc}

0800ac60 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800ac60:	b580      	push	{r7, lr}
 800ac62:	b086      	sub	sp, #24
 800ac64:	af02      	add	r7, sp, #8
 800ac66:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800ac68:	2301      	movs	r3, #1
 800ac6a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ac6c:	2300      	movs	r3, #0
 800ac6e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	7e1b      	ldrb	r3, [r3, #24]
 800ac74:	3b01      	subs	r3, #1
 800ac76:	2b0a      	cmp	r3, #10
 800ac78:	f200 8156 	bhi.w	800af28 <USBH_HandleControl+0x2c8>
 800ac7c:	a201      	add	r2, pc, #4	@ (adr r2, 800ac84 <USBH_HandleControl+0x24>)
 800ac7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac82:	bf00      	nop
 800ac84:	0800acb1 	.word	0x0800acb1
 800ac88:	0800accb 	.word	0x0800accb
 800ac8c:	0800ad35 	.word	0x0800ad35
 800ac90:	0800ad5b 	.word	0x0800ad5b
 800ac94:	0800ad93 	.word	0x0800ad93
 800ac98:	0800adbd 	.word	0x0800adbd
 800ac9c:	0800ae0f 	.word	0x0800ae0f
 800aca0:	0800ae31 	.word	0x0800ae31
 800aca4:	0800ae6d 	.word	0x0800ae6d
 800aca8:	0800ae93 	.word	0x0800ae93
 800acac:	0800aed1 	.word	0x0800aed1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	f103 0110 	add.w	r1, r3, #16
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	795b      	ldrb	r3, [r3, #5]
 800acba:	461a      	mov	r2, r3
 800acbc:	6878      	ldr	r0, [r7, #4]
 800acbe:	f000 f943 	bl	800af48 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2202      	movs	r2, #2
 800acc6:	761a      	strb	r2, [r3, #24]
      break;
 800acc8:	e139      	b.n	800af3e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	795b      	ldrb	r3, [r3, #5]
 800acce:	4619      	mov	r1, r3
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f000 fccb 	bl	800b66c <USBH_LL_GetURBState>
 800acd6:	4603      	mov	r3, r0
 800acd8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800acda:	7bbb      	ldrb	r3, [r7, #14]
 800acdc:	2b01      	cmp	r3, #1
 800acde:	d11e      	bne.n	800ad1e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	7c1b      	ldrb	r3, [r3, #16]
 800ace4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ace8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	8adb      	ldrh	r3, [r3, #22]
 800acee:	2b00      	cmp	r3, #0
 800acf0:	d00a      	beq.n	800ad08 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800acf2:	7b7b      	ldrb	r3, [r7, #13]
 800acf4:	2b80      	cmp	r3, #128	@ 0x80
 800acf6:	d103      	bne.n	800ad00 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	2203      	movs	r2, #3
 800acfc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800acfe:	e115      	b.n	800af2c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	2205      	movs	r2, #5
 800ad04:	761a      	strb	r2, [r3, #24]
      break;
 800ad06:	e111      	b.n	800af2c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800ad08:	7b7b      	ldrb	r3, [r7, #13]
 800ad0a:	2b80      	cmp	r3, #128	@ 0x80
 800ad0c:	d103      	bne.n	800ad16 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800ad0e:	687b      	ldr	r3, [r7, #4]
 800ad10:	2209      	movs	r2, #9
 800ad12:	761a      	strb	r2, [r3, #24]
      break;
 800ad14:	e10a      	b.n	800af2c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	2207      	movs	r2, #7
 800ad1a:	761a      	strb	r2, [r3, #24]
      break;
 800ad1c:	e106      	b.n	800af2c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800ad1e:	7bbb      	ldrb	r3, [r7, #14]
 800ad20:	2b04      	cmp	r3, #4
 800ad22:	d003      	beq.n	800ad2c <USBH_HandleControl+0xcc>
 800ad24:	7bbb      	ldrb	r3, [r7, #14]
 800ad26:	2b02      	cmp	r3, #2
 800ad28:	f040 8100 	bne.w	800af2c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	220b      	movs	r2, #11
 800ad30:	761a      	strb	r2, [r3, #24]
      break;
 800ad32:	e0fb      	b.n	800af2c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ad3a:	b29a      	uxth	r2, r3
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	6899      	ldr	r1, [r3, #8]
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	899a      	ldrh	r2, [r3, #12]
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	791b      	ldrb	r3, [r3, #4]
 800ad4c:	6878      	ldr	r0, [r7, #4]
 800ad4e:	f000 f93a 	bl	800afc6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	2204      	movs	r2, #4
 800ad56:	761a      	strb	r2, [r3, #24]
      break;
 800ad58:	e0f1      	b.n	800af3e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	791b      	ldrb	r3, [r3, #4]
 800ad5e:	4619      	mov	r1, r3
 800ad60:	6878      	ldr	r0, [r7, #4]
 800ad62:	f000 fc83 	bl	800b66c <USBH_LL_GetURBState>
 800ad66:	4603      	mov	r3, r0
 800ad68:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800ad6a:	7bbb      	ldrb	r3, [r7, #14]
 800ad6c:	2b01      	cmp	r3, #1
 800ad6e:	d102      	bne.n	800ad76 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2209      	movs	r2, #9
 800ad74:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800ad76:	7bbb      	ldrb	r3, [r7, #14]
 800ad78:	2b05      	cmp	r3, #5
 800ad7a:	d102      	bne.n	800ad82 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800ad7c:	2303      	movs	r3, #3
 800ad7e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ad80:	e0d6      	b.n	800af30 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800ad82:	7bbb      	ldrb	r3, [r7, #14]
 800ad84:	2b04      	cmp	r3, #4
 800ad86:	f040 80d3 	bne.w	800af30 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	220b      	movs	r2, #11
 800ad8e:	761a      	strb	r2, [r3, #24]
      break;
 800ad90:	e0ce      	b.n	800af30 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	6899      	ldr	r1, [r3, #8]
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	899a      	ldrh	r2, [r3, #12]
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	795b      	ldrb	r3, [r3, #5]
 800ad9e:	2001      	movs	r0, #1
 800ada0:	9000      	str	r0, [sp, #0]
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	f000 f8ea 	bl	800af7c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800adae:	b29a      	uxth	r2, r3
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	2206      	movs	r2, #6
 800adb8:	761a      	strb	r2, [r3, #24]
      break;
 800adba:	e0c0      	b.n	800af3e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	795b      	ldrb	r3, [r3, #5]
 800adc0:	4619      	mov	r1, r3
 800adc2:	6878      	ldr	r0, [r7, #4]
 800adc4:	f000 fc52 	bl	800b66c <USBH_LL_GetURBState>
 800adc8:	4603      	mov	r3, r0
 800adca:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800adcc:	7bbb      	ldrb	r3, [r7, #14]
 800adce:	2b01      	cmp	r3, #1
 800add0:	d103      	bne.n	800adda <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	2207      	movs	r2, #7
 800add6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800add8:	e0ac      	b.n	800af34 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800adda:	7bbb      	ldrb	r3, [r7, #14]
 800addc:	2b05      	cmp	r3, #5
 800adde:	d105      	bne.n	800adec <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	220c      	movs	r2, #12
 800ade4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800ade6:	2303      	movs	r3, #3
 800ade8:	73fb      	strb	r3, [r7, #15]
      break;
 800adea:	e0a3      	b.n	800af34 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800adec:	7bbb      	ldrb	r3, [r7, #14]
 800adee:	2b02      	cmp	r3, #2
 800adf0:	d103      	bne.n	800adfa <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2205      	movs	r2, #5
 800adf6:	761a      	strb	r2, [r3, #24]
      break;
 800adf8:	e09c      	b.n	800af34 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800adfa:	7bbb      	ldrb	r3, [r7, #14]
 800adfc:	2b04      	cmp	r3, #4
 800adfe:	f040 8099 	bne.w	800af34 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	220b      	movs	r2, #11
 800ae06:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800ae08:	2302      	movs	r3, #2
 800ae0a:	73fb      	strb	r3, [r7, #15]
      break;
 800ae0c:	e092      	b.n	800af34 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	791b      	ldrb	r3, [r3, #4]
 800ae12:	2200      	movs	r2, #0
 800ae14:	2100      	movs	r1, #0
 800ae16:	6878      	ldr	r0, [r7, #4]
 800ae18:	f000 f8d5 	bl	800afc6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ae22:	b29a      	uxth	r2, r3
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	2208      	movs	r2, #8
 800ae2c:	761a      	strb	r2, [r3, #24]

      break;
 800ae2e:	e086      	b.n	800af3e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	791b      	ldrb	r3, [r3, #4]
 800ae34:	4619      	mov	r1, r3
 800ae36:	6878      	ldr	r0, [r7, #4]
 800ae38:	f000 fc18 	bl	800b66c <USBH_LL_GetURBState>
 800ae3c:	4603      	mov	r3, r0
 800ae3e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ae40:	7bbb      	ldrb	r3, [r7, #14]
 800ae42:	2b01      	cmp	r3, #1
 800ae44:	d105      	bne.n	800ae52 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	220d      	movs	r2, #13
 800ae4a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ae50:	e072      	b.n	800af38 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800ae52:	7bbb      	ldrb	r3, [r7, #14]
 800ae54:	2b04      	cmp	r3, #4
 800ae56:	d103      	bne.n	800ae60 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	220b      	movs	r2, #11
 800ae5c:	761a      	strb	r2, [r3, #24]
      break;
 800ae5e:	e06b      	b.n	800af38 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800ae60:	7bbb      	ldrb	r3, [r7, #14]
 800ae62:	2b05      	cmp	r3, #5
 800ae64:	d168      	bne.n	800af38 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800ae66:	2303      	movs	r3, #3
 800ae68:	73fb      	strb	r3, [r7, #15]
      break;
 800ae6a:	e065      	b.n	800af38 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800ae6c:	687b      	ldr	r3, [r7, #4]
 800ae6e:	795b      	ldrb	r3, [r3, #5]
 800ae70:	2201      	movs	r2, #1
 800ae72:	9200      	str	r2, [sp, #0]
 800ae74:	2200      	movs	r2, #0
 800ae76:	2100      	movs	r1, #0
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f000 f87f 	bl	800af7c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ae84:	b29a      	uxth	r2, r3
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	220a      	movs	r2, #10
 800ae8e:	761a      	strb	r2, [r3, #24]
      break;
 800ae90:	e055      	b.n	800af3e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	795b      	ldrb	r3, [r3, #5]
 800ae96:	4619      	mov	r1, r3
 800ae98:	6878      	ldr	r0, [r7, #4]
 800ae9a:	f000 fbe7 	bl	800b66c <USBH_LL_GetURBState>
 800ae9e:	4603      	mov	r3, r0
 800aea0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800aea2:	7bbb      	ldrb	r3, [r7, #14]
 800aea4:	2b01      	cmp	r3, #1
 800aea6:	d105      	bne.n	800aeb4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800aea8:	2300      	movs	r3, #0
 800aeaa:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	220d      	movs	r2, #13
 800aeb0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800aeb2:	e043      	b.n	800af3c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800aeb4:	7bbb      	ldrb	r3, [r7, #14]
 800aeb6:	2b02      	cmp	r3, #2
 800aeb8:	d103      	bne.n	800aec2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	2209      	movs	r2, #9
 800aebe:	761a      	strb	r2, [r3, #24]
      break;
 800aec0:	e03c      	b.n	800af3c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800aec2:	7bbb      	ldrb	r3, [r7, #14]
 800aec4:	2b04      	cmp	r3, #4
 800aec6:	d139      	bne.n	800af3c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	220b      	movs	r2, #11
 800aecc:	761a      	strb	r2, [r3, #24]
      break;
 800aece:	e035      	b.n	800af3c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800aed0:	687b      	ldr	r3, [r7, #4]
 800aed2:	7e5b      	ldrb	r3, [r3, #25]
 800aed4:	3301      	adds	r3, #1
 800aed6:	b2da      	uxtb	r2, r3
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	765a      	strb	r2, [r3, #25]
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	7e5b      	ldrb	r3, [r3, #25]
 800aee0:	2b02      	cmp	r3, #2
 800aee2:	d806      	bhi.n	800aef2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	2201      	movs	r2, #1
 800aee8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	2201      	movs	r2, #1
 800aeee:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800aef0:	e025      	b.n	800af3e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800aef8:	2106      	movs	r1, #6
 800aefa:	6878      	ldr	r0, [r7, #4]
 800aefc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	2200      	movs	r2, #0
 800af02:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	795b      	ldrb	r3, [r3, #5]
 800af08:	4619      	mov	r1, r3
 800af0a:	6878      	ldr	r0, [r7, #4]
 800af0c:	f000 f90c 	bl	800b128 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	791b      	ldrb	r3, [r3, #4]
 800af14:	4619      	mov	r1, r3
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f000 f906 	bl	800b128 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2200      	movs	r2, #0
 800af20:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800af22:	2302      	movs	r3, #2
 800af24:	73fb      	strb	r3, [r7, #15]
      break;
 800af26:	e00a      	b.n	800af3e <USBH_HandleControl+0x2de>

    default:
      break;
 800af28:	bf00      	nop
 800af2a:	e008      	b.n	800af3e <USBH_HandleControl+0x2de>
      break;
 800af2c:	bf00      	nop
 800af2e:	e006      	b.n	800af3e <USBH_HandleControl+0x2de>
      break;
 800af30:	bf00      	nop
 800af32:	e004      	b.n	800af3e <USBH_HandleControl+0x2de>
      break;
 800af34:	bf00      	nop
 800af36:	e002      	b.n	800af3e <USBH_HandleControl+0x2de>
      break;
 800af38:	bf00      	nop
 800af3a:	e000      	b.n	800af3e <USBH_HandleControl+0x2de>
      break;
 800af3c:	bf00      	nop
  }

  return status;
 800af3e:	7bfb      	ldrb	r3, [r7, #15]
}
 800af40:	4618      	mov	r0, r3
 800af42:	3710      	adds	r7, #16
 800af44:	46bd      	mov	sp, r7
 800af46:	bd80      	pop	{r7, pc}

0800af48 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800af48:	b580      	push	{r7, lr}
 800af4a:	b088      	sub	sp, #32
 800af4c:	af04      	add	r7, sp, #16
 800af4e:	60f8      	str	r0, [r7, #12]
 800af50:	60b9      	str	r1, [r7, #8]
 800af52:	4613      	mov	r3, r2
 800af54:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800af56:	79f9      	ldrb	r1, [r7, #7]
 800af58:	2300      	movs	r3, #0
 800af5a:	9303      	str	r3, [sp, #12]
 800af5c:	2308      	movs	r3, #8
 800af5e:	9302      	str	r3, [sp, #8]
 800af60:	68bb      	ldr	r3, [r7, #8]
 800af62:	9301      	str	r3, [sp, #4]
 800af64:	2300      	movs	r3, #0
 800af66:	9300      	str	r3, [sp, #0]
 800af68:	2300      	movs	r3, #0
 800af6a:	2200      	movs	r2, #0
 800af6c:	68f8      	ldr	r0, [r7, #12]
 800af6e:	f000 fb4c 	bl	800b60a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800af72:	2300      	movs	r3, #0
}
 800af74:	4618      	mov	r0, r3
 800af76:	3710      	adds	r7, #16
 800af78:	46bd      	mov	sp, r7
 800af7a:	bd80      	pop	{r7, pc}

0800af7c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b088      	sub	sp, #32
 800af80:	af04      	add	r7, sp, #16
 800af82:	60f8      	str	r0, [r7, #12]
 800af84:	60b9      	str	r1, [r7, #8]
 800af86:	4611      	mov	r1, r2
 800af88:	461a      	mov	r2, r3
 800af8a:	460b      	mov	r3, r1
 800af8c:	80fb      	strh	r3, [r7, #6]
 800af8e:	4613      	mov	r3, r2
 800af90:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d001      	beq.n	800afa0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800af9c:	2300      	movs	r3, #0
 800af9e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800afa0:	7979      	ldrb	r1, [r7, #5]
 800afa2:	7e3b      	ldrb	r3, [r7, #24]
 800afa4:	9303      	str	r3, [sp, #12]
 800afa6:	88fb      	ldrh	r3, [r7, #6]
 800afa8:	9302      	str	r3, [sp, #8]
 800afaa:	68bb      	ldr	r3, [r7, #8]
 800afac:	9301      	str	r3, [sp, #4]
 800afae:	2301      	movs	r3, #1
 800afb0:	9300      	str	r3, [sp, #0]
 800afb2:	2300      	movs	r3, #0
 800afb4:	2200      	movs	r2, #0
 800afb6:	68f8      	ldr	r0, [r7, #12]
 800afb8:	f000 fb27 	bl	800b60a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800afbc:	2300      	movs	r3, #0
}
 800afbe:	4618      	mov	r0, r3
 800afc0:	3710      	adds	r7, #16
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}

0800afc6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800afc6:	b580      	push	{r7, lr}
 800afc8:	b088      	sub	sp, #32
 800afca:	af04      	add	r7, sp, #16
 800afcc:	60f8      	str	r0, [r7, #12]
 800afce:	60b9      	str	r1, [r7, #8]
 800afd0:	4611      	mov	r1, r2
 800afd2:	461a      	mov	r2, r3
 800afd4:	460b      	mov	r3, r1
 800afd6:	80fb      	strh	r3, [r7, #6]
 800afd8:	4613      	mov	r3, r2
 800afda:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800afdc:	7979      	ldrb	r1, [r7, #5]
 800afde:	2300      	movs	r3, #0
 800afe0:	9303      	str	r3, [sp, #12]
 800afe2:	88fb      	ldrh	r3, [r7, #6]
 800afe4:	9302      	str	r3, [sp, #8]
 800afe6:	68bb      	ldr	r3, [r7, #8]
 800afe8:	9301      	str	r3, [sp, #4]
 800afea:	2301      	movs	r3, #1
 800afec:	9300      	str	r3, [sp, #0]
 800afee:	2300      	movs	r3, #0
 800aff0:	2201      	movs	r2, #1
 800aff2:	68f8      	ldr	r0, [r7, #12]
 800aff4:	f000 fb09 	bl	800b60a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800aff8:	2300      	movs	r3, #0

}
 800affa:	4618      	mov	r0, r3
 800affc:	3710      	adds	r7, #16
 800affe:	46bd      	mov	sp, r7
 800b000:	bd80      	pop	{r7, pc}

0800b002 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800b002:	b580      	push	{r7, lr}
 800b004:	b088      	sub	sp, #32
 800b006:	af04      	add	r7, sp, #16
 800b008:	60f8      	str	r0, [r7, #12]
 800b00a:	60b9      	str	r1, [r7, #8]
 800b00c:	4611      	mov	r1, r2
 800b00e:	461a      	mov	r2, r3
 800b010:	460b      	mov	r3, r1
 800b012:	80fb      	strh	r3, [r7, #6]
 800b014:	4613      	mov	r3, r2
 800b016:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d001      	beq.n	800b026 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800b022:	2300      	movs	r3, #0
 800b024:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b026:	7979      	ldrb	r1, [r7, #5]
 800b028:	7e3b      	ldrb	r3, [r7, #24]
 800b02a:	9303      	str	r3, [sp, #12]
 800b02c:	88fb      	ldrh	r3, [r7, #6]
 800b02e:	9302      	str	r3, [sp, #8]
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	9301      	str	r3, [sp, #4]
 800b034:	2301      	movs	r3, #1
 800b036:	9300      	str	r3, [sp, #0]
 800b038:	2302      	movs	r3, #2
 800b03a:	2200      	movs	r2, #0
 800b03c:	68f8      	ldr	r0, [r7, #12]
 800b03e:	f000 fae4 	bl	800b60a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800b042:	2300      	movs	r3, #0
}
 800b044:	4618      	mov	r0, r3
 800b046:	3710      	adds	r7, #16
 800b048:	46bd      	mov	sp, r7
 800b04a:	bd80      	pop	{r7, pc}

0800b04c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b088      	sub	sp, #32
 800b050:	af04      	add	r7, sp, #16
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	4611      	mov	r1, r2
 800b058:	461a      	mov	r2, r3
 800b05a:	460b      	mov	r3, r1
 800b05c:	80fb      	strh	r3, [r7, #6]
 800b05e:	4613      	mov	r3, r2
 800b060:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800b062:	7979      	ldrb	r1, [r7, #5]
 800b064:	2300      	movs	r3, #0
 800b066:	9303      	str	r3, [sp, #12]
 800b068:	88fb      	ldrh	r3, [r7, #6]
 800b06a:	9302      	str	r3, [sp, #8]
 800b06c:	68bb      	ldr	r3, [r7, #8]
 800b06e:	9301      	str	r3, [sp, #4]
 800b070:	2301      	movs	r3, #1
 800b072:	9300      	str	r3, [sp, #0]
 800b074:	2302      	movs	r3, #2
 800b076:	2201      	movs	r2, #1
 800b078:	68f8      	ldr	r0, [r7, #12]
 800b07a:	f000 fac6 	bl	800b60a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800b07e:	2300      	movs	r3, #0
}
 800b080:	4618      	mov	r0, r3
 800b082:	3710      	adds	r7, #16
 800b084:	46bd      	mov	sp, r7
 800b086:	bd80      	pop	{r7, pc}

0800b088 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b086      	sub	sp, #24
 800b08c:	af04      	add	r7, sp, #16
 800b08e:	6078      	str	r0, [r7, #4]
 800b090:	4608      	mov	r0, r1
 800b092:	4611      	mov	r1, r2
 800b094:	461a      	mov	r2, r3
 800b096:	4603      	mov	r3, r0
 800b098:	70fb      	strb	r3, [r7, #3]
 800b09a:	460b      	mov	r3, r1
 800b09c:	70bb      	strb	r3, [r7, #2]
 800b09e:	4613      	mov	r3, r2
 800b0a0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800b0a2:	7878      	ldrb	r0, [r7, #1]
 800b0a4:	78ba      	ldrb	r2, [r7, #2]
 800b0a6:	78f9      	ldrb	r1, [r7, #3]
 800b0a8:	8b3b      	ldrh	r3, [r7, #24]
 800b0aa:	9302      	str	r3, [sp, #8]
 800b0ac:	7d3b      	ldrb	r3, [r7, #20]
 800b0ae:	9301      	str	r3, [sp, #4]
 800b0b0:	7c3b      	ldrb	r3, [r7, #16]
 800b0b2:	9300      	str	r3, [sp, #0]
 800b0b4:	4603      	mov	r3, r0
 800b0b6:	6878      	ldr	r0, [r7, #4]
 800b0b8:	f000 fa59 	bl	800b56e <USBH_LL_OpenPipe>

  return USBH_OK;
 800b0bc:	2300      	movs	r3, #0
}
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3708      	adds	r7, #8
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800b0c6:	b580      	push	{r7, lr}
 800b0c8:	b082      	sub	sp, #8
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
 800b0ce:	460b      	mov	r3, r1
 800b0d0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800b0d2:	78fb      	ldrb	r3, [r7, #3]
 800b0d4:	4619      	mov	r1, r3
 800b0d6:	6878      	ldr	r0, [r7, #4]
 800b0d8:	f000 fa78 	bl	800b5cc <USBH_LL_ClosePipe>

  return USBH_OK;
 800b0dc:	2300      	movs	r3, #0
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3708      	adds	r7, #8
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800b0e6:	b580      	push	{r7, lr}
 800b0e8:	b084      	sub	sp, #16
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
 800b0ee:	460b      	mov	r3, r1
 800b0f0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800b0f2:	6878      	ldr	r0, [r7, #4]
 800b0f4:	f000 f836 	bl	800b164 <USBH_GetFreePipe>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800b0fc:	89fb      	ldrh	r3, [r7, #14]
 800b0fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800b102:	4293      	cmp	r3, r2
 800b104:	d00a      	beq.n	800b11c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800b106:	78fa      	ldrb	r2, [r7, #3]
 800b108:	89fb      	ldrh	r3, [r7, #14]
 800b10a:	f003 030f 	and.w	r3, r3, #15
 800b10e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800b112:	6879      	ldr	r1, [r7, #4]
 800b114:	33e0      	adds	r3, #224	@ 0xe0
 800b116:	009b      	lsls	r3, r3, #2
 800b118:	440b      	add	r3, r1
 800b11a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800b11c:	89fb      	ldrh	r3, [r7, #14]
 800b11e:	b2db      	uxtb	r3, r3
}
 800b120:	4618      	mov	r0, r3
 800b122:	3710      	adds	r7, #16
 800b124:	46bd      	mov	sp, r7
 800b126:	bd80      	pop	{r7, pc}

0800b128 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800b128:	b480      	push	{r7}
 800b12a:	b083      	sub	sp, #12
 800b12c:	af00      	add	r7, sp, #0
 800b12e:	6078      	str	r0, [r7, #4]
 800b130:	460b      	mov	r3, r1
 800b132:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800b134:	78fb      	ldrb	r3, [r7, #3]
 800b136:	2b0f      	cmp	r3, #15
 800b138:	d80d      	bhi.n	800b156 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800b13a:	78fb      	ldrb	r3, [r7, #3]
 800b13c:	687a      	ldr	r2, [r7, #4]
 800b13e:	33e0      	adds	r3, #224	@ 0xe0
 800b140:	009b      	lsls	r3, r3, #2
 800b142:	4413      	add	r3, r2
 800b144:	685a      	ldr	r2, [r3, #4]
 800b146:	78fb      	ldrb	r3, [r7, #3]
 800b148:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800b14c:	6879      	ldr	r1, [r7, #4]
 800b14e:	33e0      	adds	r3, #224	@ 0xe0
 800b150:	009b      	lsls	r3, r3, #2
 800b152:	440b      	add	r3, r1
 800b154:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800b156:	2300      	movs	r3, #0
}
 800b158:	4618      	mov	r0, r3
 800b15a:	370c      	adds	r7, #12
 800b15c:	46bd      	mov	sp, r7
 800b15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b162:	4770      	bx	lr

0800b164 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800b164:	b480      	push	{r7}
 800b166:	b085      	sub	sp, #20
 800b168:	af00      	add	r7, sp, #0
 800b16a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800b16c:	2300      	movs	r3, #0
 800b16e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b170:	2300      	movs	r3, #0
 800b172:	73fb      	strb	r3, [r7, #15]
 800b174:	e00f      	b.n	800b196 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800b176:	7bfb      	ldrb	r3, [r7, #15]
 800b178:	687a      	ldr	r2, [r7, #4]
 800b17a:	33e0      	adds	r3, #224	@ 0xe0
 800b17c:	009b      	lsls	r3, r3, #2
 800b17e:	4413      	add	r3, r2
 800b180:	685b      	ldr	r3, [r3, #4]
 800b182:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b186:	2b00      	cmp	r3, #0
 800b188:	d102      	bne.n	800b190 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800b18a:	7bfb      	ldrb	r3, [r7, #15]
 800b18c:	b29b      	uxth	r3, r3
 800b18e:	e007      	b.n	800b1a0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800b190:	7bfb      	ldrb	r3, [r7, #15]
 800b192:	3301      	adds	r3, #1
 800b194:	73fb      	strb	r3, [r7, #15]
 800b196:	7bfb      	ldrb	r3, [r7, #15]
 800b198:	2b0f      	cmp	r3, #15
 800b19a:	d9ec      	bls.n	800b176 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800b19c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3714      	adds	r7, #20
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1aa:	4770      	bx	lr

0800b1ac <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800b1ac:	b580      	push	{r7, lr}
 800b1ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800b1b0:	2200      	movs	r2, #0
 800b1b2:	490e      	ldr	r1, [pc, #56]	@ (800b1ec <MX_USB_HOST_Init+0x40>)
 800b1b4:	480e      	ldr	r0, [pc, #56]	@ (800b1f0 <MX_USB_HOST_Init+0x44>)
 800b1b6:	f7fe fb15 	bl	80097e4 <USBH_Init>
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	2b00      	cmp	r3, #0
 800b1be:	d001      	beq.n	800b1c4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800b1c0:	f7f5 fec4 	bl	8000f4c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800b1c4:	490b      	ldr	r1, [pc, #44]	@ (800b1f4 <MX_USB_HOST_Init+0x48>)
 800b1c6:	480a      	ldr	r0, [pc, #40]	@ (800b1f0 <MX_USB_HOST_Init+0x44>)
 800b1c8:	f7fe fbb9 	bl	800993e <USBH_RegisterClass>
 800b1cc:	4603      	mov	r3, r0
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d001      	beq.n	800b1d6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800b1d2:	f7f5 febb 	bl	8000f4c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800b1d6:	4806      	ldr	r0, [pc, #24]	@ (800b1f0 <MX_USB_HOST_Init+0x44>)
 800b1d8:	f7fe fc3d 	bl	8009a56 <USBH_Start>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d001      	beq.n	800b1e6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800b1e2:	f7f5 feb3 	bl	8000f4c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800b1e6:	bf00      	nop
 800b1e8:	bd80      	pop	{r7, pc}
 800b1ea:	bf00      	nop
 800b1ec:	0800b20d 	.word	0x0800b20d
 800b1f0:	20000354 	.word	0x20000354
 800b1f4:	20000014 	.word	0x20000014

0800b1f8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800b1f8:	b580      	push	{r7, lr}
 800b1fa:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 800b1fc:	4802      	ldr	r0, [pc, #8]	@ (800b208 <MX_USB_HOST_Process+0x10>)
 800b1fe:	f7fe fc3b 	bl	8009a78 <USBH_Process>
}
 800b202:	bf00      	nop
 800b204:	bd80      	pop	{r7, pc}
 800b206:	bf00      	nop
 800b208:	20000354 	.word	0x20000354

0800b20c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800b20c:	b480      	push	{r7}
 800b20e:	b083      	sub	sp, #12
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	460b      	mov	r3, r1
 800b216:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800b218:	78fb      	ldrb	r3, [r7, #3]
 800b21a:	3b01      	subs	r3, #1
 800b21c:	2b04      	cmp	r3, #4
 800b21e:	d819      	bhi.n	800b254 <USBH_UserProcess+0x48>
 800b220:	a201      	add	r2, pc, #4	@ (adr r2, 800b228 <USBH_UserProcess+0x1c>)
 800b222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b226:	bf00      	nop
 800b228:	0800b255 	.word	0x0800b255
 800b22c:	0800b245 	.word	0x0800b245
 800b230:	0800b255 	.word	0x0800b255
 800b234:	0800b24d 	.word	0x0800b24d
 800b238:	0800b23d 	.word	0x0800b23d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800b23c:	4b09      	ldr	r3, [pc, #36]	@ (800b264 <USBH_UserProcess+0x58>)
 800b23e:	2203      	movs	r2, #3
 800b240:	701a      	strb	r2, [r3, #0]
  break;
 800b242:	e008      	b.n	800b256 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800b244:	4b07      	ldr	r3, [pc, #28]	@ (800b264 <USBH_UserProcess+0x58>)
 800b246:	2202      	movs	r2, #2
 800b248:	701a      	strb	r2, [r3, #0]
  break;
 800b24a:	e004      	b.n	800b256 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800b24c:	4b05      	ldr	r3, [pc, #20]	@ (800b264 <USBH_UserProcess+0x58>)
 800b24e:	2201      	movs	r2, #1
 800b250:	701a      	strb	r2, [r3, #0]
  break;
 800b252:	e000      	b.n	800b256 <USBH_UserProcess+0x4a>

  default:
  break;
 800b254:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800b256:	bf00      	nop
 800b258:	370c      	adds	r7, #12
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr
 800b262:	bf00      	nop
 800b264:	2000072c 	.word	0x2000072c

0800b268 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800b268:	b580      	push	{r7, lr}
 800b26a:	b08a      	sub	sp, #40	@ 0x28
 800b26c:	af00      	add	r7, sp, #0
 800b26e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b270:	f107 0314 	add.w	r3, r7, #20
 800b274:	2200      	movs	r2, #0
 800b276:	601a      	str	r2, [r3, #0]
 800b278:	605a      	str	r2, [r3, #4]
 800b27a:	609a      	str	r2, [r3, #8]
 800b27c:	60da      	str	r2, [r3, #12]
 800b27e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	4a24      	ldr	r2, [pc, #144]	@ (800b318 <HAL_HCD_MspInit+0xb0>)
 800b286:	4293      	cmp	r3, r2
 800b288:	d141      	bne.n	800b30e <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800b28a:	2300      	movs	r3, #0
 800b28c:	613b      	str	r3, [r7, #16]
 800b28e:	4b23      	ldr	r3, [pc, #140]	@ (800b31c <HAL_HCD_MspInit+0xb4>)
 800b290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b292:	4a22      	ldr	r2, [pc, #136]	@ (800b31c <HAL_HCD_MspInit+0xb4>)
 800b294:	f043 0302 	orr.w	r3, r3, #2
 800b298:	6313      	str	r3, [r2, #48]	@ 0x30
 800b29a:	4b20      	ldr	r3, [pc, #128]	@ (800b31c <HAL_HCD_MspInit+0xb4>)
 800b29c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b29e:	f003 0302 	and.w	r3, r3, #2
 800b2a2:	613b      	str	r3, [r7, #16]
 800b2a4:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800b2a6:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800b2aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b2ac:	2302      	movs	r3, #2
 800b2ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2b0:	2300      	movs	r3, #0
 800b2b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800b2b8:	230c      	movs	r3, #12
 800b2ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800b2bc:	f107 0314 	add.w	r3, r7, #20
 800b2c0:	4619      	mov	r1, r3
 800b2c2:	4817      	ldr	r0, [pc, #92]	@ (800b320 <HAL_HCD_MspInit+0xb8>)
 800b2c4:	f7f6 fe6c 	bl	8001fa0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800b2c8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b2cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b2d2:	2300      	movs	r3, #0
 800b2d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800b2d6:	f107 0314 	add.w	r3, r7, #20
 800b2da:	4619      	mov	r1, r3
 800b2dc:	4810      	ldr	r0, [pc, #64]	@ (800b320 <HAL_HCD_MspInit+0xb8>)
 800b2de:	f7f6 fe5f 	bl	8001fa0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800b2e2:	2300      	movs	r3, #0
 800b2e4:	60fb      	str	r3, [r7, #12]
 800b2e6:	4b0d      	ldr	r3, [pc, #52]	@ (800b31c <HAL_HCD_MspInit+0xb4>)
 800b2e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2ea:	4a0c      	ldr	r2, [pc, #48]	@ (800b31c <HAL_HCD_MspInit+0xb4>)
 800b2ec:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800b2f0:	6313      	str	r3, [r2, #48]	@ 0x30
 800b2f2:	4b0a      	ldr	r3, [pc, #40]	@ (800b31c <HAL_HCD_MspInit+0xb4>)
 800b2f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2f6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800b2fa:	60fb      	str	r3, [r7, #12]
 800b2fc:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800b2fe:	2200      	movs	r2, #0
 800b300:	2100      	movs	r1, #0
 800b302:	204d      	movs	r0, #77	@ 0x4d
 800b304:	f7f6 fbf8 	bl	8001af8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800b308:	204d      	movs	r0, #77	@ 0x4d
 800b30a:	f7f6 fc11 	bl	8001b30 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800b30e:	bf00      	nop
 800b310:	3728      	adds	r7, #40	@ 0x28
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}
 800b316:	bf00      	nop
 800b318:	40040000 	.word	0x40040000
 800b31c:	40023800 	.word	0x40023800
 800b320:	40020400 	.word	0x40020400

0800b324 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800b324:	b580      	push	{r7, lr}
 800b326:	b082      	sub	sp, #8
 800b328:	af00      	add	r7, sp, #0
 800b32a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b332:	4618      	mov	r0, r3
 800b334:	f7fe ff77 	bl	800a226 <USBH_LL_IncTimer>
}
 800b338:	bf00      	nop
 800b33a:	3708      	adds	r7, #8
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}

0800b340 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b340:	b580      	push	{r7, lr}
 800b342:	b082      	sub	sp, #8
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b34e:	4618      	mov	r0, r3
 800b350:	f7fe ffaf 	bl	800a2b2 <USBH_LL_Connect>
}
 800b354:	bf00      	nop
 800b356:	3708      	adds	r7, #8
 800b358:	46bd      	mov	sp, r7
 800b35a:	bd80      	pop	{r7, pc}

0800b35c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800b35c:	b580      	push	{r7, lr}
 800b35e:	b082      	sub	sp, #8
 800b360:	af00      	add	r7, sp, #0
 800b362:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b36a:	4618      	mov	r0, r3
 800b36c:	f7fe ffb8 	bl	800a2e0 <USBH_LL_Disconnect>
}
 800b370:	bf00      	nop
 800b372:	3708      	adds	r7, #8
 800b374:	46bd      	mov	sp, r7
 800b376:	bd80      	pop	{r7, pc}

0800b378 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800b378:	b480      	push	{r7}
 800b37a:	b083      	sub	sp, #12
 800b37c:	af00      	add	r7, sp, #0
 800b37e:	6078      	str	r0, [r7, #4]
 800b380:	460b      	mov	r3, r1
 800b382:	70fb      	strb	r3, [r7, #3]
 800b384:	4613      	mov	r3, r2
 800b386:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b388:	bf00      	nop
 800b38a:	370c      	adds	r7, #12
 800b38c:	46bd      	mov	sp, r7
 800b38e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b392:	4770      	bx	lr

0800b394 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b394:	b580      	push	{r7, lr}
 800b396:	b082      	sub	sp, #8
 800b398:	af00      	add	r7, sp, #0
 800b39a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f7fe ff69 	bl	800a27a <USBH_LL_PortEnabled>
}
 800b3a8:	bf00      	nop
 800b3aa:	3708      	adds	r7, #8
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}

0800b3b0 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b082      	sub	sp, #8
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b3be:	4618      	mov	r0, r3
 800b3c0:	f7fe ff69 	bl	800a296 <USBH_LL_PortDisabled>
}
 800b3c4:	bf00      	nop
 800b3c6:	3708      	adds	r7, #8
 800b3c8:	46bd      	mov	sp, r7
 800b3ca:	bd80      	pop	{r7, pc}

0800b3cc <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b3cc:	b580      	push	{r7, lr}
 800b3ce:	b082      	sub	sp, #8
 800b3d0:	af00      	add	r7, sp, #0
 800b3d2:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d132      	bne.n	800b444 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800b3de:	4a1c      	ldr	r2, [pc, #112]	@ (800b450 <USBH_LL_Init+0x84>)
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_HS;
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	4a19      	ldr	r2, [pc, #100]	@ (800b450 <USBH_LL_Init+0x84>)
 800b3ea:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800b3ee:	4b18      	ldr	r3, [pc, #96]	@ (800b450 <USBH_LL_Init+0x84>)
 800b3f0:	4a18      	ldr	r2, [pc, #96]	@ (800b454 <USBH_LL_Init+0x88>)
 800b3f2:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800b3f4:	4b16      	ldr	r3, [pc, #88]	@ (800b450 <USBH_LL_Init+0x84>)
 800b3f6:	220c      	movs	r2, #12
 800b3f8:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800b3fa:	4b15      	ldr	r3, [pc, #84]	@ (800b450 <USBH_LL_Init+0x84>)
 800b3fc:	2201      	movs	r2, #1
 800b3fe:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800b400:	4b13      	ldr	r3, [pc, #76]	@ (800b450 <USBH_LL_Init+0x84>)
 800b402:	2200      	movs	r2, #0
 800b404:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800b406:	4b12      	ldr	r3, [pc, #72]	@ (800b450 <USBH_LL_Init+0x84>)
 800b408:	2202      	movs	r2, #2
 800b40a:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800b40c:	4b10      	ldr	r3, [pc, #64]	@ (800b450 <USBH_LL_Init+0x84>)
 800b40e:	2200      	movs	r2, #0
 800b410:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800b412:	4b0f      	ldr	r3, [pc, #60]	@ (800b450 <USBH_LL_Init+0x84>)
 800b414:	2200      	movs	r2, #0
 800b416:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800b418:	4b0d      	ldr	r3, [pc, #52]	@ (800b450 <USBH_LL_Init+0x84>)
 800b41a:	2200      	movs	r2, #0
 800b41c:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800b41e:	4b0c      	ldr	r3, [pc, #48]	@ (800b450 <USBH_LL_Init+0x84>)
 800b420:	2200      	movs	r2, #0
 800b422:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800b424:	480a      	ldr	r0, [pc, #40]	@ (800b450 <USBH_LL_Init+0x84>)
 800b426:	f7f6 ff80 	bl	800232a <HAL_HCD_Init>
 800b42a:	4603      	mov	r3, r0
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d001      	beq.n	800b434 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800b430:	f7f5 fd8c 	bl	8000f4c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800b434:	4806      	ldr	r0, [pc, #24]	@ (800b450 <USBH_LL_Init+0x84>)
 800b436:	f7f7 fbe1 	bl	8002bfc <HAL_HCD_GetCurrentFrame>
 800b43a:	4603      	mov	r3, r0
 800b43c:	4619      	mov	r1, r3
 800b43e:	6878      	ldr	r0, [r7, #4]
 800b440:	f7fe fee2 	bl	800a208 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b444:	2300      	movs	r3, #0
}
 800b446:	4618      	mov	r0, r3
 800b448:	3708      	adds	r7, #8
 800b44a:	46bd      	mov	sp, r7
 800b44c:	bd80      	pop	{r7, pc}
 800b44e:	bf00      	nop
 800b450:	20000730 	.word	0x20000730
 800b454:	40040000 	.word	0x40040000

0800b458 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b458:	b580      	push	{r7, lr}
 800b45a:	b084      	sub	sp, #16
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b460:	2300      	movs	r3, #0
 800b462:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b464:	2300      	movs	r3, #0
 800b466:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b46e:	4618      	mov	r0, r3
 800b470:	f7f7 fb4c 	bl	8002b0c <HAL_HCD_Start>
 800b474:	4603      	mov	r3, r0
 800b476:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b478:	7bfb      	ldrb	r3, [r7, #15]
 800b47a:	4618      	mov	r0, r3
 800b47c:	f000 f95e 	bl	800b73c <USBH_Get_USB_Status>
 800b480:	4603      	mov	r3, r0
 800b482:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b484:	7bbb      	ldrb	r3, [r7, #14]
}
 800b486:	4618      	mov	r0, r3
 800b488:	3710      	adds	r7, #16
 800b48a:	46bd      	mov	sp, r7
 800b48c:	bd80      	pop	{r7, pc}

0800b48e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b48e:	b580      	push	{r7, lr}
 800b490:	b084      	sub	sp, #16
 800b492:	af00      	add	r7, sp, #0
 800b494:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b496:	2300      	movs	r3, #0
 800b498:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b49a:	2300      	movs	r3, #0
 800b49c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b4a4:	4618      	mov	r0, r3
 800b4a6:	f7f7 fb54 	bl	8002b52 <HAL_HCD_Stop>
 800b4aa:	4603      	mov	r3, r0
 800b4ac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b4ae:	7bfb      	ldrb	r3, [r7, #15]
 800b4b0:	4618      	mov	r0, r3
 800b4b2:	f000 f943 	bl	800b73c <USBH_Get_USB_Status>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b4ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800b4bc:	4618      	mov	r0, r3
 800b4be:	3710      	adds	r7, #16
 800b4c0:	46bd      	mov	sp, r7
 800b4c2:	bd80      	pop	{r7, pc}

0800b4c4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b084      	sub	sp, #16
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b4cc:	2301      	movs	r3, #1
 800b4ce:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b4d6:	4618      	mov	r0, r3
 800b4d8:	f7f7 fb9e 	bl	8002c18 <HAL_HCD_GetCurrentSpeed>
 800b4dc:	4603      	mov	r3, r0
 800b4de:	2b02      	cmp	r3, #2
 800b4e0:	d00c      	beq.n	800b4fc <USBH_LL_GetSpeed+0x38>
 800b4e2:	2b02      	cmp	r3, #2
 800b4e4:	d80d      	bhi.n	800b502 <USBH_LL_GetSpeed+0x3e>
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d002      	beq.n	800b4f0 <USBH_LL_GetSpeed+0x2c>
 800b4ea:	2b01      	cmp	r3, #1
 800b4ec:	d003      	beq.n	800b4f6 <USBH_LL_GetSpeed+0x32>
 800b4ee:	e008      	b.n	800b502 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b4f0:	2300      	movs	r3, #0
 800b4f2:	73fb      	strb	r3, [r7, #15]
    break;
 800b4f4:	e008      	b.n	800b508 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b4f6:	2301      	movs	r3, #1
 800b4f8:	73fb      	strb	r3, [r7, #15]
    break;
 800b4fa:	e005      	b.n	800b508 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b4fc:	2302      	movs	r3, #2
 800b4fe:	73fb      	strb	r3, [r7, #15]
    break;
 800b500:	e002      	b.n	800b508 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b502:	2301      	movs	r3, #1
 800b504:	73fb      	strb	r3, [r7, #15]
    break;
 800b506:	bf00      	nop
  }
  return  speed;
 800b508:	7bfb      	ldrb	r3, [r7, #15]
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3710      	adds	r7, #16
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}

0800b512 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b512:	b580      	push	{r7, lr}
 800b514:	b084      	sub	sp, #16
 800b516:	af00      	add	r7, sp, #0
 800b518:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b51a:	2300      	movs	r3, #0
 800b51c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b51e:	2300      	movs	r3, #0
 800b520:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b528:	4618      	mov	r0, r3
 800b52a:	f7f7 fb2f 	bl	8002b8c <HAL_HCD_ResetPort>
 800b52e:	4603      	mov	r3, r0
 800b530:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b532:	7bfb      	ldrb	r3, [r7, #15]
 800b534:	4618      	mov	r0, r3
 800b536:	f000 f901 	bl	800b73c <USBH_Get_USB_Status>
 800b53a:	4603      	mov	r3, r0
 800b53c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b53e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b540:	4618      	mov	r0, r3
 800b542:	3710      	adds	r7, #16
 800b544:	46bd      	mov	sp, r7
 800b546:	bd80      	pop	{r7, pc}

0800b548 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b082      	sub	sp, #8
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	460b      	mov	r3, r1
 800b552:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b55a:	78fa      	ldrb	r2, [r7, #3]
 800b55c:	4611      	mov	r1, r2
 800b55e:	4618      	mov	r0, r3
 800b560:	f7f7 fb37 	bl	8002bd2 <HAL_HCD_HC_GetXferCount>
 800b564:	4603      	mov	r3, r0
}
 800b566:	4618      	mov	r0, r3
 800b568:	3708      	adds	r7, #8
 800b56a:	46bd      	mov	sp, r7
 800b56c:	bd80      	pop	{r7, pc}

0800b56e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b56e:	b590      	push	{r4, r7, lr}
 800b570:	b089      	sub	sp, #36	@ 0x24
 800b572:	af04      	add	r7, sp, #16
 800b574:	6078      	str	r0, [r7, #4]
 800b576:	4608      	mov	r0, r1
 800b578:	4611      	mov	r1, r2
 800b57a:	461a      	mov	r2, r3
 800b57c:	4603      	mov	r3, r0
 800b57e:	70fb      	strb	r3, [r7, #3]
 800b580:	460b      	mov	r3, r1
 800b582:	70bb      	strb	r3, [r7, #2]
 800b584:	4613      	mov	r3, r2
 800b586:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b588:	2300      	movs	r3, #0
 800b58a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b58c:	2300      	movs	r3, #0
 800b58e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b596:	787c      	ldrb	r4, [r7, #1]
 800b598:	78ba      	ldrb	r2, [r7, #2]
 800b59a:	78f9      	ldrb	r1, [r7, #3]
 800b59c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b59e:	9302      	str	r3, [sp, #8]
 800b5a0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b5a4:	9301      	str	r3, [sp, #4]
 800b5a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b5aa:	9300      	str	r3, [sp, #0]
 800b5ac:	4623      	mov	r3, r4
 800b5ae:	f7f6 ff23 	bl	80023f8 <HAL_HCD_HC_Init>
 800b5b2:	4603      	mov	r3, r0
 800b5b4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b5b6:	7bfb      	ldrb	r3, [r7, #15]
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f000 f8bf 	bl	800b73c <USBH_Get_USB_Status>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b5c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b5c4:	4618      	mov	r0, r3
 800b5c6:	3714      	adds	r7, #20
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	bd90      	pop	{r4, r7, pc}

0800b5cc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
 800b5d4:	460b      	mov	r3, r1
 800b5d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b5d8:	2300      	movs	r3, #0
 800b5da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b5dc:	2300      	movs	r3, #0
 800b5de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b5e0:	687b      	ldr	r3, [r7, #4]
 800b5e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b5e6:	78fa      	ldrb	r2, [r7, #3]
 800b5e8:	4611      	mov	r1, r2
 800b5ea:	4618      	mov	r0, r3
 800b5ec:	f7f6 ffbc 	bl	8002568 <HAL_HCD_HC_Halt>
 800b5f0:	4603      	mov	r3, r0
 800b5f2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b5f4:	7bfb      	ldrb	r3, [r7, #15]
 800b5f6:	4618      	mov	r0, r3
 800b5f8:	f000 f8a0 	bl	800b73c <USBH_Get_USB_Status>
 800b5fc:	4603      	mov	r3, r0
 800b5fe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b600:	7bbb      	ldrb	r3, [r7, #14]
}
 800b602:	4618      	mov	r0, r3
 800b604:	3710      	adds	r7, #16
 800b606:	46bd      	mov	sp, r7
 800b608:	bd80      	pop	{r7, pc}

0800b60a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b60a:	b590      	push	{r4, r7, lr}
 800b60c:	b089      	sub	sp, #36	@ 0x24
 800b60e:	af04      	add	r7, sp, #16
 800b610:	6078      	str	r0, [r7, #4]
 800b612:	4608      	mov	r0, r1
 800b614:	4611      	mov	r1, r2
 800b616:	461a      	mov	r2, r3
 800b618:	4603      	mov	r3, r0
 800b61a:	70fb      	strb	r3, [r7, #3]
 800b61c:	460b      	mov	r3, r1
 800b61e:	70bb      	strb	r3, [r7, #2]
 800b620:	4613      	mov	r3, r2
 800b622:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b624:	2300      	movs	r3, #0
 800b626:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b628:	2300      	movs	r3, #0
 800b62a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b632:	787c      	ldrb	r4, [r7, #1]
 800b634:	78ba      	ldrb	r2, [r7, #2]
 800b636:	78f9      	ldrb	r1, [r7, #3]
 800b638:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b63c:	9303      	str	r3, [sp, #12]
 800b63e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b640:	9302      	str	r3, [sp, #8]
 800b642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b644:	9301      	str	r3, [sp, #4]
 800b646:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b64a:	9300      	str	r3, [sp, #0]
 800b64c:	4623      	mov	r3, r4
 800b64e:	f7f6 ffaf 	bl	80025b0 <HAL_HCD_HC_SubmitRequest>
 800b652:	4603      	mov	r3, r0
 800b654:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b656:	7bfb      	ldrb	r3, [r7, #15]
 800b658:	4618      	mov	r0, r3
 800b65a:	f000 f86f 	bl	800b73c <USBH_Get_USB_Status>
 800b65e:	4603      	mov	r3, r0
 800b660:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b662:	7bbb      	ldrb	r3, [r7, #14]
}
 800b664:	4618      	mov	r0, r3
 800b666:	3714      	adds	r7, #20
 800b668:	46bd      	mov	sp, r7
 800b66a:	bd90      	pop	{r4, r7, pc}

0800b66c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b66c:	b580      	push	{r7, lr}
 800b66e:	b082      	sub	sp, #8
 800b670:	af00      	add	r7, sp, #0
 800b672:	6078      	str	r0, [r7, #4]
 800b674:	460b      	mov	r3, r1
 800b676:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b67e:	78fa      	ldrb	r2, [r7, #3]
 800b680:	4611      	mov	r1, r2
 800b682:	4618      	mov	r0, r3
 800b684:	f7f7 fa90 	bl	8002ba8 <HAL_HCD_HC_GetURBState>
 800b688:	4603      	mov	r3, r0
}
 800b68a:	4618      	mov	r0, r3
 800b68c:	3708      	adds	r7, #8
 800b68e:	46bd      	mov	sp, r7
 800b690:	bd80      	pop	{r7, pc}

0800b692 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b692:	b580      	push	{r7, lr}
 800b694:	b082      	sub	sp, #8
 800b696:	af00      	add	r7, sp, #0
 800b698:	6078      	str	r0, [r7, #4]
 800b69a:	460b      	mov	r3, r1
 800b69c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d103      	bne.n	800b6b0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800b6a8:	78fb      	ldrb	r3, [r7, #3]
 800b6aa:	4618      	mov	r0, r3
 800b6ac:	f000 f872 	bl	800b794 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b6b0:	20c8      	movs	r0, #200	@ 0xc8
 800b6b2:	f7f6 f945 	bl	8001940 <HAL_Delay>
  return USBH_OK;
 800b6b6:	2300      	movs	r3, #0
}
 800b6b8:	4618      	mov	r0, r3
 800b6ba:	3708      	adds	r7, #8
 800b6bc:	46bd      	mov	sp, r7
 800b6be:	bd80      	pop	{r7, pc}

0800b6c0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b6c0:	b480      	push	{r7}
 800b6c2:	b085      	sub	sp, #20
 800b6c4:	af00      	add	r7, sp, #0
 800b6c6:	6078      	str	r0, [r7, #4]
 800b6c8:	460b      	mov	r3, r1
 800b6ca:	70fb      	strb	r3, [r7, #3]
 800b6cc:	4613      	mov	r3, r2
 800b6ce:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b6d6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b6d8:	78fa      	ldrb	r2, [r7, #3]
 800b6da:	68f9      	ldr	r1, [r7, #12]
 800b6dc:	4613      	mov	r3, r2
 800b6de:	011b      	lsls	r3, r3, #4
 800b6e0:	1a9b      	subs	r3, r3, r2
 800b6e2:	009b      	lsls	r3, r3, #2
 800b6e4:	440b      	add	r3, r1
 800b6e6:	3317      	adds	r3, #23
 800b6e8:	781b      	ldrb	r3, [r3, #0]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d00a      	beq.n	800b704 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b6ee:	78fa      	ldrb	r2, [r7, #3]
 800b6f0:	68f9      	ldr	r1, [r7, #12]
 800b6f2:	4613      	mov	r3, r2
 800b6f4:	011b      	lsls	r3, r3, #4
 800b6f6:	1a9b      	subs	r3, r3, r2
 800b6f8:	009b      	lsls	r3, r3, #2
 800b6fa:	440b      	add	r3, r1
 800b6fc:	333c      	adds	r3, #60	@ 0x3c
 800b6fe:	78ba      	ldrb	r2, [r7, #2]
 800b700:	701a      	strb	r2, [r3, #0]
 800b702:	e009      	b.n	800b718 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b704:	78fa      	ldrb	r2, [r7, #3]
 800b706:	68f9      	ldr	r1, [r7, #12]
 800b708:	4613      	mov	r3, r2
 800b70a:	011b      	lsls	r3, r3, #4
 800b70c:	1a9b      	subs	r3, r3, r2
 800b70e:	009b      	lsls	r3, r3, #2
 800b710:	440b      	add	r3, r1
 800b712:	333d      	adds	r3, #61	@ 0x3d
 800b714:	78ba      	ldrb	r2, [r7, #2]
 800b716:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b718:	2300      	movs	r3, #0
}
 800b71a:	4618      	mov	r0, r3
 800b71c:	3714      	adds	r7, #20
 800b71e:	46bd      	mov	sp, r7
 800b720:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b724:	4770      	bx	lr

0800b726 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b726:	b580      	push	{r7, lr}
 800b728:	b082      	sub	sp, #8
 800b72a:	af00      	add	r7, sp, #0
 800b72c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b72e:	6878      	ldr	r0, [r7, #4]
 800b730:	f7f6 f906 	bl	8001940 <HAL_Delay>
}
 800b734:	bf00      	nop
 800b736:	3708      	adds	r7, #8
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b085      	sub	sp, #20
 800b740:	af00      	add	r7, sp, #0
 800b742:	4603      	mov	r3, r0
 800b744:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b746:	2300      	movs	r3, #0
 800b748:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b74a:	79fb      	ldrb	r3, [r7, #7]
 800b74c:	2b03      	cmp	r3, #3
 800b74e:	d817      	bhi.n	800b780 <USBH_Get_USB_Status+0x44>
 800b750:	a201      	add	r2, pc, #4	@ (adr r2, 800b758 <USBH_Get_USB_Status+0x1c>)
 800b752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b756:	bf00      	nop
 800b758:	0800b769 	.word	0x0800b769
 800b75c:	0800b76f 	.word	0x0800b76f
 800b760:	0800b775 	.word	0x0800b775
 800b764:	0800b77b 	.word	0x0800b77b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b768:	2300      	movs	r3, #0
 800b76a:	73fb      	strb	r3, [r7, #15]
    break;
 800b76c:	e00b      	b.n	800b786 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b76e:	2302      	movs	r3, #2
 800b770:	73fb      	strb	r3, [r7, #15]
    break;
 800b772:	e008      	b.n	800b786 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b774:	2301      	movs	r3, #1
 800b776:	73fb      	strb	r3, [r7, #15]
    break;
 800b778:	e005      	b.n	800b786 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b77a:	2302      	movs	r3, #2
 800b77c:	73fb      	strb	r3, [r7, #15]
    break;
 800b77e:	e002      	b.n	800b786 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b780:	2302      	movs	r3, #2
 800b782:	73fb      	strb	r3, [r7, #15]
    break;
 800b784:	bf00      	nop
  }
  return usb_status;
 800b786:	7bfb      	ldrb	r3, [r7, #15]
}
 800b788:	4618      	mov	r0, r3
 800b78a:	3714      	adds	r7, #20
 800b78c:	46bd      	mov	sp, r7
 800b78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b792:	4770      	bx	lr

0800b794 <MX_DriverVbusHS>:
 800b794:	b580      	push	{r7, lr}
 800b796:	b084      	sub	sp, #16
 800b798:	af00      	add	r7, sp, #0
 800b79a:	4603      	mov	r3, r0
 800b79c:	71fb      	strb	r3, [r7, #7]
 800b79e:	79fb      	ldrb	r3, [r7, #7]
 800b7a0:	73fb      	strb	r3, [r7, #15]
 800b7a2:	79fb      	ldrb	r3, [r7, #7]
 800b7a4:	2b00      	cmp	r3, #0
 800b7a6:	d102      	bne.n	800b7ae <MX_DriverVbusHS+0x1a>
 800b7a8:	2301      	movs	r3, #1
 800b7aa:	73fb      	strb	r3, [r7, #15]
 800b7ac:	e001      	b.n	800b7b2 <MX_DriverVbusHS+0x1e>
 800b7ae:	2300      	movs	r3, #0
 800b7b0:	73fb      	strb	r3, [r7, #15]
 800b7b2:	7bfb      	ldrb	r3, [r7, #15]
 800b7b4:	461a      	mov	r2, r3
 800b7b6:	2110      	movs	r1, #16
 800b7b8:	4803      	ldr	r0, [pc, #12]	@ (800b7c8 <MX_DriverVbusHS+0x34>)
 800b7ba:	f7f6 fd9d 	bl	80022f8 <HAL_GPIO_WritePin>
 800b7be:	bf00      	nop
 800b7c0:	3710      	adds	r7, #16
 800b7c2:	46bd      	mov	sp, r7
 800b7c4:	bd80      	pop	{r7, pc}
 800b7c6:	bf00      	nop
 800b7c8:	40020800 	.word	0x40020800

0800b7cc <malloc>:
 800b7cc:	4b02      	ldr	r3, [pc, #8]	@ (800b7d8 <malloc+0xc>)
 800b7ce:	4601      	mov	r1, r0
 800b7d0:	6818      	ldr	r0, [r3, #0]
 800b7d2:	f000 b82d 	b.w	800b830 <_malloc_r>
 800b7d6:	bf00      	nop
 800b7d8:	20000034 	.word	0x20000034

0800b7dc <free>:
 800b7dc:	4b02      	ldr	r3, [pc, #8]	@ (800b7e8 <free+0xc>)
 800b7de:	4601      	mov	r1, r0
 800b7e0:	6818      	ldr	r0, [r3, #0]
 800b7e2:	f000 b92b 	b.w	800ba3c <_free_r>
 800b7e6:	bf00      	nop
 800b7e8:	20000034 	.word	0x20000034

0800b7ec <sbrk_aligned>:
 800b7ec:	b570      	push	{r4, r5, r6, lr}
 800b7ee:	4e0f      	ldr	r6, [pc, #60]	@ (800b82c <sbrk_aligned+0x40>)
 800b7f0:	460c      	mov	r4, r1
 800b7f2:	6831      	ldr	r1, [r6, #0]
 800b7f4:	4605      	mov	r5, r0
 800b7f6:	b911      	cbnz	r1, 800b7fe <sbrk_aligned+0x12>
 800b7f8:	f000 f8e4 	bl	800b9c4 <_sbrk_r>
 800b7fc:	6030      	str	r0, [r6, #0]
 800b7fe:	4621      	mov	r1, r4
 800b800:	4628      	mov	r0, r5
 800b802:	f000 f8df 	bl	800b9c4 <_sbrk_r>
 800b806:	1c43      	adds	r3, r0, #1
 800b808:	d103      	bne.n	800b812 <sbrk_aligned+0x26>
 800b80a:	f04f 34ff 	mov.w	r4, #4294967295
 800b80e:	4620      	mov	r0, r4
 800b810:	bd70      	pop	{r4, r5, r6, pc}
 800b812:	1cc4      	adds	r4, r0, #3
 800b814:	f024 0403 	bic.w	r4, r4, #3
 800b818:	42a0      	cmp	r0, r4
 800b81a:	d0f8      	beq.n	800b80e <sbrk_aligned+0x22>
 800b81c:	1a21      	subs	r1, r4, r0
 800b81e:	4628      	mov	r0, r5
 800b820:	f000 f8d0 	bl	800b9c4 <_sbrk_r>
 800b824:	3001      	adds	r0, #1
 800b826:	d1f2      	bne.n	800b80e <sbrk_aligned+0x22>
 800b828:	e7ef      	b.n	800b80a <sbrk_aligned+0x1e>
 800b82a:	bf00      	nop
 800b82c:	20000b10 	.word	0x20000b10

0800b830 <_malloc_r>:
 800b830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b834:	1ccd      	adds	r5, r1, #3
 800b836:	f025 0503 	bic.w	r5, r5, #3
 800b83a:	3508      	adds	r5, #8
 800b83c:	2d0c      	cmp	r5, #12
 800b83e:	bf38      	it	cc
 800b840:	250c      	movcc	r5, #12
 800b842:	2d00      	cmp	r5, #0
 800b844:	4606      	mov	r6, r0
 800b846:	db01      	blt.n	800b84c <_malloc_r+0x1c>
 800b848:	42a9      	cmp	r1, r5
 800b84a:	d904      	bls.n	800b856 <_malloc_r+0x26>
 800b84c:	230c      	movs	r3, #12
 800b84e:	6033      	str	r3, [r6, #0]
 800b850:	2000      	movs	r0, #0
 800b852:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b856:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b92c <_malloc_r+0xfc>
 800b85a:	f000 f869 	bl	800b930 <__malloc_lock>
 800b85e:	f8d8 3000 	ldr.w	r3, [r8]
 800b862:	461c      	mov	r4, r3
 800b864:	bb44      	cbnz	r4, 800b8b8 <_malloc_r+0x88>
 800b866:	4629      	mov	r1, r5
 800b868:	4630      	mov	r0, r6
 800b86a:	f7ff ffbf 	bl	800b7ec <sbrk_aligned>
 800b86e:	1c43      	adds	r3, r0, #1
 800b870:	4604      	mov	r4, r0
 800b872:	d158      	bne.n	800b926 <_malloc_r+0xf6>
 800b874:	f8d8 4000 	ldr.w	r4, [r8]
 800b878:	4627      	mov	r7, r4
 800b87a:	2f00      	cmp	r7, #0
 800b87c:	d143      	bne.n	800b906 <_malloc_r+0xd6>
 800b87e:	2c00      	cmp	r4, #0
 800b880:	d04b      	beq.n	800b91a <_malloc_r+0xea>
 800b882:	6823      	ldr	r3, [r4, #0]
 800b884:	4639      	mov	r1, r7
 800b886:	4630      	mov	r0, r6
 800b888:	eb04 0903 	add.w	r9, r4, r3
 800b88c:	f000 f89a 	bl	800b9c4 <_sbrk_r>
 800b890:	4581      	cmp	r9, r0
 800b892:	d142      	bne.n	800b91a <_malloc_r+0xea>
 800b894:	6821      	ldr	r1, [r4, #0]
 800b896:	1a6d      	subs	r5, r5, r1
 800b898:	4629      	mov	r1, r5
 800b89a:	4630      	mov	r0, r6
 800b89c:	f7ff ffa6 	bl	800b7ec <sbrk_aligned>
 800b8a0:	3001      	adds	r0, #1
 800b8a2:	d03a      	beq.n	800b91a <_malloc_r+0xea>
 800b8a4:	6823      	ldr	r3, [r4, #0]
 800b8a6:	442b      	add	r3, r5
 800b8a8:	6023      	str	r3, [r4, #0]
 800b8aa:	f8d8 3000 	ldr.w	r3, [r8]
 800b8ae:	685a      	ldr	r2, [r3, #4]
 800b8b0:	bb62      	cbnz	r2, 800b90c <_malloc_r+0xdc>
 800b8b2:	f8c8 7000 	str.w	r7, [r8]
 800b8b6:	e00f      	b.n	800b8d8 <_malloc_r+0xa8>
 800b8b8:	6822      	ldr	r2, [r4, #0]
 800b8ba:	1b52      	subs	r2, r2, r5
 800b8bc:	d420      	bmi.n	800b900 <_malloc_r+0xd0>
 800b8be:	2a0b      	cmp	r2, #11
 800b8c0:	d917      	bls.n	800b8f2 <_malloc_r+0xc2>
 800b8c2:	1961      	adds	r1, r4, r5
 800b8c4:	42a3      	cmp	r3, r4
 800b8c6:	6025      	str	r5, [r4, #0]
 800b8c8:	bf18      	it	ne
 800b8ca:	6059      	strne	r1, [r3, #4]
 800b8cc:	6863      	ldr	r3, [r4, #4]
 800b8ce:	bf08      	it	eq
 800b8d0:	f8c8 1000 	streq.w	r1, [r8]
 800b8d4:	5162      	str	r2, [r4, r5]
 800b8d6:	604b      	str	r3, [r1, #4]
 800b8d8:	4630      	mov	r0, r6
 800b8da:	f000 f82f 	bl	800b93c <__malloc_unlock>
 800b8de:	f104 000b 	add.w	r0, r4, #11
 800b8e2:	1d23      	adds	r3, r4, #4
 800b8e4:	f020 0007 	bic.w	r0, r0, #7
 800b8e8:	1ac2      	subs	r2, r0, r3
 800b8ea:	bf1c      	itt	ne
 800b8ec:	1a1b      	subne	r3, r3, r0
 800b8ee:	50a3      	strne	r3, [r4, r2]
 800b8f0:	e7af      	b.n	800b852 <_malloc_r+0x22>
 800b8f2:	6862      	ldr	r2, [r4, #4]
 800b8f4:	42a3      	cmp	r3, r4
 800b8f6:	bf0c      	ite	eq
 800b8f8:	f8c8 2000 	streq.w	r2, [r8]
 800b8fc:	605a      	strne	r2, [r3, #4]
 800b8fe:	e7eb      	b.n	800b8d8 <_malloc_r+0xa8>
 800b900:	4623      	mov	r3, r4
 800b902:	6864      	ldr	r4, [r4, #4]
 800b904:	e7ae      	b.n	800b864 <_malloc_r+0x34>
 800b906:	463c      	mov	r4, r7
 800b908:	687f      	ldr	r7, [r7, #4]
 800b90a:	e7b6      	b.n	800b87a <_malloc_r+0x4a>
 800b90c:	461a      	mov	r2, r3
 800b90e:	685b      	ldr	r3, [r3, #4]
 800b910:	42a3      	cmp	r3, r4
 800b912:	d1fb      	bne.n	800b90c <_malloc_r+0xdc>
 800b914:	2300      	movs	r3, #0
 800b916:	6053      	str	r3, [r2, #4]
 800b918:	e7de      	b.n	800b8d8 <_malloc_r+0xa8>
 800b91a:	230c      	movs	r3, #12
 800b91c:	6033      	str	r3, [r6, #0]
 800b91e:	4630      	mov	r0, r6
 800b920:	f000 f80c 	bl	800b93c <__malloc_unlock>
 800b924:	e794      	b.n	800b850 <_malloc_r+0x20>
 800b926:	6005      	str	r5, [r0, #0]
 800b928:	e7d6      	b.n	800b8d8 <_malloc_r+0xa8>
 800b92a:	bf00      	nop
 800b92c:	20000b14 	.word	0x20000b14

0800b930 <__malloc_lock>:
 800b930:	4801      	ldr	r0, [pc, #4]	@ (800b938 <__malloc_lock+0x8>)
 800b932:	f000 b881 	b.w	800ba38 <__retarget_lock_acquire_recursive>
 800b936:	bf00      	nop
 800b938:	20000c54 	.word	0x20000c54

0800b93c <__malloc_unlock>:
 800b93c:	4801      	ldr	r0, [pc, #4]	@ (800b944 <__malloc_unlock+0x8>)
 800b93e:	f000 b87c 	b.w	800ba3a <__retarget_lock_release_recursive>
 800b942:	bf00      	nop
 800b944:	20000c54 	.word	0x20000c54

0800b948 <sniprintf>:
 800b948:	b40c      	push	{r2, r3}
 800b94a:	b530      	push	{r4, r5, lr}
 800b94c:	4b18      	ldr	r3, [pc, #96]	@ (800b9b0 <sniprintf+0x68>)
 800b94e:	1e0c      	subs	r4, r1, #0
 800b950:	681d      	ldr	r5, [r3, #0]
 800b952:	b09d      	sub	sp, #116	@ 0x74
 800b954:	da08      	bge.n	800b968 <sniprintf+0x20>
 800b956:	238b      	movs	r3, #139	@ 0x8b
 800b958:	602b      	str	r3, [r5, #0]
 800b95a:	f04f 30ff 	mov.w	r0, #4294967295
 800b95e:	b01d      	add	sp, #116	@ 0x74
 800b960:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b964:	b002      	add	sp, #8
 800b966:	4770      	bx	lr
 800b968:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b96c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b970:	f04f 0300 	mov.w	r3, #0
 800b974:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b976:	bf14      	ite	ne
 800b978:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b97c:	4623      	moveq	r3, r4
 800b97e:	9304      	str	r3, [sp, #16]
 800b980:	9307      	str	r3, [sp, #28]
 800b982:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b986:	9002      	str	r0, [sp, #8]
 800b988:	9006      	str	r0, [sp, #24]
 800b98a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b98e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b990:	ab21      	add	r3, sp, #132	@ 0x84
 800b992:	a902      	add	r1, sp, #8
 800b994:	4628      	mov	r0, r5
 800b996:	9301      	str	r3, [sp, #4]
 800b998:	f000 f8f6 	bl	800bb88 <_svfiprintf_r>
 800b99c:	1c43      	adds	r3, r0, #1
 800b99e:	bfbc      	itt	lt
 800b9a0:	238b      	movlt	r3, #139	@ 0x8b
 800b9a2:	602b      	strlt	r3, [r5, #0]
 800b9a4:	2c00      	cmp	r4, #0
 800b9a6:	d0da      	beq.n	800b95e <sniprintf+0x16>
 800b9a8:	9b02      	ldr	r3, [sp, #8]
 800b9aa:	2200      	movs	r2, #0
 800b9ac:	701a      	strb	r2, [r3, #0]
 800b9ae:	e7d6      	b.n	800b95e <sniprintf+0x16>
 800b9b0:	20000034 	.word	0x20000034

0800b9b4 <memset>:
 800b9b4:	4402      	add	r2, r0
 800b9b6:	4603      	mov	r3, r0
 800b9b8:	4293      	cmp	r3, r2
 800b9ba:	d100      	bne.n	800b9be <memset+0xa>
 800b9bc:	4770      	bx	lr
 800b9be:	f803 1b01 	strb.w	r1, [r3], #1
 800b9c2:	e7f9      	b.n	800b9b8 <memset+0x4>

0800b9c4 <_sbrk_r>:
 800b9c4:	b538      	push	{r3, r4, r5, lr}
 800b9c6:	4d06      	ldr	r5, [pc, #24]	@ (800b9e0 <_sbrk_r+0x1c>)
 800b9c8:	2300      	movs	r3, #0
 800b9ca:	4604      	mov	r4, r0
 800b9cc:	4608      	mov	r0, r1
 800b9ce:	602b      	str	r3, [r5, #0]
 800b9d0:	f7f5 ff02 	bl	80017d8 <_sbrk>
 800b9d4:	1c43      	adds	r3, r0, #1
 800b9d6:	d102      	bne.n	800b9de <_sbrk_r+0x1a>
 800b9d8:	682b      	ldr	r3, [r5, #0]
 800b9da:	b103      	cbz	r3, 800b9de <_sbrk_r+0x1a>
 800b9dc:	6023      	str	r3, [r4, #0]
 800b9de:	bd38      	pop	{r3, r4, r5, pc}
 800b9e0:	20000c50 	.word	0x20000c50

0800b9e4 <__errno>:
 800b9e4:	4b01      	ldr	r3, [pc, #4]	@ (800b9ec <__errno+0x8>)
 800b9e6:	6818      	ldr	r0, [r3, #0]
 800b9e8:	4770      	bx	lr
 800b9ea:	bf00      	nop
 800b9ec:	20000034 	.word	0x20000034

0800b9f0 <__libc_init_array>:
 800b9f0:	b570      	push	{r4, r5, r6, lr}
 800b9f2:	4d0d      	ldr	r5, [pc, #52]	@ (800ba28 <__libc_init_array+0x38>)
 800b9f4:	4c0d      	ldr	r4, [pc, #52]	@ (800ba2c <__libc_init_array+0x3c>)
 800b9f6:	1b64      	subs	r4, r4, r5
 800b9f8:	10a4      	asrs	r4, r4, #2
 800b9fa:	2600      	movs	r6, #0
 800b9fc:	42a6      	cmp	r6, r4
 800b9fe:	d109      	bne.n	800ba14 <__libc_init_array+0x24>
 800ba00:	4d0b      	ldr	r5, [pc, #44]	@ (800ba30 <__libc_init_array+0x40>)
 800ba02:	4c0c      	ldr	r4, [pc, #48]	@ (800ba34 <__libc_init_array+0x44>)
 800ba04:	f000 fba6 	bl	800c154 <_init>
 800ba08:	1b64      	subs	r4, r4, r5
 800ba0a:	10a4      	asrs	r4, r4, #2
 800ba0c:	2600      	movs	r6, #0
 800ba0e:	42a6      	cmp	r6, r4
 800ba10:	d105      	bne.n	800ba1e <__libc_init_array+0x2e>
 800ba12:	bd70      	pop	{r4, r5, r6, pc}
 800ba14:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba18:	4798      	blx	r3
 800ba1a:	3601      	adds	r6, #1
 800ba1c:	e7ee      	b.n	800b9fc <__libc_init_array+0xc>
 800ba1e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba22:	4798      	blx	r3
 800ba24:	3601      	adds	r6, #1
 800ba26:	e7f2      	b.n	800ba0e <__libc_init_array+0x1e>
 800ba28:	0800c204 	.word	0x0800c204
 800ba2c:	0800c204 	.word	0x0800c204
 800ba30:	0800c204 	.word	0x0800c204
 800ba34:	0800c208 	.word	0x0800c208

0800ba38 <__retarget_lock_acquire_recursive>:
 800ba38:	4770      	bx	lr

0800ba3a <__retarget_lock_release_recursive>:
 800ba3a:	4770      	bx	lr

0800ba3c <_free_r>:
 800ba3c:	b538      	push	{r3, r4, r5, lr}
 800ba3e:	4605      	mov	r5, r0
 800ba40:	2900      	cmp	r1, #0
 800ba42:	d041      	beq.n	800bac8 <_free_r+0x8c>
 800ba44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ba48:	1f0c      	subs	r4, r1, #4
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	bfb8      	it	lt
 800ba4e:	18e4      	addlt	r4, r4, r3
 800ba50:	f7ff ff6e 	bl	800b930 <__malloc_lock>
 800ba54:	4a1d      	ldr	r2, [pc, #116]	@ (800bacc <_free_r+0x90>)
 800ba56:	6813      	ldr	r3, [r2, #0]
 800ba58:	b933      	cbnz	r3, 800ba68 <_free_r+0x2c>
 800ba5a:	6063      	str	r3, [r4, #4]
 800ba5c:	6014      	str	r4, [r2, #0]
 800ba5e:	4628      	mov	r0, r5
 800ba60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ba64:	f7ff bf6a 	b.w	800b93c <__malloc_unlock>
 800ba68:	42a3      	cmp	r3, r4
 800ba6a:	d908      	bls.n	800ba7e <_free_r+0x42>
 800ba6c:	6820      	ldr	r0, [r4, #0]
 800ba6e:	1821      	adds	r1, r4, r0
 800ba70:	428b      	cmp	r3, r1
 800ba72:	bf01      	itttt	eq
 800ba74:	6819      	ldreq	r1, [r3, #0]
 800ba76:	685b      	ldreq	r3, [r3, #4]
 800ba78:	1809      	addeq	r1, r1, r0
 800ba7a:	6021      	streq	r1, [r4, #0]
 800ba7c:	e7ed      	b.n	800ba5a <_free_r+0x1e>
 800ba7e:	461a      	mov	r2, r3
 800ba80:	685b      	ldr	r3, [r3, #4]
 800ba82:	b10b      	cbz	r3, 800ba88 <_free_r+0x4c>
 800ba84:	42a3      	cmp	r3, r4
 800ba86:	d9fa      	bls.n	800ba7e <_free_r+0x42>
 800ba88:	6811      	ldr	r1, [r2, #0]
 800ba8a:	1850      	adds	r0, r2, r1
 800ba8c:	42a0      	cmp	r0, r4
 800ba8e:	d10b      	bne.n	800baa8 <_free_r+0x6c>
 800ba90:	6820      	ldr	r0, [r4, #0]
 800ba92:	4401      	add	r1, r0
 800ba94:	1850      	adds	r0, r2, r1
 800ba96:	4283      	cmp	r3, r0
 800ba98:	6011      	str	r1, [r2, #0]
 800ba9a:	d1e0      	bne.n	800ba5e <_free_r+0x22>
 800ba9c:	6818      	ldr	r0, [r3, #0]
 800ba9e:	685b      	ldr	r3, [r3, #4]
 800baa0:	6053      	str	r3, [r2, #4]
 800baa2:	4408      	add	r0, r1
 800baa4:	6010      	str	r0, [r2, #0]
 800baa6:	e7da      	b.n	800ba5e <_free_r+0x22>
 800baa8:	d902      	bls.n	800bab0 <_free_r+0x74>
 800baaa:	230c      	movs	r3, #12
 800baac:	602b      	str	r3, [r5, #0]
 800baae:	e7d6      	b.n	800ba5e <_free_r+0x22>
 800bab0:	6820      	ldr	r0, [r4, #0]
 800bab2:	1821      	adds	r1, r4, r0
 800bab4:	428b      	cmp	r3, r1
 800bab6:	bf04      	itt	eq
 800bab8:	6819      	ldreq	r1, [r3, #0]
 800baba:	685b      	ldreq	r3, [r3, #4]
 800babc:	6063      	str	r3, [r4, #4]
 800babe:	bf04      	itt	eq
 800bac0:	1809      	addeq	r1, r1, r0
 800bac2:	6021      	streq	r1, [r4, #0]
 800bac4:	6054      	str	r4, [r2, #4]
 800bac6:	e7ca      	b.n	800ba5e <_free_r+0x22>
 800bac8:	bd38      	pop	{r3, r4, r5, pc}
 800baca:	bf00      	nop
 800bacc:	20000b14 	.word	0x20000b14

0800bad0 <__ssputs_r>:
 800bad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bad4:	688e      	ldr	r6, [r1, #8]
 800bad6:	461f      	mov	r7, r3
 800bad8:	42be      	cmp	r6, r7
 800bada:	680b      	ldr	r3, [r1, #0]
 800badc:	4682      	mov	sl, r0
 800bade:	460c      	mov	r4, r1
 800bae0:	4690      	mov	r8, r2
 800bae2:	d82d      	bhi.n	800bb40 <__ssputs_r+0x70>
 800bae4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bae8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800baec:	d026      	beq.n	800bb3c <__ssputs_r+0x6c>
 800baee:	6965      	ldr	r5, [r4, #20]
 800baf0:	6909      	ldr	r1, [r1, #16]
 800baf2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800baf6:	eba3 0901 	sub.w	r9, r3, r1
 800bafa:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bafe:	1c7b      	adds	r3, r7, #1
 800bb00:	444b      	add	r3, r9
 800bb02:	106d      	asrs	r5, r5, #1
 800bb04:	429d      	cmp	r5, r3
 800bb06:	bf38      	it	cc
 800bb08:	461d      	movcc	r5, r3
 800bb0a:	0553      	lsls	r3, r2, #21
 800bb0c:	d527      	bpl.n	800bb5e <__ssputs_r+0x8e>
 800bb0e:	4629      	mov	r1, r5
 800bb10:	f7ff fe8e 	bl	800b830 <_malloc_r>
 800bb14:	4606      	mov	r6, r0
 800bb16:	b360      	cbz	r0, 800bb72 <__ssputs_r+0xa2>
 800bb18:	6921      	ldr	r1, [r4, #16]
 800bb1a:	464a      	mov	r2, r9
 800bb1c:	f000 fad6 	bl	800c0cc <memcpy>
 800bb20:	89a3      	ldrh	r3, [r4, #12]
 800bb22:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bb26:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bb2a:	81a3      	strh	r3, [r4, #12]
 800bb2c:	6126      	str	r6, [r4, #16]
 800bb2e:	6165      	str	r5, [r4, #20]
 800bb30:	444e      	add	r6, r9
 800bb32:	eba5 0509 	sub.w	r5, r5, r9
 800bb36:	6026      	str	r6, [r4, #0]
 800bb38:	60a5      	str	r5, [r4, #8]
 800bb3a:	463e      	mov	r6, r7
 800bb3c:	42be      	cmp	r6, r7
 800bb3e:	d900      	bls.n	800bb42 <__ssputs_r+0x72>
 800bb40:	463e      	mov	r6, r7
 800bb42:	6820      	ldr	r0, [r4, #0]
 800bb44:	4632      	mov	r2, r6
 800bb46:	4641      	mov	r1, r8
 800bb48:	f000 faa6 	bl	800c098 <memmove>
 800bb4c:	68a3      	ldr	r3, [r4, #8]
 800bb4e:	1b9b      	subs	r3, r3, r6
 800bb50:	60a3      	str	r3, [r4, #8]
 800bb52:	6823      	ldr	r3, [r4, #0]
 800bb54:	4433      	add	r3, r6
 800bb56:	6023      	str	r3, [r4, #0]
 800bb58:	2000      	movs	r0, #0
 800bb5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb5e:	462a      	mov	r2, r5
 800bb60:	f000 fac2 	bl	800c0e8 <_realloc_r>
 800bb64:	4606      	mov	r6, r0
 800bb66:	2800      	cmp	r0, #0
 800bb68:	d1e0      	bne.n	800bb2c <__ssputs_r+0x5c>
 800bb6a:	6921      	ldr	r1, [r4, #16]
 800bb6c:	4650      	mov	r0, sl
 800bb6e:	f7ff ff65 	bl	800ba3c <_free_r>
 800bb72:	230c      	movs	r3, #12
 800bb74:	f8ca 3000 	str.w	r3, [sl]
 800bb78:	89a3      	ldrh	r3, [r4, #12]
 800bb7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb7e:	81a3      	strh	r3, [r4, #12]
 800bb80:	f04f 30ff 	mov.w	r0, #4294967295
 800bb84:	e7e9      	b.n	800bb5a <__ssputs_r+0x8a>
	...

0800bb88 <_svfiprintf_r>:
 800bb88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb8c:	4698      	mov	r8, r3
 800bb8e:	898b      	ldrh	r3, [r1, #12]
 800bb90:	061b      	lsls	r3, r3, #24
 800bb92:	b09d      	sub	sp, #116	@ 0x74
 800bb94:	4607      	mov	r7, r0
 800bb96:	460d      	mov	r5, r1
 800bb98:	4614      	mov	r4, r2
 800bb9a:	d510      	bpl.n	800bbbe <_svfiprintf_r+0x36>
 800bb9c:	690b      	ldr	r3, [r1, #16]
 800bb9e:	b973      	cbnz	r3, 800bbbe <_svfiprintf_r+0x36>
 800bba0:	2140      	movs	r1, #64	@ 0x40
 800bba2:	f7ff fe45 	bl	800b830 <_malloc_r>
 800bba6:	6028      	str	r0, [r5, #0]
 800bba8:	6128      	str	r0, [r5, #16]
 800bbaa:	b930      	cbnz	r0, 800bbba <_svfiprintf_r+0x32>
 800bbac:	230c      	movs	r3, #12
 800bbae:	603b      	str	r3, [r7, #0]
 800bbb0:	f04f 30ff 	mov.w	r0, #4294967295
 800bbb4:	b01d      	add	sp, #116	@ 0x74
 800bbb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbba:	2340      	movs	r3, #64	@ 0x40
 800bbbc:	616b      	str	r3, [r5, #20]
 800bbbe:	2300      	movs	r3, #0
 800bbc0:	9309      	str	r3, [sp, #36]	@ 0x24
 800bbc2:	2320      	movs	r3, #32
 800bbc4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bbc8:	f8cd 800c 	str.w	r8, [sp, #12]
 800bbcc:	2330      	movs	r3, #48	@ 0x30
 800bbce:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bd6c <_svfiprintf_r+0x1e4>
 800bbd2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bbd6:	f04f 0901 	mov.w	r9, #1
 800bbda:	4623      	mov	r3, r4
 800bbdc:	469a      	mov	sl, r3
 800bbde:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bbe2:	b10a      	cbz	r2, 800bbe8 <_svfiprintf_r+0x60>
 800bbe4:	2a25      	cmp	r2, #37	@ 0x25
 800bbe6:	d1f9      	bne.n	800bbdc <_svfiprintf_r+0x54>
 800bbe8:	ebba 0b04 	subs.w	fp, sl, r4
 800bbec:	d00b      	beq.n	800bc06 <_svfiprintf_r+0x7e>
 800bbee:	465b      	mov	r3, fp
 800bbf0:	4622      	mov	r2, r4
 800bbf2:	4629      	mov	r1, r5
 800bbf4:	4638      	mov	r0, r7
 800bbf6:	f7ff ff6b 	bl	800bad0 <__ssputs_r>
 800bbfa:	3001      	adds	r0, #1
 800bbfc:	f000 80a7 	beq.w	800bd4e <_svfiprintf_r+0x1c6>
 800bc00:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bc02:	445a      	add	r2, fp
 800bc04:	9209      	str	r2, [sp, #36]	@ 0x24
 800bc06:	f89a 3000 	ldrb.w	r3, [sl]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	f000 809f 	beq.w	800bd4e <_svfiprintf_r+0x1c6>
 800bc10:	2300      	movs	r3, #0
 800bc12:	f04f 32ff 	mov.w	r2, #4294967295
 800bc16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bc1a:	f10a 0a01 	add.w	sl, sl, #1
 800bc1e:	9304      	str	r3, [sp, #16]
 800bc20:	9307      	str	r3, [sp, #28]
 800bc22:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bc26:	931a      	str	r3, [sp, #104]	@ 0x68
 800bc28:	4654      	mov	r4, sl
 800bc2a:	2205      	movs	r2, #5
 800bc2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc30:	484e      	ldr	r0, [pc, #312]	@ (800bd6c <_svfiprintf_r+0x1e4>)
 800bc32:	f7f4 fae5 	bl	8000200 <memchr>
 800bc36:	9a04      	ldr	r2, [sp, #16]
 800bc38:	b9d8      	cbnz	r0, 800bc72 <_svfiprintf_r+0xea>
 800bc3a:	06d0      	lsls	r0, r2, #27
 800bc3c:	bf44      	itt	mi
 800bc3e:	2320      	movmi	r3, #32
 800bc40:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc44:	0711      	lsls	r1, r2, #28
 800bc46:	bf44      	itt	mi
 800bc48:	232b      	movmi	r3, #43	@ 0x2b
 800bc4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bc4e:	f89a 3000 	ldrb.w	r3, [sl]
 800bc52:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc54:	d015      	beq.n	800bc82 <_svfiprintf_r+0xfa>
 800bc56:	9a07      	ldr	r2, [sp, #28]
 800bc58:	4654      	mov	r4, sl
 800bc5a:	2000      	movs	r0, #0
 800bc5c:	f04f 0c0a 	mov.w	ip, #10
 800bc60:	4621      	mov	r1, r4
 800bc62:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bc66:	3b30      	subs	r3, #48	@ 0x30
 800bc68:	2b09      	cmp	r3, #9
 800bc6a:	d94b      	bls.n	800bd04 <_svfiprintf_r+0x17c>
 800bc6c:	b1b0      	cbz	r0, 800bc9c <_svfiprintf_r+0x114>
 800bc6e:	9207      	str	r2, [sp, #28]
 800bc70:	e014      	b.n	800bc9c <_svfiprintf_r+0x114>
 800bc72:	eba0 0308 	sub.w	r3, r0, r8
 800bc76:	fa09 f303 	lsl.w	r3, r9, r3
 800bc7a:	4313      	orrs	r3, r2
 800bc7c:	9304      	str	r3, [sp, #16]
 800bc7e:	46a2      	mov	sl, r4
 800bc80:	e7d2      	b.n	800bc28 <_svfiprintf_r+0xa0>
 800bc82:	9b03      	ldr	r3, [sp, #12]
 800bc84:	1d19      	adds	r1, r3, #4
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	9103      	str	r1, [sp, #12]
 800bc8a:	2b00      	cmp	r3, #0
 800bc8c:	bfbb      	ittet	lt
 800bc8e:	425b      	neglt	r3, r3
 800bc90:	f042 0202 	orrlt.w	r2, r2, #2
 800bc94:	9307      	strge	r3, [sp, #28]
 800bc96:	9307      	strlt	r3, [sp, #28]
 800bc98:	bfb8      	it	lt
 800bc9a:	9204      	strlt	r2, [sp, #16]
 800bc9c:	7823      	ldrb	r3, [r4, #0]
 800bc9e:	2b2e      	cmp	r3, #46	@ 0x2e
 800bca0:	d10a      	bne.n	800bcb8 <_svfiprintf_r+0x130>
 800bca2:	7863      	ldrb	r3, [r4, #1]
 800bca4:	2b2a      	cmp	r3, #42	@ 0x2a
 800bca6:	d132      	bne.n	800bd0e <_svfiprintf_r+0x186>
 800bca8:	9b03      	ldr	r3, [sp, #12]
 800bcaa:	1d1a      	adds	r2, r3, #4
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	9203      	str	r2, [sp, #12]
 800bcb0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bcb4:	3402      	adds	r4, #2
 800bcb6:	9305      	str	r3, [sp, #20]
 800bcb8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bd7c <_svfiprintf_r+0x1f4>
 800bcbc:	7821      	ldrb	r1, [r4, #0]
 800bcbe:	2203      	movs	r2, #3
 800bcc0:	4650      	mov	r0, sl
 800bcc2:	f7f4 fa9d 	bl	8000200 <memchr>
 800bcc6:	b138      	cbz	r0, 800bcd8 <_svfiprintf_r+0x150>
 800bcc8:	9b04      	ldr	r3, [sp, #16]
 800bcca:	eba0 000a 	sub.w	r0, r0, sl
 800bcce:	2240      	movs	r2, #64	@ 0x40
 800bcd0:	4082      	lsls	r2, r0
 800bcd2:	4313      	orrs	r3, r2
 800bcd4:	3401      	adds	r4, #1
 800bcd6:	9304      	str	r3, [sp, #16]
 800bcd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcdc:	4824      	ldr	r0, [pc, #144]	@ (800bd70 <_svfiprintf_r+0x1e8>)
 800bcde:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bce2:	2206      	movs	r2, #6
 800bce4:	f7f4 fa8c 	bl	8000200 <memchr>
 800bce8:	2800      	cmp	r0, #0
 800bcea:	d036      	beq.n	800bd5a <_svfiprintf_r+0x1d2>
 800bcec:	4b21      	ldr	r3, [pc, #132]	@ (800bd74 <_svfiprintf_r+0x1ec>)
 800bcee:	bb1b      	cbnz	r3, 800bd38 <_svfiprintf_r+0x1b0>
 800bcf0:	9b03      	ldr	r3, [sp, #12]
 800bcf2:	3307      	adds	r3, #7
 800bcf4:	f023 0307 	bic.w	r3, r3, #7
 800bcf8:	3308      	adds	r3, #8
 800bcfa:	9303      	str	r3, [sp, #12]
 800bcfc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcfe:	4433      	add	r3, r6
 800bd00:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd02:	e76a      	b.n	800bbda <_svfiprintf_r+0x52>
 800bd04:	fb0c 3202 	mla	r2, ip, r2, r3
 800bd08:	460c      	mov	r4, r1
 800bd0a:	2001      	movs	r0, #1
 800bd0c:	e7a8      	b.n	800bc60 <_svfiprintf_r+0xd8>
 800bd0e:	2300      	movs	r3, #0
 800bd10:	3401      	adds	r4, #1
 800bd12:	9305      	str	r3, [sp, #20]
 800bd14:	4619      	mov	r1, r3
 800bd16:	f04f 0c0a 	mov.w	ip, #10
 800bd1a:	4620      	mov	r0, r4
 800bd1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bd20:	3a30      	subs	r2, #48	@ 0x30
 800bd22:	2a09      	cmp	r2, #9
 800bd24:	d903      	bls.n	800bd2e <_svfiprintf_r+0x1a6>
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d0c6      	beq.n	800bcb8 <_svfiprintf_r+0x130>
 800bd2a:	9105      	str	r1, [sp, #20]
 800bd2c:	e7c4      	b.n	800bcb8 <_svfiprintf_r+0x130>
 800bd2e:	fb0c 2101 	mla	r1, ip, r1, r2
 800bd32:	4604      	mov	r4, r0
 800bd34:	2301      	movs	r3, #1
 800bd36:	e7f0      	b.n	800bd1a <_svfiprintf_r+0x192>
 800bd38:	ab03      	add	r3, sp, #12
 800bd3a:	9300      	str	r3, [sp, #0]
 800bd3c:	462a      	mov	r2, r5
 800bd3e:	4b0e      	ldr	r3, [pc, #56]	@ (800bd78 <_svfiprintf_r+0x1f0>)
 800bd40:	a904      	add	r1, sp, #16
 800bd42:	4638      	mov	r0, r7
 800bd44:	f3af 8000 	nop.w
 800bd48:	1c42      	adds	r2, r0, #1
 800bd4a:	4606      	mov	r6, r0
 800bd4c:	d1d6      	bne.n	800bcfc <_svfiprintf_r+0x174>
 800bd4e:	89ab      	ldrh	r3, [r5, #12]
 800bd50:	065b      	lsls	r3, r3, #25
 800bd52:	f53f af2d 	bmi.w	800bbb0 <_svfiprintf_r+0x28>
 800bd56:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bd58:	e72c      	b.n	800bbb4 <_svfiprintf_r+0x2c>
 800bd5a:	ab03      	add	r3, sp, #12
 800bd5c:	9300      	str	r3, [sp, #0]
 800bd5e:	462a      	mov	r2, r5
 800bd60:	4b05      	ldr	r3, [pc, #20]	@ (800bd78 <_svfiprintf_r+0x1f0>)
 800bd62:	a904      	add	r1, sp, #16
 800bd64:	4638      	mov	r0, r7
 800bd66:	f000 f879 	bl	800be5c <_printf_i>
 800bd6a:	e7ed      	b.n	800bd48 <_svfiprintf_r+0x1c0>
 800bd6c:	0800c1c8 	.word	0x0800c1c8
 800bd70:	0800c1d2 	.word	0x0800c1d2
 800bd74:	00000000 	.word	0x00000000
 800bd78:	0800bad1 	.word	0x0800bad1
 800bd7c:	0800c1ce 	.word	0x0800c1ce

0800bd80 <_printf_common>:
 800bd80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd84:	4616      	mov	r6, r2
 800bd86:	4698      	mov	r8, r3
 800bd88:	688a      	ldr	r2, [r1, #8]
 800bd8a:	690b      	ldr	r3, [r1, #16]
 800bd8c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bd90:	4293      	cmp	r3, r2
 800bd92:	bfb8      	it	lt
 800bd94:	4613      	movlt	r3, r2
 800bd96:	6033      	str	r3, [r6, #0]
 800bd98:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800bd9c:	4607      	mov	r7, r0
 800bd9e:	460c      	mov	r4, r1
 800bda0:	b10a      	cbz	r2, 800bda6 <_printf_common+0x26>
 800bda2:	3301      	adds	r3, #1
 800bda4:	6033      	str	r3, [r6, #0]
 800bda6:	6823      	ldr	r3, [r4, #0]
 800bda8:	0699      	lsls	r1, r3, #26
 800bdaa:	bf42      	ittt	mi
 800bdac:	6833      	ldrmi	r3, [r6, #0]
 800bdae:	3302      	addmi	r3, #2
 800bdb0:	6033      	strmi	r3, [r6, #0]
 800bdb2:	6825      	ldr	r5, [r4, #0]
 800bdb4:	f015 0506 	ands.w	r5, r5, #6
 800bdb8:	d106      	bne.n	800bdc8 <_printf_common+0x48>
 800bdba:	f104 0a19 	add.w	sl, r4, #25
 800bdbe:	68e3      	ldr	r3, [r4, #12]
 800bdc0:	6832      	ldr	r2, [r6, #0]
 800bdc2:	1a9b      	subs	r3, r3, r2
 800bdc4:	42ab      	cmp	r3, r5
 800bdc6:	dc26      	bgt.n	800be16 <_printf_common+0x96>
 800bdc8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800bdcc:	6822      	ldr	r2, [r4, #0]
 800bdce:	3b00      	subs	r3, #0
 800bdd0:	bf18      	it	ne
 800bdd2:	2301      	movne	r3, #1
 800bdd4:	0692      	lsls	r2, r2, #26
 800bdd6:	d42b      	bmi.n	800be30 <_printf_common+0xb0>
 800bdd8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800bddc:	4641      	mov	r1, r8
 800bdde:	4638      	mov	r0, r7
 800bde0:	47c8      	blx	r9
 800bde2:	3001      	adds	r0, #1
 800bde4:	d01e      	beq.n	800be24 <_printf_common+0xa4>
 800bde6:	6823      	ldr	r3, [r4, #0]
 800bde8:	6922      	ldr	r2, [r4, #16]
 800bdea:	f003 0306 	and.w	r3, r3, #6
 800bdee:	2b04      	cmp	r3, #4
 800bdf0:	bf02      	ittt	eq
 800bdf2:	68e5      	ldreq	r5, [r4, #12]
 800bdf4:	6833      	ldreq	r3, [r6, #0]
 800bdf6:	1aed      	subeq	r5, r5, r3
 800bdf8:	68a3      	ldr	r3, [r4, #8]
 800bdfa:	bf0c      	ite	eq
 800bdfc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800be00:	2500      	movne	r5, #0
 800be02:	4293      	cmp	r3, r2
 800be04:	bfc4      	itt	gt
 800be06:	1a9b      	subgt	r3, r3, r2
 800be08:	18ed      	addgt	r5, r5, r3
 800be0a:	2600      	movs	r6, #0
 800be0c:	341a      	adds	r4, #26
 800be0e:	42b5      	cmp	r5, r6
 800be10:	d11a      	bne.n	800be48 <_printf_common+0xc8>
 800be12:	2000      	movs	r0, #0
 800be14:	e008      	b.n	800be28 <_printf_common+0xa8>
 800be16:	2301      	movs	r3, #1
 800be18:	4652      	mov	r2, sl
 800be1a:	4641      	mov	r1, r8
 800be1c:	4638      	mov	r0, r7
 800be1e:	47c8      	blx	r9
 800be20:	3001      	adds	r0, #1
 800be22:	d103      	bne.n	800be2c <_printf_common+0xac>
 800be24:	f04f 30ff 	mov.w	r0, #4294967295
 800be28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800be2c:	3501      	adds	r5, #1
 800be2e:	e7c6      	b.n	800bdbe <_printf_common+0x3e>
 800be30:	18e1      	adds	r1, r4, r3
 800be32:	1c5a      	adds	r2, r3, #1
 800be34:	2030      	movs	r0, #48	@ 0x30
 800be36:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800be3a:	4422      	add	r2, r4
 800be3c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800be40:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800be44:	3302      	adds	r3, #2
 800be46:	e7c7      	b.n	800bdd8 <_printf_common+0x58>
 800be48:	2301      	movs	r3, #1
 800be4a:	4622      	mov	r2, r4
 800be4c:	4641      	mov	r1, r8
 800be4e:	4638      	mov	r0, r7
 800be50:	47c8      	blx	r9
 800be52:	3001      	adds	r0, #1
 800be54:	d0e6      	beq.n	800be24 <_printf_common+0xa4>
 800be56:	3601      	adds	r6, #1
 800be58:	e7d9      	b.n	800be0e <_printf_common+0x8e>
	...

0800be5c <_printf_i>:
 800be5c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be60:	7e0f      	ldrb	r7, [r1, #24]
 800be62:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800be64:	2f78      	cmp	r7, #120	@ 0x78
 800be66:	4691      	mov	r9, r2
 800be68:	4680      	mov	r8, r0
 800be6a:	460c      	mov	r4, r1
 800be6c:	469a      	mov	sl, r3
 800be6e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800be72:	d807      	bhi.n	800be84 <_printf_i+0x28>
 800be74:	2f62      	cmp	r7, #98	@ 0x62
 800be76:	d80a      	bhi.n	800be8e <_printf_i+0x32>
 800be78:	2f00      	cmp	r7, #0
 800be7a:	f000 80d1 	beq.w	800c020 <_printf_i+0x1c4>
 800be7e:	2f58      	cmp	r7, #88	@ 0x58
 800be80:	f000 80b8 	beq.w	800bff4 <_printf_i+0x198>
 800be84:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800be88:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800be8c:	e03a      	b.n	800bf04 <_printf_i+0xa8>
 800be8e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800be92:	2b15      	cmp	r3, #21
 800be94:	d8f6      	bhi.n	800be84 <_printf_i+0x28>
 800be96:	a101      	add	r1, pc, #4	@ (adr r1, 800be9c <_printf_i+0x40>)
 800be98:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800be9c:	0800bef5 	.word	0x0800bef5
 800bea0:	0800bf09 	.word	0x0800bf09
 800bea4:	0800be85 	.word	0x0800be85
 800bea8:	0800be85 	.word	0x0800be85
 800beac:	0800be85 	.word	0x0800be85
 800beb0:	0800be85 	.word	0x0800be85
 800beb4:	0800bf09 	.word	0x0800bf09
 800beb8:	0800be85 	.word	0x0800be85
 800bebc:	0800be85 	.word	0x0800be85
 800bec0:	0800be85 	.word	0x0800be85
 800bec4:	0800be85 	.word	0x0800be85
 800bec8:	0800c007 	.word	0x0800c007
 800becc:	0800bf33 	.word	0x0800bf33
 800bed0:	0800bfc1 	.word	0x0800bfc1
 800bed4:	0800be85 	.word	0x0800be85
 800bed8:	0800be85 	.word	0x0800be85
 800bedc:	0800c029 	.word	0x0800c029
 800bee0:	0800be85 	.word	0x0800be85
 800bee4:	0800bf33 	.word	0x0800bf33
 800bee8:	0800be85 	.word	0x0800be85
 800beec:	0800be85 	.word	0x0800be85
 800bef0:	0800bfc9 	.word	0x0800bfc9
 800bef4:	6833      	ldr	r3, [r6, #0]
 800bef6:	1d1a      	adds	r2, r3, #4
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	6032      	str	r2, [r6, #0]
 800befc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bf00:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bf04:	2301      	movs	r3, #1
 800bf06:	e09c      	b.n	800c042 <_printf_i+0x1e6>
 800bf08:	6833      	ldr	r3, [r6, #0]
 800bf0a:	6820      	ldr	r0, [r4, #0]
 800bf0c:	1d19      	adds	r1, r3, #4
 800bf0e:	6031      	str	r1, [r6, #0]
 800bf10:	0606      	lsls	r6, r0, #24
 800bf12:	d501      	bpl.n	800bf18 <_printf_i+0xbc>
 800bf14:	681d      	ldr	r5, [r3, #0]
 800bf16:	e003      	b.n	800bf20 <_printf_i+0xc4>
 800bf18:	0645      	lsls	r5, r0, #25
 800bf1a:	d5fb      	bpl.n	800bf14 <_printf_i+0xb8>
 800bf1c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bf20:	2d00      	cmp	r5, #0
 800bf22:	da03      	bge.n	800bf2c <_printf_i+0xd0>
 800bf24:	232d      	movs	r3, #45	@ 0x2d
 800bf26:	426d      	negs	r5, r5
 800bf28:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bf2c:	4858      	ldr	r0, [pc, #352]	@ (800c090 <_printf_i+0x234>)
 800bf2e:	230a      	movs	r3, #10
 800bf30:	e011      	b.n	800bf56 <_printf_i+0xfa>
 800bf32:	6821      	ldr	r1, [r4, #0]
 800bf34:	6833      	ldr	r3, [r6, #0]
 800bf36:	0608      	lsls	r0, r1, #24
 800bf38:	f853 5b04 	ldr.w	r5, [r3], #4
 800bf3c:	d402      	bmi.n	800bf44 <_printf_i+0xe8>
 800bf3e:	0649      	lsls	r1, r1, #25
 800bf40:	bf48      	it	mi
 800bf42:	b2ad      	uxthmi	r5, r5
 800bf44:	2f6f      	cmp	r7, #111	@ 0x6f
 800bf46:	4852      	ldr	r0, [pc, #328]	@ (800c090 <_printf_i+0x234>)
 800bf48:	6033      	str	r3, [r6, #0]
 800bf4a:	bf14      	ite	ne
 800bf4c:	230a      	movne	r3, #10
 800bf4e:	2308      	moveq	r3, #8
 800bf50:	2100      	movs	r1, #0
 800bf52:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bf56:	6866      	ldr	r6, [r4, #4]
 800bf58:	60a6      	str	r6, [r4, #8]
 800bf5a:	2e00      	cmp	r6, #0
 800bf5c:	db05      	blt.n	800bf6a <_printf_i+0x10e>
 800bf5e:	6821      	ldr	r1, [r4, #0]
 800bf60:	432e      	orrs	r6, r5
 800bf62:	f021 0104 	bic.w	r1, r1, #4
 800bf66:	6021      	str	r1, [r4, #0]
 800bf68:	d04b      	beq.n	800c002 <_printf_i+0x1a6>
 800bf6a:	4616      	mov	r6, r2
 800bf6c:	fbb5 f1f3 	udiv	r1, r5, r3
 800bf70:	fb03 5711 	mls	r7, r3, r1, r5
 800bf74:	5dc7      	ldrb	r7, [r0, r7]
 800bf76:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bf7a:	462f      	mov	r7, r5
 800bf7c:	42bb      	cmp	r3, r7
 800bf7e:	460d      	mov	r5, r1
 800bf80:	d9f4      	bls.n	800bf6c <_printf_i+0x110>
 800bf82:	2b08      	cmp	r3, #8
 800bf84:	d10b      	bne.n	800bf9e <_printf_i+0x142>
 800bf86:	6823      	ldr	r3, [r4, #0]
 800bf88:	07df      	lsls	r7, r3, #31
 800bf8a:	d508      	bpl.n	800bf9e <_printf_i+0x142>
 800bf8c:	6923      	ldr	r3, [r4, #16]
 800bf8e:	6861      	ldr	r1, [r4, #4]
 800bf90:	4299      	cmp	r1, r3
 800bf92:	bfde      	ittt	le
 800bf94:	2330      	movle	r3, #48	@ 0x30
 800bf96:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bf9a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bf9e:	1b92      	subs	r2, r2, r6
 800bfa0:	6122      	str	r2, [r4, #16]
 800bfa2:	f8cd a000 	str.w	sl, [sp]
 800bfa6:	464b      	mov	r3, r9
 800bfa8:	aa03      	add	r2, sp, #12
 800bfaa:	4621      	mov	r1, r4
 800bfac:	4640      	mov	r0, r8
 800bfae:	f7ff fee7 	bl	800bd80 <_printf_common>
 800bfb2:	3001      	adds	r0, #1
 800bfb4:	d14a      	bne.n	800c04c <_printf_i+0x1f0>
 800bfb6:	f04f 30ff 	mov.w	r0, #4294967295
 800bfba:	b004      	add	sp, #16
 800bfbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bfc0:	6823      	ldr	r3, [r4, #0]
 800bfc2:	f043 0320 	orr.w	r3, r3, #32
 800bfc6:	6023      	str	r3, [r4, #0]
 800bfc8:	4832      	ldr	r0, [pc, #200]	@ (800c094 <_printf_i+0x238>)
 800bfca:	2778      	movs	r7, #120	@ 0x78
 800bfcc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bfd0:	6823      	ldr	r3, [r4, #0]
 800bfd2:	6831      	ldr	r1, [r6, #0]
 800bfd4:	061f      	lsls	r7, r3, #24
 800bfd6:	f851 5b04 	ldr.w	r5, [r1], #4
 800bfda:	d402      	bmi.n	800bfe2 <_printf_i+0x186>
 800bfdc:	065f      	lsls	r7, r3, #25
 800bfde:	bf48      	it	mi
 800bfe0:	b2ad      	uxthmi	r5, r5
 800bfe2:	6031      	str	r1, [r6, #0]
 800bfe4:	07d9      	lsls	r1, r3, #31
 800bfe6:	bf44      	itt	mi
 800bfe8:	f043 0320 	orrmi.w	r3, r3, #32
 800bfec:	6023      	strmi	r3, [r4, #0]
 800bfee:	b11d      	cbz	r5, 800bff8 <_printf_i+0x19c>
 800bff0:	2310      	movs	r3, #16
 800bff2:	e7ad      	b.n	800bf50 <_printf_i+0xf4>
 800bff4:	4826      	ldr	r0, [pc, #152]	@ (800c090 <_printf_i+0x234>)
 800bff6:	e7e9      	b.n	800bfcc <_printf_i+0x170>
 800bff8:	6823      	ldr	r3, [r4, #0]
 800bffa:	f023 0320 	bic.w	r3, r3, #32
 800bffe:	6023      	str	r3, [r4, #0]
 800c000:	e7f6      	b.n	800bff0 <_printf_i+0x194>
 800c002:	4616      	mov	r6, r2
 800c004:	e7bd      	b.n	800bf82 <_printf_i+0x126>
 800c006:	6833      	ldr	r3, [r6, #0]
 800c008:	6825      	ldr	r5, [r4, #0]
 800c00a:	6961      	ldr	r1, [r4, #20]
 800c00c:	1d18      	adds	r0, r3, #4
 800c00e:	6030      	str	r0, [r6, #0]
 800c010:	062e      	lsls	r6, r5, #24
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	d501      	bpl.n	800c01a <_printf_i+0x1be>
 800c016:	6019      	str	r1, [r3, #0]
 800c018:	e002      	b.n	800c020 <_printf_i+0x1c4>
 800c01a:	0668      	lsls	r0, r5, #25
 800c01c:	d5fb      	bpl.n	800c016 <_printf_i+0x1ba>
 800c01e:	8019      	strh	r1, [r3, #0]
 800c020:	2300      	movs	r3, #0
 800c022:	6123      	str	r3, [r4, #16]
 800c024:	4616      	mov	r6, r2
 800c026:	e7bc      	b.n	800bfa2 <_printf_i+0x146>
 800c028:	6833      	ldr	r3, [r6, #0]
 800c02a:	1d1a      	adds	r2, r3, #4
 800c02c:	6032      	str	r2, [r6, #0]
 800c02e:	681e      	ldr	r6, [r3, #0]
 800c030:	6862      	ldr	r2, [r4, #4]
 800c032:	2100      	movs	r1, #0
 800c034:	4630      	mov	r0, r6
 800c036:	f7f4 f8e3 	bl	8000200 <memchr>
 800c03a:	b108      	cbz	r0, 800c040 <_printf_i+0x1e4>
 800c03c:	1b80      	subs	r0, r0, r6
 800c03e:	6060      	str	r0, [r4, #4]
 800c040:	6863      	ldr	r3, [r4, #4]
 800c042:	6123      	str	r3, [r4, #16]
 800c044:	2300      	movs	r3, #0
 800c046:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c04a:	e7aa      	b.n	800bfa2 <_printf_i+0x146>
 800c04c:	6923      	ldr	r3, [r4, #16]
 800c04e:	4632      	mov	r2, r6
 800c050:	4649      	mov	r1, r9
 800c052:	4640      	mov	r0, r8
 800c054:	47d0      	blx	sl
 800c056:	3001      	adds	r0, #1
 800c058:	d0ad      	beq.n	800bfb6 <_printf_i+0x15a>
 800c05a:	6823      	ldr	r3, [r4, #0]
 800c05c:	079b      	lsls	r3, r3, #30
 800c05e:	d413      	bmi.n	800c088 <_printf_i+0x22c>
 800c060:	68e0      	ldr	r0, [r4, #12]
 800c062:	9b03      	ldr	r3, [sp, #12]
 800c064:	4298      	cmp	r0, r3
 800c066:	bfb8      	it	lt
 800c068:	4618      	movlt	r0, r3
 800c06a:	e7a6      	b.n	800bfba <_printf_i+0x15e>
 800c06c:	2301      	movs	r3, #1
 800c06e:	4632      	mov	r2, r6
 800c070:	4649      	mov	r1, r9
 800c072:	4640      	mov	r0, r8
 800c074:	47d0      	blx	sl
 800c076:	3001      	adds	r0, #1
 800c078:	d09d      	beq.n	800bfb6 <_printf_i+0x15a>
 800c07a:	3501      	adds	r5, #1
 800c07c:	68e3      	ldr	r3, [r4, #12]
 800c07e:	9903      	ldr	r1, [sp, #12]
 800c080:	1a5b      	subs	r3, r3, r1
 800c082:	42ab      	cmp	r3, r5
 800c084:	dcf2      	bgt.n	800c06c <_printf_i+0x210>
 800c086:	e7eb      	b.n	800c060 <_printf_i+0x204>
 800c088:	2500      	movs	r5, #0
 800c08a:	f104 0619 	add.w	r6, r4, #25
 800c08e:	e7f5      	b.n	800c07c <_printf_i+0x220>
 800c090:	0800c1d9 	.word	0x0800c1d9
 800c094:	0800c1ea 	.word	0x0800c1ea

0800c098 <memmove>:
 800c098:	4288      	cmp	r0, r1
 800c09a:	b510      	push	{r4, lr}
 800c09c:	eb01 0402 	add.w	r4, r1, r2
 800c0a0:	d902      	bls.n	800c0a8 <memmove+0x10>
 800c0a2:	4284      	cmp	r4, r0
 800c0a4:	4623      	mov	r3, r4
 800c0a6:	d807      	bhi.n	800c0b8 <memmove+0x20>
 800c0a8:	1e43      	subs	r3, r0, #1
 800c0aa:	42a1      	cmp	r1, r4
 800c0ac:	d008      	beq.n	800c0c0 <memmove+0x28>
 800c0ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c0b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c0b6:	e7f8      	b.n	800c0aa <memmove+0x12>
 800c0b8:	4402      	add	r2, r0
 800c0ba:	4601      	mov	r1, r0
 800c0bc:	428a      	cmp	r2, r1
 800c0be:	d100      	bne.n	800c0c2 <memmove+0x2a>
 800c0c0:	bd10      	pop	{r4, pc}
 800c0c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c0c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c0ca:	e7f7      	b.n	800c0bc <memmove+0x24>

0800c0cc <memcpy>:
 800c0cc:	440a      	add	r2, r1
 800c0ce:	4291      	cmp	r1, r2
 800c0d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0d4:	d100      	bne.n	800c0d8 <memcpy+0xc>
 800c0d6:	4770      	bx	lr
 800c0d8:	b510      	push	{r4, lr}
 800c0da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0e2:	4291      	cmp	r1, r2
 800c0e4:	d1f9      	bne.n	800c0da <memcpy+0xe>
 800c0e6:	bd10      	pop	{r4, pc}

0800c0e8 <_realloc_r>:
 800c0e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c0ec:	4607      	mov	r7, r0
 800c0ee:	4614      	mov	r4, r2
 800c0f0:	460d      	mov	r5, r1
 800c0f2:	b921      	cbnz	r1, 800c0fe <_realloc_r+0x16>
 800c0f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c0f8:	4611      	mov	r1, r2
 800c0fa:	f7ff bb99 	b.w	800b830 <_malloc_r>
 800c0fe:	b92a      	cbnz	r2, 800c10c <_realloc_r+0x24>
 800c100:	f7ff fc9c 	bl	800ba3c <_free_r>
 800c104:	4625      	mov	r5, r4
 800c106:	4628      	mov	r0, r5
 800c108:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c10c:	f000 f81a 	bl	800c144 <_malloc_usable_size_r>
 800c110:	4284      	cmp	r4, r0
 800c112:	4606      	mov	r6, r0
 800c114:	d802      	bhi.n	800c11c <_realloc_r+0x34>
 800c116:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c11a:	d8f4      	bhi.n	800c106 <_realloc_r+0x1e>
 800c11c:	4621      	mov	r1, r4
 800c11e:	4638      	mov	r0, r7
 800c120:	f7ff fb86 	bl	800b830 <_malloc_r>
 800c124:	4680      	mov	r8, r0
 800c126:	b908      	cbnz	r0, 800c12c <_realloc_r+0x44>
 800c128:	4645      	mov	r5, r8
 800c12a:	e7ec      	b.n	800c106 <_realloc_r+0x1e>
 800c12c:	42b4      	cmp	r4, r6
 800c12e:	4622      	mov	r2, r4
 800c130:	4629      	mov	r1, r5
 800c132:	bf28      	it	cs
 800c134:	4632      	movcs	r2, r6
 800c136:	f7ff ffc9 	bl	800c0cc <memcpy>
 800c13a:	4629      	mov	r1, r5
 800c13c:	4638      	mov	r0, r7
 800c13e:	f7ff fc7d 	bl	800ba3c <_free_r>
 800c142:	e7f1      	b.n	800c128 <_realloc_r+0x40>

0800c144 <_malloc_usable_size_r>:
 800c144:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c148:	1f18      	subs	r0, r3, #4
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	bfbc      	itt	lt
 800c14e:	580b      	ldrlt	r3, [r1, r0]
 800c150:	18c0      	addlt	r0, r0, r3
 800c152:	4770      	bx	lr

0800c154 <_init>:
 800c154:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c156:	bf00      	nop
 800c158:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c15a:	bc08      	pop	{r3}
 800c15c:	469e      	mov	lr, r3
 800c15e:	4770      	bx	lr

0800c160 <_fini>:
 800c160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c162:	bf00      	nop
 800c164:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c166:	bc08      	pop	{r3}
 800c168:	469e      	mov	lr, r3
 800c16a:	4770      	bx	lr
