
data-over-plant.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a680  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  0800a82c  0800a82c  0000b82c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a848  0800a848  0000c07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a848  0800a848  0000b848  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a850  0800a850  0000c07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a850  0800a850  0000b850  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a854  0800a854  0000b854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800a858  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c07c  2**0
                  CONTENTS
 10 .bss          00000bd4  2000007c  2000007c  0000c07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000c50  20000c50  0000c07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00022289  00000000  00000000  0000c0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004a54  00000000  00000000  0002e335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ca8  00000000  00000000  00032d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001640  00000000  00000000  00034a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00029012  00000000  00000000  00036078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024690  00000000  00000000  0005f08a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec145  00000000  00000000  0008371a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016f85f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007df0  00000000  00000000  0016f8a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  00177694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000007c 	.word	0x2000007c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800a814 	.word	0x0800a814

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000080 	.word	0x20000080
 80001e8:	0800a814 	.word	0x0800a814

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051c:	f001 f85e 	bl	80015dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000520:	f000 f824 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000524:	f000 fa92 	bl	8000a4c <MX_GPIO_Init>
  MX_CRC_Init();
 8000528:	f000 f88a 	bl	8000640 <MX_CRC_Init>
  MX_DMA2D_Init();
 800052c:	f000 f89c 	bl	8000668 <MX_DMA2D_Init>
  MX_FMC_Init();
 8000530:	f000 fa3c 	bl	80009ac <MX_FMC_Init>
  MX_I2C3_Init();
 8000534:	f000 f8ca 	bl	80006cc <MX_I2C3_Init>
  MX_LTDC_Init();
 8000538:	f000 f908 	bl	800074c <MX_LTDC_Init>
  MX_SPI5_Init();
 800053c:	f000 f986 	bl	800084c <MX_SPI5_Init>
  MX_TIM1_Init();
 8000540:	f000 f9ba 	bl	80008b8 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000544:	f000 fa08 	bl	8000958 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 8000548:	f009 fd08 	bl	8009f5c <MX_USB_HOST_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800054c:	f009 fd2c 	bl	8009fa8 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8000550:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000554:	4804      	ldr	r0, [pc, #16]	@ (8000568 <main+0x50>)
 8000556:	f001 fd56 	bl	8002006 <HAL_GPIO_TogglePin>
    HAL_Delay(1000); // Delay for 1 second
 800055a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800055e:	f001 f87f 	bl	8001660 <HAL_Delay>
    MX_USB_HOST_Process();
 8000562:	bf00      	nop
 8000564:	e7f2      	b.n	800054c <main+0x34>
 8000566:	bf00      	nop
 8000568:	40021800 	.word	0x40021800

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	@ 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	2230      	movs	r2, #48	@ 0x30
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f00a f8bc 	bl	800a6f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	4b28      	ldr	r3, [pc, #160]	@ (8000638 <SystemClock_Config+0xcc>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000598:	4a27      	ldr	r2, [pc, #156]	@ (8000638 <SystemClock_Config+0xcc>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	@ 0x40
 80005a0:	4b25      	ldr	r3, [pc, #148]	@ (8000638 <SystemClock_Config+0xcc>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	4b22      	ldr	r3, [pc, #136]	@ (800063c <SystemClock_Config+0xd0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80005b8:	4a20      	ldr	r2, [pc, #128]	@ (800063c <SystemClock_Config+0xd0>)
 80005ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005be:	6013      	str	r3, [r2, #0]
 80005c0:	4b1e      	ldr	r3, [pc, #120]	@ (800063c <SystemClock_Config+0xd0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005c8:	607b      	str	r3, [r7, #4]
 80005ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005cc:	2301      	movs	r3, #1
 80005ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d6:	2302      	movs	r3, #2
 80005d8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005da:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005e0:	2304      	movs	r3, #4
 80005e2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005e4:	2348      	movs	r3, #72	@ 0x48
 80005e6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e8:	2302      	movs	r3, #2
 80005ea:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005ec:	2303      	movs	r3, #3
 80005ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f0:	f107 0320 	add.w	r3, r7, #32
 80005f4:	4618      	mov	r0, r3
 80005f6:	f004 fb7d 	bl	8004cf4 <HAL_RCC_OscConfig>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d001      	beq.n	8000604 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000600:	f000 fb46 	bl	8000c90 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000604:	230f      	movs	r3, #15
 8000606:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000608:	2302      	movs	r3, #2
 800060a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060c:	2300      	movs	r3, #0
 800060e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000610:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000614:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	2102      	movs	r1, #2
 8000620:	4618      	mov	r0, r3
 8000622:	f004 fddf 	bl	80051e4 <HAL_RCC_ClockConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800062c:	f000 fb30 	bl	8000c90 <Error_Handler>
  }
}
 8000630:	bf00      	nop
 8000632:	3750      	adds	r7, #80	@ 0x50
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40023800 	.word	0x40023800
 800063c:	40007000 	.word	0x40007000

08000640 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000644:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <MX_CRC_Init+0x20>)
 8000646:	4a07      	ldr	r2, [pc, #28]	@ (8000664 <MX_CRC_Init+0x24>)
 8000648:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 800064a:	4805      	ldr	r0, [pc, #20]	@ (8000660 <MX_CRC_Init+0x20>)
 800064c:	f001 f90e 	bl	800186c <HAL_CRC_Init>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000656:	f000 fb1b 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000098 	.word	0x20000098
 8000664:	40023000 	.word	0x40023000

08000668 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 800066c:	4b15      	ldr	r3, [pc, #84]	@ (80006c4 <MX_DMA2D_Init+0x5c>)
 800066e:	4a16      	ldr	r2, [pc, #88]	@ (80006c8 <MX_DMA2D_Init+0x60>)
 8000670:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000672:	4b14      	ldr	r3, [pc, #80]	@ (80006c4 <MX_DMA2D_Init+0x5c>)
 8000674:	2200      	movs	r2, #0
 8000676:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000678:	4b12      	ldr	r3, [pc, #72]	@ (80006c4 <MX_DMA2D_Init+0x5c>)
 800067a:	2200      	movs	r2, #0
 800067c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800067e:	4b11      	ldr	r3, [pc, #68]	@ (80006c4 <MX_DMA2D_Init+0x5c>)
 8000680:	2200      	movs	r2, #0
 8000682:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000684:	4b0f      	ldr	r3, [pc, #60]	@ (80006c4 <MX_DMA2D_Init+0x5c>)
 8000686:	2200      	movs	r2, #0
 8000688:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800068a:	4b0e      	ldr	r3, [pc, #56]	@ (80006c4 <MX_DMA2D_Init+0x5c>)
 800068c:	2200      	movs	r2, #0
 800068e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000690:	4b0c      	ldr	r3, [pc, #48]	@ (80006c4 <MX_DMA2D_Init+0x5c>)
 8000692:	2200      	movs	r2, #0
 8000694:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000696:	4b0b      	ldr	r3, [pc, #44]	@ (80006c4 <MX_DMA2D_Init+0x5c>)
 8000698:	2200      	movs	r2, #0
 800069a:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800069c:	4809      	ldr	r0, [pc, #36]	@ (80006c4 <MX_DMA2D_Init+0x5c>)
 800069e:	f001 f901 	bl	80018a4 <HAL_DMA2D_Init>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d001      	beq.n	80006ac <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80006a8:	f000 faf2 	bl	8000c90 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80006ac:	2101      	movs	r1, #1
 80006ae:	4805      	ldr	r0, [pc, #20]	@ (80006c4 <MX_DMA2D_Init+0x5c>)
 80006b0:	f001 fa52 	bl	8001b58 <HAL_DMA2D_ConfigLayer>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80006ba:	f000 fae9 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80006be:	bf00      	nop
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	bf00      	nop
 80006c4:	200000a0 	.word	0x200000a0
 80006c8:	4002b000 	.word	0x4002b000

080006cc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80006d0:	4b1b      	ldr	r3, [pc, #108]	@ (8000740 <MX_I2C3_Init+0x74>)
 80006d2:	4a1c      	ldr	r2, [pc, #112]	@ (8000744 <MX_I2C3_Init+0x78>)
 80006d4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80006d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000740 <MX_I2C3_Init+0x74>)
 80006d8:	4a1b      	ldr	r2, [pc, #108]	@ (8000748 <MX_I2C3_Init+0x7c>)
 80006da:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006dc:	4b18      	ldr	r3, [pc, #96]	@ (8000740 <MX_I2C3_Init+0x74>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80006e2:	4b17      	ldr	r3, [pc, #92]	@ (8000740 <MX_I2C3_Init+0x74>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006e8:	4b15      	ldr	r3, [pc, #84]	@ (8000740 <MX_I2C3_Init+0x74>)
 80006ea:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006ee:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006f0:	4b13      	ldr	r3, [pc, #76]	@ (8000740 <MX_I2C3_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80006f6:	4b12      	ldr	r3, [pc, #72]	@ (8000740 <MX_I2C3_Init+0x74>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006fc:	4b10      	ldr	r3, [pc, #64]	@ (8000740 <MX_I2C3_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000702:	4b0f      	ldr	r3, [pc, #60]	@ (8000740 <MX_I2C3_Init+0x74>)
 8000704:	2200      	movs	r2, #0
 8000706:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000708:	480d      	ldr	r0, [pc, #52]	@ (8000740 <MX_I2C3_Init+0x74>)
 800070a:	f003 fdcb 	bl	80042a4 <HAL_I2C_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000714:	f000 fabc 	bl	8000c90 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000718:	2100      	movs	r1, #0
 800071a:	4809      	ldr	r0, [pc, #36]	@ (8000740 <MX_I2C3_Init+0x74>)
 800071c:	f003 ff06 	bl	800452c <HAL_I2CEx_ConfigAnalogFilter>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000726:	f000 fab3 	bl	8000c90 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800072a:	2100      	movs	r1, #0
 800072c:	4804      	ldr	r0, [pc, #16]	@ (8000740 <MX_I2C3_Init+0x74>)
 800072e:	f003 ff39 	bl	80045a4 <HAL_I2CEx_ConfigDigitalFilter>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000738:	f000 faaa 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}
 8000740:	200000e0 	.word	0x200000e0
 8000744:	40005c00 	.word	0x40005c00
 8000748:	000186a0 	.word	0x000186a0

0800074c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08e      	sub	sp, #56	@ 0x38
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000752:	1d3b      	adds	r3, r7, #4
 8000754:	2234      	movs	r2, #52	@ 0x34
 8000756:	2100      	movs	r1, #0
 8000758:	4618      	mov	r0, r3
 800075a:	f009 ffcd 	bl	800a6f8 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800075e:	4b39      	ldr	r3, [pc, #228]	@ (8000844 <MX_LTDC_Init+0xf8>)
 8000760:	4a39      	ldr	r2, [pc, #228]	@ (8000848 <MX_LTDC_Init+0xfc>)
 8000762:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000764:	4b37      	ldr	r3, [pc, #220]	@ (8000844 <MX_LTDC_Init+0xf8>)
 8000766:	2200      	movs	r2, #0
 8000768:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800076a:	4b36      	ldr	r3, [pc, #216]	@ (8000844 <MX_LTDC_Init+0xf8>)
 800076c:	2200      	movs	r2, #0
 800076e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000770:	4b34      	ldr	r3, [pc, #208]	@ (8000844 <MX_LTDC_Init+0xf8>)
 8000772:	2200      	movs	r2, #0
 8000774:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000776:	4b33      	ldr	r3, [pc, #204]	@ (8000844 <MX_LTDC_Init+0xf8>)
 8000778:	2200      	movs	r2, #0
 800077a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 800077c:	4b31      	ldr	r3, [pc, #196]	@ (8000844 <MX_LTDC_Init+0xf8>)
 800077e:	2209      	movs	r2, #9
 8000780:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 8000782:	4b30      	ldr	r3, [pc, #192]	@ (8000844 <MX_LTDC_Init+0xf8>)
 8000784:	2201      	movs	r2, #1
 8000786:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000788:	4b2e      	ldr	r3, [pc, #184]	@ (8000844 <MX_LTDC_Init+0xf8>)
 800078a:	221d      	movs	r2, #29
 800078c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 800078e:	4b2d      	ldr	r3, [pc, #180]	@ (8000844 <MX_LTDC_Init+0xf8>)
 8000790:	2203      	movs	r2, #3
 8000792:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8000794:	4b2b      	ldr	r3, [pc, #172]	@ (8000844 <MX_LTDC_Init+0xf8>)
 8000796:	f240 120d 	movw	r2, #269	@ 0x10d
 800079a:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 800079c:	4b29      	ldr	r3, [pc, #164]	@ (8000844 <MX_LTDC_Init+0xf8>)
 800079e:	f240 1243 	movw	r2, #323	@ 0x143
 80007a2:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 80007a4:	4b27      	ldr	r3, [pc, #156]	@ (8000844 <MX_LTDC_Init+0xf8>)
 80007a6:	f240 1217 	movw	r2, #279	@ 0x117
 80007aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 80007ac:	4b25      	ldr	r3, [pc, #148]	@ (8000844 <MX_LTDC_Init+0xf8>)
 80007ae:	f240 1247 	movw	r2, #327	@ 0x147
 80007b2:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80007b4:	4b23      	ldr	r3, [pc, #140]	@ (8000844 <MX_LTDC_Init+0xf8>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80007bc:	4b21      	ldr	r3, [pc, #132]	@ (8000844 <MX_LTDC_Init+0xf8>)
 80007be:	2200      	movs	r2, #0
 80007c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80007c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000844 <MX_LTDC_Init+0xf8>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80007cc:	481d      	ldr	r0, [pc, #116]	@ (8000844 <MX_LTDC_Init+0xf8>)
 80007ce:	f003 ff29 	bl	8004624 <HAL_LTDC_Init>
 80007d2:	4603      	mov	r3, r0
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80007d8:	f000 fa5a 	bl	8000c90 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80007e0:	23f0      	movs	r3, #240	@ 0xf0
 80007e2:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80007e8:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80007ec:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80007ee:	2302      	movs	r3, #2
 80007f0:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80007f2:	23ff      	movs	r3, #255	@ 0xff
 80007f4:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80007fa:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80007fe:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000800:	2307      	movs	r3, #7
 8000802:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000804:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000808:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 800080a:	23f0      	movs	r3, #240	@ 0xf0
 800080c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 800080e:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000812:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000814:	2300      	movs	r3, #0
 8000816:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 800081a:	2300      	movs	r3, #0
 800081c:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 8000820:	2300      	movs	r3, #0
 8000822:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000826:	1d3b      	adds	r3, r7, #4
 8000828:	2200      	movs	r2, #0
 800082a:	4619      	mov	r1, r3
 800082c:	4805      	ldr	r0, [pc, #20]	@ (8000844 <MX_LTDC_Init+0xf8>)
 800082e:	f004 f88b 	bl	8004948 <HAL_LTDC_ConfigLayer>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000838:	f000 fa2a 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800083c:	bf00      	nop
 800083e:	3738      	adds	r7, #56	@ 0x38
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000134 	.word	0x20000134
 8000848:	40016800 	.word	0x40016800

0800084c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000850:	4b17      	ldr	r3, [pc, #92]	@ (80008b0 <MX_SPI5_Init+0x64>)
 8000852:	4a18      	ldr	r2, [pc, #96]	@ (80008b4 <MX_SPI5_Init+0x68>)
 8000854:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000856:	4b16      	ldr	r3, [pc, #88]	@ (80008b0 <MX_SPI5_Init+0x64>)
 8000858:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800085c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800085e:	4b14      	ldr	r3, [pc, #80]	@ (80008b0 <MX_SPI5_Init+0x64>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000864:	4b12      	ldr	r3, [pc, #72]	@ (80008b0 <MX_SPI5_Init+0x64>)
 8000866:	2200      	movs	r2, #0
 8000868:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800086a:	4b11      	ldr	r3, [pc, #68]	@ (80008b0 <MX_SPI5_Init+0x64>)
 800086c:	2200      	movs	r2, #0
 800086e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000870:	4b0f      	ldr	r3, [pc, #60]	@ (80008b0 <MX_SPI5_Init+0x64>)
 8000872:	2200      	movs	r2, #0
 8000874:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000876:	4b0e      	ldr	r3, [pc, #56]	@ (80008b0 <MX_SPI5_Init+0x64>)
 8000878:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800087c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800087e:	4b0c      	ldr	r3, [pc, #48]	@ (80008b0 <MX_SPI5_Init+0x64>)
 8000880:	2218      	movs	r2, #24
 8000882:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000884:	4b0a      	ldr	r3, [pc, #40]	@ (80008b0 <MX_SPI5_Init+0x64>)
 8000886:	2200      	movs	r2, #0
 8000888:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800088a:	4b09      	ldr	r3, [pc, #36]	@ (80008b0 <MX_SPI5_Init+0x64>)
 800088c:	2200      	movs	r2, #0
 800088e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000890:	4b07      	ldr	r3, [pc, #28]	@ (80008b0 <MX_SPI5_Init+0x64>)
 8000892:	2200      	movs	r2, #0
 8000894:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000896:	4b06      	ldr	r3, [pc, #24]	@ (80008b0 <MX_SPI5_Init+0x64>)
 8000898:	220a      	movs	r2, #10
 800089a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800089c:	4804      	ldr	r0, [pc, #16]	@ (80008b0 <MX_SPI5_Init+0x64>)
 800089e:	f005 f8e7 	bl	8005a70 <HAL_SPI_Init>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d001      	beq.n	80008ac <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80008a8:	f000 f9f2 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80008ac:	bf00      	nop
 80008ae:	bd80      	pop	{r7, pc}
 80008b0:	200001dc 	.word	0x200001dc
 80008b4:	40015000 	.word	0x40015000

080008b8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008cc:	463b      	mov	r3, r7
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008d4:	4b1e      	ldr	r3, [pc, #120]	@ (8000950 <MX_TIM1_Init+0x98>)
 80008d6:	4a1f      	ldr	r2, [pc, #124]	@ (8000954 <MX_TIM1_Init+0x9c>)
 80008d8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008da:	4b1d      	ldr	r3, [pc, #116]	@ (8000950 <MX_TIM1_Init+0x98>)
 80008dc:	2200      	movs	r2, #0
 80008de:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008e0:	4b1b      	ldr	r3, [pc, #108]	@ (8000950 <MX_TIM1_Init+0x98>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80008e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000950 <MX_TIM1_Init+0x98>)
 80008e8:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008ec:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ee:	4b18      	ldr	r3, [pc, #96]	@ (8000950 <MX_TIM1_Init+0x98>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80008f4:	4b16      	ldr	r3, [pc, #88]	@ (8000950 <MX_TIM1_Init+0x98>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008fa:	4b15      	ldr	r3, [pc, #84]	@ (8000950 <MX_TIM1_Init+0x98>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000900:	4813      	ldr	r0, [pc, #76]	@ (8000950 <MX_TIM1_Init+0x98>)
 8000902:	f005 f93e 	bl	8005b82 <HAL_TIM_Base_Init>
 8000906:	4603      	mov	r3, r0
 8000908:	2b00      	cmp	r3, #0
 800090a:	d001      	beq.n	8000910 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 800090c:	f000 f9c0 	bl	8000c90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000910:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000914:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000916:	f107 0308 	add.w	r3, r7, #8
 800091a:	4619      	mov	r1, r3
 800091c:	480c      	ldr	r0, [pc, #48]	@ (8000950 <MX_TIM1_Init+0x98>)
 800091e:	f005 fadf 	bl	8005ee0 <HAL_TIM_ConfigClockSource>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000928:	f000 f9b2 	bl	8000c90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800092c:	2300      	movs	r3, #0
 800092e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000930:	2300      	movs	r3, #0
 8000932:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000934:	463b      	mov	r3, r7
 8000936:	4619      	mov	r1, r3
 8000938:	4805      	ldr	r0, [pc, #20]	@ (8000950 <MX_TIM1_Init+0x98>)
 800093a:	f005 fd07 	bl	800634c <HAL_TIMEx_MasterConfigSynchronization>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000944:	f000 f9a4 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000948:	bf00      	nop
 800094a:	3718      	adds	r7, #24
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	20000234 	.word	0x20000234
 8000954:	40010000 	.word	0x40010000

08000958 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800095c:	4b11      	ldr	r3, [pc, #68]	@ (80009a4 <MX_USART1_UART_Init+0x4c>)
 800095e:	4a12      	ldr	r2, [pc, #72]	@ (80009a8 <MX_USART1_UART_Init+0x50>)
 8000960:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000962:	4b10      	ldr	r3, [pc, #64]	@ (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000964:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000968:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800096a:	4b0e      	ldr	r3, [pc, #56]	@ (80009a4 <MX_USART1_UART_Init+0x4c>)
 800096c:	2200      	movs	r2, #0
 800096e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000970:	4b0c      	ldr	r3, [pc, #48]	@ (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000972:	2200      	movs	r2, #0
 8000974:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000976:	4b0b      	ldr	r3, [pc, #44]	@ (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000978:	2200      	movs	r2, #0
 800097a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800097c:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <MX_USART1_UART_Init+0x4c>)
 800097e:	220c      	movs	r2, #12
 8000980:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000982:	4b08      	ldr	r3, [pc, #32]	@ (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000984:	2200      	movs	r2, #0
 8000986:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000988:	4b06      	ldr	r3, [pc, #24]	@ (80009a4 <MX_USART1_UART_Init+0x4c>)
 800098a:	2200      	movs	r2, #0
 800098c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800098e:	4805      	ldr	r0, [pc, #20]	@ (80009a4 <MX_USART1_UART_Init+0x4c>)
 8000990:	f005 fd6c 	bl	800646c <HAL_UART_Init>
 8000994:	4603      	mov	r3, r0
 8000996:	2b00      	cmp	r3, #0
 8000998:	d001      	beq.n	800099e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800099a:	f000 f979 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800099e:	bf00      	nop
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	2000027c 	.word	0x2000027c
 80009a8:	40011000 	.word	0x40011000

080009ac <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b088      	sub	sp, #32
 80009b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
 80009c0:	615a      	str	r2, [r3, #20]
 80009c2:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80009c4:	4b1f      	ldr	r3, [pc, #124]	@ (8000a44 <MX_FMC_Init+0x98>)
 80009c6:	4a20      	ldr	r2, [pc, #128]	@ (8000a48 <MX_FMC_Init+0x9c>)
 80009c8:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80009ca:	4b1e      	ldr	r3, [pc, #120]	@ (8000a44 <MX_FMC_Init+0x98>)
 80009cc:	2201      	movs	r2, #1
 80009ce:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80009d0:	4b1c      	ldr	r3, [pc, #112]	@ (8000a44 <MX_FMC_Init+0x98>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80009d6:	4b1b      	ldr	r3, [pc, #108]	@ (8000a44 <MX_FMC_Init+0x98>)
 80009d8:	2204      	movs	r2, #4
 80009da:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 80009dc:	4b19      	ldr	r3, [pc, #100]	@ (8000a44 <MX_FMC_Init+0x98>)
 80009de:	2210      	movs	r2, #16
 80009e0:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80009e2:	4b18      	ldr	r3, [pc, #96]	@ (8000a44 <MX_FMC_Init+0x98>)
 80009e4:	2240      	movs	r2, #64	@ 0x40
 80009e6:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80009e8:	4b16      	ldr	r3, [pc, #88]	@ (8000a44 <MX_FMC_Init+0x98>)
 80009ea:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 80009ee:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80009f0:	4b14      	ldr	r3, [pc, #80]	@ (8000a44 <MX_FMC_Init+0x98>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80009f6:	4b13      	ldr	r3, [pc, #76]	@ (8000a44 <MX_FMC_Init+0x98>)
 80009f8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80009fc:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80009fe:	4b11      	ldr	r3, [pc, #68]	@ (8000a44 <MX_FMC_Init+0x98>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	@ (8000a44 <MX_FMC_Init+0x98>)
 8000a06:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a0a:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000a10:	2307      	movs	r3, #7
 8000a12:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000a14:	2304      	movs	r3, #4
 8000a16:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000a18:	2307      	movs	r3, #7
 8000a1a:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000a20:	2302      	movs	r3, #2
 8000a22:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000a24:	2302      	movs	r3, #2
 8000a26:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4805      	ldr	r0, [pc, #20]	@ (8000a44 <MX_FMC_Init+0x98>)
 8000a2e:	f004 ffeb 	bl	8005a08 <HAL_SDRAM_Init>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000a38:	f000 f92a 	bl	8000c90 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000a3c:	bf00      	nop
 8000a3e:	3720      	adds	r7, #32
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	200002c4 	.word	0x200002c4
 8000a48:	a0000140 	.word	0xa0000140

08000a4c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08e      	sub	sp, #56	@ 0x38
 8000a50:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a56:	2200      	movs	r2, #0
 8000a58:	601a      	str	r2, [r3, #0]
 8000a5a:	605a      	str	r2, [r3, #4]
 8000a5c:	609a      	str	r2, [r3, #8]
 8000a5e:	60da      	str	r2, [r3, #12]
 8000a60:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a62:	2300      	movs	r3, #0
 8000a64:	623b      	str	r3, [r7, #32]
 8000a66:	4b7b      	ldr	r3, [pc, #492]	@ (8000c54 <MX_GPIO_Init+0x208>)
 8000a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a6a:	4a7a      	ldr	r2, [pc, #488]	@ (8000c54 <MX_GPIO_Init+0x208>)
 8000a6c:	f043 0304 	orr.w	r3, r3, #4
 8000a70:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a72:	4b78      	ldr	r3, [pc, #480]	@ (8000c54 <MX_GPIO_Init+0x208>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a76:	f003 0304 	and.w	r3, r3, #4
 8000a7a:	623b      	str	r3, [r7, #32]
 8000a7c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61fb      	str	r3, [r7, #28]
 8000a82:	4b74      	ldr	r3, [pc, #464]	@ (8000c54 <MX_GPIO_Init+0x208>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	4a73      	ldr	r2, [pc, #460]	@ (8000c54 <MX_GPIO_Init+0x208>)
 8000a88:	f043 0320 	orr.w	r3, r3, #32
 8000a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8e:	4b71      	ldr	r3, [pc, #452]	@ (8000c54 <MX_GPIO_Init+0x208>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	f003 0320 	and.w	r3, r3, #32
 8000a96:	61fb      	str	r3, [r7, #28]
 8000a98:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61bb      	str	r3, [r7, #24]
 8000a9e:	4b6d      	ldr	r3, [pc, #436]	@ (8000c54 <MX_GPIO_Init+0x208>)
 8000aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa2:	4a6c      	ldr	r2, [pc, #432]	@ (8000c54 <MX_GPIO_Init+0x208>)
 8000aa4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aaa:	4b6a      	ldr	r3, [pc, #424]	@ (8000c54 <MX_GPIO_Init+0x208>)
 8000aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ab2:	61bb      	str	r3, [r7, #24]
 8000ab4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	617b      	str	r3, [r7, #20]
 8000aba:	4b66      	ldr	r3, [pc, #408]	@ (8000c54 <MX_GPIO_Init+0x208>)
 8000abc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000abe:	4a65      	ldr	r2, [pc, #404]	@ (8000c54 <MX_GPIO_Init+0x208>)
 8000ac0:	f043 0301 	orr.w	r3, r3, #1
 8000ac4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ac6:	4b63      	ldr	r3, [pc, #396]	@ (8000c54 <MX_GPIO_Init+0x208>)
 8000ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aca:	f003 0301 	and.w	r3, r3, #1
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
 8000ad6:	4b5f      	ldr	r3, [pc, #380]	@ (8000c54 <MX_GPIO_Init+0x208>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	4a5e      	ldr	r2, [pc, #376]	@ (8000c54 <MX_GPIO_Init+0x208>)
 8000adc:	f043 0302 	orr.w	r3, r3, #2
 8000ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae2:	4b5c      	ldr	r3, [pc, #368]	@ (8000c54 <MX_GPIO_Init+0x208>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	f003 0302 	and.w	r3, r3, #2
 8000aea:	613b      	str	r3, [r7, #16]
 8000aec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	60fb      	str	r3, [r7, #12]
 8000af2:	4b58      	ldr	r3, [pc, #352]	@ (8000c54 <MX_GPIO_Init+0x208>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	4a57      	ldr	r2, [pc, #348]	@ (8000c54 <MX_GPIO_Init+0x208>)
 8000af8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afe:	4b55      	ldr	r3, [pc, #340]	@ (8000c54 <MX_GPIO_Init+0x208>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	60bb      	str	r3, [r7, #8]
 8000b0e:	4b51      	ldr	r3, [pc, #324]	@ (8000c54 <MX_GPIO_Init+0x208>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	4a50      	ldr	r2, [pc, #320]	@ (8000c54 <MX_GPIO_Init+0x208>)
 8000b14:	f043 0310 	orr.w	r3, r3, #16
 8000b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1a:	4b4e      	ldr	r3, [pc, #312]	@ (8000c54 <MX_GPIO_Init+0x208>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	f003 0310 	and.w	r3, r3, #16
 8000b22:	60bb      	str	r3, [r7, #8]
 8000b24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	4b4a      	ldr	r3, [pc, #296]	@ (8000c54 <MX_GPIO_Init+0x208>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	4a49      	ldr	r2, [pc, #292]	@ (8000c54 <MX_GPIO_Init+0x208>)
 8000b30:	f043 0308 	orr.w	r3, r3, #8
 8000b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b36:	4b47      	ldr	r3, [pc, #284]	@ (8000c54 <MX_GPIO_Init+0x208>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	f003 0308 	and.w	r3, r3, #8
 8000b3e:	607b      	str	r3, [r7, #4]
 8000b40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000b42:	2200      	movs	r2, #0
 8000b44:	2116      	movs	r1, #22
 8000b46:	4844      	ldr	r0, [pc, #272]	@ (8000c58 <MX_GPIO_Init+0x20c>)
 8000b48:	f001 fa44 	bl	8001fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2180      	movs	r1, #128	@ 0x80
 8000b50:	4842      	ldr	r0, [pc, #264]	@ (8000c5c <MX_GPIO_Init+0x210>)
 8000b52:	f001 fa3f 	bl	8001fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000b56:	2200      	movs	r2, #0
 8000b58:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000b5c:	4840      	ldr	r0, [pc, #256]	@ (8000c60 <MX_GPIO_Init+0x214>)
 8000b5e:	f001 fa39 	bl	8001fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000b62:	2200      	movs	r2, #0
 8000b64:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000b68:	483e      	ldr	r0, [pc, #248]	@ (8000c64 <MX_GPIO_Init+0x218>)
 8000b6a:	f001 fa33 	bl	8001fd4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000b6e:	2316      	movs	r3, #22
 8000b70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b72:	2301      	movs	r3, #1
 8000b74:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b76:	2300      	movs	r3, #0
 8000b78:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b7e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b82:	4619      	mov	r1, r3
 8000b84:	4834      	ldr	r0, [pc, #208]	@ (8000c58 <MX_GPIO_Init+0x20c>)
 8000b86:	f001 f879 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000b8a:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000b8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b90:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000b94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b96:	2300      	movs	r3, #0
 8000b98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b9e:	4619      	mov	r1, r3
 8000ba0:	482e      	ldr	r0, [pc, #184]	@ (8000c5c <MX_GPIO_Init+0x210>)
 8000ba2:	f001 f86b 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000ba6:	2380      	movs	r3, #128	@ 0x80
 8000ba8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000baa:	2301      	movs	r3, #1
 8000bac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000bb6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4827      	ldr	r0, [pc, #156]	@ (8000c5c <MX_GPIO_Init+0x210>)
 8000bbe:	f001 f85d 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000bc2:	2320      	movs	r3, #32
 8000bc4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bc6:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000bca:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000bd0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd4:	4619      	mov	r1, r3
 8000bd6:	4820      	ldr	r0, [pc, #128]	@ (8000c58 <MX_GPIO_Init+0x20c>)
 8000bd8:	f001 f850 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000bdc:	2304      	movs	r3, #4
 8000bde:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000be0:	2300      	movs	r3, #0
 8000be2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000be8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bec:	4619      	mov	r1, r3
 8000bee:	481e      	ldr	r0, [pc, #120]	@ (8000c68 <MX_GPIO_Init+0x21c>)
 8000bf0:	f001 f844 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000bf4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000bf8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000c02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c06:	4619      	mov	r1, r3
 8000c08:	4815      	ldr	r0, [pc, #84]	@ (8000c60 <MX_GPIO_Init+0x214>)
 8000c0a:	f001 f837 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000c0e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000c12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c14:	2301      	movs	r3, #1
 8000c16:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c24:	4619      	mov	r1, r3
 8000c26:	480e      	ldr	r0, [pc, #56]	@ (8000c60 <MX_GPIO_Init+0x214>)
 8000c28:	f001 f828 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000c2c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000c30:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c32:	2301      	movs	r3, #1
 8000c34:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c42:	4619      	mov	r1, r3
 8000c44:	4807      	ldr	r0, [pc, #28]	@ (8000c64 <MX_GPIO_Init+0x218>)
 8000c46:	f001 f819 	bl	8001c7c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c4a:	bf00      	nop
 8000c4c:	3738      	adds	r7, #56	@ 0x38
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40023800 	.word	0x40023800
 8000c58:	40020800 	.word	0x40020800
 8000c5c:	40020000 	.word	0x40020000
 8000c60:	40020c00 	.word	0x40020c00
 8000c64:	40021800 	.word	0x40021800
 8000c68:	40020400 	.word	0x40020400

08000c6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b082      	sub	sp, #8
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a04      	ldr	r2, [pc, #16]	@ (8000c8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d101      	bne.n	8000c82 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000c7e:	f000 fccf 	bl	8001620 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40001000 	.word	0x40001000

08000c90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c94:	b672      	cpsid	i
}
 8000c96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c98:	bf00      	nop
 8000c9a:	e7fd      	b.n	8000c98 <Error_Handler+0x8>

08000c9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b083      	sub	sp, #12
 8000ca0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	607b      	str	r3, [r7, #4]
 8000ca6:	4b10      	ldr	r3, [pc, #64]	@ (8000ce8 <HAL_MspInit+0x4c>)
 8000ca8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000caa:	4a0f      	ldr	r2, [pc, #60]	@ (8000ce8 <HAL_MspInit+0x4c>)
 8000cac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cb0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cb2:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce8 <HAL_MspInit+0x4c>)
 8000cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cba:	607b      	str	r3, [r7, #4]
 8000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	603b      	str	r3, [r7, #0]
 8000cc2:	4b09      	ldr	r3, [pc, #36]	@ (8000ce8 <HAL_MspInit+0x4c>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc6:	4a08      	ldr	r2, [pc, #32]	@ (8000ce8 <HAL_MspInit+0x4c>)
 8000cc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ccc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cce:	4b06      	ldr	r3, [pc, #24]	@ (8000ce8 <HAL_MspInit+0x4c>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cd6:	603b      	str	r3, [r7, #0]
 8000cd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cda:	bf00      	nop
 8000cdc:	370c      	adds	r7, #12
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop
 8000ce8:	40023800 	.word	0x40023800

08000cec <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000cec:	b480      	push	{r7}
 8000cee:	b085      	sub	sp, #20
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0b      	ldr	r2, [pc, #44]	@ (8000d28 <HAL_CRC_MspInit+0x3c>)
 8000cfa:	4293      	cmp	r3, r2
 8000cfc:	d10d      	bne.n	8000d1a <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	4b0a      	ldr	r3, [pc, #40]	@ (8000d2c <HAL_CRC_MspInit+0x40>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	4a09      	ldr	r2, [pc, #36]	@ (8000d2c <HAL_CRC_MspInit+0x40>)
 8000d08:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d0e:	4b07      	ldr	r3, [pc, #28]	@ (8000d2c <HAL_CRC_MspInit+0x40>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8000d1a:	bf00      	nop
 8000d1c:	3714      	adds	r7, #20
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d24:	4770      	bx	lr
 8000d26:	bf00      	nop
 8000d28:	40023000 	.word	0x40023000
 8000d2c:	40023800 	.word	0x40023800

08000d30 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b084      	sub	sp, #16
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a0e      	ldr	r2, [pc, #56]	@ (8000d78 <HAL_DMA2D_MspInit+0x48>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d115      	bne.n	8000d6e <HAL_DMA2D_MspInit+0x3e>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	4b0d      	ldr	r3, [pc, #52]	@ (8000d7c <HAL_DMA2D_MspInit+0x4c>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	4a0c      	ldr	r2, [pc, #48]	@ (8000d7c <HAL_DMA2D_MspInit+0x4c>)
 8000d4c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000d50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d52:	4b0a      	ldr	r3, [pc, #40]	@ (8000d7c <HAL_DMA2D_MspInit+0x4c>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000d5e:	2200      	movs	r2, #0
 8000d60:	2105      	movs	r1, #5
 8000d62:	205a      	movs	r0, #90	@ 0x5a
 8000d64:	f000 fd58 	bl	8001818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000d68:	205a      	movs	r0, #90	@ 0x5a
 8000d6a:	f000 fd71 	bl	8001850 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000d6e:	bf00      	nop
 8000d70:	3710      	adds	r7, #16
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	4002b000 	.word	0x4002b000
 8000d7c:	40023800 	.word	0x40023800

08000d80 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	b08a      	sub	sp, #40	@ 0x28
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	601a      	str	r2, [r3, #0]
 8000d90:	605a      	str	r2, [r3, #4]
 8000d92:	609a      	str	r2, [r3, #8]
 8000d94:	60da      	str	r2, [r3, #12]
 8000d96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a29      	ldr	r2, [pc, #164]	@ (8000e44 <HAL_I2C_MspInit+0xc4>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d14b      	bne.n	8000e3a <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
 8000da6:	4b28      	ldr	r3, [pc, #160]	@ (8000e48 <HAL_I2C_MspInit+0xc8>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	4a27      	ldr	r2, [pc, #156]	@ (8000e48 <HAL_I2C_MspInit+0xc8>)
 8000dac:	f043 0304 	orr.w	r3, r3, #4
 8000db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db2:	4b25      	ldr	r3, [pc, #148]	@ (8000e48 <HAL_I2C_MspInit+0xc8>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	f003 0304 	and.w	r3, r3, #4
 8000dba:	613b      	str	r3, [r7, #16]
 8000dbc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	4b21      	ldr	r3, [pc, #132]	@ (8000e48 <HAL_I2C_MspInit+0xc8>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	4a20      	ldr	r2, [pc, #128]	@ (8000e48 <HAL_I2C_MspInit+0xc8>)
 8000dc8:	f043 0301 	orr.w	r3, r3, #1
 8000dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dce:	4b1e      	ldr	r3, [pc, #120]	@ (8000e48 <HAL_I2C_MspInit+0xc8>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	f003 0301 	and.w	r3, r3, #1
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000dda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000dde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000de0:	2312      	movs	r3, #18
 8000de2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000de4:	2301      	movs	r3, #1
 8000de6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de8:	2300      	movs	r3, #0
 8000dea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000dec:	2304      	movs	r3, #4
 8000dee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	4619      	mov	r1, r3
 8000df6:	4815      	ldr	r0, [pc, #84]	@ (8000e4c <HAL_I2C_MspInit+0xcc>)
 8000df8:	f000 ff40 	bl	8001c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000dfc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000e02:	2312      	movs	r3, #18
 8000e04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000e06:	2301      	movs	r3, #1
 8000e08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000e0e:	2304      	movs	r3, #4
 8000e10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000e12:	f107 0314 	add.w	r3, r7, #20
 8000e16:	4619      	mov	r1, r3
 8000e18:	480d      	ldr	r0, [pc, #52]	@ (8000e50 <HAL_I2C_MspInit+0xd0>)
 8000e1a:	f000 ff2f 	bl	8001c7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60bb      	str	r3, [r7, #8]
 8000e22:	4b09      	ldr	r3, [pc, #36]	@ (8000e48 <HAL_I2C_MspInit+0xc8>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e26:	4a08      	ldr	r2, [pc, #32]	@ (8000e48 <HAL_I2C_MspInit+0xc8>)
 8000e28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000e2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e2e:	4b06      	ldr	r3, [pc, #24]	@ (8000e48 <HAL_I2C_MspInit+0xc8>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e36:	60bb      	str	r3, [r7, #8]
 8000e38:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8000e3a:	bf00      	nop
 8000e3c:	3728      	adds	r7, #40	@ 0x28
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40005c00 	.word	0x40005c00
 8000e48:	40023800 	.word	0x40023800
 8000e4c:	40020800 	.word	0x40020800
 8000e50:	40020000 	.word	0x40020000

08000e54 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b09a      	sub	sp, #104	@ 0x68
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e70:	2230      	movs	r2, #48	@ 0x30
 8000e72:	2100      	movs	r1, #0
 8000e74:	4618      	mov	r0, r3
 8000e76:	f009 fc3f 	bl	800a6f8 <memset>
  if(hltdc->Instance==LTDC)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	4a85      	ldr	r2, [pc, #532]	@ (8001094 <HAL_LTDC_MspInit+0x240>)
 8000e80:	4293      	cmp	r3, r2
 8000e82:	f040 8102 	bne.w	800108a <HAL_LTDC_MspInit+0x236>

    /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000e86:	2308      	movs	r3, #8
 8000e88:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000e8a:	2332      	movs	r3, #50	@ 0x32
 8000e8c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000e8e:	2302      	movs	r3, #2
 8000e90:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000e92:	2300      	movs	r3, #0
 8000e94:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f004 fbf4 	bl	8005688 <HAL_RCCEx_PeriphCLKConfig>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000ea6:	f7ff fef3 	bl	8000c90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000eaa:	2300      	movs	r3, #0
 8000eac:	623b      	str	r3, [r7, #32]
 8000eae:	4b7a      	ldr	r3, [pc, #488]	@ (8001098 <HAL_LTDC_MspInit+0x244>)
 8000eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eb2:	4a79      	ldr	r2, [pc, #484]	@ (8001098 <HAL_LTDC_MspInit+0x244>)
 8000eb4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000eb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eba:	4b77      	ldr	r3, [pc, #476]	@ (8001098 <HAL_LTDC_MspInit+0x244>)
 8000ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ebe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000ec2:	623b      	str	r3, [r7, #32]
 8000ec4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	61fb      	str	r3, [r7, #28]
 8000eca:	4b73      	ldr	r3, [pc, #460]	@ (8001098 <HAL_LTDC_MspInit+0x244>)
 8000ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ece:	4a72      	ldr	r2, [pc, #456]	@ (8001098 <HAL_LTDC_MspInit+0x244>)
 8000ed0:	f043 0320 	orr.w	r3, r3, #32
 8000ed4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ed6:	4b70      	ldr	r3, [pc, #448]	@ (8001098 <HAL_LTDC_MspInit+0x244>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eda:	f003 0320 	and.w	r3, r3, #32
 8000ede:	61fb      	str	r3, [r7, #28]
 8000ee0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61bb      	str	r3, [r7, #24]
 8000ee6:	4b6c      	ldr	r3, [pc, #432]	@ (8001098 <HAL_LTDC_MspInit+0x244>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	4a6b      	ldr	r2, [pc, #428]	@ (8001098 <HAL_LTDC_MspInit+0x244>)
 8000eec:	f043 0301 	orr.w	r3, r3, #1
 8000ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef2:	4b69      	ldr	r3, [pc, #420]	@ (8001098 <HAL_LTDC_MspInit+0x244>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	f003 0301 	and.w	r3, r3, #1
 8000efa:	61bb      	str	r3, [r7, #24]
 8000efc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000efe:	2300      	movs	r3, #0
 8000f00:	617b      	str	r3, [r7, #20]
 8000f02:	4b65      	ldr	r3, [pc, #404]	@ (8001098 <HAL_LTDC_MspInit+0x244>)
 8000f04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f06:	4a64      	ldr	r2, [pc, #400]	@ (8001098 <HAL_LTDC_MspInit+0x244>)
 8000f08:	f043 0302 	orr.w	r3, r3, #2
 8000f0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f0e:	4b62      	ldr	r3, [pc, #392]	@ (8001098 <HAL_LTDC_MspInit+0x244>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f12:	f003 0302 	and.w	r3, r3, #2
 8000f16:	617b      	str	r3, [r7, #20]
 8000f18:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	613b      	str	r3, [r7, #16]
 8000f1e:	4b5e      	ldr	r3, [pc, #376]	@ (8001098 <HAL_LTDC_MspInit+0x244>)
 8000f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f22:	4a5d      	ldr	r2, [pc, #372]	@ (8001098 <HAL_LTDC_MspInit+0x244>)
 8000f24:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f2a:	4b5b      	ldr	r3, [pc, #364]	@ (8001098 <HAL_LTDC_MspInit+0x244>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f36:	2300      	movs	r3, #0
 8000f38:	60fb      	str	r3, [r7, #12]
 8000f3a:	4b57      	ldr	r3, [pc, #348]	@ (8001098 <HAL_LTDC_MspInit+0x244>)
 8000f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3e:	4a56      	ldr	r2, [pc, #344]	@ (8001098 <HAL_LTDC_MspInit+0x244>)
 8000f40:	f043 0304 	orr.w	r3, r3, #4
 8000f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f46:	4b54      	ldr	r3, [pc, #336]	@ (8001098 <HAL_LTDC_MspInit+0x244>)
 8000f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4a:	f003 0304 	and.w	r3, r3, #4
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	4b50      	ldr	r3, [pc, #320]	@ (8001098 <HAL_LTDC_MspInit+0x244>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	4a4f      	ldr	r2, [pc, #316]	@ (8001098 <HAL_LTDC_MspInit+0x244>)
 8000f5c:	f043 0308 	orr.w	r3, r3, #8
 8000f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f62:	4b4d      	ldr	r3, [pc, #308]	@ (8001098 <HAL_LTDC_MspInit+0x244>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	f003 0308 	and.w	r3, r3, #8
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8000f6e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f72:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f74:	2302      	movs	r3, #2
 8000f76:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000f80:	230e      	movs	r3, #14
 8000f82:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000f84:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f88:	4619      	mov	r1, r3
 8000f8a:	4844      	ldr	r0, [pc, #272]	@ (800109c <HAL_LTDC_MspInit+0x248>)
 8000f8c:	f000 fe76 	bl	8001c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000f90:	f641 0358 	movw	r3, #6232	@ 0x1858
 8000f94:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f96:	2302      	movs	r3, #2
 8000f98:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fa2:	230e      	movs	r3, #14
 8000fa4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fa6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000faa:	4619      	mov	r1, r3
 8000fac:	483c      	ldr	r0, [pc, #240]	@ (80010a0 <HAL_LTDC_MspInit+0x24c>)
 8000fae:	f000 fe65 	bl	8001c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fb6:	2302      	movs	r3, #2
 8000fb8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fba:	2300      	movs	r3, #0
 8000fbc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000fc2:	2309      	movs	r3, #9
 8000fc4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fca:	4619      	mov	r1, r3
 8000fcc:	4835      	ldr	r0, [pc, #212]	@ (80010a4 <HAL_LTDC_MspInit+0x250>)
 8000fce:	f000 fe55 	bl	8001c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000fd2:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000fd6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd8:	2302      	movs	r3, #2
 8000fda:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000fe4:	230e      	movs	r3, #14
 8000fe6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fe8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000fec:	4619      	mov	r1, r3
 8000fee:	482d      	ldr	r0, [pc, #180]	@ (80010a4 <HAL_LTDC_MspInit+0x250>)
 8000ff0:	f000 fe44 	bl	8001c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000ff4:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000ff8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ffe:	2300      	movs	r3, #0
 8001000:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001002:	2300      	movs	r3, #0
 8001004:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001006:	230e      	movs	r3, #14
 8001008:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800100a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800100e:	4619      	mov	r1, r3
 8001010:	4825      	ldr	r0, [pc, #148]	@ (80010a8 <HAL_LTDC_MspInit+0x254>)
 8001012:	f000 fe33 	bl	8001c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001016:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800101a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800101c:	2302      	movs	r3, #2
 800101e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001020:	2300      	movs	r3, #0
 8001022:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001024:	2300      	movs	r3, #0
 8001026:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001028:	230e      	movs	r3, #14
 800102a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800102c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001030:	4619      	mov	r1, r3
 8001032:	481e      	ldr	r0, [pc, #120]	@ (80010ac <HAL_LTDC_MspInit+0x258>)
 8001034:	f000 fe22 	bl	8001c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001038:	2348      	movs	r3, #72	@ 0x48
 800103a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103c:	2302      	movs	r3, #2
 800103e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	2300      	movs	r3, #0
 8001042:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001044:	2300      	movs	r3, #0
 8001046:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001048:	230e      	movs	r3, #14
 800104a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800104c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001050:	4619      	mov	r1, r3
 8001052:	4817      	ldr	r0, [pc, #92]	@ (80010b0 <HAL_LTDC_MspInit+0x25c>)
 8001054:	f000 fe12 	bl	8001c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001058:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800105c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105e:	2302      	movs	r3, #2
 8001060:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001062:	2300      	movs	r3, #0
 8001064:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001066:	2300      	movs	r3, #0
 8001068:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800106a:	2309      	movs	r3, #9
 800106c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800106e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001072:	4619      	mov	r1, r3
 8001074:	480c      	ldr	r0, [pc, #48]	@ (80010a8 <HAL_LTDC_MspInit+0x254>)
 8001076:	f000 fe01 	bl	8001c7c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2105      	movs	r1, #5
 800107e:	2058      	movs	r0, #88	@ 0x58
 8001080:	f000 fbca 	bl	8001818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001084:	2058      	movs	r0, #88	@ 0x58
 8001086:	f000 fbe3 	bl	8001850 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 800108a:	bf00      	nop
 800108c:	3768      	adds	r7, #104	@ 0x68
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	40016800 	.word	0x40016800
 8001098:	40023800 	.word	0x40023800
 800109c:	40021400 	.word	0x40021400
 80010a0:	40020000 	.word	0x40020000
 80010a4:	40020400 	.word	0x40020400
 80010a8:	40021800 	.word	0x40021800
 80010ac:	40020800 	.word	0x40020800
 80010b0:	40020c00 	.word	0x40020c00

080010b4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b08a      	sub	sp, #40	@ 0x28
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010bc:	f107 0314 	add.w	r3, r7, #20
 80010c0:	2200      	movs	r2, #0
 80010c2:	601a      	str	r2, [r3, #0]
 80010c4:	605a      	str	r2, [r3, #4]
 80010c6:	609a      	str	r2, [r3, #8]
 80010c8:	60da      	str	r2, [r3, #12]
 80010ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	4a19      	ldr	r2, [pc, #100]	@ (8001138 <HAL_SPI_MspInit+0x84>)
 80010d2:	4293      	cmp	r3, r2
 80010d4:	d12c      	bne.n	8001130 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI5_MspInit 0 */

    /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	613b      	str	r3, [r7, #16]
 80010da:	4b18      	ldr	r3, [pc, #96]	@ (800113c <HAL_SPI_MspInit+0x88>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010de:	4a17      	ldr	r2, [pc, #92]	@ (800113c <HAL_SPI_MspInit+0x88>)
 80010e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80010e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80010e6:	4b15      	ldr	r3, [pc, #84]	@ (800113c <HAL_SPI_MspInit+0x88>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80010ee:	613b      	str	r3, [r7, #16]
 80010f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	60fb      	str	r3, [r7, #12]
 80010f6:	4b11      	ldr	r3, [pc, #68]	@ (800113c <HAL_SPI_MspInit+0x88>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010fa:	4a10      	ldr	r2, [pc, #64]	@ (800113c <HAL_SPI_MspInit+0x88>)
 80010fc:	f043 0320 	orr.w	r3, r3, #32
 8001100:	6313      	str	r3, [r2, #48]	@ 0x30
 8001102:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <HAL_SPI_MspInit+0x88>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	f003 0320 	and.w	r3, r3, #32
 800110a:	60fb      	str	r3, [r7, #12]
 800110c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800110e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001114:	2302      	movs	r3, #2
 8001116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001118:	2300      	movs	r3, #0
 800111a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111c:	2300      	movs	r3, #0
 800111e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001120:	2305      	movs	r3, #5
 8001122:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001124:	f107 0314 	add.w	r3, r7, #20
 8001128:	4619      	mov	r1, r3
 800112a:	4805      	ldr	r0, [pc, #20]	@ (8001140 <HAL_SPI_MspInit+0x8c>)
 800112c:	f000 fda6 	bl	8001c7c <HAL_GPIO_Init>

    /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001130:	bf00      	nop
 8001132:	3728      	adds	r7, #40	@ 0x28
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	40015000 	.word	0x40015000
 800113c:	40023800 	.word	0x40023800
 8001140:	40021400 	.word	0x40021400

08001144 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a0b      	ldr	r2, [pc, #44]	@ (8001180 <HAL_TIM_Base_MspInit+0x3c>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d10d      	bne.n	8001172 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b0a      	ldr	r3, [pc, #40]	@ (8001184 <HAL_TIM_Base_MspInit+0x40>)
 800115c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800115e:	4a09      	ldr	r2, [pc, #36]	@ (8001184 <HAL_TIM_Base_MspInit+0x40>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6453      	str	r3, [r2, #68]	@ 0x44
 8001166:	4b07      	ldr	r3, [pc, #28]	@ (8001184 <HAL_TIM_Base_MspInit+0x40>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800116a:	f003 0301 	and.w	r3, r3, #1
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001172:	bf00      	nop
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	40010000 	.word	0x40010000
 8001184:	40023800 	.word	0x40023800

08001188 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b08a      	sub	sp, #40	@ 0x28
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001190:	f107 0314 	add.w	r3, r7, #20
 8001194:	2200      	movs	r2, #0
 8001196:	601a      	str	r2, [r3, #0]
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	609a      	str	r2, [r3, #8]
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	4a19      	ldr	r2, [pc, #100]	@ (800120c <HAL_UART_MspInit+0x84>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d12c      	bne.n	8001204 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	613b      	str	r3, [r7, #16]
 80011ae:	4b18      	ldr	r3, [pc, #96]	@ (8001210 <HAL_UART_MspInit+0x88>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b2:	4a17      	ldr	r2, [pc, #92]	@ (8001210 <HAL_UART_MspInit+0x88>)
 80011b4:	f043 0310 	orr.w	r3, r3, #16
 80011b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ba:	4b15      	ldr	r3, [pc, #84]	@ (8001210 <HAL_UART_MspInit+0x88>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011be:	f003 0310 	and.w	r3, r3, #16
 80011c2:	613b      	str	r3, [r7, #16]
 80011c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
 80011ca:	4b11      	ldr	r3, [pc, #68]	@ (8001210 <HAL_UART_MspInit+0x88>)
 80011cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011ce:	4a10      	ldr	r2, [pc, #64]	@ (8001210 <HAL_UART_MspInit+0x88>)
 80011d0:	f043 0301 	orr.w	r3, r3, #1
 80011d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80011d6:	4b0e      	ldr	r3, [pc, #56]	@ (8001210 <HAL_UART_MspInit+0x88>)
 80011d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011da:	f003 0301 	and.w	r3, r3, #1
 80011de:	60fb      	str	r3, [r7, #12]
 80011e0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80011e2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80011e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011e8:	2302      	movs	r3, #2
 80011ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ec:	2300      	movs	r3, #0
 80011ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011f0:	2303      	movs	r3, #3
 80011f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011f4:	2307      	movs	r3, #7
 80011f6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	4619      	mov	r1, r3
 80011fe:	4805      	ldr	r0, [pc, #20]	@ (8001214 <HAL_UART_MspInit+0x8c>)
 8001200:	f000 fd3c 	bl	8001c7c <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001204:	bf00      	nop
 8001206:	3728      	adds	r7, #40	@ 0x28
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40011000 	.word	0x40011000
 8001210:	40023800 	.word	0x40023800
 8001214:	40020000 	.word	0x40020000

08001218 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001218:	b580      	push	{r7, lr}
 800121a:	b086      	sub	sp, #24
 800121c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800121e:	1d3b      	adds	r3, r7, #4
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
 8001224:	605a      	str	r2, [r3, #4]
 8001226:	609a      	str	r2, [r3, #8]
 8001228:	60da      	str	r2, [r3, #12]
 800122a:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800122c:	4b3b      	ldr	r3, [pc, #236]	@ (800131c <HAL_FMC_MspInit+0x104>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d16f      	bne.n	8001314 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001234:	4b39      	ldr	r3, [pc, #228]	@ (800131c <HAL_FMC_MspInit+0x104>)
 8001236:	2201      	movs	r2, #1
 8001238:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800123a:	2300      	movs	r3, #0
 800123c:	603b      	str	r3, [r7, #0]
 800123e:	4b38      	ldr	r3, [pc, #224]	@ (8001320 <HAL_FMC_MspInit+0x108>)
 8001240:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001242:	4a37      	ldr	r2, [pc, #220]	@ (8001320 <HAL_FMC_MspInit+0x108>)
 8001244:	f043 0301 	orr.w	r3, r3, #1
 8001248:	6393      	str	r3, [r2, #56]	@ 0x38
 800124a:	4b35      	ldr	r3, [pc, #212]	@ (8001320 <HAL_FMC_MspInit+0x108>)
 800124c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800124e:	f003 0301 	and.w	r3, r3, #1
 8001252:	603b      	str	r3, [r7, #0]
 8001254:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8001256:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 800125a:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125c:	2302      	movs	r3, #2
 800125e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001264:	2303      	movs	r3, #3
 8001266:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001268:	230c      	movs	r3, #12
 800126a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	4619      	mov	r1, r3
 8001270:	482c      	ldr	r0, [pc, #176]	@ (8001324 <HAL_FMC_MspInit+0x10c>)
 8001272:	f000 fd03 	bl	8001c7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 8001276:	2301      	movs	r3, #1
 8001278:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800127a:	2302      	movs	r3, #2
 800127c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800127e:	2300      	movs	r3, #0
 8001280:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001282:	2303      	movs	r3, #3
 8001284:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001286:	230c      	movs	r3, #12
 8001288:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	4619      	mov	r1, r3
 800128e:	4826      	ldr	r0, [pc, #152]	@ (8001328 <HAL_FMC_MspInit+0x110>)
 8001290:	f000 fcf4 	bl	8001c7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001294:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001298:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800129a:	2302      	movs	r3, #2
 800129c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129e:	2300      	movs	r3, #0
 80012a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a2:	2303      	movs	r3, #3
 80012a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012a6:	230c      	movs	r3, #12
 80012a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80012aa:	1d3b      	adds	r3, r7, #4
 80012ac:	4619      	mov	r1, r3
 80012ae:	481f      	ldr	r0, [pc, #124]	@ (800132c <HAL_FMC_MspInit+0x114>)
 80012b0:	f000 fce4 	bl	8001c7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80012b4:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80012b8:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ba:	2302      	movs	r3, #2
 80012bc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012be:	2300      	movs	r3, #0
 80012c0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012c2:	2303      	movs	r3, #3
 80012c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012c6:	230c      	movs	r3, #12
 80012c8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	4619      	mov	r1, r3
 80012ce:	4818      	ldr	r0, [pc, #96]	@ (8001330 <HAL_FMC_MspInit+0x118>)
 80012d0:	f000 fcd4 	bl	8001c7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80012d4:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80012d8:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012da:	2302      	movs	r3, #2
 80012dc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012de:	2300      	movs	r3, #0
 80012e0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e2:	2303      	movs	r3, #3
 80012e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80012e6:	230c      	movs	r3, #12
 80012e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	4619      	mov	r1, r3
 80012ee:	4811      	ldr	r0, [pc, #68]	@ (8001334 <HAL_FMC_MspInit+0x11c>)
 80012f0:	f000 fcc4 	bl	8001c7c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80012f4:	2360      	movs	r3, #96	@ 0x60
 80012f6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001300:	2303      	movs	r3, #3
 8001302:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001304:	230c      	movs	r3, #12
 8001306:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001308:	1d3b      	adds	r3, r7, #4
 800130a:	4619      	mov	r1, r3
 800130c:	480a      	ldr	r0, [pc, #40]	@ (8001338 <HAL_FMC_MspInit+0x120>)
 800130e:	f000 fcb5 	bl	8001c7c <HAL_GPIO_Init>
 8001312:	e000      	b.n	8001316 <HAL_FMC_MspInit+0xfe>
    return;
 8001314:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8001316:	3718      	adds	r7, #24
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	200002f8 	.word	0x200002f8
 8001320:	40023800 	.word	0x40023800
 8001324:	40021400 	.word	0x40021400
 8001328:	40020800 	.word	0x40020800
 800132c:	40021800 	.word	0x40021800
 8001330:	40021000 	.word	0x40021000
 8001334:	40020c00 	.word	0x40020c00
 8001338:	40020400 	.word	0x40020400

0800133c <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001344:	f7ff ff68 	bl	8001218 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}

08001350 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b08e      	sub	sp, #56	@ 0x38
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001358:	2300      	movs	r3, #0
 800135a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800135c:	2300      	movs	r3, #0
 800135e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001360:	2300      	movs	r3, #0
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	4b33      	ldr	r3, [pc, #204]	@ (8001434 <HAL_InitTick+0xe4>)
 8001366:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001368:	4a32      	ldr	r2, [pc, #200]	@ (8001434 <HAL_InitTick+0xe4>)
 800136a:	f043 0310 	orr.w	r3, r3, #16
 800136e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001370:	4b30      	ldr	r3, [pc, #192]	@ (8001434 <HAL_InitTick+0xe4>)
 8001372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001374:	f003 0310 	and.w	r3, r3, #16
 8001378:	60fb      	str	r3, [r7, #12]
 800137a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800137c:	f107 0210 	add.w	r2, r7, #16
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4611      	mov	r1, r2
 8001386:	4618      	mov	r0, r3
 8001388:	f004 f94c 	bl	8005624 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800138c:	6a3b      	ldr	r3, [r7, #32]
 800138e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001390:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001392:	2b00      	cmp	r3, #0
 8001394:	d103      	bne.n	800139e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001396:	f004 f91d 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
 800139a:	6378      	str	r0, [r7, #52]	@ 0x34
 800139c:	e004      	b.n	80013a8 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800139e:	f004 f919 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
 80013a2:	4603      	mov	r3, r0
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80013a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80013aa:	4a23      	ldr	r2, [pc, #140]	@ (8001438 <HAL_InitTick+0xe8>)
 80013ac:	fba2 2303 	umull	r2, r3, r2, r3
 80013b0:	0c9b      	lsrs	r3, r3, #18
 80013b2:	3b01      	subs	r3, #1
 80013b4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80013b6:	4b21      	ldr	r3, [pc, #132]	@ (800143c <HAL_InitTick+0xec>)
 80013b8:	4a21      	ldr	r2, [pc, #132]	@ (8001440 <HAL_InitTick+0xf0>)
 80013ba:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80013bc:	4b1f      	ldr	r3, [pc, #124]	@ (800143c <HAL_InitTick+0xec>)
 80013be:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013c2:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80013c4:	4a1d      	ldr	r2, [pc, #116]	@ (800143c <HAL_InitTick+0xec>)
 80013c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80013c8:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80013ca:	4b1c      	ldr	r3, [pc, #112]	@ (800143c <HAL_InitTick+0xec>)
 80013cc:	2200      	movs	r2, #0
 80013ce:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013d0:	4b1a      	ldr	r3, [pc, #104]	@ (800143c <HAL_InitTick+0xec>)
 80013d2:	2200      	movs	r2, #0
 80013d4:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d6:	4b19      	ldr	r3, [pc, #100]	@ (800143c <HAL_InitTick+0xec>)
 80013d8:	2200      	movs	r2, #0
 80013da:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80013dc:	4817      	ldr	r0, [pc, #92]	@ (800143c <HAL_InitTick+0xec>)
 80013de:	f004 fbd0 	bl	8005b82 <HAL_TIM_Base_Init>
 80013e2:	4603      	mov	r3, r0
 80013e4:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80013e8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d11b      	bne.n	8001428 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80013f0:	4812      	ldr	r0, [pc, #72]	@ (800143c <HAL_InitTick+0xec>)
 80013f2:	f004 fc15 	bl	8005c20 <HAL_TIM_Base_Start_IT>
 80013f6:	4603      	mov	r3, r0
 80013f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80013fc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001400:	2b00      	cmp	r3, #0
 8001402:	d111      	bne.n	8001428 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001404:	2036      	movs	r0, #54	@ 0x36
 8001406:	f000 fa23 	bl	8001850 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2b0f      	cmp	r3, #15
 800140e:	d808      	bhi.n	8001422 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001410:	2200      	movs	r2, #0
 8001412:	6879      	ldr	r1, [r7, #4]
 8001414:	2036      	movs	r0, #54	@ 0x36
 8001416:	f000 f9ff 	bl	8001818 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800141a:	4a0a      	ldr	r2, [pc, #40]	@ (8001444 <HAL_InitTick+0xf4>)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6013      	str	r3, [r2, #0]
 8001420:	e002      	b.n	8001428 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001428:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 800142c:	4618      	mov	r0, r3
 800142e:	3738      	adds	r7, #56	@ 0x38
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	40023800 	.word	0x40023800
 8001438:	431bde83 	.word	0x431bde83
 800143c:	200002fc 	.word	0x200002fc
 8001440:	40001000 	.word	0x40001000
 8001444:	20000004 	.word	0x20000004

08001448 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800144c:	bf00      	nop
 800144e:	e7fd      	b.n	800144c <NMI_Handler+0x4>

08001450 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001454:	bf00      	nop
 8001456:	e7fd      	b.n	8001454 <HardFault_Handler+0x4>

08001458 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800145c:	bf00      	nop
 800145e:	e7fd      	b.n	800145c <MemManage_Handler+0x4>

08001460 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001464:	bf00      	nop
 8001466:	e7fd      	b.n	8001464 <BusFault_Handler+0x4>

08001468 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800146c:	bf00      	nop
 800146e:	e7fd      	b.n	800146c <UsageFault_Handler+0x4>

08001470 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001474:	bf00      	nop
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr

0800147e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800147e:	b480      	push	{r7}
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800148c:	b480      	push	{r7}
 800148e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	46bd      	mov	sp, r7
 8001494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001498:	4770      	bx	lr

0800149a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800149a:	b480      	push	{r7}
 800149c:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80014ac:	4802      	ldr	r0, [pc, #8]	@ (80014b8 <TIM6_DAC_IRQHandler+0x10>)
 80014ae:	f004 fc27 	bl	8005d00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80014b2:	bf00      	nop
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	200002fc 	.word	0x200002fc

080014bc <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80014c0:	4802      	ldr	r0, [pc, #8]	@ (80014cc <OTG_HS_IRQHandler+0x10>)
 80014c2:	f001 f89b 	bl	80025fc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80014c6:	bf00      	nop
 80014c8:	bd80      	pop	{r7, pc}
 80014ca:	bf00      	nop
 80014cc:	20000728 	.word	0x20000728

080014d0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80014d4:	4802      	ldr	r0, [pc, #8]	@ (80014e0 <LTDC_IRQHandler+0x10>)
 80014d6:	f003 f975 	bl	80047c4 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80014da:	bf00      	nop
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000134 	.word	0x20000134

080014e4 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80014e8:	4802      	ldr	r0, [pc, #8]	@ (80014f4 <DMA2D_IRQHandler+0x10>)
 80014ea:	f000 fa24 	bl	8001936 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80014ee:	bf00      	nop
 80014f0:	bd80      	pop	{r7, pc}
 80014f2:	bf00      	nop
 80014f4:	200000a0 	.word	0x200000a0

080014f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b086      	sub	sp, #24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001500:	4a14      	ldr	r2, [pc, #80]	@ (8001554 <_sbrk+0x5c>)
 8001502:	4b15      	ldr	r3, [pc, #84]	@ (8001558 <_sbrk+0x60>)
 8001504:	1ad3      	subs	r3, r2, r3
 8001506:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800150c:	4b13      	ldr	r3, [pc, #76]	@ (800155c <_sbrk+0x64>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	2b00      	cmp	r3, #0
 8001512:	d102      	bne.n	800151a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001514:	4b11      	ldr	r3, [pc, #68]	@ (800155c <_sbrk+0x64>)
 8001516:	4a12      	ldr	r2, [pc, #72]	@ (8001560 <_sbrk+0x68>)
 8001518:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800151a:	4b10      	ldr	r3, [pc, #64]	@ (800155c <_sbrk+0x64>)
 800151c:	681a      	ldr	r2, [r3, #0]
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4413      	add	r3, r2
 8001522:	693a      	ldr	r2, [r7, #16]
 8001524:	429a      	cmp	r2, r3
 8001526:	d207      	bcs.n	8001538 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001528:	f009 f8fe 	bl	800a728 <__errno>
 800152c:	4603      	mov	r3, r0
 800152e:	220c      	movs	r2, #12
 8001530:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001532:	f04f 33ff 	mov.w	r3, #4294967295
 8001536:	e009      	b.n	800154c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001538:	4b08      	ldr	r3, [pc, #32]	@ (800155c <_sbrk+0x64>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800153e:	4b07      	ldr	r3, [pc, #28]	@ (800155c <_sbrk+0x64>)
 8001540:	681a      	ldr	r2, [r3, #0]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	4413      	add	r3, r2
 8001546:	4a05      	ldr	r2, [pc, #20]	@ (800155c <_sbrk+0x64>)
 8001548:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800154a:	68fb      	ldr	r3, [r7, #12]
}
 800154c:	4618      	mov	r0, r3
 800154e:	3718      	adds	r7, #24
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}
 8001554:	20030000 	.word	0x20030000
 8001558:	00000400 	.word	0x00000400
 800155c:	20000344 	.word	0x20000344
 8001560:	20000c50 	.word	0x20000c50

08001564 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001568:	4b06      	ldr	r3, [pc, #24]	@ (8001584 <SystemInit+0x20>)
 800156a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800156e:	4a05      	ldr	r2, [pc, #20]	@ (8001584 <SystemInit+0x20>)
 8001570:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001574:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	e000ed00 	.word	0xe000ed00

08001588 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001588:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015c0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800158c:	f7ff ffea 	bl	8001564 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001590:	480c      	ldr	r0, [pc, #48]	@ (80015c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001592:	490d      	ldr	r1, [pc, #52]	@ (80015c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001594:	4a0d      	ldr	r2, [pc, #52]	@ (80015cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001598:	e002      	b.n	80015a0 <LoopCopyDataInit>

0800159a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800159a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800159c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159e:	3304      	adds	r3, #4

080015a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a4:	d3f9      	bcc.n	800159a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a6:	4a0a      	ldr	r2, [pc, #40]	@ (80015d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015a8:	4c0a      	ldr	r4, [pc, #40]	@ (80015d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015ac:	e001      	b.n	80015b2 <LoopFillZerobss>

080015ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b0:	3204      	adds	r2, #4

080015b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b4:	d3fb      	bcc.n	80015ae <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80015b6:	f009 f8bd 	bl	800a734 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015ba:	f7fe ffad 	bl	8000518 <main>
  bx  lr    
 80015be:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80015c0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80015c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c8:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 80015cc:	0800a858 	.word	0x0800a858
  ldr r2, =_sbss
 80015d0:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 80015d4:	20000c50 	.word	0x20000c50

080015d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015d8:	e7fe      	b.n	80015d8 <ADC_IRQHandler>
	...

080015dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015e0:	4b0e      	ldr	r3, [pc, #56]	@ (800161c <HAL_Init+0x40>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a0d      	ldr	r2, [pc, #52]	@ (800161c <HAL_Init+0x40>)
 80015e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015ec:	4b0b      	ldr	r3, [pc, #44]	@ (800161c <HAL_Init+0x40>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a0a      	ldr	r2, [pc, #40]	@ (800161c <HAL_Init+0x40>)
 80015f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015f8:	4b08      	ldr	r3, [pc, #32]	@ (800161c <HAL_Init+0x40>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a07      	ldr	r2, [pc, #28]	@ (800161c <HAL_Init+0x40>)
 80015fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001602:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001604:	2003      	movs	r0, #3
 8001606:	f000 f8fc 	bl	8001802 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800160a:	200f      	movs	r0, #15
 800160c:	f7ff fea0 	bl	8001350 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001610:	f7ff fb44 	bl	8000c9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001614:	2300      	movs	r3, #0
}
 8001616:	4618      	mov	r0, r3
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	40023c00 	.word	0x40023c00

08001620 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001624:	4b06      	ldr	r3, [pc, #24]	@ (8001640 <HAL_IncTick+0x20>)
 8001626:	781b      	ldrb	r3, [r3, #0]
 8001628:	461a      	mov	r2, r3
 800162a:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <HAL_IncTick+0x24>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4413      	add	r3, r2
 8001630:	4a04      	ldr	r2, [pc, #16]	@ (8001644 <HAL_IncTick+0x24>)
 8001632:	6013      	str	r3, [r2, #0]
}
 8001634:	bf00      	nop
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	20000008 	.word	0x20000008
 8001644:	20000348 	.word	0x20000348

08001648 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  return uwTick;
 800164c:	4b03      	ldr	r3, [pc, #12]	@ (800165c <HAL_GetTick+0x14>)
 800164e:	681b      	ldr	r3, [r3, #0]
}
 8001650:	4618      	mov	r0, r3
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	20000348 	.word	0x20000348

08001660 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b084      	sub	sp, #16
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001668:	f7ff ffee 	bl	8001648 <HAL_GetTick>
 800166c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001678:	d005      	beq.n	8001686 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800167a:	4b0a      	ldr	r3, [pc, #40]	@ (80016a4 <HAL_Delay+0x44>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	461a      	mov	r2, r3
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	4413      	add	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001686:	bf00      	nop
 8001688:	f7ff ffde 	bl	8001648 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	68bb      	ldr	r3, [r7, #8]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	429a      	cmp	r2, r3
 8001696:	d8f7      	bhi.n	8001688 <HAL_Delay+0x28>
  {
  }
}
 8001698:	bf00      	nop
 800169a:	bf00      	nop
 800169c:	3710      	adds	r7, #16
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	bf00      	nop
 80016a4:	20000008 	.word	0x20000008

080016a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b8:	4b0c      	ldr	r3, [pc, #48]	@ (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016c4:	4013      	ands	r3, r2
 80016c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016da:	4a04      	ldr	r2, [pc, #16]	@ (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	60d3      	str	r3, [r2, #12]
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f4:	4b04      	ldr	r3, [pc, #16]	@ (8001708 <__NVIC_GetPriorityGrouping+0x18>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	0a1b      	lsrs	r3, r3, #8
 80016fa:	f003 0307 	and.w	r3, r3, #7
}
 80016fe:	4618      	mov	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	2b00      	cmp	r3, #0
 800171c:	db0b      	blt.n	8001736 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	f003 021f 	and.w	r2, r3, #31
 8001724:	4907      	ldr	r1, [pc, #28]	@ (8001744 <__NVIC_EnableIRQ+0x38>)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	095b      	lsrs	r3, r3, #5
 800172c:	2001      	movs	r0, #1
 800172e:	fa00 f202 	lsl.w	r2, r0, r2
 8001732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	e000e100 	.word	0xe000e100

08001748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	6039      	str	r1, [r7, #0]
 8001752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001758:	2b00      	cmp	r3, #0
 800175a:	db0a      	blt.n	8001772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	b2da      	uxtb	r2, r3
 8001760:	490c      	ldr	r1, [pc, #48]	@ (8001794 <__NVIC_SetPriority+0x4c>)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	0112      	lsls	r2, r2, #4
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	440b      	add	r3, r1
 800176c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001770:	e00a      	b.n	8001788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4908      	ldr	r1, [pc, #32]	@ (8001798 <__NVIC_SetPriority+0x50>)
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	3b04      	subs	r3, #4
 8001780:	0112      	lsls	r2, r2, #4
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	440b      	add	r3, r1
 8001786:	761a      	strb	r2, [r3, #24]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000e100 	.word	0xe000e100
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800179c:	b480      	push	{r7}
 800179e:	b089      	sub	sp, #36	@ 0x24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f1c3 0307 	rsb	r3, r3, #7
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	bf28      	it	cs
 80017ba:	2304      	movcs	r3, #4
 80017bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3304      	adds	r3, #4
 80017c2:	2b06      	cmp	r3, #6
 80017c4:	d902      	bls.n	80017cc <NVIC_EncodePriority+0x30>
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3b03      	subs	r3, #3
 80017ca:	e000      	b.n	80017ce <NVIC_EncodePriority+0x32>
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	f04f 32ff 	mov.w	r2, #4294967295
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43da      	mvns	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	401a      	ands	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e4:	f04f 31ff 	mov.w	r1, #4294967295
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	fa01 f303 	lsl.w	r3, r1, r3
 80017ee:	43d9      	mvns	r1, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f4:	4313      	orrs	r3, r2
         );
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3724      	adds	r7, #36	@ 0x24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr

08001802 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	b082      	sub	sp, #8
 8001806:	af00      	add	r7, sp, #0
 8001808:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f7ff ff4c 	bl	80016a8 <__NVIC_SetPriorityGrouping>
}
 8001810:	bf00      	nop
 8001812:	3708      	adds	r7, #8
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001818:	b580      	push	{r7, lr}
 800181a:	b086      	sub	sp, #24
 800181c:	af00      	add	r7, sp, #0
 800181e:	4603      	mov	r3, r0
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
 8001824:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800182a:	f7ff ff61 	bl	80016f0 <__NVIC_GetPriorityGrouping>
 800182e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001830:	687a      	ldr	r2, [r7, #4]
 8001832:	68b9      	ldr	r1, [r7, #8]
 8001834:	6978      	ldr	r0, [r7, #20]
 8001836:	f7ff ffb1 	bl	800179c <NVIC_EncodePriority>
 800183a:	4602      	mov	r2, r0
 800183c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001840:	4611      	mov	r1, r2
 8001842:	4618      	mov	r0, r3
 8001844:	f7ff ff80 	bl	8001748 <__NVIC_SetPriority>
}
 8001848:	bf00      	nop
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}

08001850 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	4603      	mov	r3, r0
 8001858:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	4618      	mov	r0, r3
 8001860:	f7ff ff54 	bl	800170c <__NVIC_EnableIRQ>
}
 8001864:	bf00      	nop
 8001866:	3708      	adds	r7, #8
 8001868:	46bd      	mov	sp, r7
 800186a:	bd80      	pop	{r7, pc}

0800186c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b082      	sub	sp, #8
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e00e      	b.n	800189c <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	795b      	ldrb	r3, [r3, #5]
 8001882:	b2db      	uxtb	r3, r3
 8001884:	2b00      	cmp	r3, #0
 8001886:	d105      	bne.n	8001894 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2200      	movs	r2, #0
 800188c:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff fa2c 	bl	8000cec <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	2201      	movs	r2, #1
 8001898:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800189a:	2300      	movs	r3, #0
}
 800189c:	4618      	mov	r0, r3
 800189e:	3708      	adds	r7, #8
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}

080018a4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d101      	bne.n	80018b6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e03b      	b.n	800192e <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80018bc:	b2db      	uxtb	r3, r3
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d106      	bne.n	80018d0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2200      	movs	r2, #0
 80018c6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f7ff fa30 	bl	8000d30 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	2202      	movs	r2, #2
 80018d4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	430a      	orrs	r2, r1
 80018ec:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80018f4:	f023 0107 	bic.w	r1, r3, #7
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689a      	ldr	r2, [r3, #8]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	430a      	orrs	r2, r1
 8001902:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800190a:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800190e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	68d1      	ldr	r1, [r2, #12]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6812      	ldr	r2, [r2, #0]
 800191a:	430b      	orrs	r3, r1
 800191c:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2200      	movs	r2, #0
 8001922:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 800192c:	2300      	movs	r3, #0
}
 800192e:	4618      	mov	r0, r3
 8001930:	3708      	adds	r7, #8
 8001932:	46bd      	mov	sp, r7
 8001934:	bd80      	pop	{r7, pc}

08001936 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 8001936:	b580      	push	{r7, lr}
 8001938:	b084      	sub	sp, #16
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f003 0301 	and.w	r3, r3, #1
 8001954:	2b00      	cmp	r3, #0
 8001956:	d026      	beq.n	80019a6 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800195e:	2b00      	cmp	r3, #0
 8001960:	d021      	beq.n	80019a6 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001970:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001976:	f043 0201 	orr.w	r2, r3, #1
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2201      	movs	r2, #1
 8001984:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2204      	movs	r2, #4
 800198a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	695b      	ldr	r3, [r3, #20]
 800199a:	2b00      	cmp	r3, #0
 800199c:	d003      	beq.n	80019a6 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f003 0320 	and.w	r3, r3, #32
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d026      	beq.n	80019fe <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d021      	beq.n	80019fe <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80019c8:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2220      	movs	r2, #32
 80019d0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019d6:	f043 0202 	orr.w	r2, r3, #2
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	2204      	movs	r2, #4
 80019e2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	695b      	ldr	r3, [r3, #20]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d003      	beq.n	80019fe <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	695b      	ldr	r3, [r3, #20]
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f003 0308 	and.w	r3, r3, #8
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d026      	beq.n	8001a56 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d021      	beq.n	8001a56 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a20:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	2208      	movs	r2, #8
 8001a28:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a2e:	f043 0204 	orr.w	r2, r3, #4
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	2204      	movs	r2, #4
 8001a3a:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	695b      	ldr	r3, [r3, #20]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d003      	beq.n	8001a56 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	695b      	ldr	r3, [r3, #20]
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f003 0304 	and.w	r3, r3, #4
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d013      	beq.n	8001a88 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d00e      	beq.n	8001a88 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001a78:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2204      	movs	r2, #4
 8001a80:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 8001a82:	6878      	ldr	r0, [r7, #4]
 8001a84:	f000 f853 	bl	8001b2e <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d024      	beq.n	8001adc <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 8001a92:	68bb      	ldr	r3, [r7, #8]
 8001a94:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d01f      	beq.n	8001adc <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001aaa:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2202      	movs	r2, #2
 8001ab2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	691b      	ldr	r3, [r3, #16]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d003      	beq.n	8001adc <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	691b      	ldr	r3, [r3, #16]
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f003 0310 	and.w	r3, r3, #16
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d01f      	beq.n	8001b26 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d01a      	beq.n	8001b26 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001afe:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2210      	movs	r2, #16
 8001b06:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	2201      	movs	r2, #1
 8001b14:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 f80e 	bl	8001b42 <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 8001b26:	bf00      	nop
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001b2e:	b480      	push	{r7}
 8001b30:	b083      	sub	sp, #12
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 8001b36:	bf00      	nop
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr

08001b42 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 8001b42:	b480      	push	{r7}
 8001b44:	b083      	sub	sp, #12
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 8001b4a:	bf00      	nop
 8001b4c:	370c      	adds	r7, #12
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b54:	4770      	bx	lr
	...

08001b58 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8001b58:	b480      	push	{r7}
 8001b5a:	b087      	sub	sp, #28
 8001b5c:	af00      	add	r7, sp, #0
 8001b5e:	6078      	str	r0, [r7, #4]
 8001b60:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001b70:	2b01      	cmp	r3, #1
 8001b72:	d101      	bne.n	8001b78 <HAL_DMA2D_ConfigLayer+0x20>
 8001b74:	2302      	movs	r3, #2
 8001b76:	e079      	b.n	8001c6c <HAL_DMA2D_ConfigLayer+0x114>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2202      	movs	r2, #2
 8001b84:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	011b      	lsls	r3, r3, #4
 8001b8c:	3318      	adds	r3, #24
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	4413      	add	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8001b94:	693b      	ldr	r3, [r7, #16]
 8001b96:	685a      	ldr	r2, [r3, #4]
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	041b      	lsls	r3, r3, #16
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8001ba2:	4b35      	ldr	r3, [pc, #212]	@ (8001c78 <HAL_DMA2D_ConfigLayer+0x120>)
 8001ba4:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	2b0a      	cmp	r3, #10
 8001bac:	d003      	beq.n	8001bb6 <HAL_DMA2D_ConfigLayer+0x5e>
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	2b09      	cmp	r3, #9
 8001bb4:	d107      	bne.n	8001bc6 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	68db      	ldr	r3, [r3, #12]
 8001bba:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	617b      	str	r3, [r7, #20]
 8001bc4:	e005      	b.n	8001bd2 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	68db      	ldr	r3, [r3, #12]
 8001bca:	061b      	lsls	r3, r3, #24
 8001bcc:	697a      	ldr	r2, [r7, #20]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d120      	bne.n	8001c1a <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	43db      	mvns	r3, r3
 8001be2:	ea02 0103 	and.w	r1, r2, r3
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	693a      	ldr	r2, [r7, #16]
 8001bf6:	6812      	ldr	r2, [r2, #0]
 8001bf8:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	2b0a      	cmp	r3, #10
 8001c00:	d003      	beq.n	8001c0a <HAL_DMA2D_ConfigLayer+0xb2>
 8001c02:	693b      	ldr	r3, [r7, #16]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	2b09      	cmp	r3, #9
 8001c08:	d127      	bne.n	8001c5a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	68da      	ldr	r2, [r3, #12]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001c16:	629a      	str	r2, [r3, #40]	@ 0x28
 8001c18:	e01f      	b.n	8001c5a <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	69da      	ldr	r2, [r3, #28]
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	43db      	mvns	r3, r3
 8001c24:	ea02 0103 	and.w	r1, r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	697a      	ldr	r2, [r7, #20]
 8001c2e:	430a      	orrs	r2, r1
 8001c30:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	693a      	ldr	r2, [r7, #16]
 8001c38:	6812      	ldr	r2, [r2, #0]
 8001c3a:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	2b0a      	cmp	r3, #10
 8001c42:	d003      	beq.n	8001c4c <HAL_DMA2D_ConfigLayer+0xf4>
 8001c44:	693b      	ldr	r3, [r7, #16]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	2b09      	cmp	r3, #9
 8001c4a:	d106      	bne.n	8001c5a <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 8001c4c:	693b      	ldr	r3, [r7, #16]
 8001c4e:	68da      	ldr	r2, [r3, #12]
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001c58:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 8001c6a:	2300      	movs	r3, #0
}
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	371c      	adds	r7, #28
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr
 8001c78:	ff03000f 	.word	0xff03000f

08001c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b089      	sub	sp, #36	@ 0x24
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c86:	2300      	movs	r3, #0
 8001c88:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c92:	2300      	movs	r3, #0
 8001c94:	61fb      	str	r3, [r7, #28]
 8001c96:	e177      	b.n	8001f88 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c98:	2201      	movs	r2, #1
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	697a      	ldr	r2, [r7, #20]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001cac:	693a      	ldr	r2, [r7, #16]
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	f040 8166 	bne.w	8001f82 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	f003 0303 	and.w	r3, r3, #3
 8001cbe:	2b01      	cmp	r3, #1
 8001cc0:	d005      	beq.n	8001cce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cca:	2b02      	cmp	r3, #2
 8001ccc:	d130      	bne.n	8001d30 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	689b      	ldr	r3, [r3, #8]
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001cd4:	69fb      	ldr	r3, [r7, #28]
 8001cd6:	005b      	lsls	r3, r3, #1
 8001cd8:	2203      	movs	r2, #3
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	68da      	ldr	r2, [r3, #12]
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	005b      	lsls	r3, r3, #1
 8001cee:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf2:	69ba      	ldr	r2, [r7, #24]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	69ba      	ldr	r2, [r7, #24]
 8001cfc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d04:	2201      	movs	r2, #1
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	fa02 f303 	lsl.w	r3, r2, r3
 8001d0c:	43db      	mvns	r3, r3
 8001d0e:	69ba      	ldr	r2, [r7, #24]
 8001d10:	4013      	ands	r3, r2
 8001d12:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	091b      	lsrs	r3, r3, #4
 8001d1a:	f003 0201 	and.w	r2, r3, #1
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	fa02 f303 	lsl.w	r3, r2, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0303 	and.w	r3, r3, #3
 8001d38:	2b03      	cmp	r3, #3
 8001d3a:	d017      	beq.n	8001d6c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68db      	ldr	r3, [r3, #12]
 8001d40:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	005b      	lsls	r3, r3, #1
 8001d46:	2203      	movs	r2, #3
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	69ba      	ldr	r2, [r7, #24]
 8001d50:	4013      	ands	r3, r2
 8001d52:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d60:	69ba      	ldr	r2, [r7, #24]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f003 0303 	and.w	r3, r3, #3
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d123      	bne.n	8001dc0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	08da      	lsrs	r2, r3, #3
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	3208      	adds	r2, #8
 8001d80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d84:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	009b      	lsls	r3, r3, #2
 8001d8e:	220f      	movs	r2, #15
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	43db      	mvns	r3, r3
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4013      	ands	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	691a      	ldr	r2, [r3, #16]
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	f003 0307 	and.w	r3, r3, #7
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dac:	69ba      	ldr	r2, [r7, #24]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	08da      	lsrs	r2, r3, #3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3208      	adds	r2, #8
 8001dba:	69b9      	ldr	r1, [r7, #24]
 8001dbc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dc6:	69fb      	ldr	r3, [r7, #28]
 8001dc8:	005b      	lsls	r3, r3, #1
 8001dca:	2203      	movs	r2, #3
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	43db      	mvns	r3, r3
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	4013      	ands	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f003 0203 	and.w	r2, r3, #3
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	005b      	lsls	r3, r3, #1
 8001de4:	fa02 f303 	lsl.w	r3, r2, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	f000 80c0 	beq.w	8001f82 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
 8001e06:	4b66      	ldr	r3, [pc, #408]	@ (8001fa0 <HAL_GPIO_Init+0x324>)
 8001e08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e0a:	4a65      	ldr	r2, [pc, #404]	@ (8001fa0 <HAL_GPIO_Init+0x324>)
 8001e0c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001e10:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e12:	4b63      	ldr	r3, [pc, #396]	@ (8001fa0 <HAL_GPIO_Init+0x324>)
 8001e14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e16:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e1e:	4a61      	ldr	r2, [pc, #388]	@ (8001fa4 <HAL_GPIO_Init+0x328>)
 8001e20:	69fb      	ldr	r3, [r7, #28]
 8001e22:	089b      	lsrs	r3, r3, #2
 8001e24:	3302      	adds	r3, #2
 8001e26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	220f      	movs	r2, #15
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a58      	ldr	r2, [pc, #352]	@ (8001fa8 <HAL_GPIO_Init+0x32c>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d037      	beq.n	8001eba <HAL_GPIO_Init+0x23e>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a57      	ldr	r2, [pc, #348]	@ (8001fac <HAL_GPIO_Init+0x330>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d031      	beq.n	8001eb6 <HAL_GPIO_Init+0x23a>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a56      	ldr	r2, [pc, #344]	@ (8001fb0 <HAL_GPIO_Init+0x334>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d02b      	beq.n	8001eb2 <HAL_GPIO_Init+0x236>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a55      	ldr	r2, [pc, #340]	@ (8001fb4 <HAL_GPIO_Init+0x338>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d025      	beq.n	8001eae <HAL_GPIO_Init+0x232>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a54      	ldr	r2, [pc, #336]	@ (8001fb8 <HAL_GPIO_Init+0x33c>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d01f      	beq.n	8001eaa <HAL_GPIO_Init+0x22e>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	4a53      	ldr	r2, [pc, #332]	@ (8001fbc <HAL_GPIO_Init+0x340>)
 8001e6e:	4293      	cmp	r3, r2
 8001e70:	d019      	beq.n	8001ea6 <HAL_GPIO_Init+0x22a>
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	4a52      	ldr	r2, [pc, #328]	@ (8001fc0 <HAL_GPIO_Init+0x344>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d013      	beq.n	8001ea2 <HAL_GPIO_Init+0x226>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a51      	ldr	r2, [pc, #324]	@ (8001fc4 <HAL_GPIO_Init+0x348>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d00d      	beq.n	8001e9e <HAL_GPIO_Init+0x222>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a50      	ldr	r2, [pc, #320]	@ (8001fc8 <HAL_GPIO_Init+0x34c>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d007      	beq.n	8001e9a <HAL_GPIO_Init+0x21e>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a4f      	ldr	r2, [pc, #316]	@ (8001fcc <HAL_GPIO_Init+0x350>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d101      	bne.n	8001e96 <HAL_GPIO_Init+0x21a>
 8001e92:	2309      	movs	r3, #9
 8001e94:	e012      	b.n	8001ebc <HAL_GPIO_Init+0x240>
 8001e96:	230a      	movs	r3, #10
 8001e98:	e010      	b.n	8001ebc <HAL_GPIO_Init+0x240>
 8001e9a:	2308      	movs	r3, #8
 8001e9c:	e00e      	b.n	8001ebc <HAL_GPIO_Init+0x240>
 8001e9e:	2307      	movs	r3, #7
 8001ea0:	e00c      	b.n	8001ebc <HAL_GPIO_Init+0x240>
 8001ea2:	2306      	movs	r3, #6
 8001ea4:	e00a      	b.n	8001ebc <HAL_GPIO_Init+0x240>
 8001ea6:	2305      	movs	r3, #5
 8001ea8:	e008      	b.n	8001ebc <HAL_GPIO_Init+0x240>
 8001eaa:	2304      	movs	r3, #4
 8001eac:	e006      	b.n	8001ebc <HAL_GPIO_Init+0x240>
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e004      	b.n	8001ebc <HAL_GPIO_Init+0x240>
 8001eb2:	2302      	movs	r3, #2
 8001eb4:	e002      	b.n	8001ebc <HAL_GPIO_Init+0x240>
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e000      	b.n	8001ebc <HAL_GPIO_Init+0x240>
 8001eba:	2300      	movs	r3, #0
 8001ebc:	69fa      	ldr	r2, [r7, #28]
 8001ebe:	f002 0203 	and.w	r2, r2, #3
 8001ec2:	0092      	lsls	r2, r2, #2
 8001ec4:	4093      	lsls	r3, r2
 8001ec6:	69ba      	ldr	r2, [r7, #24]
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ecc:	4935      	ldr	r1, [pc, #212]	@ (8001fa4 <HAL_GPIO_Init+0x328>)
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	089b      	lsrs	r3, r3, #2
 8001ed2:	3302      	adds	r3, #2
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eda:	4b3d      	ldr	r3, [pc, #244]	@ (8001fd0 <HAL_GPIO_Init+0x354>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	43db      	mvns	r3, r3
 8001ee4:	69ba      	ldr	r2, [r7, #24]
 8001ee6:	4013      	ands	r3, r2
 8001ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d003      	beq.n	8001efe <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001ef6:	69ba      	ldr	r2, [r7, #24]
 8001ef8:	693b      	ldr	r3, [r7, #16]
 8001efa:	4313      	orrs	r3, r2
 8001efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001efe:	4a34      	ldr	r2, [pc, #208]	@ (8001fd0 <HAL_GPIO_Init+0x354>)
 8001f00:	69bb      	ldr	r3, [r7, #24]
 8001f02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f04:	4b32      	ldr	r3, [pc, #200]	@ (8001fd0 <HAL_GPIO_Init+0x354>)
 8001f06:	68db      	ldr	r3, [r3, #12]
 8001f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f0a:	693b      	ldr	r3, [r7, #16]
 8001f0c:	43db      	mvns	r3, r3
 8001f0e:	69ba      	ldr	r2, [r7, #24]
 8001f10:	4013      	ands	r3, r2
 8001f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d003      	beq.n	8001f28 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f20:	69ba      	ldr	r2, [r7, #24]
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f28:	4a29      	ldr	r2, [pc, #164]	@ (8001fd0 <HAL_GPIO_Init+0x354>)
 8001f2a:	69bb      	ldr	r3, [r7, #24]
 8001f2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f2e:	4b28      	ldr	r3, [pc, #160]	@ (8001fd0 <HAL_GPIO_Init+0x354>)
 8001f30:	685b      	ldr	r3, [r3, #4]
 8001f32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f34:	693b      	ldr	r3, [r7, #16]
 8001f36:	43db      	mvns	r3, r3
 8001f38:	69ba      	ldr	r2, [r7, #24]
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d003      	beq.n	8001f52 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f4a:	69ba      	ldr	r2, [r7, #24]
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	4313      	orrs	r3, r2
 8001f50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f52:	4a1f      	ldr	r2, [pc, #124]	@ (8001fd0 <HAL_GPIO_Init+0x354>)
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f58:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd0 <HAL_GPIO_Init+0x354>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	43db      	mvns	r3, r3
 8001f62:	69ba      	ldr	r2, [r7, #24]
 8001f64:	4013      	ands	r3, r2
 8001f66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001f74:	69ba      	ldr	r2, [r7, #24]
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	4313      	orrs	r3, r2
 8001f7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f7c:	4a14      	ldr	r2, [pc, #80]	@ (8001fd0 <HAL_GPIO_Init+0x354>)
 8001f7e:	69bb      	ldr	r3, [r7, #24]
 8001f80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	3301      	adds	r3, #1
 8001f86:	61fb      	str	r3, [r7, #28]
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	2b0f      	cmp	r3, #15
 8001f8c:	f67f ae84 	bls.w	8001c98 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f90:	bf00      	nop
 8001f92:	bf00      	nop
 8001f94:	3724      	adds	r7, #36	@ 0x24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40013800 	.word	0x40013800
 8001fa8:	40020000 	.word	0x40020000
 8001fac:	40020400 	.word	0x40020400
 8001fb0:	40020800 	.word	0x40020800
 8001fb4:	40020c00 	.word	0x40020c00
 8001fb8:	40021000 	.word	0x40021000
 8001fbc:	40021400 	.word	0x40021400
 8001fc0:	40021800 	.word	0x40021800
 8001fc4:	40021c00 	.word	0x40021c00
 8001fc8:	40022000 	.word	0x40022000
 8001fcc:	40022400 	.word	0x40022400
 8001fd0:	40013c00 	.word	0x40013c00

08001fd4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
 8001fda:	6078      	str	r0, [r7, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	807b      	strh	r3, [r7, #2]
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001fe4:	787b      	ldrb	r3, [r7, #1]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001fea:	887a      	ldrh	r2, [r7, #2]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ff0:	e003      	b.n	8001ffa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ff2:	887b      	ldrh	r3, [r7, #2]
 8001ff4:	041a      	lsls	r2, r3, #16
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	619a      	str	r2, [r3, #24]
}
 8001ffa:	bf00      	nop
 8001ffc:	370c      	adds	r7, #12
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr

08002006 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002006:	b480      	push	{r7}
 8002008:	b085      	sub	sp, #20
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	460b      	mov	r3, r1
 8002010:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	695b      	ldr	r3, [r3, #20]
 8002016:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002018:	887a      	ldrh	r2, [r7, #2]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	4013      	ands	r3, r2
 800201e:	041a      	lsls	r2, r3, #16
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	43d9      	mvns	r1, r3
 8002024:	887b      	ldrh	r3, [r7, #2]
 8002026:	400b      	ands	r3, r1
 8002028:	431a      	orrs	r2, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	619a      	str	r2, [r3, #24]
}
 800202e:	bf00      	nop
 8002030:	3714      	adds	r7, #20
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr

0800203a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800203a:	b580      	push	{r7, lr}
 800203c:	b086      	sub	sp, #24
 800203e:	af02      	add	r7, sp, #8
 8002040:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d101      	bne.n	800204c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002048:	2301      	movs	r3, #1
 800204a:	e059      	b.n	8002100 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d106      	bne.n	800206c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002066:	6878      	ldr	r0, [r7, #4]
 8002068:	f007 ffd6 	bl	800a018 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2203      	movs	r2, #3
 8002070:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800207a:	d102      	bne.n	8002082 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2200      	movs	r2, #0
 8002080:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f004 fdef 	bl	8006c6a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6818      	ldr	r0, [r3, #0]
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	7c1a      	ldrb	r2, [r3, #16]
 8002094:	f88d 2000 	strb.w	r2, [sp]
 8002098:	3304      	adds	r3, #4
 800209a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800209c:	f004 fd70 	bl	8006b80 <USB_CoreInit>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d005      	beq.n	80020b2 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	2202      	movs	r2, #2
 80020aa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e026      	b.n	8002100 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2101      	movs	r1, #1
 80020b8:	4618      	mov	r0, r3
 80020ba:	f004 fde7 	bl	8006c8c <USB_SetCurrentMode>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2202      	movs	r2, #2
 80020c8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e017      	b.n	8002100 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6818      	ldr	r0, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	7c1a      	ldrb	r2, [r3, #16]
 80020d8:	f88d 2000 	strb.w	r2, [sp]
 80020dc:	3304      	adds	r3, #4
 80020de:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020e0:	f004 ff8a 	bl	8006ff8 <USB_HostInit>
 80020e4:	4603      	mov	r3, r0
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d005      	beq.n	80020f6 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2202      	movs	r2, #2
 80020ee:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e004      	b.n	8002100 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	2201      	movs	r2, #1
 80020fa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
}
 8002100:	4618      	mov	r0, r3
 8002102:	3710      	adds	r7, #16
 8002104:	46bd      	mov	sp, r7
 8002106:	bd80      	pop	{r7, pc}

08002108 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002108:	b590      	push	{r4, r7, lr}
 800210a:	b08b      	sub	sp, #44	@ 0x2c
 800210c:	af04      	add	r7, sp, #16
 800210e:	6078      	str	r0, [r7, #4]
 8002110:	4608      	mov	r0, r1
 8002112:	4611      	mov	r1, r2
 8002114:	461a      	mov	r2, r3
 8002116:	4603      	mov	r3, r0
 8002118:	70fb      	strb	r3, [r7, #3]
 800211a:	460b      	mov	r3, r1
 800211c:	70bb      	strb	r3, [r7, #2]
 800211e:	4613      	mov	r3, r2
 8002120:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8002122:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8002124:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800212c:	2b01      	cmp	r3, #1
 800212e:	d101      	bne.n	8002134 <HAL_HCD_HC_Init+0x2c>
 8002130:	2302      	movs	r3, #2
 8002132:	e09d      	b.n	8002270 <HAL_HCD_HC_Init+0x168>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2201      	movs	r2, #1
 8002138:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800213c:	78fa      	ldrb	r2, [r7, #3]
 800213e:	6879      	ldr	r1, [r7, #4]
 8002140:	4613      	mov	r3, r2
 8002142:	011b      	lsls	r3, r3, #4
 8002144:	1a9b      	subs	r3, r3, r2
 8002146:	009b      	lsls	r3, r3, #2
 8002148:	440b      	add	r3, r1
 800214a:	3319      	adds	r3, #25
 800214c:	2200      	movs	r2, #0
 800214e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002150:	78fa      	ldrb	r2, [r7, #3]
 8002152:	6879      	ldr	r1, [r7, #4]
 8002154:	4613      	mov	r3, r2
 8002156:	011b      	lsls	r3, r3, #4
 8002158:	1a9b      	subs	r3, r3, r2
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	440b      	add	r3, r1
 800215e:	3314      	adds	r3, #20
 8002160:	787a      	ldrb	r2, [r7, #1]
 8002162:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002164:	78fa      	ldrb	r2, [r7, #3]
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	011b      	lsls	r3, r3, #4
 800216c:	1a9b      	subs	r3, r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	3315      	adds	r3, #21
 8002174:	78fa      	ldrb	r2, [r7, #3]
 8002176:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002178:	78fa      	ldrb	r2, [r7, #3]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	011b      	lsls	r3, r3, #4
 8002180:	1a9b      	subs	r3, r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	3326      	adds	r3, #38	@ 0x26
 8002188:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800218c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800218e:	78fa      	ldrb	r2, [r7, #3]
 8002190:	78bb      	ldrb	r3, [r7, #2]
 8002192:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002196:	b2d8      	uxtb	r0, r3
 8002198:	6879      	ldr	r1, [r7, #4]
 800219a:	4613      	mov	r3, r2
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	1a9b      	subs	r3, r3, r2
 80021a0:	009b      	lsls	r3, r3, #2
 80021a2:	440b      	add	r3, r1
 80021a4:	3316      	adds	r3, #22
 80021a6:	4602      	mov	r2, r0
 80021a8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80021aa:	78fb      	ldrb	r3, [r7, #3]
 80021ac:	4619      	mov	r1, r3
 80021ae:	6878      	ldr	r0, [r7, #4]
 80021b0:	f000 fbc8 	bl	8002944 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80021b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	da0a      	bge.n	80021d2 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80021bc:	78fa      	ldrb	r2, [r7, #3]
 80021be:	6879      	ldr	r1, [r7, #4]
 80021c0:	4613      	mov	r3, r2
 80021c2:	011b      	lsls	r3, r3, #4
 80021c4:	1a9b      	subs	r3, r3, r2
 80021c6:	009b      	lsls	r3, r3, #2
 80021c8:	440b      	add	r3, r1
 80021ca:	3317      	adds	r3, #23
 80021cc:	2201      	movs	r2, #1
 80021ce:	701a      	strb	r2, [r3, #0]
 80021d0:	e009      	b.n	80021e6 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80021d2:	78fa      	ldrb	r2, [r7, #3]
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	011b      	lsls	r3, r3, #4
 80021da:	1a9b      	subs	r3, r3, r2
 80021dc:	009b      	lsls	r3, r3, #2
 80021de:	440b      	add	r3, r1
 80021e0:	3317      	adds	r3, #23
 80021e2:	2200      	movs	r2, #0
 80021e4:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f005 f868 	bl	80072c0 <USB_GetHostSpeed>
 80021f0:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 80021f2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d10b      	bne.n	8002212 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 80021fa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d107      	bne.n	8002212 <HAL_HCD_HC_Init+0x10a>
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d104      	bne.n	8002212 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	2bbc      	cmp	r3, #188	@ 0xbc
 800220c:	d901      	bls.n	8002212 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800220e:	23bc      	movs	r3, #188	@ 0xbc
 8002210:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8002212:	78fa      	ldrb	r2, [r7, #3]
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	011b      	lsls	r3, r3, #4
 800221a:	1a9b      	subs	r3, r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	440b      	add	r3, r1
 8002220:	3318      	adds	r3, #24
 8002222:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002226:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002228:	78fa      	ldrb	r2, [r7, #3]
 800222a:	697b      	ldr	r3, [r7, #20]
 800222c:	b298      	uxth	r0, r3
 800222e:	6879      	ldr	r1, [r7, #4]
 8002230:	4613      	mov	r3, r2
 8002232:	011b      	lsls	r3, r3, #4
 8002234:	1a9b      	subs	r3, r3, r2
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	440b      	add	r3, r1
 800223a:	3328      	adds	r3, #40	@ 0x28
 800223c:	4602      	mov	r2, r0
 800223e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6818      	ldr	r0, [r3, #0]
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	b29b      	uxth	r3, r3
 8002248:	787c      	ldrb	r4, [r7, #1]
 800224a:	78ba      	ldrb	r2, [r7, #2]
 800224c:	78f9      	ldrb	r1, [r7, #3]
 800224e:	9302      	str	r3, [sp, #8]
 8002250:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002254:	9301      	str	r3, [sp, #4]
 8002256:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	4623      	mov	r3, r4
 800225e:	f005 f857 	bl	8007310 <USB_HC_Init>
 8002262:	4603      	mov	r3, r0
 8002264:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800226e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002270:	4618      	mov	r0, r3
 8002272:	371c      	adds	r7, #28
 8002274:	46bd      	mov	sp, r7
 8002276:	bd90      	pop	{r4, r7, pc}

08002278 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
 8002280:	460b      	mov	r3, r1
 8002282:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002284:	2300      	movs	r3, #0
 8002286:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800228e:	2b01      	cmp	r3, #1
 8002290:	d101      	bne.n	8002296 <HAL_HCD_HC_Halt+0x1e>
 8002292:	2302      	movs	r3, #2
 8002294:	e00f      	b.n	80022b6 <HAL_HCD_HC_Halt+0x3e>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2201      	movs	r2, #1
 800229a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	78fa      	ldrb	r2, [r7, #3]
 80022a4:	4611      	mov	r1, r2
 80022a6:	4618      	mov	r0, r3
 80022a8:	f005 fbe9 	bl	8007a7e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	2200      	movs	r2, #0
 80022b0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3710      	adds	r7, #16
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
	...

080022c0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b082      	sub	sp, #8
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	4608      	mov	r0, r1
 80022ca:	4611      	mov	r1, r2
 80022cc:	461a      	mov	r2, r3
 80022ce:	4603      	mov	r3, r0
 80022d0:	70fb      	strb	r3, [r7, #3]
 80022d2:	460b      	mov	r3, r1
 80022d4:	70bb      	strb	r3, [r7, #2]
 80022d6:	4613      	mov	r3, r2
 80022d8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80022da:	78fa      	ldrb	r2, [r7, #3]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	1a9b      	subs	r3, r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	440b      	add	r3, r1
 80022e8:	3317      	adds	r3, #23
 80022ea:	78ba      	ldrb	r2, [r7, #2]
 80022ec:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80022ee:	78fa      	ldrb	r2, [r7, #3]
 80022f0:	6879      	ldr	r1, [r7, #4]
 80022f2:	4613      	mov	r3, r2
 80022f4:	011b      	lsls	r3, r3, #4
 80022f6:	1a9b      	subs	r3, r3, r2
 80022f8:	009b      	lsls	r3, r3, #2
 80022fa:	440b      	add	r3, r1
 80022fc:	3326      	adds	r3, #38	@ 0x26
 80022fe:	787a      	ldrb	r2, [r7, #1]
 8002300:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002302:	7c3b      	ldrb	r3, [r7, #16]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d114      	bne.n	8002332 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002308:	78fa      	ldrb	r2, [r7, #3]
 800230a:	6879      	ldr	r1, [r7, #4]
 800230c:	4613      	mov	r3, r2
 800230e:	011b      	lsls	r3, r3, #4
 8002310:	1a9b      	subs	r3, r3, r2
 8002312:	009b      	lsls	r3, r3, #2
 8002314:	440b      	add	r3, r1
 8002316:	332a      	adds	r3, #42	@ 0x2a
 8002318:	2203      	movs	r2, #3
 800231a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800231c:	78fa      	ldrb	r2, [r7, #3]
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	011b      	lsls	r3, r3, #4
 8002324:	1a9b      	subs	r3, r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	3319      	adds	r3, #25
 800232c:	7f3a      	ldrb	r2, [r7, #28]
 800232e:	701a      	strb	r2, [r3, #0]
 8002330:	e009      	b.n	8002346 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002332:	78fa      	ldrb	r2, [r7, #3]
 8002334:	6879      	ldr	r1, [r7, #4]
 8002336:	4613      	mov	r3, r2
 8002338:	011b      	lsls	r3, r3, #4
 800233a:	1a9b      	subs	r3, r3, r2
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	440b      	add	r3, r1
 8002340:	332a      	adds	r3, #42	@ 0x2a
 8002342:	2202      	movs	r2, #2
 8002344:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002346:	787b      	ldrb	r3, [r7, #1]
 8002348:	2b03      	cmp	r3, #3
 800234a:	f200 8102 	bhi.w	8002552 <HAL_HCD_HC_SubmitRequest+0x292>
 800234e:	a201      	add	r2, pc, #4	@ (adr r2, 8002354 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002354:	08002365 	.word	0x08002365
 8002358:	0800253d 	.word	0x0800253d
 800235c:	08002429 	.word	0x08002429
 8002360:	080024b3 	.word	0x080024b3
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002364:	7c3b      	ldrb	r3, [r7, #16]
 8002366:	2b01      	cmp	r3, #1
 8002368:	f040 80f5 	bne.w	8002556 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800236c:	78bb      	ldrb	r3, [r7, #2]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d12d      	bne.n	80023ce <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002372:	8b3b      	ldrh	r3, [r7, #24]
 8002374:	2b00      	cmp	r3, #0
 8002376:	d109      	bne.n	800238c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002378:	78fa      	ldrb	r2, [r7, #3]
 800237a:	6879      	ldr	r1, [r7, #4]
 800237c:	4613      	mov	r3, r2
 800237e:	011b      	lsls	r3, r3, #4
 8002380:	1a9b      	subs	r3, r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	440b      	add	r3, r1
 8002386:	333d      	adds	r3, #61	@ 0x3d
 8002388:	2201      	movs	r2, #1
 800238a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800238c:	78fa      	ldrb	r2, [r7, #3]
 800238e:	6879      	ldr	r1, [r7, #4]
 8002390:	4613      	mov	r3, r2
 8002392:	011b      	lsls	r3, r3, #4
 8002394:	1a9b      	subs	r3, r3, r2
 8002396:	009b      	lsls	r3, r3, #2
 8002398:	440b      	add	r3, r1
 800239a:	333d      	adds	r3, #61	@ 0x3d
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d10a      	bne.n	80023b8 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023a2:	78fa      	ldrb	r2, [r7, #3]
 80023a4:	6879      	ldr	r1, [r7, #4]
 80023a6:	4613      	mov	r3, r2
 80023a8:	011b      	lsls	r3, r3, #4
 80023aa:	1a9b      	subs	r3, r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	440b      	add	r3, r1
 80023b0:	332a      	adds	r3, #42	@ 0x2a
 80023b2:	2200      	movs	r2, #0
 80023b4:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80023b6:	e0ce      	b.n	8002556 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023b8:	78fa      	ldrb	r2, [r7, #3]
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	4613      	mov	r3, r2
 80023be:	011b      	lsls	r3, r3, #4
 80023c0:	1a9b      	subs	r3, r3, r2
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	440b      	add	r3, r1
 80023c6:	332a      	adds	r3, #42	@ 0x2a
 80023c8:	2202      	movs	r2, #2
 80023ca:	701a      	strb	r2, [r3, #0]
      break;
 80023cc:	e0c3      	b.n	8002556 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80023ce:	78fa      	ldrb	r2, [r7, #3]
 80023d0:	6879      	ldr	r1, [r7, #4]
 80023d2:	4613      	mov	r3, r2
 80023d4:	011b      	lsls	r3, r3, #4
 80023d6:	1a9b      	subs	r3, r3, r2
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	440b      	add	r3, r1
 80023dc:	331a      	adds	r3, #26
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	f040 80b8 	bne.w	8002556 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80023e6:	78fa      	ldrb	r2, [r7, #3]
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	4613      	mov	r3, r2
 80023ec:	011b      	lsls	r3, r3, #4
 80023ee:	1a9b      	subs	r3, r3, r2
 80023f0:	009b      	lsls	r3, r3, #2
 80023f2:	440b      	add	r3, r1
 80023f4:	333c      	adds	r3, #60	@ 0x3c
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d10a      	bne.n	8002412 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023fc:	78fa      	ldrb	r2, [r7, #3]
 80023fe:	6879      	ldr	r1, [r7, #4]
 8002400:	4613      	mov	r3, r2
 8002402:	011b      	lsls	r3, r3, #4
 8002404:	1a9b      	subs	r3, r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	440b      	add	r3, r1
 800240a:	332a      	adds	r3, #42	@ 0x2a
 800240c:	2200      	movs	r2, #0
 800240e:	701a      	strb	r2, [r3, #0]
      break;
 8002410:	e0a1      	b.n	8002556 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002412:	78fa      	ldrb	r2, [r7, #3]
 8002414:	6879      	ldr	r1, [r7, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	011b      	lsls	r3, r3, #4
 800241a:	1a9b      	subs	r3, r3, r2
 800241c:	009b      	lsls	r3, r3, #2
 800241e:	440b      	add	r3, r1
 8002420:	332a      	adds	r3, #42	@ 0x2a
 8002422:	2202      	movs	r2, #2
 8002424:	701a      	strb	r2, [r3, #0]
      break;
 8002426:	e096      	b.n	8002556 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002428:	78bb      	ldrb	r3, [r7, #2]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d120      	bne.n	8002470 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800242e:	78fa      	ldrb	r2, [r7, #3]
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	011b      	lsls	r3, r3, #4
 8002436:	1a9b      	subs	r3, r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	440b      	add	r3, r1
 800243c:	333d      	adds	r3, #61	@ 0x3d
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d10a      	bne.n	800245a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002444:	78fa      	ldrb	r2, [r7, #3]
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	4613      	mov	r3, r2
 800244a:	011b      	lsls	r3, r3, #4
 800244c:	1a9b      	subs	r3, r3, r2
 800244e:	009b      	lsls	r3, r3, #2
 8002450:	440b      	add	r3, r1
 8002452:	332a      	adds	r3, #42	@ 0x2a
 8002454:	2200      	movs	r2, #0
 8002456:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002458:	e07e      	b.n	8002558 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800245a:	78fa      	ldrb	r2, [r7, #3]
 800245c:	6879      	ldr	r1, [r7, #4]
 800245e:	4613      	mov	r3, r2
 8002460:	011b      	lsls	r3, r3, #4
 8002462:	1a9b      	subs	r3, r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	440b      	add	r3, r1
 8002468:	332a      	adds	r3, #42	@ 0x2a
 800246a:	2202      	movs	r2, #2
 800246c:	701a      	strb	r2, [r3, #0]
      break;
 800246e:	e073      	b.n	8002558 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002470:	78fa      	ldrb	r2, [r7, #3]
 8002472:	6879      	ldr	r1, [r7, #4]
 8002474:	4613      	mov	r3, r2
 8002476:	011b      	lsls	r3, r3, #4
 8002478:	1a9b      	subs	r3, r3, r2
 800247a:	009b      	lsls	r3, r3, #2
 800247c:	440b      	add	r3, r1
 800247e:	333c      	adds	r3, #60	@ 0x3c
 8002480:	781b      	ldrb	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10a      	bne.n	800249c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002486:	78fa      	ldrb	r2, [r7, #3]
 8002488:	6879      	ldr	r1, [r7, #4]
 800248a:	4613      	mov	r3, r2
 800248c:	011b      	lsls	r3, r3, #4
 800248e:	1a9b      	subs	r3, r3, r2
 8002490:	009b      	lsls	r3, r3, #2
 8002492:	440b      	add	r3, r1
 8002494:	332a      	adds	r3, #42	@ 0x2a
 8002496:	2200      	movs	r2, #0
 8002498:	701a      	strb	r2, [r3, #0]
      break;
 800249a:	e05d      	b.n	8002558 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800249c:	78fa      	ldrb	r2, [r7, #3]
 800249e:	6879      	ldr	r1, [r7, #4]
 80024a0:	4613      	mov	r3, r2
 80024a2:	011b      	lsls	r3, r3, #4
 80024a4:	1a9b      	subs	r3, r3, r2
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	440b      	add	r3, r1
 80024aa:	332a      	adds	r3, #42	@ 0x2a
 80024ac:	2202      	movs	r2, #2
 80024ae:	701a      	strb	r2, [r3, #0]
      break;
 80024b0:	e052      	b.n	8002558 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80024b2:	78bb      	ldrb	r3, [r7, #2]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d120      	bne.n	80024fa <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80024b8:	78fa      	ldrb	r2, [r7, #3]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	333d      	adds	r3, #61	@ 0x3d
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d10a      	bne.n	80024e4 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80024ce:	78fa      	ldrb	r2, [r7, #3]
 80024d0:	6879      	ldr	r1, [r7, #4]
 80024d2:	4613      	mov	r3, r2
 80024d4:	011b      	lsls	r3, r3, #4
 80024d6:	1a9b      	subs	r3, r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	440b      	add	r3, r1
 80024dc:	332a      	adds	r3, #42	@ 0x2a
 80024de:	2200      	movs	r2, #0
 80024e0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80024e2:	e039      	b.n	8002558 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80024e4:	78fa      	ldrb	r2, [r7, #3]
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	4613      	mov	r3, r2
 80024ea:	011b      	lsls	r3, r3, #4
 80024ec:	1a9b      	subs	r3, r3, r2
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	440b      	add	r3, r1
 80024f2:	332a      	adds	r3, #42	@ 0x2a
 80024f4:	2202      	movs	r2, #2
 80024f6:	701a      	strb	r2, [r3, #0]
      break;
 80024f8:	e02e      	b.n	8002558 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80024fa:	78fa      	ldrb	r2, [r7, #3]
 80024fc:	6879      	ldr	r1, [r7, #4]
 80024fe:	4613      	mov	r3, r2
 8002500:	011b      	lsls	r3, r3, #4
 8002502:	1a9b      	subs	r3, r3, r2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	440b      	add	r3, r1
 8002508:	333c      	adds	r3, #60	@ 0x3c
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10a      	bne.n	8002526 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002510:	78fa      	ldrb	r2, [r7, #3]
 8002512:	6879      	ldr	r1, [r7, #4]
 8002514:	4613      	mov	r3, r2
 8002516:	011b      	lsls	r3, r3, #4
 8002518:	1a9b      	subs	r3, r3, r2
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	440b      	add	r3, r1
 800251e:	332a      	adds	r3, #42	@ 0x2a
 8002520:	2200      	movs	r2, #0
 8002522:	701a      	strb	r2, [r3, #0]
      break;
 8002524:	e018      	b.n	8002558 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002526:	78fa      	ldrb	r2, [r7, #3]
 8002528:	6879      	ldr	r1, [r7, #4]
 800252a:	4613      	mov	r3, r2
 800252c:	011b      	lsls	r3, r3, #4
 800252e:	1a9b      	subs	r3, r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	440b      	add	r3, r1
 8002534:	332a      	adds	r3, #42	@ 0x2a
 8002536:	2202      	movs	r2, #2
 8002538:	701a      	strb	r2, [r3, #0]
      break;
 800253a:	e00d      	b.n	8002558 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800253c:	78fa      	ldrb	r2, [r7, #3]
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	011b      	lsls	r3, r3, #4
 8002544:	1a9b      	subs	r3, r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	332a      	adds	r3, #42	@ 0x2a
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]
      break;
 8002550:	e002      	b.n	8002558 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002552:	bf00      	nop
 8002554:	e000      	b.n	8002558 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002556:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002558:	78fa      	ldrb	r2, [r7, #3]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	4613      	mov	r3, r2
 800255e:	011b      	lsls	r3, r3, #4
 8002560:	1a9b      	subs	r3, r3, r2
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	440b      	add	r3, r1
 8002566:	332c      	adds	r3, #44	@ 0x2c
 8002568:	697a      	ldr	r2, [r7, #20]
 800256a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800256c:	78fa      	ldrb	r2, [r7, #3]
 800256e:	8b39      	ldrh	r1, [r7, #24]
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	4613      	mov	r3, r2
 8002574:	011b      	lsls	r3, r3, #4
 8002576:	1a9b      	subs	r3, r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	4403      	add	r3, r0
 800257c:	3334      	adds	r3, #52	@ 0x34
 800257e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002580:	78fa      	ldrb	r2, [r7, #3]
 8002582:	6879      	ldr	r1, [r7, #4]
 8002584:	4613      	mov	r3, r2
 8002586:	011b      	lsls	r3, r3, #4
 8002588:	1a9b      	subs	r3, r3, r2
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	440b      	add	r3, r1
 800258e:	334c      	adds	r3, #76	@ 0x4c
 8002590:	2200      	movs	r2, #0
 8002592:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002594:	78fa      	ldrb	r2, [r7, #3]
 8002596:	6879      	ldr	r1, [r7, #4]
 8002598:	4613      	mov	r3, r2
 800259a:	011b      	lsls	r3, r3, #4
 800259c:	1a9b      	subs	r3, r3, r2
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	440b      	add	r3, r1
 80025a2:	3338      	adds	r3, #56	@ 0x38
 80025a4:	2200      	movs	r2, #0
 80025a6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80025a8:	78fa      	ldrb	r2, [r7, #3]
 80025aa:	6879      	ldr	r1, [r7, #4]
 80025ac:	4613      	mov	r3, r2
 80025ae:	011b      	lsls	r3, r3, #4
 80025b0:	1a9b      	subs	r3, r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	3315      	adds	r3, #21
 80025b8:	78fa      	ldrb	r2, [r7, #3]
 80025ba:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80025bc:	78fa      	ldrb	r2, [r7, #3]
 80025be:	6879      	ldr	r1, [r7, #4]
 80025c0:	4613      	mov	r3, r2
 80025c2:	011b      	lsls	r3, r3, #4
 80025c4:	1a9b      	subs	r3, r3, r2
 80025c6:	009b      	lsls	r3, r3, #2
 80025c8:	440b      	add	r3, r1
 80025ca:	334d      	adds	r3, #77	@ 0x4d
 80025cc:	2200      	movs	r2, #0
 80025ce:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6818      	ldr	r0, [r3, #0]
 80025d4:	78fa      	ldrb	r2, [r7, #3]
 80025d6:	4613      	mov	r3, r2
 80025d8:	011b      	lsls	r3, r3, #4
 80025da:	1a9b      	subs	r3, r3, r2
 80025dc:	009b      	lsls	r3, r3, #2
 80025de:	3310      	adds	r3, #16
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	4413      	add	r3, r2
 80025e4:	1d19      	adds	r1, r3, #4
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	799b      	ldrb	r3, [r3, #6]
 80025ea:	461a      	mov	r2, r3
 80025ec:	f004 ffbc 	bl	8007568 <USB_HC_StartXfer>
 80025f0:	4603      	mov	r3, r0
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3708      	adds	r7, #8
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bd80      	pop	{r7, pc}
 80025fa:	bf00      	nop

080025fc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b086      	sub	sp, #24
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f004 fcb0 	bl	8006f78 <USB_GetMode>
 8002618:	4603      	mov	r3, r0
 800261a:	2b01      	cmp	r3, #1
 800261c:	f040 80fb 	bne.w	8002816 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4618      	mov	r0, r3
 8002626:	f004 fc73 	bl	8006f10 <USB_ReadInterrupts>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	f000 80f1 	beq.w	8002814 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	4618      	mov	r0, r3
 8002638:	f004 fc6a 	bl	8006f10 <USB_ReadInterrupts>
 800263c:	4603      	mov	r3, r0
 800263e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002642:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002646:	d104      	bne.n	8002652 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002650:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	4618      	mov	r0, r3
 8002658:	f004 fc5a 	bl	8006f10 <USB_ReadInterrupts>
 800265c:	4603      	mov	r3, r0
 800265e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002662:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002666:	d104      	bne.n	8002672 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002670:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f004 fc4a 	bl	8006f10 <USB_ReadInterrupts>
 800267c:	4603      	mov	r3, r0
 800267e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002682:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002686:	d104      	bne.n	8002692 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002690:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f004 fc3a 	bl	8006f10 <USB_ReadInterrupts>
 800269c:	4603      	mov	r3, r0
 800269e:	f003 0302 	and.w	r3, r3, #2
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d103      	bne.n	80026ae <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	2202      	movs	r2, #2
 80026ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4618      	mov	r0, r3
 80026b4:	f004 fc2c 	bl	8006f10 <USB_ReadInterrupts>
 80026b8:	4603      	mov	r3, r0
 80026ba:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80026be:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80026c2:	d120      	bne.n	8002706 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80026cc:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0301 	and.w	r3, r3, #1
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d113      	bne.n	8002706 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80026de:	2110      	movs	r1, #16
 80026e0:	6938      	ldr	r0, [r7, #16]
 80026e2:	f004 fb1f 	bl	8006d24 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80026e6:	6938      	ldr	r0, [r7, #16]
 80026e8:	f004 fb4e 	bl	8006d88 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	7a5b      	ldrb	r3, [r3, #9]
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d105      	bne.n	8002700 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	2101      	movs	r1, #1
 80026fa:	4618      	mov	r0, r3
 80026fc:	f004 fd40 	bl	8007180 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f007 fd03 	bl	800a10c <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f004 fc00 	bl	8006f10 <USB_ReadInterrupts>
 8002710:	4603      	mov	r3, r0
 8002712:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002716:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800271a:	d102      	bne.n	8002722 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f001 fd4d 	bl	80041bc <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	4618      	mov	r0, r3
 8002728:	f004 fbf2 	bl	8006f10 <USB_ReadInterrupts>
 800272c:	4603      	mov	r3, r0
 800272e:	f003 0308 	and.w	r3, r3, #8
 8002732:	2b08      	cmp	r3, #8
 8002734:	d106      	bne.n	8002744 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f007 fccc 	bl	800a0d4 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	2208      	movs	r2, #8
 8002742:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f004 fbe1 	bl	8006f10 <USB_ReadInterrupts>
 800274e:	4603      	mov	r3, r0
 8002750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002754:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002758:	d139      	bne.n	80027ce <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4618      	mov	r0, r3
 8002760:	f005 f97c 	bl	8007a5c <USB_HC_ReadInterrupt>
 8002764:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002766:	2300      	movs	r3, #0
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	e025      	b.n	80027b8 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	f003 030f 	and.w	r3, r3, #15
 8002772:	68ba      	ldr	r2, [r7, #8]
 8002774:	fa22 f303 	lsr.w	r3, r2, r3
 8002778:	f003 0301 	and.w	r3, r3, #1
 800277c:	2b00      	cmp	r3, #0
 800277e:	d018      	beq.n	80027b2 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	015a      	lsls	r2, r3, #5
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4413      	add	r3, r2
 8002788:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002792:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002796:	d106      	bne.n	80027a6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002798:	697b      	ldr	r3, [r7, #20]
 800279a:	b2db      	uxtb	r3, r3
 800279c:	4619      	mov	r1, r3
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 f905 	bl	80029ae <HCD_HC_IN_IRQHandler>
 80027a4:	e005      	b.n	80027b2 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	4619      	mov	r1, r3
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 ff67 	bl	8003680 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	3301      	adds	r3, #1
 80027b6:	617b      	str	r3, [r7, #20]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	795b      	ldrb	r3, [r3, #5]
 80027bc:	461a      	mov	r2, r3
 80027be:	697b      	ldr	r3, [r7, #20]
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d3d3      	bcc.n	800276c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80027cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f004 fb9c 	bl	8006f10 <USB_ReadInterrupts>
 80027d8:	4603      	mov	r3, r0
 80027da:	f003 0310 	and.w	r3, r3, #16
 80027de:	2b10      	cmp	r3, #16
 80027e0:	d101      	bne.n	80027e6 <HAL_HCD_IRQHandler+0x1ea>
 80027e2:	2301      	movs	r3, #1
 80027e4:	e000      	b.n	80027e8 <HAL_HCD_IRQHandler+0x1ec>
 80027e6:	2300      	movs	r3, #0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d014      	beq.n	8002816 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	699a      	ldr	r2, [r3, #24]
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f022 0210 	bic.w	r2, r2, #16
 80027fa:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	f001 fbfe 	bl	8003ffe <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	699a      	ldr	r2, [r3, #24]
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f042 0210 	orr.w	r2, r2, #16
 8002810:	619a      	str	r2, [r3, #24]
 8002812:	e000      	b.n	8002816 <HAL_HCD_IRQHandler+0x21a>
      return;
 8002814:	bf00      	nop
    }
  }
}
 8002816:	3718      	adds	r7, #24
 8002818:	46bd      	mov	sp, r7
 800281a:	bd80      	pop	{r7, pc}

0800281c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b082      	sub	sp, #8
 8002820:	af00      	add	r7, sp, #0
 8002822:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800282a:	2b01      	cmp	r3, #1
 800282c:	d101      	bne.n	8002832 <HAL_HCD_Start+0x16>
 800282e:	2302      	movs	r3, #2
 8002830:	e013      	b.n	800285a <HAL_HCD_Start+0x3e>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	2201      	movs	r2, #1
 8002836:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2101      	movs	r1, #1
 8002840:	4618      	mov	r0, r3
 8002842:	f004 fd04 	bl	800724e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f004 f9fc 	bl	8006c48 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}

08002862 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b082      	sub	sp, #8
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002870:	2b01      	cmp	r3, #1
 8002872:	d101      	bne.n	8002878 <HAL_HCD_Stop+0x16>
 8002874:	2302      	movs	r3, #2
 8002876:	e00d      	b.n	8002894 <HAL_HCD_Stop+0x32>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2201      	movs	r2, #1
 800287c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f005 fa57 	bl	8007d38 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	4618      	mov	r0, r3
 80028aa:	f004 fca6 	bl	80071fa <USB_ResetPort>
 80028ae:	4603      	mov	r3, r0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	460b      	mov	r3, r1
 80028c2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80028c4:	78fa      	ldrb	r2, [r7, #3]
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	334c      	adds	r3, #76	@ 0x4c
 80028d4:	781b      	ldrb	r3, [r3, #0]
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr

080028e2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80028e2:	b480      	push	{r7}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	460b      	mov	r3, r1
 80028ec:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80028ee:	78fa      	ldrb	r2, [r7, #3]
 80028f0:	6879      	ldr	r1, [r7, #4]
 80028f2:	4613      	mov	r3, r2
 80028f4:	011b      	lsls	r3, r3, #4
 80028f6:	1a9b      	subs	r3, r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	440b      	add	r3, r1
 80028fc:	3338      	adds	r3, #56	@ 0x38
 80028fe:	681b      	ldr	r3, [r3, #0]
}
 8002900:	4618      	mov	r0, r3
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b082      	sub	sp, #8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4618      	mov	r0, r3
 800291a:	f004 fce8 	bl	80072ee <USB_GetCurrentFrame>
 800291e:	4603      	mov	r3, r0
}
 8002920:	4618      	mov	r0, r3
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f004 fcc3 	bl	80072c0 <USB_GetHostSpeed>
 800293a:	4603      	mov	r3, r0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3708      	adds	r7, #8
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}

08002944 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002944:	b480      	push	{r7}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	460b      	mov	r3, r1
 800294e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002950:	78fa      	ldrb	r2, [r7, #3]
 8002952:	6879      	ldr	r1, [r7, #4]
 8002954:	4613      	mov	r3, r2
 8002956:	011b      	lsls	r3, r3, #4
 8002958:	1a9b      	subs	r3, r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	440b      	add	r3, r1
 800295e:	331a      	adds	r3, #26
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002964:	78fa      	ldrb	r2, [r7, #3]
 8002966:	6879      	ldr	r1, [r7, #4]
 8002968:	4613      	mov	r3, r2
 800296a:	011b      	lsls	r3, r3, #4
 800296c:	1a9b      	subs	r3, r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	440b      	add	r3, r1
 8002972:	331b      	adds	r3, #27
 8002974:	2200      	movs	r2, #0
 8002976:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	3325      	adds	r3, #37	@ 0x25
 8002988:	2200      	movs	r2, #0
 800298a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800298c:	78fa      	ldrb	r2, [r7, #3]
 800298e:	6879      	ldr	r1, [r7, #4]
 8002990:	4613      	mov	r3, r2
 8002992:	011b      	lsls	r3, r3, #4
 8002994:	1a9b      	subs	r3, r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	440b      	add	r3, r1
 800299a:	3324      	adds	r3, #36	@ 0x24
 800299c:	2200      	movs	r2, #0
 800299e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80029ae:	b580      	push	{r7, lr}
 80029b0:	b086      	sub	sp, #24
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	6078      	str	r0, [r7, #4]
 80029b6:	460b      	mov	r3, r1
 80029b8:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	78fa      	ldrb	r2, [r7, #3]
 80029ca:	4611      	mov	r1, r2
 80029cc:	4618      	mov	r0, r3
 80029ce:	f004 fab2 	bl	8006f36 <USB_ReadChInterrupts>
 80029d2:	4603      	mov	r3, r0
 80029d4:	f003 0304 	and.w	r3, r3, #4
 80029d8:	2b04      	cmp	r3, #4
 80029da:	d11a      	bne.n	8002a12 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80029dc:	78fb      	ldrb	r3, [r7, #3]
 80029de:	015a      	lsls	r2, r3, #5
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029e8:	461a      	mov	r2, r3
 80029ea:	2304      	movs	r3, #4
 80029ec:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80029ee:	78fa      	ldrb	r2, [r7, #3]
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	1a9b      	subs	r3, r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	334d      	adds	r3, #77	@ 0x4d
 80029fe:	2207      	movs	r2, #7
 8002a00:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	78fa      	ldrb	r2, [r7, #3]
 8002a08:	4611      	mov	r1, r2
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f005 f837 	bl	8007a7e <USB_HC_Halt>
 8002a10:	e09e      	b.n	8002b50 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	78fa      	ldrb	r2, [r7, #3]
 8002a18:	4611      	mov	r1, r2
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f004 fa8b 	bl	8006f36 <USB_ReadChInterrupts>
 8002a20:	4603      	mov	r3, r0
 8002a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a2a:	d11b      	bne.n	8002a64 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002a2c:	78fb      	ldrb	r3, [r7, #3]
 8002a2e:	015a      	lsls	r2, r3, #5
 8002a30:	693b      	ldr	r3, [r7, #16]
 8002a32:	4413      	add	r3, r2
 8002a34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a38:	461a      	mov	r2, r3
 8002a3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002a3e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002a40:	78fa      	ldrb	r2, [r7, #3]
 8002a42:	6879      	ldr	r1, [r7, #4]
 8002a44:	4613      	mov	r3, r2
 8002a46:	011b      	lsls	r3, r3, #4
 8002a48:	1a9b      	subs	r3, r3, r2
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	334d      	adds	r3, #77	@ 0x4d
 8002a50:	2208      	movs	r2, #8
 8002a52:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	78fa      	ldrb	r2, [r7, #3]
 8002a5a:	4611      	mov	r1, r2
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	f005 f80e 	bl	8007a7e <USB_HC_Halt>
 8002a62:	e075      	b.n	8002b50 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	78fa      	ldrb	r2, [r7, #3]
 8002a6a:	4611      	mov	r1, r2
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f004 fa62 	bl	8006f36 <USB_ReadChInterrupts>
 8002a72:	4603      	mov	r3, r0
 8002a74:	f003 0308 	and.w	r3, r3, #8
 8002a78:	2b08      	cmp	r3, #8
 8002a7a:	d11a      	bne.n	8002ab2 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	015a      	lsls	r2, r3, #5
 8002a80:	693b      	ldr	r3, [r7, #16]
 8002a82:	4413      	add	r3, r2
 8002a84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a88:	461a      	mov	r2, r3
 8002a8a:	2308      	movs	r3, #8
 8002a8c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8002a8e:	78fa      	ldrb	r2, [r7, #3]
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	4613      	mov	r3, r2
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	1a9b      	subs	r3, r3, r2
 8002a98:	009b      	lsls	r3, r3, #2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	334d      	adds	r3, #77	@ 0x4d
 8002a9e:	2206      	movs	r2, #6
 8002aa0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	78fa      	ldrb	r2, [r7, #3]
 8002aa8:	4611      	mov	r1, r2
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f004 ffe7 	bl	8007a7e <USB_HC_Halt>
 8002ab0:	e04e      	b.n	8002b50 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	78fa      	ldrb	r2, [r7, #3]
 8002ab8:	4611      	mov	r1, r2
 8002aba:	4618      	mov	r0, r3
 8002abc:	f004 fa3b 	bl	8006f36 <USB_ReadChInterrupts>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002ac6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002aca:	d11b      	bne.n	8002b04 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002acc:	78fb      	ldrb	r3, [r7, #3]
 8002ace:	015a      	lsls	r2, r3, #5
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	4413      	add	r3, r2
 8002ad4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ad8:	461a      	mov	r2, r3
 8002ada:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002ade:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002ae0:	78fa      	ldrb	r2, [r7, #3]
 8002ae2:	6879      	ldr	r1, [r7, #4]
 8002ae4:	4613      	mov	r3, r2
 8002ae6:	011b      	lsls	r3, r3, #4
 8002ae8:	1a9b      	subs	r3, r3, r2
 8002aea:	009b      	lsls	r3, r3, #2
 8002aec:	440b      	add	r3, r1
 8002aee:	334d      	adds	r3, #77	@ 0x4d
 8002af0:	2209      	movs	r2, #9
 8002af2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	78fa      	ldrb	r2, [r7, #3]
 8002afa:	4611      	mov	r1, r2
 8002afc:	4618      	mov	r0, r3
 8002afe:	f004 ffbe 	bl	8007a7e <USB_HC_Halt>
 8002b02:	e025      	b.n	8002b50 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	78fa      	ldrb	r2, [r7, #3]
 8002b0a:	4611      	mov	r1, r2
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f004 fa12 	bl	8006f36 <USB_ReadChInterrupts>
 8002b12:	4603      	mov	r3, r0
 8002b14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b18:	2b80      	cmp	r3, #128	@ 0x80
 8002b1a:	d119      	bne.n	8002b50 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002b1c:	78fb      	ldrb	r3, [r7, #3]
 8002b1e:	015a      	lsls	r2, r3, #5
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4413      	add	r3, r2
 8002b24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b28:	461a      	mov	r2, r3
 8002b2a:	2380      	movs	r3, #128	@ 0x80
 8002b2c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002b2e:	78fa      	ldrb	r2, [r7, #3]
 8002b30:	6879      	ldr	r1, [r7, #4]
 8002b32:	4613      	mov	r3, r2
 8002b34:	011b      	lsls	r3, r3, #4
 8002b36:	1a9b      	subs	r3, r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	334d      	adds	r3, #77	@ 0x4d
 8002b3e:	2207      	movs	r2, #7
 8002b40:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	78fa      	ldrb	r2, [r7, #3]
 8002b48:	4611      	mov	r1, r2
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f004 ff97 	bl	8007a7e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	78fa      	ldrb	r2, [r7, #3]
 8002b56:	4611      	mov	r1, r2
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f004 f9ec 	bl	8006f36 <USB_ReadChInterrupts>
 8002b5e:	4603      	mov	r3, r0
 8002b60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002b64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002b68:	d112      	bne.n	8002b90 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	78fa      	ldrb	r2, [r7, #3]
 8002b70:	4611      	mov	r1, r2
 8002b72:	4618      	mov	r0, r3
 8002b74:	f004 ff83 	bl	8007a7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002b78:	78fb      	ldrb	r3, [r7, #3]
 8002b7a:	015a      	lsls	r2, r3, #5
 8002b7c:	693b      	ldr	r3, [r7, #16]
 8002b7e:	4413      	add	r3, r2
 8002b80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b84:	461a      	mov	r2, r3
 8002b86:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002b8a:	6093      	str	r3, [r2, #8]
 8002b8c:	f000 bd75 	b.w	800367a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	78fa      	ldrb	r2, [r7, #3]
 8002b96:	4611      	mov	r1, r2
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f004 f9cc 	bl	8006f36 <USB_ReadChInterrupts>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	f040 8128 	bne.w	8002dfa <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002baa:	78fb      	ldrb	r3, [r7, #3]
 8002bac:	015a      	lsls	r2, r3, #5
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	4413      	add	r3, r2
 8002bb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bb6:	461a      	mov	r2, r3
 8002bb8:	2320      	movs	r3, #32
 8002bba:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002bbc:	78fa      	ldrb	r2, [r7, #3]
 8002bbe:	6879      	ldr	r1, [r7, #4]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	011b      	lsls	r3, r3, #4
 8002bc4:	1a9b      	subs	r3, r3, r2
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	440b      	add	r3, r1
 8002bca:	331b      	adds	r3, #27
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d119      	bne.n	8002c06 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002bd2:	78fa      	ldrb	r2, [r7, #3]
 8002bd4:	6879      	ldr	r1, [r7, #4]
 8002bd6:	4613      	mov	r3, r2
 8002bd8:	011b      	lsls	r3, r3, #4
 8002bda:	1a9b      	subs	r3, r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	440b      	add	r3, r1
 8002be0:	331b      	adds	r3, #27
 8002be2:	2200      	movs	r2, #0
 8002be4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002be6:	78fb      	ldrb	r3, [r7, #3]
 8002be8:	015a      	lsls	r2, r3, #5
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	78fa      	ldrb	r2, [r7, #3]
 8002bf6:	0151      	lsls	r1, r2, #5
 8002bf8:	693a      	ldr	r2, [r7, #16]
 8002bfa:	440a      	add	r2, r1
 8002bfc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c00:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c04:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	799b      	ldrb	r3, [r3, #6]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d01b      	beq.n	8002c46 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002c0e:	78fa      	ldrb	r2, [r7, #3]
 8002c10:	6879      	ldr	r1, [r7, #4]
 8002c12:	4613      	mov	r3, r2
 8002c14:	011b      	lsls	r3, r3, #4
 8002c16:	1a9b      	subs	r3, r3, r2
 8002c18:	009b      	lsls	r3, r3, #2
 8002c1a:	440b      	add	r3, r1
 8002c1c:	3330      	adds	r3, #48	@ 0x30
 8002c1e:	6819      	ldr	r1, [r3, #0]
 8002c20:	78fb      	ldrb	r3, [r7, #3]
 8002c22:	015a      	lsls	r2, r3, #5
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	4413      	add	r3, r2
 8002c28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c2c:	691b      	ldr	r3, [r3, #16]
 8002c2e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c32:	78fa      	ldrb	r2, [r7, #3]
 8002c34:	1ac9      	subs	r1, r1, r3
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	4613      	mov	r3, r2
 8002c3a:	011b      	lsls	r3, r3, #4
 8002c3c:	1a9b      	subs	r3, r3, r2
 8002c3e:	009b      	lsls	r3, r3, #2
 8002c40:	4403      	add	r3, r0
 8002c42:	3338      	adds	r3, #56	@ 0x38
 8002c44:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002c46:	78fa      	ldrb	r2, [r7, #3]
 8002c48:	6879      	ldr	r1, [r7, #4]
 8002c4a:	4613      	mov	r3, r2
 8002c4c:	011b      	lsls	r3, r3, #4
 8002c4e:	1a9b      	subs	r3, r3, r2
 8002c50:	009b      	lsls	r3, r3, #2
 8002c52:	440b      	add	r3, r1
 8002c54:	334d      	adds	r3, #77	@ 0x4d
 8002c56:	2201      	movs	r2, #1
 8002c58:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002c5a:	78fa      	ldrb	r2, [r7, #3]
 8002c5c:	6879      	ldr	r1, [r7, #4]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	011b      	lsls	r3, r3, #4
 8002c62:	1a9b      	subs	r3, r3, r2
 8002c64:	009b      	lsls	r3, r3, #2
 8002c66:	440b      	add	r3, r1
 8002c68:	3344      	adds	r3, #68	@ 0x44
 8002c6a:	2200      	movs	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002c6e:	78fb      	ldrb	r3, [r7, #3]
 8002c70:	015a      	lsls	r2, r3, #5
 8002c72:	693b      	ldr	r3, [r7, #16]
 8002c74:	4413      	add	r3, r2
 8002c76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c7a:	461a      	mov	r2, r3
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002c80:	78fa      	ldrb	r2, [r7, #3]
 8002c82:	6879      	ldr	r1, [r7, #4]
 8002c84:	4613      	mov	r3, r2
 8002c86:	011b      	lsls	r3, r3, #4
 8002c88:	1a9b      	subs	r3, r3, r2
 8002c8a:	009b      	lsls	r3, r3, #2
 8002c8c:	440b      	add	r3, r1
 8002c8e:	3326      	adds	r3, #38	@ 0x26
 8002c90:	781b      	ldrb	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d00a      	beq.n	8002cac <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002c96:	78fa      	ldrb	r2, [r7, #3]
 8002c98:	6879      	ldr	r1, [r7, #4]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	011b      	lsls	r3, r3, #4
 8002c9e:	1a9b      	subs	r3, r3, r2
 8002ca0:	009b      	lsls	r3, r3, #2
 8002ca2:	440b      	add	r3, r1
 8002ca4:	3326      	adds	r3, #38	@ 0x26
 8002ca6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d110      	bne.n	8002cce <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	78fa      	ldrb	r2, [r7, #3]
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f004 fee2 	bl	8007a7e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002cba:	78fb      	ldrb	r3, [r7, #3]
 8002cbc:	015a      	lsls	r2, r3, #5
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	2310      	movs	r3, #16
 8002cca:	6093      	str	r3, [r2, #8]
 8002ccc:	e03d      	b.n	8002d4a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002cce:	78fa      	ldrb	r2, [r7, #3]
 8002cd0:	6879      	ldr	r1, [r7, #4]
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	011b      	lsls	r3, r3, #4
 8002cd6:	1a9b      	subs	r3, r3, r2
 8002cd8:	009b      	lsls	r3, r3, #2
 8002cda:	440b      	add	r3, r1
 8002cdc:	3326      	adds	r3, #38	@ 0x26
 8002cde:	781b      	ldrb	r3, [r3, #0]
 8002ce0:	2b03      	cmp	r3, #3
 8002ce2:	d00a      	beq.n	8002cfa <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	6879      	ldr	r1, [r7, #4]
 8002ce8:	4613      	mov	r3, r2
 8002cea:	011b      	lsls	r3, r3, #4
 8002cec:	1a9b      	subs	r3, r3, r2
 8002cee:	009b      	lsls	r3, r3, #2
 8002cf0:	440b      	add	r3, r1
 8002cf2:	3326      	adds	r3, #38	@ 0x26
 8002cf4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d127      	bne.n	8002d4a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002cfa:	78fb      	ldrb	r3, [r7, #3]
 8002cfc:	015a      	lsls	r2, r3, #5
 8002cfe:	693b      	ldr	r3, [r7, #16]
 8002d00:	4413      	add	r3, r2
 8002d02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	78fa      	ldrb	r2, [r7, #3]
 8002d0a:	0151      	lsls	r1, r2, #5
 8002d0c:	693a      	ldr	r2, [r7, #16]
 8002d0e:	440a      	add	r2, r1
 8002d10:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002d14:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002d18:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002d1a:	78fa      	ldrb	r2, [r7, #3]
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	011b      	lsls	r3, r3, #4
 8002d22:	1a9b      	subs	r3, r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	440b      	add	r3, r1
 8002d28:	334c      	adds	r3, #76	@ 0x4c
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002d2e:	78fa      	ldrb	r2, [r7, #3]
 8002d30:	6879      	ldr	r1, [r7, #4]
 8002d32:	4613      	mov	r3, r2
 8002d34:	011b      	lsls	r3, r3, #4
 8002d36:	1a9b      	subs	r3, r3, r2
 8002d38:	009b      	lsls	r3, r3, #2
 8002d3a:	440b      	add	r3, r1
 8002d3c:	334c      	adds	r3, #76	@ 0x4c
 8002d3e:	781a      	ldrb	r2, [r3, #0]
 8002d40:	78fb      	ldrb	r3, [r7, #3]
 8002d42:	4619      	mov	r1, r3
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f007 f9ef 	bl	800a128 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	799b      	ldrb	r3, [r3, #6]
 8002d4e:	2b01      	cmp	r3, #1
 8002d50:	d13b      	bne.n	8002dca <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002d52:	78fa      	ldrb	r2, [r7, #3]
 8002d54:	6879      	ldr	r1, [r7, #4]
 8002d56:	4613      	mov	r3, r2
 8002d58:	011b      	lsls	r3, r3, #4
 8002d5a:	1a9b      	subs	r3, r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	440b      	add	r3, r1
 8002d60:	3338      	adds	r3, #56	@ 0x38
 8002d62:	6819      	ldr	r1, [r3, #0]
 8002d64:	78fa      	ldrb	r2, [r7, #3]
 8002d66:	6878      	ldr	r0, [r7, #4]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	011b      	lsls	r3, r3, #4
 8002d6c:	1a9b      	subs	r3, r3, r2
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	4403      	add	r3, r0
 8002d72:	3328      	adds	r3, #40	@ 0x28
 8002d74:	881b      	ldrh	r3, [r3, #0]
 8002d76:	440b      	add	r3, r1
 8002d78:	1e59      	subs	r1, r3, #1
 8002d7a:	78fa      	ldrb	r2, [r7, #3]
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	011b      	lsls	r3, r3, #4
 8002d82:	1a9b      	subs	r3, r3, r2
 8002d84:	009b      	lsls	r3, r3, #2
 8002d86:	4403      	add	r3, r0
 8002d88:	3328      	adds	r3, #40	@ 0x28
 8002d8a:	881b      	ldrh	r3, [r3, #0]
 8002d8c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d90:	f003 0301 	and.w	r3, r3, #1
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	f000 8470 	beq.w	800367a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002d9a:	78fa      	ldrb	r2, [r7, #3]
 8002d9c:	6879      	ldr	r1, [r7, #4]
 8002d9e:	4613      	mov	r3, r2
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	1a9b      	subs	r3, r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	440b      	add	r3, r1
 8002da8:	333c      	adds	r3, #60	@ 0x3c
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	78fa      	ldrb	r2, [r7, #3]
 8002dae:	f083 0301 	eor.w	r3, r3, #1
 8002db2:	b2d8      	uxtb	r0, r3
 8002db4:	6879      	ldr	r1, [r7, #4]
 8002db6:	4613      	mov	r3, r2
 8002db8:	011b      	lsls	r3, r3, #4
 8002dba:	1a9b      	subs	r3, r3, r2
 8002dbc:	009b      	lsls	r3, r3, #2
 8002dbe:	440b      	add	r3, r1
 8002dc0:	333c      	adds	r3, #60	@ 0x3c
 8002dc2:	4602      	mov	r2, r0
 8002dc4:	701a      	strb	r2, [r3, #0]
 8002dc6:	f000 bc58 	b.w	800367a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002dca:	78fa      	ldrb	r2, [r7, #3]
 8002dcc:	6879      	ldr	r1, [r7, #4]
 8002dce:	4613      	mov	r3, r2
 8002dd0:	011b      	lsls	r3, r3, #4
 8002dd2:	1a9b      	subs	r3, r3, r2
 8002dd4:	009b      	lsls	r3, r3, #2
 8002dd6:	440b      	add	r3, r1
 8002dd8:	333c      	adds	r3, #60	@ 0x3c
 8002dda:	781b      	ldrb	r3, [r3, #0]
 8002ddc:	78fa      	ldrb	r2, [r7, #3]
 8002dde:	f083 0301 	eor.w	r3, r3, #1
 8002de2:	b2d8      	uxtb	r0, r3
 8002de4:	6879      	ldr	r1, [r7, #4]
 8002de6:	4613      	mov	r3, r2
 8002de8:	011b      	lsls	r3, r3, #4
 8002dea:	1a9b      	subs	r3, r3, r2
 8002dec:	009b      	lsls	r3, r3, #2
 8002dee:	440b      	add	r3, r1
 8002df0:	333c      	adds	r3, #60	@ 0x3c
 8002df2:	4602      	mov	r2, r0
 8002df4:	701a      	strb	r2, [r3, #0]
 8002df6:	f000 bc40 	b.w	800367a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	78fa      	ldrb	r2, [r7, #3]
 8002e00:	4611      	mov	r1, r2
 8002e02:	4618      	mov	r0, r3
 8002e04:	f004 f897 	bl	8006f36 <USB_ReadChInterrupts>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	f003 0320 	and.w	r3, r3, #32
 8002e0e:	2b20      	cmp	r3, #32
 8002e10:	d131      	bne.n	8002e76 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002e12:	78fb      	ldrb	r3, [r7, #3]
 8002e14:	015a      	lsls	r2, r3, #5
 8002e16:	693b      	ldr	r3, [r7, #16]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e1e:	461a      	mov	r2, r3
 8002e20:	2320      	movs	r3, #32
 8002e22:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002e24:	78fa      	ldrb	r2, [r7, #3]
 8002e26:	6879      	ldr	r1, [r7, #4]
 8002e28:	4613      	mov	r3, r2
 8002e2a:	011b      	lsls	r3, r3, #4
 8002e2c:	1a9b      	subs	r3, r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	440b      	add	r3, r1
 8002e32:	331a      	adds	r3, #26
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b01      	cmp	r3, #1
 8002e38:	f040 841f 	bne.w	800367a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002e3c:	78fa      	ldrb	r2, [r7, #3]
 8002e3e:	6879      	ldr	r1, [r7, #4]
 8002e40:	4613      	mov	r3, r2
 8002e42:	011b      	lsls	r3, r3, #4
 8002e44:	1a9b      	subs	r3, r3, r2
 8002e46:	009b      	lsls	r3, r3, #2
 8002e48:	440b      	add	r3, r1
 8002e4a:	331b      	adds	r3, #27
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002e50:	78fa      	ldrb	r2, [r7, #3]
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	4613      	mov	r3, r2
 8002e56:	011b      	lsls	r3, r3, #4
 8002e58:	1a9b      	subs	r3, r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	440b      	add	r3, r1
 8002e5e:	334d      	adds	r3, #77	@ 0x4d
 8002e60:	2203      	movs	r2, #3
 8002e62:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	78fa      	ldrb	r2, [r7, #3]
 8002e6a:	4611      	mov	r1, r2
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f004 fe06 	bl	8007a7e <USB_HC_Halt>
 8002e72:	f000 bc02 	b.w	800367a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	78fa      	ldrb	r2, [r7, #3]
 8002e7c:	4611      	mov	r1, r2
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f004 f859 	bl	8006f36 <USB_ReadChInterrupts>
 8002e84:	4603      	mov	r3, r0
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b02      	cmp	r3, #2
 8002e8c:	f040 8305 	bne.w	800349a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002e90:	78fb      	ldrb	r3, [r7, #3]
 8002e92:	015a      	lsls	r2, r3, #5
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	4413      	add	r3, r2
 8002e98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002ea2:	78fa      	ldrb	r2, [r7, #3]
 8002ea4:	6879      	ldr	r1, [r7, #4]
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	1a9b      	subs	r3, r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	440b      	add	r3, r1
 8002eb0:	334d      	adds	r3, #77	@ 0x4d
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d114      	bne.n	8002ee2 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	6879      	ldr	r1, [r7, #4]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	011b      	lsls	r3, r3, #4
 8002ec0:	1a9b      	subs	r3, r3, r2
 8002ec2:	009b      	lsls	r3, r3, #2
 8002ec4:	440b      	add	r3, r1
 8002ec6:	334d      	adds	r3, #77	@ 0x4d
 8002ec8:	2202      	movs	r2, #2
 8002eca:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002ecc:	78fa      	ldrb	r2, [r7, #3]
 8002ece:	6879      	ldr	r1, [r7, #4]
 8002ed0:	4613      	mov	r3, r2
 8002ed2:	011b      	lsls	r3, r3, #4
 8002ed4:	1a9b      	subs	r3, r3, r2
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	440b      	add	r3, r1
 8002eda:	334c      	adds	r3, #76	@ 0x4c
 8002edc:	2201      	movs	r2, #1
 8002ede:	701a      	strb	r2, [r3, #0]
 8002ee0:	e2cc      	b.n	800347c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002ee2:	78fa      	ldrb	r2, [r7, #3]
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	1a9b      	subs	r3, r3, r2
 8002eec:	009b      	lsls	r3, r3, #2
 8002eee:	440b      	add	r3, r1
 8002ef0:	334d      	adds	r3, #77	@ 0x4d
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	2b06      	cmp	r3, #6
 8002ef6:	d114      	bne.n	8002f22 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002ef8:	78fa      	ldrb	r2, [r7, #3]
 8002efa:	6879      	ldr	r1, [r7, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	011b      	lsls	r3, r3, #4
 8002f00:	1a9b      	subs	r3, r3, r2
 8002f02:	009b      	lsls	r3, r3, #2
 8002f04:	440b      	add	r3, r1
 8002f06:	334d      	adds	r3, #77	@ 0x4d
 8002f08:	2202      	movs	r2, #2
 8002f0a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002f0c:	78fa      	ldrb	r2, [r7, #3]
 8002f0e:	6879      	ldr	r1, [r7, #4]
 8002f10:	4613      	mov	r3, r2
 8002f12:	011b      	lsls	r3, r3, #4
 8002f14:	1a9b      	subs	r3, r3, r2
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	334c      	adds	r3, #76	@ 0x4c
 8002f1c:	2205      	movs	r2, #5
 8002f1e:	701a      	strb	r2, [r3, #0]
 8002f20:	e2ac      	b.n	800347c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002f22:	78fa      	ldrb	r2, [r7, #3]
 8002f24:	6879      	ldr	r1, [r7, #4]
 8002f26:	4613      	mov	r3, r2
 8002f28:	011b      	lsls	r3, r3, #4
 8002f2a:	1a9b      	subs	r3, r3, r2
 8002f2c:	009b      	lsls	r3, r3, #2
 8002f2e:	440b      	add	r3, r1
 8002f30:	334d      	adds	r3, #77	@ 0x4d
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	2b07      	cmp	r3, #7
 8002f36:	d00b      	beq.n	8002f50 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002f38:	78fa      	ldrb	r2, [r7, #3]
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	1a9b      	subs	r3, r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	334d      	adds	r3, #77	@ 0x4d
 8002f48:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002f4a:	2b09      	cmp	r3, #9
 8002f4c:	f040 80a6 	bne.w	800309c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002f50:	78fa      	ldrb	r2, [r7, #3]
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	4613      	mov	r3, r2
 8002f56:	011b      	lsls	r3, r3, #4
 8002f58:	1a9b      	subs	r3, r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	334d      	adds	r3, #77	@ 0x4d
 8002f60:	2202      	movs	r2, #2
 8002f62:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002f64:	78fa      	ldrb	r2, [r7, #3]
 8002f66:	6879      	ldr	r1, [r7, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	011b      	lsls	r3, r3, #4
 8002f6c:	1a9b      	subs	r3, r3, r2
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	440b      	add	r3, r1
 8002f72:	3344      	adds	r3, #68	@ 0x44
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	1c59      	adds	r1, r3, #1
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	4613      	mov	r3, r2
 8002f7c:	011b      	lsls	r3, r3, #4
 8002f7e:	1a9b      	subs	r3, r3, r2
 8002f80:	009b      	lsls	r3, r3, #2
 8002f82:	4403      	add	r3, r0
 8002f84:	3344      	adds	r3, #68	@ 0x44
 8002f86:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f88:	78fa      	ldrb	r2, [r7, #3]
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	1a9b      	subs	r3, r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	3344      	adds	r3, #68	@ 0x44
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d943      	bls.n	8003026 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002f9e:	78fa      	ldrb	r2, [r7, #3]
 8002fa0:	6879      	ldr	r1, [r7, #4]
 8002fa2:	4613      	mov	r3, r2
 8002fa4:	011b      	lsls	r3, r3, #4
 8002fa6:	1a9b      	subs	r3, r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	440b      	add	r3, r1
 8002fac:	3344      	adds	r3, #68	@ 0x44
 8002fae:	2200      	movs	r2, #0
 8002fb0:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002fb2:	78fa      	ldrb	r2, [r7, #3]
 8002fb4:	6879      	ldr	r1, [r7, #4]
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	011b      	lsls	r3, r3, #4
 8002fba:	1a9b      	subs	r3, r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	440b      	add	r3, r1
 8002fc0:	331a      	adds	r3, #26
 8002fc2:	781b      	ldrb	r3, [r3, #0]
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d123      	bne.n	8003010 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002fc8:	78fa      	ldrb	r2, [r7, #3]
 8002fca:	6879      	ldr	r1, [r7, #4]
 8002fcc:	4613      	mov	r3, r2
 8002fce:	011b      	lsls	r3, r3, #4
 8002fd0:	1a9b      	subs	r3, r3, r2
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	440b      	add	r3, r1
 8002fd6:	331b      	adds	r3, #27
 8002fd8:	2200      	movs	r2, #0
 8002fda:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002fdc:	78fa      	ldrb	r2, [r7, #3]
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	4613      	mov	r3, r2
 8002fe2:	011b      	lsls	r3, r3, #4
 8002fe4:	1a9b      	subs	r3, r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	440b      	add	r3, r1
 8002fea:	331c      	adds	r3, #28
 8002fec:	2200      	movs	r2, #0
 8002fee:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	78fa      	ldrb	r2, [r7, #3]
 8003000:	0151      	lsls	r1, r2, #5
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	440a      	add	r2, r1
 8003006:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800300a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800300e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003010:	78fa      	ldrb	r2, [r7, #3]
 8003012:	6879      	ldr	r1, [r7, #4]
 8003014:	4613      	mov	r3, r2
 8003016:	011b      	lsls	r3, r3, #4
 8003018:	1a9b      	subs	r3, r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	334c      	adds	r3, #76	@ 0x4c
 8003020:	2204      	movs	r2, #4
 8003022:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003024:	e229      	b.n	800347a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003026:	78fa      	ldrb	r2, [r7, #3]
 8003028:	6879      	ldr	r1, [r7, #4]
 800302a:	4613      	mov	r3, r2
 800302c:	011b      	lsls	r3, r3, #4
 800302e:	1a9b      	subs	r3, r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	440b      	add	r3, r1
 8003034:	334c      	adds	r3, #76	@ 0x4c
 8003036:	2202      	movs	r2, #2
 8003038:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800303a:	78fa      	ldrb	r2, [r7, #3]
 800303c:	6879      	ldr	r1, [r7, #4]
 800303e:	4613      	mov	r3, r2
 8003040:	011b      	lsls	r3, r3, #4
 8003042:	1a9b      	subs	r3, r3, r2
 8003044:	009b      	lsls	r3, r3, #2
 8003046:	440b      	add	r3, r1
 8003048:	3326      	adds	r3, #38	@ 0x26
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00b      	beq.n	8003068 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003050:	78fa      	ldrb	r2, [r7, #3]
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	1a9b      	subs	r3, r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	3326      	adds	r3, #38	@ 0x26
 8003060:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003062:	2b02      	cmp	r3, #2
 8003064:	f040 8209 	bne.w	800347a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003068:	78fb      	ldrb	r3, [r7, #3]
 800306a:	015a      	lsls	r2, r3, #5
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	4413      	add	r3, r2
 8003070:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800307e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003086:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003088:	78fb      	ldrb	r3, [r7, #3]
 800308a:	015a      	lsls	r2, r3, #5
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	4413      	add	r3, r2
 8003090:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003094:	461a      	mov	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800309a:	e1ee      	b.n	800347a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800309c:	78fa      	ldrb	r2, [r7, #3]
 800309e:	6879      	ldr	r1, [r7, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	011b      	lsls	r3, r3, #4
 80030a4:	1a9b      	subs	r3, r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	440b      	add	r3, r1
 80030aa:	334d      	adds	r3, #77	@ 0x4d
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b05      	cmp	r3, #5
 80030b0:	f040 80c8 	bne.w	8003244 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80030b4:	78fa      	ldrb	r2, [r7, #3]
 80030b6:	6879      	ldr	r1, [r7, #4]
 80030b8:	4613      	mov	r3, r2
 80030ba:	011b      	lsls	r3, r3, #4
 80030bc:	1a9b      	subs	r3, r3, r2
 80030be:	009b      	lsls	r3, r3, #2
 80030c0:	440b      	add	r3, r1
 80030c2:	334d      	adds	r3, #77	@ 0x4d
 80030c4:	2202      	movs	r2, #2
 80030c6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80030c8:	78fa      	ldrb	r2, [r7, #3]
 80030ca:	6879      	ldr	r1, [r7, #4]
 80030cc:	4613      	mov	r3, r2
 80030ce:	011b      	lsls	r3, r3, #4
 80030d0:	1a9b      	subs	r3, r3, r2
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	440b      	add	r3, r1
 80030d6:	331b      	adds	r3, #27
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	f040 81ce 	bne.w	800347c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80030e0:	78fa      	ldrb	r2, [r7, #3]
 80030e2:	6879      	ldr	r1, [r7, #4]
 80030e4:	4613      	mov	r3, r2
 80030e6:	011b      	lsls	r3, r3, #4
 80030e8:	1a9b      	subs	r3, r3, r2
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	3326      	adds	r3, #38	@ 0x26
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b03      	cmp	r3, #3
 80030f4:	d16b      	bne.n	80031ce <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 80030f6:	78fa      	ldrb	r2, [r7, #3]
 80030f8:	6879      	ldr	r1, [r7, #4]
 80030fa:	4613      	mov	r3, r2
 80030fc:	011b      	lsls	r3, r3, #4
 80030fe:	1a9b      	subs	r3, r3, r2
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	440b      	add	r3, r1
 8003104:	3348      	adds	r3, #72	@ 0x48
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	1c59      	adds	r1, r3, #1
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	4613      	mov	r3, r2
 800310e:	011b      	lsls	r3, r3, #4
 8003110:	1a9b      	subs	r3, r3, r2
 8003112:	009b      	lsls	r3, r3, #2
 8003114:	4403      	add	r3, r0
 8003116:	3348      	adds	r3, #72	@ 0x48
 8003118:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800311a:	78fa      	ldrb	r2, [r7, #3]
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	1a9b      	subs	r3, r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	3348      	adds	r3, #72	@ 0x48
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b02      	cmp	r3, #2
 800312e:	d943      	bls.n	80031b8 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003130:	78fa      	ldrb	r2, [r7, #3]
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	4613      	mov	r3, r2
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	1a9b      	subs	r3, r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	3348      	adds	r3, #72	@ 0x48
 8003140:	2200      	movs	r2, #0
 8003142:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8003144:	78fa      	ldrb	r2, [r7, #3]
 8003146:	6879      	ldr	r1, [r7, #4]
 8003148:	4613      	mov	r3, r2
 800314a:	011b      	lsls	r3, r3, #4
 800314c:	1a9b      	subs	r3, r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	331b      	adds	r3, #27
 8003154:	2200      	movs	r2, #0
 8003156:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003158:	78fa      	ldrb	r2, [r7, #3]
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	4613      	mov	r3, r2
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	1a9b      	subs	r3, r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	3344      	adds	r3, #68	@ 0x44
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d809      	bhi.n	8003182 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 800316e:	78fa      	ldrb	r2, [r7, #3]
 8003170:	6879      	ldr	r1, [r7, #4]
 8003172:	4613      	mov	r3, r2
 8003174:	011b      	lsls	r3, r3, #4
 8003176:	1a9b      	subs	r3, r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	440b      	add	r3, r1
 800317c:	331c      	adds	r3, #28
 800317e:	2201      	movs	r2, #1
 8003180:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003182:	78fb      	ldrb	r3, [r7, #3]
 8003184:	015a      	lsls	r2, r3, #5
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	4413      	add	r3, r2
 800318a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800318e:	685b      	ldr	r3, [r3, #4]
 8003190:	78fa      	ldrb	r2, [r7, #3]
 8003192:	0151      	lsls	r1, r2, #5
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	440a      	add	r2, r1
 8003198:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800319c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031a0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80031a2:	78fa      	ldrb	r2, [r7, #3]
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	4613      	mov	r3, r2
 80031a8:	011b      	lsls	r3, r3, #4
 80031aa:	1a9b      	subs	r3, r3, r2
 80031ac:	009b      	lsls	r3, r3, #2
 80031ae:	440b      	add	r3, r1
 80031b0:	334c      	adds	r3, #76	@ 0x4c
 80031b2:	2204      	movs	r2, #4
 80031b4:	701a      	strb	r2, [r3, #0]
 80031b6:	e014      	b.n	80031e2 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031b8:	78fa      	ldrb	r2, [r7, #3]
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	011b      	lsls	r3, r3, #4
 80031c0:	1a9b      	subs	r3, r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	334c      	adds	r3, #76	@ 0x4c
 80031c8:	2202      	movs	r2, #2
 80031ca:	701a      	strb	r2, [r3, #0]
 80031cc:	e009      	b.n	80031e2 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031ce:	78fa      	ldrb	r2, [r7, #3]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	011b      	lsls	r3, r3, #4
 80031d6:	1a9b      	subs	r3, r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	334c      	adds	r3, #76	@ 0x4c
 80031de:	2202      	movs	r2, #2
 80031e0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031e2:	78fa      	ldrb	r2, [r7, #3]
 80031e4:	6879      	ldr	r1, [r7, #4]
 80031e6:	4613      	mov	r3, r2
 80031e8:	011b      	lsls	r3, r3, #4
 80031ea:	1a9b      	subs	r3, r3, r2
 80031ec:	009b      	lsls	r3, r3, #2
 80031ee:	440b      	add	r3, r1
 80031f0:	3326      	adds	r3, #38	@ 0x26
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00b      	beq.n	8003210 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80031f8:	78fa      	ldrb	r2, [r7, #3]
 80031fa:	6879      	ldr	r1, [r7, #4]
 80031fc:	4613      	mov	r3, r2
 80031fe:	011b      	lsls	r3, r3, #4
 8003200:	1a9b      	subs	r3, r3, r2
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	440b      	add	r3, r1
 8003206:	3326      	adds	r3, #38	@ 0x26
 8003208:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800320a:	2b02      	cmp	r3, #2
 800320c:	f040 8136 	bne.w	800347c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003210:	78fb      	ldrb	r3, [r7, #3]
 8003212:	015a      	lsls	r2, r3, #5
 8003214:	693b      	ldr	r3, [r7, #16]
 8003216:	4413      	add	r3, r2
 8003218:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003226:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800322e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003230:	78fb      	ldrb	r3, [r7, #3]
 8003232:	015a      	lsls	r2, r3, #5
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	4413      	add	r3, r2
 8003238:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800323c:	461a      	mov	r2, r3
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	e11b      	b.n	800347c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003244:	78fa      	ldrb	r2, [r7, #3]
 8003246:	6879      	ldr	r1, [r7, #4]
 8003248:	4613      	mov	r3, r2
 800324a:	011b      	lsls	r3, r3, #4
 800324c:	1a9b      	subs	r3, r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	440b      	add	r3, r1
 8003252:	334d      	adds	r3, #77	@ 0x4d
 8003254:	781b      	ldrb	r3, [r3, #0]
 8003256:	2b03      	cmp	r3, #3
 8003258:	f040 8081 	bne.w	800335e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800325c:	78fa      	ldrb	r2, [r7, #3]
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	1a9b      	subs	r3, r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	334d      	adds	r3, #77	@ 0x4d
 800326c:	2202      	movs	r2, #2
 800326e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003270:	78fa      	ldrb	r2, [r7, #3]
 8003272:	6879      	ldr	r1, [r7, #4]
 8003274:	4613      	mov	r3, r2
 8003276:	011b      	lsls	r3, r3, #4
 8003278:	1a9b      	subs	r3, r3, r2
 800327a:	009b      	lsls	r3, r3, #2
 800327c:	440b      	add	r3, r1
 800327e:	331b      	adds	r3, #27
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	2b01      	cmp	r3, #1
 8003284:	f040 80fa 	bne.w	800347c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003288:	78fa      	ldrb	r2, [r7, #3]
 800328a:	6879      	ldr	r1, [r7, #4]
 800328c:	4613      	mov	r3, r2
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	1a9b      	subs	r3, r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	440b      	add	r3, r1
 8003296:	334c      	adds	r3, #76	@ 0x4c
 8003298:	2202      	movs	r2, #2
 800329a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800329c:	78fb      	ldrb	r3, [r7, #3]
 800329e:	015a      	lsls	r2, r3, #5
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	4413      	add	r3, r2
 80032a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	78fa      	ldrb	r2, [r7, #3]
 80032ac:	0151      	lsls	r1, r2, #5
 80032ae:	693a      	ldr	r2, [r7, #16]
 80032b0:	440a      	add	r2, r1
 80032b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032ba:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80032bc:	78fb      	ldrb	r3, [r7, #3]
 80032be:	015a      	lsls	r2, r3, #5
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	4413      	add	r3, r2
 80032c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	78fa      	ldrb	r2, [r7, #3]
 80032cc:	0151      	lsls	r1, r2, #5
 80032ce:	693a      	ldr	r2, [r7, #16]
 80032d0:	440a      	add	r2, r1
 80032d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032d6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80032da:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80032dc:	78fb      	ldrb	r3, [r7, #3]
 80032de:	015a      	lsls	r2, r3, #5
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	4413      	add	r3, r2
 80032e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	78fa      	ldrb	r2, [r7, #3]
 80032ec:	0151      	lsls	r1, r2, #5
 80032ee:	693a      	ldr	r2, [r7, #16]
 80032f0:	440a      	add	r2, r1
 80032f2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80032f6:	f023 0320 	bic.w	r3, r3, #32
 80032fa:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032fc:	78fa      	ldrb	r2, [r7, #3]
 80032fe:	6879      	ldr	r1, [r7, #4]
 8003300:	4613      	mov	r3, r2
 8003302:	011b      	lsls	r3, r3, #4
 8003304:	1a9b      	subs	r3, r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	440b      	add	r3, r1
 800330a:	3326      	adds	r3, #38	@ 0x26
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00b      	beq.n	800332a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003312:	78fa      	ldrb	r2, [r7, #3]
 8003314:	6879      	ldr	r1, [r7, #4]
 8003316:	4613      	mov	r3, r2
 8003318:	011b      	lsls	r3, r3, #4
 800331a:	1a9b      	subs	r3, r3, r2
 800331c:	009b      	lsls	r3, r3, #2
 800331e:	440b      	add	r3, r1
 8003320:	3326      	adds	r3, #38	@ 0x26
 8003322:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003324:	2b02      	cmp	r3, #2
 8003326:	f040 80a9 	bne.w	800347c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800332a:	78fb      	ldrb	r3, [r7, #3]
 800332c:	015a      	lsls	r2, r3, #5
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4413      	add	r3, r2
 8003332:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003340:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003348:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800334a:	78fb      	ldrb	r3, [r7, #3]
 800334c:	015a      	lsls	r2, r3, #5
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4413      	add	r3, r2
 8003352:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003356:	461a      	mov	r2, r3
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6013      	str	r3, [r2, #0]
 800335c:	e08e      	b.n	800347c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800335e:	78fa      	ldrb	r2, [r7, #3]
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	4613      	mov	r3, r2
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	1a9b      	subs	r3, r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	334d      	adds	r3, #77	@ 0x4d
 800336e:	781b      	ldrb	r3, [r3, #0]
 8003370:	2b04      	cmp	r3, #4
 8003372:	d143      	bne.n	80033fc <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003374:	78fa      	ldrb	r2, [r7, #3]
 8003376:	6879      	ldr	r1, [r7, #4]
 8003378:	4613      	mov	r3, r2
 800337a:	011b      	lsls	r3, r3, #4
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	009b      	lsls	r3, r3, #2
 8003380:	440b      	add	r3, r1
 8003382:	334d      	adds	r3, #77	@ 0x4d
 8003384:	2202      	movs	r2, #2
 8003386:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003388:	78fa      	ldrb	r2, [r7, #3]
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	4613      	mov	r3, r2
 800338e:	011b      	lsls	r3, r3, #4
 8003390:	1a9b      	subs	r3, r3, r2
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	440b      	add	r3, r1
 8003396:	334c      	adds	r3, #76	@ 0x4c
 8003398:	2202      	movs	r2, #2
 800339a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800339c:	78fa      	ldrb	r2, [r7, #3]
 800339e:	6879      	ldr	r1, [r7, #4]
 80033a0:	4613      	mov	r3, r2
 80033a2:	011b      	lsls	r3, r3, #4
 80033a4:	1a9b      	subs	r3, r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	440b      	add	r3, r1
 80033aa:	3326      	adds	r3, #38	@ 0x26
 80033ac:	781b      	ldrb	r3, [r3, #0]
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00a      	beq.n	80033c8 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80033b2:	78fa      	ldrb	r2, [r7, #3]
 80033b4:	6879      	ldr	r1, [r7, #4]
 80033b6:	4613      	mov	r3, r2
 80033b8:	011b      	lsls	r3, r3, #4
 80033ba:	1a9b      	subs	r3, r3, r2
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	440b      	add	r3, r1
 80033c0:	3326      	adds	r3, #38	@ 0x26
 80033c2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80033c4:	2b02      	cmp	r3, #2
 80033c6:	d159      	bne.n	800347c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80033c8:	78fb      	ldrb	r3, [r7, #3]
 80033ca:	015a      	lsls	r2, r3, #5
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	4413      	add	r3, r2
 80033d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80033de:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033e6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80033e8:	78fb      	ldrb	r3, [r7, #3]
 80033ea:	015a      	lsls	r2, r3, #5
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	4413      	add	r3, r2
 80033f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033f4:	461a      	mov	r2, r3
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	e03f      	b.n	800347c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	1a9b      	subs	r3, r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	334d      	adds	r3, #77	@ 0x4d
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2b08      	cmp	r3, #8
 8003410:	d126      	bne.n	8003460 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003412:	78fa      	ldrb	r2, [r7, #3]
 8003414:	6879      	ldr	r1, [r7, #4]
 8003416:	4613      	mov	r3, r2
 8003418:	011b      	lsls	r3, r3, #4
 800341a:	1a9b      	subs	r3, r3, r2
 800341c:	009b      	lsls	r3, r3, #2
 800341e:	440b      	add	r3, r1
 8003420:	334d      	adds	r3, #77	@ 0x4d
 8003422:	2202      	movs	r2, #2
 8003424:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003426:	78fa      	ldrb	r2, [r7, #3]
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	1a9b      	subs	r3, r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	3344      	adds	r3, #68	@ 0x44
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	1c59      	adds	r1, r3, #1
 800343a:	6878      	ldr	r0, [r7, #4]
 800343c:	4613      	mov	r3, r2
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	1a9b      	subs	r3, r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4403      	add	r3, r0
 8003446:	3344      	adds	r3, #68	@ 0x44
 8003448:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800344a:	78fa      	ldrb	r2, [r7, #3]
 800344c:	6879      	ldr	r1, [r7, #4]
 800344e:	4613      	mov	r3, r2
 8003450:	011b      	lsls	r3, r3, #4
 8003452:	1a9b      	subs	r3, r3, r2
 8003454:	009b      	lsls	r3, r3, #2
 8003456:	440b      	add	r3, r1
 8003458:	334c      	adds	r3, #76	@ 0x4c
 800345a:	2204      	movs	r2, #4
 800345c:	701a      	strb	r2, [r3, #0]
 800345e:	e00d      	b.n	800347c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003460:	78fa      	ldrb	r2, [r7, #3]
 8003462:	6879      	ldr	r1, [r7, #4]
 8003464:	4613      	mov	r3, r2
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	1a9b      	subs	r3, r3, r2
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	440b      	add	r3, r1
 800346e:	334d      	adds	r3, #77	@ 0x4d
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	2b02      	cmp	r3, #2
 8003474:	f000 8100 	beq.w	8003678 <HCD_HC_IN_IRQHandler+0xcca>
 8003478:	e000      	b.n	800347c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800347a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800347c:	78fa      	ldrb	r2, [r7, #3]
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	4613      	mov	r3, r2
 8003482:	011b      	lsls	r3, r3, #4
 8003484:	1a9b      	subs	r3, r3, r2
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	440b      	add	r3, r1
 800348a:	334c      	adds	r3, #76	@ 0x4c
 800348c:	781a      	ldrb	r2, [r3, #0]
 800348e:	78fb      	ldrb	r3, [r7, #3]
 8003490:	4619      	mov	r1, r3
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f006 fe48 	bl	800a128 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003498:	e0ef      	b.n	800367a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	78fa      	ldrb	r2, [r7, #3]
 80034a0:	4611      	mov	r1, r2
 80034a2:	4618      	mov	r0, r3
 80034a4:	f003 fd47 	bl	8006f36 <USB_ReadChInterrupts>
 80034a8:	4603      	mov	r3, r0
 80034aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ae:	2b40      	cmp	r3, #64	@ 0x40
 80034b0:	d12f      	bne.n	8003512 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80034b2:	78fb      	ldrb	r3, [r7, #3]
 80034b4:	015a      	lsls	r2, r3, #5
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	4413      	add	r3, r2
 80034ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034be:	461a      	mov	r2, r3
 80034c0:	2340      	movs	r3, #64	@ 0x40
 80034c2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80034c4:	78fa      	ldrb	r2, [r7, #3]
 80034c6:	6879      	ldr	r1, [r7, #4]
 80034c8:	4613      	mov	r3, r2
 80034ca:	011b      	lsls	r3, r3, #4
 80034cc:	1a9b      	subs	r3, r3, r2
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	334d      	adds	r3, #77	@ 0x4d
 80034d4:	2205      	movs	r2, #5
 80034d6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80034d8:	78fa      	ldrb	r2, [r7, #3]
 80034da:	6879      	ldr	r1, [r7, #4]
 80034dc:	4613      	mov	r3, r2
 80034de:	011b      	lsls	r3, r3, #4
 80034e0:	1a9b      	subs	r3, r3, r2
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	331a      	adds	r3, #26
 80034e8:	781b      	ldrb	r3, [r3, #0]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d109      	bne.n	8003502 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80034ee:	78fa      	ldrb	r2, [r7, #3]
 80034f0:	6879      	ldr	r1, [r7, #4]
 80034f2:	4613      	mov	r3, r2
 80034f4:	011b      	lsls	r3, r3, #4
 80034f6:	1a9b      	subs	r3, r3, r2
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	440b      	add	r3, r1
 80034fc:	3344      	adds	r3, #68	@ 0x44
 80034fe:	2200      	movs	r2, #0
 8003500:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	78fa      	ldrb	r2, [r7, #3]
 8003508:	4611      	mov	r1, r2
 800350a:	4618      	mov	r0, r3
 800350c:	f004 fab7 	bl	8007a7e <USB_HC_Halt>
 8003510:	e0b3      	b.n	800367a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	78fa      	ldrb	r2, [r7, #3]
 8003518:	4611      	mov	r1, r2
 800351a:	4618      	mov	r0, r3
 800351c:	f003 fd0b 	bl	8006f36 <USB_ReadChInterrupts>
 8003520:	4603      	mov	r3, r0
 8003522:	f003 0310 	and.w	r3, r3, #16
 8003526:	2b10      	cmp	r3, #16
 8003528:	f040 80a7 	bne.w	800367a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800352c:	78fa      	ldrb	r2, [r7, #3]
 800352e:	6879      	ldr	r1, [r7, #4]
 8003530:	4613      	mov	r3, r2
 8003532:	011b      	lsls	r3, r3, #4
 8003534:	1a9b      	subs	r3, r3, r2
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	3326      	adds	r3, #38	@ 0x26
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	2b03      	cmp	r3, #3
 8003540:	d11b      	bne.n	800357a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003542:	78fa      	ldrb	r2, [r7, #3]
 8003544:	6879      	ldr	r1, [r7, #4]
 8003546:	4613      	mov	r3, r2
 8003548:	011b      	lsls	r3, r3, #4
 800354a:	1a9b      	subs	r3, r3, r2
 800354c:	009b      	lsls	r3, r3, #2
 800354e:	440b      	add	r3, r1
 8003550:	3344      	adds	r3, #68	@ 0x44
 8003552:	2200      	movs	r2, #0
 8003554:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003556:	78fa      	ldrb	r2, [r7, #3]
 8003558:	6879      	ldr	r1, [r7, #4]
 800355a:	4613      	mov	r3, r2
 800355c:	011b      	lsls	r3, r3, #4
 800355e:	1a9b      	subs	r3, r3, r2
 8003560:	009b      	lsls	r3, r3, #2
 8003562:	440b      	add	r3, r1
 8003564:	334d      	adds	r3, #77	@ 0x4d
 8003566:	2204      	movs	r2, #4
 8003568:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	78fa      	ldrb	r2, [r7, #3]
 8003570:	4611      	mov	r1, r2
 8003572:	4618      	mov	r0, r3
 8003574:	f004 fa83 	bl	8007a7e <USB_HC_Halt>
 8003578:	e03f      	b.n	80035fa <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800357a:	78fa      	ldrb	r2, [r7, #3]
 800357c:	6879      	ldr	r1, [r7, #4]
 800357e:	4613      	mov	r3, r2
 8003580:	011b      	lsls	r3, r3, #4
 8003582:	1a9b      	subs	r3, r3, r2
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	440b      	add	r3, r1
 8003588:	3326      	adds	r3, #38	@ 0x26
 800358a:	781b      	ldrb	r3, [r3, #0]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d00a      	beq.n	80035a6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003590:	78fa      	ldrb	r2, [r7, #3]
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	4613      	mov	r3, r2
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	1a9b      	subs	r3, r3, r2
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	440b      	add	r3, r1
 800359e:	3326      	adds	r3, #38	@ 0x26
 80035a0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d129      	bne.n	80035fa <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80035a6:	78fa      	ldrb	r2, [r7, #3]
 80035a8:	6879      	ldr	r1, [r7, #4]
 80035aa:	4613      	mov	r3, r2
 80035ac:	011b      	lsls	r3, r3, #4
 80035ae:	1a9b      	subs	r3, r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	440b      	add	r3, r1
 80035b4:	3344      	adds	r3, #68	@ 0x44
 80035b6:	2200      	movs	r2, #0
 80035b8:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	799b      	ldrb	r3, [r3, #6]
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00a      	beq.n	80035d8 <HCD_HC_IN_IRQHandler+0xc2a>
 80035c2:	78fa      	ldrb	r2, [r7, #3]
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	1a9b      	subs	r3, r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	331b      	adds	r3, #27
 80035d2:	781b      	ldrb	r3, [r3, #0]
 80035d4:	2b01      	cmp	r3, #1
 80035d6:	d110      	bne.n	80035fa <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80035d8:	78fa      	ldrb	r2, [r7, #3]
 80035da:	6879      	ldr	r1, [r7, #4]
 80035dc:	4613      	mov	r3, r2
 80035de:	011b      	lsls	r3, r3, #4
 80035e0:	1a9b      	subs	r3, r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	440b      	add	r3, r1
 80035e6:	334d      	adds	r3, #77	@ 0x4d
 80035e8:	2204      	movs	r2, #4
 80035ea:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	78fa      	ldrb	r2, [r7, #3]
 80035f2:	4611      	mov	r1, r2
 80035f4:	4618      	mov	r0, r3
 80035f6:	f004 fa42 	bl	8007a7e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80035fa:	78fa      	ldrb	r2, [r7, #3]
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	1a9b      	subs	r3, r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	440b      	add	r3, r1
 8003608:	331b      	adds	r3, #27
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d129      	bne.n	8003664 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003610:	78fa      	ldrb	r2, [r7, #3]
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	4613      	mov	r3, r2
 8003616:	011b      	lsls	r3, r3, #4
 8003618:	1a9b      	subs	r3, r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	440b      	add	r3, r1
 800361e:	331b      	adds	r3, #27
 8003620:	2200      	movs	r2, #0
 8003622:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003624:	78fb      	ldrb	r3, [r7, #3]
 8003626:	015a      	lsls	r2, r3, #5
 8003628:	693b      	ldr	r3, [r7, #16]
 800362a:	4413      	add	r3, r2
 800362c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	78fa      	ldrb	r2, [r7, #3]
 8003634:	0151      	lsls	r1, r2, #5
 8003636:	693a      	ldr	r2, [r7, #16]
 8003638:	440a      	add	r2, r1
 800363a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800363e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003642:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003644:	78fb      	ldrb	r3, [r7, #3]
 8003646:	015a      	lsls	r2, r3, #5
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	4413      	add	r3, r2
 800364c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003650:	68db      	ldr	r3, [r3, #12]
 8003652:	78fa      	ldrb	r2, [r7, #3]
 8003654:	0151      	lsls	r1, r2, #5
 8003656:	693a      	ldr	r2, [r7, #16]
 8003658:	440a      	add	r2, r1
 800365a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800365e:	f043 0320 	orr.w	r3, r3, #32
 8003662:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003664:	78fb      	ldrb	r3, [r7, #3]
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	4413      	add	r3, r2
 800366c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003670:	461a      	mov	r2, r3
 8003672:	2310      	movs	r3, #16
 8003674:	6093      	str	r3, [r2, #8]
 8003676:	e000      	b.n	800367a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003678:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800367a:	3718      	adds	r7, #24
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}

08003680 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	460b      	mov	r3, r1
 800368a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	78fa      	ldrb	r2, [r7, #3]
 800369c:	4611      	mov	r1, r2
 800369e:	4618      	mov	r0, r3
 80036a0:	f003 fc49 	bl	8006f36 <USB_ReadChInterrupts>
 80036a4:	4603      	mov	r3, r0
 80036a6:	f003 0304 	and.w	r3, r3, #4
 80036aa:	2b04      	cmp	r3, #4
 80036ac:	d11b      	bne.n	80036e6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80036ae:	78fb      	ldrb	r3, [r7, #3]
 80036b0:	015a      	lsls	r2, r3, #5
 80036b2:	693b      	ldr	r3, [r7, #16]
 80036b4:	4413      	add	r3, r2
 80036b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036ba:	461a      	mov	r2, r3
 80036bc:	2304      	movs	r3, #4
 80036be:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80036c0:	78fa      	ldrb	r2, [r7, #3]
 80036c2:	6879      	ldr	r1, [r7, #4]
 80036c4:	4613      	mov	r3, r2
 80036c6:	011b      	lsls	r3, r3, #4
 80036c8:	1a9b      	subs	r3, r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	334d      	adds	r3, #77	@ 0x4d
 80036d0:	2207      	movs	r2, #7
 80036d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	78fa      	ldrb	r2, [r7, #3]
 80036da:	4611      	mov	r1, r2
 80036dc:	4618      	mov	r0, r3
 80036de:	f004 f9ce 	bl	8007a7e <USB_HC_Halt>
 80036e2:	f000 bc89 	b.w	8003ff8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	78fa      	ldrb	r2, [r7, #3]
 80036ec:	4611      	mov	r1, r2
 80036ee:	4618      	mov	r0, r3
 80036f0:	f003 fc21 	bl	8006f36 <USB_ReadChInterrupts>
 80036f4:	4603      	mov	r3, r0
 80036f6:	f003 0320 	and.w	r3, r3, #32
 80036fa:	2b20      	cmp	r3, #32
 80036fc:	f040 8082 	bne.w	8003804 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003700:	78fb      	ldrb	r3, [r7, #3]
 8003702:	015a      	lsls	r2, r3, #5
 8003704:	693b      	ldr	r3, [r7, #16]
 8003706:	4413      	add	r3, r2
 8003708:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800370c:	461a      	mov	r2, r3
 800370e:	2320      	movs	r3, #32
 8003710:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8003712:	78fa      	ldrb	r2, [r7, #3]
 8003714:	6879      	ldr	r1, [r7, #4]
 8003716:	4613      	mov	r3, r2
 8003718:	011b      	lsls	r3, r3, #4
 800371a:	1a9b      	subs	r3, r3, r2
 800371c:	009b      	lsls	r3, r3, #2
 800371e:	440b      	add	r3, r1
 8003720:	3319      	adds	r3, #25
 8003722:	781b      	ldrb	r3, [r3, #0]
 8003724:	2b01      	cmp	r3, #1
 8003726:	d124      	bne.n	8003772 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003728:	78fa      	ldrb	r2, [r7, #3]
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	4613      	mov	r3, r2
 800372e:	011b      	lsls	r3, r3, #4
 8003730:	1a9b      	subs	r3, r3, r2
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	440b      	add	r3, r1
 8003736:	3319      	adds	r3, #25
 8003738:	2200      	movs	r2, #0
 800373a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800373c:	78fa      	ldrb	r2, [r7, #3]
 800373e:	6879      	ldr	r1, [r7, #4]
 8003740:	4613      	mov	r3, r2
 8003742:	011b      	lsls	r3, r3, #4
 8003744:	1a9b      	subs	r3, r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	334c      	adds	r3, #76	@ 0x4c
 800374c:	2202      	movs	r2, #2
 800374e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003750:	78fa      	ldrb	r2, [r7, #3]
 8003752:	6879      	ldr	r1, [r7, #4]
 8003754:	4613      	mov	r3, r2
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	1a9b      	subs	r3, r3, r2
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	334d      	adds	r3, #77	@ 0x4d
 8003760:	2203      	movs	r2, #3
 8003762:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	78fa      	ldrb	r2, [r7, #3]
 800376a:	4611      	mov	r1, r2
 800376c:	4618      	mov	r0, r3
 800376e:	f004 f986 	bl	8007a7e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003772:	78fa      	ldrb	r2, [r7, #3]
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	4613      	mov	r3, r2
 8003778:	011b      	lsls	r3, r3, #4
 800377a:	1a9b      	subs	r3, r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	331a      	adds	r3, #26
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b01      	cmp	r3, #1
 8003786:	f040 8437 	bne.w	8003ff8 <HCD_HC_OUT_IRQHandler+0x978>
 800378a:	78fa      	ldrb	r2, [r7, #3]
 800378c:	6879      	ldr	r1, [r7, #4]
 800378e:	4613      	mov	r3, r2
 8003790:	011b      	lsls	r3, r3, #4
 8003792:	1a9b      	subs	r3, r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	331b      	adds	r3, #27
 800379a:	781b      	ldrb	r3, [r3, #0]
 800379c:	2b00      	cmp	r3, #0
 800379e:	f040 842b 	bne.w	8003ff8 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80037a2:	78fa      	ldrb	r2, [r7, #3]
 80037a4:	6879      	ldr	r1, [r7, #4]
 80037a6:	4613      	mov	r3, r2
 80037a8:	011b      	lsls	r3, r3, #4
 80037aa:	1a9b      	subs	r3, r3, r2
 80037ac:	009b      	lsls	r3, r3, #2
 80037ae:	440b      	add	r3, r1
 80037b0:	3326      	adds	r3, #38	@ 0x26
 80037b2:	781b      	ldrb	r3, [r3, #0]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d009      	beq.n	80037cc <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80037b8:	78fa      	ldrb	r2, [r7, #3]
 80037ba:	6879      	ldr	r1, [r7, #4]
 80037bc:	4613      	mov	r3, r2
 80037be:	011b      	lsls	r3, r3, #4
 80037c0:	1a9b      	subs	r3, r3, r2
 80037c2:	009b      	lsls	r3, r3, #2
 80037c4:	440b      	add	r3, r1
 80037c6:	331b      	adds	r3, #27
 80037c8:	2201      	movs	r2, #1
 80037ca:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80037cc:	78fa      	ldrb	r2, [r7, #3]
 80037ce:	6879      	ldr	r1, [r7, #4]
 80037d0:	4613      	mov	r3, r2
 80037d2:	011b      	lsls	r3, r3, #4
 80037d4:	1a9b      	subs	r3, r3, r2
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	334d      	adds	r3, #77	@ 0x4d
 80037dc:	2203      	movs	r2, #3
 80037de:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	78fa      	ldrb	r2, [r7, #3]
 80037e6:	4611      	mov	r1, r2
 80037e8:	4618      	mov	r0, r3
 80037ea:	f004 f948 	bl	8007a7e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80037ee:	78fa      	ldrb	r2, [r7, #3]
 80037f0:	6879      	ldr	r1, [r7, #4]
 80037f2:	4613      	mov	r3, r2
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	1a9b      	subs	r3, r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	440b      	add	r3, r1
 80037fc:	3344      	adds	r3, #68	@ 0x44
 80037fe:	2200      	movs	r2, #0
 8003800:	601a      	str	r2, [r3, #0]
 8003802:	e3f9      	b.n	8003ff8 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	78fa      	ldrb	r2, [r7, #3]
 800380a:	4611      	mov	r1, r2
 800380c:	4618      	mov	r0, r3
 800380e:	f003 fb92 	bl	8006f36 <USB_ReadChInterrupts>
 8003812:	4603      	mov	r3, r0
 8003814:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003818:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800381c:	d111      	bne.n	8003842 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800381e:	78fb      	ldrb	r3, [r7, #3]
 8003820:	015a      	lsls	r2, r3, #5
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4413      	add	r3, r2
 8003826:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800382a:	461a      	mov	r2, r3
 800382c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003830:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	78fa      	ldrb	r2, [r7, #3]
 8003838:	4611      	mov	r1, r2
 800383a:	4618      	mov	r0, r3
 800383c:	f004 f91f 	bl	8007a7e <USB_HC_Halt>
 8003840:	e3da      	b.n	8003ff8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	78fa      	ldrb	r2, [r7, #3]
 8003848:	4611      	mov	r1, r2
 800384a:	4618      	mov	r0, r3
 800384c:	f003 fb73 	bl	8006f36 <USB_ReadChInterrupts>
 8003850:	4603      	mov	r3, r0
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	2b01      	cmp	r3, #1
 8003858:	d168      	bne.n	800392c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800385a:	78fa      	ldrb	r2, [r7, #3]
 800385c:	6879      	ldr	r1, [r7, #4]
 800385e:	4613      	mov	r3, r2
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	1a9b      	subs	r3, r3, r2
 8003864:	009b      	lsls	r3, r3, #2
 8003866:	440b      	add	r3, r1
 8003868:	3344      	adds	r3, #68	@ 0x44
 800386a:	2200      	movs	r2, #0
 800386c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	78fa      	ldrb	r2, [r7, #3]
 8003874:	4611      	mov	r1, r2
 8003876:	4618      	mov	r0, r3
 8003878:	f003 fb5d 	bl	8006f36 <USB_ReadChInterrupts>
 800387c:	4603      	mov	r3, r0
 800387e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003882:	2b40      	cmp	r3, #64	@ 0x40
 8003884:	d112      	bne.n	80038ac <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003886:	78fa      	ldrb	r2, [r7, #3]
 8003888:	6879      	ldr	r1, [r7, #4]
 800388a:	4613      	mov	r3, r2
 800388c:	011b      	lsls	r3, r3, #4
 800388e:	1a9b      	subs	r3, r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	440b      	add	r3, r1
 8003894:	3319      	adds	r3, #25
 8003896:	2201      	movs	r2, #1
 8003898:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800389a:	78fb      	ldrb	r3, [r7, #3]
 800389c:	015a      	lsls	r2, r3, #5
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	4413      	add	r3, r2
 80038a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038a6:	461a      	mov	r2, r3
 80038a8:	2340      	movs	r3, #64	@ 0x40
 80038aa:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80038ac:	78fa      	ldrb	r2, [r7, #3]
 80038ae:	6879      	ldr	r1, [r7, #4]
 80038b0:	4613      	mov	r3, r2
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	1a9b      	subs	r3, r3, r2
 80038b6:	009b      	lsls	r3, r3, #2
 80038b8:	440b      	add	r3, r1
 80038ba:	331b      	adds	r3, #27
 80038bc:	781b      	ldrb	r3, [r3, #0]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d019      	beq.n	80038f6 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80038c2:	78fa      	ldrb	r2, [r7, #3]
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	4613      	mov	r3, r2
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	1a9b      	subs	r3, r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	440b      	add	r3, r1
 80038d0:	331b      	adds	r3, #27
 80038d2:	2200      	movs	r2, #0
 80038d4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80038d6:	78fb      	ldrb	r3, [r7, #3]
 80038d8:	015a      	lsls	r2, r3, #5
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	4413      	add	r3, r2
 80038de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038e2:	685b      	ldr	r3, [r3, #4]
 80038e4:	78fa      	ldrb	r2, [r7, #3]
 80038e6:	0151      	lsls	r1, r2, #5
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	440a      	add	r2, r1
 80038ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80038f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038f4:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80038f6:	78fb      	ldrb	r3, [r7, #3]
 80038f8:	015a      	lsls	r2, r3, #5
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	4413      	add	r3, r2
 80038fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003902:	461a      	mov	r2, r3
 8003904:	2301      	movs	r3, #1
 8003906:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003908:	78fa      	ldrb	r2, [r7, #3]
 800390a:	6879      	ldr	r1, [r7, #4]
 800390c:	4613      	mov	r3, r2
 800390e:	011b      	lsls	r3, r3, #4
 8003910:	1a9b      	subs	r3, r3, r2
 8003912:	009b      	lsls	r3, r3, #2
 8003914:	440b      	add	r3, r1
 8003916:	334d      	adds	r3, #77	@ 0x4d
 8003918:	2201      	movs	r2, #1
 800391a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	78fa      	ldrb	r2, [r7, #3]
 8003922:	4611      	mov	r1, r2
 8003924:	4618      	mov	r0, r3
 8003926:	f004 f8aa 	bl	8007a7e <USB_HC_Halt>
 800392a:	e365      	b.n	8003ff8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	78fa      	ldrb	r2, [r7, #3]
 8003932:	4611      	mov	r1, r2
 8003934:	4618      	mov	r0, r3
 8003936:	f003 fafe 	bl	8006f36 <USB_ReadChInterrupts>
 800393a:	4603      	mov	r3, r0
 800393c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003940:	2b40      	cmp	r3, #64	@ 0x40
 8003942:	d139      	bne.n	80039b8 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003944:	78fa      	ldrb	r2, [r7, #3]
 8003946:	6879      	ldr	r1, [r7, #4]
 8003948:	4613      	mov	r3, r2
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	1a9b      	subs	r3, r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	440b      	add	r3, r1
 8003952:	334d      	adds	r3, #77	@ 0x4d
 8003954:	2205      	movs	r2, #5
 8003956:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003958:	78fa      	ldrb	r2, [r7, #3]
 800395a:	6879      	ldr	r1, [r7, #4]
 800395c:	4613      	mov	r3, r2
 800395e:	011b      	lsls	r3, r3, #4
 8003960:	1a9b      	subs	r3, r3, r2
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	440b      	add	r3, r1
 8003966:	331a      	adds	r3, #26
 8003968:	781b      	ldrb	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d109      	bne.n	8003982 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800396e:	78fa      	ldrb	r2, [r7, #3]
 8003970:	6879      	ldr	r1, [r7, #4]
 8003972:	4613      	mov	r3, r2
 8003974:	011b      	lsls	r3, r3, #4
 8003976:	1a9b      	subs	r3, r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	440b      	add	r3, r1
 800397c:	3319      	adds	r3, #25
 800397e:	2201      	movs	r2, #1
 8003980:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003982:	78fa      	ldrb	r2, [r7, #3]
 8003984:	6879      	ldr	r1, [r7, #4]
 8003986:	4613      	mov	r3, r2
 8003988:	011b      	lsls	r3, r3, #4
 800398a:	1a9b      	subs	r3, r3, r2
 800398c:	009b      	lsls	r3, r3, #2
 800398e:	440b      	add	r3, r1
 8003990:	3344      	adds	r3, #68	@ 0x44
 8003992:	2200      	movs	r2, #0
 8003994:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	78fa      	ldrb	r2, [r7, #3]
 800399c:	4611      	mov	r1, r2
 800399e:	4618      	mov	r0, r3
 80039a0:	f004 f86d 	bl	8007a7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80039a4:	78fb      	ldrb	r3, [r7, #3]
 80039a6:	015a      	lsls	r2, r3, #5
 80039a8:	693b      	ldr	r3, [r7, #16]
 80039aa:	4413      	add	r3, r2
 80039ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039b0:	461a      	mov	r2, r3
 80039b2:	2340      	movs	r3, #64	@ 0x40
 80039b4:	6093      	str	r3, [r2, #8]
 80039b6:	e31f      	b.n	8003ff8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	78fa      	ldrb	r2, [r7, #3]
 80039be:	4611      	mov	r1, r2
 80039c0:	4618      	mov	r0, r3
 80039c2:	f003 fab8 	bl	8006f36 <USB_ReadChInterrupts>
 80039c6:	4603      	mov	r3, r0
 80039c8:	f003 0308 	and.w	r3, r3, #8
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d11a      	bne.n	8003a06 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80039d0:	78fb      	ldrb	r3, [r7, #3]
 80039d2:	015a      	lsls	r2, r3, #5
 80039d4:	693b      	ldr	r3, [r7, #16]
 80039d6:	4413      	add	r3, r2
 80039d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039dc:	461a      	mov	r2, r3
 80039de:	2308      	movs	r3, #8
 80039e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80039e2:	78fa      	ldrb	r2, [r7, #3]
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	4613      	mov	r3, r2
 80039e8:	011b      	lsls	r3, r3, #4
 80039ea:	1a9b      	subs	r3, r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	440b      	add	r3, r1
 80039f0:	334d      	adds	r3, #77	@ 0x4d
 80039f2:	2206      	movs	r2, #6
 80039f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	78fa      	ldrb	r2, [r7, #3]
 80039fc:	4611      	mov	r1, r2
 80039fe:	4618      	mov	r0, r3
 8003a00:	f004 f83d 	bl	8007a7e <USB_HC_Halt>
 8003a04:	e2f8      	b.n	8003ff8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	78fa      	ldrb	r2, [r7, #3]
 8003a0c:	4611      	mov	r1, r2
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f003 fa91 	bl	8006f36 <USB_ReadChInterrupts>
 8003a14:	4603      	mov	r3, r0
 8003a16:	f003 0310 	and.w	r3, r3, #16
 8003a1a:	2b10      	cmp	r3, #16
 8003a1c:	d144      	bne.n	8003aa8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003a1e:	78fa      	ldrb	r2, [r7, #3]
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	4613      	mov	r3, r2
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	1a9b      	subs	r3, r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	440b      	add	r3, r1
 8003a2c:	3344      	adds	r3, #68	@ 0x44
 8003a2e:	2200      	movs	r2, #0
 8003a30:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003a32:	78fa      	ldrb	r2, [r7, #3]
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	011b      	lsls	r3, r3, #4
 8003a3a:	1a9b      	subs	r3, r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	334d      	adds	r3, #77	@ 0x4d
 8003a42:	2204      	movs	r2, #4
 8003a44:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003a46:	78fa      	ldrb	r2, [r7, #3]
 8003a48:	6879      	ldr	r1, [r7, #4]
 8003a4a:	4613      	mov	r3, r2
 8003a4c:	011b      	lsls	r3, r3, #4
 8003a4e:	1a9b      	subs	r3, r3, r2
 8003a50:	009b      	lsls	r3, r3, #2
 8003a52:	440b      	add	r3, r1
 8003a54:	3319      	adds	r3, #25
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d114      	bne.n	8003a86 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003a5c:	78fa      	ldrb	r2, [r7, #3]
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	4613      	mov	r3, r2
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	1a9b      	subs	r3, r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	3318      	adds	r3, #24
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d109      	bne.n	8003a86 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003a72:	78fa      	ldrb	r2, [r7, #3]
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	1a9b      	subs	r3, r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	440b      	add	r3, r1
 8003a80:	3319      	adds	r3, #25
 8003a82:	2201      	movs	r2, #1
 8003a84:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	78fa      	ldrb	r2, [r7, #3]
 8003a8c:	4611      	mov	r1, r2
 8003a8e:	4618      	mov	r0, r3
 8003a90:	f003 fff5 	bl	8007a7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003a94:	78fb      	ldrb	r3, [r7, #3]
 8003a96:	015a      	lsls	r2, r3, #5
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	4413      	add	r3, r2
 8003a9c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003aa0:	461a      	mov	r2, r3
 8003aa2:	2310      	movs	r3, #16
 8003aa4:	6093      	str	r3, [r2, #8]
 8003aa6:	e2a7      	b.n	8003ff8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	78fa      	ldrb	r2, [r7, #3]
 8003aae:	4611      	mov	r1, r2
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f003 fa40 	bl	8006f36 <USB_ReadChInterrupts>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003abc:	2b80      	cmp	r3, #128	@ 0x80
 8003abe:	f040 8083 	bne.w	8003bc8 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	799b      	ldrb	r3, [r3, #6]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d111      	bne.n	8003aee <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003aca:	78fa      	ldrb	r2, [r7, #3]
 8003acc:	6879      	ldr	r1, [r7, #4]
 8003ace:	4613      	mov	r3, r2
 8003ad0:	011b      	lsls	r3, r3, #4
 8003ad2:	1a9b      	subs	r3, r3, r2
 8003ad4:	009b      	lsls	r3, r3, #2
 8003ad6:	440b      	add	r3, r1
 8003ad8:	334d      	adds	r3, #77	@ 0x4d
 8003ada:	2207      	movs	r2, #7
 8003adc:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	78fa      	ldrb	r2, [r7, #3]
 8003ae4:	4611      	mov	r1, r2
 8003ae6:	4618      	mov	r0, r3
 8003ae8:	f003 ffc9 	bl	8007a7e <USB_HC_Halt>
 8003aec:	e062      	b.n	8003bb4 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003aee:	78fa      	ldrb	r2, [r7, #3]
 8003af0:	6879      	ldr	r1, [r7, #4]
 8003af2:	4613      	mov	r3, r2
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	1a9b      	subs	r3, r3, r2
 8003af8:	009b      	lsls	r3, r3, #2
 8003afa:	440b      	add	r3, r1
 8003afc:	3344      	adds	r3, #68	@ 0x44
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	1c59      	adds	r1, r3, #1
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	4613      	mov	r3, r2
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	1a9b      	subs	r3, r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4403      	add	r3, r0
 8003b0e:	3344      	adds	r3, #68	@ 0x44
 8003b10:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003b12:	78fa      	ldrb	r2, [r7, #3]
 8003b14:	6879      	ldr	r1, [r7, #4]
 8003b16:	4613      	mov	r3, r2
 8003b18:	011b      	lsls	r3, r3, #4
 8003b1a:	1a9b      	subs	r3, r3, r2
 8003b1c:	009b      	lsls	r3, r3, #2
 8003b1e:	440b      	add	r3, r1
 8003b20:	3344      	adds	r3, #68	@ 0x44
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	2b02      	cmp	r3, #2
 8003b26:	d922      	bls.n	8003b6e <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003b28:	78fa      	ldrb	r2, [r7, #3]
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	011b      	lsls	r3, r3, #4
 8003b30:	1a9b      	subs	r3, r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	440b      	add	r3, r1
 8003b36:	3344      	adds	r3, #68	@ 0x44
 8003b38:	2200      	movs	r2, #0
 8003b3a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003b3c:	78fa      	ldrb	r2, [r7, #3]
 8003b3e:	6879      	ldr	r1, [r7, #4]
 8003b40:	4613      	mov	r3, r2
 8003b42:	011b      	lsls	r3, r3, #4
 8003b44:	1a9b      	subs	r3, r3, r2
 8003b46:	009b      	lsls	r3, r3, #2
 8003b48:	440b      	add	r3, r1
 8003b4a:	334c      	adds	r3, #76	@ 0x4c
 8003b4c:	2204      	movs	r2, #4
 8003b4e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003b50:	78fa      	ldrb	r2, [r7, #3]
 8003b52:	6879      	ldr	r1, [r7, #4]
 8003b54:	4613      	mov	r3, r2
 8003b56:	011b      	lsls	r3, r3, #4
 8003b58:	1a9b      	subs	r3, r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	440b      	add	r3, r1
 8003b5e:	334c      	adds	r3, #76	@ 0x4c
 8003b60:	781a      	ldrb	r2, [r3, #0]
 8003b62:	78fb      	ldrb	r3, [r7, #3]
 8003b64:	4619      	mov	r1, r3
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f006 fade 	bl	800a128 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003b6c:	e022      	b.n	8003bb4 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b6e:	78fa      	ldrb	r2, [r7, #3]
 8003b70:	6879      	ldr	r1, [r7, #4]
 8003b72:	4613      	mov	r3, r2
 8003b74:	011b      	lsls	r3, r3, #4
 8003b76:	1a9b      	subs	r3, r3, r2
 8003b78:	009b      	lsls	r3, r3, #2
 8003b7a:	440b      	add	r3, r1
 8003b7c:	334c      	adds	r3, #76	@ 0x4c
 8003b7e:	2202      	movs	r2, #2
 8003b80:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003b82:	78fb      	ldrb	r3, [r7, #3]
 8003b84:	015a      	lsls	r2, r3, #5
 8003b86:	693b      	ldr	r3, [r7, #16]
 8003b88:	4413      	add	r3, r2
 8003b8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003b98:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ba0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003ba2:	78fb      	ldrb	r3, [r7, #3]
 8003ba4:	015a      	lsls	r2, r3, #5
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	4413      	add	r3, r2
 8003baa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bae:	461a      	mov	r2, r3
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003bb4:	78fb      	ldrb	r3, [r7, #3]
 8003bb6:	015a      	lsls	r2, r3, #5
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	4413      	add	r3, r2
 8003bbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	2380      	movs	r3, #128	@ 0x80
 8003bc4:	6093      	str	r3, [r2, #8]
 8003bc6:	e217      	b.n	8003ff8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	78fa      	ldrb	r2, [r7, #3]
 8003bce:	4611      	mov	r1, r2
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f003 f9b0 	bl	8006f36 <USB_ReadChInterrupts>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003be0:	d11b      	bne.n	8003c1a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003be2:	78fa      	ldrb	r2, [r7, #3]
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	4613      	mov	r3, r2
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	1a9b      	subs	r3, r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	440b      	add	r3, r1
 8003bf0:	334d      	adds	r3, #77	@ 0x4d
 8003bf2:	2209      	movs	r2, #9
 8003bf4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	78fa      	ldrb	r2, [r7, #3]
 8003bfc:	4611      	mov	r1, r2
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f003 ff3d 	bl	8007a7e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003c04:	78fb      	ldrb	r3, [r7, #3]
 8003c06:	015a      	lsls	r2, r3, #5
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	4413      	add	r3, r2
 8003c0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c10:	461a      	mov	r2, r3
 8003c12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c16:	6093      	str	r3, [r2, #8]
 8003c18:	e1ee      	b.n	8003ff8 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	78fa      	ldrb	r2, [r7, #3]
 8003c20:	4611      	mov	r1, r2
 8003c22:	4618      	mov	r0, r3
 8003c24:	f003 f987 	bl	8006f36 <USB_ReadChInterrupts>
 8003c28:	4603      	mov	r3, r0
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b02      	cmp	r3, #2
 8003c30:	f040 81df 	bne.w	8003ff2 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003c34:	78fb      	ldrb	r3, [r7, #3]
 8003c36:	015a      	lsls	r2, r3, #5
 8003c38:	693b      	ldr	r3, [r7, #16]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c40:	461a      	mov	r2, r3
 8003c42:	2302      	movs	r3, #2
 8003c44:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003c46:	78fa      	ldrb	r2, [r7, #3]
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	4613      	mov	r3, r2
 8003c4c:	011b      	lsls	r3, r3, #4
 8003c4e:	1a9b      	subs	r3, r3, r2
 8003c50:	009b      	lsls	r3, r3, #2
 8003c52:	440b      	add	r3, r1
 8003c54:	334d      	adds	r3, #77	@ 0x4d
 8003c56:	781b      	ldrb	r3, [r3, #0]
 8003c58:	2b01      	cmp	r3, #1
 8003c5a:	f040 8093 	bne.w	8003d84 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c5e:	78fa      	ldrb	r2, [r7, #3]
 8003c60:	6879      	ldr	r1, [r7, #4]
 8003c62:	4613      	mov	r3, r2
 8003c64:	011b      	lsls	r3, r3, #4
 8003c66:	1a9b      	subs	r3, r3, r2
 8003c68:	009b      	lsls	r3, r3, #2
 8003c6a:	440b      	add	r3, r1
 8003c6c:	334d      	adds	r3, #77	@ 0x4d
 8003c6e:	2202      	movs	r2, #2
 8003c70:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003c72:	78fa      	ldrb	r2, [r7, #3]
 8003c74:	6879      	ldr	r1, [r7, #4]
 8003c76:	4613      	mov	r3, r2
 8003c78:	011b      	lsls	r3, r3, #4
 8003c7a:	1a9b      	subs	r3, r3, r2
 8003c7c:	009b      	lsls	r3, r3, #2
 8003c7e:	440b      	add	r3, r1
 8003c80:	334c      	adds	r3, #76	@ 0x4c
 8003c82:	2201      	movs	r2, #1
 8003c84:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003c86:	78fa      	ldrb	r2, [r7, #3]
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	011b      	lsls	r3, r3, #4
 8003c8e:	1a9b      	subs	r3, r3, r2
 8003c90:	009b      	lsls	r3, r3, #2
 8003c92:	440b      	add	r3, r1
 8003c94:	3326      	adds	r3, #38	@ 0x26
 8003c96:	781b      	ldrb	r3, [r3, #0]
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d00b      	beq.n	8003cb4 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003c9c:	78fa      	ldrb	r2, [r7, #3]
 8003c9e:	6879      	ldr	r1, [r7, #4]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	011b      	lsls	r3, r3, #4
 8003ca4:	1a9b      	subs	r3, r3, r2
 8003ca6:	009b      	lsls	r3, r3, #2
 8003ca8:	440b      	add	r3, r1
 8003caa:	3326      	adds	r3, #38	@ 0x26
 8003cac:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003cae:	2b03      	cmp	r3, #3
 8003cb0:	f040 8190 	bne.w	8003fd4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	799b      	ldrb	r3, [r3, #6]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d115      	bne.n	8003ce8 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003cbc:	78fa      	ldrb	r2, [r7, #3]
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	1a9b      	subs	r3, r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	333d      	adds	r3, #61	@ 0x3d
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	78fa      	ldrb	r2, [r7, #3]
 8003cd0:	f083 0301 	eor.w	r3, r3, #1
 8003cd4:	b2d8      	uxtb	r0, r3
 8003cd6:	6879      	ldr	r1, [r7, #4]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	011b      	lsls	r3, r3, #4
 8003cdc:	1a9b      	subs	r3, r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	333d      	adds	r3, #61	@ 0x3d
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	799b      	ldrb	r3, [r3, #6]
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	f040 8171 	bne.w	8003fd4 <HCD_HC_OUT_IRQHandler+0x954>
 8003cf2:	78fa      	ldrb	r2, [r7, #3]
 8003cf4:	6879      	ldr	r1, [r7, #4]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	011b      	lsls	r3, r3, #4
 8003cfa:	1a9b      	subs	r3, r3, r2
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	440b      	add	r3, r1
 8003d00:	3334      	adds	r3, #52	@ 0x34
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	f000 8165 	beq.w	8003fd4 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003d0a:	78fa      	ldrb	r2, [r7, #3]
 8003d0c:	6879      	ldr	r1, [r7, #4]
 8003d0e:	4613      	mov	r3, r2
 8003d10:	011b      	lsls	r3, r3, #4
 8003d12:	1a9b      	subs	r3, r3, r2
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	440b      	add	r3, r1
 8003d18:	3334      	adds	r3, #52	@ 0x34
 8003d1a:	6819      	ldr	r1, [r3, #0]
 8003d1c:	78fa      	ldrb	r2, [r7, #3]
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	4613      	mov	r3, r2
 8003d22:	011b      	lsls	r3, r3, #4
 8003d24:	1a9b      	subs	r3, r3, r2
 8003d26:	009b      	lsls	r3, r3, #2
 8003d28:	4403      	add	r3, r0
 8003d2a:	3328      	adds	r3, #40	@ 0x28
 8003d2c:	881b      	ldrh	r3, [r3, #0]
 8003d2e:	440b      	add	r3, r1
 8003d30:	1e59      	subs	r1, r3, #1
 8003d32:	78fa      	ldrb	r2, [r7, #3]
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	4613      	mov	r3, r2
 8003d38:	011b      	lsls	r3, r3, #4
 8003d3a:	1a9b      	subs	r3, r3, r2
 8003d3c:	009b      	lsls	r3, r3, #2
 8003d3e:	4403      	add	r3, r0
 8003d40:	3328      	adds	r3, #40	@ 0x28
 8003d42:	881b      	ldrh	r3, [r3, #0]
 8003d44:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d48:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	f003 0301 	and.w	r3, r3, #1
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	f000 813f 	beq.w	8003fd4 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003d56:	78fa      	ldrb	r2, [r7, #3]
 8003d58:	6879      	ldr	r1, [r7, #4]
 8003d5a:	4613      	mov	r3, r2
 8003d5c:	011b      	lsls	r3, r3, #4
 8003d5e:	1a9b      	subs	r3, r3, r2
 8003d60:	009b      	lsls	r3, r3, #2
 8003d62:	440b      	add	r3, r1
 8003d64:	333d      	adds	r3, #61	@ 0x3d
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	78fa      	ldrb	r2, [r7, #3]
 8003d6a:	f083 0301 	eor.w	r3, r3, #1
 8003d6e:	b2d8      	uxtb	r0, r3
 8003d70:	6879      	ldr	r1, [r7, #4]
 8003d72:	4613      	mov	r3, r2
 8003d74:	011b      	lsls	r3, r3, #4
 8003d76:	1a9b      	subs	r3, r3, r2
 8003d78:	009b      	lsls	r3, r3, #2
 8003d7a:	440b      	add	r3, r1
 8003d7c:	333d      	adds	r3, #61	@ 0x3d
 8003d7e:	4602      	mov	r2, r0
 8003d80:	701a      	strb	r2, [r3, #0]
 8003d82:	e127      	b.n	8003fd4 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003d84:	78fa      	ldrb	r2, [r7, #3]
 8003d86:	6879      	ldr	r1, [r7, #4]
 8003d88:	4613      	mov	r3, r2
 8003d8a:	011b      	lsls	r3, r3, #4
 8003d8c:	1a9b      	subs	r3, r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	440b      	add	r3, r1
 8003d92:	334d      	adds	r3, #77	@ 0x4d
 8003d94:	781b      	ldrb	r3, [r3, #0]
 8003d96:	2b03      	cmp	r3, #3
 8003d98:	d120      	bne.n	8003ddc <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d9a:	78fa      	ldrb	r2, [r7, #3]
 8003d9c:	6879      	ldr	r1, [r7, #4]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	011b      	lsls	r3, r3, #4
 8003da2:	1a9b      	subs	r3, r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	440b      	add	r3, r1
 8003da8:	334d      	adds	r3, #77	@ 0x4d
 8003daa:	2202      	movs	r2, #2
 8003dac:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003dae:	78fa      	ldrb	r2, [r7, #3]
 8003db0:	6879      	ldr	r1, [r7, #4]
 8003db2:	4613      	mov	r3, r2
 8003db4:	011b      	lsls	r3, r3, #4
 8003db6:	1a9b      	subs	r3, r3, r2
 8003db8:	009b      	lsls	r3, r3, #2
 8003dba:	440b      	add	r3, r1
 8003dbc:	331b      	adds	r3, #27
 8003dbe:	781b      	ldrb	r3, [r3, #0]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	f040 8107 	bne.w	8003fd4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003dc6:	78fa      	ldrb	r2, [r7, #3]
 8003dc8:	6879      	ldr	r1, [r7, #4]
 8003dca:	4613      	mov	r3, r2
 8003dcc:	011b      	lsls	r3, r3, #4
 8003dce:	1a9b      	subs	r3, r3, r2
 8003dd0:	009b      	lsls	r3, r3, #2
 8003dd2:	440b      	add	r3, r1
 8003dd4:	334c      	adds	r3, #76	@ 0x4c
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	701a      	strb	r2, [r3, #0]
 8003dda:	e0fb      	b.n	8003fd4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003ddc:	78fa      	ldrb	r2, [r7, #3]
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	4613      	mov	r3, r2
 8003de2:	011b      	lsls	r3, r3, #4
 8003de4:	1a9b      	subs	r3, r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	334d      	adds	r3, #77	@ 0x4d
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	2b04      	cmp	r3, #4
 8003df0:	d13a      	bne.n	8003e68 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003df2:	78fa      	ldrb	r2, [r7, #3]
 8003df4:	6879      	ldr	r1, [r7, #4]
 8003df6:	4613      	mov	r3, r2
 8003df8:	011b      	lsls	r3, r3, #4
 8003dfa:	1a9b      	subs	r3, r3, r2
 8003dfc:	009b      	lsls	r3, r3, #2
 8003dfe:	440b      	add	r3, r1
 8003e00:	334d      	adds	r3, #77	@ 0x4d
 8003e02:	2202      	movs	r2, #2
 8003e04:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003e06:	78fa      	ldrb	r2, [r7, #3]
 8003e08:	6879      	ldr	r1, [r7, #4]
 8003e0a:	4613      	mov	r3, r2
 8003e0c:	011b      	lsls	r3, r3, #4
 8003e0e:	1a9b      	subs	r3, r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	440b      	add	r3, r1
 8003e14:	334c      	adds	r3, #76	@ 0x4c
 8003e16:	2202      	movs	r2, #2
 8003e18:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003e1a:	78fa      	ldrb	r2, [r7, #3]
 8003e1c:	6879      	ldr	r1, [r7, #4]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	011b      	lsls	r3, r3, #4
 8003e22:	1a9b      	subs	r3, r3, r2
 8003e24:	009b      	lsls	r3, r3, #2
 8003e26:	440b      	add	r3, r1
 8003e28:	331b      	adds	r3, #27
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	2b01      	cmp	r3, #1
 8003e2e:	f040 80d1 	bne.w	8003fd4 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003e32:	78fa      	ldrb	r2, [r7, #3]
 8003e34:	6879      	ldr	r1, [r7, #4]
 8003e36:	4613      	mov	r3, r2
 8003e38:	011b      	lsls	r3, r3, #4
 8003e3a:	1a9b      	subs	r3, r3, r2
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	440b      	add	r3, r1
 8003e40:	331b      	adds	r3, #27
 8003e42:	2200      	movs	r2, #0
 8003e44:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003e46:	78fb      	ldrb	r3, [r7, #3]
 8003e48:	015a      	lsls	r2, r3, #5
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	4413      	add	r3, r2
 8003e4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	78fa      	ldrb	r2, [r7, #3]
 8003e56:	0151      	lsls	r1, r2, #5
 8003e58:	693a      	ldr	r2, [r7, #16]
 8003e5a:	440a      	add	r2, r1
 8003e5c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003e60:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e64:	6053      	str	r3, [r2, #4]
 8003e66:	e0b5      	b.n	8003fd4 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003e68:	78fa      	ldrb	r2, [r7, #3]
 8003e6a:	6879      	ldr	r1, [r7, #4]
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	011b      	lsls	r3, r3, #4
 8003e70:	1a9b      	subs	r3, r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	440b      	add	r3, r1
 8003e76:	334d      	adds	r3, #77	@ 0x4d
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	2b05      	cmp	r3, #5
 8003e7c:	d114      	bne.n	8003ea8 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e7e:	78fa      	ldrb	r2, [r7, #3]
 8003e80:	6879      	ldr	r1, [r7, #4]
 8003e82:	4613      	mov	r3, r2
 8003e84:	011b      	lsls	r3, r3, #4
 8003e86:	1a9b      	subs	r3, r3, r2
 8003e88:	009b      	lsls	r3, r3, #2
 8003e8a:	440b      	add	r3, r1
 8003e8c:	334d      	adds	r3, #77	@ 0x4d
 8003e8e:	2202      	movs	r2, #2
 8003e90:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003e92:	78fa      	ldrb	r2, [r7, #3]
 8003e94:	6879      	ldr	r1, [r7, #4]
 8003e96:	4613      	mov	r3, r2
 8003e98:	011b      	lsls	r3, r3, #4
 8003e9a:	1a9b      	subs	r3, r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	440b      	add	r3, r1
 8003ea0:	334c      	adds	r3, #76	@ 0x4c
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	701a      	strb	r2, [r3, #0]
 8003ea6:	e095      	b.n	8003fd4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003ea8:	78fa      	ldrb	r2, [r7, #3]
 8003eaa:	6879      	ldr	r1, [r7, #4]
 8003eac:	4613      	mov	r3, r2
 8003eae:	011b      	lsls	r3, r3, #4
 8003eb0:	1a9b      	subs	r3, r3, r2
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	334d      	adds	r3, #77	@ 0x4d
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	2b06      	cmp	r3, #6
 8003ebc:	d114      	bne.n	8003ee8 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003ebe:	78fa      	ldrb	r2, [r7, #3]
 8003ec0:	6879      	ldr	r1, [r7, #4]
 8003ec2:	4613      	mov	r3, r2
 8003ec4:	011b      	lsls	r3, r3, #4
 8003ec6:	1a9b      	subs	r3, r3, r2
 8003ec8:	009b      	lsls	r3, r3, #2
 8003eca:	440b      	add	r3, r1
 8003ecc:	334d      	adds	r3, #77	@ 0x4d
 8003ece:	2202      	movs	r2, #2
 8003ed0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003ed2:	78fa      	ldrb	r2, [r7, #3]
 8003ed4:	6879      	ldr	r1, [r7, #4]
 8003ed6:	4613      	mov	r3, r2
 8003ed8:	011b      	lsls	r3, r3, #4
 8003eda:	1a9b      	subs	r3, r3, r2
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	440b      	add	r3, r1
 8003ee0:	334c      	adds	r3, #76	@ 0x4c
 8003ee2:	2205      	movs	r2, #5
 8003ee4:	701a      	strb	r2, [r3, #0]
 8003ee6:	e075      	b.n	8003fd4 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003ee8:	78fa      	ldrb	r2, [r7, #3]
 8003eea:	6879      	ldr	r1, [r7, #4]
 8003eec:	4613      	mov	r3, r2
 8003eee:	011b      	lsls	r3, r3, #4
 8003ef0:	1a9b      	subs	r3, r3, r2
 8003ef2:	009b      	lsls	r3, r3, #2
 8003ef4:	440b      	add	r3, r1
 8003ef6:	334d      	adds	r3, #77	@ 0x4d
 8003ef8:	781b      	ldrb	r3, [r3, #0]
 8003efa:	2b07      	cmp	r3, #7
 8003efc:	d00a      	beq.n	8003f14 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003efe:	78fa      	ldrb	r2, [r7, #3]
 8003f00:	6879      	ldr	r1, [r7, #4]
 8003f02:	4613      	mov	r3, r2
 8003f04:	011b      	lsls	r3, r3, #4
 8003f06:	1a9b      	subs	r3, r3, r2
 8003f08:	009b      	lsls	r3, r3, #2
 8003f0a:	440b      	add	r3, r1
 8003f0c:	334d      	adds	r3, #77	@ 0x4d
 8003f0e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003f10:	2b09      	cmp	r3, #9
 8003f12:	d170      	bne.n	8003ff6 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003f14:	78fa      	ldrb	r2, [r7, #3]
 8003f16:	6879      	ldr	r1, [r7, #4]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	011b      	lsls	r3, r3, #4
 8003f1c:	1a9b      	subs	r3, r3, r2
 8003f1e:	009b      	lsls	r3, r3, #2
 8003f20:	440b      	add	r3, r1
 8003f22:	334d      	adds	r3, #77	@ 0x4d
 8003f24:	2202      	movs	r2, #2
 8003f26:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003f28:	78fa      	ldrb	r2, [r7, #3]
 8003f2a:	6879      	ldr	r1, [r7, #4]
 8003f2c:	4613      	mov	r3, r2
 8003f2e:	011b      	lsls	r3, r3, #4
 8003f30:	1a9b      	subs	r3, r3, r2
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	440b      	add	r3, r1
 8003f36:	3344      	adds	r3, #68	@ 0x44
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	1c59      	adds	r1, r3, #1
 8003f3c:	6878      	ldr	r0, [r7, #4]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	011b      	lsls	r3, r3, #4
 8003f42:	1a9b      	subs	r3, r3, r2
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	4403      	add	r3, r0
 8003f48:	3344      	adds	r3, #68	@ 0x44
 8003f4a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f4c:	78fa      	ldrb	r2, [r7, #3]
 8003f4e:	6879      	ldr	r1, [r7, #4]
 8003f50:	4613      	mov	r3, r2
 8003f52:	011b      	lsls	r3, r3, #4
 8003f54:	1a9b      	subs	r3, r3, r2
 8003f56:	009b      	lsls	r3, r3, #2
 8003f58:	440b      	add	r3, r1
 8003f5a:	3344      	adds	r3, #68	@ 0x44
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2b02      	cmp	r3, #2
 8003f60:	d914      	bls.n	8003f8c <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003f62:	78fa      	ldrb	r2, [r7, #3]
 8003f64:	6879      	ldr	r1, [r7, #4]
 8003f66:	4613      	mov	r3, r2
 8003f68:	011b      	lsls	r3, r3, #4
 8003f6a:	1a9b      	subs	r3, r3, r2
 8003f6c:	009b      	lsls	r3, r3, #2
 8003f6e:	440b      	add	r3, r1
 8003f70:	3344      	adds	r3, #68	@ 0x44
 8003f72:	2200      	movs	r2, #0
 8003f74:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003f76:	78fa      	ldrb	r2, [r7, #3]
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	1a9b      	subs	r3, r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	440b      	add	r3, r1
 8003f84:	334c      	adds	r3, #76	@ 0x4c
 8003f86:	2204      	movs	r2, #4
 8003f88:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f8a:	e022      	b.n	8003fd2 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003f8c:	78fa      	ldrb	r2, [r7, #3]
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	4613      	mov	r3, r2
 8003f92:	011b      	lsls	r3, r3, #4
 8003f94:	1a9b      	subs	r3, r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	440b      	add	r3, r1
 8003f9a:	334c      	adds	r3, #76	@ 0x4c
 8003f9c:	2202      	movs	r2, #2
 8003f9e:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003fa0:	78fb      	ldrb	r3, [r7, #3]
 8003fa2:	015a      	lsls	r2, r3, #5
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	4413      	add	r3, r2
 8003fa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003fb6:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003fbe:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003fc0:	78fb      	ldrb	r3, [r7, #3]
 8003fc2:	015a      	lsls	r2, r3, #5
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003fcc:	461a      	mov	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003fd2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003fd4:	78fa      	ldrb	r2, [r7, #3]
 8003fd6:	6879      	ldr	r1, [r7, #4]
 8003fd8:	4613      	mov	r3, r2
 8003fda:	011b      	lsls	r3, r3, #4
 8003fdc:	1a9b      	subs	r3, r3, r2
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	440b      	add	r3, r1
 8003fe2:	334c      	adds	r3, #76	@ 0x4c
 8003fe4:	781a      	ldrb	r2, [r3, #0]
 8003fe6:	78fb      	ldrb	r3, [r7, #3]
 8003fe8:	4619      	mov	r1, r3
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f006 f89c 	bl	800a128 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003ff0:	e002      	b.n	8003ff8 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003ff2:	bf00      	nop
 8003ff4:	e000      	b.n	8003ff8 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003ff6:	bf00      	nop
  }
}
 8003ff8:	3718      	adds	r7, #24
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ffe:	b580      	push	{r7, lr}
 8004000:	b08a      	sub	sp, #40	@ 0x28
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800400c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800400e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004018:	69fb      	ldr	r3, [r7, #28]
 800401a:	f003 030f 	and.w	r3, r3, #15
 800401e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004020:	69fb      	ldr	r3, [r7, #28]
 8004022:	0c5b      	lsrs	r3, r3, #17
 8004024:	f003 030f 	and.w	r3, r3, #15
 8004028:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800402a:	69fb      	ldr	r3, [r7, #28]
 800402c:	091b      	lsrs	r3, r3, #4
 800402e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004032:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	2b02      	cmp	r3, #2
 8004038:	d004      	beq.n	8004044 <HCD_RXQLVL_IRQHandler+0x46>
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2b05      	cmp	r3, #5
 800403e:	f000 80b6 	beq.w	80041ae <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8004042:	e0b7      	b.n	80041b4 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	2b00      	cmp	r3, #0
 8004048:	f000 80b3 	beq.w	80041b2 <HCD_RXQLVL_IRQHandler+0x1b4>
 800404c:	6879      	ldr	r1, [r7, #4]
 800404e:	69ba      	ldr	r2, [r7, #24]
 8004050:	4613      	mov	r3, r2
 8004052:	011b      	lsls	r3, r3, #4
 8004054:	1a9b      	subs	r3, r3, r2
 8004056:	009b      	lsls	r3, r3, #2
 8004058:	440b      	add	r3, r1
 800405a:	332c      	adds	r3, #44	@ 0x2c
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	f000 80a7 	beq.w	80041b2 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8004064:	6879      	ldr	r1, [r7, #4]
 8004066:	69ba      	ldr	r2, [r7, #24]
 8004068:	4613      	mov	r3, r2
 800406a:	011b      	lsls	r3, r3, #4
 800406c:	1a9b      	subs	r3, r3, r2
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	440b      	add	r3, r1
 8004072:	3338      	adds	r3, #56	@ 0x38
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	18d1      	adds	r1, r2, r3
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	69ba      	ldr	r2, [r7, #24]
 800407e:	4613      	mov	r3, r2
 8004080:	011b      	lsls	r3, r3, #4
 8004082:	1a9b      	subs	r3, r3, r2
 8004084:	009b      	lsls	r3, r3, #2
 8004086:	4403      	add	r3, r0
 8004088:	3334      	adds	r3, #52	@ 0x34
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4299      	cmp	r1, r3
 800408e:	f200 8083 	bhi.w	8004198 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6818      	ldr	r0, [r3, #0]
 8004096:	6879      	ldr	r1, [r7, #4]
 8004098:	69ba      	ldr	r2, [r7, #24]
 800409a:	4613      	mov	r3, r2
 800409c:	011b      	lsls	r3, r3, #4
 800409e:	1a9b      	subs	r3, r3, r2
 80040a0:	009b      	lsls	r3, r3, #2
 80040a2:	440b      	add	r3, r1
 80040a4:	332c      	adds	r3, #44	@ 0x2c
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	693a      	ldr	r2, [r7, #16]
 80040aa:	b292      	uxth	r2, r2
 80040ac:	4619      	mov	r1, r3
 80040ae:	f002 fed7 	bl	8006e60 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 80040b2:	6879      	ldr	r1, [r7, #4]
 80040b4:	69ba      	ldr	r2, [r7, #24]
 80040b6:	4613      	mov	r3, r2
 80040b8:	011b      	lsls	r3, r3, #4
 80040ba:	1a9b      	subs	r3, r3, r2
 80040bc:	009b      	lsls	r3, r3, #2
 80040be:	440b      	add	r3, r1
 80040c0:	332c      	adds	r3, #44	@ 0x2c
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	693b      	ldr	r3, [r7, #16]
 80040c6:	18d1      	adds	r1, r2, r3
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	69ba      	ldr	r2, [r7, #24]
 80040cc:	4613      	mov	r3, r2
 80040ce:	011b      	lsls	r3, r3, #4
 80040d0:	1a9b      	subs	r3, r3, r2
 80040d2:	009b      	lsls	r3, r3, #2
 80040d4:	4403      	add	r3, r0
 80040d6:	332c      	adds	r3, #44	@ 0x2c
 80040d8:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 80040da:	6879      	ldr	r1, [r7, #4]
 80040dc:	69ba      	ldr	r2, [r7, #24]
 80040de:	4613      	mov	r3, r2
 80040e0:	011b      	lsls	r3, r3, #4
 80040e2:	1a9b      	subs	r3, r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	440b      	add	r3, r1
 80040e8:	3338      	adds	r3, #56	@ 0x38
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	18d1      	adds	r1, r2, r3
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	69ba      	ldr	r2, [r7, #24]
 80040f4:	4613      	mov	r3, r2
 80040f6:	011b      	lsls	r3, r3, #4
 80040f8:	1a9b      	subs	r3, r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4403      	add	r3, r0
 80040fe:	3338      	adds	r3, #56	@ 0x38
 8004100:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	015a      	lsls	r2, r3, #5
 8004106:	6a3b      	ldr	r3, [r7, #32]
 8004108:	4413      	add	r3, r2
 800410a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800410e:	691b      	ldr	r3, [r3, #16]
 8004110:	0cdb      	lsrs	r3, r3, #19
 8004112:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004116:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004118:	6879      	ldr	r1, [r7, #4]
 800411a:	69ba      	ldr	r2, [r7, #24]
 800411c:	4613      	mov	r3, r2
 800411e:	011b      	lsls	r3, r3, #4
 8004120:	1a9b      	subs	r3, r3, r2
 8004122:	009b      	lsls	r3, r3, #2
 8004124:	440b      	add	r3, r1
 8004126:	3328      	adds	r3, #40	@ 0x28
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	461a      	mov	r2, r3
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	4293      	cmp	r3, r2
 8004130:	d13f      	bne.n	80041b2 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d03c      	beq.n	80041b2 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004138:	69bb      	ldr	r3, [r7, #24]
 800413a:	015a      	lsls	r2, r3, #5
 800413c:	6a3b      	ldr	r3, [r7, #32]
 800413e:	4413      	add	r3, r2
 8004140:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800414e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004150:	68bb      	ldr	r3, [r7, #8]
 8004152:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004156:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004158:	69bb      	ldr	r3, [r7, #24]
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	6a3b      	ldr	r3, [r7, #32]
 800415e:	4413      	add	r3, r2
 8004160:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004164:	461a      	mov	r2, r3
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800416a:	6879      	ldr	r1, [r7, #4]
 800416c:	69ba      	ldr	r2, [r7, #24]
 800416e:	4613      	mov	r3, r2
 8004170:	011b      	lsls	r3, r3, #4
 8004172:	1a9b      	subs	r3, r3, r2
 8004174:	009b      	lsls	r3, r3, #2
 8004176:	440b      	add	r3, r1
 8004178:	333c      	adds	r3, #60	@ 0x3c
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	f083 0301 	eor.w	r3, r3, #1
 8004180:	b2d8      	uxtb	r0, r3
 8004182:	6879      	ldr	r1, [r7, #4]
 8004184:	69ba      	ldr	r2, [r7, #24]
 8004186:	4613      	mov	r3, r2
 8004188:	011b      	lsls	r3, r3, #4
 800418a:	1a9b      	subs	r3, r3, r2
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	440b      	add	r3, r1
 8004190:	333c      	adds	r3, #60	@ 0x3c
 8004192:	4602      	mov	r2, r0
 8004194:	701a      	strb	r2, [r3, #0]
      break;
 8004196:	e00c      	b.n	80041b2 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8004198:	6879      	ldr	r1, [r7, #4]
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	4613      	mov	r3, r2
 800419e:	011b      	lsls	r3, r3, #4
 80041a0:	1a9b      	subs	r3, r3, r2
 80041a2:	009b      	lsls	r3, r3, #2
 80041a4:	440b      	add	r3, r1
 80041a6:	334c      	adds	r3, #76	@ 0x4c
 80041a8:	2204      	movs	r2, #4
 80041aa:	701a      	strb	r2, [r3, #0]
      break;
 80041ac:	e001      	b.n	80041b2 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80041ae:	bf00      	nop
 80041b0:	e000      	b.n	80041b4 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80041b2:	bf00      	nop
  }
}
 80041b4:	bf00      	nop
 80041b6:	3728      	adds	r7, #40	@ 0x28
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bd80      	pop	{r7, pc}

080041bc <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041ca:	697b      	ldr	r3, [r7, #20]
 80041cc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 80041e2:	68bb      	ldr	r3, [r7, #8]
 80041e4:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80041e8:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d10b      	bne.n	800420c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	f003 0301 	and.w	r3, r3, #1
 80041fa:	2b01      	cmp	r3, #1
 80041fc:	d102      	bne.n	8004204 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f005 ff76 	bl	800a0f0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	f043 0302 	orr.w	r3, r3, #2
 800420a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f003 0308 	and.w	r3, r3, #8
 8004212:	2b08      	cmp	r3, #8
 8004214:	d132      	bne.n	800427c <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	f043 0308 	orr.w	r3, r3, #8
 800421c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b04      	cmp	r3, #4
 8004226:	d126      	bne.n	8004276 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	7a5b      	ldrb	r3, [r3, #9]
 800422c:	2b02      	cmp	r3, #2
 800422e:	d113      	bne.n	8004258 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8004236:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800423a:	d106      	bne.n	800424a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	2102      	movs	r1, #2
 8004242:	4618      	mov	r0, r3
 8004244:	f002 ff9c 	bl	8007180 <USB_InitFSLSPClkSel>
 8004248:	e011      	b.n	800426e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	2101      	movs	r1, #1
 8004250:	4618      	mov	r0, r3
 8004252:	f002 ff95 	bl	8007180 <USB_InitFSLSPClkSel>
 8004256:	e00a      	b.n	800426e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	79db      	ldrb	r3, [r3, #7]
 800425c:	2b01      	cmp	r3, #1
 800425e:	d106      	bne.n	800426e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004266:	461a      	mov	r2, r3
 8004268:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800426c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f005 ff68 	bl	800a144 <HAL_HCD_PortEnabled_Callback>
 8004274:	e002      	b.n	800427c <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004276:	6878      	ldr	r0, [r7, #4]
 8004278:	f005 ff72 	bl	800a160 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	f003 0320 	and.w	r3, r3, #32
 8004282:	2b20      	cmp	r3, #32
 8004284:	d103      	bne.n	800428e <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	f043 0320 	orr.w	r3, r3, #32
 800428c:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800428e:	693b      	ldr	r3, [r7, #16]
 8004290:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004294:	461a      	mov	r2, r3
 8004296:	68bb      	ldr	r3, [r7, #8]
 8004298:	6013      	str	r3, [r2, #0]
}
 800429a:	bf00      	nop
 800429c:	3718      	adds	r7, #24
 800429e:	46bd      	mov	sp, r7
 80042a0:	bd80      	pop	{r7, pc}
	...

080042a4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e12b      	b.n	800450e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d106      	bne.n	80042d0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80042ca:	6878      	ldr	r0, [r7, #4]
 80042cc:	f7fc fd58 	bl	8000d80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2224      	movs	r2, #36	@ 0x24
 80042d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f022 0201 	bic.w	r2, r2, #1
 80042e6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	681a      	ldr	r2, [r3, #0]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042f6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	681a      	ldr	r2, [r3, #0]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004306:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004308:	f001 f964 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
 800430c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	4a81      	ldr	r2, [pc, #516]	@ (8004518 <HAL_I2C_Init+0x274>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d807      	bhi.n	8004328 <HAL_I2C_Init+0x84>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	4a80      	ldr	r2, [pc, #512]	@ (800451c <HAL_I2C_Init+0x278>)
 800431c:	4293      	cmp	r3, r2
 800431e:	bf94      	ite	ls
 8004320:	2301      	movls	r3, #1
 8004322:	2300      	movhi	r3, #0
 8004324:	b2db      	uxtb	r3, r3
 8004326:	e006      	b.n	8004336 <HAL_I2C_Init+0x92>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	4a7d      	ldr	r2, [pc, #500]	@ (8004520 <HAL_I2C_Init+0x27c>)
 800432c:	4293      	cmp	r3, r2
 800432e:	bf94      	ite	ls
 8004330:	2301      	movls	r3, #1
 8004332:	2300      	movhi	r3, #0
 8004334:	b2db      	uxtb	r3, r3
 8004336:	2b00      	cmp	r3, #0
 8004338:	d001      	beq.n	800433e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e0e7      	b.n	800450e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4a78      	ldr	r2, [pc, #480]	@ (8004524 <HAL_I2C_Init+0x280>)
 8004342:	fba2 2303 	umull	r2, r3, r2, r3
 8004346:	0c9b      	lsrs	r3, r3, #18
 8004348:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68ba      	ldr	r2, [r7, #8]
 800435a:	430a      	orrs	r2, r1
 800435c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	6a1b      	ldr	r3, [r3, #32]
 8004364:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	4a6a      	ldr	r2, [pc, #424]	@ (8004518 <HAL_I2C_Init+0x274>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d802      	bhi.n	8004378 <HAL_I2C_Init+0xd4>
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	3301      	adds	r3, #1
 8004376:	e009      	b.n	800438c <HAL_I2C_Init+0xe8>
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800437e:	fb02 f303 	mul.w	r3, r2, r3
 8004382:	4a69      	ldr	r2, [pc, #420]	@ (8004528 <HAL_I2C_Init+0x284>)
 8004384:	fba2 2303 	umull	r2, r3, r2, r3
 8004388:	099b      	lsrs	r3, r3, #6
 800438a:	3301      	adds	r3, #1
 800438c:	687a      	ldr	r2, [r7, #4]
 800438e:	6812      	ldr	r2, [r2, #0]
 8004390:	430b      	orrs	r3, r1
 8004392:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	69db      	ldr	r3, [r3, #28]
 800439a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800439e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	495c      	ldr	r1, [pc, #368]	@ (8004518 <HAL_I2C_Init+0x274>)
 80043a8:	428b      	cmp	r3, r1
 80043aa:	d819      	bhi.n	80043e0 <HAL_I2C_Init+0x13c>
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	1e59      	subs	r1, r3, #1
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	005b      	lsls	r3, r3, #1
 80043b6:	fbb1 f3f3 	udiv	r3, r1, r3
 80043ba:	1c59      	adds	r1, r3, #1
 80043bc:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80043c0:	400b      	ands	r3, r1
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <HAL_I2C_Init+0x138>
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	1e59      	subs	r1, r3, #1
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	005b      	lsls	r3, r3, #1
 80043d0:	fbb1 f3f3 	udiv	r3, r1, r3
 80043d4:	3301      	adds	r3, #1
 80043d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043da:	e051      	b.n	8004480 <HAL_I2C_Init+0x1dc>
 80043dc:	2304      	movs	r3, #4
 80043de:	e04f      	b.n	8004480 <HAL_I2C_Init+0x1dc>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	689b      	ldr	r3, [r3, #8]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d111      	bne.n	800440c <HAL_I2C_Init+0x168>
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	1e58      	subs	r0, r3, #1
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6859      	ldr	r1, [r3, #4]
 80043f0:	460b      	mov	r3, r1
 80043f2:	005b      	lsls	r3, r3, #1
 80043f4:	440b      	add	r3, r1
 80043f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80043fa:	3301      	adds	r3, #1
 80043fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004400:	2b00      	cmp	r3, #0
 8004402:	bf0c      	ite	eq
 8004404:	2301      	moveq	r3, #1
 8004406:	2300      	movne	r3, #0
 8004408:	b2db      	uxtb	r3, r3
 800440a:	e012      	b.n	8004432 <HAL_I2C_Init+0x18e>
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	1e58      	subs	r0, r3, #1
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6859      	ldr	r1, [r3, #4]
 8004414:	460b      	mov	r3, r1
 8004416:	009b      	lsls	r3, r3, #2
 8004418:	440b      	add	r3, r1
 800441a:	0099      	lsls	r1, r3, #2
 800441c:	440b      	add	r3, r1
 800441e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004422:	3301      	adds	r3, #1
 8004424:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004428:	2b00      	cmp	r3, #0
 800442a:	bf0c      	ite	eq
 800442c:	2301      	moveq	r3, #1
 800442e:	2300      	movne	r3, #0
 8004430:	b2db      	uxtb	r3, r3
 8004432:	2b00      	cmp	r3, #0
 8004434:	d001      	beq.n	800443a <HAL_I2C_Init+0x196>
 8004436:	2301      	movs	r3, #1
 8004438:	e022      	b.n	8004480 <HAL_I2C_Init+0x1dc>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d10e      	bne.n	8004460 <HAL_I2C_Init+0x1bc>
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	1e58      	subs	r0, r3, #1
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6859      	ldr	r1, [r3, #4]
 800444a:	460b      	mov	r3, r1
 800444c:	005b      	lsls	r3, r3, #1
 800444e:	440b      	add	r3, r1
 8004450:	fbb0 f3f3 	udiv	r3, r0, r3
 8004454:	3301      	adds	r3, #1
 8004456:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800445a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800445e:	e00f      	b.n	8004480 <HAL_I2C_Init+0x1dc>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	1e58      	subs	r0, r3, #1
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6859      	ldr	r1, [r3, #4]
 8004468:	460b      	mov	r3, r1
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	440b      	add	r3, r1
 800446e:	0099      	lsls	r1, r3, #2
 8004470:	440b      	add	r3, r1
 8004472:	fbb0 f3f3 	udiv	r3, r0, r3
 8004476:	3301      	adds	r3, #1
 8004478:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800447c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004480:	6879      	ldr	r1, [r7, #4]
 8004482:	6809      	ldr	r1, [r1, #0]
 8004484:	4313      	orrs	r3, r2
 8004486:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	69da      	ldr	r2, [r3, #28]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	430a      	orrs	r2, r1
 80044a2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	689b      	ldr	r3, [r3, #8]
 80044aa:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80044ae:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6911      	ldr	r1, [r2, #16]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	68d2      	ldr	r2, [r2, #12]
 80044ba:	4311      	orrs	r1, r2
 80044bc:	687a      	ldr	r2, [r7, #4]
 80044be:	6812      	ldr	r2, [r2, #0]
 80044c0:	430b      	orrs	r3, r1
 80044c2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	68db      	ldr	r3, [r3, #12]
 80044ca:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	695a      	ldr	r2, [r3, #20]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	431a      	orrs	r2, r3
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681a      	ldr	r2, [r3, #0]
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f042 0201 	orr.w	r2, r2, #1
 80044ee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2200      	movs	r2, #0
 80044f4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	2220      	movs	r2, #32
 80044fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2200      	movs	r2, #0
 8004502:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	000186a0 	.word	0x000186a0
 800451c:	001e847f 	.word	0x001e847f
 8004520:	003d08ff 	.word	0x003d08ff
 8004524:	431bde83 	.word	0x431bde83
 8004528:	10624dd3 	.word	0x10624dd3

0800452c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800452c:	b480      	push	{r7}
 800452e:	b083      	sub	sp, #12
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800453c:	b2db      	uxtb	r3, r3
 800453e:	2b20      	cmp	r3, #32
 8004540:	d129      	bne.n	8004596 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2224      	movs	r2, #36	@ 0x24
 8004546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f022 0201 	bic.w	r2, r2, #1
 8004558:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 0210 	bic.w	r2, r2, #16
 8004568:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	683a      	ldr	r2, [r7, #0]
 8004576:	430a      	orrs	r2, r1
 8004578:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f042 0201 	orr.w	r2, r2, #1
 8004588:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2220      	movs	r2, #32
 800458e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004592:	2300      	movs	r3, #0
 8004594:	e000      	b.n	8004598 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8004596:	2302      	movs	r3, #2
  }
}
 8004598:	4618      	mov	r0, r3
 800459a:	370c      	adds	r7, #12
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr

080045a4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 80045ae:	2300      	movs	r3, #0
 80045b0:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	2b20      	cmp	r3, #32
 80045bc:	d12a      	bne.n	8004614 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2224      	movs	r2, #36	@ 0x24
 80045c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 0201 	bic.w	r2, r2, #1
 80045d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045dc:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 80045de:	89fb      	ldrh	r3, [r7, #14]
 80045e0:	f023 030f 	bic.w	r3, r3, #15
 80045e4:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	b29a      	uxth	r2, r3
 80045ea:	89fb      	ldrh	r3, [r7, #14]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	89fa      	ldrh	r2, [r7, #14]
 80045f6:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f042 0201 	orr.w	r2, r2, #1
 8004606:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2220      	movs	r2, #32
 800460c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8004610:	2300      	movs	r3, #0
 8004612:	e000      	b.n	8004616 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8004614:	2302      	movs	r3, #2
  }
}
 8004616:	4618      	mov	r0, r3
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004620:	4770      	bx	lr
	...

08004624 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d101      	bne.n	8004636 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e0bf      	b.n	80047b6 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800463c:	b2db      	uxtb	r3, r3
 800463e:	2b00      	cmp	r3, #0
 8004640:	d106      	bne.n	8004650 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7fc fc02 	bl	8000e54 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2202      	movs	r2, #2
 8004654:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	699a      	ldr	r2, [r3, #24]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004666:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	6999      	ldr	r1, [r3, #24]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685a      	ldr	r2, [r3, #4]
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	689b      	ldr	r3, [r3, #8]
 8004676:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800467c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	430a      	orrs	r2, r1
 800468a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	6899      	ldr	r1, [r3, #8]
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	4b4a      	ldr	r3, [pc, #296]	@ (80047c0 <HAL_LTDC_Init+0x19c>)
 8004698:	400b      	ands	r3, r1
 800469a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	041b      	lsls	r3, r3, #16
 80046a2:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	6899      	ldr	r1, [r3, #8]
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699a      	ldr	r2, [r3, #24]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	431a      	orrs	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	430a      	orrs	r2, r1
 80046b8:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68d9      	ldr	r1, [r3, #12]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	4b3e      	ldr	r3, [pc, #248]	@ (80047c0 <HAL_LTDC_Init+0x19c>)
 80046c6:	400b      	ands	r3, r1
 80046c8:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	69db      	ldr	r3, [r3, #28]
 80046ce:	041b      	lsls	r3, r3, #16
 80046d0:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	68d9      	ldr	r1, [r3, #12]
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a1a      	ldr	r2, [r3, #32]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6919      	ldr	r1, [r3, #16]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	4b33      	ldr	r3, [pc, #204]	@ (80047c0 <HAL_LTDC_Init+0x19c>)
 80046f4:	400b      	ands	r3, r1
 80046f6:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fc:	041b      	lsls	r3, r3, #16
 80046fe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	6919      	ldr	r1, [r3, #16]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	431a      	orrs	r2, r3
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6959      	ldr	r1, [r3, #20]
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	4b27      	ldr	r3, [pc, #156]	@ (80047c0 <HAL_LTDC_Init+0x19c>)
 8004722:	400b      	ands	r3, r1
 8004724:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800472a:	041b      	lsls	r3, r3, #16
 800472c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	6959      	ldr	r1, [r3, #20]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	431a      	orrs	r2, r3
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	430a      	orrs	r2, r1
 8004742:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800474a:	021b      	lsls	r3, r3, #8
 800474c:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004754:	041b      	lsls	r3, r3, #16
 8004756:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004766:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800476e:	68ba      	ldr	r2, [r7, #8]
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4313      	orrs	r3, r2
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800477a:	431a      	orrs	r2, r3
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	430a      	orrs	r2, r1
 8004782:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f042 0206 	orr.w	r2, r2, #6
 8004792:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	699a      	ldr	r2, [r3, #24]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f042 0201 	orr.w	r2, r2, #1
 80047a2:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 80047b4:	2300      	movs	r3, #0
}
 80047b6:	4618      	mov	r0, r3
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bd80      	pop	{r7, pc}
 80047be:	bf00      	nop
 80047c0:	f000f800 	.word	0xf000f800

080047c4 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80047c4:	b580      	push	{r7, lr}
 80047c6:	b084      	sub	sp, #16
 80047c8:	af00      	add	r7, sp, #0
 80047ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80047d2:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047da:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f003 0304 	and.w	r3, r3, #4
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d023      	beq.n	800482e <HAL_LTDC_IRQHandler+0x6a>
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d01e      	beq.n	800482e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	f022 0204 	bic.w	r2, r2, #4
 80047fe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2204      	movs	r2, #4
 8004806:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800480e:	f043 0201 	orr.w	r2, r3, #1
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2204      	movs	r2, #4
 800481c:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8004828:	6878      	ldr	r0, [r7, #4]
 800482a:	f000 f86f 	bl	800490c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f003 0302 	and.w	r3, r3, #2
 8004834:	2b00      	cmp	r3, #0
 8004836:	d023      	beq.n	8004880 <HAL_LTDC_IRQHandler+0xbc>
 8004838:	68bb      	ldr	r3, [r7, #8]
 800483a:	f003 0302 	and.w	r3, r3, #2
 800483e:	2b00      	cmp	r3, #0
 8004840:	d01e      	beq.n	8004880 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0202 	bic.w	r2, r2, #2
 8004850:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2202      	movs	r2, #2
 8004858:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004860:	f043 0202 	orr.w	r2, r3, #2
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2204      	movs	r2, #4
 800486e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800487a:	6878      	ldr	r0, [r7, #4]
 800487c:	f000 f846 	bl	800490c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	d01b      	beq.n	80048c2 <HAL_LTDC_IRQHandler+0xfe>
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	f003 0301 	and.w	r3, r3, #1
 8004890:	2b00      	cmp	r3, #0
 8004892:	d016      	beq.n	80048c2 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f022 0201 	bic.w	r2, r2, #1
 80048a2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2201      	movs	r2, #1
 80048aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2201      	movs	r2, #1
 80048b0:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 f82f 	bl	8004920 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f003 0308 	and.w	r3, r3, #8
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d01b      	beq.n	8004904 <HAL_LTDC_IRQHandler+0x140>
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	f003 0308 	and.w	r3, r3, #8
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d016      	beq.n	8004904 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f022 0208 	bic.w	r2, r2, #8
 80048e4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	2208      	movs	r2, #8
 80048ec:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2201      	movs	r2, #1
 80048f2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	2200      	movs	r2, #0
 80048fa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80048fe:	6878      	ldr	r0, [r7, #4]
 8004900:	f000 f818 	bl	8004934 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8004904:	bf00      	nop
 8004906:	3710      	adds	r7, #16
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8004948:	b5b0      	push	{r4, r5, r7, lr}
 800494a:	b084      	sub	sp, #16
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800495a:	2b01      	cmp	r3, #1
 800495c:	d101      	bne.n	8004962 <HAL_LTDC_ConfigLayer+0x1a>
 800495e:	2302      	movs	r3, #2
 8004960:	e02c      	b.n	80049bc <HAL_LTDC_ConfigLayer+0x74>
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2201      	movs	r2, #1
 8004966:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	2202      	movs	r2, #2
 800496e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8004972:	68fa      	ldr	r2, [r7, #12]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2134      	movs	r1, #52	@ 0x34
 8004978:	fb01 f303 	mul.w	r3, r1, r3
 800497c:	4413      	add	r3, r2
 800497e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004982:	68bb      	ldr	r3, [r7, #8]
 8004984:	4614      	mov	r4, r2
 8004986:	461d      	mov	r5, r3
 8004988:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800498a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800498c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800498e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004990:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004992:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004994:	682b      	ldr	r3, [r5, #0]
 8004996:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8004998:	687a      	ldr	r2, [r7, #4]
 800499a:	68b9      	ldr	r1, [r7, #8]
 800499c:	68f8      	ldr	r0, [r7, #12]
 800499e:	f000 f811 	bl	80049c4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2201      	movs	r2, #1
 80049a8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	2201      	movs	r2, #1
 80049ae:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	2200      	movs	r2, #0
 80049b6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80049ba:	2300      	movs	r3, #0
}
 80049bc:	4618      	mov	r0, r3
 80049be:	3710      	adds	r7, #16
 80049c0:	46bd      	mov	sp, r7
 80049c2:	bdb0      	pop	{r4, r5, r7, pc}

080049c4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b089      	sub	sp, #36	@ 0x24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	60f8      	str	r0, [r7, #12]
 80049cc:	60b9      	str	r1, [r7, #8]
 80049ce:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	685a      	ldr	r2, [r3, #4]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	0c1b      	lsrs	r3, r3, #16
 80049dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049e0:	4413      	add	r3, r2
 80049e2:	041b      	lsls	r3, r3, #16
 80049e4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	461a      	mov	r2, r3
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	01db      	lsls	r3, r3, #7
 80049f0:	4413      	add	r3, r2
 80049f2:	3384      	adds	r3, #132	@ 0x84
 80049f4:	685b      	ldr	r3, [r3, #4]
 80049f6:	68fa      	ldr	r2, [r7, #12]
 80049f8:	6812      	ldr	r2, [r2, #0]
 80049fa:	4611      	mov	r1, r2
 80049fc:	687a      	ldr	r2, [r7, #4]
 80049fe:	01d2      	lsls	r2, r2, #7
 8004a00:	440a      	add	r2, r1
 8004a02:	3284      	adds	r2, #132	@ 0x84
 8004a04:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004a08:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	0c1b      	lsrs	r3, r3, #16
 8004a16:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004a1a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004a1c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4619      	mov	r1, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	01db      	lsls	r3, r3, #7
 8004a28:	440b      	add	r3, r1
 8004a2a:	3384      	adds	r3, #132	@ 0x84
 8004a2c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8004a32:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	68da      	ldr	r2, [r3, #12]
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a42:	4413      	add	r3, r2
 8004a44:	041b      	lsls	r3, r3, #16
 8004a46:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	01db      	lsls	r3, r3, #7
 8004a52:	4413      	add	r3, r2
 8004a54:	3384      	adds	r3, #132	@ 0x84
 8004a56:	689b      	ldr	r3, [r3, #8]
 8004a58:	68fa      	ldr	r2, [r7, #12]
 8004a5a:	6812      	ldr	r2, [r2, #0]
 8004a5c:	4611      	mov	r1, r2
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	01d2      	lsls	r2, r2, #7
 8004a62:	440a      	add	r2, r1
 8004a64:	3284      	adds	r2, #132	@ 0x84
 8004a66:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004a6a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	689a      	ldr	r2, [r3, #8]
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004a7a:	4413      	add	r3, r2
 8004a7c:	1c5a      	adds	r2, r3, #1
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4619      	mov	r1, r3
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	01db      	lsls	r3, r3, #7
 8004a88:	440b      	add	r3, r1
 8004a8a:	3384      	adds	r3, #132	@ 0x84
 8004a8c:	4619      	mov	r1, r3
 8004a8e:	69fb      	ldr	r3, [r7, #28]
 8004a90:	4313      	orrs	r3, r2
 8004a92:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	461a      	mov	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	01db      	lsls	r3, r3, #7
 8004a9e:	4413      	add	r3, r2
 8004aa0:	3384      	adds	r3, #132	@ 0x84
 8004aa2:	691b      	ldr	r3, [r3, #16]
 8004aa4:	68fa      	ldr	r2, [r7, #12]
 8004aa6:	6812      	ldr	r2, [r2, #0]
 8004aa8:	4611      	mov	r1, r2
 8004aaa:	687a      	ldr	r2, [r7, #4]
 8004aac:	01d2      	lsls	r2, r2, #7
 8004aae:	440a      	add	r2, r1
 8004ab0:	3284      	adds	r2, #132	@ 0x84
 8004ab2:	f023 0307 	bic.w	r3, r3, #7
 8004ab6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	461a      	mov	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	01db      	lsls	r3, r3, #7
 8004ac2:	4413      	add	r3, r2
 8004ac4:	3384      	adds	r3, #132	@ 0x84
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004ad4:	021b      	lsls	r3, r3, #8
 8004ad6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004ade:	041b      	lsls	r3, r3, #16
 8004ae0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8004ae2:	68bb      	ldr	r3, [r7, #8]
 8004ae4:	699b      	ldr	r3, [r3, #24]
 8004ae6:	061b      	lsls	r3, r3, #24
 8004ae8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	461a      	mov	r2, r3
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	01db      	lsls	r3, r3, #7
 8004af4:	4413      	add	r3, r2
 8004af6:	3384      	adds	r3, #132	@ 0x84
 8004af8:	699b      	ldr	r3, [r3, #24]
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	461a      	mov	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	01db      	lsls	r3, r3, #7
 8004b04:	4413      	add	r3, r2
 8004b06:	3384      	adds	r3, #132	@ 0x84
 8004b08:	461a      	mov	r2, r3
 8004b0a:	2300      	movs	r3, #0
 8004b0c:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004b14:	461a      	mov	r2, r3
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	431a      	orrs	r2, r3
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	431a      	orrs	r2, r3
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	4619      	mov	r1, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	01db      	lsls	r3, r3, #7
 8004b28:	440b      	add	r3, r1
 8004b2a:	3384      	adds	r3, #132	@ 0x84
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	461a      	mov	r2, r3
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	01db      	lsls	r3, r3, #7
 8004b3e:	4413      	add	r3, r2
 8004b40:	3384      	adds	r3, #132	@ 0x84
 8004b42:	695b      	ldr	r3, [r3, #20]
 8004b44:	68fa      	ldr	r2, [r7, #12]
 8004b46:	6812      	ldr	r2, [r2, #0]
 8004b48:	4611      	mov	r1, r2
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	01d2      	lsls	r2, r2, #7
 8004b4e:	440a      	add	r2, r1
 8004b50:	3284      	adds	r2, #132	@ 0x84
 8004b52:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004b56:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	461a      	mov	r2, r3
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	01db      	lsls	r3, r3, #7
 8004b62:	4413      	add	r3, r2
 8004b64:	3384      	adds	r3, #132	@ 0x84
 8004b66:	461a      	mov	r2, r3
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	695b      	ldr	r3, [r3, #20]
 8004b6c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	461a      	mov	r2, r3
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	01db      	lsls	r3, r3, #7
 8004b78:	4413      	add	r3, r2
 8004b7a:	3384      	adds	r3, #132	@ 0x84
 8004b7c:	69db      	ldr	r3, [r3, #28]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	6812      	ldr	r2, [r2, #0]
 8004b82:	4611      	mov	r1, r2
 8004b84:	687a      	ldr	r2, [r7, #4]
 8004b86:	01d2      	lsls	r2, r2, #7
 8004b88:	440a      	add	r2, r1
 8004b8a:	3284      	adds	r2, #132	@ 0x84
 8004b8c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004b90:	f023 0307 	bic.w	r3, r3, #7
 8004b94:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	69da      	ldr	r2, [r3, #28]
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	6a1b      	ldr	r3, [r3, #32]
 8004b9e:	68f9      	ldr	r1, [r7, #12]
 8004ba0:	6809      	ldr	r1, [r1, #0]
 8004ba2:	4608      	mov	r0, r1
 8004ba4:	6879      	ldr	r1, [r7, #4]
 8004ba6:	01c9      	lsls	r1, r1, #7
 8004ba8:	4401      	add	r1, r0
 8004baa:	3184      	adds	r1, #132	@ 0x84
 8004bac:	4313      	orrs	r3, r2
 8004bae:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	01db      	lsls	r3, r3, #7
 8004bba:	4413      	add	r3, r2
 8004bbc:	3384      	adds	r3, #132	@ 0x84
 8004bbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	461a      	mov	r2, r3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	01db      	lsls	r3, r3, #7
 8004bca:	4413      	add	r3, r2
 8004bcc:	3384      	adds	r3, #132	@ 0x84
 8004bce:	461a      	mov	r2, r3
 8004bd0:	2300      	movs	r3, #0
 8004bd2:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	461a      	mov	r2, r3
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	01db      	lsls	r3, r3, #7
 8004bde:	4413      	add	r3, r2
 8004be0:	3384      	adds	r3, #132	@ 0x84
 8004be2:	461a      	mov	r2, r3
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004be8:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	691b      	ldr	r3, [r3, #16]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d102      	bne.n	8004bf8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 8004bf2:	2304      	movs	r3, #4
 8004bf4:	61fb      	str	r3, [r7, #28]
 8004bf6:	e01b      	b.n	8004c30 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	691b      	ldr	r3, [r3, #16]
 8004bfc:	2b01      	cmp	r3, #1
 8004bfe:	d102      	bne.n	8004c06 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 8004c00:	2303      	movs	r3, #3
 8004c02:	61fb      	str	r3, [r7, #28]
 8004c04:	e014      	b.n	8004c30 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	2b04      	cmp	r3, #4
 8004c0c:	d00b      	beq.n	8004c26 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8004c12:	2b02      	cmp	r3, #2
 8004c14:	d007      	beq.n	8004c26 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8004c1a:	2b03      	cmp	r3, #3
 8004c1c:	d003      	beq.n	8004c26 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8004c22:	2b07      	cmp	r3, #7
 8004c24:	d102      	bne.n	8004c2c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8004c26:	2302      	movs	r3, #2
 8004c28:	61fb      	str	r3, [r7, #28]
 8004c2a:	e001      	b.n	8004c30 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	461a      	mov	r2, r3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	01db      	lsls	r3, r3, #7
 8004c3a:	4413      	add	r3, r2
 8004c3c:	3384      	adds	r3, #132	@ 0x84
 8004c3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c40:	68fa      	ldr	r2, [r7, #12]
 8004c42:	6812      	ldr	r2, [r2, #0]
 8004c44:	4611      	mov	r1, r2
 8004c46:	687a      	ldr	r2, [r7, #4]
 8004c48:	01d2      	lsls	r2, r2, #7
 8004c4a:	440a      	add	r2, r1
 8004c4c:	3284      	adds	r2, #132	@ 0x84
 8004c4e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004c52:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c58:	69fa      	ldr	r2, [r7, #28]
 8004c5a:	fb02 f303 	mul.w	r3, r2, r3
 8004c5e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	6859      	ldr	r1, [r3, #4]
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	1acb      	subs	r3, r1, r3
 8004c6a:	69f9      	ldr	r1, [r7, #28]
 8004c6c:	fb01 f303 	mul.w	r3, r1, r3
 8004c70:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8004c72:	68f9      	ldr	r1, [r7, #12]
 8004c74:	6809      	ldr	r1, [r1, #0]
 8004c76:	4608      	mov	r0, r1
 8004c78:	6879      	ldr	r1, [r7, #4]
 8004c7a:	01c9      	lsls	r1, r1, #7
 8004c7c:	4401      	add	r1, r0
 8004c7e:	3184      	adds	r1, #132	@ 0x84
 8004c80:	4313      	orrs	r3, r2
 8004c82:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	461a      	mov	r2, r3
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	01db      	lsls	r3, r3, #7
 8004c8e:	4413      	add	r3, r2
 8004c90:	3384      	adds	r3, #132	@ 0x84
 8004c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	6812      	ldr	r2, [r2, #0]
 8004c98:	4611      	mov	r1, r2
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	01d2      	lsls	r2, r2, #7
 8004c9e:	440a      	add	r2, r1
 8004ca0:	3284      	adds	r2, #132	@ 0x84
 8004ca2:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004ca6:	f023 0307 	bic.w	r3, r3, #7
 8004caa:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	01db      	lsls	r3, r3, #7
 8004cb6:	4413      	add	r3, r2
 8004cb8:	3384      	adds	r3, #132	@ 0x84
 8004cba:	461a      	mov	r2, r3
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	461a      	mov	r2, r3
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	01db      	lsls	r3, r3, #7
 8004ccc:	4413      	add	r3, r2
 8004cce:	3384      	adds	r3, #132	@ 0x84
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	6812      	ldr	r2, [r2, #0]
 8004cd6:	4611      	mov	r1, r2
 8004cd8:	687a      	ldr	r2, [r7, #4]
 8004cda:	01d2      	lsls	r2, r2, #7
 8004cdc:	440a      	add	r2, r1
 8004cde:	3284      	adds	r2, #132	@ 0x84
 8004ce0:	f043 0301 	orr.w	r3, r3, #1
 8004ce4:	6013      	str	r3, [r2, #0]
}
 8004ce6:	bf00      	nop
 8004ce8:	3724      	adds	r7, #36	@ 0x24
 8004cea:	46bd      	mov	sp, r7
 8004cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf0:	4770      	bx	lr
	...

08004cf4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b086      	sub	sp, #24
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d101      	bne.n	8004d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d02:	2301      	movs	r3, #1
 8004d04:	e267      	b.n	80051d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d075      	beq.n	8004dfe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004d12:	4b88      	ldr	r3, [pc, #544]	@ (8004f34 <HAL_RCC_OscConfig+0x240>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f003 030c 	and.w	r3, r3, #12
 8004d1a:	2b04      	cmp	r3, #4
 8004d1c:	d00c      	beq.n	8004d38 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d1e:	4b85      	ldr	r3, [pc, #532]	@ (8004f34 <HAL_RCC_OscConfig+0x240>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004d26:	2b08      	cmp	r3, #8
 8004d28:	d112      	bne.n	8004d50 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d2a:	4b82      	ldr	r3, [pc, #520]	@ (8004f34 <HAL_RCC_OscConfig+0x240>)
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004d32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004d36:	d10b      	bne.n	8004d50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d38:	4b7e      	ldr	r3, [pc, #504]	@ (8004f34 <HAL_RCC_OscConfig+0x240>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d05b      	beq.n	8004dfc <HAL_RCC_OscConfig+0x108>
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d157      	bne.n	8004dfc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d4c:	2301      	movs	r3, #1
 8004d4e:	e242      	b.n	80051d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d58:	d106      	bne.n	8004d68 <HAL_RCC_OscConfig+0x74>
 8004d5a:	4b76      	ldr	r3, [pc, #472]	@ (8004f34 <HAL_RCC_OscConfig+0x240>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a75      	ldr	r2, [pc, #468]	@ (8004f34 <HAL_RCC_OscConfig+0x240>)
 8004d60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d64:	6013      	str	r3, [r2, #0]
 8004d66:	e01d      	b.n	8004da4 <HAL_RCC_OscConfig+0xb0>
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004d70:	d10c      	bne.n	8004d8c <HAL_RCC_OscConfig+0x98>
 8004d72:	4b70      	ldr	r3, [pc, #448]	@ (8004f34 <HAL_RCC_OscConfig+0x240>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a6f      	ldr	r2, [pc, #444]	@ (8004f34 <HAL_RCC_OscConfig+0x240>)
 8004d78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004d7c:	6013      	str	r3, [r2, #0]
 8004d7e:	4b6d      	ldr	r3, [pc, #436]	@ (8004f34 <HAL_RCC_OscConfig+0x240>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	4a6c      	ldr	r2, [pc, #432]	@ (8004f34 <HAL_RCC_OscConfig+0x240>)
 8004d84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004d88:	6013      	str	r3, [r2, #0]
 8004d8a:	e00b      	b.n	8004da4 <HAL_RCC_OscConfig+0xb0>
 8004d8c:	4b69      	ldr	r3, [pc, #420]	@ (8004f34 <HAL_RCC_OscConfig+0x240>)
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a68      	ldr	r2, [pc, #416]	@ (8004f34 <HAL_RCC_OscConfig+0x240>)
 8004d92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004d96:	6013      	str	r3, [r2, #0]
 8004d98:	4b66      	ldr	r3, [pc, #408]	@ (8004f34 <HAL_RCC_OscConfig+0x240>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	4a65      	ldr	r2, [pc, #404]	@ (8004f34 <HAL_RCC_OscConfig+0x240>)
 8004d9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004da2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d013      	beq.n	8004dd4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dac:	f7fc fc4c 	bl	8001648 <HAL_GetTick>
 8004db0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004db2:	e008      	b.n	8004dc6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004db4:	f7fc fc48 	bl	8001648 <HAL_GetTick>
 8004db8:	4602      	mov	r2, r0
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	2b64      	cmp	r3, #100	@ 0x64
 8004dc0:	d901      	bls.n	8004dc6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e207      	b.n	80051d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dc6:	4b5b      	ldr	r3, [pc, #364]	@ (8004f34 <HAL_RCC_OscConfig+0x240>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d0f0      	beq.n	8004db4 <HAL_RCC_OscConfig+0xc0>
 8004dd2:	e014      	b.n	8004dfe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dd4:	f7fc fc38 	bl	8001648 <HAL_GetTick>
 8004dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dda:	e008      	b.n	8004dee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ddc:	f7fc fc34 	bl	8001648 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	693b      	ldr	r3, [r7, #16]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	2b64      	cmp	r3, #100	@ 0x64
 8004de8:	d901      	bls.n	8004dee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004dea:	2303      	movs	r3, #3
 8004dec:	e1f3      	b.n	80051d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004dee:	4b51      	ldr	r3, [pc, #324]	@ (8004f34 <HAL_RCC_OscConfig+0x240>)
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d1f0      	bne.n	8004ddc <HAL_RCC_OscConfig+0xe8>
 8004dfa:	e000      	b.n	8004dfe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dfc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	f003 0302 	and.w	r3, r3, #2
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d063      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004e0a:	4b4a      	ldr	r3, [pc, #296]	@ (8004f34 <HAL_RCC_OscConfig+0x240>)
 8004e0c:	689b      	ldr	r3, [r3, #8]
 8004e0e:	f003 030c 	and.w	r3, r3, #12
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d00b      	beq.n	8004e2e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e16:	4b47      	ldr	r3, [pc, #284]	@ (8004f34 <HAL_RCC_OscConfig+0x240>)
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004e1e:	2b08      	cmp	r3, #8
 8004e20:	d11c      	bne.n	8004e5c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e22:	4b44      	ldr	r3, [pc, #272]	@ (8004f34 <HAL_RCC_OscConfig+0x240>)
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d116      	bne.n	8004e5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e2e:	4b41      	ldr	r3, [pc, #260]	@ (8004f34 <HAL_RCC_OscConfig+0x240>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	f003 0302 	and.w	r3, r3, #2
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d005      	beq.n	8004e46 <HAL_RCC_OscConfig+0x152>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	2b01      	cmp	r3, #1
 8004e40:	d001      	beq.n	8004e46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e42:	2301      	movs	r3, #1
 8004e44:	e1c7      	b.n	80051d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e46:	4b3b      	ldr	r3, [pc, #236]	@ (8004f34 <HAL_RCC_OscConfig+0x240>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	4937      	ldr	r1, [pc, #220]	@ (8004f34 <HAL_RCC_OscConfig+0x240>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e5a:	e03a      	b.n	8004ed2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	68db      	ldr	r3, [r3, #12]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d020      	beq.n	8004ea6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e64:	4b34      	ldr	r3, [pc, #208]	@ (8004f38 <HAL_RCC_OscConfig+0x244>)
 8004e66:	2201      	movs	r2, #1
 8004e68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e6a:	f7fc fbed 	bl	8001648 <HAL_GetTick>
 8004e6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e70:	e008      	b.n	8004e84 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e72:	f7fc fbe9 	bl	8001648 <HAL_GetTick>
 8004e76:	4602      	mov	r2, r0
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	1ad3      	subs	r3, r2, r3
 8004e7c:	2b02      	cmp	r3, #2
 8004e7e:	d901      	bls.n	8004e84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e80:	2303      	movs	r3, #3
 8004e82:	e1a8      	b.n	80051d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e84:	4b2b      	ldr	r3, [pc, #172]	@ (8004f34 <HAL_RCC_OscConfig+0x240>)
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d0f0      	beq.n	8004e72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e90:	4b28      	ldr	r3, [pc, #160]	@ (8004f34 <HAL_RCC_OscConfig+0x240>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	691b      	ldr	r3, [r3, #16]
 8004e9c:	00db      	lsls	r3, r3, #3
 8004e9e:	4925      	ldr	r1, [pc, #148]	@ (8004f34 <HAL_RCC_OscConfig+0x240>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	600b      	str	r3, [r1, #0]
 8004ea4:	e015      	b.n	8004ed2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ea6:	4b24      	ldr	r3, [pc, #144]	@ (8004f38 <HAL_RCC_OscConfig+0x244>)
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eac:	f7fc fbcc 	bl	8001648 <HAL_GetTick>
 8004eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004eb2:	e008      	b.n	8004ec6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004eb4:	f7fc fbc8 	bl	8001648 <HAL_GetTick>
 8004eb8:	4602      	mov	r2, r0
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	1ad3      	subs	r3, r2, r3
 8004ebe:	2b02      	cmp	r3, #2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e187      	b.n	80051d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ec6:	4b1b      	ldr	r3, [pc, #108]	@ (8004f34 <HAL_RCC_OscConfig+0x240>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1f0      	bne.n	8004eb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0308 	and.w	r3, r3, #8
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d036      	beq.n	8004f4c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	695b      	ldr	r3, [r3, #20]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d016      	beq.n	8004f14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ee6:	4b15      	ldr	r3, [pc, #84]	@ (8004f3c <HAL_RCC_OscConfig+0x248>)
 8004ee8:	2201      	movs	r2, #1
 8004eea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eec:	f7fc fbac 	bl	8001648 <HAL_GetTick>
 8004ef0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ef2:	e008      	b.n	8004f06 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ef4:	f7fc fba8 	bl	8001648 <HAL_GetTick>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	1ad3      	subs	r3, r2, r3
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d901      	bls.n	8004f06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f02:	2303      	movs	r3, #3
 8004f04:	e167      	b.n	80051d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f06:	4b0b      	ldr	r3, [pc, #44]	@ (8004f34 <HAL_RCC_OscConfig+0x240>)
 8004f08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f0a:	f003 0302 	and.w	r3, r3, #2
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d0f0      	beq.n	8004ef4 <HAL_RCC_OscConfig+0x200>
 8004f12:	e01b      	b.n	8004f4c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f14:	4b09      	ldr	r3, [pc, #36]	@ (8004f3c <HAL_RCC_OscConfig+0x248>)
 8004f16:	2200      	movs	r2, #0
 8004f18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f1a:	f7fc fb95 	bl	8001648 <HAL_GetTick>
 8004f1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f20:	e00e      	b.n	8004f40 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f22:	f7fc fb91 	bl	8001648 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d907      	bls.n	8004f40 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e150      	b.n	80051d6 <HAL_RCC_OscConfig+0x4e2>
 8004f34:	40023800 	.word	0x40023800
 8004f38:	42470000 	.word	0x42470000
 8004f3c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f40:	4b88      	ldr	r3, [pc, #544]	@ (8005164 <HAL_RCC_OscConfig+0x470>)
 8004f42:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004f44:	f003 0302 	and.w	r3, r3, #2
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d1ea      	bne.n	8004f22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f003 0304 	and.w	r3, r3, #4
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	f000 8097 	beq.w	8005088 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f5a:	2300      	movs	r3, #0
 8004f5c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f5e:	4b81      	ldr	r3, [pc, #516]	@ (8005164 <HAL_RCC_OscConfig+0x470>)
 8004f60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d10f      	bne.n	8004f8a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f6a:	2300      	movs	r3, #0
 8004f6c:	60bb      	str	r3, [r7, #8]
 8004f6e:	4b7d      	ldr	r3, [pc, #500]	@ (8005164 <HAL_RCC_OscConfig+0x470>)
 8004f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f72:	4a7c      	ldr	r2, [pc, #496]	@ (8005164 <HAL_RCC_OscConfig+0x470>)
 8004f74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004f78:	6413      	str	r3, [r2, #64]	@ 0x40
 8004f7a:	4b7a      	ldr	r3, [pc, #488]	@ (8005164 <HAL_RCC_OscConfig+0x470>)
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004f82:	60bb      	str	r3, [r7, #8]
 8004f84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004f86:	2301      	movs	r3, #1
 8004f88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004f8a:	4b77      	ldr	r3, [pc, #476]	@ (8005168 <HAL_RCC_OscConfig+0x474>)
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d118      	bne.n	8004fc8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004f96:	4b74      	ldr	r3, [pc, #464]	@ (8005168 <HAL_RCC_OscConfig+0x474>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a73      	ldr	r2, [pc, #460]	@ (8005168 <HAL_RCC_OscConfig+0x474>)
 8004f9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fa0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fa2:	f7fc fb51 	bl	8001648 <HAL_GetTick>
 8004fa6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fa8:	e008      	b.n	8004fbc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004faa:	f7fc fb4d 	bl	8001648 <HAL_GetTick>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	1ad3      	subs	r3, r2, r3
 8004fb4:	2b02      	cmp	r3, #2
 8004fb6:	d901      	bls.n	8004fbc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004fb8:	2303      	movs	r3, #3
 8004fba:	e10c      	b.n	80051d6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fbc:	4b6a      	ldr	r3, [pc, #424]	@ (8005168 <HAL_RCC_OscConfig+0x474>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d0f0      	beq.n	8004faa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	689b      	ldr	r3, [r3, #8]
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d106      	bne.n	8004fde <HAL_RCC_OscConfig+0x2ea>
 8004fd0:	4b64      	ldr	r3, [pc, #400]	@ (8005164 <HAL_RCC_OscConfig+0x470>)
 8004fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fd4:	4a63      	ldr	r2, [pc, #396]	@ (8005164 <HAL_RCC_OscConfig+0x470>)
 8004fd6:	f043 0301 	orr.w	r3, r3, #1
 8004fda:	6713      	str	r3, [r2, #112]	@ 0x70
 8004fdc:	e01c      	b.n	8005018 <HAL_RCC_OscConfig+0x324>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	689b      	ldr	r3, [r3, #8]
 8004fe2:	2b05      	cmp	r3, #5
 8004fe4:	d10c      	bne.n	8005000 <HAL_RCC_OscConfig+0x30c>
 8004fe6:	4b5f      	ldr	r3, [pc, #380]	@ (8005164 <HAL_RCC_OscConfig+0x470>)
 8004fe8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004fea:	4a5e      	ldr	r2, [pc, #376]	@ (8005164 <HAL_RCC_OscConfig+0x470>)
 8004fec:	f043 0304 	orr.w	r3, r3, #4
 8004ff0:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ff2:	4b5c      	ldr	r3, [pc, #368]	@ (8005164 <HAL_RCC_OscConfig+0x470>)
 8004ff4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ff6:	4a5b      	ldr	r2, [pc, #364]	@ (8005164 <HAL_RCC_OscConfig+0x470>)
 8004ff8:	f043 0301 	orr.w	r3, r3, #1
 8004ffc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ffe:	e00b      	b.n	8005018 <HAL_RCC_OscConfig+0x324>
 8005000:	4b58      	ldr	r3, [pc, #352]	@ (8005164 <HAL_RCC_OscConfig+0x470>)
 8005002:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005004:	4a57      	ldr	r2, [pc, #348]	@ (8005164 <HAL_RCC_OscConfig+0x470>)
 8005006:	f023 0301 	bic.w	r3, r3, #1
 800500a:	6713      	str	r3, [r2, #112]	@ 0x70
 800500c:	4b55      	ldr	r3, [pc, #340]	@ (8005164 <HAL_RCC_OscConfig+0x470>)
 800500e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005010:	4a54      	ldr	r2, [pc, #336]	@ (8005164 <HAL_RCC_OscConfig+0x470>)
 8005012:	f023 0304 	bic.w	r3, r3, #4
 8005016:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d015      	beq.n	800504c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005020:	f7fc fb12 	bl	8001648 <HAL_GetTick>
 8005024:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005026:	e00a      	b.n	800503e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005028:	f7fc fb0e 	bl	8001648 <HAL_GetTick>
 800502c:	4602      	mov	r2, r0
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	1ad3      	subs	r3, r2, r3
 8005032:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005036:	4293      	cmp	r3, r2
 8005038:	d901      	bls.n	800503e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800503a:	2303      	movs	r3, #3
 800503c:	e0cb      	b.n	80051d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800503e:	4b49      	ldr	r3, [pc, #292]	@ (8005164 <HAL_RCC_OscConfig+0x470>)
 8005040:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005042:	f003 0302 	and.w	r3, r3, #2
 8005046:	2b00      	cmp	r3, #0
 8005048:	d0ee      	beq.n	8005028 <HAL_RCC_OscConfig+0x334>
 800504a:	e014      	b.n	8005076 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800504c:	f7fc fafc 	bl	8001648 <HAL_GetTick>
 8005050:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005052:	e00a      	b.n	800506a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005054:	f7fc faf8 	bl	8001648 <HAL_GetTick>
 8005058:	4602      	mov	r2, r0
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	1ad3      	subs	r3, r2, r3
 800505e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005062:	4293      	cmp	r3, r2
 8005064:	d901      	bls.n	800506a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e0b5      	b.n	80051d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800506a:	4b3e      	ldr	r3, [pc, #248]	@ (8005164 <HAL_RCC_OscConfig+0x470>)
 800506c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800506e:	f003 0302 	and.w	r3, r3, #2
 8005072:	2b00      	cmp	r3, #0
 8005074:	d1ee      	bne.n	8005054 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005076:	7dfb      	ldrb	r3, [r7, #23]
 8005078:	2b01      	cmp	r3, #1
 800507a:	d105      	bne.n	8005088 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800507c:	4b39      	ldr	r3, [pc, #228]	@ (8005164 <HAL_RCC_OscConfig+0x470>)
 800507e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005080:	4a38      	ldr	r2, [pc, #224]	@ (8005164 <HAL_RCC_OscConfig+0x470>)
 8005082:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005086:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	2b00      	cmp	r3, #0
 800508e:	f000 80a1 	beq.w	80051d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005092:	4b34      	ldr	r3, [pc, #208]	@ (8005164 <HAL_RCC_OscConfig+0x470>)
 8005094:	689b      	ldr	r3, [r3, #8]
 8005096:	f003 030c 	and.w	r3, r3, #12
 800509a:	2b08      	cmp	r3, #8
 800509c:	d05c      	beq.n	8005158 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	2b02      	cmp	r3, #2
 80050a4:	d141      	bne.n	800512a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050a6:	4b31      	ldr	r3, [pc, #196]	@ (800516c <HAL_RCC_OscConfig+0x478>)
 80050a8:	2200      	movs	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050ac:	f7fc facc 	bl	8001648 <HAL_GetTick>
 80050b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050b2:	e008      	b.n	80050c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80050b4:	f7fc fac8 	bl	8001648 <HAL_GetTick>
 80050b8:	4602      	mov	r2, r0
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	1ad3      	subs	r3, r2, r3
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d901      	bls.n	80050c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80050c2:	2303      	movs	r3, #3
 80050c4:	e087      	b.n	80051d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050c6:	4b27      	ldr	r3, [pc, #156]	@ (8005164 <HAL_RCC_OscConfig+0x470>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d1f0      	bne.n	80050b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	69da      	ldr	r2, [r3, #28]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6a1b      	ldr	r3, [r3, #32]
 80050da:	431a      	orrs	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e0:	019b      	lsls	r3, r3, #6
 80050e2:	431a      	orrs	r2, r3
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050e8:	085b      	lsrs	r3, r3, #1
 80050ea:	3b01      	subs	r3, #1
 80050ec:	041b      	lsls	r3, r3, #16
 80050ee:	431a      	orrs	r2, r3
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050f4:	061b      	lsls	r3, r3, #24
 80050f6:	491b      	ldr	r1, [pc, #108]	@ (8005164 <HAL_RCC_OscConfig+0x470>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80050fc:	4b1b      	ldr	r3, [pc, #108]	@ (800516c <HAL_RCC_OscConfig+0x478>)
 80050fe:	2201      	movs	r2, #1
 8005100:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005102:	f7fc faa1 	bl	8001648 <HAL_GetTick>
 8005106:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005108:	e008      	b.n	800511c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800510a:	f7fc fa9d 	bl	8001648 <HAL_GetTick>
 800510e:	4602      	mov	r2, r0
 8005110:	693b      	ldr	r3, [r7, #16]
 8005112:	1ad3      	subs	r3, r2, r3
 8005114:	2b02      	cmp	r3, #2
 8005116:	d901      	bls.n	800511c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005118:	2303      	movs	r3, #3
 800511a:	e05c      	b.n	80051d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800511c:	4b11      	ldr	r3, [pc, #68]	@ (8005164 <HAL_RCC_OscConfig+0x470>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d0f0      	beq.n	800510a <HAL_RCC_OscConfig+0x416>
 8005128:	e054      	b.n	80051d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800512a:	4b10      	ldr	r3, [pc, #64]	@ (800516c <HAL_RCC_OscConfig+0x478>)
 800512c:	2200      	movs	r2, #0
 800512e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005130:	f7fc fa8a 	bl	8001648 <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005136:	e008      	b.n	800514a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005138:	f7fc fa86 	bl	8001648 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b02      	cmp	r3, #2
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e045      	b.n	80051d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800514a:	4b06      	ldr	r3, [pc, #24]	@ (8005164 <HAL_RCC_OscConfig+0x470>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1f0      	bne.n	8005138 <HAL_RCC_OscConfig+0x444>
 8005156:	e03d      	b.n	80051d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	699b      	ldr	r3, [r3, #24]
 800515c:	2b01      	cmp	r3, #1
 800515e:	d107      	bne.n	8005170 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005160:	2301      	movs	r3, #1
 8005162:	e038      	b.n	80051d6 <HAL_RCC_OscConfig+0x4e2>
 8005164:	40023800 	.word	0x40023800
 8005168:	40007000 	.word	0x40007000
 800516c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005170:	4b1b      	ldr	r3, [pc, #108]	@ (80051e0 <HAL_RCC_OscConfig+0x4ec>)
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	699b      	ldr	r3, [r3, #24]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d028      	beq.n	80051d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005188:	429a      	cmp	r2, r3
 800518a:	d121      	bne.n	80051d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005196:	429a      	cmp	r2, r3
 8005198:	d11a      	bne.n	80051d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80051a0:	4013      	ands	r3, r2
 80051a2:	687a      	ldr	r2, [r7, #4]
 80051a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80051a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d111      	bne.n	80051d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80051b6:	085b      	lsrs	r3, r3, #1
 80051b8:	3b01      	subs	r3, #1
 80051ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051bc:	429a      	cmp	r2, r3
 80051be:	d107      	bne.n	80051d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051cc:	429a      	cmp	r2, r3
 80051ce:	d001      	beq.n	80051d4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e000      	b.n	80051d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80051d4:	2300      	movs	r3, #0
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	3718      	adds	r7, #24
 80051da:	46bd      	mov	sp, r7
 80051dc:	bd80      	pop	{r7, pc}
 80051de:	bf00      	nop
 80051e0:	40023800 	.word	0x40023800

080051e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d101      	bne.n	80051f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e0cc      	b.n	8005392 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80051f8:	4b68      	ldr	r3, [pc, #416]	@ (800539c <HAL_RCC_ClockConfig+0x1b8>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f003 030f 	and.w	r3, r3, #15
 8005200:	683a      	ldr	r2, [r7, #0]
 8005202:	429a      	cmp	r2, r3
 8005204:	d90c      	bls.n	8005220 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005206:	4b65      	ldr	r3, [pc, #404]	@ (800539c <HAL_RCC_ClockConfig+0x1b8>)
 8005208:	683a      	ldr	r2, [r7, #0]
 800520a:	b2d2      	uxtb	r2, r2
 800520c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800520e:	4b63      	ldr	r3, [pc, #396]	@ (800539c <HAL_RCC_ClockConfig+0x1b8>)
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f003 030f 	and.w	r3, r3, #15
 8005216:	683a      	ldr	r2, [r7, #0]
 8005218:	429a      	cmp	r2, r3
 800521a:	d001      	beq.n	8005220 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800521c:	2301      	movs	r3, #1
 800521e:	e0b8      	b.n	8005392 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 0302 	and.w	r3, r3, #2
 8005228:	2b00      	cmp	r3, #0
 800522a:	d020      	beq.n	800526e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0304 	and.w	r3, r3, #4
 8005234:	2b00      	cmp	r3, #0
 8005236:	d005      	beq.n	8005244 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005238:	4b59      	ldr	r3, [pc, #356]	@ (80053a0 <HAL_RCC_ClockConfig+0x1bc>)
 800523a:	689b      	ldr	r3, [r3, #8]
 800523c:	4a58      	ldr	r2, [pc, #352]	@ (80053a0 <HAL_RCC_ClockConfig+0x1bc>)
 800523e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005242:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0308 	and.w	r3, r3, #8
 800524c:	2b00      	cmp	r3, #0
 800524e:	d005      	beq.n	800525c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005250:	4b53      	ldr	r3, [pc, #332]	@ (80053a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	4a52      	ldr	r2, [pc, #328]	@ (80053a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005256:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800525a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800525c:	4b50      	ldr	r3, [pc, #320]	@ (80053a0 <HAL_RCC_ClockConfig+0x1bc>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	689b      	ldr	r3, [r3, #8]
 8005268:	494d      	ldr	r1, [pc, #308]	@ (80053a0 <HAL_RCC_ClockConfig+0x1bc>)
 800526a:	4313      	orrs	r3, r2
 800526c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0301 	and.w	r3, r3, #1
 8005276:	2b00      	cmp	r3, #0
 8005278:	d044      	beq.n	8005304 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	2b01      	cmp	r3, #1
 8005280:	d107      	bne.n	8005292 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005282:	4b47      	ldr	r3, [pc, #284]	@ (80053a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d119      	bne.n	80052c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800528e:	2301      	movs	r3, #1
 8005290:	e07f      	b.n	8005392 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	2b02      	cmp	r3, #2
 8005298:	d003      	beq.n	80052a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800529e:	2b03      	cmp	r3, #3
 80052a0:	d107      	bne.n	80052b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052a2:	4b3f      	ldr	r3, [pc, #252]	@ (80053a0 <HAL_RCC_ClockConfig+0x1bc>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d109      	bne.n	80052c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052ae:	2301      	movs	r3, #1
 80052b0:	e06f      	b.n	8005392 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052b2:	4b3b      	ldr	r3, [pc, #236]	@ (80053a0 <HAL_RCC_ClockConfig+0x1bc>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052be:	2301      	movs	r3, #1
 80052c0:	e067      	b.n	8005392 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052c2:	4b37      	ldr	r3, [pc, #220]	@ (80053a0 <HAL_RCC_ClockConfig+0x1bc>)
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f023 0203 	bic.w	r2, r3, #3
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	685b      	ldr	r3, [r3, #4]
 80052ce:	4934      	ldr	r1, [pc, #208]	@ (80053a0 <HAL_RCC_ClockConfig+0x1bc>)
 80052d0:	4313      	orrs	r3, r2
 80052d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052d4:	f7fc f9b8 	bl	8001648 <HAL_GetTick>
 80052d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052da:	e00a      	b.n	80052f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052dc:	f7fc f9b4 	bl	8001648 <HAL_GetTick>
 80052e0:	4602      	mov	r2, r0
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	1ad3      	subs	r3, r2, r3
 80052e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80052ea:	4293      	cmp	r3, r2
 80052ec:	d901      	bls.n	80052f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80052ee:	2303      	movs	r3, #3
 80052f0:	e04f      	b.n	8005392 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052f2:	4b2b      	ldr	r3, [pc, #172]	@ (80053a0 <HAL_RCC_ClockConfig+0x1bc>)
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f003 020c 	and.w	r2, r3, #12
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	009b      	lsls	r3, r3, #2
 8005300:	429a      	cmp	r2, r3
 8005302:	d1eb      	bne.n	80052dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005304:	4b25      	ldr	r3, [pc, #148]	@ (800539c <HAL_RCC_ClockConfig+0x1b8>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f003 030f 	and.w	r3, r3, #15
 800530c:	683a      	ldr	r2, [r7, #0]
 800530e:	429a      	cmp	r2, r3
 8005310:	d20c      	bcs.n	800532c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005312:	4b22      	ldr	r3, [pc, #136]	@ (800539c <HAL_RCC_ClockConfig+0x1b8>)
 8005314:	683a      	ldr	r2, [r7, #0]
 8005316:	b2d2      	uxtb	r2, r2
 8005318:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800531a:	4b20      	ldr	r3, [pc, #128]	@ (800539c <HAL_RCC_ClockConfig+0x1b8>)
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	f003 030f 	and.w	r3, r3, #15
 8005322:	683a      	ldr	r2, [r7, #0]
 8005324:	429a      	cmp	r2, r3
 8005326:	d001      	beq.n	800532c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005328:	2301      	movs	r3, #1
 800532a:	e032      	b.n	8005392 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f003 0304 	and.w	r3, r3, #4
 8005334:	2b00      	cmp	r3, #0
 8005336:	d008      	beq.n	800534a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005338:	4b19      	ldr	r3, [pc, #100]	@ (80053a0 <HAL_RCC_ClockConfig+0x1bc>)
 800533a:	689b      	ldr	r3, [r3, #8]
 800533c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	68db      	ldr	r3, [r3, #12]
 8005344:	4916      	ldr	r1, [pc, #88]	@ (80053a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005346:	4313      	orrs	r3, r2
 8005348:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f003 0308 	and.w	r3, r3, #8
 8005352:	2b00      	cmp	r3, #0
 8005354:	d009      	beq.n	800536a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005356:	4b12      	ldr	r3, [pc, #72]	@ (80053a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	00db      	lsls	r3, r3, #3
 8005364:	490e      	ldr	r1, [pc, #56]	@ (80053a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005366:	4313      	orrs	r3, r2
 8005368:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800536a:	f000 f821 	bl	80053b0 <HAL_RCC_GetSysClockFreq>
 800536e:	4602      	mov	r2, r0
 8005370:	4b0b      	ldr	r3, [pc, #44]	@ (80053a0 <HAL_RCC_ClockConfig+0x1bc>)
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	091b      	lsrs	r3, r3, #4
 8005376:	f003 030f 	and.w	r3, r3, #15
 800537a:	490a      	ldr	r1, [pc, #40]	@ (80053a4 <HAL_RCC_ClockConfig+0x1c0>)
 800537c:	5ccb      	ldrb	r3, [r1, r3]
 800537e:	fa22 f303 	lsr.w	r3, r2, r3
 8005382:	4a09      	ldr	r2, [pc, #36]	@ (80053a8 <HAL_RCC_ClockConfig+0x1c4>)
 8005384:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005386:	4b09      	ldr	r3, [pc, #36]	@ (80053ac <HAL_RCC_ClockConfig+0x1c8>)
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4618      	mov	r0, r3
 800538c:	f7fb ffe0 	bl	8001350 <HAL_InitTick>

  return HAL_OK;
 8005390:	2300      	movs	r3, #0
}
 8005392:	4618      	mov	r0, r3
 8005394:	3710      	adds	r7, #16
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	40023c00 	.word	0x40023c00
 80053a0:	40023800 	.word	0x40023800
 80053a4:	0800a830 	.word	0x0800a830
 80053a8:	20000000 	.word	0x20000000
 80053ac:	20000004 	.word	0x20000004

080053b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053b4:	b094      	sub	sp, #80	@ 0x50
 80053b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80053b8:	2300      	movs	r3, #0
 80053ba:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80053bc:	2300      	movs	r3, #0
 80053be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80053c0:	2300      	movs	r3, #0
 80053c2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80053c4:	2300      	movs	r3, #0
 80053c6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053c8:	4b79      	ldr	r3, [pc, #484]	@ (80055b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80053ca:	689b      	ldr	r3, [r3, #8]
 80053cc:	f003 030c 	and.w	r3, r3, #12
 80053d0:	2b08      	cmp	r3, #8
 80053d2:	d00d      	beq.n	80053f0 <HAL_RCC_GetSysClockFreq+0x40>
 80053d4:	2b08      	cmp	r3, #8
 80053d6:	f200 80e1 	bhi.w	800559c <HAL_RCC_GetSysClockFreq+0x1ec>
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d002      	beq.n	80053e4 <HAL_RCC_GetSysClockFreq+0x34>
 80053de:	2b04      	cmp	r3, #4
 80053e0:	d003      	beq.n	80053ea <HAL_RCC_GetSysClockFreq+0x3a>
 80053e2:	e0db      	b.n	800559c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80053e4:	4b73      	ldr	r3, [pc, #460]	@ (80055b4 <HAL_RCC_GetSysClockFreq+0x204>)
 80053e6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053e8:	e0db      	b.n	80055a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80053ea:	4b73      	ldr	r3, [pc, #460]	@ (80055b8 <HAL_RCC_GetSysClockFreq+0x208>)
 80053ec:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80053ee:	e0d8      	b.n	80055a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80053f0:	4b6f      	ldr	r3, [pc, #444]	@ (80055b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80053f8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80053fa:	4b6d      	ldr	r3, [pc, #436]	@ (80055b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005402:	2b00      	cmp	r3, #0
 8005404:	d063      	beq.n	80054ce <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005406:	4b6a      	ldr	r3, [pc, #424]	@ (80055b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005408:	685b      	ldr	r3, [r3, #4]
 800540a:	099b      	lsrs	r3, r3, #6
 800540c:	2200      	movs	r2, #0
 800540e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005410:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005414:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005418:	633b      	str	r3, [r7, #48]	@ 0x30
 800541a:	2300      	movs	r3, #0
 800541c:	637b      	str	r3, [r7, #52]	@ 0x34
 800541e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005422:	4622      	mov	r2, r4
 8005424:	462b      	mov	r3, r5
 8005426:	f04f 0000 	mov.w	r0, #0
 800542a:	f04f 0100 	mov.w	r1, #0
 800542e:	0159      	lsls	r1, r3, #5
 8005430:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005434:	0150      	lsls	r0, r2, #5
 8005436:	4602      	mov	r2, r0
 8005438:	460b      	mov	r3, r1
 800543a:	4621      	mov	r1, r4
 800543c:	1a51      	subs	r1, r2, r1
 800543e:	6139      	str	r1, [r7, #16]
 8005440:	4629      	mov	r1, r5
 8005442:	eb63 0301 	sbc.w	r3, r3, r1
 8005446:	617b      	str	r3, [r7, #20]
 8005448:	f04f 0200 	mov.w	r2, #0
 800544c:	f04f 0300 	mov.w	r3, #0
 8005450:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005454:	4659      	mov	r1, fp
 8005456:	018b      	lsls	r3, r1, #6
 8005458:	4651      	mov	r1, sl
 800545a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800545e:	4651      	mov	r1, sl
 8005460:	018a      	lsls	r2, r1, #6
 8005462:	4651      	mov	r1, sl
 8005464:	ebb2 0801 	subs.w	r8, r2, r1
 8005468:	4659      	mov	r1, fp
 800546a:	eb63 0901 	sbc.w	r9, r3, r1
 800546e:	f04f 0200 	mov.w	r2, #0
 8005472:	f04f 0300 	mov.w	r3, #0
 8005476:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800547a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800547e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005482:	4690      	mov	r8, r2
 8005484:	4699      	mov	r9, r3
 8005486:	4623      	mov	r3, r4
 8005488:	eb18 0303 	adds.w	r3, r8, r3
 800548c:	60bb      	str	r3, [r7, #8]
 800548e:	462b      	mov	r3, r5
 8005490:	eb49 0303 	adc.w	r3, r9, r3
 8005494:	60fb      	str	r3, [r7, #12]
 8005496:	f04f 0200 	mov.w	r2, #0
 800549a:	f04f 0300 	mov.w	r3, #0
 800549e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80054a2:	4629      	mov	r1, r5
 80054a4:	024b      	lsls	r3, r1, #9
 80054a6:	4621      	mov	r1, r4
 80054a8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80054ac:	4621      	mov	r1, r4
 80054ae:	024a      	lsls	r2, r1, #9
 80054b0:	4610      	mov	r0, r2
 80054b2:	4619      	mov	r1, r3
 80054b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80054b6:	2200      	movs	r2, #0
 80054b8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80054ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80054bc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80054c0:	f7fa fe94 	bl	80001ec <__aeabi_uldivmod>
 80054c4:	4602      	mov	r2, r0
 80054c6:	460b      	mov	r3, r1
 80054c8:	4613      	mov	r3, r2
 80054ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80054cc:	e058      	b.n	8005580 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054ce:	4b38      	ldr	r3, [pc, #224]	@ (80055b0 <HAL_RCC_GetSysClockFreq+0x200>)
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	099b      	lsrs	r3, r3, #6
 80054d4:	2200      	movs	r2, #0
 80054d6:	4618      	mov	r0, r3
 80054d8:	4611      	mov	r1, r2
 80054da:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80054de:	623b      	str	r3, [r7, #32]
 80054e0:	2300      	movs	r3, #0
 80054e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80054e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80054e8:	4642      	mov	r2, r8
 80054ea:	464b      	mov	r3, r9
 80054ec:	f04f 0000 	mov.w	r0, #0
 80054f0:	f04f 0100 	mov.w	r1, #0
 80054f4:	0159      	lsls	r1, r3, #5
 80054f6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054fa:	0150      	lsls	r0, r2, #5
 80054fc:	4602      	mov	r2, r0
 80054fe:	460b      	mov	r3, r1
 8005500:	4641      	mov	r1, r8
 8005502:	ebb2 0a01 	subs.w	sl, r2, r1
 8005506:	4649      	mov	r1, r9
 8005508:	eb63 0b01 	sbc.w	fp, r3, r1
 800550c:	f04f 0200 	mov.w	r2, #0
 8005510:	f04f 0300 	mov.w	r3, #0
 8005514:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005518:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800551c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005520:	ebb2 040a 	subs.w	r4, r2, sl
 8005524:	eb63 050b 	sbc.w	r5, r3, fp
 8005528:	f04f 0200 	mov.w	r2, #0
 800552c:	f04f 0300 	mov.w	r3, #0
 8005530:	00eb      	lsls	r3, r5, #3
 8005532:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005536:	00e2      	lsls	r2, r4, #3
 8005538:	4614      	mov	r4, r2
 800553a:	461d      	mov	r5, r3
 800553c:	4643      	mov	r3, r8
 800553e:	18e3      	adds	r3, r4, r3
 8005540:	603b      	str	r3, [r7, #0]
 8005542:	464b      	mov	r3, r9
 8005544:	eb45 0303 	adc.w	r3, r5, r3
 8005548:	607b      	str	r3, [r7, #4]
 800554a:	f04f 0200 	mov.w	r2, #0
 800554e:	f04f 0300 	mov.w	r3, #0
 8005552:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005556:	4629      	mov	r1, r5
 8005558:	028b      	lsls	r3, r1, #10
 800555a:	4621      	mov	r1, r4
 800555c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005560:	4621      	mov	r1, r4
 8005562:	028a      	lsls	r2, r1, #10
 8005564:	4610      	mov	r0, r2
 8005566:	4619      	mov	r1, r3
 8005568:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800556a:	2200      	movs	r2, #0
 800556c:	61bb      	str	r3, [r7, #24]
 800556e:	61fa      	str	r2, [r7, #28]
 8005570:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005574:	f7fa fe3a 	bl	80001ec <__aeabi_uldivmod>
 8005578:	4602      	mov	r2, r0
 800557a:	460b      	mov	r3, r1
 800557c:	4613      	mov	r3, r2
 800557e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005580:	4b0b      	ldr	r3, [pc, #44]	@ (80055b0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005582:	685b      	ldr	r3, [r3, #4]
 8005584:	0c1b      	lsrs	r3, r3, #16
 8005586:	f003 0303 	and.w	r3, r3, #3
 800558a:	3301      	adds	r3, #1
 800558c:	005b      	lsls	r3, r3, #1
 800558e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005590:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005592:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005594:	fbb2 f3f3 	udiv	r3, r2, r3
 8005598:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800559a:	e002      	b.n	80055a2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800559c:	4b05      	ldr	r3, [pc, #20]	@ (80055b4 <HAL_RCC_GetSysClockFreq+0x204>)
 800559e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80055a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3750      	adds	r7, #80	@ 0x50
 80055a8:	46bd      	mov	sp, r7
 80055aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055ae:	bf00      	nop
 80055b0:	40023800 	.word	0x40023800
 80055b4:	00f42400 	.word	0x00f42400
 80055b8:	007a1200 	.word	0x007a1200

080055bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055bc:	b480      	push	{r7}
 80055be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055c0:	4b03      	ldr	r3, [pc, #12]	@ (80055d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80055c2:	681b      	ldr	r3, [r3, #0]
}
 80055c4:	4618      	mov	r0, r3
 80055c6:	46bd      	mov	sp, r7
 80055c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055cc:	4770      	bx	lr
 80055ce:	bf00      	nop
 80055d0:	20000000 	.word	0x20000000

080055d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80055d8:	f7ff fff0 	bl	80055bc <HAL_RCC_GetHCLKFreq>
 80055dc:	4602      	mov	r2, r0
 80055de:	4b05      	ldr	r3, [pc, #20]	@ (80055f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	0a9b      	lsrs	r3, r3, #10
 80055e4:	f003 0307 	and.w	r3, r3, #7
 80055e8:	4903      	ldr	r1, [pc, #12]	@ (80055f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80055ea:	5ccb      	ldrb	r3, [r1, r3]
 80055ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	bd80      	pop	{r7, pc}
 80055f4:	40023800 	.word	0x40023800
 80055f8:	0800a840 	.word	0x0800a840

080055fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005600:	f7ff ffdc 	bl	80055bc <HAL_RCC_GetHCLKFreq>
 8005604:	4602      	mov	r2, r0
 8005606:	4b05      	ldr	r3, [pc, #20]	@ (800561c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005608:	689b      	ldr	r3, [r3, #8]
 800560a:	0b5b      	lsrs	r3, r3, #13
 800560c:	f003 0307 	and.w	r3, r3, #7
 8005610:	4903      	ldr	r1, [pc, #12]	@ (8005620 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005612:	5ccb      	ldrb	r3, [r1, r3]
 8005614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005618:	4618      	mov	r0, r3
 800561a:	bd80      	pop	{r7, pc}
 800561c:	40023800 	.word	0x40023800
 8005620:	0800a840 	.word	0x0800a840

08005624 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	220f      	movs	r2, #15
 8005632:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005634:	4b12      	ldr	r3, [pc, #72]	@ (8005680 <HAL_RCC_GetClockConfig+0x5c>)
 8005636:	689b      	ldr	r3, [r3, #8]
 8005638:	f003 0203 	and.w	r2, r3, #3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005640:	4b0f      	ldr	r3, [pc, #60]	@ (8005680 <HAL_RCC_GetClockConfig+0x5c>)
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800564c:	4b0c      	ldr	r3, [pc, #48]	@ (8005680 <HAL_RCC_GetClockConfig+0x5c>)
 800564e:	689b      	ldr	r3, [r3, #8]
 8005650:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005658:	4b09      	ldr	r3, [pc, #36]	@ (8005680 <HAL_RCC_GetClockConfig+0x5c>)
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	08db      	lsrs	r3, r3, #3
 800565e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005666:	4b07      	ldr	r3, [pc, #28]	@ (8005684 <HAL_RCC_GetClockConfig+0x60>)
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 020f 	and.w	r2, r3, #15
 800566e:	683b      	ldr	r3, [r7, #0]
 8005670:	601a      	str	r2, [r3, #0]
}
 8005672:	bf00      	nop
 8005674:	370c      	adds	r7, #12
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	40023800 	.word	0x40023800
 8005684:	40023c00 	.word	0x40023c00

08005688 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005690:	2300      	movs	r3, #0
 8005692:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005694:	2300      	movs	r3, #0
 8005696:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f003 0301 	and.w	r3, r3, #1
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d10b      	bne.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d105      	bne.n	80056bc <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d075      	beq.n	80057a8 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80056bc:	4b91      	ldr	r3, [pc, #580]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 80056be:	2200      	movs	r2, #0
 80056c0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056c2:	f7fb ffc1 	bl	8001648 <HAL_GetTick>
 80056c6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056c8:	e008      	b.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80056ca:	f7fb ffbd 	bl	8001648 <HAL_GetTick>
 80056ce:	4602      	mov	r2, r0
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	1ad3      	subs	r3, r2, r3
 80056d4:	2b02      	cmp	r3, #2
 80056d6:	d901      	bls.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056d8:	2303      	movs	r3, #3
 80056da:	e189      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056dc:	4b8a      	ldr	r3, [pc, #552]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d1f0      	bne.n	80056ca <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d009      	beq.n	8005708 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	685b      	ldr	r3, [r3, #4]
 80056f8:	019a      	lsls	r2, r3, #6
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	689b      	ldr	r3, [r3, #8]
 80056fe:	071b      	lsls	r3, r3, #28
 8005700:	4981      	ldr	r1, [pc, #516]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005702:	4313      	orrs	r3, r2
 8005704:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b00      	cmp	r3, #0
 8005712:	d01f      	beq.n	8005754 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005714:	4b7c      	ldr	r3, [pc, #496]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005716:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800571a:	0f1b      	lsrs	r3, r3, #28
 800571c:	f003 0307 	and.w	r3, r3, #7
 8005720:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	019a      	lsls	r2, r3, #6
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	68db      	ldr	r3, [r3, #12]
 800572c:	061b      	lsls	r3, r3, #24
 800572e:	431a      	orrs	r2, r3
 8005730:	693b      	ldr	r3, [r7, #16]
 8005732:	071b      	lsls	r3, r3, #28
 8005734:	4974      	ldr	r1, [pc, #464]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005736:	4313      	orrs	r3, r2
 8005738:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800573c:	4b72      	ldr	r3, [pc, #456]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800573e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005742:	f023 021f 	bic.w	r2, r3, #31
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	69db      	ldr	r3, [r3, #28]
 800574a:	3b01      	subs	r3, #1
 800574c:	496e      	ldr	r1, [pc, #440]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800574e:	4313      	orrs	r3, r2
 8005750:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800575c:	2b00      	cmp	r3, #0
 800575e:	d00d      	beq.n	800577c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	019a      	lsls	r2, r3, #6
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	061b      	lsls	r3, r3, #24
 800576c:	431a      	orrs	r2, r3
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	071b      	lsls	r3, r3, #28
 8005774:	4964      	ldr	r1, [pc, #400]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005776:	4313      	orrs	r3, r2
 8005778:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800577c:	4b61      	ldr	r3, [pc, #388]	@ (8005904 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800577e:	2201      	movs	r2, #1
 8005780:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005782:	f7fb ff61 	bl	8001648 <HAL_GetTick>
 8005786:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005788:	e008      	b.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800578a:	f7fb ff5d 	bl	8001648 <HAL_GetTick>
 800578e:	4602      	mov	r2, r0
 8005790:	697b      	ldr	r3, [r7, #20]
 8005792:	1ad3      	subs	r3, r2, r3
 8005794:	2b02      	cmp	r3, #2
 8005796:	d901      	bls.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005798:	2303      	movs	r3, #3
 800579a:	e129      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800579c:	4b5a      	ldr	r3, [pc, #360]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d0f0      	beq.n	800578a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 0304 	and.w	r3, r3, #4
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d105      	bne.n	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d079      	beq.n	80058b4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80057c0:	4b52      	ldr	r3, [pc, #328]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80057c2:	2200      	movs	r2, #0
 80057c4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80057c6:	f7fb ff3f 	bl	8001648 <HAL_GetTick>
 80057ca:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057cc:	e008      	b.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80057ce:	f7fb ff3b 	bl	8001648 <HAL_GetTick>
 80057d2:	4602      	mov	r2, r0
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	1ad3      	subs	r3, r2, r3
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d901      	bls.n	80057e0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80057dc:	2303      	movs	r3, #3
 80057de:	e107      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80057e0:	4b49      	ldr	r3, [pc, #292]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80057e8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80057ec:	d0ef      	beq.n	80057ce <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f003 0304 	and.w	r3, r3, #4
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d020      	beq.n	800583c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80057fa:	4b43      	ldr	r3, [pc, #268]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80057fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005800:	0f1b      	lsrs	r3, r3, #28
 8005802:	f003 0307 	and.w	r3, r3, #7
 8005806:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	691b      	ldr	r3, [r3, #16]
 800580c:	019a      	lsls	r2, r3, #6
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	695b      	ldr	r3, [r3, #20]
 8005812:	061b      	lsls	r3, r3, #24
 8005814:	431a      	orrs	r2, r3
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	071b      	lsls	r3, r3, #28
 800581a:	493b      	ldr	r1, [pc, #236]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800581c:	4313      	orrs	r3, r2
 800581e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005822:	4b39      	ldr	r3, [pc, #228]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005824:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005828:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a1b      	ldr	r3, [r3, #32]
 8005830:	3b01      	subs	r3, #1
 8005832:	021b      	lsls	r3, r3, #8
 8005834:	4934      	ldr	r1, [pc, #208]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005836:	4313      	orrs	r3, r2
 8005838:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f003 0308 	and.w	r3, r3, #8
 8005844:	2b00      	cmp	r3, #0
 8005846:	d01e      	beq.n	8005886 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005848:	4b2f      	ldr	r3, [pc, #188]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800584a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800584e:	0e1b      	lsrs	r3, r3, #24
 8005850:	f003 030f 	and.w	r3, r3, #15
 8005854:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	691b      	ldr	r3, [r3, #16]
 800585a:	019a      	lsls	r2, r3, #6
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	061b      	lsls	r3, r3, #24
 8005860:	431a      	orrs	r2, r3
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	699b      	ldr	r3, [r3, #24]
 8005866:	071b      	lsls	r3, r3, #28
 8005868:	4927      	ldr	r1, [pc, #156]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800586a:	4313      	orrs	r3, r2
 800586c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005870:	4b25      	ldr	r3, [pc, #148]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005872:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005876:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587e:	4922      	ldr	r1, [pc, #136]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005880:	4313      	orrs	r3, r2
 8005882:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005886:	4b21      	ldr	r3, [pc, #132]	@ (800590c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005888:	2201      	movs	r2, #1
 800588a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800588c:	f7fb fedc 	bl	8001648 <HAL_GetTick>
 8005890:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005892:	e008      	b.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005894:	f7fb fed8 	bl	8001648 <HAL_GetTick>
 8005898:	4602      	mov	r2, r0
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	2b02      	cmp	r3, #2
 80058a0:	d901      	bls.n	80058a6 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e0a4      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80058a6:	4b18      	ldr	r3, [pc, #96]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80058ae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80058b2:	d1ef      	bne.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f003 0320 	and.w	r3, r3, #32
 80058bc:	2b00      	cmp	r3, #0
 80058be:	f000 808b 	beq.w	80059d8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80058c2:	2300      	movs	r3, #0
 80058c4:	60fb      	str	r3, [r7, #12]
 80058c6:	4b10      	ldr	r3, [pc, #64]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058ca:	4a0f      	ldr	r2, [pc, #60]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80058d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005908 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058da:	60fb      	str	r3, [r7, #12]
 80058dc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80058de:	4b0c      	ldr	r3, [pc, #48]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a0b      	ldr	r2, [pc, #44]	@ (8005910 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80058e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80058e8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80058ea:	f7fb fead 	bl	8001648 <HAL_GetTick>
 80058ee:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80058f0:	e010      	b.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80058f2:	f7fb fea9 	bl	8001648 <HAL_GetTick>
 80058f6:	4602      	mov	r2, r0
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d909      	bls.n	8005914 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e075      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005904:	42470068 	.word	0x42470068
 8005908:	40023800 	.word	0x40023800
 800590c:	42470070 	.word	0x42470070
 8005910:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005914:	4b38      	ldr	r3, [pc, #224]	@ (80059f8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800591c:	2b00      	cmp	r3, #0
 800591e:	d0e8      	beq.n	80058f2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005920:	4b36      	ldr	r3, [pc, #216]	@ (80059fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005922:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005924:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005928:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	2b00      	cmp	r3, #0
 800592e:	d02f      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005934:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005938:	693a      	ldr	r2, [r7, #16]
 800593a:	429a      	cmp	r2, r3
 800593c:	d028      	beq.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800593e:	4b2f      	ldr	r3, [pc, #188]	@ (80059fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005940:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005942:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005946:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005948:	4b2d      	ldr	r3, [pc, #180]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800594a:	2201      	movs	r2, #1
 800594c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800594e:	4b2c      	ldr	r3, [pc, #176]	@ (8005a00 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005950:	2200      	movs	r2, #0
 8005952:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005954:	4a29      	ldr	r2, [pc, #164]	@ (80059fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800595a:	4b28      	ldr	r3, [pc, #160]	@ (80059fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800595c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b01      	cmp	r3, #1
 8005964:	d114      	bne.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005966:	f7fb fe6f 	bl	8001648 <HAL_GetTick>
 800596a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800596c:	e00a      	b.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800596e:	f7fb fe6b 	bl	8001648 <HAL_GetTick>
 8005972:	4602      	mov	r2, r0
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	1ad3      	subs	r3, r2, r3
 8005978:	f241 3288 	movw	r2, #5000	@ 0x1388
 800597c:	4293      	cmp	r3, r2
 800597e:	d901      	bls.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8005980:	2303      	movs	r3, #3
 8005982:	e035      	b.n	80059f0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005984:	4b1d      	ldr	r3, [pc, #116]	@ (80059fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005986:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005988:	f003 0302 	and.w	r3, r3, #2
 800598c:	2b00      	cmp	r3, #0
 800598e:	d0ee      	beq.n	800596e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005994:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005998:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800599c:	d10d      	bne.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x332>
 800599e:	4b17      	ldr	r3, [pc, #92]	@ (80059fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059a0:	689b      	ldr	r3, [r3, #8]
 80059a2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059aa:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80059ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059b2:	4912      	ldr	r1, [pc, #72]	@ (80059fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059b4:	4313      	orrs	r3, r2
 80059b6:	608b      	str	r3, [r1, #8]
 80059b8:	e005      	b.n	80059c6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80059ba:	4b10      	ldr	r3, [pc, #64]	@ (80059fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059bc:	689b      	ldr	r3, [r3, #8]
 80059be:	4a0f      	ldr	r2, [pc, #60]	@ (80059fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059c0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80059c4:	6093      	str	r3, [r2, #8]
 80059c6:	4b0d      	ldr	r3, [pc, #52]	@ (80059fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059c8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80059d2:	490a      	ldr	r1, [pc, #40]	@ (80059fc <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80059d4:	4313      	orrs	r3, r2
 80059d6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	f003 0310 	and.w	r3, r3, #16
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d004      	beq.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80059ea:	4b06      	ldr	r3, [pc, #24]	@ (8005a04 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80059ec:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80059ee:	2300      	movs	r3, #0
}
 80059f0:	4618      	mov	r0, r3
 80059f2:	3718      	adds	r7, #24
 80059f4:	46bd      	mov	sp, r7
 80059f6:	bd80      	pop	{r7, pc}
 80059f8:	40007000 	.word	0x40007000
 80059fc:	40023800 	.word	0x40023800
 8005a00:	42470e40 	.word	0x42470e40
 8005a04:	424711e0 	.word	0x424711e0

08005a08 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b082      	sub	sp, #8
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d101      	bne.n	8005a1c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e025      	b.n	8005a68 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d106      	bne.n	8005a36 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f7fb fc83 	bl	800133c <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2202      	movs	r2, #2
 8005a3a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	3304      	adds	r3, #4
 8005a46:	4619      	mov	r1, r3
 8005a48:	4610      	mov	r0, r2
 8005a4a:	f000 ffd3 	bl	80069f4 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6818      	ldr	r0, [r3, #0]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	461a      	mov	r2, r3
 8005a58:	6839      	ldr	r1, [r7, #0]
 8005a5a:	f001 f828 	bl	8006aae <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	2201      	movs	r2, #1
 8005a62:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8005a66:	2300      	movs	r3, #0
}
 8005a68:	4618      	mov	r0, r3
 8005a6a:	3708      	adds	r7, #8
 8005a6c:	46bd      	mov	sp, r7
 8005a6e:	bd80      	pop	{r7, pc}

08005a70 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b082      	sub	sp, #8
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e07b      	b.n	8005b7a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d108      	bne.n	8005a9c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005a92:	d009      	beq.n	8005aa8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	61da      	str	r2, [r3, #28]
 8005a9a:	e005      	b.n	8005aa8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d106      	bne.n	8005ac8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ac2:	6878      	ldr	r0, [r7, #4]
 8005ac4:	f7fb faf6 	bl	80010b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2202      	movs	r2, #2
 8005acc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ade:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	685b      	ldr	r3, [r3, #4]
 8005ae4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	689b      	ldr	r3, [r3, #8]
 8005aec:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005af0:	431a      	orrs	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005afa:	431a      	orrs	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	691b      	ldr	r3, [r3, #16]
 8005b00:	f003 0302 	and.w	r3, r3, #2
 8005b04:	431a      	orrs	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	695b      	ldr	r3, [r3, #20]
 8005b0a:	f003 0301 	and.w	r3, r3, #1
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b18:	431a      	orrs	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b22:	431a      	orrs	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a1b      	ldr	r3, [r3, #32]
 8005b28:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b2c:	ea42 0103 	orr.w	r1, r2, r3
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b34:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	430a      	orrs	r2, r1
 8005b3e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	0c1b      	lsrs	r3, r3, #16
 8005b46:	f003 0104 	and.w	r1, r3, #4
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b4e:	f003 0210 	and.w	r2, r3, #16
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	430a      	orrs	r2, r1
 8005b58:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	69da      	ldr	r2, [r3, #28]
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b68:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005b78:	2300      	movs	r3, #0
}
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	3708      	adds	r7, #8
 8005b7e:	46bd      	mov	sp, r7
 8005b80:	bd80      	pop	{r7, pc}

08005b82 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b082      	sub	sp, #8
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d101      	bne.n	8005b94 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e041      	b.n	8005c18 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d106      	bne.n	8005bae <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ba8:	6878      	ldr	r0, [r7, #4]
 8005baa:	f7fb facb 	bl	8001144 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2202      	movs	r2, #2
 8005bb2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681a      	ldr	r2, [r3, #0]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	3304      	adds	r3, #4
 8005bbe:	4619      	mov	r1, r3
 8005bc0:	4610      	mov	r0, r2
 8005bc2:	f000 fa7d 	bl	80060c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2201      	movs	r2, #1
 8005bca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	2201      	movs	r2, #1
 8005bd2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2201      	movs	r2, #1
 8005bda:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2201      	movs	r2, #1
 8005be2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2201      	movs	r2, #1
 8005bea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2201      	movs	r2, #1
 8005c02:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b085      	sub	sp, #20
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d001      	beq.n	8005c38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005c34:	2301      	movs	r3, #1
 8005c36:	e04e      	b.n	8005cd6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2202      	movs	r2, #2
 8005c3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	68da      	ldr	r2, [r3, #12]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	f042 0201 	orr.w	r2, r2, #1
 8005c4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	4a23      	ldr	r2, [pc, #140]	@ (8005ce4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005c56:	4293      	cmp	r3, r2
 8005c58:	d022      	beq.n	8005ca0 <HAL_TIM_Base_Start_IT+0x80>
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c62:	d01d      	beq.n	8005ca0 <HAL_TIM_Base_Start_IT+0x80>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	4a1f      	ldr	r2, [pc, #124]	@ (8005ce8 <HAL_TIM_Base_Start_IT+0xc8>)
 8005c6a:	4293      	cmp	r3, r2
 8005c6c:	d018      	beq.n	8005ca0 <HAL_TIM_Base_Start_IT+0x80>
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	4a1e      	ldr	r2, [pc, #120]	@ (8005cec <HAL_TIM_Base_Start_IT+0xcc>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d013      	beq.n	8005ca0 <HAL_TIM_Base_Start_IT+0x80>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a1c      	ldr	r2, [pc, #112]	@ (8005cf0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005c7e:	4293      	cmp	r3, r2
 8005c80:	d00e      	beq.n	8005ca0 <HAL_TIM_Base_Start_IT+0x80>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	4a1b      	ldr	r2, [pc, #108]	@ (8005cf4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005c88:	4293      	cmp	r3, r2
 8005c8a:	d009      	beq.n	8005ca0 <HAL_TIM_Base_Start_IT+0x80>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4a19      	ldr	r2, [pc, #100]	@ (8005cf8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d004      	beq.n	8005ca0 <HAL_TIM_Base_Start_IT+0x80>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4a18      	ldr	r2, [pc, #96]	@ (8005cfc <HAL_TIM_Base_Start_IT+0xdc>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d111      	bne.n	8005cc4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	f003 0307 	and.w	r3, r3, #7
 8005caa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	2b06      	cmp	r3, #6
 8005cb0:	d010      	beq.n	8005cd4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	681a      	ldr	r2, [r3, #0]
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f042 0201 	orr.w	r2, r2, #1
 8005cc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cc2:	e007      	b.n	8005cd4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f042 0201 	orr.w	r2, r2, #1
 8005cd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3714      	adds	r7, #20
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce0:	4770      	bx	lr
 8005ce2:	bf00      	nop
 8005ce4:	40010000 	.word	0x40010000
 8005ce8:	40000400 	.word	0x40000400
 8005cec:	40000800 	.word	0x40000800
 8005cf0:	40000c00 	.word	0x40000c00
 8005cf4:	40010400 	.word	0x40010400
 8005cf8:	40014000 	.word	0x40014000
 8005cfc:	40001800 	.word	0x40001800

08005d00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b084      	sub	sp, #16
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	691b      	ldr	r3, [r3, #16]
 8005d16:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	f003 0302 	and.w	r3, r3, #2
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d020      	beq.n	8005d64 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	f003 0302 	and.w	r3, r3, #2
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d01b      	beq.n	8005d64 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f06f 0202 	mvn.w	r2, #2
 8005d34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	2201      	movs	r2, #1
 8005d3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	699b      	ldr	r3, [r3, #24]
 8005d42:	f003 0303 	and.w	r3, r3, #3
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d003      	beq.n	8005d52 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f000 f999 	bl	8006082 <HAL_TIM_IC_CaptureCallback>
 8005d50:	e005      	b.n	8005d5e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f000 f98b 	bl	800606e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d58:	6878      	ldr	r0, [r7, #4]
 8005d5a:	f000 f99c 	bl	8006096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2200      	movs	r2, #0
 8005d62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	f003 0304 	and.w	r3, r3, #4
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d020      	beq.n	8005db0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f003 0304 	and.w	r3, r3, #4
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d01b      	beq.n	8005db0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	f06f 0204 	mvn.w	r2, #4
 8005d80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2202      	movs	r2, #2
 8005d86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	699b      	ldr	r3, [r3, #24]
 8005d8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005d92:	2b00      	cmp	r3, #0
 8005d94:	d003      	beq.n	8005d9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005d96:	6878      	ldr	r0, [r7, #4]
 8005d98:	f000 f973 	bl	8006082 <HAL_TIM_IC_CaptureCallback>
 8005d9c:	e005      	b.n	8005daa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	f000 f965 	bl	800606e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f000 f976 	bl	8006096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	f003 0308 	and.w	r3, r3, #8
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d020      	beq.n	8005dfc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f003 0308 	and.w	r3, r3, #8
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d01b      	beq.n	8005dfc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f06f 0208 	mvn.w	r2, #8
 8005dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2204      	movs	r2, #4
 8005dd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	69db      	ldr	r3, [r3, #28]
 8005dda:	f003 0303 	and.w	r3, r3, #3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 f94d 	bl	8006082 <HAL_TIM_IC_CaptureCallback>
 8005de8:	e005      	b.n	8005df6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f000 f93f 	bl	800606e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 f950 	bl	8006096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	f003 0310 	and.w	r3, r3, #16
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d020      	beq.n	8005e48 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f003 0310 	and.w	r3, r3, #16
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d01b      	beq.n	8005e48 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	f06f 0210 	mvn.w	r2, #16
 8005e18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	2208      	movs	r2, #8
 8005e1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	69db      	ldr	r3, [r3, #28]
 8005e26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d003      	beq.n	8005e36 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 f927 	bl	8006082 <HAL_TIM_IC_CaptureCallback>
 8005e34:	e005      	b.n	8005e42 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f000 f919 	bl	800606e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 f92a 	bl	8006096 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005e48:	68bb      	ldr	r3, [r7, #8]
 8005e4a:	f003 0301 	and.w	r3, r3, #1
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00c      	beq.n	8005e6c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d007      	beq.n	8005e6c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f06f 0201 	mvn.w	r2, #1
 8005e64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f7fa ff00 	bl	8000c6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005e6c:	68bb      	ldr	r3, [r7, #8]
 8005e6e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00c      	beq.n	8005e90 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d007      	beq.n	8005e90 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005e8a:	6878      	ldr	r0, [r7, #4]
 8005e8c:	f000 fae4 	bl	8006458 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d00c      	beq.n	8005eb4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d007      	beq.n	8005eb4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005eac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 f8fb 	bl	80060aa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f003 0320 	and.w	r3, r3, #32
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00c      	beq.n	8005ed8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f003 0320 	and.w	r3, r3, #32
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d007      	beq.n	8005ed8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f06f 0220 	mvn.w	r2, #32
 8005ed0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005ed2:	6878      	ldr	r0, [r7, #4]
 8005ed4:	f000 fab6 	bl	8006444 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005ed8:	bf00      	nop
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}

08005ee0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	b084      	sub	sp, #16
 8005ee4:	af00      	add	r7, sp, #0
 8005ee6:	6078      	str	r0, [r7, #4]
 8005ee8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005eea:	2300      	movs	r3, #0
 8005eec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d101      	bne.n	8005efc <HAL_TIM_ConfigClockSource+0x1c>
 8005ef8:	2302      	movs	r3, #2
 8005efa:	e0b4      	b.n	8006066 <HAL_TIM_ConfigClockSource+0x186>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2202      	movs	r2, #2
 8005f08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	689b      	ldr	r3, [r3, #8]
 8005f12:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005f14:	68bb      	ldr	r3, [r7, #8]
 8005f16:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005f1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005f22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	68ba      	ldr	r2, [r7, #8]
 8005f2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f34:	d03e      	beq.n	8005fb4 <HAL_TIM_ConfigClockSource+0xd4>
 8005f36:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005f3a:	f200 8087 	bhi.w	800604c <HAL_TIM_ConfigClockSource+0x16c>
 8005f3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f42:	f000 8086 	beq.w	8006052 <HAL_TIM_ConfigClockSource+0x172>
 8005f46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005f4a:	d87f      	bhi.n	800604c <HAL_TIM_ConfigClockSource+0x16c>
 8005f4c:	2b70      	cmp	r3, #112	@ 0x70
 8005f4e:	d01a      	beq.n	8005f86 <HAL_TIM_ConfigClockSource+0xa6>
 8005f50:	2b70      	cmp	r3, #112	@ 0x70
 8005f52:	d87b      	bhi.n	800604c <HAL_TIM_ConfigClockSource+0x16c>
 8005f54:	2b60      	cmp	r3, #96	@ 0x60
 8005f56:	d050      	beq.n	8005ffa <HAL_TIM_ConfigClockSource+0x11a>
 8005f58:	2b60      	cmp	r3, #96	@ 0x60
 8005f5a:	d877      	bhi.n	800604c <HAL_TIM_ConfigClockSource+0x16c>
 8005f5c:	2b50      	cmp	r3, #80	@ 0x50
 8005f5e:	d03c      	beq.n	8005fda <HAL_TIM_ConfigClockSource+0xfa>
 8005f60:	2b50      	cmp	r3, #80	@ 0x50
 8005f62:	d873      	bhi.n	800604c <HAL_TIM_ConfigClockSource+0x16c>
 8005f64:	2b40      	cmp	r3, #64	@ 0x40
 8005f66:	d058      	beq.n	800601a <HAL_TIM_ConfigClockSource+0x13a>
 8005f68:	2b40      	cmp	r3, #64	@ 0x40
 8005f6a:	d86f      	bhi.n	800604c <HAL_TIM_ConfigClockSource+0x16c>
 8005f6c:	2b30      	cmp	r3, #48	@ 0x30
 8005f6e:	d064      	beq.n	800603a <HAL_TIM_ConfigClockSource+0x15a>
 8005f70:	2b30      	cmp	r3, #48	@ 0x30
 8005f72:	d86b      	bhi.n	800604c <HAL_TIM_ConfigClockSource+0x16c>
 8005f74:	2b20      	cmp	r3, #32
 8005f76:	d060      	beq.n	800603a <HAL_TIM_ConfigClockSource+0x15a>
 8005f78:	2b20      	cmp	r3, #32
 8005f7a:	d867      	bhi.n	800604c <HAL_TIM_ConfigClockSource+0x16c>
 8005f7c:	2b00      	cmp	r3, #0
 8005f7e:	d05c      	beq.n	800603a <HAL_TIM_ConfigClockSource+0x15a>
 8005f80:	2b10      	cmp	r3, #16
 8005f82:	d05a      	beq.n	800603a <HAL_TIM_ConfigClockSource+0x15a>
 8005f84:	e062      	b.n	800604c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005f8e:	683b      	ldr	r3, [r7, #0]
 8005f90:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005f96:	f000 f9b9 	bl	800630c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	689b      	ldr	r3, [r3, #8]
 8005fa0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005fa8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	68ba      	ldr	r2, [r7, #8]
 8005fb0:	609a      	str	r2, [r3, #8]
      break;
 8005fb2:	e04f      	b.n	8006054 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005fc4:	f000 f9a2 	bl	800630c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	689a      	ldr	r2, [r3, #8]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005fd6:	609a      	str	r2, [r3, #8]
      break;
 8005fd8:	e03c      	b.n	8006054 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005fde:	683b      	ldr	r3, [r7, #0]
 8005fe0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005fe6:	461a      	mov	r2, r3
 8005fe8:	f000 f916 	bl	8006218 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	2150      	movs	r1, #80	@ 0x50
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	f000 f96f 	bl	80062d6 <TIM_ITRx_SetConfig>
      break;
 8005ff8:	e02c      	b.n	8006054 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006002:	683b      	ldr	r3, [r7, #0]
 8006004:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006006:	461a      	mov	r2, r3
 8006008:	f000 f935 	bl	8006276 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	2160      	movs	r1, #96	@ 0x60
 8006012:	4618      	mov	r0, r3
 8006014:	f000 f95f 	bl	80062d6 <TIM_ITRx_SetConfig>
      break;
 8006018:	e01c      	b.n	8006054 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800601e:	683b      	ldr	r3, [r7, #0]
 8006020:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006026:	461a      	mov	r2, r3
 8006028:	f000 f8f6 	bl	8006218 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	2140      	movs	r1, #64	@ 0x40
 8006032:	4618      	mov	r0, r3
 8006034:	f000 f94f 	bl	80062d6 <TIM_ITRx_SetConfig>
      break;
 8006038:	e00c      	b.n	8006054 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4619      	mov	r1, r3
 8006044:	4610      	mov	r0, r2
 8006046:	f000 f946 	bl	80062d6 <TIM_ITRx_SetConfig>
      break;
 800604a:	e003      	b.n	8006054 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800604c:	2301      	movs	r3, #1
 800604e:	73fb      	strb	r3, [r7, #15]
      break;
 8006050:	e000      	b.n	8006054 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006052:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2201      	movs	r2, #1
 8006058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006064:	7bfb      	ldrb	r3, [r7, #15]
}
 8006066:	4618      	mov	r0, r3
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800606e:	b480      	push	{r7}
 8006070:	b083      	sub	sp, #12
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006076:	bf00      	nop
 8006078:	370c      	adds	r7, #12
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr

08006082 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006082:	b480      	push	{r7}
 8006084:	b083      	sub	sp, #12
 8006086:	af00      	add	r7, sp, #0
 8006088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800608a:	bf00      	nop
 800608c:	370c      	adds	r7, #12
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr

08006096 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006096:	b480      	push	{r7}
 8006098:	b083      	sub	sp, #12
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800609e:	bf00      	nop
 80060a0:	370c      	adds	r7, #12
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr

080060aa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80060aa:	b480      	push	{r7}
 80060ac:	b083      	sub	sp, #12
 80060ae:	af00      	add	r7, sp, #0
 80060b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80060b2:	bf00      	nop
 80060b4:	370c      	adds	r7, #12
 80060b6:	46bd      	mov	sp, r7
 80060b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060bc:	4770      	bx	lr
	...

080060c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b085      	sub	sp, #20
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
 80060c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	4a46      	ldr	r2, [pc, #280]	@ (80061ec <TIM_Base_SetConfig+0x12c>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d013      	beq.n	8006100 <TIM_Base_SetConfig+0x40>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060de:	d00f      	beq.n	8006100 <TIM_Base_SetConfig+0x40>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	4a43      	ldr	r2, [pc, #268]	@ (80061f0 <TIM_Base_SetConfig+0x130>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d00b      	beq.n	8006100 <TIM_Base_SetConfig+0x40>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a42      	ldr	r2, [pc, #264]	@ (80061f4 <TIM_Base_SetConfig+0x134>)
 80060ec:	4293      	cmp	r3, r2
 80060ee:	d007      	beq.n	8006100 <TIM_Base_SetConfig+0x40>
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4a41      	ldr	r2, [pc, #260]	@ (80061f8 <TIM_Base_SetConfig+0x138>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d003      	beq.n	8006100 <TIM_Base_SetConfig+0x40>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a40      	ldr	r2, [pc, #256]	@ (80061fc <TIM_Base_SetConfig+0x13c>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d108      	bne.n	8006112 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	685b      	ldr	r3, [r3, #4]
 800610c:	68fa      	ldr	r2, [r7, #12]
 800610e:	4313      	orrs	r3, r2
 8006110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a35      	ldr	r2, [pc, #212]	@ (80061ec <TIM_Base_SetConfig+0x12c>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d02b      	beq.n	8006172 <TIM_Base_SetConfig+0xb2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006120:	d027      	beq.n	8006172 <TIM_Base_SetConfig+0xb2>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a32      	ldr	r2, [pc, #200]	@ (80061f0 <TIM_Base_SetConfig+0x130>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d023      	beq.n	8006172 <TIM_Base_SetConfig+0xb2>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a31      	ldr	r2, [pc, #196]	@ (80061f4 <TIM_Base_SetConfig+0x134>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d01f      	beq.n	8006172 <TIM_Base_SetConfig+0xb2>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a30      	ldr	r2, [pc, #192]	@ (80061f8 <TIM_Base_SetConfig+0x138>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d01b      	beq.n	8006172 <TIM_Base_SetConfig+0xb2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a2f      	ldr	r2, [pc, #188]	@ (80061fc <TIM_Base_SetConfig+0x13c>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d017      	beq.n	8006172 <TIM_Base_SetConfig+0xb2>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a2e      	ldr	r2, [pc, #184]	@ (8006200 <TIM_Base_SetConfig+0x140>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d013      	beq.n	8006172 <TIM_Base_SetConfig+0xb2>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a2d      	ldr	r2, [pc, #180]	@ (8006204 <TIM_Base_SetConfig+0x144>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d00f      	beq.n	8006172 <TIM_Base_SetConfig+0xb2>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a2c      	ldr	r2, [pc, #176]	@ (8006208 <TIM_Base_SetConfig+0x148>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d00b      	beq.n	8006172 <TIM_Base_SetConfig+0xb2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a2b      	ldr	r2, [pc, #172]	@ (800620c <TIM_Base_SetConfig+0x14c>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d007      	beq.n	8006172 <TIM_Base_SetConfig+0xb2>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a2a      	ldr	r2, [pc, #168]	@ (8006210 <TIM_Base_SetConfig+0x150>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d003      	beq.n	8006172 <TIM_Base_SetConfig+0xb2>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a29      	ldr	r2, [pc, #164]	@ (8006214 <TIM_Base_SetConfig+0x154>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d108      	bne.n	8006184 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006178:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800617a:	683b      	ldr	r3, [r7, #0]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	4313      	orrs	r3, r2
 8006182:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	695b      	ldr	r3, [r3, #20]
 800618e:	4313      	orrs	r3, r2
 8006190:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	68fa      	ldr	r2, [r7, #12]
 8006196:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	689a      	ldr	r2, [r3, #8]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80061a0:	683b      	ldr	r3, [r7, #0]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	4a10      	ldr	r2, [pc, #64]	@ (80061ec <TIM_Base_SetConfig+0x12c>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d003      	beq.n	80061b8 <TIM_Base_SetConfig+0xf8>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	4a12      	ldr	r2, [pc, #72]	@ (80061fc <TIM_Base_SetConfig+0x13c>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d103      	bne.n	80061c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80061b8:	683b      	ldr	r3, [r7, #0]
 80061ba:	691a      	ldr	r2, [r3, #16]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	691b      	ldr	r3, [r3, #16]
 80061ca:	f003 0301 	and.w	r3, r3, #1
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d105      	bne.n	80061de <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	f023 0201 	bic.w	r2, r3, #1
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	611a      	str	r2, [r3, #16]
  }
}
 80061de:	bf00      	nop
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr
 80061ea:	bf00      	nop
 80061ec:	40010000 	.word	0x40010000
 80061f0:	40000400 	.word	0x40000400
 80061f4:	40000800 	.word	0x40000800
 80061f8:	40000c00 	.word	0x40000c00
 80061fc:	40010400 	.word	0x40010400
 8006200:	40014000 	.word	0x40014000
 8006204:	40014400 	.word	0x40014400
 8006208:	40014800 	.word	0x40014800
 800620c:	40001800 	.word	0x40001800
 8006210:	40001c00 	.word	0x40001c00
 8006214:	40002000 	.word	0x40002000

08006218 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006218:	b480      	push	{r7}
 800621a:	b087      	sub	sp, #28
 800621c:	af00      	add	r7, sp, #0
 800621e:	60f8      	str	r0, [r7, #12]
 8006220:	60b9      	str	r1, [r7, #8]
 8006222:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	6a1b      	ldr	r3, [r3, #32]
 8006228:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	6a1b      	ldr	r3, [r3, #32]
 800622e:	f023 0201 	bic.w	r2, r3, #1
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	699b      	ldr	r3, [r3, #24]
 800623a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800623c:	693b      	ldr	r3, [r7, #16]
 800623e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006242:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	011b      	lsls	r3, r3, #4
 8006248:	693a      	ldr	r2, [r7, #16]
 800624a:	4313      	orrs	r3, r2
 800624c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	f023 030a 	bic.w	r3, r3, #10
 8006254:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006256:	697a      	ldr	r2, [r7, #20]
 8006258:	68bb      	ldr	r3, [r7, #8]
 800625a:	4313      	orrs	r3, r2
 800625c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	697a      	ldr	r2, [r7, #20]
 8006268:	621a      	str	r2, [r3, #32]
}
 800626a:	bf00      	nop
 800626c:	371c      	adds	r7, #28
 800626e:	46bd      	mov	sp, r7
 8006270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006274:	4770      	bx	lr

08006276 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006276:	b480      	push	{r7}
 8006278:	b087      	sub	sp, #28
 800627a:	af00      	add	r7, sp, #0
 800627c:	60f8      	str	r0, [r7, #12]
 800627e:	60b9      	str	r1, [r7, #8]
 8006280:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	6a1b      	ldr	r3, [r3, #32]
 8006286:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	6a1b      	ldr	r3, [r3, #32]
 800628c:	f023 0210 	bic.w	r2, r3, #16
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	699b      	ldr	r3, [r3, #24]
 8006298:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800629a:	693b      	ldr	r3, [r7, #16]
 800629c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80062a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	031b      	lsls	r3, r3, #12
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062ac:	697b      	ldr	r3, [r7, #20]
 80062ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80062b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062b4:	68bb      	ldr	r3, [r7, #8]
 80062b6:	011b      	lsls	r3, r3, #4
 80062b8:	697a      	ldr	r2, [r7, #20]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	693a      	ldr	r2, [r7, #16]
 80062c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	697a      	ldr	r2, [r7, #20]
 80062c8:	621a      	str	r2, [r3, #32]
}
 80062ca:	bf00      	nop
 80062cc:	371c      	adds	r7, #28
 80062ce:	46bd      	mov	sp, r7
 80062d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d4:	4770      	bx	lr

080062d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b085      	sub	sp, #20
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
 80062de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	689b      	ldr	r3, [r3, #8]
 80062e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80062ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80062ee:	683a      	ldr	r2, [r7, #0]
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	4313      	orrs	r3, r2
 80062f4:	f043 0307 	orr.w	r3, r3, #7
 80062f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	68fa      	ldr	r2, [r7, #12]
 80062fe:	609a      	str	r2, [r3, #8]
}
 8006300:	bf00      	nop
 8006302:	3714      	adds	r7, #20
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800630c:	b480      	push	{r7}
 800630e:	b087      	sub	sp, #28
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
 8006318:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	689b      	ldr	r3, [r3, #8]
 800631e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006326:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	021a      	lsls	r2, r3, #8
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	431a      	orrs	r2, r3
 8006330:	68bb      	ldr	r3, [r7, #8]
 8006332:	4313      	orrs	r3, r2
 8006334:	697a      	ldr	r2, [r7, #20]
 8006336:	4313      	orrs	r3, r2
 8006338:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	697a      	ldr	r2, [r7, #20]
 800633e:	609a      	str	r2, [r3, #8]
}
 8006340:	bf00      	nop
 8006342:	371c      	adds	r7, #28
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
 8006354:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800635c:	2b01      	cmp	r3, #1
 800635e:	d101      	bne.n	8006364 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006360:	2302      	movs	r3, #2
 8006362:	e05a      	b.n	800641a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2202      	movs	r2, #2
 8006370:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	685b      	ldr	r3, [r3, #4]
 800637a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	689b      	ldr	r3, [r3, #8]
 8006382:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800638a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	68fa      	ldr	r2, [r7, #12]
 8006392:	4313      	orrs	r3, r2
 8006394:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	68fa      	ldr	r2, [r7, #12]
 800639c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	4a21      	ldr	r2, [pc, #132]	@ (8006428 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80063a4:	4293      	cmp	r3, r2
 80063a6:	d022      	beq.n	80063ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063b0:	d01d      	beq.n	80063ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a1d      	ldr	r2, [pc, #116]	@ (800642c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80063b8:	4293      	cmp	r3, r2
 80063ba:	d018      	beq.n	80063ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4a1b      	ldr	r2, [pc, #108]	@ (8006430 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d013      	beq.n	80063ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a1a      	ldr	r2, [pc, #104]	@ (8006434 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d00e      	beq.n	80063ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	4a18      	ldr	r2, [pc, #96]	@ (8006438 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d009      	beq.n	80063ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	4a17      	ldr	r2, [pc, #92]	@ (800643c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80063e0:	4293      	cmp	r3, r2
 80063e2:	d004      	beq.n	80063ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	4a15      	ldr	r2, [pc, #84]	@ (8006440 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d10c      	bne.n	8006408 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80063f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	68ba      	ldr	r2, [r7, #8]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	68ba      	ldr	r2, [r7, #8]
 8006406:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2200      	movs	r2, #0
 8006414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006418:	2300      	movs	r3, #0
}
 800641a:	4618      	mov	r0, r3
 800641c:	3714      	adds	r7, #20
 800641e:	46bd      	mov	sp, r7
 8006420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006424:	4770      	bx	lr
 8006426:	bf00      	nop
 8006428:	40010000 	.word	0x40010000
 800642c:	40000400 	.word	0x40000400
 8006430:	40000800 	.word	0x40000800
 8006434:	40000c00 	.word	0x40000c00
 8006438:	40010400 	.word	0x40010400
 800643c:	40014000 	.word	0x40014000
 8006440:	40001800 	.word	0x40001800

08006444 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006458:	b480      	push	{r7}
 800645a:	b083      	sub	sp, #12
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006460:	bf00      	nop
 8006462:	370c      	adds	r7, #12
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b082      	sub	sp, #8
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d101      	bne.n	800647e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800647a:	2301      	movs	r3, #1
 800647c:	e042      	b.n	8006504 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006484:	b2db      	uxtb	r3, r3
 8006486:	2b00      	cmp	r3, #0
 8006488:	d106      	bne.n	8006498 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f7fa fe78 	bl	8001188 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2224      	movs	r2, #36	@ 0x24
 800649c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	68da      	ldr	r2, [r3, #12]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80064ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 f82b 	bl	800650c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	691a      	ldr	r2, [r3, #16]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80064c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	695a      	ldr	r2, [r3, #20]
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80064d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	68da      	ldr	r2, [r3, #12]
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80064e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2200      	movs	r2, #0
 80064ea:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2220      	movs	r2, #32
 80064f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	2220      	movs	r2, #32
 80064f8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	2200      	movs	r2, #0
 8006500:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006502:	2300      	movs	r3, #0
}
 8006504:	4618      	mov	r0, r3
 8006506:	3708      	adds	r7, #8
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800650c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006510:	b0c0      	sub	sp, #256	@ 0x100
 8006512:	af00      	add	r7, sp, #0
 8006514:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	691b      	ldr	r3, [r3, #16]
 8006520:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006524:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006528:	68d9      	ldr	r1, [r3, #12]
 800652a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	ea40 0301 	orr.w	r3, r0, r1
 8006534:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006536:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800653a:	689a      	ldr	r2, [r3, #8]
 800653c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006540:	691b      	ldr	r3, [r3, #16]
 8006542:	431a      	orrs	r2, r3
 8006544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006548:	695b      	ldr	r3, [r3, #20]
 800654a:	431a      	orrs	r2, r3
 800654c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006550:	69db      	ldr	r3, [r3, #28]
 8006552:	4313      	orrs	r3, r2
 8006554:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	68db      	ldr	r3, [r3, #12]
 8006560:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006564:	f021 010c 	bic.w	r1, r1, #12
 8006568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800656c:	681a      	ldr	r2, [r3, #0]
 800656e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006572:	430b      	orrs	r3, r1
 8006574:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006586:	6999      	ldr	r1, [r3, #24]
 8006588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800658c:	681a      	ldr	r2, [r3, #0]
 800658e:	ea40 0301 	orr.w	r3, r0, r1
 8006592:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	4b8f      	ldr	r3, [pc, #572]	@ (80067d8 <UART_SetConfig+0x2cc>)
 800659c:	429a      	cmp	r2, r3
 800659e:	d005      	beq.n	80065ac <UART_SetConfig+0xa0>
 80065a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	4b8d      	ldr	r3, [pc, #564]	@ (80067dc <UART_SetConfig+0x2d0>)
 80065a8:	429a      	cmp	r2, r3
 80065aa:	d104      	bne.n	80065b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065ac:	f7ff f826 	bl	80055fc <HAL_RCC_GetPCLK2Freq>
 80065b0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80065b4:	e003      	b.n	80065be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065b6:	f7ff f80d 	bl	80055d4 <HAL_RCC_GetPCLK1Freq>
 80065ba:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065c2:	69db      	ldr	r3, [r3, #28]
 80065c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065c8:	f040 810c 	bne.w	80067e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065d0:	2200      	movs	r2, #0
 80065d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80065d6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80065da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80065de:	4622      	mov	r2, r4
 80065e0:	462b      	mov	r3, r5
 80065e2:	1891      	adds	r1, r2, r2
 80065e4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80065e6:	415b      	adcs	r3, r3
 80065e8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80065ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80065ee:	4621      	mov	r1, r4
 80065f0:	eb12 0801 	adds.w	r8, r2, r1
 80065f4:	4629      	mov	r1, r5
 80065f6:	eb43 0901 	adc.w	r9, r3, r1
 80065fa:	f04f 0200 	mov.w	r2, #0
 80065fe:	f04f 0300 	mov.w	r3, #0
 8006602:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006606:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800660a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800660e:	4690      	mov	r8, r2
 8006610:	4699      	mov	r9, r3
 8006612:	4623      	mov	r3, r4
 8006614:	eb18 0303 	adds.w	r3, r8, r3
 8006618:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800661c:	462b      	mov	r3, r5
 800661e:	eb49 0303 	adc.w	r3, r9, r3
 8006622:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006632:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006636:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800663a:	460b      	mov	r3, r1
 800663c:	18db      	adds	r3, r3, r3
 800663e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006640:	4613      	mov	r3, r2
 8006642:	eb42 0303 	adc.w	r3, r2, r3
 8006646:	657b      	str	r3, [r7, #84]	@ 0x54
 8006648:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800664c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006650:	f7f9 fdcc 	bl	80001ec <__aeabi_uldivmod>
 8006654:	4602      	mov	r2, r0
 8006656:	460b      	mov	r3, r1
 8006658:	4b61      	ldr	r3, [pc, #388]	@ (80067e0 <UART_SetConfig+0x2d4>)
 800665a:	fba3 2302 	umull	r2, r3, r3, r2
 800665e:	095b      	lsrs	r3, r3, #5
 8006660:	011c      	lsls	r4, r3, #4
 8006662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006666:	2200      	movs	r2, #0
 8006668:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800666c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006670:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006674:	4642      	mov	r2, r8
 8006676:	464b      	mov	r3, r9
 8006678:	1891      	adds	r1, r2, r2
 800667a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800667c:	415b      	adcs	r3, r3
 800667e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006680:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006684:	4641      	mov	r1, r8
 8006686:	eb12 0a01 	adds.w	sl, r2, r1
 800668a:	4649      	mov	r1, r9
 800668c:	eb43 0b01 	adc.w	fp, r3, r1
 8006690:	f04f 0200 	mov.w	r2, #0
 8006694:	f04f 0300 	mov.w	r3, #0
 8006698:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800669c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80066a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066a4:	4692      	mov	sl, r2
 80066a6:	469b      	mov	fp, r3
 80066a8:	4643      	mov	r3, r8
 80066aa:	eb1a 0303 	adds.w	r3, sl, r3
 80066ae:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066b2:	464b      	mov	r3, r9
 80066b4:	eb4b 0303 	adc.w	r3, fp, r3
 80066b8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80066bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066c8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80066cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80066d0:	460b      	mov	r3, r1
 80066d2:	18db      	adds	r3, r3, r3
 80066d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80066d6:	4613      	mov	r3, r2
 80066d8:	eb42 0303 	adc.w	r3, r2, r3
 80066dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80066de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80066e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80066e6:	f7f9 fd81 	bl	80001ec <__aeabi_uldivmod>
 80066ea:	4602      	mov	r2, r0
 80066ec:	460b      	mov	r3, r1
 80066ee:	4611      	mov	r1, r2
 80066f0:	4b3b      	ldr	r3, [pc, #236]	@ (80067e0 <UART_SetConfig+0x2d4>)
 80066f2:	fba3 2301 	umull	r2, r3, r3, r1
 80066f6:	095b      	lsrs	r3, r3, #5
 80066f8:	2264      	movs	r2, #100	@ 0x64
 80066fa:	fb02 f303 	mul.w	r3, r2, r3
 80066fe:	1acb      	subs	r3, r1, r3
 8006700:	00db      	lsls	r3, r3, #3
 8006702:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006706:	4b36      	ldr	r3, [pc, #216]	@ (80067e0 <UART_SetConfig+0x2d4>)
 8006708:	fba3 2302 	umull	r2, r3, r3, r2
 800670c:	095b      	lsrs	r3, r3, #5
 800670e:	005b      	lsls	r3, r3, #1
 8006710:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006714:	441c      	add	r4, r3
 8006716:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800671a:	2200      	movs	r2, #0
 800671c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006720:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006724:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006728:	4642      	mov	r2, r8
 800672a:	464b      	mov	r3, r9
 800672c:	1891      	adds	r1, r2, r2
 800672e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006730:	415b      	adcs	r3, r3
 8006732:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006734:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006738:	4641      	mov	r1, r8
 800673a:	1851      	adds	r1, r2, r1
 800673c:	6339      	str	r1, [r7, #48]	@ 0x30
 800673e:	4649      	mov	r1, r9
 8006740:	414b      	adcs	r3, r1
 8006742:	637b      	str	r3, [r7, #52]	@ 0x34
 8006744:	f04f 0200 	mov.w	r2, #0
 8006748:	f04f 0300 	mov.w	r3, #0
 800674c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006750:	4659      	mov	r1, fp
 8006752:	00cb      	lsls	r3, r1, #3
 8006754:	4651      	mov	r1, sl
 8006756:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800675a:	4651      	mov	r1, sl
 800675c:	00ca      	lsls	r2, r1, #3
 800675e:	4610      	mov	r0, r2
 8006760:	4619      	mov	r1, r3
 8006762:	4603      	mov	r3, r0
 8006764:	4642      	mov	r2, r8
 8006766:	189b      	adds	r3, r3, r2
 8006768:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800676c:	464b      	mov	r3, r9
 800676e:	460a      	mov	r2, r1
 8006770:	eb42 0303 	adc.w	r3, r2, r3
 8006774:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006778:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	2200      	movs	r2, #0
 8006780:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006784:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006788:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800678c:	460b      	mov	r3, r1
 800678e:	18db      	adds	r3, r3, r3
 8006790:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006792:	4613      	mov	r3, r2
 8006794:	eb42 0303 	adc.w	r3, r2, r3
 8006798:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800679a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800679e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80067a2:	f7f9 fd23 	bl	80001ec <__aeabi_uldivmod>
 80067a6:	4602      	mov	r2, r0
 80067a8:	460b      	mov	r3, r1
 80067aa:	4b0d      	ldr	r3, [pc, #52]	@ (80067e0 <UART_SetConfig+0x2d4>)
 80067ac:	fba3 1302 	umull	r1, r3, r3, r2
 80067b0:	095b      	lsrs	r3, r3, #5
 80067b2:	2164      	movs	r1, #100	@ 0x64
 80067b4:	fb01 f303 	mul.w	r3, r1, r3
 80067b8:	1ad3      	subs	r3, r2, r3
 80067ba:	00db      	lsls	r3, r3, #3
 80067bc:	3332      	adds	r3, #50	@ 0x32
 80067be:	4a08      	ldr	r2, [pc, #32]	@ (80067e0 <UART_SetConfig+0x2d4>)
 80067c0:	fba2 2303 	umull	r2, r3, r2, r3
 80067c4:	095b      	lsrs	r3, r3, #5
 80067c6:	f003 0207 	and.w	r2, r3, #7
 80067ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4422      	add	r2, r4
 80067d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80067d4:	e106      	b.n	80069e4 <UART_SetConfig+0x4d8>
 80067d6:	bf00      	nop
 80067d8:	40011000 	.word	0x40011000
 80067dc:	40011400 	.word	0x40011400
 80067e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80067e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80067e8:	2200      	movs	r2, #0
 80067ea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80067ee:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80067f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80067f6:	4642      	mov	r2, r8
 80067f8:	464b      	mov	r3, r9
 80067fa:	1891      	adds	r1, r2, r2
 80067fc:	6239      	str	r1, [r7, #32]
 80067fe:	415b      	adcs	r3, r3
 8006800:	627b      	str	r3, [r7, #36]	@ 0x24
 8006802:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006806:	4641      	mov	r1, r8
 8006808:	1854      	adds	r4, r2, r1
 800680a:	4649      	mov	r1, r9
 800680c:	eb43 0501 	adc.w	r5, r3, r1
 8006810:	f04f 0200 	mov.w	r2, #0
 8006814:	f04f 0300 	mov.w	r3, #0
 8006818:	00eb      	lsls	r3, r5, #3
 800681a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800681e:	00e2      	lsls	r2, r4, #3
 8006820:	4614      	mov	r4, r2
 8006822:	461d      	mov	r5, r3
 8006824:	4643      	mov	r3, r8
 8006826:	18e3      	adds	r3, r4, r3
 8006828:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800682c:	464b      	mov	r3, r9
 800682e:	eb45 0303 	adc.w	r3, r5, r3
 8006832:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	2200      	movs	r2, #0
 800683e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006842:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006846:	f04f 0200 	mov.w	r2, #0
 800684a:	f04f 0300 	mov.w	r3, #0
 800684e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006852:	4629      	mov	r1, r5
 8006854:	008b      	lsls	r3, r1, #2
 8006856:	4621      	mov	r1, r4
 8006858:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800685c:	4621      	mov	r1, r4
 800685e:	008a      	lsls	r2, r1, #2
 8006860:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006864:	f7f9 fcc2 	bl	80001ec <__aeabi_uldivmod>
 8006868:	4602      	mov	r2, r0
 800686a:	460b      	mov	r3, r1
 800686c:	4b60      	ldr	r3, [pc, #384]	@ (80069f0 <UART_SetConfig+0x4e4>)
 800686e:	fba3 2302 	umull	r2, r3, r3, r2
 8006872:	095b      	lsrs	r3, r3, #5
 8006874:	011c      	lsls	r4, r3, #4
 8006876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800687a:	2200      	movs	r2, #0
 800687c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006880:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006884:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006888:	4642      	mov	r2, r8
 800688a:	464b      	mov	r3, r9
 800688c:	1891      	adds	r1, r2, r2
 800688e:	61b9      	str	r1, [r7, #24]
 8006890:	415b      	adcs	r3, r3
 8006892:	61fb      	str	r3, [r7, #28]
 8006894:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006898:	4641      	mov	r1, r8
 800689a:	1851      	adds	r1, r2, r1
 800689c:	6139      	str	r1, [r7, #16]
 800689e:	4649      	mov	r1, r9
 80068a0:	414b      	adcs	r3, r1
 80068a2:	617b      	str	r3, [r7, #20]
 80068a4:	f04f 0200 	mov.w	r2, #0
 80068a8:	f04f 0300 	mov.w	r3, #0
 80068ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068b0:	4659      	mov	r1, fp
 80068b2:	00cb      	lsls	r3, r1, #3
 80068b4:	4651      	mov	r1, sl
 80068b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068ba:	4651      	mov	r1, sl
 80068bc:	00ca      	lsls	r2, r1, #3
 80068be:	4610      	mov	r0, r2
 80068c0:	4619      	mov	r1, r3
 80068c2:	4603      	mov	r3, r0
 80068c4:	4642      	mov	r2, r8
 80068c6:	189b      	adds	r3, r3, r2
 80068c8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068cc:	464b      	mov	r3, r9
 80068ce:	460a      	mov	r2, r1
 80068d0:	eb42 0303 	adc.w	r3, r2, r3
 80068d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80068d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068dc:	685b      	ldr	r3, [r3, #4]
 80068de:	2200      	movs	r2, #0
 80068e0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80068e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80068e4:	f04f 0200 	mov.w	r2, #0
 80068e8:	f04f 0300 	mov.w	r3, #0
 80068ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80068f0:	4649      	mov	r1, r9
 80068f2:	008b      	lsls	r3, r1, #2
 80068f4:	4641      	mov	r1, r8
 80068f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80068fa:	4641      	mov	r1, r8
 80068fc:	008a      	lsls	r2, r1, #2
 80068fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006902:	f7f9 fc73 	bl	80001ec <__aeabi_uldivmod>
 8006906:	4602      	mov	r2, r0
 8006908:	460b      	mov	r3, r1
 800690a:	4611      	mov	r1, r2
 800690c:	4b38      	ldr	r3, [pc, #224]	@ (80069f0 <UART_SetConfig+0x4e4>)
 800690e:	fba3 2301 	umull	r2, r3, r3, r1
 8006912:	095b      	lsrs	r3, r3, #5
 8006914:	2264      	movs	r2, #100	@ 0x64
 8006916:	fb02 f303 	mul.w	r3, r2, r3
 800691a:	1acb      	subs	r3, r1, r3
 800691c:	011b      	lsls	r3, r3, #4
 800691e:	3332      	adds	r3, #50	@ 0x32
 8006920:	4a33      	ldr	r2, [pc, #204]	@ (80069f0 <UART_SetConfig+0x4e4>)
 8006922:	fba2 2303 	umull	r2, r3, r2, r3
 8006926:	095b      	lsrs	r3, r3, #5
 8006928:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800692c:	441c      	add	r4, r3
 800692e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006932:	2200      	movs	r2, #0
 8006934:	673b      	str	r3, [r7, #112]	@ 0x70
 8006936:	677a      	str	r2, [r7, #116]	@ 0x74
 8006938:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800693c:	4642      	mov	r2, r8
 800693e:	464b      	mov	r3, r9
 8006940:	1891      	adds	r1, r2, r2
 8006942:	60b9      	str	r1, [r7, #8]
 8006944:	415b      	adcs	r3, r3
 8006946:	60fb      	str	r3, [r7, #12]
 8006948:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800694c:	4641      	mov	r1, r8
 800694e:	1851      	adds	r1, r2, r1
 8006950:	6039      	str	r1, [r7, #0]
 8006952:	4649      	mov	r1, r9
 8006954:	414b      	adcs	r3, r1
 8006956:	607b      	str	r3, [r7, #4]
 8006958:	f04f 0200 	mov.w	r2, #0
 800695c:	f04f 0300 	mov.w	r3, #0
 8006960:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006964:	4659      	mov	r1, fp
 8006966:	00cb      	lsls	r3, r1, #3
 8006968:	4651      	mov	r1, sl
 800696a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800696e:	4651      	mov	r1, sl
 8006970:	00ca      	lsls	r2, r1, #3
 8006972:	4610      	mov	r0, r2
 8006974:	4619      	mov	r1, r3
 8006976:	4603      	mov	r3, r0
 8006978:	4642      	mov	r2, r8
 800697a:	189b      	adds	r3, r3, r2
 800697c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800697e:	464b      	mov	r3, r9
 8006980:	460a      	mov	r2, r1
 8006982:	eb42 0303 	adc.w	r3, r2, r3
 8006986:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	2200      	movs	r2, #0
 8006990:	663b      	str	r3, [r7, #96]	@ 0x60
 8006992:	667a      	str	r2, [r7, #100]	@ 0x64
 8006994:	f04f 0200 	mov.w	r2, #0
 8006998:	f04f 0300 	mov.w	r3, #0
 800699c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80069a0:	4649      	mov	r1, r9
 80069a2:	008b      	lsls	r3, r1, #2
 80069a4:	4641      	mov	r1, r8
 80069a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069aa:	4641      	mov	r1, r8
 80069ac:	008a      	lsls	r2, r1, #2
 80069ae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80069b2:	f7f9 fc1b 	bl	80001ec <__aeabi_uldivmod>
 80069b6:	4602      	mov	r2, r0
 80069b8:	460b      	mov	r3, r1
 80069ba:	4b0d      	ldr	r3, [pc, #52]	@ (80069f0 <UART_SetConfig+0x4e4>)
 80069bc:	fba3 1302 	umull	r1, r3, r3, r2
 80069c0:	095b      	lsrs	r3, r3, #5
 80069c2:	2164      	movs	r1, #100	@ 0x64
 80069c4:	fb01 f303 	mul.w	r3, r1, r3
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	011b      	lsls	r3, r3, #4
 80069cc:	3332      	adds	r3, #50	@ 0x32
 80069ce:	4a08      	ldr	r2, [pc, #32]	@ (80069f0 <UART_SetConfig+0x4e4>)
 80069d0:	fba2 2303 	umull	r2, r3, r2, r3
 80069d4:	095b      	lsrs	r3, r3, #5
 80069d6:	f003 020f 	and.w	r2, r3, #15
 80069da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	4422      	add	r2, r4
 80069e2:	609a      	str	r2, [r3, #8]
}
 80069e4:	bf00      	nop
 80069e6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80069ea:	46bd      	mov	sp, r7
 80069ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80069f0:	51eb851f 	.word	0x51eb851f

080069f4 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 80069f4:	b480      	push	{r7}
 80069f6:	b083      	sub	sp, #12
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d123      	bne.n	8006a4e <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006a0e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006a12:	683a      	ldr	r2, [r7, #0]
 8006a14:	6851      	ldr	r1, [r2, #4]
 8006a16:	683a      	ldr	r2, [r7, #0]
 8006a18:	6892      	ldr	r2, [r2, #8]
 8006a1a:	4311      	orrs	r1, r2
 8006a1c:	683a      	ldr	r2, [r7, #0]
 8006a1e:	68d2      	ldr	r2, [r2, #12]
 8006a20:	4311      	orrs	r1, r2
 8006a22:	683a      	ldr	r2, [r7, #0]
 8006a24:	6912      	ldr	r2, [r2, #16]
 8006a26:	4311      	orrs	r1, r2
 8006a28:	683a      	ldr	r2, [r7, #0]
 8006a2a:	6952      	ldr	r2, [r2, #20]
 8006a2c:	4311      	orrs	r1, r2
 8006a2e:	683a      	ldr	r2, [r7, #0]
 8006a30:	6992      	ldr	r2, [r2, #24]
 8006a32:	4311      	orrs	r1, r2
 8006a34:	683a      	ldr	r2, [r7, #0]
 8006a36:	69d2      	ldr	r2, [r2, #28]
 8006a38:	4311      	orrs	r1, r2
 8006a3a:	683a      	ldr	r2, [r7, #0]
 8006a3c:	6a12      	ldr	r2, [r2, #32]
 8006a3e:	4311      	orrs	r1, r2
 8006a40:	683a      	ldr	r2, [r7, #0]
 8006a42:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006a44:	430a      	orrs	r2, r1
 8006a46:	431a      	orrs	r2, r3
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	601a      	str	r2, [r3, #0]
 8006a4c:	e028      	b.n	8006aa0 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	69d9      	ldr	r1, [r3, #28]
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	4319      	orrs	r1, r3
 8006a60:	683b      	ldr	r3, [r7, #0]
 8006a62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a64:	430b      	orrs	r3, r1
 8006a66:	431a      	orrs	r2, r3
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	685b      	ldr	r3, [r3, #4]
 8006a70:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8006a74:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8006a78:	683a      	ldr	r2, [r7, #0]
 8006a7a:	6851      	ldr	r1, [r2, #4]
 8006a7c:	683a      	ldr	r2, [r7, #0]
 8006a7e:	6892      	ldr	r2, [r2, #8]
 8006a80:	4311      	orrs	r1, r2
 8006a82:	683a      	ldr	r2, [r7, #0]
 8006a84:	68d2      	ldr	r2, [r2, #12]
 8006a86:	4311      	orrs	r1, r2
 8006a88:	683a      	ldr	r2, [r7, #0]
 8006a8a:	6912      	ldr	r2, [r2, #16]
 8006a8c:	4311      	orrs	r1, r2
 8006a8e:	683a      	ldr	r2, [r7, #0]
 8006a90:	6952      	ldr	r2, [r2, #20]
 8006a92:	4311      	orrs	r1, r2
 8006a94:	683a      	ldr	r2, [r7, #0]
 8006a96:	6992      	ldr	r2, [r2, #24]
 8006a98:	430a      	orrs	r2, r1
 8006a9a:	431a      	orrs	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	370c      	adds	r7, #12
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr

08006aae <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006aae:	b480      	push	{r7}
 8006ab0:	b085      	sub	sp, #20
 8006ab2:	af00      	add	r7, sp, #0
 8006ab4:	60f8      	str	r0, [r7, #12]
 8006ab6:	60b9      	str	r1, [r7, #8]
 8006ab8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d128      	bne.n	8006b12 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	689b      	ldr	r3, [r3, #8]
 8006ac4:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006ac8:	68bb      	ldr	r3, [r7, #8]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	1e59      	subs	r1, r3, #1
 8006ace:	68bb      	ldr	r3, [r7, #8]
 8006ad0:	685b      	ldr	r3, [r3, #4]
 8006ad2:	3b01      	subs	r3, #1
 8006ad4:	011b      	lsls	r3, r3, #4
 8006ad6:	4319      	orrs	r1, r3
 8006ad8:	68bb      	ldr	r3, [r7, #8]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	3b01      	subs	r3, #1
 8006ade:	021b      	lsls	r3, r3, #8
 8006ae0:	4319      	orrs	r1, r3
 8006ae2:	68bb      	ldr	r3, [r7, #8]
 8006ae4:	68db      	ldr	r3, [r3, #12]
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	031b      	lsls	r3, r3, #12
 8006aea:	4319      	orrs	r1, r3
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	691b      	ldr	r3, [r3, #16]
 8006af0:	3b01      	subs	r3, #1
 8006af2:	041b      	lsls	r3, r3, #16
 8006af4:	4319      	orrs	r1, r3
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	695b      	ldr	r3, [r3, #20]
 8006afa:	3b01      	subs	r3, #1
 8006afc:	051b      	lsls	r3, r3, #20
 8006afe:	4319      	orrs	r1, r3
 8006b00:	68bb      	ldr	r3, [r7, #8]
 8006b02:	699b      	ldr	r3, [r3, #24]
 8006b04:	3b01      	subs	r3, #1
 8006b06:	061b      	lsls	r3, r3, #24
 8006b08:	430b      	orrs	r3, r1
 8006b0a:	431a      	orrs	r2, r3
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	609a      	str	r2, [r3, #8]
 8006b10:	e02f      	b.n	8006b72 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	689b      	ldr	r3, [r3, #8]
 8006b16:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8006b1a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006b1e:	68ba      	ldr	r2, [r7, #8]
 8006b20:	68d2      	ldr	r2, [r2, #12]
 8006b22:	3a01      	subs	r2, #1
 8006b24:	0311      	lsls	r1, r2, #12
 8006b26:	68ba      	ldr	r2, [r7, #8]
 8006b28:	6952      	ldr	r2, [r2, #20]
 8006b2a:	3a01      	subs	r2, #1
 8006b2c:	0512      	lsls	r2, r2, #20
 8006b2e:	430a      	orrs	r2, r1
 8006b30:	431a      	orrs	r2, r3
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8006b3e:	68bb      	ldr	r3, [r7, #8]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	1e59      	subs	r1, r3, #1
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	685b      	ldr	r3, [r3, #4]
 8006b48:	3b01      	subs	r3, #1
 8006b4a:	011b      	lsls	r3, r3, #4
 8006b4c:	4319      	orrs	r1, r3
 8006b4e:	68bb      	ldr	r3, [r7, #8]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	3b01      	subs	r3, #1
 8006b54:	021b      	lsls	r3, r3, #8
 8006b56:	4319      	orrs	r1, r3
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	691b      	ldr	r3, [r3, #16]
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	041b      	lsls	r3, r3, #16
 8006b60:	4319      	orrs	r1, r3
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	3b01      	subs	r3, #1
 8006b68:	061b      	lsls	r3, r3, #24
 8006b6a:	430b      	orrs	r3, r1
 8006b6c:	431a      	orrs	r2, r3
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8006b72:	2300      	movs	r3, #0
}
 8006b74:	4618      	mov	r0, r3
 8006b76:	3714      	adds	r7, #20
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b80:	b084      	sub	sp, #16
 8006b82:	b580      	push	{r7, lr}
 8006b84:	b084      	sub	sp, #16
 8006b86:	af00      	add	r7, sp, #0
 8006b88:	6078      	str	r0, [r7, #4]
 8006b8a:	f107 001c 	add.w	r0, r7, #28
 8006b8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b92:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006b96:	2b01      	cmp	r3, #1
 8006b98:	d123      	bne.n	8006be2 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b9e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006bae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006bc2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d105      	bne.n	8006bd6 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	68db      	ldr	r3, [r3, #12]
 8006bce:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 f9dc 	bl	8006f94 <USB_CoreReset>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	73fb      	strb	r3, [r7, #15]
 8006be0:	e01b      	b.n	8006c1a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	68db      	ldr	r3, [r3, #12]
 8006be6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f9d0 	bl	8006f94 <USB_CoreReset>
 8006bf4:	4603      	mov	r3, r0
 8006bf6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006bf8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d106      	bne.n	8006c0e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c04:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	639a      	str	r2, [r3, #56]	@ 0x38
 8006c0c:	e005      	b.n	8006c1a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006c12:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006c1a:	7fbb      	ldrb	r3, [r7, #30]
 8006c1c:	2b01      	cmp	r3, #1
 8006c1e:	d10b      	bne.n	8006c38 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	689b      	ldr	r3, [r3, #8]
 8006c24:	f043 0206 	orr.w	r2, r3, #6
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	f043 0220 	orr.w	r2, r3, #32
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3710      	adds	r7, #16
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c44:	b004      	add	sp, #16
 8006c46:	4770      	bx	lr

08006c48 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f043 0201 	orr.w	r2, r3, #1
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	370c      	adds	r7, #12
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr

08006c6a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c6a:	b480      	push	{r7}
 8006c6c:	b083      	sub	sp, #12
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	f023 0201 	bic.w	r2, r3, #1
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c7e:	2300      	movs	r3, #0
}
 8006c80:	4618      	mov	r0, r3
 8006c82:	370c      	adds	r7, #12
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr

08006c8c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b084      	sub	sp, #16
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	460b      	mov	r3, r1
 8006c96:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	68db      	ldr	r3, [r3, #12]
 8006ca0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006ca8:	78fb      	ldrb	r3, [r7, #3]
 8006caa:	2b01      	cmp	r3, #1
 8006cac:	d115      	bne.n	8006cda <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	68db      	ldr	r3, [r3, #12]
 8006cb2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006cba:	200a      	movs	r0, #10
 8006cbc:	f7fa fcd0 	bl	8001660 <HAL_Delay>
      ms += 10U;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	330a      	adds	r3, #10
 8006cc4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f956 	bl	8006f78 <USB_GetMode>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d01e      	beq.n	8006d10 <USB_SetCurrentMode+0x84>
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	2bc7      	cmp	r3, #199	@ 0xc7
 8006cd6:	d9f0      	bls.n	8006cba <USB_SetCurrentMode+0x2e>
 8006cd8:	e01a      	b.n	8006d10 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006cda:	78fb      	ldrb	r3, [r7, #3]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d115      	bne.n	8006d0c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006cec:	200a      	movs	r0, #10
 8006cee:	f7fa fcb7 	bl	8001660 <HAL_Delay>
      ms += 10U;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	330a      	adds	r3, #10
 8006cf6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006cf8:	6878      	ldr	r0, [r7, #4]
 8006cfa:	f000 f93d 	bl	8006f78 <USB_GetMode>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d005      	beq.n	8006d10 <USB_SetCurrentMode+0x84>
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2bc7      	cmp	r3, #199	@ 0xc7
 8006d08:	d9f0      	bls.n	8006cec <USB_SetCurrentMode+0x60>
 8006d0a:	e001      	b.n	8006d10 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e005      	b.n	8006d1c <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	2bc8      	cmp	r3, #200	@ 0xc8
 8006d14:	d101      	bne.n	8006d1a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006d16:	2301      	movs	r3, #1
 8006d18:	e000      	b.n	8006d1c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3710      	adds	r7, #16
 8006d20:	46bd      	mov	sp, r7
 8006d22:	bd80      	pop	{r7, pc}

08006d24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b085      	sub	sp, #20
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	3301      	adds	r3, #1
 8006d36:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d3e:	d901      	bls.n	8006d44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006d40:	2303      	movs	r3, #3
 8006d42:	e01b      	b.n	8006d7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	daf2      	bge.n	8006d32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006d4c:	2300      	movs	r3, #0
 8006d4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	019b      	lsls	r3, r3, #6
 8006d54:	f043 0220 	orr.w	r2, r3, #32
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	3301      	adds	r3, #1
 8006d60:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d68:	d901      	bls.n	8006d6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006d6a:	2303      	movs	r3, #3
 8006d6c:	e006      	b.n	8006d7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	691b      	ldr	r3, [r3, #16]
 8006d72:	f003 0320 	and.w	r3, r3, #32
 8006d76:	2b20      	cmp	r3, #32
 8006d78:	d0f0      	beq.n	8006d5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006d7a:	2300      	movs	r3, #0
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3714      	adds	r7, #20
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b085      	sub	sp, #20
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d90:	2300      	movs	r3, #0
 8006d92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	3301      	adds	r3, #1
 8006d98:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006da0:	d901      	bls.n	8006da6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006da2:	2303      	movs	r3, #3
 8006da4:	e018      	b.n	8006dd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	691b      	ldr	r3, [r3, #16]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	daf2      	bge.n	8006d94 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006dae:	2300      	movs	r3, #0
 8006db0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2210      	movs	r2, #16
 8006db6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006dc4:	d901      	bls.n	8006dca <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006dc6:	2303      	movs	r3, #3
 8006dc8:	e006      	b.n	8006dd8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	691b      	ldr	r3, [r3, #16]
 8006dce:	f003 0310 	and.w	r3, r3, #16
 8006dd2:	2b10      	cmp	r3, #16
 8006dd4:	d0f0      	beq.n	8006db8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006dd6:	2300      	movs	r3, #0
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3714      	adds	r7, #20
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de2:	4770      	bx	lr

08006de4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006de4:	b480      	push	{r7}
 8006de6:	b089      	sub	sp, #36	@ 0x24
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	60f8      	str	r0, [r7, #12]
 8006dec:	60b9      	str	r1, [r7, #8]
 8006dee:	4611      	mov	r1, r2
 8006df0:	461a      	mov	r2, r3
 8006df2:	460b      	mov	r3, r1
 8006df4:	71fb      	strb	r3, [r7, #7]
 8006df6:	4613      	mov	r3, r2
 8006df8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006dfe:	68bb      	ldr	r3, [r7, #8]
 8006e00:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006e02:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006e06:	2b00      	cmp	r3, #0
 8006e08:	d123      	bne.n	8006e52 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006e0a:	88bb      	ldrh	r3, [r7, #4]
 8006e0c:	3303      	adds	r3, #3
 8006e0e:	089b      	lsrs	r3, r3, #2
 8006e10:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006e12:	2300      	movs	r3, #0
 8006e14:	61bb      	str	r3, [r7, #24]
 8006e16:	e018      	b.n	8006e4a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006e18:	79fb      	ldrb	r3, [r7, #7]
 8006e1a:	031a      	lsls	r2, r3, #12
 8006e1c:	697b      	ldr	r3, [r7, #20]
 8006e1e:	4413      	add	r3, r2
 8006e20:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e24:	461a      	mov	r2, r3
 8006e26:	69fb      	ldr	r3, [r7, #28]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006e2c:	69fb      	ldr	r3, [r7, #28]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e32:	69fb      	ldr	r3, [r7, #28]
 8006e34:	3301      	adds	r3, #1
 8006e36:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e38:	69fb      	ldr	r3, [r7, #28]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	3301      	adds	r3, #1
 8006e42:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006e44:	69bb      	ldr	r3, [r7, #24]
 8006e46:	3301      	adds	r3, #1
 8006e48:	61bb      	str	r3, [r7, #24]
 8006e4a:	69ba      	ldr	r2, [r7, #24]
 8006e4c:	693b      	ldr	r3, [r7, #16]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d3e2      	bcc.n	8006e18 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	3724      	adds	r7, #36	@ 0x24
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b08b      	sub	sp, #44	@ 0x2c
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	4613      	mov	r3, r2
 8006e6c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006e72:	68bb      	ldr	r3, [r7, #8]
 8006e74:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006e76:	88fb      	ldrh	r3, [r7, #6]
 8006e78:	089b      	lsrs	r3, r3, #2
 8006e7a:	b29b      	uxth	r3, r3
 8006e7c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006e7e:	88fb      	ldrh	r3, [r7, #6]
 8006e80:	f003 0303 	and.w	r3, r3, #3
 8006e84:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006e86:	2300      	movs	r3, #0
 8006e88:	623b      	str	r3, [r7, #32]
 8006e8a:	e014      	b.n	8006eb6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e92:	681a      	ldr	r2, [r3, #0]
 8006e94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e96:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e9a:	3301      	adds	r3, #1
 8006e9c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea0:	3301      	adds	r3, #1
 8006ea2:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eac:	3301      	adds	r3, #1
 8006eae:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006eb0:	6a3b      	ldr	r3, [r7, #32]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	623b      	str	r3, [r7, #32]
 8006eb6:	6a3a      	ldr	r2, [r7, #32]
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	429a      	cmp	r2, r3
 8006ebc:	d3e6      	bcc.n	8006e8c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006ebe:	8bfb      	ldrh	r3, [r7, #30]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d01e      	beq.n	8006f02 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006ec4:	2300      	movs	r3, #0
 8006ec6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006ec8:	69bb      	ldr	r3, [r7, #24]
 8006eca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006ece:	461a      	mov	r2, r3
 8006ed0:	f107 0310 	add.w	r3, r7, #16
 8006ed4:	6812      	ldr	r2, [r2, #0]
 8006ed6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006ed8:	693a      	ldr	r2, [r7, #16]
 8006eda:	6a3b      	ldr	r3, [r7, #32]
 8006edc:	b2db      	uxtb	r3, r3
 8006ede:	00db      	lsls	r3, r3, #3
 8006ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ee4:	b2da      	uxtb	r2, r3
 8006ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ee8:	701a      	strb	r2, [r3, #0]
      i++;
 8006eea:	6a3b      	ldr	r3, [r7, #32]
 8006eec:	3301      	adds	r3, #1
 8006eee:	623b      	str	r3, [r7, #32]
      pDest++;
 8006ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ef2:	3301      	adds	r3, #1
 8006ef4:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006ef6:	8bfb      	ldrh	r3, [r7, #30]
 8006ef8:	3b01      	subs	r3, #1
 8006efa:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006efc:	8bfb      	ldrh	r3, [r7, #30]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d1ea      	bne.n	8006ed8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006f02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	372c      	adds	r7, #44	@ 0x2c
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0e:	4770      	bx	lr

08006f10 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	695b      	ldr	r3, [r3, #20]
 8006f1c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	699b      	ldr	r3, [r3, #24]
 8006f22:	68fa      	ldr	r2, [r7, #12]
 8006f24:	4013      	ands	r3, r2
 8006f26:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006f28:	68fb      	ldr	r3, [r7, #12]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3714      	adds	r7, #20
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr

08006f36 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006f36:	b480      	push	{r7}
 8006f38:	b085      	sub	sp, #20
 8006f3a:	af00      	add	r7, sp, #0
 8006f3c:	6078      	str	r0, [r7, #4]
 8006f3e:	460b      	mov	r3, r1
 8006f40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006f46:	78fb      	ldrb	r3, [r7, #3]
 8006f48:	015a      	lsls	r2, r3, #5
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	4413      	add	r3, r2
 8006f4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f52:	689b      	ldr	r3, [r3, #8]
 8006f54:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006f56:	78fb      	ldrb	r3, [r7, #3]
 8006f58:	015a      	lsls	r2, r3, #5
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	4413      	add	r3, r2
 8006f5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f62:	68db      	ldr	r3, [r3, #12]
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	4013      	ands	r3, r2
 8006f68:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006f6a:	68bb      	ldr	r3, [r7, #8]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3714      	adds	r7, #20
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr

08006f78 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b083      	sub	sp, #12
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	695b      	ldr	r3, [r3, #20]
 8006f84:	f003 0301 	and.w	r3, r3, #1
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	370c      	adds	r7, #12
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f94:	b480      	push	{r7}
 8006f96:	b085      	sub	sp, #20
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f9c:	2300      	movs	r3, #0
 8006f9e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fa0:	68fb      	ldr	r3, [r7, #12]
 8006fa2:	3301      	adds	r3, #1
 8006fa4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006fac:	d901      	bls.n	8006fb2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006fae:	2303      	movs	r3, #3
 8006fb0:	e01b      	b.n	8006fea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	691b      	ldr	r3, [r3, #16]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	daf2      	bge.n	8006fa0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006fba:	2300      	movs	r3, #0
 8006fbc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	f043 0201 	orr.w	r2, r3, #1
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	3301      	adds	r3, #1
 8006fce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006fd6:	d901      	bls.n	8006fdc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006fd8:	2303      	movs	r3, #3
 8006fda:	e006      	b.n	8006fea <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	f003 0301 	and.w	r3, r3, #1
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d0f0      	beq.n	8006fca <USB_CoreReset+0x36>

  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3714      	adds	r7, #20
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff4:	4770      	bx	lr
	...

08006ff8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006ff8:	b084      	sub	sp, #16
 8006ffa:	b580      	push	{r7, lr}
 8006ffc:	b086      	sub	sp, #24
 8006ffe:	af00      	add	r7, sp, #0
 8007000:	6078      	str	r0, [r7, #4]
 8007002:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007006:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800700a:	2300      	movs	r3, #0
 800700c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007018:	461a      	mov	r2, r3
 800701a:	2300      	movs	r3, #0
 800701c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007022:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800702e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800703a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	68db      	ldr	r3, [r3, #12]
 8007046:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800704a:	2b00      	cmp	r3, #0
 800704c:	d119      	bne.n	8007082 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800704e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007052:	2b01      	cmp	r3, #1
 8007054:	d10a      	bne.n	800706c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	68fa      	ldr	r2, [r7, #12]
 8007060:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007064:	f043 0304 	orr.w	r3, r3, #4
 8007068:	6013      	str	r3, [r2, #0]
 800706a:	e014      	b.n	8007096 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	68fa      	ldr	r2, [r7, #12]
 8007076:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800707a:	f023 0304 	bic.w	r3, r3, #4
 800707e:	6013      	str	r3, [r2, #0]
 8007080:	e009      	b.n	8007096 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007090:	f023 0304 	bic.w	r3, r3, #4
 8007094:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007096:	2110      	movs	r1, #16
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f7ff fe43 	bl	8006d24 <USB_FlushTxFifo>
 800709e:	4603      	mov	r3, r0
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d001      	beq.n	80070a8 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80070a4:	2301      	movs	r3, #1
 80070a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f7ff fe6d 	bl	8006d88 <USB_FlushRxFifo>
 80070ae:	4603      	mov	r3, r0
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d001      	beq.n	80070b8 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 80070b4:	2301      	movs	r3, #1
 80070b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80070b8:	2300      	movs	r3, #0
 80070ba:	613b      	str	r3, [r7, #16]
 80070bc:	e015      	b.n	80070ea <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 80070be:	693b      	ldr	r3, [r7, #16]
 80070c0:	015a      	lsls	r2, r3, #5
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	4413      	add	r3, r2
 80070c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070ca:	461a      	mov	r2, r3
 80070cc:	f04f 33ff 	mov.w	r3, #4294967295
 80070d0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80070d2:	693b      	ldr	r3, [r7, #16]
 80070d4:	015a      	lsls	r2, r3, #5
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	4413      	add	r3, r2
 80070da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070de:	461a      	mov	r2, r3
 80070e0:	2300      	movs	r3, #0
 80070e2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80070e4:	693b      	ldr	r3, [r7, #16]
 80070e6:	3301      	adds	r3, #1
 80070e8:	613b      	str	r3, [r7, #16]
 80070ea:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80070ee:	461a      	mov	r2, r3
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	4293      	cmp	r3, r2
 80070f4:	d3e3      	bcc.n	80070be <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f04f 32ff 	mov.w	r2, #4294967295
 8007102:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	4a18      	ldr	r2, [pc, #96]	@ (8007168 <USB_HostInit+0x170>)
 8007108:	4293      	cmp	r3, r2
 800710a:	d10b      	bne.n	8007124 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007112:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a15      	ldr	r2, [pc, #84]	@ (800716c <USB_HostInit+0x174>)
 8007118:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a14      	ldr	r2, [pc, #80]	@ (8007170 <USB_HostInit+0x178>)
 800711e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8007122:	e009      	b.n	8007138 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2280      	movs	r2, #128	@ 0x80
 8007128:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a11      	ldr	r2, [pc, #68]	@ (8007174 <USB_HostInit+0x17c>)
 800712e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	4a11      	ldr	r2, [pc, #68]	@ (8007178 <USB_HostInit+0x180>)
 8007134:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007138:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800713c:	2b00      	cmp	r3, #0
 800713e:	d105      	bne.n	800714c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	699b      	ldr	r3, [r3, #24]
 8007144:	f043 0210 	orr.w	r2, r3, #16
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	699a      	ldr	r2, [r3, #24]
 8007150:	4b0a      	ldr	r3, [pc, #40]	@ (800717c <USB_HostInit+0x184>)
 8007152:	4313      	orrs	r3, r2
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007158:	7dfb      	ldrb	r3, [r7, #23]
}
 800715a:	4618      	mov	r0, r3
 800715c:	3718      	adds	r7, #24
 800715e:	46bd      	mov	sp, r7
 8007160:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007164:	b004      	add	sp, #16
 8007166:	4770      	bx	lr
 8007168:	40040000 	.word	0x40040000
 800716c:	01000200 	.word	0x01000200
 8007170:	00e00300 	.word	0x00e00300
 8007174:	00600080 	.word	0x00600080
 8007178:	004000e0 	.word	0x004000e0
 800717c:	a3200008 	.word	0xa3200008

08007180 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007180:	b480      	push	{r7}
 8007182:	b085      	sub	sp, #20
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
 8007188:	460b      	mov	r3, r1
 800718a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800719e:	f023 0303 	bic.w	r3, r3, #3
 80071a2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	78fb      	ldrb	r3, [r7, #3]
 80071ae:	f003 0303 	and.w	r3, r3, #3
 80071b2:	68f9      	ldr	r1, [r7, #12]
 80071b4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80071b8:	4313      	orrs	r3, r2
 80071ba:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80071bc:	78fb      	ldrb	r3, [r7, #3]
 80071be:	2b01      	cmp	r3, #1
 80071c0:	d107      	bne.n	80071d2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80071c8:	461a      	mov	r2, r3
 80071ca:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80071ce:	6053      	str	r3, [r2, #4]
 80071d0:	e00c      	b.n	80071ec <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 80071d2:	78fb      	ldrb	r3, [r7, #3]
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d107      	bne.n	80071e8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 80071d8:	68fb      	ldr	r3, [r7, #12]
 80071da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80071de:	461a      	mov	r2, r3
 80071e0:	f241 7370 	movw	r3, #6000	@ 0x1770
 80071e4:	6053      	str	r3, [r2, #4]
 80071e6:	e001      	b.n	80071ec <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80071e8:	2301      	movs	r3, #1
 80071ea:	e000      	b.n	80071ee <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80071ec:	2300      	movs	r3, #0
}
 80071ee:	4618      	mov	r0, r3
 80071f0:	3714      	adds	r7, #20
 80071f2:	46bd      	mov	sp, r7
 80071f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f8:	4770      	bx	lr

080071fa <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80071fa:	b580      	push	{r7, lr}
 80071fc:	b084      	sub	sp, #16
 80071fe:	af00      	add	r7, sp, #0
 8007200:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8007206:	2300      	movs	r3, #0
 8007208:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007214:	68bb      	ldr	r3, [r7, #8]
 8007216:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800721a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800721c:	68bb      	ldr	r3, [r7, #8]
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007224:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007228:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800722a:	2064      	movs	r0, #100	@ 0x64
 800722c:	f7fa fa18 	bl	8001660 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	68fa      	ldr	r2, [r7, #12]
 8007234:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007238:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800723c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800723e:	200a      	movs	r0, #10
 8007240:	f7fa fa0e 	bl	8001660 <HAL_Delay>

  return HAL_OK;
 8007244:	2300      	movs	r3, #0
}
 8007246:	4618      	mov	r0, r3
 8007248:	3710      	adds	r7, #16
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}

0800724e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800724e:	b480      	push	{r7}
 8007250:	b085      	sub	sp, #20
 8007252:	af00      	add	r7, sp, #0
 8007254:	6078      	str	r0, [r7, #4]
 8007256:	460b      	mov	r3, r1
 8007258:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800725e:	2300      	movs	r3, #0
 8007260:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800726c:	68bb      	ldr	r3, [r7, #8]
 800726e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007272:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800727a:	2b00      	cmp	r3, #0
 800727c:	d109      	bne.n	8007292 <USB_DriveVbus+0x44>
 800727e:	78fb      	ldrb	r3, [r7, #3]
 8007280:	2b01      	cmp	r3, #1
 8007282:	d106      	bne.n	8007292 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	68fa      	ldr	r2, [r7, #12]
 8007288:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800728c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007290:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8007298:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800729c:	d109      	bne.n	80072b2 <USB_DriveVbus+0x64>
 800729e:	78fb      	ldrb	r3, [r7, #3]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d106      	bne.n	80072b2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80072ac:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80072b0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3714      	adds	r7, #20
 80072b8:	46bd      	mov	sp, r7
 80072ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072be:	4770      	bx	lr

080072c0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80072cc:	2300      	movs	r3, #0
 80072ce:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	0c5b      	lsrs	r3, r3, #17
 80072de:	f003 0303 	and.w	r3, r3, #3
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3714      	adds	r7, #20
 80072e6:	46bd      	mov	sp, r7
 80072e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ec:	4770      	bx	lr

080072ee <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80072ee:	b480      	push	{r7}
 80072f0:	b085      	sub	sp, #20
 80072f2:	af00      	add	r7, sp, #0
 80072f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007300:	689b      	ldr	r3, [r3, #8]
 8007302:	b29b      	uxth	r3, r3
}
 8007304:	4618      	mov	r0, r3
 8007306:	3714      	adds	r7, #20
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b088      	sub	sp, #32
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
 8007318:	4608      	mov	r0, r1
 800731a:	4611      	mov	r1, r2
 800731c:	461a      	mov	r2, r3
 800731e:	4603      	mov	r3, r0
 8007320:	70fb      	strb	r3, [r7, #3]
 8007322:	460b      	mov	r3, r1
 8007324:	70bb      	strb	r3, [r7, #2]
 8007326:	4613      	mov	r3, r2
 8007328:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800732a:	2300      	movs	r3, #0
 800732c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8007332:	78fb      	ldrb	r3, [r7, #3]
 8007334:	015a      	lsls	r2, r3, #5
 8007336:	693b      	ldr	r3, [r7, #16]
 8007338:	4413      	add	r3, r2
 800733a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800733e:	461a      	mov	r2, r3
 8007340:	f04f 33ff 	mov.w	r3, #4294967295
 8007344:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8007346:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800734a:	2b03      	cmp	r3, #3
 800734c:	d87c      	bhi.n	8007448 <USB_HC_Init+0x138>
 800734e:	a201      	add	r2, pc, #4	@ (adr r2, 8007354 <USB_HC_Init+0x44>)
 8007350:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007354:	08007365 	.word	0x08007365
 8007358:	0800740b 	.word	0x0800740b
 800735c:	08007365 	.word	0x08007365
 8007360:	080073cd 	.word	0x080073cd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007364:	78fb      	ldrb	r3, [r7, #3]
 8007366:	015a      	lsls	r2, r3, #5
 8007368:	693b      	ldr	r3, [r7, #16]
 800736a:	4413      	add	r3, r2
 800736c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007370:	461a      	mov	r2, r3
 8007372:	f240 439d 	movw	r3, #1181	@ 0x49d
 8007376:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007378:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800737c:	2b00      	cmp	r3, #0
 800737e:	da10      	bge.n	80073a2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007380:	78fb      	ldrb	r3, [r7, #3]
 8007382:	015a      	lsls	r2, r3, #5
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	4413      	add	r3, r2
 8007388:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800738c:	68db      	ldr	r3, [r3, #12]
 800738e:	78fa      	ldrb	r2, [r7, #3]
 8007390:	0151      	lsls	r1, r2, #5
 8007392:	693a      	ldr	r2, [r7, #16]
 8007394:	440a      	add	r2, r1
 8007396:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800739a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800739e:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80073a0:	e055      	b.n	800744e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	4a6f      	ldr	r2, [pc, #444]	@ (8007564 <USB_HC_Init+0x254>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d151      	bne.n	800744e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80073aa:	78fb      	ldrb	r3, [r7, #3]
 80073ac:	015a      	lsls	r2, r3, #5
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	4413      	add	r3, r2
 80073b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	78fa      	ldrb	r2, [r7, #3]
 80073ba:	0151      	lsls	r1, r2, #5
 80073bc:	693a      	ldr	r2, [r7, #16]
 80073be:	440a      	add	r2, r1
 80073c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073c4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80073c8:	60d3      	str	r3, [r2, #12]
      break;
 80073ca:	e040      	b.n	800744e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80073cc:	78fb      	ldrb	r3, [r7, #3]
 80073ce:	015a      	lsls	r2, r3, #5
 80073d0:	693b      	ldr	r3, [r7, #16]
 80073d2:	4413      	add	r3, r2
 80073d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073d8:	461a      	mov	r2, r3
 80073da:	f240 639d 	movw	r3, #1693	@ 0x69d
 80073de:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80073e0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	da34      	bge.n	8007452 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80073e8:	78fb      	ldrb	r3, [r7, #3]
 80073ea:	015a      	lsls	r2, r3, #5
 80073ec:	693b      	ldr	r3, [r7, #16]
 80073ee:	4413      	add	r3, r2
 80073f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073f4:	68db      	ldr	r3, [r3, #12]
 80073f6:	78fa      	ldrb	r2, [r7, #3]
 80073f8:	0151      	lsls	r1, r2, #5
 80073fa:	693a      	ldr	r2, [r7, #16]
 80073fc:	440a      	add	r2, r1
 80073fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007402:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007406:	60d3      	str	r3, [r2, #12]
      }

      break;
 8007408:	e023      	b.n	8007452 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800740a:	78fb      	ldrb	r3, [r7, #3]
 800740c:	015a      	lsls	r2, r3, #5
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	4413      	add	r3, r2
 8007412:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007416:	461a      	mov	r2, r3
 8007418:	f240 2325 	movw	r3, #549	@ 0x225
 800741c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800741e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007422:	2b00      	cmp	r3, #0
 8007424:	da17      	bge.n	8007456 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8007426:	78fb      	ldrb	r3, [r7, #3]
 8007428:	015a      	lsls	r2, r3, #5
 800742a:	693b      	ldr	r3, [r7, #16]
 800742c:	4413      	add	r3, r2
 800742e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	78fa      	ldrb	r2, [r7, #3]
 8007436:	0151      	lsls	r1, r2, #5
 8007438:	693a      	ldr	r2, [r7, #16]
 800743a:	440a      	add	r2, r1
 800743c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007440:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007444:	60d3      	str	r3, [r2, #12]
      }
      break;
 8007446:	e006      	b.n	8007456 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8007448:	2301      	movs	r3, #1
 800744a:	77fb      	strb	r3, [r7, #31]
      break;
 800744c:	e004      	b.n	8007458 <USB_HC_Init+0x148>
      break;
 800744e:	bf00      	nop
 8007450:	e002      	b.n	8007458 <USB_HC_Init+0x148>
      break;
 8007452:	bf00      	nop
 8007454:	e000      	b.n	8007458 <USB_HC_Init+0x148>
      break;
 8007456:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007458:	78fb      	ldrb	r3, [r7, #3]
 800745a:	015a      	lsls	r2, r3, #5
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	4413      	add	r3, r2
 8007460:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007464:	461a      	mov	r2, r3
 8007466:	2300      	movs	r3, #0
 8007468:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800746a:	78fb      	ldrb	r3, [r7, #3]
 800746c:	015a      	lsls	r2, r3, #5
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	4413      	add	r3, r2
 8007472:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	78fa      	ldrb	r2, [r7, #3]
 800747a:	0151      	lsls	r1, r2, #5
 800747c:	693a      	ldr	r2, [r7, #16]
 800747e:	440a      	add	r2, r1
 8007480:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007484:	f043 0302 	orr.w	r3, r3, #2
 8007488:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800748a:	693b      	ldr	r3, [r7, #16]
 800748c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007490:	699a      	ldr	r2, [r3, #24]
 8007492:	78fb      	ldrb	r3, [r7, #3]
 8007494:	f003 030f 	and.w	r3, r3, #15
 8007498:	2101      	movs	r1, #1
 800749a:	fa01 f303 	lsl.w	r3, r1, r3
 800749e:	6939      	ldr	r1, [r7, #16]
 80074a0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80074a4:	4313      	orrs	r3, r2
 80074a6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	699b      	ldr	r3, [r3, #24]
 80074ac:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80074b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	da03      	bge.n	80074c4 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80074bc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80074c0:	61bb      	str	r3, [r7, #24]
 80074c2:	e001      	b.n	80074c8 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 80074c4:	2300      	movs	r3, #0
 80074c6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f7ff fef9 	bl	80072c0 <USB_GetHostSpeed>
 80074ce:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80074d0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80074d4:	2b02      	cmp	r3, #2
 80074d6:	d106      	bne.n	80074e6 <USB_HC_Init+0x1d6>
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	2b02      	cmp	r3, #2
 80074dc:	d003      	beq.n	80074e6 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80074de:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80074e2:	617b      	str	r3, [r7, #20]
 80074e4:	e001      	b.n	80074ea <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80074e6:	2300      	movs	r3, #0
 80074e8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80074ea:	787b      	ldrb	r3, [r7, #1]
 80074ec:	059b      	lsls	r3, r3, #22
 80074ee:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80074f2:	78bb      	ldrb	r3, [r7, #2]
 80074f4:	02db      	lsls	r3, r3, #11
 80074f6:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80074fa:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80074fc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007500:	049b      	lsls	r3, r3, #18
 8007502:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007506:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8007508:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800750a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800750e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	431a      	orrs	r2, r3
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007518:	78fa      	ldrb	r2, [r7, #3]
 800751a:	0151      	lsls	r1, r2, #5
 800751c:	693a      	ldr	r2, [r7, #16]
 800751e:	440a      	add	r2, r1
 8007520:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007524:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8007528:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800752a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800752e:	2b03      	cmp	r3, #3
 8007530:	d003      	beq.n	800753a <USB_HC_Init+0x22a>
 8007532:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007536:	2b01      	cmp	r3, #1
 8007538:	d10f      	bne.n	800755a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800753a:	78fb      	ldrb	r3, [r7, #3]
 800753c:	015a      	lsls	r2, r3, #5
 800753e:	693b      	ldr	r3, [r7, #16]
 8007540:	4413      	add	r3, r2
 8007542:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	78fa      	ldrb	r2, [r7, #3]
 800754a:	0151      	lsls	r1, r2, #5
 800754c:	693a      	ldr	r2, [r7, #16]
 800754e:	440a      	add	r2, r1
 8007550:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007554:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8007558:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800755a:	7ffb      	ldrb	r3, [r7, #31]
}
 800755c:	4618      	mov	r0, r3
 800755e:	3720      	adds	r7, #32
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	40040000 	.word	0x40040000

08007568 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007568:	b580      	push	{r7, lr}
 800756a:	b08c      	sub	sp, #48	@ 0x30
 800756c:	af02      	add	r7, sp, #8
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	4613      	mov	r3, r2
 8007574:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800757a:	68bb      	ldr	r3, [r7, #8]
 800757c:	785b      	ldrb	r3, [r3, #1]
 800757e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007580:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007584:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	4a5d      	ldr	r2, [pc, #372]	@ (8007700 <USB_HC_StartXfer+0x198>)
 800758a:	4293      	cmp	r3, r2
 800758c:	d12f      	bne.n	80075ee <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800758e:	79fb      	ldrb	r3, [r7, #7]
 8007590:	2b01      	cmp	r3, #1
 8007592:	d11c      	bne.n	80075ce <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	7c9b      	ldrb	r3, [r3, #18]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d003      	beq.n	80075a4 <USB_HC_StartXfer+0x3c>
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	7c9b      	ldrb	r3, [r3, #18]
 80075a0:	2b02      	cmp	r3, #2
 80075a2:	d124      	bne.n	80075ee <USB_HC_StartXfer+0x86>
 80075a4:	68bb      	ldr	r3, [r7, #8]
 80075a6:	799b      	ldrb	r3, [r3, #6]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d120      	bne.n	80075ee <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80075ac:	69fb      	ldr	r3, [r7, #28]
 80075ae:	015a      	lsls	r2, r3, #5
 80075b0:	6a3b      	ldr	r3, [r7, #32]
 80075b2:	4413      	add	r3, r2
 80075b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	69fa      	ldr	r2, [r7, #28]
 80075bc:	0151      	lsls	r1, r2, #5
 80075be:	6a3a      	ldr	r2, [r7, #32]
 80075c0:	440a      	add	r2, r1
 80075c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80075c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80075ca:	60d3      	str	r3, [r2, #12]
 80075cc:	e00f      	b.n	80075ee <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	791b      	ldrb	r3, [r3, #4]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d10b      	bne.n	80075ee <USB_HC_StartXfer+0x86>
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	795b      	ldrb	r3, [r3, #5]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d107      	bne.n	80075ee <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	785b      	ldrb	r3, [r3, #1]
 80075e2:	4619      	mov	r1, r3
 80075e4:	68f8      	ldr	r0, [r7, #12]
 80075e6:	f000 fb6b 	bl	8007cc0 <USB_DoPing>
        return HAL_OK;
 80075ea:	2300      	movs	r3, #0
 80075ec:	e232      	b.n	8007a54 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	799b      	ldrb	r3, [r3, #6]
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d158      	bne.n	80076a8 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80075f6:	2301      	movs	r3, #1
 80075f8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80075fa:	68bb      	ldr	r3, [r7, #8]
 80075fc:	78db      	ldrb	r3, [r3, #3]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d007      	beq.n	8007612 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007602:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007604:	68ba      	ldr	r2, [r7, #8]
 8007606:	8a92      	ldrh	r2, [r2, #20]
 8007608:	fb03 f202 	mul.w	r2, r3, r2
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	61da      	str	r2, [r3, #28]
 8007610:	e07c      	b.n	800770c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	7c9b      	ldrb	r3, [r3, #18]
 8007616:	2b01      	cmp	r3, #1
 8007618:	d130      	bne.n	800767c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	6a1b      	ldr	r3, [r3, #32]
 800761e:	2bbc      	cmp	r3, #188	@ 0xbc
 8007620:	d918      	bls.n	8007654 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	8a9b      	ldrh	r3, [r3, #20]
 8007626:	461a      	mov	r2, r3
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800762c:	68bb      	ldr	r3, [r7, #8]
 800762e:	69da      	ldr	r2, [r3, #28]
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	2b01      	cmp	r3, #1
 800763a:	d003      	beq.n	8007644 <USB_HC_StartXfer+0xdc>
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	2b02      	cmp	r3, #2
 8007642:	d103      	bne.n	800764c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	2202      	movs	r2, #2
 8007648:	60da      	str	r2, [r3, #12]
 800764a:	e05f      	b.n	800770c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	2201      	movs	r2, #1
 8007650:	60da      	str	r2, [r3, #12]
 8007652:	e05b      	b.n	800770c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	6a1a      	ldr	r2, [r3, #32]
 8007658:	68bb      	ldr	r3, [r7, #8]
 800765a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	68db      	ldr	r3, [r3, #12]
 8007660:	2b01      	cmp	r3, #1
 8007662:	d007      	beq.n	8007674 <USB_HC_StartXfer+0x10c>
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	2b02      	cmp	r3, #2
 800766a:	d003      	beq.n	8007674 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	2204      	movs	r2, #4
 8007670:	60da      	str	r2, [r3, #12]
 8007672:	e04b      	b.n	800770c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	2203      	movs	r2, #3
 8007678:	60da      	str	r2, [r3, #12]
 800767a:	e047      	b.n	800770c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800767c:	79fb      	ldrb	r3, [r7, #7]
 800767e:	2b01      	cmp	r3, #1
 8007680:	d10d      	bne.n	800769e <USB_HC_StartXfer+0x136>
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	6a1b      	ldr	r3, [r3, #32]
 8007686:	68ba      	ldr	r2, [r7, #8]
 8007688:	8a92      	ldrh	r2, [r2, #20]
 800768a:	4293      	cmp	r3, r2
 800768c:	d907      	bls.n	800769e <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800768e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007690:	68ba      	ldr	r2, [r7, #8]
 8007692:	8a92      	ldrh	r2, [r2, #20]
 8007694:	fb03 f202 	mul.w	r2, r3, r2
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	61da      	str	r2, [r3, #28]
 800769c:	e036      	b.n	800770c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800769e:	68bb      	ldr	r3, [r7, #8]
 80076a0:	6a1a      	ldr	r2, [r3, #32]
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	61da      	str	r2, [r3, #28]
 80076a6:	e031      	b.n	800770c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	6a1b      	ldr	r3, [r3, #32]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d018      	beq.n	80076e2 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80076b0:	68bb      	ldr	r3, [r7, #8]
 80076b2:	6a1b      	ldr	r3, [r3, #32]
 80076b4:	68ba      	ldr	r2, [r7, #8]
 80076b6:	8a92      	ldrh	r2, [r2, #20]
 80076b8:	4413      	add	r3, r2
 80076ba:	3b01      	subs	r3, #1
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	8a92      	ldrh	r2, [r2, #20]
 80076c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80076c4:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 80076c6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80076c8:	8b7b      	ldrh	r3, [r7, #26]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d90b      	bls.n	80076e6 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 80076ce:	8b7b      	ldrh	r3, [r7, #26]
 80076d0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80076d2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80076d4:	68ba      	ldr	r2, [r7, #8]
 80076d6:	8a92      	ldrh	r2, [r2, #20]
 80076d8:	fb03 f202 	mul.w	r2, r3, r2
 80076dc:	68bb      	ldr	r3, [r7, #8]
 80076de:	61da      	str	r2, [r3, #28]
 80076e0:	e001      	b.n	80076e6 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80076e2:	2301      	movs	r3, #1
 80076e4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	78db      	ldrb	r3, [r3, #3]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d00a      	beq.n	8007704 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80076ee:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80076f0:	68ba      	ldr	r2, [r7, #8]
 80076f2:	8a92      	ldrh	r2, [r2, #20]
 80076f4:	fb03 f202 	mul.w	r2, r3, r2
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	61da      	str	r2, [r3, #28]
 80076fc:	e006      	b.n	800770c <USB_HC_StartXfer+0x1a4>
 80076fe:	bf00      	nop
 8007700:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	6a1a      	ldr	r2, [r3, #32]
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	69db      	ldr	r3, [r3, #28]
 8007710:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007714:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007716:	04d9      	lsls	r1, r3, #19
 8007718:	4ba3      	ldr	r3, [pc, #652]	@ (80079a8 <USB_HC_StartXfer+0x440>)
 800771a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800771c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	7d9b      	ldrb	r3, [r3, #22]
 8007722:	075b      	lsls	r3, r3, #29
 8007724:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007728:	69f9      	ldr	r1, [r7, #28]
 800772a:	0148      	lsls	r0, r1, #5
 800772c:	6a39      	ldr	r1, [r7, #32]
 800772e:	4401      	add	r1, r0
 8007730:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007734:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007736:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007738:	79fb      	ldrb	r3, [r7, #7]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d009      	beq.n	8007752 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	6999      	ldr	r1, [r3, #24]
 8007742:	69fb      	ldr	r3, [r7, #28]
 8007744:	015a      	lsls	r2, r3, #5
 8007746:	6a3b      	ldr	r3, [r7, #32]
 8007748:	4413      	add	r3, r2
 800774a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800774e:	460a      	mov	r2, r1
 8007750:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007752:	6a3b      	ldr	r3, [r7, #32]
 8007754:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007758:	689b      	ldr	r3, [r3, #8]
 800775a:	f003 0301 	and.w	r3, r3, #1
 800775e:	2b00      	cmp	r3, #0
 8007760:	bf0c      	ite	eq
 8007762:	2301      	moveq	r3, #1
 8007764:	2300      	movne	r3, #0
 8007766:	b2db      	uxtb	r3, r3
 8007768:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800776a:	69fb      	ldr	r3, [r7, #28]
 800776c:	015a      	lsls	r2, r3, #5
 800776e:	6a3b      	ldr	r3, [r7, #32]
 8007770:	4413      	add	r3, r2
 8007772:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	69fa      	ldr	r2, [r7, #28]
 800777a:	0151      	lsls	r1, r2, #5
 800777c:	6a3a      	ldr	r2, [r7, #32]
 800777e:	440a      	add	r2, r1
 8007780:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007784:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007788:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800778a:	69fb      	ldr	r3, [r7, #28]
 800778c:	015a      	lsls	r2, r3, #5
 800778e:	6a3b      	ldr	r3, [r7, #32]
 8007790:	4413      	add	r3, r2
 8007792:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	7e7b      	ldrb	r3, [r7, #25]
 800779a:	075b      	lsls	r3, r3, #29
 800779c:	69f9      	ldr	r1, [r7, #28]
 800779e:	0148      	lsls	r0, r1, #5
 80077a0:	6a39      	ldr	r1, [r7, #32]
 80077a2:	4401      	add	r1, r0
 80077a4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 80077a8:	4313      	orrs	r3, r2
 80077aa:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	799b      	ldrb	r3, [r3, #6]
 80077b0:	2b01      	cmp	r3, #1
 80077b2:	f040 80c3 	bne.w	800793c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	7c5b      	ldrb	r3, [r3, #17]
 80077ba:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80077bc:	68ba      	ldr	r2, [r7, #8]
 80077be:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80077c0:	4313      	orrs	r3, r2
 80077c2:	69fa      	ldr	r2, [r7, #28]
 80077c4:	0151      	lsls	r1, r2, #5
 80077c6:	6a3a      	ldr	r2, [r7, #32]
 80077c8:	440a      	add	r2, r1
 80077ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 80077ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 80077d2:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 80077d4:	69fb      	ldr	r3, [r7, #28]
 80077d6:	015a      	lsls	r2, r3, #5
 80077d8:	6a3b      	ldr	r3, [r7, #32]
 80077da:	4413      	add	r3, r2
 80077dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	69fa      	ldr	r2, [r7, #28]
 80077e4:	0151      	lsls	r1, r2, #5
 80077e6:	6a3a      	ldr	r2, [r7, #32]
 80077e8:	440a      	add	r2, r1
 80077ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077ee:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80077f2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80077f4:	68bb      	ldr	r3, [r7, #8]
 80077f6:	79db      	ldrb	r3, [r3, #7]
 80077f8:	2b01      	cmp	r3, #1
 80077fa:	d123      	bne.n	8007844 <USB_HC_StartXfer+0x2dc>
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	78db      	ldrb	r3, [r3, #3]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d11f      	bne.n	8007844 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007804:	69fb      	ldr	r3, [r7, #28]
 8007806:	015a      	lsls	r2, r3, #5
 8007808:	6a3b      	ldr	r3, [r7, #32]
 800780a:	4413      	add	r3, r2
 800780c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007810:	685b      	ldr	r3, [r3, #4]
 8007812:	69fa      	ldr	r2, [r7, #28]
 8007814:	0151      	lsls	r1, r2, #5
 8007816:	6a3a      	ldr	r2, [r7, #32]
 8007818:	440a      	add	r2, r1
 800781a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800781e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007822:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007824:	69fb      	ldr	r3, [r7, #28]
 8007826:	015a      	lsls	r2, r3, #5
 8007828:	6a3b      	ldr	r3, [r7, #32]
 800782a:	4413      	add	r3, r2
 800782c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007830:	68db      	ldr	r3, [r3, #12]
 8007832:	69fa      	ldr	r2, [r7, #28]
 8007834:	0151      	lsls	r1, r2, #5
 8007836:	6a3a      	ldr	r2, [r7, #32]
 8007838:	440a      	add	r2, r1
 800783a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800783e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007842:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007844:	68bb      	ldr	r3, [r7, #8]
 8007846:	7c9b      	ldrb	r3, [r3, #18]
 8007848:	2b01      	cmp	r3, #1
 800784a:	d003      	beq.n	8007854 <USB_HC_StartXfer+0x2ec>
 800784c:	68bb      	ldr	r3, [r7, #8]
 800784e:	7c9b      	ldrb	r3, [r3, #18]
 8007850:	2b03      	cmp	r3, #3
 8007852:	d117      	bne.n	8007884 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007854:	68bb      	ldr	r3, [r7, #8]
 8007856:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007858:	2b01      	cmp	r3, #1
 800785a:	d113      	bne.n	8007884 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	78db      	ldrb	r3, [r3, #3]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d10f      	bne.n	8007884 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007864:	69fb      	ldr	r3, [r7, #28]
 8007866:	015a      	lsls	r2, r3, #5
 8007868:	6a3b      	ldr	r3, [r7, #32]
 800786a:	4413      	add	r3, r2
 800786c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	69fa      	ldr	r2, [r7, #28]
 8007874:	0151      	lsls	r1, r2, #5
 8007876:	6a3a      	ldr	r2, [r7, #32]
 8007878:	440a      	add	r2, r1
 800787a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800787e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007882:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	7c9b      	ldrb	r3, [r3, #18]
 8007888:	2b01      	cmp	r3, #1
 800788a:	d162      	bne.n	8007952 <USB_HC_StartXfer+0x3ea>
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	78db      	ldrb	r3, [r3, #3]
 8007890:	2b00      	cmp	r3, #0
 8007892:	d15e      	bne.n	8007952 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	3b01      	subs	r3, #1
 800789a:	2b03      	cmp	r3, #3
 800789c:	d858      	bhi.n	8007950 <USB_HC_StartXfer+0x3e8>
 800789e:	a201      	add	r2, pc, #4	@ (adr r2, 80078a4 <USB_HC_StartXfer+0x33c>)
 80078a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078a4:	080078b5 	.word	0x080078b5
 80078a8:	080078d7 	.word	0x080078d7
 80078ac:	080078f9 	.word	0x080078f9
 80078b0:	0800791b 	.word	0x0800791b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 80078b4:	69fb      	ldr	r3, [r7, #28]
 80078b6:	015a      	lsls	r2, r3, #5
 80078b8:	6a3b      	ldr	r3, [r7, #32]
 80078ba:	4413      	add	r3, r2
 80078bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078c0:	685b      	ldr	r3, [r3, #4]
 80078c2:	69fa      	ldr	r2, [r7, #28]
 80078c4:	0151      	lsls	r1, r2, #5
 80078c6:	6a3a      	ldr	r2, [r7, #32]
 80078c8:	440a      	add	r2, r1
 80078ca:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80078d2:	6053      	str	r3, [r2, #4]
          break;
 80078d4:	e03d      	b.n	8007952 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 80078d6:	69fb      	ldr	r3, [r7, #28]
 80078d8:	015a      	lsls	r2, r3, #5
 80078da:	6a3b      	ldr	r3, [r7, #32]
 80078dc:	4413      	add	r3, r2
 80078de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078e2:	685b      	ldr	r3, [r3, #4]
 80078e4:	69fa      	ldr	r2, [r7, #28]
 80078e6:	0151      	lsls	r1, r2, #5
 80078e8:	6a3a      	ldr	r2, [r7, #32]
 80078ea:	440a      	add	r2, r1
 80078ec:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078f0:	f043 030e 	orr.w	r3, r3, #14
 80078f4:	6053      	str	r3, [r2, #4]
          break;
 80078f6:	e02c      	b.n	8007952 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80078f8:	69fb      	ldr	r3, [r7, #28]
 80078fa:	015a      	lsls	r2, r3, #5
 80078fc:	6a3b      	ldr	r3, [r7, #32]
 80078fe:	4413      	add	r3, r2
 8007900:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007904:	685b      	ldr	r3, [r3, #4]
 8007906:	69fa      	ldr	r2, [r7, #28]
 8007908:	0151      	lsls	r1, r2, #5
 800790a:	6a3a      	ldr	r2, [r7, #32]
 800790c:	440a      	add	r2, r1
 800790e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007912:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007916:	6053      	str	r3, [r2, #4]
          break;
 8007918:	e01b      	b.n	8007952 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	015a      	lsls	r2, r3, #5
 800791e:	6a3b      	ldr	r3, [r7, #32]
 8007920:	4413      	add	r3, r2
 8007922:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	69fa      	ldr	r2, [r7, #28]
 800792a:	0151      	lsls	r1, r2, #5
 800792c:	6a3a      	ldr	r2, [r7, #32]
 800792e:	440a      	add	r2, r1
 8007930:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007934:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007938:	6053      	str	r3, [r2, #4]
          break;
 800793a:	e00a      	b.n	8007952 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	015a      	lsls	r2, r3, #5
 8007940:	6a3b      	ldr	r3, [r7, #32]
 8007942:	4413      	add	r3, r2
 8007944:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007948:	461a      	mov	r2, r3
 800794a:	2300      	movs	r3, #0
 800794c:	6053      	str	r3, [r2, #4]
 800794e:	e000      	b.n	8007952 <USB_HC_StartXfer+0x3ea>
          break;
 8007950:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007952:	69fb      	ldr	r3, [r7, #28]
 8007954:	015a      	lsls	r2, r3, #5
 8007956:	6a3b      	ldr	r3, [r7, #32]
 8007958:	4413      	add	r3, r2
 800795a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007962:	693b      	ldr	r3, [r7, #16]
 8007964:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007968:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	78db      	ldrb	r3, [r3, #3]
 800796e:	2b00      	cmp	r3, #0
 8007970:	d004      	beq.n	800797c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007972:	693b      	ldr	r3, [r7, #16]
 8007974:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007978:	613b      	str	r3, [r7, #16]
 800797a:	e003      	b.n	8007984 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007982:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800798a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800798c:	69fb      	ldr	r3, [r7, #28]
 800798e:	015a      	lsls	r2, r3, #5
 8007990:	6a3b      	ldr	r3, [r7, #32]
 8007992:	4413      	add	r3, r2
 8007994:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007998:	461a      	mov	r2, r3
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800799e:	79fb      	ldrb	r3, [r7, #7]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d003      	beq.n	80079ac <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 80079a4:	2300      	movs	r3, #0
 80079a6:	e055      	b.n	8007a54 <USB_HC_StartXfer+0x4ec>
 80079a8:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	78db      	ldrb	r3, [r3, #3]
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d14e      	bne.n	8007a52 <USB_HC_StartXfer+0x4ea>
 80079b4:	68bb      	ldr	r3, [r7, #8]
 80079b6:	6a1b      	ldr	r3, [r3, #32]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d04a      	beq.n	8007a52 <USB_HC_StartXfer+0x4ea>
 80079bc:	68bb      	ldr	r3, [r7, #8]
 80079be:	79db      	ldrb	r3, [r3, #7]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d146      	bne.n	8007a52 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 80079c4:	68bb      	ldr	r3, [r7, #8]
 80079c6:	7c9b      	ldrb	r3, [r3, #18]
 80079c8:	2b03      	cmp	r3, #3
 80079ca:	d831      	bhi.n	8007a30 <USB_HC_StartXfer+0x4c8>
 80079cc:	a201      	add	r2, pc, #4	@ (adr r2, 80079d4 <USB_HC_StartXfer+0x46c>)
 80079ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079d2:	bf00      	nop
 80079d4:	080079e5 	.word	0x080079e5
 80079d8:	08007a09 	.word	0x08007a09
 80079dc:	080079e5 	.word	0x080079e5
 80079e0:	08007a09 	.word	0x08007a09
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	6a1b      	ldr	r3, [r3, #32]
 80079e8:	3303      	adds	r3, #3
 80079ea:	089b      	lsrs	r3, r3, #2
 80079ec:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80079ee:	8afa      	ldrh	r2, [r7, #22]
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	429a      	cmp	r2, r3
 80079f8:	d91c      	bls.n	8007a34 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	699b      	ldr	r3, [r3, #24]
 80079fe:	f043 0220 	orr.w	r2, r3, #32
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	619a      	str	r2, [r3, #24]
        }
        break;
 8007a06:	e015      	b.n	8007a34 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	6a1b      	ldr	r3, [r3, #32]
 8007a0c:	3303      	adds	r3, #3
 8007a0e:	089b      	lsrs	r3, r3, #2
 8007a10:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007a12:	8afa      	ldrh	r2, [r7, #22]
 8007a14:	6a3b      	ldr	r3, [r7, #32]
 8007a16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a1a:	691b      	ldr	r3, [r3, #16]
 8007a1c:	b29b      	uxth	r3, r3
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d90a      	bls.n	8007a38 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	699b      	ldr	r3, [r3, #24]
 8007a26:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	619a      	str	r2, [r3, #24]
        }
        break;
 8007a2e:	e003      	b.n	8007a38 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007a30:	bf00      	nop
 8007a32:	e002      	b.n	8007a3a <USB_HC_StartXfer+0x4d2>
        break;
 8007a34:	bf00      	nop
 8007a36:	e000      	b.n	8007a3a <USB_HC_StartXfer+0x4d2>
        break;
 8007a38:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007a3a:	68bb      	ldr	r3, [r7, #8]
 8007a3c:	6999      	ldr	r1, [r3, #24]
 8007a3e:	68bb      	ldr	r3, [r7, #8]
 8007a40:	785a      	ldrb	r2, [r3, #1]
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	6a1b      	ldr	r3, [r3, #32]
 8007a46:	b29b      	uxth	r3, r3
 8007a48:	2000      	movs	r0, #0
 8007a4a:	9000      	str	r0, [sp, #0]
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f7ff f9c9 	bl	8006de4 <USB_WritePacket>
  }

  return HAL_OK;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3728      	adds	r7, #40	@ 0x28
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b085      	sub	sp, #20
 8007a60:	af00      	add	r7, sp, #0
 8007a62:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a6e:	695b      	ldr	r3, [r3, #20]
 8007a70:	b29b      	uxth	r3, r3
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3714      	adds	r7, #20
 8007a76:	46bd      	mov	sp, r7
 8007a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a7c:	4770      	bx	lr

08007a7e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007a7e:	b480      	push	{r7}
 8007a80:	b089      	sub	sp, #36	@ 0x24
 8007a82:	af00      	add	r7, sp, #0
 8007a84:	6078      	str	r0, [r7, #4]
 8007a86:	460b      	mov	r3, r1
 8007a88:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007a8e:	78fb      	ldrb	r3, [r7, #3]
 8007a90:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007a92:	2300      	movs	r3, #0
 8007a94:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	015a      	lsls	r2, r3, #5
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	4413      	add	r3, r2
 8007a9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	0c9b      	lsrs	r3, r3, #18
 8007aa6:	f003 0303 	and.w	r3, r3, #3
 8007aaa:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	015a      	lsls	r2, r3, #5
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ab8:	681b      	ldr	r3, [r3, #0]
 8007aba:	0fdb      	lsrs	r3, r3, #31
 8007abc:	f003 0301 	and.w	r3, r3, #1
 8007ac0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007ac2:	69bb      	ldr	r3, [r7, #24]
 8007ac4:	015a      	lsls	r2, r3, #5
 8007ac6:	69fb      	ldr	r3, [r7, #28]
 8007ac8:	4413      	add	r3, r2
 8007aca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	0fdb      	lsrs	r3, r3, #31
 8007ad2:	f003 0301 	and.w	r3, r3, #1
 8007ad6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	689b      	ldr	r3, [r3, #8]
 8007adc:	f003 0320 	and.w	r3, r3, #32
 8007ae0:	2b20      	cmp	r3, #32
 8007ae2:	d10d      	bne.n	8007b00 <USB_HC_Halt+0x82>
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d10a      	bne.n	8007b00 <USB_HC_Halt+0x82>
 8007aea:	693b      	ldr	r3, [r7, #16]
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d005      	beq.n	8007afc <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007af0:	697b      	ldr	r3, [r7, #20]
 8007af2:	2b01      	cmp	r3, #1
 8007af4:	d002      	beq.n	8007afc <USB_HC_Halt+0x7e>
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	2b03      	cmp	r3, #3
 8007afa:	d101      	bne.n	8007b00 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007afc:	2300      	movs	r3, #0
 8007afe:	e0d8      	b.n	8007cb2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007b00:	697b      	ldr	r3, [r7, #20]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d002      	beq.n	8007b0c <USB_HC_Halt+0x8e>
 8007b06:	697b      	ldr	r3, [r7, #20]
 8007b08:	2b02      	cmp	r3, #2
 8007b0a:	d173      	bne.n	8007bf4 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007b0c:	69bb      	ldr	r3, [r7, #24]
 8007b0e:	015a      	lsls	r2, r3, #5
 8007b10:	69fb      	ldr	r3, [r7, #28]
 8007b12:	4413      	add	r3, r2
 8007b14:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	69ba      	ldr	r2, [r7, #24]
 8007b1c:	0151      	lsls	r1, r2, #5
 8007b1e:	69fa      	ldr	r2, [r7, #28]
 8007b20:	440a      	add	r2, r1
 8007b22:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b26:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007b2a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	f003 0320 	and.w	r3, r3, #32
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d14a      	bne.n	8007bce <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b3c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d133      	bne.n	8007bac <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007b44:	69bb      	ldr	r3, [r7, #24]
 8007b46:	015a      	lsls	r2, r3, #5
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	4413      	add	r3, r2
 8007b4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	69ba      	ldr	r2, [r7, #24]
 8007b54:	0151      	lsls	r1, r2, #5
 8007b56:	69fa      	ldr	r2, [r7, #28]
 8007b58:	440a      	add	r2, r1
 8007b5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b5e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007b62:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b64:	69bb      	ldr	r3, [r7, #24]
 8007b66:	015a      	lsls	r2, r3, #5
 8007b68:	69fb      	ldr	r3, [r7, #28]
 8007b6a:	4413      	add	r3, r2
 8007b6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	69ba      	ldr	r2, [r7, #24]
 8007b74:	0151      	lsls	r1, r2, #5
 8007b76:	69fa      	ldr	r2, [r7, #28]
 8007b78:	440a      	add	r2, r1
 8007b7a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b7e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b82:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007b84:	68bb      	ldr	r3, [r7, #8]
 8007b86:	3301      	adds	r3, #1
 8007b88:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007b8a:	68bb      	ldr	r3, [r7, #8]
 8007b8c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007b90:	d82e      	bhi.n	8007bf0 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	015a      	lsls	r2, r3, #5
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	4413      	add	r3, r2
 8007b9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ba4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ba8:	d0ec      	beq.n	8007b84 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007baa:	e081      	b.n	8007cb0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007bac:	69bb      	ldr	r3, [r7, #24]
 8007bae:	015a      	lsls	r2, r3, #5
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	4413      	add	r3, r2
 8007bb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	69ba      	ldr	r2, [r7, #24]
 8007bbc:	0151      	lsls	r1, r2, #5
 8007bbe:	69fa      	ldr	r2, [r7, #28]
 8007bc0:	440a      	add	r2, r1
 8007bc2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bc6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007bca:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007bcc:	e070      	b.n	8007cb0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007bce:	69bb      	ldr	r3, [r7, #24]
 8007bd0:	015a      	lsls	r2, r3, #5
 8007bd2:	69fb      	ldr	r3, [r7, #28]
 8007bd4:	4413      	add	r3, r2
 8007bd6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	69ba      	ldr	r2, [r7, #24]
 8007bde:	0151      	lsls	r1, r2, #5
 8007be0:	69fa      	ldr	r2, [r7, #28]
 8007be2:	440a      	add	r2, r1
 8007be4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007be8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007bec:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007bee:	e05f      	b.n	8007cb0 <USB_HC_Halt+0x232>
            break;
 8007bf0:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007bf2:	e05d      	b.n	8007cb0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007bf4:	69bb      	ldr	r3, [r7, #24]
 8007bf6:	015a      	lsls	r2, r3, #5
 8007bf8:	69fb      	ldr	r3, [r7, #28]
 8007bfa:	4413      	add	r3, r2
 8007bfc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	69ba      	ldr	r2, [r7, #24]
 8007c04:	0151      	lsls	r1, r2, #5
 8007c06:	69fa      	ldr	r2, [r7, #28]
 8007c08:	440a      	add	r2, r1
 8007c0a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c0e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007c12:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007c14:	69fb      	ldr	r3, [r7, #28]
 8007c16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d133      	bne.n	8007c8c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007c24:	69bb      	ldr	r3, [r7, #24]
 8007c26:	015a      	lsls	r2, r3, #5
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	4413      	add	r3, r2
 8007c2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	69ba      	ldr	r2, [r7, #24]
 8007c34:	0151      	lsls	r1, r2, #5
 8007c36:	69fa      	ldr	r2, [r7, #28]
 8007c38:	440a      	add	r2, r1
 8007c3a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c3e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007c42:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c44:	69bb      	ldr	r3, [r7, #24]
 8007c46:	015a      	lsls	r2, r3, #5
 8007c48:	69fb      	ldr	r3, [r7, #28]
 8007c4a:	4413      	add	r3, r2
 8007c4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	69ba      	ldr	r2, [r7, #24]
 8007c54:	0151      	lsls	r1, r2, #5
 8007c56:	69fa      	ldr	r2, [r7, #28]
 8007c58:	440a      	add	r2, r1
 8007c5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c5e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007c62:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007c64:	68bb      	ldr	r3, [r7, #8]
 8007c66:	3301      	adds	r3, #1
 8007c68:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007c6a:	68bb      	ldr	r3, [r7, #8]
 8007c6c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c70:	d81d      	bhi.n	8007cae <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007c72:	69bb      	ldr	r3, [r7, #24]
 8007c74:	015a      	lsls	r2, r3, #5
 8007c76:	69fb      	ldr	r3, [r7, #28]
 8007c78:	4413      	add	r3, r2
 8007c7a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c84:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c88:	d0ec      	beq.n	8007c64 <USB_HC_Halt+0x1e6>
 8007c8a:	e011      	b.n	8007cb0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c8c:	69bb      	ldr	r3, [r7, #24]
 8007c8e:	015a      	lsls	r2, r3, #5
 8007c90:	69fb      	ldr	r3, [r7, #28]
 8007c92:	4413      	add	r3, r2
 8007c94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	69ba      	ldr	r2, [r7, #24]
 8007c9c:	0151      	lsls	r1, r2, #5
 8007c9e:	69fa      	ldr	r2, [r7, #28]
 8007ca0:	440a      	add	r2, r1
 8007ca2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007ca6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007caa:	6013      	str	r3, [r2, #0]
 8007cac:	e000      	b.n	8007cb0 <USB_HC_Halt+0x232>
          break;
 8007cae:	bf00      	nop
    }
  }

  return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3724      	adds	r7, #36	@ 0x24
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbc:	4770      	bx	lr
	...

08007cc0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b087      	sub	sp, #28
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	460b      	mov	r3, r1
 8007cca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007cd0:	78fb      	ldrb	r3, [r7, #3]
 8007cd2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	04da      	lsls	r2, r3, #19
 8007cdc:	4b15      	ldr	r3, [pc, #84]	@ (8007d34 <USB_DoPing+0x74>)
 8007cde:	4013      	ands	r3, r2
 8007ce0:	693a      	ldr	r2, [r7, #16]
 8007ce2:	0151      	lsls	r1, r2, #5
 8007ce4:	697a      	ldr	r2, [r7, #20]
 8007ce6:	440a      	add	r2, r1
 8007ce8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007cf0:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007cf2:	693b      	ldr	r3, [r7, #16]
 8007cf4:	015a      	lsls	r2, r3, #5
 8007cf6:	697b      	ldr	r3, [r7, #20]
 8007cf8:	4413      	add	r3, r2
 8007cfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007d02:	68bb      	ldr	r3, [r7, #8]
 8007d04:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007d08:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007d0a:	68bb      	ldr	r3, [r7, #8]
 8007d0c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007d10:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007d12:	693b      	ldr	r3, [r7, #16]
 8007d14:	015a      	lsls	r2, r3, #5
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	4413      	add	r3, r2
 8007d1a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d1e:	461a      	mov	r2, r3
 8007d20:	68bb      	ldr	r3, [r7, #8]
 8007d22:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007d24:	2300      	movs	r3, #0
}
 8007d26:	4618      	mov	r0, r3
 8007d28:	371c      	adds	r7, #28
 8007d2a:	46bd      	mov	sp, r7
 8007d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d30:	4770      	bx	lr
 8007d32:	bf00      	nop
 8007d34:	1ff80000 	.word	0x1ff80000

08007d38 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b088      	sub	sp, #32
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d40:	2300      	movs	r3, #0
 8007d42:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007d48:	2300      	movs	r3, #0
 8007d4a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f7fe ff8c 	bl	8006c6a <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d52:	2110      	movs	r1, #16
 8007d54:	6878      	ldr	r0, [r7, #4]
 8007d56:	f7fe ffe5 	bl	8006d24 <USB_FlushTxFifo>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d001      	beq.n	8007d64 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007d60:	2301      	movs	r3, #1
 8007d62:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f7ff f80f 	bl	8006d88 <USB_FlushRxFifo>
 8007d6a:	4603      	mov	r3, r0
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d001      	beq.n	8007d74 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007d70:	2301      	movs	r3, #1
 8007d72:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007d74:	2300      	movs	r3, #0
 8007d76:	61bb      	str	r3, [r7, #24]
 8007d78:	e01f      	b.n	8007dba <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007d7a:	69bb      	ldr	r3, [r7, #24]
 8007d7c:	015a      	lsls	r2, r3, #5
 8007d7e:	697b      	ldr	r3, [r7, #20]
 8007d80:	4413      	add	r3, r2
 8007d82:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007d90:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007d92:	693b      	ldr	r3, [r7, #16]
 8007d94:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007d98:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007da0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007da2:	69bb      	ldr	r3, [r7, #24]
 8007da4:	015a      	lsls	r2, r3, #5
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	4413      	add	r3, r2
 8007daa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dae:	461a      	mov	r2, r3
 8007db0:	693b      	ldr	r3, [r7, #16]
 8007db2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007db4:	69bb      	ldr	r3, [r7, #24]
 8007db6:	3301      	adds	r3, #1
 8007db8:	61bb      	str	r3, [r7, #24]
 8007dba:	69bb      	ldr	r3, [r7, #24]
 8007dbc:	2b0f      	cmp	r3, #15
 8007dbe:	d9dc      	bls.n	8007d7a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007dc0:	2300      	movs	r3, #0
 8007dc2:	61bb      	str	r3, [r7, #24]
 8007dc4:	e034      	b.n	8007e30 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007dc6:	69bb      	ldr	r3, [r7, #24]
 8007dc8:	015a      	lsls	r2, r3, #5
 8007dca:	697b      	ldr	r3, [r7, #20]
 8007dcc:	4413      	add	r3, r2
 8007dce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007ddc:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007dde:	693b      	ldr	r3, [r7, #16]
 8007de0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007de4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007de6:	693b      	ldr	r3, [r7, #16]
 8007de8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007dec:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	015a      	lsls	r2, r3, #5
 8007df2:	697b      	ldr	r3, [r7, #20]
 8007df4:	4413      	add	r3, r2
 8007df6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dfa:	461a      	mov	r2, r3
 8007dfc:	693b      	ldr	r3, [r7, #16]
 8007dfe:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	3301      	adds	r3, #1
 8007e04:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007e0c:	d80c      	bhi.n	8007e28 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007e0e:	69bb      	ldr	r3, [r7, #24]
 8007e10:	015a      	lsls	r2, r3, #5
 8007e12:	697b      	ldr	r3, [r7, #20]
 8007e14:	4413      	add	r3, r2
 8007e16:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007e20:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007e24:	d0ec      	beq.n	8007e00 <USB_StopHost+0xc8>
 8007e26:	e000      	b.n	8007e2a <USB_StopHost+0xf2>
        break;
 8007e28:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007e2a:	69bb      	ldr	r3, [r7, #24]
 8007e2c:	3301      	adds	r3, #1
 8007e2e:	61bb      	str	r3, [r7, #24]
 8007e30:	69bb      	ldr	r3, [r7, #24]
 8007e32:	2b0f      	cmp	r3, #15
 8007e34:	d9c7      	bls.n	8007dc6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007e36:	697b      	ldr	r3, [r7, #20]
 8007e38:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e3c:	461a      	mov	r2, r3
 8007e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e42:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f04f 32ff 	mov.w	r2, #4294967295
 8007e4a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f7fe fefb 	bl	8006c48 <USB_EnableGlobalInt>

  return ret;
 8007e52:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3720      	adds	r7, #32
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007e5c:	b590      	push	{r4, r7, lr}
 8007e5e:	b089      	sub	sp, #36	@ 0x24
 8007e60:	af04      	add	r7, sp, #16
 8007e62:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007e64:	2301      	movs	r3, #1
 8007e66:	2202      	movs	r2, #2
 8007e68:	2102      	movs	r1, #2
 8007e6a:	6878      	ldr	r0, [r7, #4]
 8007e6c:	f000 fc85 	bl	800877a <USBH_FindInterface>
 8007e70:	4603      	mov	r3, r0
 8007e72:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007e74:	7bfb      	ldrb	r3, [r7, #15]
 8007e76:	2bff      	cmp	r3, #255	@ 0xff
 8007e78:	d002      	beq.n	8007e80 <USBH_CDC_InterfaceInit+0x24>
 8007e7a:	7bfb      	ldrb	r3, [r7, #15]
 8007e7c:	2b01      	cmp	r3, #1
 8007e7e:	d901      	bls.n	8007e84 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007e80:	2302      	movs	r3, #2
 8007e82:	e13d      	b.n	8008100 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007e84:	7bfb      	ldrb	r3, [r7, #15]
 8007e86:	4619      	mov	r1, r3
 8007e88:	6878      	ldr	r0, [r7, #4]
 8007e8a:	f000 fc5a 	bl	8008742 <USBH_SelectInterface>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007e92:	7bbb      	ldrb	r3, [r7, #14]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d001      	beq.n	8007e9c <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007e98:	2302      	movs	r3, #2
 8007e9a:	e131      	b.n	8008100 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007ea2:	2050      	movs	r0, #80	@ 0x50
 8007ea4:	f002 fb6a 	bl	800a57c <malloc>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007eb2:	69db      	ldr	r3, [r3, #28]
 8007eb4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d101      	bne.n	8007ec0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007ebc:	2302      	movs	r3, #2
 8007ebe:	e11f      	b.n	8008100 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007ec0:	2250      	movs	r2, #80	@ 0x50
 8007ec2:	2100      	movs	r1, #0
 8007ec4:	68b8      	ldr	r0, [r7, #8]
 8007ec6:	f002 fc17 	bl	800a6f8 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007eca:	7bfb      	ldrb	r3, [r7, #15]
 8007ecc:	687a      	ldr	r2, [r7, #4]
 8007ece:	211a      	movs	r1, #26
 8007ed0:	fb01 f303 	mul.w	r3, r1, r3
 8007ed4:	4413      	add	r3, r2
 8007ed6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007eda:	781b      	ldrb	r3, [r3, #0]
 8007edc:	b25b      	sxtb	r3, r3
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	da15      	bge.n	8007f0e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007ee2:	7bfb      	ldrb	r3, [r7, #15]
 8007ee4:	687a      	ldr	r2, [r7, #4]
 8007ee6:	211a      	movs	r1, #26
 8007ee8:	fb01 f303 	mul.w	r3, r1, r3
 8007eec:	4413      	add	r3, r2
 8007eee:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007ef2:	781a      	ldrb	r2, [r3, #0]
 8007ef4:	68bb      	ldr	r3, [r7, #8]
 8007ef6:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007ef8:	7bfb      	ldrb	r3, [r7, #15]
 8007efa:	687a      	ldr	r2, [r7, #4]
 8007efc:	211a      	movs	r1, #26
 8007efe:	fb01 f303 	mul.w	r3, r1, r3
 8007f02:	4413      	add	r3, r2
 8007f04:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007f08:	881a      	ldrh	r2, [r3, #0]
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	785b      	ldrb	r3, [r3, #1]
 8007f12:	4619      	mov	r1, r3
 8007f14:	6878      	ldr	r0, [r7, #4]
 8007f16:	f001 ffbe 	bl	8009e96 <USBH_AllocPipe>
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	461a      	mov	r2, r3
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007f22:	68bb      	ldr	r3, [r7, #8]
 8007f24:	7819      	ldrb	r1, [r3, #0]
 8007f26:	68bb      	ldr	r3, [r7, #8]
 8007f28:	7858      	ldrb	r0, [r3, #1]
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007f36:	68ba      	ldr	r2, [r7, #8]
 8007f38:	8952      	ldrh	r2, [r2, #10]
 8007f3a:	9202      	str	r2, [sp, #8]
 8007f3c:	2203      	movs	r2, #3
 8007f3e:	9201      	str	r2, [sp, #4]
 8007f40:	9300      	str	r3, [sp, #0]
 8007f42:	4623      	mov	r3, r4
 8007f44:	4602      	mov	r2, r0
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f001 ff76 	bl	8009e38 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007f4c:	68bb      	ldr	r3, [r7, #8]
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	2200      	movs	r2, #0
 8007f52:	4619      	mov	r1, r3
 8007f54:	6878      	ldr	r0, [r7, #4]
 8007f56:	f002 fa8b 	bl	800a470 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007f5a:	2300      	movs	r3, #0
 8007f5c:	2200      	movs	r2, #0
 8007f5e:	210a      	movs	r1, #10
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f000 fc0a 	bl	800877a <USBH_FindInterface>
 8007f66:	4603      	mov	r3, r0
 8007f68:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007f6a:	7bfb      	ldrb	r3, [r7, #15]
 8007f6c:	2bff      	cmp	r3, #255	@ 0xff
 8007f6e:	d002      	beq.n	8007f76 <USBH_CDC_InterfaceInit+0x11a>
 8007f70:	7bfb      	ldrb	r3, [r7, #15]
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d901      	bls.n	8007f7a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007f76:	2302      	movs	r3, #2
 8007f78:	e0c2      	b.n	8008100 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007f7a:	7bfb      	ldrb	r3, [r7, #15]
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	211a      	movs	r1, #26
 8007f80:	fb01 f303 	mul.w	r3, r1, r3
 8007f84:	4413      	add	r3, r2
 8007f86:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	b25b      	sxtb	r3, r3
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	da16      	bge.n	8007fc0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007f92:	7bfb      	ldrb	r3, [r7, #15]
 8007f94:	687a      	ldr	r2, [r7, #4]
 8007f96:	211a      	movs	r1, #26
 8007f98:	fb01 f303 	mul.w	r3, r1, r3
 8007f9c:	4413      	add	r3, r2
 8007f9e:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007fa2:	781a      	ldrb	r2, [r3, #0]
 8007fa4:	68bb      	ldr	r3, [r7, #8]
 8007fa6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007fa8:	7bfb      	ldrb	r3, [r7, #15]
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	211a      	movs	r1, #26
 8007fae:	fb01 f303 	mul.w	r3, r1, r3
 8007fb2:	4413      	add	r3, r2
 8007fb4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007fb8:	881a      	ldrh	r2, [r3, #0]
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	835a      	strh	r2, [r3, #26]
 8007fbe:	e015      	b.n	8007fec <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007fc0:	7bfb      	ldrb	r3, [r7, #15]
 8007fc2:	687a      	ldr	r2, [r7, #4]
 8007fc4:	211a      	movs	r1, #26
 8007fc6:	fb01 f303 	mul.w	r3, r1, r3
 8007fca:	4413      	add	r3, r2
 8007fcc:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007fd0:	781a      	ldrb	r2, [r3, #0]
 8007fd2:	68bb      	ldr	r3, [r7, #8]
 8007fd4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007fd6:	7bfb      	ldrb	r3, [r7, #15]
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	211a      	movs	r1, #26
 8007fdc:	fb01 f303 	mul.w	r3, r1, r3
 8007fe0:	4413      	add	r3, r2
 8007fe2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007fe6:	881a      	ldrh	r2, [r3, #0]
 8007fe8:	68bb      	ldr	r3, [r7, #8]
 8007fea:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007fec:	7bfb      	ldrb	r3, [r7, #15]
 8007fee:	687a      	ldr	r2, [r7, #4]
 8007ff0:	211a      	movs	r1, #26
 8007ff2:	fb01 f303 	mul.w	r3, r1, r3
 8007ff6:	4413      	add	r3, r2
 8007ff8:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	b25b      	sxtb	r3, r3
 8008000:	2b00      	cmp	r3, #0
 8008002:	da16      	bge.n	8008032 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008004:	7bfb      	ldrb	r3, [r7, #15]
 8008006:	687a      	ldr	r2, [r7, #4]
 8008008:	211a      	movs	r1, #26
 800800a:	fb01 f303 	mul.w	r3, r1, r3
 800800e:	4413      	add	r3, r2
 8008010:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008014:	781a      	ldrb	r2, [r3, #0]
 8008016:	68bb      	ldr	r3, [r7, #8]
 8008018:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800801a:	7bfb      	ldrb	r3, [r7, #15]
 800801c:	687a      	ldr	r2, [r7, #4]
 800801e:	211a      	movs	r1, #26
 8008020:	fb01 f303 	mul.w	r3, r1, r3
 8008024:	4413      	add	r3, r2
 8008026:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800802a:	881a      	ldrh	r2, [r3, #0]
 800802c:	68bb      	ldr	r3, [r7, #8]
 800802e:	835a      	strh	r2, [r3, #26]
 8008030:	e015      	b.n	800805e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008032:	7bfb      	ldrb	r3, [r7, #15]
 8008034:	687a      	ldr	r2, [r7, #4]
 8008036:	211a      	movs	r1, #26
 8008038:	fb01 f303 	mul.w	r3, r1, r3
 800803c:	4413      	add	r3, r2
 800803e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008042:	781a      	ldrb	r2, [r3, #0]
 8008044:	68bb      	ldr	r3, [r7, #8]
 8008046:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008048:	7bfb      	ldrb	r3, [r7, #15]
 800804a:	687a      	ldr	r2, [r7, #4]
 800804c:	211a      	movs	r1, #26
 800804e:	fb01 f303 	mul.w	r3, r1, r3
 8008052:	4413      	add	r3, r2
 8008054:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008058:	881a      	ldrh	r2, [r3, #0]
 800805a:	68bb      	ldr	r3, [r7, #8]
 800805c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	7b9b      	ldrb	r3, [r3, #14]
 8008062:	4619      	mov	r1, r3
 8008064:	6878      	ldr	r0, [r7, #4]
 8008066:	f001 ff16 	bl	8009e96 <USBH_AllocPipe>
 800806a:	4603      	mov	r3, r0
 800806c:	461a      	mov	r2, r3
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	7bdb      	ldrb	r3, [r3, #15]
 8008076:	4619      	mov	r1, r3
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f001 ff0c 	bl	8009e96 <USBH_AllocPipe>
 800807e:	4603      	mov	r3, r0
 8008080:	461a      	mov	r2, r3
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008086:	68bb      	ldr	r3, [r7, #8]
 8008088:	7b59      	ldrb	r1, [r3, #13]
 800808a:	68bb      	ldr	r3, [r7, #8]
 800808c:	7b98      	ldrb	r0, [r3, #14]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	8b12      	ldrh	r2, [r2, #24]
 800809e:	9202      	str	r2, [sp, #8]
 80080a0:	2202      	movs	r2, #2
 80080a2:	9201      	str	r2, [sp, #4]
 80080a4:	9300      	str	r3, [sp, #0]
 80080a6:	4623      	mov	r3, r4
 80080a8:	4602      	mov	r2, r0
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	f001 fec4 	bl	8009e38 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80080b0:	68bb      	ldr	r3, [r7, #8]
 80080b2:	7b19      	ldrb	r1, [r3, #12]
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	7bd8      	ldrb	r0, [r3, #15]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80080c4:	68ba      	ldr	r2, [r7, #8]
 80080c6:	8b52      	ldrh	r2, [r2, #26]
 80080c8:	9202      	str	r2, [sp, #8]
 80080ca:	2202      	movs	r2, #2
 80080cc:	9201      	str	r2, [sp, #4]
 80080ce:	9300      	str	r3, [sp, #0]
 80080d0:	4623      	mov	r3, r4
 80080d2:	4602      	mov	r2, r0
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f001 feaf 	bl	8009e38 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80080da:	68bb      	ldr	r3, [r7, #8]
 80080dc:	2200      	movs	r2, #0
 80080de:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80080e2:	68bb      	ldr	r3, [r7, #8]
 80080e4:	7b5b      	ldrb	r3, [r3, #13]
 80080e6:	2200      	movs	r2, #0
 80080e8:	4619      	mov	r1, r3
 80080ea:	6878      	ldr	r0, [r7, #4]
 80080ec:	f002 f9c0 	bl	800a470 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	7b1b      	ldrb	r3, [r3, #12]
 80080f4:	2200      	movs	r2, #0
 80080f6:	4619      	mov	r1, r3
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f002 f9b9 	bl	800a470 <USBH_LL_SetToggle>

  return USBH_OK;
 80080fe:	2300      	movs	r3, #0
}
 8008100:	4618      	mov	r0, r3
 8008102:	3714      	adds	r7, #20
 8008104:	46bd      	mov	sp, r7
 8008106:	bd90      	pop	{r4, r7, pc}

08008108 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008108:	b580      	push	{r7, lr}
 800810a:	b084      	sub	sp, #16
 800810c:	af00      	add	r7, sp, #0
 800810e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008116:	69db      	ldr	r3, [r3, #28]
 8008118:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	781b      	ldrb	r3, [r3, #0]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d00e      	beq.n	8008140 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	781b      	ldrb	r3, [r3, #0]
 8008126:	4619      	mov	r1, r3
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f001 fea4 	bl	8009e76 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	4619      	mov	r1, r3
 8008134:	6878      	ldr	r0, [r7, #4]
 8008136:	f001 fecf 	bl	8009ed8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	2200      	movs	r2, #0
 800813e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	7b1b      	ldrb	r3, [r3, #12]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d00e      	beq.n	8008166 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	7b1b      	ldrb	r3, [r3, #12]
 800814c:	4619      	mov	r1, r3
 800814e:	6878      	ldr	r0, [r7, #4]
 8008150:	f001 fe91 	bl	8009e76 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	7b1b      	ldrb	r3, [r3, #12]
 8008158:	4619      	mov	r1, r3
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f001 febc 	bl	8009ed8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	2200      	movs	r2, #0
 8008164:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	7b5b      	ldrb	r3, [r3, #13]
 800816a:	2b00      	cmp	r3, #0
 800816c:	d00e      	beq.n	800818c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	7b5b      	ldrb	r3, [r3, #13]
 8008172:	4619      	mov	r1, r3
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f001 fe7e 	bl	8009e76 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	7b5b      	ldrb	r3, [r3, #13]
 800817e:	4619      	mov	r1, r3
 8008180:	6878      	ldr	r0, [r7, #4]
 8008182:	f001 fea9 	bl	8009ed8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	2200      	movs	r2, #0
 800818a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008192:	69db      	ldr	r3, [r3, #28]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d00b      	beq.n	80081b0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800819e:	69db      	ldr	r3, [r3, #28]
 80081a0:	4618      	mov	r0, r3
 80081a2:	f002 f9f3 	bl	800a58c <free>
    phost->pActiveClass->pData = 0U;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80081ac:	2200      	movs	r2, #0
 80081ae:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80081b0:	2300      	movs	r3, #0
}
 80081b2:	4618      	mov	r0, r3
 80081b4:	3710      	adds	r7, #16
 80081b6:	46bd      	mov	sp, r7
 80081b8:	bd80      	pop	{r7, pc}

080081ba <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b084      	sub	sp, #16
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80081c8:	69db      	ldr	r3, [r3, #28]
 80081ca:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	3340      	adds	r3, #64	@ 0x40
 80081d0:	4619      	mov	r1, r3
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f000 f8b1 	bl	800833a <GetLineCoding>
 80081d8:	4603      	mov	r3, r0
 80081da:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80081dc:	7afb      	ldrb	r3, [r7, #11]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d105      	bne.n	80081ee <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80081e8:	2102      	movs	r1, #2
 80081ea:	6878      	ldr	r0, [r7, #4]
 80081ec:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80081ee:	7afb      	ldrb	r3, [r7, #11]
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3710      	adds	r7, #16
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008200:	2301      	movs	r3, #1
 8008202:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008204:	2300      	movs	r3, #0
 8008206:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800820e:	69db      	ldr	r3, [r3, #28]
 8008210:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008212:	68bb      	ldr	r3, [r7, #8]
 8008214:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 8008218:	2b04      	cmp	r3, #4
 800821a:	d877      	bhi.n	800830c <USBH_CDC_Process+0x114>
 800821c:	a201      	add	r2, pc, #4	@ (adr r2, 8008224 <USBH_CDC_Process+0x2c>)
 800821e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008222:	bf00      	nop
 8008224:	08008239 	.word	0x08008239
 8008228:	0800823f 	.word	0x0800823f
 800822c:	0800826f 	.word	0x0800826f
 8008230:	080082e3 	.word	0x080082e3
 8008234:	080082f1 	.word	0x080082f1
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8008238:	2300      	movs	r3, #0
 800823a:	73fb      	strb	r3, [r7, #15]
      break;
 800823c:	e06d      	b.n	800831a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008242:	4619      	mov	r1, r3
 8008244:	6878      	ldr	r0, [r7, #4]
 8008246:	f000 f897 	bl	8008378 <SetLineCoding>
 800824a:	4603      	mov	r3, r0
 800824c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800824e:	7bbb      	ldrb	r3, [r7, #14]
 8008250:	2b00      	cmp	r3, #0
 8008252:	d104      	bne.n	800825e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	2202      	movs	r2, #2
 8008258:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800825c:	e058      	b.n	8008310 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800825e:	7bbb      	ldrb	r3, [r7, #14]
 8008260:	2b01      	cmp	r3, #1
 8008262:	d055      	beq.n	8008310 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008264:	68bb      	ldr	r3, [r7, #8]
 8008266:	2204      	movs	r2, #4
 8008268:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800826c:	e050      	b.n	8008310 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800826e:	68bb      	ldr	r3, [r7, #8]
 8008270:	3340      	adds	r3, #64	@ 0x40
 8008272:	4619      	mov	r1, r3
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f000 f860 	bl	800833a <GetLineCoding>
 800827a:	4603      	mov	r3, r0
 800827c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800827e:	7bbb      	ldrb	r3, [r7, #14]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d126      	bne.n	80082d2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	2200      	movs	r2, #0
 8008288:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800828c:	68bb      	ldr	r3, [r7, #8]
 800828e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008296:	791b      	ldrb	r3, [r3, #4]
 8008298:	429a      	cmp	r2, r3
 800829a:	d13b      	bne.n	8008314 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082a6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d133      	bne.n	8008314 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 80082b2:	68bb      	ldr	r3, [r7, #8]
 80082b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082b6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d12b      	bne.n	8008314 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80082bc:	68bb      	ldr	r3, [r7, #8]
 80082be:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80082c4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80082c6:	429a      	cmp	r2, r3
 80082c8:	d124      	bne.n	8008314 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 f958 	bl	8008580 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80082d0:	e020      	b.n	8008314 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80082d2:	7bbb      	ldrb	r3, [r7, #14]
 80082d4:	2b01      	cmp	r3, #1
 80082d6:	d01d      	beq.n	8008314 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	2204      	movs	r2, #4
 80082dc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80082e0:	e018      	b.n	8008314 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80082e2:	6878      	ldr	r0, [r7, #4]
 80082e4:	f000 f867 	bl	80083b6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80082e8:	6878      	ldr	r0, [r7, #4]
 80082ea:	f000 f8da 	bl	80084a2 <CDC_ProcessReception>
      break;
 80082ee:	e014      	b.n	800831a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80082f0:	2100      	movs	r1, #0
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f001 f81a 	bl	800932c <USBH_ClrFeature>
 80082f8:	4603      	mov	r3, r0
 80082fa:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80082fc:	7bbb      	ldrb	r3, [r7, #14]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d10a      	bne.n	8008318 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	2200      	movs	r2, #0
 8008306:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800830a:	e005      	b.n	8008318 <USBH_CDC_Process+0x120>

    default:
      break;
 800830c:	bf00      	nop
 800830e:	e004      	b.n	800831a <USBH_CDC_Process+0x122>
      break;
 8008310:	bf00      	nop
 8008312:	e002      	b.n	800831a <USBH_CDC_Process+0x122>
      break;
 8008314:	bf00      	nop
 8008316:	e000      	b.n	800831a <USBH_CDC_Process+0x122>
      break;
 8008318:	bf00      	nop

  }

  return status;
 800831a:	7bfb      	ldrb	r3, [r7, #15]
}
 800831c:	4618      	mov	r0, r3
 800831e:	3710      	adds	r7, #16
 8008320:	46bd      	mov	sp, r7
 8008322:	bd80      	pop	{r7, pc}

08008324 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800832c:	2300      	movs	r3, #0
}
 800832e:	4618      	mov	r0, r3
 8008330:	370c      	adds	r7, #12
 8008332:	46bd      	mov	sp, r7
 8008334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008338:	4770      	bx	lr

0800833a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800833a:	b580      	push	{r7, lr}
 800833c:	b082      	sub	sp, #8
 800833e:	af00      	add	r7, sp, #0
 8008340:	6078      	str	r0, [r7, #4]
 8008342:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	22a1      	movs	r2, #161	@ 0xa1
 8008348:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	2221      	movs	r2, #33	@ 0x21
 800834e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2200      	movs	r2, #0
 8008354:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	2200      	movs	r2, #0
 800835a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	2207      	movs	r2, #7
 8008360:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008362:	683b      	ldr	r3, [r7, #0]
 8008364:	2207      	movs	r2, #7
 8008366:	4619      	mov	r1, r3
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f001 fb14 	bl	8009996 <USBH_CtlReq>
 800836e:	4603      	mov	r3, r0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3708      	adds	r7, #8
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2221      	movs	r2, #33	@ 0x21
 8008386:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2220      	movs	r2, #32
 800838c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	2200      	movs	r2, #0
 8008392:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2200      	movs	r2, #0
 8008398:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2207      	movs	r2, #7
 800839e:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80083a0:	683b      	ldr	r3, [r7, #0]
 80083a2:	2207      	movs	r2, #7
 80083a4:	4619      	mov	r1, r3
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f001 faf5 	bl	8009996 <USBH_CtlReq>
 80083ac:	4603      	mov	r3, r0
}
 80083ae:	4618      	mov	r0, r3
 80083b0:	3708      	adds	r7, #8
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b086      	sub	sp, #24
 80083ba:	af02      	add	r7, sp, #8
 80083bc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80083c4:	69db      	ldr	r3, [r3, #28]
 80083c6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80083c8:	2300      	movs	r3, #0
 80083ca:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80083d2:	2b01      	cmp	r3, #1
 80083d4:	d002      	beq.n	80083dc <CDC_ProcessTransmission+0x26>
 80083d6:	2b02      	cmp	r3, #2
 80083d8:	d023      	beq.n	8008422 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80083da:	e05e      	b.n	800849a <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083e0:	68fa      	ldr	r2, [r7, #12]
 80083e2:	8b12      	ldrh	r2, [r2, #24]
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d90b      	bls.n	8008400 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	69d9      	ldr	r1, [r3, #28]
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	8b1a      	ldrh	r2, [r3, #24]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	7b5b      	ldrb	r3, [r3, #13]
 80083f4:	2001      	movs	r0, #1
 80083f6:	9000      	str	r0, [sp, #0]
 80083f8:	6878      	ldr	r0, [r7, #4]
 80083fa:	f001 fcda 	bl	8009db2 <USBH_BulkSendData>
 80083fe:	e00b      	b.n	8008418 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 8008408:	b29a      	uxth	r2, r3
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	7b5b      	ldrb	r3, [r3, #13]
 800840e:	2001      	movs	r0, #1
 8008410:	9000      	str	r0, [sp, #0]
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f001 fccd 	bl	8009db2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2202      	movs	r2, #2
 800841c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008420:	e03b      	b.n	800849a <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	7b5b      	ldrb	r3, [r3, #13]
 8008426:	4619      	mov	r1, r3
 8008428:	6878      	ldr	r0, [r7, #4]
 800842a:	f001 fff7 	bl	800a41c <USBH_LL_GetURBState>
 800842e:	4603      	mov	r3, r0
 8008430:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008432:	7afb      	ldrb	r3, [r7, #11]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d128      	bne.n	800848a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800843c:	68fa      	ldr	r2, [r7, #12]
 800843e:	8b12      	ldrh	r2, [r2, #24]
 8008440:	4293      	cmp	r3, r2
 8008442:	d90e      	bls.n	8008462 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008448:	68fa      	ldr	r2, [r7, #12]
 800844a:	8b12      	ldrh	r2, [r2, #24]
 800844c:	1a9a      	subs	r2, r3, r2
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	69db      	ldr	r3, [r3, #28]
 8008456:	68fa      	ldr	r2, [r7, #12]
 8008458:	8b12      	ldrh	r2, [r2, #24]
 800845a:	441a      	add	r2, r3
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	61da      	str	r2, [r3, #28]
 8008460:	e002      	b.n	8008468 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2200      	movs	r2, #0
 8008466:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800846c:	2b00      	cmp	r3, #0
 800846e:	d004      	beq.n	800847a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	2201      	movs	r2, #1
 8008474:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008478:	e00e      	b.n	8008498 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	2200      	movs	r2, #0
 800847e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008482:	6878      	ldr	r0, [r7, #4]
 8008484:	f000 f868 	bl	8008558 <USBH_CDC_TransmitCallback>
      break;
 8008488:	e006      	b.n	8008498 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800848a:	7afb      	ldrb	r3, [r7, #11]
 800848c:	2b02      	cmp	r3, #2
 800848e:	d103      	bne.n	8008498 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	2201      	movs	r2, #1
 8008494:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008498:	bf00      	nop
  }
}
 800849a:	bf00      	nop
 800849c:	3710      	adds	r7, #16
 800849e:	46bd      	mov	sp, r7
 80084a0:	bd80      	pop	{r7, pc}

080084a2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80084a2:	b580      	push	{r7, lr}
 80084a4:	b086      	sub	sp, #24
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80084b0:	69db      	ldr	r3, [r3, #28]
 80084b2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80084b4:	2300      	movs	r3, #0
 80084b6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80084b8:	697b      	ldr	r3, [r7, #20]
 80084ba:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 80084be:	2b03      	cmp	r3, #3
 80084c0:	d002      	beq.n	80084c8 <CDC_ProcessReception+0x26>
 80084c2:	2b04      	cmp	r3, #4
 80084c4:	d00e      	beq.n	80084e4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80084c6:	e043      	b.n	8008550 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	6a19      	ldr	r1, [r3, #32]
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	8b5a      	ldrh	r2, [r3, #26]
 80084d0:	697b      	ldr	r3, [r7, #20]
 80084d2:	7b1b      	ldrb	r3, [r3, #12]
 80084d4:	6878      	ldr	r0, [r7, #4]
 80084d6:	f001 fc91 	bl	8009dfc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	2204      	movs	r2, #4
 80084de:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80084e2:	e035      	b.n	8008550 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80084e4:	697b      	ldr	r3, [r7, #20]
 80084e6:	7b1b      	ldrb	r3, [r3, #12]
 80084e8:	4619      	mov	r1, r3
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f001 ff96 	bl	800a41c <USBH_LL_GetURBState>
 80084f0:	4603      	mov	r3, r0
 80084f2:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80084f4:	7cfb      	ldrb	r3, [r7, #19]
 80084f6:	2b01      	cmp	r3, #1
 80084f8:	d129      	bne.n	800854e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	7b1b      	ldrb	r3, [r3, #12]
 80084fe:	4619      	mov	r1, r3
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f001 fef9 	bl	800a2f8 <USBH_LL_GetLastXferSize>
 8008506:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 8008508:	697b      	ldr	r3, [r7, #20]
 800850a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	429a      	cmp	r2, r3
 8008510:	d016      	beq.n	8008540 <CDC_ProcessReception+0x9e>
 8008512:	697b      	ldr	r3, [r7, #20]
 8008514:	8b5b      	ldrh	r3, [r3, #26]
 8008516:	461a      	mov	r2, r3
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	4293      	cmp	r3, r2
 800851c:	d110      	bne.n	8008540 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	1ad2      	subs	r2, r2, r3
 8008526:	697b      	ldr	r3, [r7, #20]
 8008528:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	6a1a      	ldr	r2, [r3, #32]
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	441a      	add	r2, r3
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8008536:	697b      	ldr	r3, [r7, #20]
 8008538:	2203      	movs	r2, #3
 800853a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800853e:	e006      	b.n	800854e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008540:	697b      	ldr	r3, [r7, #20]
 8008542:	2200      	movs	r2, #0
 8008544:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 f80f 	bl	800856c <USBH_CDC_ReceiveCallback>
      break;
 800854e:	bf00      	nop
  }
}
 8008550:	bf00      	nop
 8008552:	3718      	adds	r7, #24
 8008554:	46bd      	mov	sp, r7
 8008556:	bd80      	pop	{r7, pc}

08008558 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008560:	bf00      	nop
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008574:	bf00      	nop
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008588:	bf00      	nop
 800858a:	370c      	adds	r7, #12
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008594:	b580      	push	{r7, lr}
 8008596:	b084      	sub	sp, #16
 8008598:	af00      	add	r7, sp, #0
 800859a:	60f8      	str	r0, [r7, #12]
 800859c:	60b9      	str	r1, [r7, #8]
 800859e:	4613      	mov	r3, r2
 80085a0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d101      	bne.n	80085ac <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80085a8:	2302      	movs	r3, #2
 80085aa:	e029      	b.n	8008600 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	79fa      	ldrb	r2, [r7, #7]
 80085b0:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 80085bc:	68fb      	ldr	r3, [r7, #12]
 80085be:	2200      	movs	r2, #0
 80085c0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80085c4:	68f8      	ldr	r0, [r7, #12]
 80085c6:	f000 f81f 	bl	8008608 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	2200      	movs	r2, #0
 80085ce:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	2200      	movs	r2, #0
 80085d6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2200      	movs	r2, #0
 80085de:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2200      	movs	r2, #0
 80085e6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80085ea:	68bb      	ldr	r3, [r7, #8]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d003      	beq.n	80085f8 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	68ba      	ldr	r2, [r7, #8]
 80085f4:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80085f8:	68f8      	ldr	r0, [r7, #12]
 80085fa:	f001 fdbf 	bl	800a17c <USBH_LL_Init>

  return USBH_OK;
 80085fe:	2300      	movs	r3, #0
}
 8008600:	4618      	mov	r0, r3
 8008602:	3710      	adds	r7, #16
 8008604:	46bd      	mov	sp, r7
 8008606:	bd80      	pop	{r7, pc}

08008608 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008608:	b580      	push	{r7, lr}
 800860a:	b084      	sub	sp, #16
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008610:	2300      	movs	r3, #0
 8008612:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008614:	2300      	movs	r3, #0
 8008616:	60fb      	str	r3, [r7, #12]
 8008618:	e009      	b.n	800862e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800861a:	687a      	ldr	r2, [r7, #4]
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	33e0      	adds	r3, #224	@ 0xe0
 8008620:	009b      	lsls	r3, r3, #2
 8008622:	4413      	add	r3, r2
 8008624:	2200      	movs	r2, #0
 8008626:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	3301      	adds	r3, #1
 800862c:	60fb      	str	r3, [r7, #12]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	2b0f      	cmp	r3, #15
 8008632:	d9f2      	bls.n	800861a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008634:	2300      	movs	r3, #0
 8008636:	60fb      	str	r3, [r7, #12]
 8008638:	e009      	b.n	800864e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800863a:	687a      	ldr	r2, [r7, #4]
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	4413      	add	r3, r2
 8008640:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008644:	2200      	movs	r2, #0
 8008646:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	3301      	adds	r3, #1
 800864c:	60fb      	str	r3, [r7, #12]
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008654:	d3f1      	bcc.n	800863a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	2200      	movs	r2, #0
 8008660:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2201      	movs	r2, #1
 8008666:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2200      	movs	r2, #0
 800866c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	2201      	movs	r2, #1
 8008674:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2240      	movs	r2, #64	@ 0x40
 800867a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2200      	movs	r2, #0
 8008680:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	2200      	movs	r2, #0
 8008686:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2201      	movs	r2, #1
 800868e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	2200      	movs	r2, #0
 800869e:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	331c      	adds	r3, #28
 80086a6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80086aa:	2100      	movs	r1, #0
 80086ac:	4618      	mov	r0, r3
 80086ae:	f002 f823 	bl	800a6f8 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80086b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80086bc:	2100      	movs	r1, #0
 80086be:	4618      	mov	r0, r3
 80086c0:	f002 f81a 	bl	800a6f8 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80086ca:	2212      	movs	r2, #18
 80086cc:	2100      	movs	r1, #0
 80086ce:	4618      	mov	r0, r3
 80086d0:	f002 f812 	bl	800a6f8 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80086da:	223e      	movs	r2, #62	@ 0x3e
 80086dc:	2100      	movs	r1, #0
 80086de:	4618      	mov	r0, r3
 80086e0:	f002 f80a 	bl	800a6f8 <memset>

  return USBH_OK;
 80086e4:	2300      	movs	r3, #0
}
 80086e6:	4618      	mov	r0, r3
 80086e8:	3710      	adds	r7, #16
 80086ea:	46bd      	mov	sp, r7
 80086ec:	bd80      	pop	{r7, pc}

080086ee <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80086ee:	b480      	push	{r7}
 80086f0:	b085      	sub	sp, #20
 80086f2:	af00      	add	r7, sp, #0
 80086f4:	6078      	str	r0, [r7, #4]
 80086f6:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80086f8:	2300      	movs	r3, #0
 80086fa:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80086fc:	683b      	ldr	r3, [r7, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d016      	beq.n	8008730 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008708:	2b00      	cmp	r3, #0
 800870a:	d10e      	bne.n	800872a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008712:	1c59      	adds	r1, r3, #1
 8008714:	687a      	ldr	r2, [r7, #4]
 8008716:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	33de      	adds	r3, #222	@ 0xde
 800871e:	6839      	ldr	r1, [r7, #0]
 8008720:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008724:	2300      	movs	r3, #0
 8008726:	73fb      	strb	r3, [r7, #15]
 8008728:	e004      	b.n	8008734 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800872a:	2302      	movs	r3, #2
 800872c:	73fb      	strb	r3, [r7, #15]
 800872e:	e001      	b.n	8008734 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008730:	2302      	movs	r3, #2
 8008732:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008734:	7bfb      	ldrb	r3, [r7, #15]
}
 8008736:	4618      	mov	r0, r3
 8008738:	3714      	adds	r7, #20
 800873a:	46bd      	mov	sp, r7
 800873c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008740:	4770      	bx	lr

08008742 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008742:	b480      	push	{r7}
 8008744:	b085      	sub	sp, #20
 8008746:	af00      	add	r7, sp, #0
 8008748:	6078      	str	r0, [r7, #4]
 800874a:	460b      	mov	r3, r1
 800874c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800874e:	2300      	movs	r3, #0
 8008750:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008758:	78fa      	ldrb	r2, [r7, #3]
 800875a:	429a      	cmp	r2, r3
 800875c:	d204      	bcs.n	8008768 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	78fa      	ldrb	r2, [r7, #3]
 8008762:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008766:	e001      	b.n	800876c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008768:	2302      	movs	r3, #2
 800876a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800876c:	7bfb      	ldrb	r3, [r7, #15]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3714      	adds	r7, #20
 8008772:	46bd      	mov	sp, r7
 8008774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008778:	4770      	bx	lr

0800877a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800877a:	b480      	push	{r7}
 800877c:	b087      	sub	sp, #28
 800877e:	af00      	add	r7, sp, #0
 8008780:	6078      	str	r0, [r7, #4]
 8008782:	4608      	mov	r0, r1
 8008784:	4611      	mov	r1, r2
 8008786:	461a      	mov	r2, r3
 8008788:	4603      	mov	r3, r0
 800878a:	70fb      	strb	r3, [r7, #3]
 800878c:	460b      	mov	r3, r1
 800878e:	70bb      	strb	r3, [r7, #2]
 8008790:	4613      	mov	r3, r2
 8008792:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008794:	2300      	movs	r3, #0
 8008796:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008798:	2300      	movs	r3, #0
 800879a:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80087a2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80087a4:	e025      	b.n	80087f2 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80087a6:	7dfb      	ldrb	r3, [r7, #23]
 80087a8:	221a      	movs	r2, #26
 80087aa:	fb02 f303 	mul.w	r3, r2, r3
 80087ae:	3308      	adds	r3, #8
 80087b0:	68fa      	ldr	r2, [r7, #12]
 80087b2:	4413      	add	r3, r2
 80087b4:	3302      	adds	r3, #2
 80087b6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80087b8:	693b      	ldr	r3, [r7, #16]
 80087ba:	795b      	ldrb	r3, [r3, #5]
 80087bc:	78fa      	ldrb	r2, [r7, #3]
 80087be:	429a      	cmp	r2, r3
 80087c0:	d002      	beq.n	80087c8 <USBH_FindInterface+0x4e>
 80087c2:	78fb      	ldrb	r3, [r7, #3]
 80087c4:	2bff      	cmp	r3, #255	@ 0xff
 80087c6:	d111      	bne.n	80087ec <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80087c8:	693b      	ldr	r3, [r7, #16]
 80087ca:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80087cc:	78ba      	ldrb	r2, [r7, #2]
 80087ce:	429a      	cmp	r2, r3
 80087d0:	d002      	beq.n	80087d8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80087d2:	78bb      	ldrb	r3, [r7, #2]
 80087d4:	2bff      	cmp	r3, #255	@ 0xff
 80087d6:	d109      	bne.n	80087ec <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80087d8:	693b      	ldr	r3, [r7, #16]
 80087da:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80087dc:	787a      	ldrb	r2, [r7, #1]
 80087de:	429a      	cmp	r2, r3
 80087e0:	d002      	beq.n	80087e8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80087e2:	787b      	ldrb	r3, [r7, #1]
 80087e4:	2bff      	cmp	r3, #255	@ 0xff
 80087e6:	d101      	bne.n	80087ec <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80087e8:	7dfb      	ldrb	r3, [r7, #23]
 80087ea:	e006      	b.n	80087fa <USBH_FindInterface+0x80>
    }
    if_ix++;
 80087ec:	7dfb      	ldrb	r3, [r7, #23]
 80087ee:	3301      	adds	r3, #1
 80087f0:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80087f2:	7dfb      	ldrb	r3, [r7, #23]
 80087f4:	2b01      	cmp	r3, #1
 80087f6:	d9d6      	bls.n	80087a6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80087f8:	23ff      	movs	r3, #255	@ 0xff
}
 80087fa:	4618      	mov	r0, r3
 80087fc:	371c      	adds	r7, #28
 80087fe:	46bd      	mov	sp, r7
 8008800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008804:	4770      	bx	lr

08008806 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008806:	b580      	push	{r7, lr}
 8008808:	b082      	sub	sp, #8
 800880a:	af00      	add	r7, sp, #0
 800880c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800880e:	6878      	ldr	r0, [r7, #4]
 8008810:	f001 fcfa 	bl	800a208 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008814:	2101      	movs	r1, #1
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f001 fe13 	bl	800a442 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800881c:	2300      	movs	r3, #0
}
 800881e:	4618      	mov	r0, r3
 8008820:	3708      	adds	r7, #8
 8008822:	46bd      	mov	sp, r7
 8008824:	bd80      	pop	{r7, pc}
	...

08008828 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008828:	b580      	push	{r7, lr}
 800882a:	b088      	sub	sp, #32
 800882c:	af04      	add	r7, sp, #16
 800882e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008830:	2302      	movs	r3, #2
 8008832:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008834:	2300      	movs	r3, #0
 8008836:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800883e:	b2db      	uxtb	r3, r3
 8008840:	2b01      	cmp	r3, #1
 8008842:	d102      	bne.n	800884a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2203      	movs	r2, #3
 8008848:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	781b      	ldrb	r3, [r3, #0]
 800884e:	b2db      	uxtb	r3, r3
 8008850:	2b0b      	cmp	r3, #11
 8008852:	f200 81bb 	bhi.w	8008bcc <USBH_Process+0x3a4>
 8008856:	a201      	add	r2, pc, #4	@ (adr r2, 800885c <USBH_Process+0x34>)
 8008858:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800885c:	0800888d 	.word	0x0800888d
 8008860:	080088bf 	.word	0x080088bf
 8008864:	08008927 	.word	0x08008927
 8008868:	08008b67 	.word	0x08008b67
 800886c:	08008bcd 	.word	0x08008bcd
 8008870:	080089c7 	.word	0x080089c7
 8008874:	08008b0d 	.word	0x08008b0d
 8008878:	080089fd 	.word	0x080089fd
 800887c:	08008a1d 	.word	0x08008a1d
 8008880:	08008a3b 	.word	0x08008a3b
 8008884:	08008a7f 	.word	0x08008a7f
 8008888:	08008b4f 	.word	0x08008b4f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008892:	b2db      	uxtb	r3, r3
 8008894:	2b00      	cmp	r3, #0
 8008896:	f000 819b 	beq.w	8008bd0 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	2201      	movs	r2, #1
 800889e:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80088a0:	20c8      	movs	r0, #200	@ 0xc8
 80088a2:	f001 fe18 	bl	800a4d6 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	f001 fd0b 	bl	800a2c2 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	2200      	movs	r2, #0
 80088b0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 80088b4:	687b      	ldr	r3, [r7, #4]
 80088b6:	2200      	movs	r2, #0
 80088b8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80088bc:	e188      	b.n	8008bd0 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d107      	bne.n	80088d8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	2200      	movs	r2, #0
 80088cc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2202      	movs	r2, #2
 80088d4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80088d6:	e18a      	b.n	8008bee <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80088de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80088e2:	d914      	bls.n	800890e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80088ea:	3301      	adds	r3, #1
 80088ec:	b2da      	uxtb	r2, r3
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80088fa:	2b03      	cmp	r3, #3
 80088fc:	d903      	bls.n	8008906 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	220d      	movs	r2, #13
 8008902:	701a      	strb	r2, [r3, #0]
      break;
 8008904:	e173      	b.n	8008bee <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8008906:	687b      	ldr	r3, [r7, #4]
 8008908:	2200      	movs	r2, #0
 800890a:	701a      	strb	r2, [r3, #0]
      break;
 800890c:	e16f      	b.n	8008bee <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008914:	f103 020a 	add.w	r2, r3, #10
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800891e:	200a      	movs	r0, #10
 8008920:	f001 fdd9 	bl	800a4d6 <USBH_Delay>
      break;
 8008924:	e163      	b.n	8008bee <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800892c:	2b00      	cmp	r3, #0
 800892e:	d005      	beq.n	800893c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008936:	2104      	movs	r1, #4
 8008938:	6878      	ldr	r0, [r7, #4]
 800893a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800893c:	2064      	movs	r0, #100	@ 0x64
 800893e:	f001 fdca 	bl	800a4d6 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008942:	6878      	ldr	r0, [r7, #4]
 8008944:	f001 fc96 	bl	800a274 <USBH_LL_GetSpeed>
 8008948:	4603      	mov	r3, r0
 800894a:	461a      	mov	r2, r3
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	2205      	movs	r2, #5
 8008956:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008958:	2100      	movs	r1, #0
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f001 fa9b 	bl	8009e96 <USBH_AllocPipe>
 8008960:	4603      	mov	r3, r0
 8008962:	461a      	mov	r2, r3
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008968:	2180      	movs	r1, #128	@ 0x80
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f001 fa93 	bl	8009e96 <USBH_AllocPipe>
 8008970:	4603      	mov	r3, r0
 8008972:	461a      	mov	r2, r3
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	7919      	ldrb	r1, [r3, #4]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800898c:	9202      	str	r2, [sp, #8]
 800898e:	2200      	movs	r2, #0
 8008990:	9201      	str	r2, [sp, #4]
 8008992:	9300      	str	r3, [sp, #0]
 8008994:	4603      	mov	r3, r0
 8008996:	2280      	movs	r2, #128	@ 0x80
 8008998:	6878      	ldr	r0, [r7, #4]
 800899a:	f001 fa4d 	bl	8009e38 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	7959      	ldrb	r1, [r3, #5]
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80089ae:	687a      	ldr	r2, [r7, #4]
 80089b0:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80089b2:	9202      	str	r2, [sp, #8]
 80089b4:	2200      	movs	r2, #0
 80089b6:	9201      	str	r2, [sp, #4]
 80089b8:	9300      	str	r3, [sp, #0]
 80089ba:	4603      	mov	r3, r0
 80089bc:	2200      	movs	r2, #0
 80089be:	6878      	ldr	r0, [r7, #4]
 80089c0:	f001 fa3a 	bl	8009e38 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80089c4:	e113      	b.n	8008bee <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80089c6:	6878      	ldr	r0, [r7, #4]
 80089c8:	f000 f916 	bl	8008bf8 <USBH_HandleEnum>
 80089cc:	4603      	mov	r3, r0
 80089ce:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80089d0:	7bbb      	ldrb	r3, [r7, #14]
 80089d2:	b2db      	uxtb	r3, r3
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	f040 80fd 	bne.w	8008bd4 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80089e8:	2b01      	cmp	r3, #1
 80089ea:	d103      	bne.n	80089f4 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2208      	movs	r2, #8
 80089f0:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80089f2:	e0ef      	b.n	8008bd4 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2207      	movs	r2, #7
 80089f8:	701a      	strb	r2, [r3, #0]
      break;
 80089fa:	e0eb      	b.n	8008bd4 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	f000 80e8 	beq.w	8008bd8 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008a0e:	2101      	movs	r1, #1
 8008a10:	6878      	ldr	r0, [r7, #4]
 8008a12:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2208      	movs	r2, #8
 8008a18:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008a1a:	e0dd      	b.n	8008bd8 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008a22:	4619      	mov	r1, r3
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 fc3a 	bl	800929e <USBH_SetCfg>
 8008a2a:	4603      	mov	r3, r0
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	f040 80d5 	bne.w	8008bdc <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2209      	movs	r2, #9
 8008a36:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008a38:	e0d0      	b.n	8008bdc <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008a40:	f003 0320 	and.w	r3, r3, #32
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d016      	beq.n	8008a76 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008a48:	2101      	movs	r1, #1
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 fc4a 	bl	80092e4 <USBH_SetFeature>
 8008a50:	4603      	mov	r3, r0
 8008a52:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008a54:	7bbb      	ldrb	r3, [r7, #14]
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d103      	bne.n	8008a64 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	220a      	movs	r2, #10
 8008a60:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008a62:	e0bd      	b.n	8008be0 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8008a64:	7bbb      	ldrb	r3, [r7, #14]
 8008a66:	b2db      	uxtb	r3, r3
 8008a68:	2b03      	cmp	r3, #3
 8008a6a:	f040 80b9 	bne.w	8008be0 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	220a      	movs	r2, #10
 8008a72:	701a      	strb	r2, [r3, #0]
      break;
 8008a74:	e0b4      	b.n	8008be0 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	220a      	movs	r2, #10
 8008a7a:	701a      	strb	r2, [r3, #0]
      break;
 8008a7c:	e0b0      	b.n	8008be0 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008a84:	2b00      	cmp	r3, #0
 8008a86:	f000 80ad 	beq.w	8008be4 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	2200      	movs	r2, #0
 8008a8e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008a92:	2300      	movs	r3, #0
 8008a94:	73fb      	strb	r3, [r7, #15]
 8008a96:	e016      	b.n	8008ac6 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008a98:	7bfa      	ldrb	r2, [r7, #15]
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	32de      	adds	r2, #222	@ 0xde
 8008a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008aa2:	791a      	ldrb	r2, [r3, #4]
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	d108      	bne.n	8008ac0 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008aae:	7bfa      	ldrb	r2, [r7, #15]
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	32de      	adds	r2, #222	@ 0xde
 8008ab4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008abe:	e005      	b.n	8008acc <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008ac0:	7bfb      	ldrb	r3, [r7, #15]
 8008ac2:	3301      	adds	r3, #1
 8008ac4:	73fb      	strb	r3, [r7, #15]
 8008ac6:	7bfb      	ldrb	r3, [r7, #15]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d0e5      	beq.n	8008a98 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ad2:	2b00      	cmp	r3, #0
 8008ad4:	d016      	beq.n	8008b04 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	4798      	blx	r3
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d109      	bne.n	8008afc <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	2206      	movs	r2, #6
 8008aec:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008af4:	2103      	movs	r1, #3
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008afa:	e073      	b.n	8008be4 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	220d      	movs	r2, #13
 8008b00:	701a      	strb	r2, [r3, #0]
      break;
 8008b02:	e06f      	b.n	8008be4 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	220d      	movs	r2, #13
 8008b08:	701a      	strb	r2, [r3, #0]
      break;
 8008b0a:	e06b      	b.n	8008be4 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d017      	beq.n	8008b46 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b1c:	691b      	ldr	r3, [r3, #16]
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	4798      	blx	r3
 8008b22:	4603      	mov	r3, r0
 8008b24:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008b26:	7bbb      	ldrb	r3, [r7, #14]
 8008b28:	b2db      	uxtb	r3, r3
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	d103      	bne.n	8008b36 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	220b      	movs	r2, #11
 8008b32:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008b34:	e058      	b.n	8008be8 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8008b36:	7bbb      	ldrb	r3, [r7, #14]
 8008b38:	b2db      	uxtb	r3, r3
 8008b3a:	2b02      	cmp	r3, #2
 8008b3c:	d154      	bne.n	8008be8 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	220d      	movs	r2, #13
 8008b42:	701a      	strb	r2, [r3, #0]
      break;
 8008b44:	e050      	b.n	8008be8 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	220d      	movs	r2, #13
 8008b4a:	701a      	strb	r2, [r3, #0]
      break;
 8008b4c:	e04c      	b.n	8008be8 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d049      	beq.n	8008bec <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b5e:	695b      	ldr	r3, [r3, #20]
 8008b60:	6878      	ldr	r0, [r7, #4]
 8008b62:	4798      	blx	r3
      }
      break;
 8008b64:	e042      	b.n	8008bec <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	2200      	movs	r2, #0
 8008b6a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008b6e:	6878      	ldr	r0, [r7, #4]
 8008b70:	f7ff fd4a 	bl	8008608 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d009      	beq.n	8008b92 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b84:	68db      	ldr	r3, [r3, #12]
 8008b86:	6878      	ldr	r0, [r7, #4]
 8008b88:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2200      	movs	r2, #0
 8008b8e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d005      	beq.n	8008ba8 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008ba2:	2105      	movs	r1, #5
 8008ba4:	6878      	ldr	r0, [r7, #4]
 8008ba6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d107      	bne.n	8008bc4 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008bbc:	6878      	ldr	r0, [r7, #4]
 8008bbe:	f7ff fe22 	bl	8008806 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008bc2:	e014      	b.n	8008bee <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f001 fb1f 	bl	800a208 <USBH_LL_Start>
      break;
 8008bca:	e010      	b.n	8008bee <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008bcc:	bf00      	nop
 8008bce:	e00e      	b.n	8008bee <USBH_Process+0x3c6>
      break;
 8008bd0:	bf00      	nop
 8008bd2:	e00c      	b.n	8008bee <USBH_Process+0x3c6>
      break;
 8008bd4:	bf00      	nop
 8008bd6:	e00a      	b.n	8008bee <USBH_Process+0x3c6>
    break;
 8008bd8:	bf00      	nop
 8008bda:	e008      	b.n	8008bee <USBH_Process+0x3c6>
      break;
 8008bdc:	bf00      	nop
 8008bde:	e006      	b.n	8008bee <USBH_Process+0x3c6>
      break;
 8008be0:	bf00      	nop
 8008be2:	e004      	b.n	8008bee <USBH_Process+0x3c6>
      break;
 8008be4:	bf00      	nop
 8008be6:	e002      	b.n	8008bee <USBH_Process+0x3c6>
      break;
 8008be8:	bf00      	nop
 8008bea:	e000      	b.n	8008bee <USBH_Process+0x3c6>
      break;
 8008bec:	bf00      	nop
  }
  return USBH_OK;
 8008bee:	2300      	movs	r3, #0
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3710      	adds	r7, #16
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}

08008bf8 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008bf8:	b580      	push	{r7, lr}
 8008bfa:	b088      	sub	sp, #32
 8008bfc:	af04      	add	r7, sp, #16
 8008bfe:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008c00:	2301      	movs	r3, #1
 8008c02:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008c04:	2301      	movs	r3, #1
 8008c06:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	785b      	ldrb	r3, [r3, #1]
 8008c0c:	2b07      	cmp	r3, #7
 8008c0e:	f200 81bd 	bhi.w	8008f8c <USBH_HandleEnum+0x394>
 8008c12:	a201      	add	r2, pc, #4	@ (adr r2, 8008c18 <USBH_HandleEnum+0x20>)
 8008c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c18:	08008c39 	.word	0x08008c39
 8008c1c:	08008cf3 	.word	0x08008cf3
 8008c20:	08008d5d 	.word	0x08008d5d
 8008c24:	08008de7 	.word	0x08008de7
 8008c28:	08008e51 	.word	0x08008e51
 8008c2c:	08008ec1 	.word	0x08008ec1
 8008c30:	08008f07 	.word	0x08008f07
 8008c34:	08008f4d 	.word	0x08008f4d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008c38:	2108      	movs	r1, #8
 8008c3a:	6878      	ldr	r0, [r7, #4]
 8008c3c:	f000 fa4c 	bl	80090d8 <USBH_Get_DevDesc>
 8008c40:	4603      	mov	r3, r0
 8008c42:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008c44:	7bbb      	ldrb	r3, [r7, #14]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d12e      	bne.n	8008ca8 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	2201      	movs	r2, #1
 8008c58:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	7919      	ldrb	r1, [r3, #4]
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008c6a:	687a      	ldr	r2, [r7, #4]
 8008c6c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008c6e:	9202      	str	r2, [sp, #8]
 8008c70:	2200      	movs	r2, #0
 8008c72:	9201      	str	r2, [sp, #4]
 8008c74:	9300      	str	r3, [sp, #0]
 8008c76:	4603      	mov	r3, r0
 8008c78:	2280      	movs	r2, #128	@ 0x80
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f001 f8dc 	bl	8009e38 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	7959      	ldrb	r1, [r3, #5]
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008c90:	687a      	ldr	r2, [r7, #4]
 8008c92:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008c94:	9202      	str	r2, [sp, #8]
 8008c96:	2200      	movs	r2, #0
 8008c98:	9201      	str	r2, [sp, #4]
 8008c9a:	9300      	str	r3, [sp, #0]
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2200      	movs	r2, #0
 8008ca0:	6878      	ldr	r0, [r7, #4]
 8008ca2:	f001 f8c9 	bl	8009e38 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008ca6:	e173      	b.n	8008f90 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ca8:	7bbb      	ldrb	r3, [r7, #14]
 8008caa:	2b03      	cmp	r3, #3
 8008cac:	f040 8170 	bne.w	8008f90 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008cb6:	3301      	adds	r3, #1
 8008cb8:	b2da      	uxtb	r2, r3
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008cc6:	2b03      	cmp	r3, #3
 8008cc8:	d903      	bls.n	8008cd2 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	220d      	movs	r2, #13
 8008cce:	701a      	strb	r2, [r3, #0]
      break;
 8008cd0:	e15e      	b.n	8008f90 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	795b      	ldrb	r3, [r3, #5]
 8008cd6:	4619      	mov	r1, r3
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f001 f8fd 	bl	8009ed8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	791b      	ldrb	r3, [r3, #4]
 8008ce2:	4619      	mov	r1, r3
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f001 f8f7 	bl	8009ed8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	701a      	strb	r2, [r3, #0]
      break;
 8008cf0:	e14e      	b.n	8008f90 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008cf2:	2112      	movs	r1, #18
 8008cf4:	6878      	ldr	r0, [r7, #4]
 8008cf6:	f000 f9ef 	bl	80090d8 <USBH_Get_DevDesc>
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008cfe:	7bbb      	ldrb	r3, [r7, #14]
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	d103      	bne.n	8008d0c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2202      	movs	r2, #2
 8008d08:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008d0a:	e143      	b.n	8008f94 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d0c:	7bbb      	ldrb	r3, [r7, #14]
 8008d0e:	2b03      	cmp	r3, #3
 8008d10:	f040 8140 	bne.w	8008f94 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008d1a:	3301      	adds	r3, #1
 8008d1c:	b2da      	uxtb	r2, r3
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008d2a:	2b03      	cmp	r3, #3
 8008d2c:	d903      	bls.n	8008d36 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	220d      	movs	r2, #13
 8008d32:	701a      	strb	r2, [r3, #0]
      break;
 8008d34:	e12e      	b.n	8008f94 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	795b      	ldrb	r3, [r3, #5]
 8008d3a:	4619      	mov	r1, r3
 8008d3c:	6878      	ldr	r0, [r7, #4]
 8008d3e:	f001 f8cb 	bl	8009ed8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	791b      	ldrb	r3, [r3, #4]
 8008d46:	4619      	mov	r1, r3
 8008d48:	6878      	ldr	r0, [r7, #4]
 8008d4a:	f001 f8c5 	bl	8009ed8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2200      	movs	r2, #0
 8008d52:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2200      	movs	r2, #0
 8008d58:	701a      	strb	r2, [r3, #0]
      break;
 8008d5a:	e11b      	b.n	8008f94 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008d5c:	2101      	movs	r1, #1
 8008d5e:	6878      	ldr	r0, [r7, #4]
 8008d60:	f000 fa79 	bl	8009256 <USBH_SetAddress>
 8008d64:	4603      	mov	r3, r0
 8008d66:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008d68:	7bbb      	ldrb	r3, [r7, #14]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d130      	bne.n	8008dd0 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008d6e:	2002      	movs	r0, #2
 8008d70:	f001 fbb1 	bl	800a4d6 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	2201      	movs	r2, #1
 8008d78:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	2203      	movs	r2, #3
 8008d80:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	7919      	ldrb	r1, [r3, #4]
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008d96:	9202      	str	r2, [sp, #8]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	9201      	str	r2, [sp, #4]
 8008d9c:	9300      	str	r3, [sp, #0]
 8008d9e:	4603      	mov	r3, r0
 8008da0:	2280      	movs	r2, #128	@ 0x80
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f001 f848 	bl	8009e38 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	7959      	ldrb	r1, [r3, #5]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008dbc:	9202      	str	r2, [sp, #8]
 8008dbe:	2200      	movs	r2, #0
 8008dc0:	9201      	str	r2, [sp, #4]
 8008dc2:	9300      	str	r3, [sp, #0]
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f001 f835 	bl	8009e38 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008dce:	e0e3      	b.n	8008f98 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008dd0:	7bbb      	ldrb	r3, [r7, #14]
 8008dd2:	2b03      	cmp	r3, #3
 8008dd4:	f040 80e0 	bne.w	8008f98 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	220d      	movs	r2, #13
 8008ddc:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	2200      	movs	r2, #0
 8008de2:	705a      	strb	r2, [r3, #1]
      break;
 8008de4:	e0d8      	b.n	8008f98 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008de6:	2109      	movs	r1, #9
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 f9a1 	bl	8009130 <USBH_Get_CfgDesc>
 8008dee:	4603      	mov	r3, r0
 8008df0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008df2:	7bbb      	ldrb	r3, [r7, #14]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d103      	bne.n	8008e00 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2204      	movs	r2, #4
 8008dfc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008dfe:	e0cd      	b.n	8008f9c <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e00:	7bbb      	ldrb	r3, [r7, #14]
 8008e02:	2b03      	cmp	r3, #3
 8008e04:	f040 80ca 	bne.w	8008f9c <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008e0e:	3301      	adds	r3, #1
 8008e10:	b2da      	uxtb	r2, r3
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008e1e:	2b03      	cmp	r3, #3
 8008e20:	d903      	bls.n	8008e2a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	220d      	movs	r2, #13
 8008e26:	701a      	strb	r2, [r3, #0]
      break;
 8008e28:	e0b8      	b.n	8008f9c <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	795b      	ldrb	r3, [r3, #5]
 8008e2e:	4619      	mov	r1, r3
 8008e30:	6878      	ldr	r0, [r7, #4]
 8008e32:	f001 f851 	bl	8009ed8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	791b      	ldrb	r3, [r3, #4]
 8008e3a:	4619      	mov	r1, r3
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	f001 f84b 	bl	8009ed8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2200      	movs	r2, #0
 8008e46:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	701a      	strb	r2, [r3, #0]
      break;
 8008e4e:	e0a5      	b.n	8008f9c <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8008e56:	4619      	mov	r1, r3
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 f969 	bl	8009130 <USBH_Get_CfgDesc>
 8008e5e:	4603      	mov	r3, r0
 8008e60:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008e62:	7bbb      	ldrb	r3, [r7, #14]
 8008e64:	2b00      	cmp	r3, #0
 8008e66:	d103      	bne.n	8008e70 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2205      	movs	r2, #5
 8008e6c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008e6e:	e097      	b.n	8008fa0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e70:	7bbb      	ldrb	r3, [r7, #14]
 8008e72:	2b03      	cmp	r3, #3
 8008e74:	f040 8094 	bne.w	8008fa0 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008e7e:	3301      	adds	r3, #1
 8008e80:	b2da      	uxtb	r2, r3
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008e8e:	2b03      	cmp	r3, #3
 8008e90:	d903      	bls.n	8008e9a <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	220d      	movs	r2, #13
 8008e96:	701a      	strb	r2, [r3, #0]
      break;
 8008e98:	e082      	b.n	8008fa0 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	795b      	ldrb	r3, [r3, #5]
 8008e9e:	4619      	mov	r1, r3
 8008ea0:	6878      	ldr	r0, [r7, #4]
 8008ea2:	f001 f819 	bl	8009ed8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	791b      	ldrb	r3, [r3, #4]
 8008eaa:	4619      	mov	r1, r3
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f001 f813 	bl	8009ed8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	2200      	movs	r2, #0
 8008ebc:	701a      	strb	r2, [r3, #0]
      break;
 8008ebe:	e06f      	b.n	8008fa0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d019      	beq.n	8008efe <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008ed6:	23ff      	movs	r3, #255	@ 0xff
 8008ed8:	6878      	ldr	r0, [r7, #4]
 8008eda:	f000 f953 	bl	8009184 <USBH_Get_StringDesc>
 8008ede:	4603      	mov	r3, r0
 8008ee0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008ee2:	7bbb      	ldrb	r3, [r7, #14]
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d103      	bne.n	8008ef0 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2206      	movs	r2, #6
 8008eec:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008eee:	e059      	b.n	8008fa4 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008ef0:	7bbb      	ldrb	r3, [r7, #14]
 8008ef2:	2b03      	cmp	r3, #3
 8008ef4:	d156      	bne.n	8008fa4 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	2206      	movs	r2, #6
 8008efa:	705a      	strb	r2, [r3, #1]
      break;
 8008efc:	e052      	b.n	8008fa4 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2206      	movs	r2, #6
 8008f02:	705a      	strb	r2, [r3, #1]
      break;
 8008f04:	e04e      	b.n	8008fa4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d019      	beq.n	8008f44 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008f1c:	23ff      	movs	r3, #255	@ 0xff
 8008f1e:	6878      	ldr	r0, [r7, #4]
 8008f20:	f000 f930 	bl	8009184 <USBH_Get_StringDesc>
 8008f24:	4603      	mov	r3, r0
 8008f26:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008f28:	7bbb      	ldrb	r3, [r7, #14]
 8008f2a:	2b00      	cmp	r3, #0
 8008f2c:	d103      	bne.n	8008f36 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	2207      	movs	r2, #7
 8008f32:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008f34:	e038      	b.n	8008fa8 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f36:	7bbb      	ldrb	r3, [r7, #14]
 8008f38:	2b03      	cmp	r3, #3
 8008f3a:	d135      	bne.n	8008fa8 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2207      	movs	r2, #7
 8008f40:	705a      	strb	r2, [r3, #1]
      break;
 8008f42:	e031      	b.n	8008fa8 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2207      	movs	r2, #7
 8008f48:	705a      	strb	r2, [r3, #1]
      break;
 8008f4a:	e02d      	b.n	8008fa8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008f52:	2b00      	cmp	r3, #0
 8008f54:	d017      	beq.n	8008f86 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008f62:	23ff      	movs	r3, #255	@ 0xff
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 f90d 	bl	8009184 <USBH_Get_StringDesc>
 8008f6a:	4603      	mov	r3, r0
 8008f6c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008f6e:	7bbb      	ldrb	r3, [r7, #14]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d102      	bne.n	8008f7a <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008f74:	2300      	movs	r3, #0
 8008f76:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008f78:	e018      	b.n	8008fac <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f7a:	7bbb      	ldrb	r3, [r7, #14]
 8008f7c:	2b03      	cmp	r3, #3
 8008f7e:	d115      	bne.n	8008fac <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008f80:	2300      	movs	r3, #0
 8008f82:	73fb      	strb	r3, [r7, #15]
      break;
 8008f84:	e012      	b.n	8008fac <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8008f86:	2300      	movs	r3, #0
 8008f88:	73fb      	strb	r3, [r7, #15]
      break;
 8008f8a:	e00f      	b.n	8008fac <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008f8c:	bf00      	nop
 8008f8e:	e00e      	b.n	8008fae <USBH_HandleEnum+0x3b6>
      break;
 8008f90:	bf00      	nop
 8008f92:	e00c      	b.n	8008fae <USBH_HandleEnum+0x3b6>
      break;
 8008f94:	bf00      	nop
 8008f96:	e00a      	b.n	8008fae <USBH_HandleEnum+0x3b6>
      break;
 8008f98:	bf00      	nop
 8008f9a:	e008      	b.n	8008fae <USBH_HandleEnum+0x3b6>
      break;
 8008f9c:	bf00      	nop
 8008f9e:	e006      	b.n	8008fae <USBH_HandleEnum+0x3b6>
      break;
 8008fa0:	bf00      	nop
 8008fa2:	e004      	b.n	8008fae <USBH_HandleEnum+0x3b6>
      break;
 8008fa4:	bf00      	nop
 8008fa6:	e002      	b.n	8008fae <USBH_HandleEnum+0x3b6>
      break;
 8008fa8:	bf00      	nop
 8008faa:	e000      	b.n	8008fae <USBH_HandleEnum+0x3b6>
      break;
 8008fac:	bf00      	nop
  }
  return Status;
 8008fae:	7bfb      	ldrb	r3, [r7, #15]
}
 8008fb0:	4618      	mov	r0, r3
 8008fb2:	3710      	adds	r7, #16
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	bd80      	pop	{r7, pc}

08008fb8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	b083      	sub	sp, #12
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
 8008fc0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	683a      	ldr	r2, [r7, #0]
 8008fc6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8008fca:	bf00      	nop
 8008fcc:	370c      	adds	r7, #12
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr

08008fd6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008fd6:	b580      	push	{r7, lr}
 8008fd8:	b082      	sub	sp, #8
 8008fda:	af00      	add	r7, sp, #0
 8008fdc:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008fe4:	1c5a      	adds	r2, r3, #1
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008fec:	6878      	ldr	r0, [r7, #4]
 8008fee:	f000 f804 	bl	8008ffa <USBH_HandleSof>
}
 8008ff2:	bf00      	nop
 8008ff4:	3708      	adds	r7, #8
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b082      	sub	sp, #8
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	b2db      	uxtb	r3, r3
 8009008:	2b0b      	cmp	r3, #11
 800900a:	d10a      	bne.n	8009022 <USBH_HandleSof+0x28>
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009012:	2b00      	cmp	r3, #0
 8009014:	d005      	beq.n	8009022 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800901c:	699b      	ldr	r3, [r3, #24]
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	4798      	blx	r3
  }
}
 8009022:	bf00      	nop
 8009024:	3708      	adds	r7, #8
 8009026:	46bd      	mov	sp, r7
 8009028:	bd80      	pop	{r7, pc}

0800902a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800902a:	b480      	push	{r7}
 800902c:	b083      	sub	sp, #12
 800902e:	af00      	add	r7, sp, #0
 8009030:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2201      	movs	r2, #1
 8009036:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800903a:	bf00      	nop
}
 800903c:	370c      	adds	r7, #12
 800903e:	46bd      	mov	sp, r7
 8009040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009044:	4770      	bx	lr

08009046 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009046:	b480      	push	{r7}
 8009048:	b083      	sub	sp, #12
 800904a:	af00      	add	r7, sp, #0
 800904c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2200      	movs	r2, #0
 8009052:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8009056:	bf00      	nop
}
 8009058:	370c      	adds	r7, #12
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr

08009062 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009062:	b480      	push	{r7}
 8009064:	b083      	sub	sp, #12
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	2201      	movs	r2, #1
 800906e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2200      	movs	r2, #0
 8009076:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2200      	movs	r2, #0
 800907e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009082:	2300      	movs	r3, #0
}
 8009084:	4618      	mov	r0, r3
 8009086:	370c      	adds	r7, #12
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2201      	movs	r2, #1
 800909c:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	2200      	movs	r2, #0
 80090a4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2200      	movs	r2, #0
 80090ac:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80090b0:	6878      	ldr	r0, [r7, #4]
 80090b2:	f001 f8c4 	bl	800a23e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	791b      	ldrb	r3, [r3, #4]
 80090ba:	4619      	mov	r1, r3
 80090bc:	6878      	ldr	r0, [r7, #4]
 80090be:	f000 ff0b 	bl	8009ed8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	795b      	ldrb	r3, [r3, #5]
 80090c6:	4619      	mov	r1, r3
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	f000 ff05 	bl	8009ed8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80090ce:	2300      	movs	r3, #0
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3708      	adds	r7, #8
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}

080090d8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80090d8:	b580      	push	{r7, lr}
 80090da:	b086      	sub	sp, #24
 80090dc:	af02      	add	r7, sp, #8
 80090de:	6078      	str	r0, [r7, #4]
 80090e0:	460b      	mov	r3, r1
 80090e2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80090e4:	887b      	ldrh	r3, [r7, #2]
 80090e6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090ea:	d901      	bls.n	80090f0 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80090ec:	2303      	movs	r3, #3
 80090ee:	e01b      	b.n	8009128 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80090f6:	887b      	ldrh	r3, [r7, #2]
 80090f8:	9300      	str	r3, [sp, #0]
 80090fa:	4613      	mov	r3, r2
 80090fc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009100:	2100      	movs	r1, #0
 8009102:	6878      	ldr	r0, [r7, #4]
 8009104:	f000 f872 	bl	80091ec <USBH_GetDescriptor>
 8009108:	4603      	mov	r3, r0
 800910a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800910c:	7bfb      	ldrb	r3, [r7, #15]
 800910e:	2b00      	cmp	r3, #0
 8009110:	d109      	bne.n	8009126 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009118:	887a      	ldrh	r2, [r7, #2]
 800911a:	4619      	mov	r1, r3
 800911c:	6878      	ldr	r0, [r7, #4]
 800911e:	f000 f929 	bl	8009374 <USBH_ParseDevDesc>
 8009122:	4603      	mov	r3, r0
 8009124:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009126:	7bfb      	ldrb	r3, [r7, #15]
}
 8009128:	4618      	mov	r0, r3
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b086      	sub	sp, #24
 8009134:	af02      	add	r7, sp, #8
 8009136:	6078      	str	r0, [r7, #4]
 8009138:	460b      	mov	r3, r1
 800913a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	331c      	adds	r3, #28
 8009140:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8009142:	887b      	ldrh	r3, [r7, #2]
 8009144:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009148:	d901      	bls.n	800914e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800914a:	2303      	movs	r3, #3
 800914c:	e016      	b.n	800917c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800914e:	887b      	ldrh	r3, [r7, #2]
 8009150:	9300      	str	r3, [sp, #0]
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009158:	2100      	movs	r1, #0
 800915a:	6878      	ldr	r0, [r7, #4]
 800915c:	f000 f846 	bl	80091ec <USBH_GetDescriptor>
 8009160:	4603      	mov	r3, r0
 8009162:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009164:	7bfb      	ldrb	r3, [r7, #15]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d107      	bne.n	800917a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800916a:	887b      	ldrh	r3, [r7, #2]
 800916c:	461a      	mov	r2, r3
 800916e:	68b9      	ldr	r1, [r7, #8]
 8009170:	6878      	ldr	r0, [r7, #4]
 8009172:	f000 f9af 	bl	80094d4 <USBH_ParseCfgDesc>
 8009176:	4603      	mov	r3, r0
 8009178:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800917a:	7bfb      	ldrb	r3, [r7, #15]
}
 800917c:	4618      	mov	r0, r3
 800917e:	3710      	adds	r7, #16
 8009180:	46bd      	mov	sp, r7
 8009182:	bd80      	pop	{r7, pc}

08009184 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b088      	sub	sp, #32
 8009188:	af02      	add	r7, sp, #8
 800918a:	60f8      	str	r0, [r7, #12]
 800918c:	607a      	str	r2, [r7, #4]
 800918e:	461a      	mov	r2, r3
 8009190:	460b      	mov	r3, r1
 8009192:	72fb      	strb	r3, [r7, #11]
 8009194:	4613      	mov	r3, r2
 8009196:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 8009198:	893b      	ldrh	r3, [r7, #8]
 800919a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800919e:	d802      	bhi.n	80091a6 <USBH_Get_StringDesc+0x22>
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d101      	bne.n	80091aa <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80091a6:	2303      	movs	r3, #3
 80091a8:	e01c      	b.n	80091e4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80091aa:	7afb      	ldrb	r3, [r7, #11]
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80091b2:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80091ba:	893b      	ldrh	r3, [r7, #8]
 80091bc:	9300      	str	r3, [sp, #0]
 80091be:	460b      	mov	r3, r1
 80091c0:	2100      	movs	r1, #0
 80091c2:	68f8      	ldr	r0, [r7, #12]
 80091c4:	f000 f812 	bl	80091ec <USBH_GetDescriptor>
 80091c8:	4603      	mov	r3, r0
 80091ca:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 80091cc:	7dfb      	ldrb	r3, [r7, #23]
 80091ce:	2b00      	cmp	r3, #0
 80091d0:	d107      	bne.n	80091e2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80091d8:	893a      	ldrh	r2, [r7, #8]
 80091da:	6879      	ldr	r1, [r7, #4]
 80091dc:	4618      	mov	r0, r3
 80091de:	f000 fb8d 	bl	80098fc <USBH_ParseStringDesc>
  }

  return status;
 80091e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80091e4:	4618      	mov	r0, r3
 80091e6:	3718      	adds	r7, #24
 80091e8:	46bd      	mov	sp, r7
 80091ea:	bd80      	pop	{r7, pc}

080091ec <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80091ec:	b580      	push	{r7, lr}
 80091ee:	b084      	sub	sp, #16
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	607b      	str	r3, [r7, #4]
 80091f6:	460b      	mov	r3, r1
 80091f8:	72fb      	strb	r3, [r7, #11]
 80091fa:	4613      	mov	r3, r2
 80091fc:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	789b      	ldrb	r3, [r3, #2]
 8009202:	2b01      	cmp	r3, #1
 8009204:	d11c      	bne.n	8009240 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009206:	7afb      	ldrb	r3, [r7, #11]
 8009208:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800920c:	b2da      	uxtb	r2, r3
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009212:	68fb      	ldr	r3, [r7, #12]
 8009214:	2206      	movs	r2, #6
 8009216:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	893a      	ldrh	r2, [r7, #8]
 800921c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800921e:	893b      	ldrh	r3, [r7, #8]
 8009220:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009224:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009228:	d104      	bne.n	8009234 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800922a:	68fb      	ldr	r3, [r7, #12]
 800922c:	f240 4209 	movw	r2, #1033	@ 0x409
 8009230:	829a      	strh	r2, [r3, #20]
 8009232:	e002      	b.n	800923a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009234:	68fb      	ldr	r3, [r7, #12]
 8009236:	2200      	movs	r2, #0
 8009238:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	8b3a      	ldrh	r2, [r7, #24]
 800923e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009240:	8b3b      	ldrh	r3, [r7, #24]
 8009242:	461a      	mov	r2, r3
 8009244:	6879      	ldr	r1, [r7, #4]
 8009246:	68f8      	ldr	r0, [r7, #12]
 8009248:	f000 fba5 	bl	8009996 <USBH_CtlReq>
 800924c:	4603      	mov	r3, r0
}
 800924e:	4618      	mov	r0, r3
 8009250:	3710      	adds	r7, #16
 8009252:	46bd      	mov	sp, r7
 8009254:	bd80      	pop	{r7, pc}

08009256 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 8009256:	b580      	push	{r7, lr}
 8009258:	b082      	sub	sp, #8
 800925a:	af00      	add	r7, sp, #0
 800925c:	6078      	str	r0, [r7, #4]
 800925e:	460b      	mov	r3, r1
 8009260:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	789b      	ldrb	r3, [r3, #2]
 8009266:	2b01      	cmp	r3, #1
 8009268:	d10f      	bne.n	800928a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	2200      	movs	r2, #0
 800926e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	2205      	movs	r2, #5
 8009274:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 8009276:	78fb      	ldrb	r3, [r7, #3]
 8009278:	b29a      	uxth	r2, r3
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2200      	movs	r2, #0
 8009282:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	2200      	movs	r2, #0
 8009288:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800928a:	2200      	movs	r2, #0
 800928c:	2100      	movs	r1, #0
 800928e:	6878      	ldr	r0, [r7, #4]
 8009290:	f000 fb81 	bl	8009996 <USBH_CtlReq>
 8009294:	4603      	mov	r3, r0
}
 8009296:	4618      	mov	r0, r3
 8009298:	3708      	adds	r7, #8
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800929e:	b580      	push	{r7, lr}
 80092a0:	b082      	sub	sp, #8
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
 80092a6:	460b      	mov	r3, r1
 80092a8:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	789b      	ldrb	r3, [r3, #2]
 80092ae:	2b01      	cmp	r3, #1
 80092b0:	d10e      	bne.n	80092d0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80092b2:	687b      	ldr	r3, [r7, #4]
 80092b4:	2200      	movs	r2, #0
 80092b6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	2209      	movs	r2, #9
 80092bc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	887a      	ldrh	r2, [r7, #2]
 80092c2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	2200      	movs	r2, #0
 80092c8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	2200      	movs	r2, #0
 80092ce:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80092d0:	2200      	movs	r2, #0
 80092d2:	2100      	movs	r1, #0
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 fb5e 	bl	8009996 <USBH_CtlReq>
 80092da:	4603      	mov	r3, r0
}
 80092dc:	4618      	mov	r0, r3
 80092de:	3708      	adds	r7, #8
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}

080092e4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80092e4:	b580      	push	{r7, lr}
 80092e6:	b082      	sub	sp, #8
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	460b      	mov	r3, r1
 80092ee:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	789b      	ldrb	r3, [r3, #2]
 80092f4:	2b01      	cmp	r3, #1
 80092f6:	d10f      	bne.n	8009318 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	2200      	movs	r2, #0
 80092fc:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	2203      	movs	r2, #3
 8009302:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009304:	78fb      	ldrb	r3, [r7, #3]
 8009306:	b29a      	uxth	r2, r3
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009318:	2200      	movs	r2, #0
 800931a:	2100      	movs	r1, #0
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 fb3a 	bl	8009996 <USBH_CtlReq>
 8009322:	4603      	mov	r3, r0
}
 8009324:	4618      	mov	r0, r3
 8009326:	3708      	adds	r7, #8
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	6078      	str	r0, [r7, #4]
 8009334:	460b      	mov	r3, r1
 8009336:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	789b      	ldrb	r3, [r3, #2]
 800933c:	2b01      	cmp	r3, #1
 800933e:	d10f      	bne.n	8009360 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	2202      	movs	r2, #2
 8009344:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	2201      	movs	r2, #1
 800934a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2200      	movs	r2, #0
 8009350:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009352:	78fb      	ldrb	r3, [r7, #3]
 8009354:	b29a      	uxth	r2, r3
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2200      	movs	r2, #0
 800935e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009360:	2200      	movs	r2, #0
 8009362:	2100      	movs	r1, #0
 8009364:	6878      	ldr	r0, [r7, #4]
 8009366:	f000 fb16 	bl	8009996 <USBH_CtlReq>
 800936a:	4603      	mov	r3, r0
}
 800936c:	4618      	mov	r0, r3
 800936e:	3708      	adds	r7, #8
 8009370:	46bd      	mov	sp, r7
 8009372:	bd80      	pop	{r7, pc}

08009374 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009374:	b480      	push	{r7}
 8009376:	b087      	sub	sp, #28
 8009378:	af00      	add	r7, sp, #0
 800937a:	60f8      	str	r0, [r7, #12]
 800937c:	60b9      	str	r1, [r7, #8]
 800937e:	4613      	mov	r3, r2
 8009380:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009382:	68fb      	ldr	r3, [r7, #12]
 8009384:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8009388:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800938a:	2300      	movs	r3, #0
 800938c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d101      	bne.n	8009398 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009394:	2302      	movs	r3, #2
 8009396:	e094      	b.n	80094c2 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	781a      	ldrb	r2, [r3, #0]
 800939c:	693b      	ldr	r3, [r7, #16]
 800939e:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	785a      	ldrb	r2, [r3, #1]
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	3302      	adds	r3, #2
 80093ac:	781b      	ldrb	r3, [r3, #0]
 80093ae:	461a      	mov	r2, r3
 80093b0:	68bb      	ldr	r3, [r7, #8]
 80093b2:	3303      	adds	r3, #3
 80093b4:	781b      	ldrb	r3, [r3, #0]
 80093b6:	021b      	lsls	r3, r3, #8
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	4313      	orrs	r3, r2
 80093bc:	b29a      	uxth	r2, r3
 80093be:	693b      	ldr	r3, [r7, #16]
 80093c0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	791a      	ldrb	r2, [r3, #4]
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	795a      	ldrb	r2, [r3, #5]
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	799a      	ldrb	r2, [r3, #6]
 80093d6:	693b      	ldr	r3, [r7, #16]
 80093d8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 80093da:	68bb      	ldr	r3, [r7, #8]
 80093dc:	79da      	ldrb	r2, [r3, #7]
 80093de:	693b      	ldr	r3, [r7, #16]
 80093e0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80093e2:	68fb      	ldr	r3, [r7, #12]
 80093e4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	d004      	beq.n	80093f6 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80093f2:	2b01      	cmp	r3, #1
 80093f4:	d11b      	bne.n	800942e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80093f6:	693b      	ldr	r3, [r7, #16]
 80093f8:	79db      	ldrb	r3, [r3, #7]
 80093fa:	2b20      	cmp	r3, #32
 80093fc:	dc0f      	bgt.n	800941e <USBH_ParseDevDesc+0xaa>
 80093fe:	2b08      	cmp	r3, #8
 8009400:	db0f      	blt.n	8009422 <USBH_ParseDevDesc+0xae>
 8009402:	3b08      	subs	r3, #8
 8009404:	4a32      	ldr	r2, [pc, #200]	@ (80094d0 <USBH_ParseDevDesc+0x15c>)
 8009406:	fa22 f303 	lsr.w	r3, r2, r3
 800940a:	f003 0301 	and.w	r3, r3, #1
 800940e:	2b00      	cmp	r3, #0
 8009410:	bf14      	ite	ne
 8009412:	2301      	movne	r3, #1
 8009414:	2300      	moveq	r3, #0
 8009416:	b2db      	uxtb	r3, r3
 8009418:	2b00      	cmp	r3, #0
 800941a:	d106      	bne.n	800942a <USBH_ParseDevDesc+0xb6>
 800941c:	e001      	b.n	8009422 <USBH_ParseDevDesc+0xae>
 800941e:	2b40      	cmp	r3, #64	@ 0x40
 8009420:	d003      	beq.n	800942a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009422:	693b      	ldr	r3, [r7, #16]
 8009424:	2208      	movs	r2, #8
 8009426:	71da      	strb	r2, [r3, #7]
        break;
 8009428:	e000      	b.n	800942c <USBH_ParseDevDesc+0xb8>
        break;
 800942a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800942c:	e00e      	b.n	800944c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009434:	2b02      	cmp	r3, #2
 8009436:	d107      	bne.n	8009448 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 8009438:	693b      	ldr	r3, [r7, #16]
 800943a:	79db      	ldrb	r3, [r3, #7]
 800943c:	2b08      	cmp	r3, #8
 800943e:	d005      	beq.n	800944c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	2208      	movs	r2, #8
 8009444:	71da      	strb	r2, [r3, #7]
 8009446:	e001      	b.n	800944c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009448:	2303      	movs	r3, #3
 800944a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800944c:	88fb      	ldrh	r3, [r7, #6]
 800944e:	2b08      	cmp	r3, #8
 8009450:	d936      	bls.n	80094c0 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	3308      	adds	r3, #8
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	461a      	mov	r2, r3
 800945a:	68bb      	ldr	r3, [r7, #8]
 800945c:	3309      	adds	r3, #9
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	021b      	lsls	r3, r3, #8
 8009462:	b29b      	uxth	r3, r3
 8009464:	4313      	orrs	r3, r2
 8009466:	b29a      	uxth	r2, r3
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	330a      	adds	r3, #10
 8009470:	781b      	ldrb	r3, [r3, #0]
 8009472:	461a      	mov	r2, r3
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	330b      	adds	r3, #11
 8009478:	781b      	ldrb	r3, [r3, #0]
 800947a:	021b      	lsls	r3, r3, #8
 800947c:	b29b      	uxth	r3, r3
 800947e:	4313      	orrs	r3, r2
 8009480:	b29a      	uxth	r2, r3
 8009482:	693b      	ldr	r3, [r7, #16]
 8009484:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 8009486:	68bb      	ldr	r3, [r7, #8]
 8009488:	330c      	adds	r3, #12
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	461a      	mov	r2, r3
 800948e:	68bb      	ldr	r3, [r7, #8]
 8009490:	330d      	adds	r3, #13
 8009492:	781b      	ldrb	r3, [r3, #0]
 8009494:	021b      	lsls	r3, r3, #8
 8009496:	b29b      	uxth	r3, r3
 8009498:	4313      	orrs	r3, r2
 800949a:	b29a      	uxth	r2, r3
 800949c:	693b      	ldr	r3, [r7, #16]
 800949e:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80094a0:	68bb      	ldr	r3, [r7, #8]
 80094a2:	7b9a      	ldrb	r2, [r3, #14]
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80094a8:	68bb      	ldr	r3, [r7, #8]
 80094aa:	7bda      	ldrb	r2, [r3, #15]
 80094ac:	693b      	ldr	r3, [r7, #16]
 80094ae:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 80094b0:	68bb      	ldr	r3, [r7, #8]
 80094b2:	7c1a      	ldrb	r2, [r3, #16]
 80094b4:	693b      	ldr	r3, [r7, #16]
 80094b6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	7c5a      	ldrb	r2, [r3, #17]
 80094bc:	693b      	ldr	r3, [r7, #16]
 80094be:	745a      	strb	r2, [r3, #17]
  }

  return status;
 80094c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	371c      	adds	r7, #28
 80094c6:	46bd      	mov	sp, r7
 80094c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop
 80094d0:	01000101 	.word	0x01000101

080094d4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80094d4:	b580      	push	{r7, lr}
 80094d6:	b08c      	sub	sp, #48	@ 0x30
 80094d8:	af00      	add	r7, sp, #0
 80094da:	60f8      	str	r0, [r7, #12]
 80094dc:	60b9      	str	r1, [r7, #8]
 80094de:	4613      	mov	r3, r2
 80094e0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80094e8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80094ea:	2300      	movs	r3, #0
 80094ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80094f0:	2300      	movs	r3, #0
 80094f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80094f6:	2300      	movs	r3, #0
 80094f8:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80094fc:	68bb      	ldr	r3, [r7, #8]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d101      	bne.n	8009506 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009502:	2302      	movs	r3, #2
 8009504:	e0da      	b.n	80096bc <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 8009506:	68bb      	ldr	r3, [r7, #8]
 8009508:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800950a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800950c:	781b      	ldrb	r3, [r3, #0]
 800950e:	2b09      	cmp	r3, #9
 8009510:	d002      	beq.n	8009518 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 8009512:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009514:	2209      	movs	r2, #9
 8009516:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 8009518:	68bb      	ldr	r3, [r7, #8]
 800951a:	781a      	ldrb	r2, [r3, #0]
 800951c:	6a3b      	ldr	r3, [r7, #32]
 800951e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009520:	68bb      	ldr	r3, [r7, #8]
 8009522:	785a      	ldrb	r2, [r3, #1]
 8009524:	6a3b      	ldr	r3, [r7, #32]
 8009526:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	3302      	adds	r3, #2
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	461a      	mov	r2, r3
 8009530:	68bb      	ldr	r3, [r7, #8]
 8009532:	3303      	adds	r3, #3
 8009534:	781b      	ldrb	r3, [r3, #0]
 8009536:	021b      	lsls	r3, r3, #8
 8009538:	b29b      	uxth	r3, r3
 800953a:	4313      	orrs	r3, r2
 800953c:	b29b      	uxth	r3, r3
 800953e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009542:	bf28      	it	cs
 8009544:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 8009548:	b29a      	uxth	r2, r3
 800954a:	6a3b      	ldr	r3, [r7, #32]
 800954c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	791a      	ldrb	r2, [r3, #4]
 8009552:	6a3b      	ldr	r3, [r7, #32]
 8009554:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	795a      	ldrb	r2, [r3, #5]
 800955a:	6a3b      	ldr	r3, [r7, #32]
 800955c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	799a      	ldrb	r2, [r3, #6]
 8009562:	6a3b      	ldr	r3, [r7, #32]
 8009564:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	79da      	ldrb	r2, [r3, #7]
 800956a:	6a3b      	ldr	r3, [r7, #32]
 800956c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	7a1a      	ldrb	r2, [r3, #8]
 8009572:	6a3b      	ldr	r3, [r7, #32]
 8009574:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 8009576:	88fb      	ldrh	r3, [r7, #6]
 8009578:	2b09      	cmp	r3, #9
 800957a:	f240 809d 	bls.w	80096b8 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800957e:	2309      	movs	r3, #9
 8009580:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009582:	2300      	movs	r3, #0
 8009584:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009586:	e081      	b.n	800968c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009588:	f107 0316 	add.w	r3, r7, #22
 800958c:	4619      	mov	r1, r3
 800958e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009590:	f000 f9e7 	bl	8009962 <USBH_GetNextDesc>
 8009594:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 8009596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009598:	785b      	ldrb	r3, [r3, #1]
 800959a:	2b04      	cmp	r3, #4
 800959c:	d176      	bne.n	800968c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800959e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a0:	781b      	ldrb	r3, [r3, #0]
 80095a2:	2b09      	cmp	r3, #9
 80095a4:	d002      	beq.n	80095ac <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80095a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a8:	2209      	movs	r2, #9
 80095aa:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80095ac:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80095b0:	221a      	movs	r2, #26
 80095b2:	fb02 f303 	mul.w	r3, r2, r3
 80095b6:	3308      	adds	r3, #8
 80095b8:	6a3a      	ldr	r2, [r7, #32]
 80095ba:	4413      	add	r3, r2
 80095bc:	3302      	adds	r3, #2
 80095be:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80095c0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80095c2:	69f8      	ldr	r0, [r7, #28]
 80095c4:	f000 f87e 	bl	80096c4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 80095c8:	2300      	movs	r3, #0
 80095ca:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 80095ce:	2300      	movs	r3, #0
 80095d0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 80095d2:	e043      	b.n	800965c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80095d4:	f107 0316 	add.w	r3, r7, #22
 80095d8:	4619      	mov	r1, r3
 80095da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095dc:	f000 f9c1 	bl	8009962 <USBH_GetNextDesc>
 80095e0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80095e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095e4:	785b      	ldrb	r3, [r3, #1]
 80095e6:	2b05      	cmp	r3, #5
 80095e8:	d138      	bne.n	800965c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80095ea:	69fb      	ldr	r3, [r7, #28]
 80095ec:	795b      	ldrb	r3, [r3, #5]
 80095ee:	2b01      	cmp	r3, #1
 80095f0:	d113      	bne.n	800961a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80095f2:	69fb      	ldr	r3, [r7, #28]
 80095f4:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80095f6:	2b02      	cmp	r3, #2
 80095f8:	d003      	beq.n	8009602 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	799b      	ldrb	r3, [r3, #6]
 80095fe:	2b03      	cmp	r3, #3
 8009600:	d10b      	bne.n	800961a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009602:	69fb      	ldr	r3, [r7, #28]
 8009604:	79db      	ldrb	r3, [r3, #7]
 8009606:	2b00      	cmp	r3, #0
 8009608:	d10b      	bne.n	8009622 <USBH_ParseCfgDesc+0x14e>
 800960a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800960c:	781b      	ldrb	r3, [r3, #0]
 800960e:	2b09      	cmp	r3, #9
 8009610:	d007      	beq.n	8009622 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8009612:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009614:	2209      	movs	r2, #9
 8009616:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009618:	e003      	b.n	8009622 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800961a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800961c:	2207      	movs	r2, #7
 800961e:	701a      	strb	r2, [r3, #0]
 8009620:	e000      	b.n	8009624 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009622:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009624:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009628:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800962c:	3201      	adds	r2, #1
 800962e:	00d2      	lsls	r2, r2, #3
 8009630:	211a      	movs	r1, #26
 8009632:	fb01 f303 	mul.w	r3, r1, r3
 8009636:	4413      	add	r3, r2
 8009638:	3308      	adds	r3, #8
 800963a:	6a3a      	ldr	r2, [r7, #32]
 800963c:	4413      	add	r3, r2
 800963e:	3304      	adds	r3, #4
 8009640:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009642:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009644:	69b9      	ldr	r1, [r7, #24]
 8009646:	68f8      	ldr	r0, [r7, #12]
 8009648:	f000 f870 	bl	800972c <USBH_ParseEPDesc>
 800964c:	4603      	mov	r3, r0
 800964e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8009652:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009656:	3301      	adds	r3, #1
 8009658:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800965c:	69fb      	ldr	r3, [r7, #28]
 800965e:	791b      	ldrb	r3, [r3, #4]
 8009660:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009664:	429a      	cmp	r2, r3
 8009666:	d204      	bcs.n	8009672 <USBH_ParseCfgDesc+0x19e>
 8009668:	6a3b      	ldr	r3, [r7, #32]
 800966a:	885a      	ldrh	r2, [r3, #2]
 800966c:	8afb      	ldrh	r3, [r7, #22]
 800966e:	429a      	cmp	r2, r3
 8009670:	d8b0      	bhi.n	80095d4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009672:	69fb      	ldr	r3, [r7, #28]
 8009674:	791b      	ldrb	r3, [r3, #4]
 8009676:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800967a:	429a      	cmp	r2, r3
 800967c:	d201      	bcs.n	8009682 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800967e:	2303      	movs	r3, #3
 8009680:	e01c      	b.n	80096bc <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8009682:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009686:	3301      	adds	r3, #1
 8009688:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800968c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009690:	2b01      	cmp	r3, #1
 8009692:	d805      	bhi.n	80096a0 <USBH_ParseCfgDesc+0x1cc>
 8009694:	6a3b      	ldr	r3, [r7, #32]
 8009696:	885a      	ldrh	r2, [r3, #2]
 8009698:	8afb      	ldrh	r3, [r7, #22]
 800969a:	429a      	cmp	r2, r3
 800969c:	f63f af74 	bhi.w	8009588 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80096a0:	6a3b      	ldr	r3, [r7, #32]
 80096a2:	791b      	ldrb	r3, [r3, #4]
 80096a4:	2b02      	cmp	r3, #2
 80096a6:	bf28      	it	cs
 80096a8:	2302      	movcs	r3, #2
 80096aa:	b2db      	uxtb	r3, r3
 80096ac:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 80096b0:	429a      	cmp	r2, r3
 80096b2:	d201      	bcs.n	80096b8 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 80096b4:	2303      	movs	r3, #3
 80096b6:	e001      	b.n	80096bc <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 80096b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80096bc:	4618      	mov	r0, r3
 80096be:	3730      	adds	r7, #48	@ 0x30
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}

080096c4 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 80096c4:	b480      	push	{r7}
 80096c6:	b083      	sub	sp, #12
 80096c8:	af00      	add	r7, sp, #0
 80096ca:	6078      	str	r0, [r7, #4]
 80096cc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 80096ce:	683b      	ldr	r3, [r7, #0]
 80096d0:	781a      	ldrb	r2, [r3, #0]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 80096d6:	683b      	ldr	r3, [r7, #0]
 80096d8:	785a      	ldrb	r2, [r3, #1]
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80096de:	683b      	ldr	r3, [r7, #0]
 80096e0:	789a      	ldrb	r2, [r3, #2]
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80096e6:	683b      	ldr	r3, [r7, #0]
 80096e8:	78da      	ldrb	r2, [r3, #3]
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80096ee:	683b      	ldr	r3, [r7, #0]
 80096f0:	3304      	adds	r3, #4
 80096f2:	781b      	ldrb	r3, [r3, #0]
 80096f4:	2b02      	cmp	r3, #2
 80096f6:	bf28      	it	cs
 80096f8:	2302      	movcs	r3, #2
 80096fa:	b2da      	uxtb	r2, r3
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	795a      	ldrb	r2, [r3, #5]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009708:	683b      	ldr	r3, [r7, #0]
 800970a:	799a      	ldrb	r2, [r3, #6]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009710:	683b      	ldr	r3, [r7, #0]
 8009712:	79da      	ldrb	r2, [r3, #7]
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009718:	683b      	ldr	r3, [r7, #0]
 800971a:	7a1a      	ldrb	r2, [r3, #8]
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	721a      	strb	r2, [r3, #8]
}
 8009720:	bf00      	nop
 8009722:	370c      	adds	r7, #12
 8009724:	46bd      	mov	sp, r7
 8009726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800972a:	4770      	bx	lr

0800972c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800972c:	b480      	push	{r7}
 800972e:	b087      	sub	sp, #28
 8009730:	af00      	add	r7, sp, #0
 8009732:	60f8      	str	r0, [r7, #12]
 8009734:	60b9      	str	r1, [r7, #8]
 8009736:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009738:	2300      	movs	r3, #0
 800973a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	781a      	ldrb	r2, [r3, #0]
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	785a      	ldrb	r2, [r3, #1]
 8009748:	68bb      	ldr	r3, [r7, #8]
 800974a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	789a      	ldrb	r2, [r3, #2]
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	78da      	ldrb	r2, [r3, #3]
 8009758:	68bb      	ldr	r3, [r7, #8]
 800975a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	3304      	adds	r3, #4
 8009760:	781b      	ldrb	r3, [r3, #0]
 8009762:	461a      	mov	r2, r3
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	3305      	adds	r3, #5
 8009768:	781b      	ldrb	r3, [r3, #0]
 800976a:	021b      	lsls	r3, r3, #8
 800976c:	b29b      	uxth	r3, r3
 800976e:	4313      	orrs	r3, r2
 8009770:	b29a      	uxth	r2, r3
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	799a      	ldrb	r2, [r3, #6]
 800977a:	68bb      	ldr	r3, [r7, #8]
 800977c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800977e:	68bb      	ldr	r3, [r7, #8]
 8009780:	889b      	ldrh	r3, [r3, #4]
 8009782:	2b00      	cmp	r3, #0
 8009784:	d009      	beq.n	800979a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009786:	68bb      	ldr	r3, [r7, #8]
 8009788:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800978a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800978e:	d804      	bhi.n	800979a <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009790:	68bb      	ldr	r3, [r7, #8]
 8009792:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009794:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009798:	d901      	bls.n	800979e <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800979a:	2303      	movs	r3, #3
 800979c:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d136      	bne.n	8009816 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	78db      	ldrb	r3, [r3, #3]
 80097ac:	f003 0303 	and.w	r3, r3, #3
 80097b0:	2b02      	cmp	r3, #2
 80097b2:	d108      	bne.n	80097c6 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 80097b4:	68bb      	ldr	r3, [r7, #8]
 80097b6:	889b      	ldrh	r3, [r3, #4]
 80097b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80097bc:	f240 8097 	bls.w	80098ee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80097c0:	2303      	movs	r3, #3
 80097c2:	75fb      	strb	r3, [r7, #23]
 80097c4:	e093      	b.n	80098ee <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	78db      	ldrb	r3, [r3, #3]
 80097ca:	f003 0303 	and.w	r3, r3, #3
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d107      	bne.n	80097e2 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	889b      	ldrh	r3, [r3, #4]
 80097d6:	2b40      	cmp	r3, #64	@ 0x40
 80097d8:	f240 8089 	bls.w	80098ee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80097dc:	2303      	movs	r3, #3
 80097de:	75fb      	strb	r3, [r7, #23]
 80097e0:	e085      	b.n	80098ee <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	78db      	ldrb	r3, [r3, #3]
 80097e6:	f003 0303 	and.w	r3, r3, #3
 80097ea:	2b01      	cmp	r3, #1
 80097ec:	d005      	beq.n	80097fa <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80097ee:	68bb      	ldr	r3, [r7, #8]
 80097f0:	78db      	ldrb	r3, [r3, #3]
 80097f2:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80097f6:	2b03      	cmp	r3, #3
 80097f8:	d10a      	bne.n	8009810 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	799b      	ldrb	r3, [r3, #6]
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d003      	beq.n	800980a <USBH_ParseEPDesc+0xde>
 8009802:	68bb      	ldr	r3, [r7, #8]
 8009804:	799b      	ldrb	r3, [r3, #6]
 8009806:	2b10      	cmp	r3, #16
 8009808:	d970      	bls.n	80098ec <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800980a:	2303      	movs	r3, #3
 800980c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800980e:	e06d      	b.n	80098ec <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009810:	2303      	movs	r3, #3
 8009812:	75fb      	strb	r3, [r7, #23]
 8009814:	e06b      	b.n	80098ee <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800981c:	2b01      	cmp	r3, #1
 800981e:	d13c      	bne.n	800989a <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009820:	68bb      	ldr	r3, [r7, #8]
 8009822:	78db      	ldrb	r3, [r3, #3]
 8009824:	f003 0303 	and.w	r3, r3, #3
 8009828:	2b02      	cmp	r3, #2
 800982a:	d005      	beq.n	8009838 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800982c:	68bb      	ldr	r3, [r7, #8]
 800982e:	78db      	ldrb	r3, [r3, #3]
 8009830:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009834:	2b00      	cmp	r3, #0
 8009836:	d106      	bne.n	8009846 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009838:	68bb      	ldr	r3, [r7, #8]
 800983a:	889b      	ldrh	r3, [r3, #4]
 800983c:	2b40      	cmp	r3, #64	@ 0x40
 800983e:	d956      	bls.n	80098ee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009840:	2303      	movs	r3, #3
 8009842:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009844:	e053      	b.n	80098ee <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009846:	68bb      	ldr	r3, [r7, #8]
 8009848:	78db      	ldrb	r3, [r3, #3]
 800984a:	f003 0303 	and.w	r3, r3, #3
 800984e:	2b01      	cmp	r3, #1
 8009850:	d10e      	bne.n	8009870 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009852:	68bb      	ldr	r3, [r7, #8]
 8009854:	799b      	ldrb	r3, [r3, #6]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d007      	beq.n	800986a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800985e:	2b10      	cmp	r3, #16
 8009860:	d803      	bhi.n	800986a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009866:	2b40      	cmp	r3, #64	@ 0x40
 8009868:	d941      	bls.n	80098ee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800986a:	2303      	movs	r3, #3
 800986c:	75fb      	strb	r3, [r7, #23]
 800986e:	e03e      	b.n	80098ee <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	78db      	ldrb	r3, [r3, #3]
 8009874:	f003 0303 	and.w	r3, r3, #3
 8009878:	2b03      	cmp	r3, #3
 800987a:	d10b      	bne.n	8009894 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800987c:	68bb      	ldr	r3, [r7, #8]
 800987e:	799b      	ldrb	r3, [r3, #6]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d004      	beq.n	800988e <USBH_ParseEPDesc+0x162>
 8009884:	68bb      	ldr	r3, [r7, #8]
 8009886:	889b      	ldrh	r3, [r3, #4]
 8009888:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800988c:	d32f      	bcc.n	80098ee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800988e:	2303      	movs	r3, #3
 8009890:	75fb      	strb	r3, [r7, #23]
 8009892:	e02c      	b.n	80098ee <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009894:	2303      	movs	r3, #3
 8009896:	75fb      	strb	r3, [r7, #23]
 8009898:	e029      	b.n	80098ee <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80098a0:	2b02      	cmp	r3, #2
 80098a2:	d120      	bne.n	80098e6 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 80098a4:	68bb      	ldr	r3, [r7, #8]
 80098a6:	78db      	ldrb	r3, [r3, #3]
 80098a8:	f003 0303 	and.w	r3, r3, #3
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d106      	bne.n	80098be <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 80098b0:	68bb      	ldr	r3, [r7, #8]
 80098b2:	889b      	ldrh	r3, [r3, #4]
 80098b4:	2b08      	cmp	r3, #8
 80098b6:	d01a      	beq.n	80098ee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80098b8:	2303      	movs	r3, #3
 80098ba:	75fb      	strb	r3, [r7, #23]
 80098bc:	e017      	b.n	80098ee <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	78db      	ldrb	r3, [r3, #3]
 80098c2:	f003 0303 	and.w	r3, r3, #3
 80098c6:	2b03      	cmp	r3, #3
 80098c8:	d10a      	bne.n	80098e0 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 80098ca:	68bb      	ldr	r3, [r7, #8]
 80098cc:	799b      	ldrb	r3, [r3, #6]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d003      	beq.n	80098da <USBH_ParseEPDesc+0x1ae>
 80098d2:	68bb      	ldr	r3, [r7, #8]
 80098d4:	889b      	ldrh	r3, [r3, #4]
 80098d6:	2b08      	cmp	r3, #8
 80098d8:	d909      	bls.n	80098ee <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80098da:	2303      	movs	r3, #3
 80098dc:	75fb      	strb	r3, [r7, #23]
 80098de:	e006      	b.n	80098ee <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80098e0:	2303      	movs	r3, #3
 80098e2:	75fb      	strb	r3, [r7, #23]
 80098e4:	e003      	b.n	80098ee <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80098e6:	2303      	movs	r3, #3
 80098e8:	75fb      	strb	r3, [r7, #23]
 80098ea:	e000      	b.n	80098ee <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80098ec:	bf00      	nop
  }

  return status;
 80098ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80098f0:	4618      	mov	r0, r3
 80098f2:	371c      	adds	r7, #28
 80098f4:	46bd      	mov	sp, r7
 80098f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fa:	4770      	bx	lr

080098fc <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80098fc:	b480      	push	{r7}
 80098fe:	b087      	sub	sp, #28
 8009900:	af00      	add	r7, sp, #0
 8009902:	60f8      	str	r0, [r7, #12]
 8009904:	60b9      	str	r1, [r7, #8]
 8009906:	4613      	mov	r3, r2
 8009908:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800990a:	68fb      	ldr	r3, [r7, #12]
 800990c:	3301      	adds	r3, #1
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	2b03      	cmp	r3, #3
 8009912:	d120      	bne.n	8009956 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	781b      	ldrb	r3, [r3, #0]
 8009918:	1e9a      	subs	r2, r3, #2
 800991a:	88fb      	ldrh	r3, [r7, #6]
 800991c:	4293      	cmp	r3, r2
 800991e:	bf28      	it	cs
 8009920:	4613      	movcs	r3, r2
 8009922:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	3302      	adds	r3, #2
 8009928:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800992a:	2300      	movs	r3, #0
 800992c:	82fb      	strh	r3, [r7, #22]
 800992e:	e00b      	b.n	8009948 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009930:	8afb      	ldrh	r3, [r7, #22]
 8009932:	68fa      	ldr	r2, [r7, #12]
 8009934:	4413      	add	r3, r2
 8009936:	781a      	ldrb	r2, [r3, #0]
 8009938:	68bb      	ldr	r3, [r7, #8]
 800993a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800993c:	68bb      	ldr	r3, [r7, #8]
 800993e:	3301      	adds	r3, #1
 8009940:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009942:	8afb      	ldrh	r3, [r7, #22]
 8009944:	3302      	adds	r3, #2
 8009946:	82fb      	strh	r3, [r7, #22]
 8009948:	8afa      	ldrh	r2, [r7, #22]
 800994a:	8abb      	ldrh	r3, [r7, #20]
 800994c:	429a      	cmp	r2, r3
 800994e:	d3ef      	bcc.n	8009930 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	2200      	movs	r2, #0
 8009954:	701a      	strb	r2, [r3, #0]
  }
}
 8009956:	bf00      	nop
 8009958:	371c      	adds	r7, #28
 800995a:	46bd      	mov	sp, r7
 800995c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009960:	4770      	bx	lr

08009962 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009962:	b480      	push	{r7}
 8009964:	b085      	sub	sp, #20
 8009966:	af00      	add	r7, sp, #0
 8009968:	6078      	str	r0, [r7, #4]
 800996a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800996c:	683b      	ldr	r3, [r7, #0]
 800996e:	881b      	ldrh	r3, [r3, #0]
 8009970:	687a      	ldr	r2, [r7, #4]
 8009972:	7812      	ldrb	r2, [r2, #0]
 8009974:	4413      	add	r3, r2
 8009976:	b29a      	uxth	r2, r3
 8009978:	683b      	ldr	r3, [r7, #0]
 800997a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	781b      	ldrb	r3, [r3, #0]
 8009980:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	4413      	add	r3, r2
 8009986:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009988:	68fb      	ldr	r3, [r7, #12]
}
 800998a:	4618      	mov	r0, r3
 800998c:	3714      	adds	r7, #20
 800998e:	46bd      	mov	sp, r7
 8009990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009994:	4770      	bx	lr

08009996 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009996:	b580      	push	{r7, lr}
 8009998:	b086      	sub	sp, #24
 800999a:	af00      	add	r7, sp, #0
 800999c:	60f8      	str	r0, [r7, #12]
 800999e:	60b9      	str	r1, [r7, #8]
 80099a0:	4613      	mov	r3, r2
 80099a2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80099a4:	2301      	movs	r3, #1
 80099a6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	789b      	ldrb	r3, [r3, #2]
 80099ac:	2b01      	cmp	r3, #1
 80099ae:	d002      	beq.n	80099b6 <USBH_CtlReq+0x20>
 80099b0:	2b02      	cmp	r3, #2
 80099b2:	d00f      	beq.n	80099d4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80099b4:	e027      	b.n	8009a06 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	68ba      	ldr	r2, [r7, #8]
 80099ba:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80099bc:	68fb      	ldr	r3, [r7, #12]
 80099be:	88fa      	ldrh	r2, [r7, #6]
 80099c0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2201      	movs	r2, #1
 80099c6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80099c8:	68fb      	ldr	r3, [r7, #12]
 80099ca:	2202      	movs	r2, #2
 80099cc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80099ce:	2301      	movs	r3, #1
 80099d0:	75fb      	strb	r3, [r7, #23]
      break;
 80099d2:	e018      	b.n	8009a06 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80099d4:	68f8      	ldr	r0, [r7, #12]
 80099d6:	f000 f81b 	bl	8009a10 <USBH_HandleControl>
 80099da:	4603      	mov	r3, r0
 80099dc:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80099de:	7dfb      	ldrb	r3, [r7, #23]
 80099e0:	2b00      	cmp	r3, #0
 80099e2:	d002      	beq.n	80099ea <USBH_CtlReq+0x54>
 80099e4:	7dfb      	ldrb	r3, [r7, #23]
 80099e6:	2b03      	cmp	r3, #3
 80099e8:	d106      	bne.n	80099f8 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80099ea:	68fb      	ldr	r3, [r7, #12]
 80099ec:	2201      	movs	r2, #1
 80099ee:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	2200      	movs	r2, #0
 80099f4:	761a      	strb	r2, [r3, #24]
      break;
 80099f6:	e005      	b.n	8009a04 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80099f8:	7dfb      	ldrb	r3, [r7, #23]
 80099fa:	2b02      	cmp	r3, #2
 80099fc:	d102      	bne.n	8009a04 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2201      	movs	r2, #1
 8009a02:	709a      	strb	r2, [r3, #2]
      break;
 8009a04:	bf00      	nop
  }
  return status;
 8009a06:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	3718      	adds	r7, #24
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}

08009a10 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009a10:	b580      	push	{r7, lr}
 8009a12:	b086      	sub	sp, #24
 8009a14:	af02      	add	r7, sp, #8
 8009a16:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009a18:	2301      	movs	r3, #1
 8009a1a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	7e1b      	ldrb	r3, [r3, #24]
 8009a24:	3b01      	subs	r3, #1
 8009a26:	2b0a      	cmp	r3, #10
 8009a28:	f200 8156 	bhi.w	8009cd8 <USBH_HandleControl+0x2c8>
 8009a2c:	a201      	add	r2, pc, #4	@ (adr r2, 8009a34 <USBH_HandleControl+0x24>)
 8009a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a32:	bf00      	nop
 8009a34:	08009a61 	.word	0x08009a61
 8009a38:	08009a7b 	.word	0x08009a7b
 8009a3c:	08009ae5 	.word	0x08009ae5
 8009a40:	08009b0b 	.word	0x08009b0b
 8009a44:	08009b43 	.word	0x08009b43
 8009a48:	08009b6d 	.word	0x08009b6d
 8009a4c:	08009bbf 	.word	0x08009bbf
 8009a50:	08009be1 	.word	0x08009be1
 8009a54:	08009c1d 	.word	0x08009c1d
 8009a58:	08009c43 	.word	0x08009c43
 8009a5c:	08009c81 	.word	0x08009c81
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	f103 0110 	add.w	r1, r3, #16
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	795b      	ldrb	r3, [r3, #5]
 8009a6a:	461a      	mov	r2, r3
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f000 f943 	bl	8009cf8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2202      	movs	r2, #2
 8009a76:	761a      	strb	r2, [r3, #24]
      break;
 8009a78:	e139      	b.n	8009cee <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	795b      	ldrb	r3, [r3, #5]
 8009a7e:	4619      	mov	r1, r3
 8009a80:	6878      	ldr	r0, [r7, #4]
 8009a82:	f000 fccb 	bl	800a41c <USBH_LL_GetURBState>
 8009a86:	4603      	mov	r3, r0
 8009a88:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009a8a:	7bbb      	ldrb	r3, [r7, #14]
 8009a8c:	2b01      	cmp	r3, #1
 8009a8e:	d11e      	bne.n	8009ace <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	7c1b      	ldrb	r3, [r3, #16]
 8009a94:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009a98:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	8adb      	ldrh	r3, [r3, #22]
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d00a      	beq.n	8009ab8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009aa2:	7b7b      	ldrb	r3, [r7, #13]
 8009aa4:	2b80      	cmp	r3, #128	@ 0x80
 8009aa6:	d103      	bne.n	8009ab0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2203      	movs	r2, #3
 8009aac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009aae:	e115      	b.n	8009cdc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2205      	movs	r2, #5
 8009ab4:	761a      	strb	r2, [r3, #24]
      break;
 8009ab6:	e111      	b.n	8009cdc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009ab8:	7b7b      	ldrb	r3, [r7, #13]
 8009aba:	2b80      	cmp	r3, #128	@ 0x80
 8009abc:	d103      	bne.n	8009ac6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2209      	movs	r2, #9
 8009ac2:	761a      	strb	r2, [r3, #24]
      break;
 8009ac4:	e10a      	b.n	8009cdc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2207      	movs	r2, #7
 8009aca:	761a      	strb	r2, [r3, #24]
      break;
 8009acc:	e106      	b.n	8009cdc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009ace:	7bbb      	ldrb	r3, [r7, #14]
 8009ad0:	2b04      	cmp	r3, #4
 8009ad2:	d003      	beq.n	8009adc <USBH_HandleControl+0xcc>
 8009ad4:	7bbb      	ldrb	r3, [r7, #14]
 8009ad6:	2b02      	cmp	r3, #2
 8009ad8:	f040 8100 	bne.w	8009cdc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	220b      	movs	r2, #11
 8009ae0:	761a      	strb	r2, [r3, #24]
      break;
 8009ae2:	e0fb      	b.n	8009cdc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009aea:	b29a      	uxth	r2, r3
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009af0:	687b      	ldr	r3, [r7, #4]
 8009af2:	6899      	ldr	r1, [r3, #8]
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	899a      	ldrh	r2, [r3, #12]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	791b      	ldrb	r3, [r3, #4]
 8009afc:	6878      	ldr	r0, [r7, #4]
 8009afe:	f000 f93a 	bl	8009d76 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	2204      	movs	r2, #4
 8009b06:	761a      	strb	r2, [r3, #24]
      break;
 8009b08:	e0f1      	b.n	8009cee <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	791b      	ldrb	r3, [r3, #4]
 8009b0e:	4619      	mov	r1, r3
 8009b10:	6878      	ldr	r0, [r7, #4]
 8009b12:	f000 fc83 	bl	800a41c <USBH_LL_GetURBState>
 8009b16:	4603      	mov	r3, r0
 8009b18:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009b1a:	7bbb      	ldrb	r3, [r7, #14]
 8009b1c:	2b01      	cmp	r3, #1
 8009b1e:	d102      	bne.n	8009b26 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	2209      	movs	r2, #9
 8009b24:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009b26:	7bbb      	ldrb	r3, [r7, #14]
 8009b28:	2b05      	cmp	r3, #5
 8009b2a:	d102      	bne.n	8009b32 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009b2c:	2303      	movs	r3, #3
 8009b2e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009b30:	e0d6      	b.n	8009ce0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009b32:	7bbb      	ldrb	r3, [r7, #14]
 8009b34:	2b04      	cmp	r3, #4
 8009b36:	f040 80d3 	bne.w	8009ce0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	220b      	movs	r2, #11
 8009b3e:	761a      	strb	r2, [r3, #24]
      break;
 8009b40:	e0ce      	b.n	8009ce0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	6899      	ldr	r1, [r3, #8]
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	899a      	ldrh	r2, [r3, #12]
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	795b      	ldrb	r3, [r3, #5]
 8009b4e:	2001      	movs	r0, #1
 8009b50:	9000      	str	r0, [sp, #0]
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 f8ea 	bl	8009d2c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009b5e:	b29a      	uxth	r2, r3
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2206      	movs	r2, #6
 8009b68:	761a      	strb	r2, [r3, #24]
      break;
 8009b6a:	e0c0      	b.n	8009cee <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	795b      	ldrb	r3, [r3, #5]
 8009b70:	4619      	mov	r1, r3
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 fc52 	bl	800a41c <USBH_LL_GetURBState>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009b7c:	7bbb      	ldrb	r3, [r7, #14]
 8009b7e:	2b01      	cmp	r3, #1
 8009b80:	d103      	bne.n	8009b8a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	2207      	movs	r2, #7
 8009b86:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009b88:	e0ac      	b.n	8009ce4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009b8a:	7bbb      	ldrb	r3, [r7, #14]
 8009b8c:	2b05      	cmp	r3, #5
 8009b8e:	d105      	bne.n	8009b9c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	220c      	movs	r2, #12
 8009b94:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009b96:	2303      	movs	r3, #3
 8009b98:	73fb      	strb	r3, [r7, #15]
      break;
 8009b9a:	e0a3      	b.n	8009ce4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009b9c:	7bbb      	ldrb	r3, [r7, #14]
 8009b9e:	2b02      	cmp	r3, #2
 8009ba0:	d103      	bne.n	8009baa <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	2205      	movs	r2, #5
 8009ba6:	761a      	strb	r2, [r3, #24]
      break;
 8009ba8:	e09c      	b.n	8009ce4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009baa:	7bbb      	ldrb	r3, [r7, #14]
 8009bac:	2b04      	cmp	r3, #4
 8009bae:	f040 8099 	bne.w	8009ce4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	220b      	movs	r2, #11
 8009bb6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009bb8:	2302      	movs	r3, #2
 8009bba:	73fb      	strb	r3, [r7, #15]
      break;
 8009bbc:	e092      	b.n	8009ce4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	791b      	ldrb	r3, [r3, #4]
 8009bc2:	2200      	movs	r2, #0
 8009bc4:	2100      	movs	r1, #0
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 f8d5 	bl	8009d76 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009bd2:	b29a      	uxth	r2, r3
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2208      	movs	r2, #8
 8009bdc:	761a      	strb	r2, [r3, #24]

      break;
 8009bde:	e086      	b.n	8009cee <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	791b      	ldrb	r3, [r3, #4]
 8009be4:	4619      	mov	r1, r3
 8009be6:	6878      	ldr	r0, [r7, #4]
 8009be8:	f000 fc18 	bl	800a41c <USBH_LL_GetURBState>
 8009bec:	4603      	mov	r3, r0
 8009bee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009bf0:	7bbb      	ldrb	r3, [r7, #14]
 8009bf2:	2b01      	cmp	r3, #1
 8009bf4:	d105      	bne.n	8009c02 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	220d      	movs	r2, #13
 8009bfa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009c00:	e072      	b.n	8009ce8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009c02:	7bbb      	ldrb	r3, [r7, #14]
 8009c04:	2b04      	cmp	r3, #4
 8009c06:	d103      	bne.n	8009c10 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	220b      	movs	r2, #11
 8009c0c:	761a      	strb	r2, [r3, #24]
      break;
 8009c0e:	e06b      	b.n	8009ce8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009c10:	7bbb      	ldrb	r3, [r7, #14]
 8009c12:	2b05      	cmp	r3, #5
 8009c14:	d168      	bne.n	8009ce8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009c16:	2303      	movs	r3, #3
 8009c18:	73fb      	strb	r3, [r7, #15]
      break;
 8009c1a:	e065      	b.n	8009ce8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	795b      	ldrb	r3, [r3, #5]
 8009c20:	2201      	movs	r2, #1
 8009c22:	9200      	str	r2, [sp, #0]
 8009c24:	2200      	movs	r2, #0
 8009c26:	2100      	movs	r1, #0
 8009c28:	6878      	ldr	r0, [r7, #4]
 8009c2a:	f000 f87f 	bl	8009d2c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009c34:	b29a      	uxth	r2, r3
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	220a      	movs	r2, #10
 8009c3e:	761a      	strb	r2, [r3, #24]
      break;
 8009c40:	e055      	b.n	8009cee <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	795b      	ldrb	r3, [r3, #5]
 8009c46:	4619      	mov	r1, r3
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 fbe7 	bl	800a41c <USBH_LL_GetURBState>
 8009c4e:	4603      	mov	r3, r0
 8009c50:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009c52:	7bbb      	ldrb	r3, [r7, #14]
 8009c54:	2b01      	cmp	r3, #1
 8009c56:	d105      	bne.n	8009c64 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009c58:	2300      	movs	r3, #0
 8009c5a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	220d      	movs	r2, #13
 8009c60:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009c62:	e043      	b.n	8009cec <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009c64:	7bbb      	ldrb	r3, [r7, #14]
 8009c66:	2b02      	cmp	r3, #2
 8009c68:	d103      	bne.n	8009c72 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	2209      	movs	r2, #9
 8009c6e:	761a      	strb	r2, [r3, #24]
      break;
 8009c70:	e03c      	b.n	8009cec <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009c72:	7bbb      	ldrb	r3, [r7, #14]
 8009c74:	2b04      	cmp	r3, #4
 8009c76:	d139      	bne.n	8009cec <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	220b      	movs	r2, #11
 8009c7c:	761a      	strb	r2, [r3, #24]
      break;
 8009c7e:	e035      	b.n	8009cec <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	7e5b      	ldrb	r3, [r3, #25]
 8009c84:	3301      	adds	r3, #1
 8009c86:	b2da      	uxtb	r2, r3
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	765a      	strb	r2, [r3, #25]
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	7e5b      	ldrb	r3, [r3, #25]
 8009c90:	2b02      	cmp	r3, #2
 8009c92:	d806      	bhi.n	8009ca2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	2201      	movs	r2, #1
 8009c98:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2201      	movs	r2, #1
 8009c9e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009ca0:	e025      	b.n	8009cee <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009ca8:	2106      	movs	r1, #6
 8009caa:	6878      	ldr	r0, [r7, #4]
 8009cac:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	2200      	movs	r2, #0
 8009cb2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	795b      	ldrb	r3, [r3, #5]
 8009cb8:	4619      	mov	r1, r3
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 f90c 	bl	8009ed8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	791b      	ldrb	r3, [r3, #4]
 8009cc4:	4619      	mov	r1, r3
 8009cc6:	6878      	ldr	r0, [r7, #4]
 8009cc8:	f000 f906 	bl	8009ed8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009cd2:	2302      	movs	r3, #2
 8009cd4:	73fb      	strb	r3, [r7, #15]
      break;
 8009cd6:	e00a      	b.n	8009cee <USBH_HandleControl+0x2de>

    default:
      break;
 8009cd8:	bf00      	nop
 8009cda:	e008      	b.n	8009cee <USBH_HandleControl+0x2de>
      break;
 8009cdc:	bf00      	nop
 8009cde:	e006      	b.n	8009cee <USBH_HandleControl+0x2de>
      break;
 8009ce0:	bf00      	nop
 8009ce2:	e004      	b.n	8009cee <USBH_HandleControl+0x2de>
      break;
 8009ce4:	bf00      	nop
 8009ce6:	e002      	b.n	8009cee <USBH_HandleControl+0x2de>
      break;
 8009ce8:	bf00      	nop
 8009cea:	e000      	b.n	8009cee <USBH_HandleControl+0x2de>
      break;
 8009cec:	bf00      	nop
  }

  return status;
 8009cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cf0:	4618      	mov	r0, r3
 8009cf2:	3710      	adds	r7, #16
 8009cf4:	46bd      	mov	sp, r7
 8009cf6:	bd80      	pop	{r7, pc}

08009cf8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b088      	sub	sp, #32
 8009cfc:	af04      	add	r7, sp, #16
 8009cfe:	60f8      	str	r0, [r7, #12]
 8009d00:	60b9      	str	r1, [r7, #8]
 8009d02:	4613      	mov	r3, r2
 8009d04:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009d06:	79f9      	ldrb	r1, [r7, #7]
 8009d08:	2300      	movs	r3, #0
 8009d0a:	9303      	str	r3, [sp, #12]
 8009d0c:	2308      	movs	r3, #8
 8009d0e:	9302      	str	r3, [sp, #8]
 8009d10:	68bb      	ldr	r3, [r7, #8]
 8009d12:	9301      	str	r3, [sp, #4]
 8009d14:	2300      	movs	r3, #0
 8009d16:	9300      	str	r3, [sp, #0]
 8009d18:	2300      	movs	r3, #0
 8009d1a:	2200      	movs	r2, #0
 8009d1c:	68f8      	ldr	r0, [r7, #12]
 8009d1e:	f000 fb4c 	bl	800a3ba <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009d22:	2300      	movs	r3, #0
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	3710      	adds	r7, #16
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	bd80      	pop	{r7, pc}

08009d2c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009d2c:	b580      	push	{r7, lr}
 8009d2e:	b088      	sub	sp, #32
 8009d30:	af04      	add	r7, sp, #16
 8009d32:	60f8      	str	r0, [r7, #12]
 8009d34:	60b9      	str	r1, [r7, #8]
 8009d36:	4611      	mov	r1, r2
 8009d38:	461a      	mov	r2, r3
 8009d3a:	460b      	mov	r3, r1
 8009d3c:	80fb      	strh	r3, [r7, #6]
 8009d3e:	4613      	mov	r3, r2
 8009d40:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d001      	beq.n	8009d50 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009d50:	7979      	ldrb	r1, [r7, #5]
 8009d52:	7e3b      	ldrb	r3, [r7, #24]
 8009d54:	9303      	str	r3, [sp, #12]
 8009d56:	88fb      	ldrh	r3, [r7, #6]
 8009d58:	9302      	str	r3, [sp, #8]
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	9301      	str	r3, [sp, #4]
 8009d5e:	2301      	movs	r3, #1
 8009d60:	9300      	str	r3, [sp, #0]
 8009d62:	2300      	movs	r3, #0
 8009d64:	2200      	movs	r2, #0
 8009d66:	68f8      	ldr	r0, [r7, #12]
 8009d68:	f000 fb27 	bl	800a3ba <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009d6c:	2300      	movs	r3, #0
}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3710      	adds	r7, #16
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b088      	sub	sp, #32
 8009d7a:	af04      	add	r7, sp, #16
 8009d7c:	60f8      	str	r0, [r7, #12]
 8009d7e:	60b9      	str	r1, [r7, #8]
 8009d80:	4611      	mov	r1, r2
 8009d82:	461a      	mov	r2, r3
 8009d84:	460b      	mov	r3, r1
 8009d86:	80fb      	strh	r3, [r7, #6]
 8009d88:	4613      	mov	r3, r2
 8009d8a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009d8c:	7979      	ldrb	r1, [r7, #5]
 8009d8e:	2300      	movs	r3, #0
 8009d90:	9303      	str	r3, [sp, #12]
 8009d92:	88fb      	ldrh	r3, [r7, #6]
 8009d94:	9302      	str	r3, [sp, #8]
 8009d96:	68bb      	ldr	r3, [r7, #8]
 8009d98:	9301      	str	r3, [sp, #4]
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	9300      	str	r3, [sp, #0]
 8009d9e:	2300      	movs	r3, #0
 8009da0:	2201      	movs	r2, #1
 8009da2:	68f8      	ldr	r0, [r7, #12]
 8009da4:	f000 fb09 	bl	800a3ba <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009da8:	2300      	movs	r3, #0

}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3710      	adds	r7, #16
 8009dae:	46bd      	mov	sp, r7
 8009db0:	bd80      	pop	{r7, pc}

08009db2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009db2:	b580      	push	{r7, lr}
 8009db4:	b088      	sub	sp, #32
 8009db6:	af04      	add	r7, sp, #16
 8009db8:	60f8      	str	r0, [r7, #12]
 8009dba:	60b9      	str	r1, [r7, #8]
 8009dbc:	4611      	mov	r1, r2
 8009dbe:	461a      	mov	r2, r3
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	80fb      	strh	r3, [r7, #6]
 8009dc4:	4613      	mov	r3, r2
 8009dc6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009dce:	2b00      	cmp	r3, #0
 8009dd0:	d001      	beq.n	8009dd6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009dd6:	7979      	ldrb	r1, [r7, #5]
 8009dd8:	7e3b      	ldrb	r3, [r7, #24]
 8009dda:	9303      	str	r3, [sp, #12]
 8009ddc:	88fb      	ldrh	r3, [r7, #6]
 8009dde:	9302      	str	r3, [sp, #8]
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	9301      	str	r3, [sp, #4]
 8009de4:	2301      	movs	r3, #1
 8009de6:	9300      	str	r3, [sp, #0]
 8009de8:	2302      	movs	r3, #2
 8009dea:	2200      	movs	r2, #0
 8009dec:	68f8      	ldr	r0, [r7, #12]
 8009dee:	f000 fae4 	bl	800a3ba <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009df2:	2300      	movs	r3, #0
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3710      	adds	r7, #16
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b088      	sub	sp, #32
 8009e00:	af04      	add	r7, sp, #16
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	4611      	mov	r1, r2
 8009e08:	461a      	mov	r2, r3
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	80fb      	strh	r3, [r7, #6]
 8009e0e:	4613      	mov	r3, r2
 8009e10:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009e12:	7979      	ldrb	r1, [r7, #5]
 8009e14:	2300      	movs	r3, #0
 8009e16:	9303      	str	r3, [sp, #12]
 8009e18:	88fb      	ldrh	r3, [r7, #6]
 8009e1a:	9302      	str	r3, [sp, #8]
 8009e1c:	68bb      	ldr	r3, [r7, #8]
 8009e1e:	9301      	str	r3, [sp, #4]
 8009e20:	2301      	movs	r3, #1
 8009e22:	9300      	str	r3, [sp, #0]
 8009e24:	2302      	movs	r3, #2
 8009e26:	2201      	movs	r2, #1
 8009e28:	68f8      	ldr	r0, [r7, #12]
 8009e2a:	f000 fac6 	bl	800a3ba <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009e2e:	2300      	movs	r3, #0
}
 8009e30:	4618      	mov	r0, r3
 8009e32:	3710      	adds	r7, #16
 8009e34:	46bd      	mov	sp, r7
 8009e36:	bd80      	pop	{r7, pc}

08009e38 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b086      	sub	sp, #24
 8009e3c:	af04      	add	r7, sp, #16
 8009e3e:	6078      	str	r0, [r7, #4]
 8009e40:	4608      	mov	r0, r1
 8009e42:	4611      	mov	r1, r2
 8009e44:	461a      	mov	r2, r3
 8009e46:	4603      	mov	r3, r0
 8009e48:	70fb      	strb	r3, [r7, #3]
 8009e4a:	460b      	mov	r3, r1
 8009e4c:	70bb      	strb	r3, [r7, #2]
 8009e4e:	4613      	mov	r3, r2
 8009e50:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009e52:	7878      	ldrb	r0, [r7, #1]
 8009e54:	78ba      	ldrb	r2, [r7, #2]
 8009e56:	78f9      	ldrb	r1, [r7, #3]
 8009e58:	8b3b      	ldrh	r3, [r7, #24]
 8009e5a:	9302      	str	r3, [sp, #8]
 8009e5c:	7d3b      	ldrb	r3, [r7, #20]
 8009e5e:	9301      	str	r3, [sp, #4]
 8009e60:	7c3b      	ldrb	r3, [r7, #16]
 8009e62:	9300      	str	r3, [sp, #0]
 8009e64:	4603      	mov	r3, r0
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 fa59 	bl	800a31e <USBH_LL_OpenPipe>

  return USBH_OK;
 8009e6c:	2300      	movs	r3, #0
}
 8009e6e:	4618      	mov	r0, r3
 8009e70:	3708      	adds	r7, #8
 8009e72:	46bd      	mov	sp, r7
 8009e74:	bd80      	pop	{r7, pc}

08009e76 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009e76:	b580      	push	{r7, lr}
 8009e78:	b082      	sub	sp, #8
 8009e7a:	af00      	add	r7, sp, #0
 8009e7c:	6078      	str	r0, [r7, #4]
 8009e7e:	460b      	mov	r3, r1
 8009e80:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009e82:	78fb      	ldrb	r3, [r7, #3]
 8009e84:	4619      	mov	r1, r3
 8009e86:	6878      	ldr	r0, [r7, #4]
 8009e88:	f000 fa78 	bl	800a37c <USBH_LL_ClosePipe>

  return USBH_OK;
 8009e8c:	2300      	movs	r3, #0
}
 8009e8e:	4618      	mov	r0, r3
 8009e90:	3708      	adds	r7, #8
 8009e92:	46bd      	mov	sp, r7
 8009e94:	bd80      	pop	{r7, pc}

08009e96 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009e96:	b580      	push	{r7, lr}
 8009e98:	b084      	sub	sp, #16
 8009e9a:	af00      	add	r7, sp, #0
 8009e9c:	6078      	str	r0, [r7, #4]
 8009e9e:	460b      	mov	r3, r1
 8009ea0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009ea2:	6878      	ldr	r0, [r7, #4]
 8009ea4:	f000 f836 	bl	8009f14 <USBH_GetFreePipe>
 8009ea8:	4603      	mov	r3, r0
 8009eaa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009eac:	89fb      	ldrh	r3, [r7, #14]
 8009eae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009eb2:	4293      	cmp	r3, r2
 8009eb4:	d00a      	beq.n	8009ecc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009eb6:	78fa      	ldrb	r2, [r7, #3]
 8009eb8:	89fb      	ldrh	r3, [r7, #14]
 8009eba:	f003 030f 	and.w	r3, r3, #15
 8009ebe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009ec2:	6879      	ldr	r1, [r7, #4]
 8009ec4:	33e0      	adds	r3, #224	@ 0xe0
 8009ec6:	009b      	lsls	r3, r3, #2
 8009ec8:	440b      	add	r3, r1
 8009eca:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009ecc:	89fb      	ldrh	r3, [r7, #14]
 8009ece:	b2db      	uxtb	r3, r3
}
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	3710      	adds	r7, #16
 8009ed4:	46bd      	mov	sp, r7
 8009ed6:	bd80      	pop	{r7, pc}

08009ed8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b083      	sub	sp, #12
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
 8009ee0:	460b      	mov	r3, r1
 8009ee2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009ee4:	78fb      	ldrb	r3, [r7, #3]
 8009ee6:	2b0f      	cmp	r3, #15
 8009ee8:	d80d      	bhi.n	8009f06 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009eea:	78fb      	ldrb	r3, [r7, #3]
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	33e0      	adds	r3, #224	@ 0xe0
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	4413      	add	r3, r2
 8009ef4:	685a      	ldr	r2, [r3, #4]
 8009ef6:	78fb      	ldrb	r3, [r7, #3]
 8009ef8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009efc:	6879      	ldr	r1, [r7, #4]
 8009efe:	33e0      	adds	r3, #224	@ 0xe0
 8009f00:	009b      	lsls	r3, r3, #2
 8009f02:	440b      	add	r3, r1
 8009f04:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009f06:	2300      	movs	r3, #0
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	370c      	adds	r7, #12
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f12:	4770      	bx	lr

08009f14 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009f14:	b480      	push	{r7}
 8009f16:	b085      	sub	sp, #20
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009f20:	2300      	movs	r3, #0
 8009f22:	73fb      	strb	r3, [r7, #15]
 8009f24:	e00f      	b.n	8009f46 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009f26:	7bfb      	ldrb	r3, [r7, #15]
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	33e0      	adds	r3, #224	@ 0xe0
 8009f2c:	009b      	lsls	r3, r3, #2
 8009f2e:	4413      	add	r3, r2
 8009f30:	685b      	ldr	r3, [r3, #4]
 8009f32:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d102      	bne.n	8009f40 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009f3a:	7bfb      	ldrb	r3, [r7, #15]
 8009f3c:	b29b      	uxth	r3, r3
 8009f3e:	e007      	b.n	8009f50 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009f40:	7bfb      	ldrb	r3, [r7, #15]
 8009f42:	3301      	adds	r3, #1
 8009f44:	73fb      	strb	r3, [r7, #15]
 8009f46:	7bfb      	ldrb	r3, [r7, #15]
 8009f48:	2b0f      	cmp	r3, #15
 8009f4a:	d9ec      	bls.n	8009f26 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009f4c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009f50:	4618      	mov	r0, r3
 8009f52:	3714      	adds	r7, #20
 8009f54:	46bd      	mov	sp, r7
 8009f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f5a:	4770      	bx	lr

08009f5c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 8009f60:	2200      	movs	r2, #0
 8009f62:	490e      	ldr	r1, [pc, #56]	@ (8009f9c <MX_USB_HOST_Init+0x40>)
 8009f64:	480e      	ldr	r0, [pc, #56]	@ (8009fa0 <MX_USB_HOST_Init+0x44>)
 8009f66:	f7fe fb15 	bl	8008594 <USBH_Init>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	d001      	beq.n	8009f74 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009f70:	f7f6 fe8e 	bl	8000c90 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 8009f74:	490b      	ldr	r1, [pc, #44]	@ (8009fa4 <MX_USB_HOST_Init+0x48>)
 8009f76:	480a      	ldr	r0, [pc, #40]	@ (8009fa0 <MX_USB_HOST_Init+0x44>)
 8009f78:	f7fe fbb9 	bl	80086ee <USBH_RegisterClass>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d001      	beq.n	8009f86 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009f82:	f7f6 fe85 	bl	8000c90 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 8009f86:	4806      	ldr	r0, [pc, #24]	@ (8009fa0 <MX_USB_HOST_Init+0x44>)
 8009f88:	f7fe fc3d 	bl	8008806 <USBH_Start>
 8009f8c:	4603      	mov	r3, r0
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d001      	beq.n	8009f96 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009f92:	f7f6 fe7d 	bl	8000c90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009f96:	bf00      	nop
 8009f98:	bd80      	pop	{r7, pc}
 8009f9a:	bf00      	nop
 8009f9c:	08009fbd 	.word	0x08009fbd
 8009fa0:	2000034c 	.word	0x2000034c
 8009fa4:	2000000c 	.word	0x2000000c

08009fa8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009fa8:	b580      	push	{r7, lr}
 8009faa:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 8009fac:	4802      	ldr	r0, [pc, #8]	@ (8009fb8 <MX_USB_HOST_Process+0x10>)
 8009fae:	f7fe fc3b 	bl	8008828 <USBH_Process>
}
 8009fb2:	bf00      	nop
 8009fb4:	bd80      	pop	{r7, pc}
 8009fb6:	bf00      	nop
 8009fb8:	2000034c 	.word	0x2000034c

08009fbc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009fbc:	b480      	push	{r7}
 8009fbe:	b083      	sub	sp, #12
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	6078      	str	r0, [r7, #4]
 8009fc4:	460b      	mov	r3, r1
 8009fc6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009fc8:	78fb      	ldrb	r3, [r7, #3]
 8009fca:	3b01      	subs	r3, #1
 8009fcc:	2b04      	cmp	r3, #4
 8009fce:	d819      	bhi.n	800a004 <USBH_UserProcess+0x48>
 8009fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8009fd8 <USBH_UserProcess+0x1c>)
 8009fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009fd6:	bf00      	nop
 8009fd8:	0800a005 	.word	0x0800a005
 8009fdc:	08009ff5 	.word	0x08009ff5
 8009fe0:	0800a005 	.word	0x0800a005
 8009fe4:	08009ffd 	.word	0x08009ffd
 8009fe8:	08009fed 	.word	0x08009fed
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009fec:	4b09      	ldr	r3, [pc, #36]	@ (800a014 <USBH_UserProcess+0x58>)
 8009fee:	2203      	movs	r2, #3
 8009ff0:	701a      	strb	r2, [r3, #0]
  break;
 8009ff2:	e008      	b.n	800a006 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009ff4:	4b07      	ldr	r3, [pc, #28]	@ (800a014 <USBH_UserProcess+0x58>)
 8009ff6:	2202      	movs	r2, #2
 8009ff8:	701a      	strb	r2, [r3, #0]
  break;
 8009ffa:	e004      	b.n	800a006 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009ffc:	4b05      	ldr	r3, [pc, #20]	@ (800a014 <USBH_UserProcess+0x58>)
 8009ffe:	2201      	movs	r2, #1
 800a000:	701a      	strb	r2, [r3, #0]
  break;
 800a002:	e000      	b.n	800a006 <USBH_UserProcess+0x4a>

  default:
  break;
 800a004:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a006:	bf00      	nop
 800a008:	370c      	adds	r7, #12
 800a00a:	46bd      	mov	sp, r7
 800a00c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a010:	4770      	bx	lr
 800a012:	bf00      	nop
 800a014:	20000724 	.word	0x20000724

0800a018 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b08a      	sub	sp, #40	@ 0x28
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a020:	f107 0314 	add.w	r3, r7, #20
 800a024:	2200      	movs	r2, #0
 800a026:	601a      	str	r2, [r3, #0]
 800a028:	605a      	str	r2, [r3, #4]
 800a02a:	609a      	str	r2, [r3, #8]
 800a02c:	60da      	str	r2, [r3, #12]
 800a02e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a24      	ldr	r2, [pc, #144]	@ (800a0c8 <HAL_HCD_MspInit+0xb0>)
 800a036:	4293      	cmp	r3, r2
 800a038:	d141      	bne.n	800a0be <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a03a:	2300      	movs	r3, #0
 800a03c:	613b      	str	r3, [r7, #16]
 800a03e:	4b23      	ldr	r3, [pc, #140]	@ (800a0cc <HAL_HCD_MspInit+0xb4>)
 800a040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a042:	4a22      	ldr	r2, [pc, #136]	@ (800a0cc <HAL_HCD_MspInit+0xb4>)
 800a044:	f043 0302 	orr.w	r3, r3, #2
 800a048:	6313      	str	r3, [r2, #48]	@ 0x30
 800a04a:	4b20      	ldr	r3, [pc, #128]	@ (800a0cc <HAL_HCD_MspInit+0xb4>)
 800a04c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a04e:	f003 0302 	and.w	r3, r3, #2
 800a052:	613b      	str	r3, [r7, #16]
 800a054:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800a056:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800a05a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a05c:	2302      	movs	r3, #2
 800a05e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a060:	2300      	movs	r3, #0
 800a062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a064:	2300      	movs	r3, #0
 800a066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800a068:	230c      	movs	r3, #12
 800a06a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a06c:	f107 0314 	add.w	r3, r7, #20
 800a070:	4619      	mov	r1, r3
 800a072:	4817      	ldr	r0, [pc, #92]	@ (800a0d0 <HAL_HCD_MspInit+0xb8>)
 800a074:	f7f7 fe02 	bl	8001c7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800a078:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800a07c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a07e:	2300      	movs	r3, #0
 800a080:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a082:	2300      	movs	r3, #0
 800a084:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800a086:	f107 0314 	add.w	r3, r7, #20
 800a08a:	4619      	mov	r1, r3
 800a08c:	4810      	ldr	r0, [pc, #64]	@ (800a0d0 <HAL_HCD_MspInit+0xb8>)
 800a08e:	f7f7 fdf5 	bl	8001c7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800a092:	2300      	movs	r3, #0
 800a094:	60fb      	str	r3, [r7, #12]
 800a096:	4b0d      	ldr	r3, [pc, #52]	@ (800a0cc <HAL_HCD_MspInit+0xb4>)
 800a098:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a09a:	4a0c      	ldr	r2, [pc, #48]	@ (800a0cc <HAL_HCD_MspInit+0xb4>)
 800a09c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800a0a0:	6313      	str	r3, [r2, #48]	@ 0x30
 800a0a2:	4b0a      	ldr	r3, [pc, #40]	@ (800a0cc <HAL_HCD_MspInit+0xb4>)
 800a0a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0a6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800a0aa:	60fb      	str	r3, [r7, #12]
 800a0ac:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	2100      	movs	r1, #0
 800a0b2:	204d      	movs	r0, #77	@ 0x4d
 800a0b4:	f7f7 fbb0 	bl	8001818 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800a0b8:	204d      	movs	r0, #77	@ 0x4d
 800a0ba:	f7f7 fbc9 	bl	8001850 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800a0be:	bf00      	nop
 800a0c0:	3728      	adds	r7, #40	@ 0x28
 800a0c2:	46bd      	mov	sp, r7
 800a0c4:	bd80      	pop	{r7, pc}
 800a0c6:	bf00      	nop
 800a0c8:	40040000 	.word	0x40040000
 800a0cc:	40023800 	.word	0x40023800
 800a0d0:	40020400 	.word	0x40020400

0800a0d4 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	f7fe ff77 	bl	8008fd6 <USBH_LL_IncTimer>
}
 800a0e8:	bf00      	nop
 800a0ea:	3708      	adds	r7, #8
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	bd80      	pop	{r7, pc}

0800a0f0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a0f0:	b580      	push	{r7, lr}
 800a0f2:	b082      	sub	sp, #8
 800a0f4:	af00      	add	r7, sp, #0
 800a0f6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a0fe:	4618      	mov	r0, r3
 800a100:	f7fe ffaf 	bl	8009062 <USBH_LL_Connect>
}
 800a104:	bf00      	nop
 800a106:	3708      	adds	r7, #8
 800a108:	46bd      	mov	sp, r7
 800a10a:	bd80      	pop	{r7, pc}

0800a10c <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a10c:	b580      	push	{r7, lr}
 800a10e:	b082      	sub	sp, #8
 800a110:	af00      	add	r7, sp, #0
 800a112:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a11a:	4618      	mov	r0, r3
 800a11c:	f7fe ffb8 	bl	8009090 <USBH_LL_Disconnect>
}
 800a120:	bf00      	nop
 800a122:	3708      	adds	r7, #8
 800a124:	46bd      	mov	sp, r7
 800a126:	bd80      	pop	{r7, pc}

0800a128 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a128:	b480      	push	{r7}
 800a12a:	b083      	sub	sp, #12
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
 800a130:	460b      	mov	r3, r1
 800a132:	70fb      	strb	r3, [r7, #3]
 800a134:	4613      	mov	r3, r2
 800a136:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a138:	bf00      	nop
 800a13a:	370c      	adds	r7, #12
 800a13c:	46bd      	mov	sp, r7
 800a13e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a142:	4770      	bx	lr

0800a144 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a144:	b580      	push	{r7, lr}
 800a146:	b082      	sub	sp, #8
 800a148:	af00      	add	r7, sp, #0
 800a14a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a152:	4618      	mov	r0, r3
 800a154:	f7fe ff69 	bl	800902a <USBH_LL_PortEnabled>
}
 800a158:	bf00      	nop
 800a15a:	3708      	adds	r7, #8
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a16e:	4618      	mov	r0, r3
 800a170:	f7fe ff69 	bl	8009046 <USBH_LL_PortDisabled>
}
 800a174:	bf00      	nop
 800a176:	3708      	adds	r7, #8
 800a178:	46bd      	mov	sp, r7
 800a17a:	bd80      	pop	{r7, pc}

0800a17c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a17c:	b580      	push	{r7, lr}
 800a17e:	b082      	sub	sp, #8
 800a180:	af00      	add	r7, sp, #0
 800a182:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	d132      	bne.n	800a1f4 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800a18e:	4a1c      	ldr	r2, [pc, #112]	@ (800a200 <USBH_LL_Init+0x84>)
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_HS;
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	4a19      	ldr	r2, [pc, #100]	@ (800a200 <USBH_LL_Init+0x84>)
 800a19a:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800a19e:	4b18      	ldr	r3, [pc, #96]	@ (800a200 <USBH_LL_Init+0x84>)
 800a1a0:	4a18      	ldr	r2, [pc, #96]	@ (800a204 <USBH_LL_Init+0x88>)
 800a1a2:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800a1a4:	4b16      	ldr	r3, [pc, #88]	@ (800a200 <USBH_LL_Init+0x84>)
 800a1a6:	220c      	movs	r2, #12
 800a1a8:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800a1aa:	4b15      	ldr	r3, [pc, #84]	@ (800a200 <USBH_LL_Init+0x84>)
 800a1ac:	2201      	movs	r2, #1
 800a1ae:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800a1b0:	4b13      	ldr	r3, [pc, #76]	@ (800a200 <USBH_LL_Init+0x84>)
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800a1b6:	4b12      	ldr	r3, [pc, #72]	@ (800a200 <USBH_LL_Init+0x84>)
 800a1b8:	2202      	movs	r2, #2
 800a1ba:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800a1bc:	4b10      	ldr	r3, [pc, #64]	@ (800a200 <USBH_LL_Init+0x84>)
 800a1be:	2200      	movs	r2, #0
 800a1c0:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800a1c2:	4b0f      	ldr	r3, [pc, #60]	@ (800a200 <USBH_LL_Init+0x84>)
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800a1c8:	4b0d      	ldr	r3, [pc, #52]	@ (800a200 <USBH_LL_Init+0x84>)
 800a1ca:	2200      	movs	r2, #0
 800a1cc:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800a1ce:	4b0c      	ldr	r3, [pc, #48]	@ (800a200 <USBH_LL_Init+0x84>)
 800a1d0:	2200      	movs	r2, #0
 800a1d2:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800a1d4:	480a      	ldr	r0, [pc, #40]	@ (800a200 <USBH_LL_Init+0x84>)
 800a1d6:	f7f7 ff30 	bl	800203a <HAL_HCD_Init>
 800a1da:	4603      	mov	r3, r0
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d001      	beq.n	800a1e4 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800a1e0:	f7f6 fd56 	bl	8000c90 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800a1e4:	4806      	ldr	r0, [pc, #24]	@ (800a200 <USBH_LL_Init+0x84>)
 800a1e6:	f7f8 fb91 	bl	800290c <HAL_HCD_GetCurrentFrame>
 800a1ea:	4603      	mov	r3, r0
 800a1ec:	4619      	mov	r1, r3
 800a1ee:	6878      	ldr	r0, [r7, #4]
 800a1f0:	f7fe fee2 	bl	8008fb8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a1f4:	2300      	movs	r3, #0
}
 800a1f6:	4618      	mov	r0, r3
 800a1f8:	3708      	adds	r7, #8
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}
 800a1fe:	bf00      	nop
 800a200:	20000728 	.word	0x20000728
 800a204:	40040000 	.word	0x40040000

0800a208 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a208:	b580      	push	{r7, lr}
 800a20a:	b084      	sub	sp, #16
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a210:	2300      	movs	r3, #0
 800a212:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a214:	2300      	movs	r3, #0
 800a216:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a21e:	4618      	mov	r0, r3
 800a220:	f7f8 fafc 	bl	800281c <HAL_HCD_Start>
 800a224:	4603      	mov	r3, r0
 800a226:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a228:	7bfb      	ldrb	r3, [r7, #15]
 800a22a:	4618      	mov	r0, r3
 800a22c:	f000 f95e 	bl	800a4ec <USBH_Get_USB_Status>
 800a230:	4603      	mov	r3, r0
 800a232:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a234:	7bbb      	ldrb	r3, [r7, #14]
}
 800a236:	4618      	mov	r0, r3
 800a238:	3710      	adds	r7, #16
 800a23a:	46bd      	mov	sp, r7
 800a23c:	bd80      	pop	{r7, pc}

0800a23e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a23e:	b580      	push	{r7, lr}
 800a240:	b084      	sub	sp, #16
 800a242:	af00      	add	r7, sp, #0
 800a244:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a246:	2300      	movs	r3, #0
 800a248:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a24a:	2300      	movs	r3, #0
 800a24c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a254:	4618      	mov	r0, r3
 800a256:	f7f8 fb04 	bl	8002862 <HAL_HCD_Stop>
 800a25a:	4603      	mov	r3, r0
 800a25c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a25e:	7bfb      	ldrb	r3, [r7, #15]
 800a260:	4618      	mov	r0, r3
 800a262:	f000 f943 	bl	800a4ec <USBH_Get_USB_Status>
 800a266:	4603      	mov	r3, r0
 800a268:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a26a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a26c:	4618      	mov	r0, r3
 800a26e:	3710      	adds	r7, #16
 800a270:	46bd      	mov	sp, r7
 800a272:	bd80      	pop	{r7, pc}

0800a274 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a274:	b580      	push	{r7, lr}
 800a276:	b084      	sub	sp, #16
 800a278:	af00      	add	r7, sp, #0
 800a27a:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a27c:	2301      	movs	r3, #1
 800a27e:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a286:	4618      	mov	r0, r3
 800a288:	f7f8 fb4e 	bl	8002928 <HAL_HCD_GetCurrentSpeed>
 800a28c:	4603      	mov	r3, r0
 800a28e:	2b02      	cmp	r3, #2
 800a290:	d00c      	beq.n	800a2ac <USBH_LL_GetSpeed+0x38>
 800a292:	2b02      	cmp	r3, #2
 800a294:	d80d      	bhi.n	800a2b2 <USBH_LL_GetSpeed+0x3e>
 800a296:	2b00      	cmp	r3, #0
 800a298:	d002      	beq.n	800a2a0 <USBH_LL_GetSpeed+0x2c>
 800a29a:	2b01      	cmp	r3, #1
 800a29c:	d003      	beq.n	800a2a6 <USBH_LL_GetSpeed+0x32>
 800a29e:	e008      	b.n	800a2b2 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a2a0:	2300      	movs	r3, #0
 800a2a2:	73fb      	strb	r3, [r7, #15]
    break;
 800a2a4:	e008      	b.n	800a2b8 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	73fb      	strb	r3, [r7, #15]
    break;
 800a2aa:	e005      	b.n	800a2b8 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a2ac:	2302      	movs	r3, #2
 800a2ae:	73fb      	strb	r3, [r7, #15]
    break;
 800a2b0:	e002      	b.n	800a2b8 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a2b2:	2301      	movs	r3, #1
 800a2b4:	73fb      	strb	r3, [r7, #15]
    break;
 800a2b6:	bf00      	nop
  }
  return  speed;
 800a2b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2ba:	4618      	mov	r0, r3
 800a2bc:	3710      	adds	r7, #16
 800a2be:	46bd      	mov	sp, r7
 800a2c0:	bd80      	pop	{r7, pc}

0800a2c2 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a2c2:	b580      	push	{r7, lr}
 800a2c4:	b084      	sub	sp, #16
 800a2c6:	af00      	add	r7, sp, #0
 800a2c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2ca:	2300      	movs	r3, #0
 800a2cc:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a2ce:	2300      	movs	r3, #0
 800a2d0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a2d8:	4618      	mov	r0, r3
 800a2da:	f7f8 fadf 	bl	800289c <HAL_HCD_ResetPort>
 800a2de:	4603      	mov	r3, r0
 800a2e0:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a2e2:	7bfb      	ldrb	r3, [r7, #15]
 800a2e4:	4618      	mov	r0, r3
 800a2e6:	f000 f901 	bl	800a4ec <USBH_Get_USB_Status>
 800a2ea:	4603      	mov	r3, r0
 800a2ec:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2ee:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	3710      	adds	r7, #16
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bd80      	pop	{r7, pc}

0800a2f8 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a2f8:	b580      	push	{r7, lr}
 800a2fa:	b082      	sub	sp, #8
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
 800a300:	460b      	mov	r3, r1
 800a302:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a30a:	78fa      	ldrb	r2, [r7, #3]
 800a30c:	4611      	mov	r1, r2
 800a30e:	4618      	mov	r0, r3
 800a310:	f7f8 fae7 	bl	80028e2 <HAL_HCD_HC_GetXferCount>
 800a314:	4603      	mov	r3, r0
}
 800a316:	4618      	mov	r0, r3
 800a318:	3708      	adds	r7, #8
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}

0800a31e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a31e:	b590      	push	{r4, r7, lr}
 800a320:	b089      	sub	sp, #36	@ 0x24
 800a322:	af04      	add	r7, sp, #16
 800a324:	6078      	str	r0, [r7, #4]
 800a326:	4608      	mov	r0, r1
 800a328:	4611      	mov	r1, r2
 800a32a:	461a      	mov	r2, r3
 800a32c:	4603      	mov	r3, r0
 800a32e:	70fb      	strb	r3, [r7, #3]
 800a330:	460b      	mov	r3, r1
 800a332:	70bb      	strb	r3, [r7, #2]
 800a334:	4613      	mov	r3, r2
 800a336:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a338:	2300      	movs	r3, #0
 800a33a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a33c:	2300      	movs	r3, #0
 800a33e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a346:	787c      	ldrb	r4, [r7, #1]
 800a348:	78ba      	ldrb	r2, [r7, #2]
 800a34a:	78f9      	ldrb	r1, [r7, #3]
 800a34c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a34e:	9302      	str	r3, [sp, #8]
 800a350:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a354:	9301      	str	r3, [sp, #4]
 800a356:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a35a:	9300      	str	r3, [sp, #0]
 800a35c:	4623      	mov	r3, r4
 800a35e:	f7f7 fed3 	bl	8002108 <HAL_HCD_HC_Init>
 800a362:	4603      	mov	r3, r0
 800a364:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a366:	7bfb      	ldrb	r3, [r7, #15]
 800a368:	4618      	mov	r0, r3
 800a36a:	f000 f8bf 	bl	800a4ec <USBH_Get_USB_Status>
 800a36e:	4603      	mov	r3, r0
 800a370:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a372:	7bbb      	ldrb	r3, [r7, #14]
}
 800a374:	4618      	mov	r0, r3
 800a376:	3714      	adds	r7, #20
 800a378:	46bd      	mov	sp, r7
 800a37a:	bd90      	pop	{r4, r7, pc}

0800a37c <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a37c:	b580      	push	{r7, lr}
 800a37e:	b084      	sub	sp, #16
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
 800a384:	460b      	mov	r3, r1
 800a386:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a388:	2300      	movs	r3, #0
 800a38a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a38c:	2300      	movs	r3, #0
 800a38e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a396:	78fa      	ldrb	r2, [r7, #3]
 800a398:	4611      	mov	r1, r2
 800a39a:	4618      	mov	r0, r3
 800a39c:	f7f7 ff6c 	bl	8002278 <HAL_HCD_HC_Halt>
 800a3a0:	4603      	mov	r3, r0
 800a3a2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a3a4:	7bfb      	ldrb	r3, [r7, #15]
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f000 f8a0 	bl	800a4ec <USBH_Get_USB_Status>
 800a3ac:	4603      	mov	r3, r0
 800a3ae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3b0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3b2:	4618      	mov	r0, r3
 800a3b4:	3710      	adds	r7, #16
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bd80      	pop	{r7, pc}

0800a3ba <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a3ba:	b590      	push	{r4, r7, lr}
 800a3bc:	b089      	sub	sp, #36	@ 0x24
 800a3be:	af04      	add	r7, sp, #16
 800a3c0:	6078      	str	r0, [r7, #4]
 800a3c2:	4608      	mov	r0, r1
 800a3c4:	4611      	mov	r1, r2
 800a3c6:	461a      	mov	r2, r3
 800a3c8:	4603      	mov	r3, r0
 800a3ca:	70fb      	strb	r3, [r7, #3]
 800a3cc:	460b      	mov	r3, r1
 800a3ce:	70bb      	strb	r3, [r7, #2]
 800a3d0:	4613      	mov	r3, r2
 800a3d2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a3d4:	2300      	movs	r3, #0
 800a3d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a3e2:	787c      	ldrb	r4, [r7, #1]
 800a3e4:	78ba      	ldrb	r2, [r7, #2]
 800a3e6:	78f9      	ldrb	r1, [r7, #3]
 800a3e8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a3ec:	9303      	str	r3, [sp, #12]
 800a3ee:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a3f0:	9302      	str	r3, [sp, #8]
 800a3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3f4:	9301      	str	r3, [sp, #4]
 800a3f6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a3fa:	9300      	str	r3, [sp, #0]
 800a3fc:	4623      	mov	r3, r4
 800a3fe:	f7f7 ff5f 	bl	80022c0 <HAL_HCD_HC_SubmitRequest>
 800a402:	4603      	mov	r3, r0
 800a404:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a406:	7bfb      	ldrb	r3, [r7, #15]
 800a408:	4618      	mov	r0, r3
 800a40a:	f000 f86f 	bl	800a4ec <USBH_Get_USB_Status>
 800a40e:	4603      	mov	r3, r0
 800a410:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a412:	7bbb      	ldrb	r3, [r7, #14]
}
 800a414:	4618      	mov	r0, r3
 800a416:	3714      	adds	r7, #20
 800a418:	46bd      	mov	sp, r7
 800a41a:	bd90      	pop	{r4, r7, pc}

0800a41c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
 800a424:	460b      	mov	r3, r1
 800a426:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a42e:	78fa      	ldrb	r2, [r7, #3]
 800a430:	4611      	mov	r1, r2
 800a432:	4618      	mov	r0, r3
 800a434:	f7f8 fa40 	bl	80028b8 <HAL_HCD_HC_GetURBState>
 800a438:	4603      	mov	r3, r0
}
 800a43a:	4618      	mov	r0, r3
 800a43c:	3708      	adds	r7, #8
 800a43e:	46bd      	mov	sp, r7
 800a440:	bd80      	pop	{r7, pc}

0800a442 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a442:	b580      	push	{r7, lr}
 800a444:	b082      	sub	sp, #8
 800a446:	af00      	add	r7, sp, #0
 800a448:	6078      	str	r0, [r7, #4]
 800a44a:	460b      	mov	r3, r1
 800a44c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a454:	2b00      	cmp	r3, #0
 800a456:	d103      	bne.n	800a460 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800a458:	78fb      	ldrb	r3, [r7, #3]
 800a45a:	4618      	mov	r0, r3
 800a45c:	f000 f872 	bl	800a544 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a460:	20c8      	movs	r0, #200	@ 0xc8
 800a462:	f7f7 f8fd 	bl	8001660 <HAL_Delay>
  return USBH_OK;
 800a466:	2300      	movs	r3, #0
}
 800a468:	4618      	mov	r0, r3
 800a46a:	3708      	adds	r7, #8
 800a46c:	46bd      	mov	sp, r7
 800a46e:	bd80      	pop	{r7, pc}

0800a470 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a470:	b480      	push	{r7}
 800a472:	b085      	sub	sp, #20
 800a474:	af00      	add	r7, sp, #0
 800a476:	6078      	str	r0, [r7, #4]
 800a478:	460b      	mov	r3, r1
 800a47a:	70fb      	strb	r3, [r7, #3]
 800a47c:	4613      	mov	r3, r2
 800a47e:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a486:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a488:	78fa      	ldrb	r2, [r7, #3]
 800a48a:	68f9      	ldr	r1, [r7, #12]
 800a48c:	4613      	mov	r3, r2
 800a48e:	011b      	lsls	r3, r3, #4
 800a490:	1a9b      	subs	r3, r3, r2
 800a492:	009b      	lsls	r3, r3, #2
 800a494:	440b      	add	r3, r1
 800a496:	3317      	adds	r3, #23
 800a498:	781b      	ldrb	r3, [r3, #0]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d00a      	beq.n	800a4b4 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a49e:	78fa      	ldrb	r2, [r7, #3]
 800a4a0:	68f9      	ldr	r1, [r7, #12]
 800a4a2:	4613      	mov	r3, r2
 800a4a4:	011b      	lsls	r3, r3, #4
 800a4a6:	1a9b      	subs	r3, r3, r2
 800a4a8:	009b      	lsls	r3, r3, #2
 800a4aa:	440b      	add	r3, r1
 800a4ac:	333c      	adds	r3, #60	@ 0x3c
 800a4ae:	78ba      	ldrb	r2, [r7, #2]
 800a4b0:	701a      	strb	r2, [r3, #0]
 800a4b2:	e009      	b.n	800a4c8 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a4b4:	78fa      	ldrb	r2, [r7, #3]
 800a4b6:	68f9      	ldr	r1, [r7, #12]
 800a4b8:	4613      	mov	r3, r2
 800a4ba:	011b      	lsls	r3, r3, #4
 800a4bc:	1a9b      	subs	r3, r3, r2
 800a4be:	009b      	lsls	r3, r3, #2
 800a4c0:	440b      	add	r3, r1
 800a4c2:	333d      	adds	r3, #61	@ 0x3d
 800a4c4:	78ba      	ldrb	r2, [r7, #2]
 800a4c6:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a4c8:	2300      	movs	r3, #0
}
 800a4ca:	4618      	mov	r0, r3
 800a4cc:	3714      	adds	r7, #20
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr

0800a4d6 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	b082      	sub	sp, #8
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a4de:	6878      	ldr	r0, [r7, #4]
 800a4e0:	f7f7 f8be 	bl	8001660 <HAL_Delay>
}
 800a4e4:	bf00      	nop
 800a4e6:	3708      	adds	r7, #8
 800a4e8:	46bd      	mov	sp, r7
 800a4ea:	bd80      	pop	{r7, pc}

0800a4ec <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b085      	sub	sp, #20
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	4603      	mov	r3, r0
 800a4f4:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a4fa:	79fb      	ldrb	r3, [r7, #7]
 800a4fc:	2b03      	cmp	r3, #3
 800a4fe:	d817      	bhi.n	800a530 <USBH_Get_USB_Status+0x44>
 800a500:	a201      	add	r2, pc, #4	@ (adr r2, 800a508 <USBH_Get_USB_Status+0x1c>)
 800a502:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a506:	bf00      	nop
 800a508:	0800a519 	.word	0x0800a519
 800a50c:	0800a51f 	.word	0x0800a51f
 800a510:	0800a525 	.word	0x0800a525
 800a514:	0800a52b 	.word	0x0800a52b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a518:	2300      	movs	r3, #0
 800a51a:	73fb      	strb	r3, [r7, #15]
    break;
 800a51c:	e00b      	b.n	800a536 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a51e:	2302      	movs	r3, #2
 800a520:	73fb      	strb	r3, [r7, #15]
    break;
 800a522:	e008      	b.n	800a536 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a524:	2301      	movs	r3, #1
 800a526:	73fb      	strb	r3, [r7, #15]
    break;
 800a528:	e005      	b.n	800a536 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a52a:	2302      	movs	r3, #2
 800a52c:	73fb      	strb	r3, [r7, #15]
    break;
 800a52e:	e002      	b.n	800a536 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a530:	2302      	movs	r3, #2
 800a532:	73fb      	strb	r3, [r7, #15]
    break;
 800a534:	bf00      	nop
  }
  return usb_status;
 800a536:	7bfb      	ldrb	r3, [r7, #15]
}
 800a538:	4618      	mov	r0, r3
 800a53a:	3714      	adds	r7, #20
 800a53c:	46bd      	mov	sp, r7
 800a53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a542:	4770      	bx	lr

0800a544 <MX_DriverVbusHS>:
  *          This parameter can be one of the these values:
  *          - 1 : VBUS Active
  *          - 0 : VBUS Inactive
  */
void MX_DriverVbusHS(uint8_t state)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b084      	sub	sp, #16
 800a548:	af00      	add	r7, sp, #0
 800a54a:	4603      	mov	r3, r0
 800a54c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a54e:	79fb      	ldrb	r3, [r7, #7]
 800a550:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_HS */
  if(state == 0)
 800a552:	79fb      	ldrb	r3, [r7, #7]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d102      	bne.n	800a55e <MX_DriverVbusHS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_SET;
 800a558:	2301      	movs	r3, #1
 800a55a:	73fb      	strb	r3, [r7, #15]
 800a55c:	e001      	b.n	800a562 <MX_DriverVbusHS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_RESET;
 800a55e:	2300      	movs	r3, #0
 800a560:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_HS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_4,(GPIO_PinState)data);
 800a562:	7bfb      	ldrb	r3, [r7, #15]
 800a564:	461a      	mov	r2, r3
 800a566:	2110      	movs	r1, #16
 800a568:	4803      	ldr	r0, [pc, #12]	@ (800a578 <MX_DriverVbusHS+0x34>)
 800a56a:	f7f7 fd33 	bl	8001fd4 <HAL_GPIO_WritePin>
}
 800a56e:	bf00      	nop
 800a570:	3710      	adds	r7, #16
 800a572:	46bd      	mov	sp, r7
 800a574:	bd80      	pop	{r7, pc}
 800a576:	bf00      	nop
 800a578:	40020800 	.word	0x40020800

0800a57c <malloc>:
 800a57c:	4b02      	ldr	r3, [pc, #8]	@ (800a588 <malloc+0xc>)
 800a57e:	4601      	mov	r1, r0
 800a580:	6818      	ldr	r0, [r3, #0]
 800a582:	f000 b82d 	b.w	800a5e0 <_malloc_r>
 800a586:	bf00      	nop
 800a588:	2000002c 	.word	0x2000002c

0800a58c <free>:
 800a58c:	4b02      	ldr	r3, [pc, #8]	@ (800a598 <free+0xc>)
 800a58e:	4601      	mov	r1, r0
 800a590:	6818      	ldr	r0, [r3, #0]
 800a592:	f000 b8f5 	b.w	800a780 <_free_r>
 800a596:	bf00      	nop
 800a598:	2000002c 	.word	0x2000002c

0800a59c <sbrk_aligned>:
 800a59c:	b570      	push	{r4, r5, r6, lr}
 800a59e:	4e0f      	ldr	r6, [pc, #60]	@ (800a5dc <sbrk_aligned+0x40>)
 800a5a0:	460c      	mov	r4, r1
 800a5a2:	6831      	ldr	r1, [r6, #0]
 800a5a4:	4605      	mov	r5, r0
 800a5a6:	b911      	cbnz	r1, 800a5ae <sbrk_aligned+0x12>
 800a5a8:	f000 f8ae 	bl	800a708 <_sbrk_r>
 800a5ac:	6030      	str	r0, [r6, #0]
 800a5ae:	4621      	mov	r1, r4
 800a5b0:	4628      	mov	r0, r5
 800a5b2:	f000 f8a9 	bl	800a708 <_sbrk_r>
 800a5b6:	1c43      	adds	r3, r0, #1
 800a5b8:	d103      	bne.n	800a5c2 <sbrk_aligned+0x26>
 800a5ba:	f04f 34ff 	mov.w	r4, #4294967295
 800a5be:	4620      	mov	r0, r4
 800a5c0:	bd70      	pop	{r4, r5, r6, pc}
 800a5c2:	1cc4      	adds	r4, r0, #3
 800a5c4:	f024 0403 	bic.w	r4, r4, #3
 800a5c8:	42a0      	cmp	r0, r4
 800a5ca:	d0f8      	beq.n	800a5be <sbrk_aligned+0x22>
 800a5cc:	1a21      	subs	r1, r4, r0
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	f000 f89a 	bl	800a708 <_sbrk_r>
 800a5d4:	3001      	adds	r0, #1
 800a5d6:	d1f2      	bne.n	800a5be <sbrk_aligned+0x22>
 800a5d8:	e7ef      	b.n	800a5ba <sbrk_aligned+0x1e>
 800a5da:	bf00      	nop
 800a5dc:	20000b08 	.word	0x20000b08

0800a5e0 <_malloc_r>:
 800a5e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5e4:	1ccd      	adds	r5, r1, #3
 800a5e6:	f025 0503 	bic.w	r5, r5, #3
 800a5ea:	3508      	adds	r5, #8
 800a5ec:	2d0c      	cmp	r5, #12
 800a5ee:	bf38      	it	cc
 800a5f0:	250c      	movcc	r5, #12
 800a5f2:	2d00      	cmp	r5, #0
 800a5f4:	4606      	mov	r6, r0
 800a5f6:	db01      	blt.n	800a5fc <_malloc_r+0x1c>
 800a5f8:	42a9      	cmp	r1, r5
 800a5fa:	d904      	bls.n	800a606 <_malloc_r+0x26>
 800a5fc:	230c      	movs	r3, #12
 800a5fe:	6033      	str	r3, [r6, #0]
 800a600:	2000      	movs	r0, #0
 800a602:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a606:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a6dc <_malloc_r+0xfc>
 800a60a:	f000 f869 	bl	800a6e0 <__malloc_lock>
 800a60e:	f8d8 3000 	ldr.w	r3, [r8]
 800a612:	461c      	mov	r4, r3
 800a614:	bb44      	cbnz	r4, 800a668 <_malloc_r+0x88>
 800a616:	4629      	mov	r1, r5
 800a618:	4630      	mov	r0, r6
 800a61a:	f7ff ffbf 	bl	800a59c <sbrk_aligned>
 800a61e:	1c43      	adds	r3, r0, #1
 800a620:	4604      	mov	r4, r0
 800a622:	d158      	bne.n	800a6d6 <_malloc_r+0xf6>
 800a624:	f8d8 4000 	ldr.w	r4, [r8]
 800a628:	4627      	mov	r7, r4
 800a62a:	2f00      	cmp	r7, #0
 800a62c:	d143      	bne.n	800a6b6 <_malloc_r+0xd6>
 800a62e:	2c00      	cmp	r4, #0
 800a630:	d04b      	beq.n	800a6ca <_malloc_r+0xea>
 800a632:	6823      	ldr	r3, [r4, #0]
 800a634:	4639      	mov	r1, r7
 800a636:	4630      	mov	r0, r6
 800a638:	eb04 0903 	add.w	r9, r4, r3
 800a63c:	f000 f864 	bl	800a708 <_sbrk_r>
 800a640:	4581      	cmp	r9, r0
 800a642:	d142      	bne.n	800a6ca <_malloc_r+0xea>
 800a644:	6821      	ldr	r1, [r4, #0]
 800a646:	1a6d      	subs	r5, r5, r1
 800a648:	4629      	mov	r1, r5
 800a64a:	4630      	mov	r0, r6
 800a64c:	f7ff ffa6 	bl	800a59c <sbrk_aligned>
 800a650:	3001      	adds	r0, #1
 800a652:	d03a      	beq.n	800a6ca <_malloc_r+0xea>
 800a654:	6823      	ldr	r3, [r4, #0]
 800a656:	442b      	add	r3, r5
 800a658:	6023      	str	r3, [r4, #0]
 800a65a:	f8d8 3000 	ldr.w	r3, [r8]
 800a65e:	685a      	ldr	r2, [r3, #4]
 800a660:	bb62      	cbnz	r2, 800a6bc <_malloc_r+0xdc>
 800a662:	f8c8 7000 	str.w	r7, [r8]
 800a666:	e00f      	b.n	800a688 <_malloc_r+0xa8>
 800a668:	6822      	ldr	r2, [r4, #0]
 800a66a:	1b52      	subs	r2, r2, r5
 800a66c:	d420      	bmi.n	800a6b0 <_malloc_r+0xd0>
 800a66e:	2a0b      	cmp	r2, #11
 800a670:	d917      	bls.n	800a6a2 <_malloc_r+0xc2>
 800a672:	1961      	adds	r1, r4, r5
 800a674:	42a3      	cmp	r3, r4
 800a676:	6025      	str	r5, [r4, #0]
 800a678:	bf18      	it	ne
 800a67a:	6059      	strne	r1, [r3, #4]
 800a67c:	6863      	ldr	r3, [r4, #4]
 800a67e:	bf08      	it	eq
 800a680:	f8c8 1000 	streq.w	r1, [r8]
 800a684:	5162      	str	r2, [r4, r5]
 800a686:	604b      	str	r3, [r1, #4]
 800a688:	4630      	mov	r0, r6
 800a68a:	f000 f82f 	bl	800a6ec <__malloc_unlock>
 800a68e:	f104 000b 	add.w	r0, r4, #11
 800a692:	1d23      	adds	r3, r4, #4
 800a694:	f020 0007 	bic.w	r0, r0, #7
 800a698:	1ac2      	subs	r2, r0, r3
 800a69a:	bf1c      	itt	ne
 800a69c:	1a1b      	subne	r3, r3, r0
 800a69e:	50a3      	strne	r3, [r4, r2]
 800a6a0:	e7af      	b.n	800a602 <_malloc_r+0x22>
 800a6a2:	6862      	ldr	r2, [r4, #4]
 800a6a4:	42a3      	cmp	r3, r4
 800a6a6:	bf0c      	ite	eq
 800a6a8:	f8c8 2000 	streq.w	r2, [r8]
 800a6ac:	605a      	strne	r2, [r3, #4]
 800a6ae:	e7eb      	b.n	800a688 <_malloc_r+0xa8>
 800a6b0:	4623      	mov	r3, r4
 800a6b2:	6864      	ldr	r4, [r4, #4]
 800a6b4:	e7ae      	b.n	800a614 <_malloc_r+0x34>
 800a6b6:	463c      	mov	r4, r7
 800a6b8:	687f      	ldr	r7, [r7, #4]
 800a6ba:	e7b6      	b.n	800a62a <_malloc_r+0x4a>
 800a6bc:	461a      	mov	r2, r3
 800a6be:	685b      	ldr	r3, [r3, #4]
 800a6c0:	42a3      	cmp	r3, r4
 800a6c2:	d1fb      	bne.n	800a6bc <_malloc_r+0xdc>
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	6053      	str	r3, [r2, #4]
 800a6c8:	e7de      	b.n	800a688 <_malloc_r+0xa8>
 800a6ca:	230c      	movs	r3, #12
 800a6cc:	6033      	str	r3, [r6, #0]
 800a6ce:	4630      	mov	r0, r6
 800a6d0:	f000 f80c 	bl	800a6ec <__malloc_unlock>
 800a6d4:	e794      	b.n	800a600 <_malloc_r+0x20>
 800a6d6:	6005      	str	r5, [r0, #0]
 800a6d8:	e7d6      	b.n	800a688 <_malloc_r+0xa8>
 800a6da:	bf00      	nop
 800a6dc:	20000b0c 	.word	0x20000b0c

0800a6e0 <__malloc_lock>:
 800a6e0:	4801      	ldr	r0, [pc, #4]	@ (800a6e8 <__malloc_lock+0x8>)
 800a6e2:	f000 b84b 	b.w	800a77c <__retarget_lock_acquire_recursive>
 800a6e6:	bf00      	nop
 800a6e8:	20000c4c 	.word	0x20000c4c

0800a6ec <__malloc_unlock>:
 800a6ec:	4801      	ldr	r0, [pc, #4]	@ (800a6f4 <__malloc_unlock+0x8>)
 800a6ee:	f000 b846 	b.w	800a77e <__retarget_lock_release_recursive>
 800a6f2:	bf00      	nop
 800a6f4:	20000c4c 	.word	0x20000c4c

0800a6f8 <memset>:
 800a6f8:	4402      	add	r2, r0
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	4293      	cmp	r3, r2
 800a6fe:	d100      	bne.n	800a702 <memset+0xa>
 800a700:	4770      	bx	lr
 800a702:	f803 1b01 	strb.w	r1, [r3], #1
 800a706:	e7f9      	b.n	800a6fc <memset+0x4>

0800a708 <_sbrk_r>:
 800a708:	b538      	push	{r3, r4, r5, lr}
 800a70a:	4d06      	ldr	r5, [pc, #24]	@ (800a724 <_sbrk_r+0x1c>)
 800a70c:	2300      	movs	r3, #0
 800a70e:	4604      	mov	r4, r0
 800a710:	4608      	mov	r0, r1
 800a712:	602b      	str	r3, [r5, #0]
 800a714:	f7f6 fef0 	bl	80014f8 <_sbrk>
 800a718:	1c43      	adds	r3, r0, #1
 800a71a:	d102      	bne.n	800a722 <_sbrk_r+0x1a>
 800a71c:	682b      	ldr	r3, [r5, #0]
 800a71e:	b103      	cbz	r3, 800a722 <_sbrk_r+0x1a>
 800a720:	6023      	str	r3, [r4, #0]
 800a722:	bd38      	pop	{r3, r4, r5, pc}
 800a724:	20000c48 	.word	0x20000c48

0800a728 <__errno>:
 800a728:	4b01      	ldr	r3, [pc, #4]	@ (800a730 <__errno+0x8>)
 800a72a:	6818      	ldr	r0, [r3, #0]
 800a72c:	4770      	bx	lr
 800a72e:	bf00      	nop
 800a730:	2000002c 	.word	0x2000002c

0800a734 <__libc_init_array>:
 800a734:	b570      	push	{r4, r5, r6, lr}
 800a736:	4d0d      	ldr	r5, [pc, #52]	@ (800a76c <__libc_init_array+0x38>)
 800a738:	4c0d      	ldr	r4, [pc, #52]	@ (800a770 <__libc_init_array+0x3c>)
 800a73a:	1b64      	subs	r4, r4, r5
 800a73c:	10a4      	asrs	r4, r4, #2
 800a73e:	2600      	movs	r6, #0
 800a740:	42a6      	cmp	r6, r4
 800a742:	d109      	bne.n	800a758 <__libc_init_array+0x24>
 800a744:	4d0b      	ldr	r5, [pc, #44]	@ (800a774 <__libc_init_array+0x40>)
 800a746:	4c0c      	ldr	r4, [pc, #48]	@ (800a778 <__libc_init_array+0x44>)
 800a748:	f000 f864 	bl	800a814 <_init>
 800a74c:	1b64      	subs	r4, r4, r5
 800a74e:	10a4      	asrs	r4, r4, #2
 800a750:	2600      	movs	r6, #0
 800a752:	42a6      	cmp	r6, r4
 800a754:	d105      	bne.n	800a762 <__libc_init_array+0x2e>
 800a756:	bd70      	pop	{r4, r5, r6, pc}
 800a758:	f855 3b04 	ldr.w	r3, [r5], #4
 800a75c:	4798      	blx	r3
 800a75e:	3601      	adds	r6, #1
 800a760:	e7ee      	b.n	800a740 <__libc_init_array+0xc>
 800a762:	f855 3b04 	ldr.w	r3, [r5], #4
 800a766:	4798      	blx	r3
 800a768:	3601      	adds	r6, #1
 800a76a:	e7f2      	b.n	800a752 <__libc_init_array+0x1e>
 800a76c:	0800a850 	.word	0x0800a850
 800a770:	0800a850 	.word	0x0800a850
 800a774:	0800a850 	.word	0x0800a850
 800a778:	0800a854 	.word	0x0800a854

0800a77c <__retarget_lock_acquire_recursive>:
 800a77c:	4770      	bx	lr

0800a77e <__retarget_lock_release_recursive>:
 800a77e:	4770      	bx	lr

0800a780 <_free_r>:
 800a780:	b538      	push	{r3, r4, r5, lr}
 800a782:	4605      	mov	r5, r0
 800a784:	2900      	cmp	r1, #0
 800a786:	d041      	beq.n	800a80c <_free_r+0x8c>
 800a788:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a78c:	1f0c      	subs	r4, r1, #4
 800a78e:	2b00      	cmp	r3, #0
 800a790:	bfb8      	it	lt
 800a792:	18e4      	addlt	r4, r4, r3
 800a794:	f7ff ffa4 	bl	800a6e0 <__malloc_lock>
 800a798:	4a1d      	ldr	r2, [pc, #116]	@ (800a810 <_free_r+0x90>)
 800a79a:	6813      	ldr	r3, [r2, #0]
 800a79c:	b933      	cbnz	r3, 800a7ac <_free_r+0x2c>
 800a79e:	6063      	str	r3, [r4, #4]
 800a7a0:	6014      	str	r4, [r2, #0]
 800a7a2:	4628      	mov	r0, r5
 800a7a4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a7a8:	f7ff bfa0 	b.w	800a6ec <__malloc_unlock>
 800a7ac:	42a3      	cmp	r3, r4
 800a7ae:	d908      	bls.n	800a7c2 <_free_r+0x42>
 800a7b0:	6820      	ldr	r0, [r4, #0]
 800a7b2:	1821      	adds	r1, r4, r0
 800a7b4:	428b      	cmp	r3, r1
 800a7b6:	bf01      	itttt	eq
 800a7b8:	6819      	ldreq	r1, [r3, #0]
 800a7ba:	685b      	ldreq	r3, [r3, #4]
 800a7bc:	1809      	addeq	r1, r1, r0
 800a7be:	6021      	streq	r1, [r4, #0]
 800a7c0:	e7ed      	b.n	800a79e <_free_r+0x1e>
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	b10b      	cbz	r3, 800a7cc <_free_r+0x4c>
 800a7c8:	42a3      	cmp	r3, r4
 800a7ca:	d9fa      	bls.n	800a7c2 <_free_r+0x42>
 800a7cc:	6811      	ldr	r1, [r2, #0]
 800a7ce:	1850      	adds	r0, r2, r1
 800a7d0:	42a0      	cmp	r0, r4
 800a7d2:	d10b      	bne.n	800a7ec <_free_r+0x6c>
 800a7d4:	6820      	ldr	r0, [r4, #0]
 800a7d6:	4401      	add	r1, r0
 800a7d8:	1850      	adds	r0, r2, r1
 800a7da:	4283      	cmp	r3, r0
 800a7dc:	6011      	str	r1, [r2, #0]
 800a7de:	d1e0      	bne.n	800a7a2 <_free_r+0x22>
 800a7e0:	6818      	ldr	r0, [r3, #0]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	6053      	str	r3, [r2, #4]
 800a7e6:	4408      	add	r0, r1
 800a7e8:	6010      	str	r0, [r2, #0]
 800a7ea:	e7da      	b.n	800a7a2 <_free_r+0x22>
 800a7ec:	d902      	bls.n	800a7f4 <_free_r+0x74>
 800a7ee:	230c      	movs	r3, #12
 800a7f0:	602b      	str	r3, [r5, #0]
 800a7f2:	e7d6      	b.n	800a7a2 <_free_r+0x22>
 800a7f4:	6820      	ldr	r0, [r4, #0]
 800a7f6:	1821      	adds	r1, r4, r0
 800a7f8:	428b      	cmp	r3, r1
 800a7fa:	bf04      	itt	eq
 800a7fc:	6819      	ldreq	r1, [r3, #0]
 800a7fe:	685b      	ldreq	r3, [r3, #4]
 800a800:	6063      	str	r3, [r4, #4]
 800a802:	bf04      	itt	eq
 800a804:	1809      	addeq	r1, r1, r0
 800a806:	6021      	streq	r1, [r4, #0]
 800a808:	6054      	str	r4, [r2, #4]
 800a80a:	e7ca      	b.n	800a7a2 <_free_r+0x22>
 800a80c:	bd38      	pop	{r3, r4, r5, pc}
 800a80e:	bf00      	nop
 800a810:	20000b0c 	.word	0x20000b0c

0800a814 <_init>:
 800a814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a816:	bf00      	nop
 800a818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a81a:	bc08      	pop	{r3}
 800a81c:	469e      	mov	lr, r3
 800a81e:	4770      	bx	lr

0800a820 <_fini>:
 800a820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a822:	bf00      	nop
 800a824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a826:	bc08      	pop	{r3}
 800a828:	469e      	mov	lr, r3
 800a82a:	4770      	bx	lr
