
data-over-plant.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097d0  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001bb0  0800997c  0800997c  0000a97c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b52c  0800b52c  0000d054  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b52c  0800b52c  0000c52c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b534  0800b534  0000d054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b534  0800b534  0000c534  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b538  0800b538  0000c538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000054  20000000  0800b53c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d054  2**0
                  CONTENTS
 10 .bss          00000900  20000054  20000054  0000d054  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000954  20000954  0000d054  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d054  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021879  00000000  00000000  0000d084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000423d  00000000  00000000  0002e8fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d88  00000000  00000000  00032b40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001717  00000000  00000000  000348c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027571  00000000  00000000  00035fdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00021fbc  00000000  00000000  0005d550  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e8a8a  00000000  00000000  0007f50c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00167f96  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007f38  00000000  00000000  00167fdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  0016ff14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000054 	.word	0x20000054
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08009964 	.word	0x08009964

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000058 	.word	0x20000058
 80001e8:	08009964 	.word	0x08009964

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <config_lcd>:

    return packet;
}

void config_lcd()
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
	  BSP_LCD_Init();
 800051c:	f001 fc7e 	bl	8001e1c <BSP_LCD_Init>

	  /* Layer2 Init */
	  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 8000520:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 8000524:	2001      	movs	r0, #1
 8000526:	f001 fcfb 	bl	8001f20 <BSP_LCD_LayerDefaultInit>
	  /* Set Foreground Layer */
	  BSP_LCD_SelectLayer(1);
 800052a:	2001      	movs	r0, #1
 800052c:	f001 fd5c 	bl	8001fe8 <BSP_LCD_SelectLayer>
	  /* Clear the LCD */
	  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8000530:	f04f 30ff 	mov.w	r0, #4294967295
 8000534:	f001 fdd4 	bl	80020e0 <BSP_LCD_Clear>
	  BSP_LCD_SetColorKeying(1, LCD_COLOR_WHITE);
 8000538:	f04f 31ff 	mov.w	r1, #4294967295
 800053c:	2001      	movs	r0, #1
 800053e:	f001 fda1 	bl	8002084 <BSP_LCD_SetColorKeying>
	  BSP_LCD_SetLayerVisible(1, DISABLE);
 8000542:	2100      	movs	r1, #0
 8000544:	2001      	movs	r0, #1
 8000546:	f001 fd5f 	bl	8002008 <BSP_LCD_SetLayerVisible>

	  /* Layer1 Init */
	  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 800054a:	4907      	ldr	r1, [pc, #28]	@ (8000568 <config_lcd+0x50>)
 800054c:	2000      	movs	r0, #0
 800054e:	f001 fce7 	bl	8001f20 <BSP_LCD_LayerDefaultInit>

	  /* Set Foreground Layer */
	  BSP_LCD_SelectLayer(0);
 8000552:	2000      	movs	r0, #0
 8000554:	f001 fd48 	bl	8001fe8 <BSP_LCD_SelectLayer>

	  /* Enable The LCD */
	  BSP_LCD_DisplayOn();
 8000558:	f001 feec 	bl	8002334 <BSP_LCD_DisplayOn>

	  /* Clear the LCD */
	  BSP_LCD_Clear(LCD_COLOR_WHITE);
 800055c:	f04f 30ff 	mov.w	r0, #4294967295
 8000560:	f001 fdbe 	bl	80020e0 <BSP_LCD_Clear>
}
 8000564:	bf00      	nop
 8000566:	bd80      	pop	{r7, pc}
 8000568:	d0130000 	.word	0xd0130000

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f002 faa8 	bl	8002ac4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f820 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f000 faa0 	bl	8000abc <MX_GPIO_Init>
  MX_CRC_Init();
 800057c:	f000 f86e 	bl	800065c <MX_CRC_Init>
  MX_DMA2D_Init();
 8000580:	f000 f880 	bl	8000684 <MX_DMA2D_Init>
  MX_I2C3_Init();
 8000584:	f000 f8b0 	bl	80006e8 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000588:	f000 f8ee 	bl	8000768 <MX_LTDC_Init>
  MX_SPI5_Init();
 800058c:	f000 f96c 	bl	8000868 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000590:	f000 f9a0 	bl	80008d4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000594:	f000 f9ee 	bl	8000974 <MX_USART1_UART_Init>
  MX_USB_OTG_HS_HCD_Init();
 8000598:	f000 fa16 	bl	80009c8 <MX_USB_OTG_HS_HCD_Init>
  MX_FMC_Init();
 800059c:	f000 fa40 	bl	8000a20 <MX_FMC_Init>
  /* USER CODE BEGIN 2 */
  config_lcd();
 80005a0:	f7ff ffba 	bl	8000518 <config_lcd>
  BSP_LCD_DisplayStringAt(0, 0, (uint8_t *)"ABCDEFGHIJKLMNOPQRSTUVWXYZ", LEFT_MODE);
 80005a4:	2303      	movs	r3, #3
 80005a6:	4a03      	ldr	r2, [pc, #12]	@ (80005b4 <main+0x48>)
 80005a8:	2100      	movs	r1, #0
 80005aa:	2000      	movs	r0, #0
 80005ac:	f001 fe04 	bl	80021b8 <BSP_LCD_DisplayStringAt>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b0:	bf00      	nop
 80005b2:	e7fd      	b.n	80005b0 <main+0x44>
 80005b4:	08009a38 	.word	0x08009a38

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	@ 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_OscInitTypeDef RCC_OscInitStruct;

  /* Enable Power Control clock */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	4b24      	ldr	r3, [pc, #144]	@ (8000654 <SystemClock_Config+0x9c>)
 80005c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005c6:	4a23      	ldr	r2, [pc, #140]	@ (8000654 <SystemClock_Config+0x9c>)
 80005c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80005cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80005ce:	4b21      	ldr	r3, [pc, #132]	@ (8000654 <SystemClock_Config+0x9c>)
 80005d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005d6:	60bb      	str	r3, [r7, #8]
 80005d8:	68bb      	ldr	r3, [r7, #8]

  /* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value
     regarding system frequency refer to product datasheet.  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005da:	2300      	movs	r3, #0
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	4b1e      	ldr	r3, [pc, #120]	@ (8000658 <SystemClock_Config+0xa0>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a1d      	ldr	r2, [pc, #116]	@ (8000658 <SystemClock_Config+0xa0>)
 80005e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005e8:	6013      	str	r3, [r2, #0]
 80005ea:	4b1b      	ldr	r3, [pc, #108]	@ (8000658 <SystemClock_Config+0xa0>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005f2:	607b      	str	r3, [r7, #4]
 80005f4:	687b      	ldr	r3, [r7, #4]

  /* Enable HSE Oscillator and activate PLL with HSE as source */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f6:	2301      	movs	r3, #1
 80005f8:	60fb      	str	r3, [r7, #12]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005fa:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005fe:	613b      	str	r3, [r7, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000600:	2302      	movs	r3, #2
 8000602:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000604:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000608:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLM = 8;
 800060a:	2308      	movs	r3, #8
 800060c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLN = 336;
 800060e:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000612:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000614:	2302      	movs	r3, #2
 8000616:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000618:	2307      	movs	r3, #7
 800061a:	63bb      	str	r3, [r7, #56]	@ 0x38
  HAL_RCC_OscConfig(&RCC_OscInitStruct);
 800061c:	f107 030c 	add.w	r3, r7, #12
 8000620:	4618      	mov	r0, r3
 8000622:	f005 ffdf 	bl	80065e4 <HAL_RCC_OscConfig>

  /* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
  RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8000626:	230f      	movs	r3, #15
 8000628:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800062a:	2302      	movs	r3, #2
 800062c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000632:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000636:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000638:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800063c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5);
 800063e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8000642:	2105      	movs	r1, #5
 8000644:	4618      	mov	r0, r3
 8000646:	f006 fa45 	bl	8006ad4 <HAL_RCC_ClockConfig>
}
 800064a:	bf00      	nop
 800064c:	3750      	adds	r7, #80	@ 0x50
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40023800 	.word	0x40023800
 8000658:	40007000 	.word	0x40007000

0800065c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000660:	4b06      	ldr	r3, [pc, #24]	@ (800067c <MX_CRC_Init+0x20>)
 8000662:	4a07      	ldr	r2, [pc, #28]	@ (8000680 <MX_CRC_Init+0x24>)
 8000664:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000666:	4805      	ldr	r0, [pc, #20]	@ (800067c <MX_CRC_Init+0x20>)
 8000668:	f002 fb74 	bl	8002d54 <HAL_CRC_Init>
 800066c:	4603      	mov	r3, r0
 800066e:	2b00      	cmp	r3, #0
 8000670:	d001      	beq.n	8000676 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000672:	f000 fb8d 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	20000070 	.word	0x20000070
 8000680:	40023000 	.word	0x40023000

08000684 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000688:	4b15      	ldr	r3, [pc, #84]	@ (80006e0 <MX_DMA2D_Init+0x5c>)
 800068a:	4a16      	ldr	r2, [pc, #88]	@ (80006e4 <MX_DMA2D_Init+0x60>)
 800068c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800068e:	4b14      	ldr	r3, [pc, #80]	@ (80006e0 <MX_DMA2D_Init+0x5c>)
 8000690:	2200      	movs	r2, #0
 8000692:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000694:	4b12      	ldr	r3, [pc, #72]	@ (80006e0 <MX_DMA2D_Init+0x5c>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800069a:	4b11      	ldr	r3, [pc, #68]	@ (80006e0 <MX_DMA2D_Init+0x5c>)
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 80006a0:	4b0f      	ldr	r3, [pc, #60]	@ (80006e0 <MX_DMA2D_Init+0x5c>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 80006a6:	4b0e      	ldr	r3, [pc, #56]	@ (80006e0 <MX_DMA2D_Init+0x5c>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 80006ac:	4b0c      	ldr	r3, [pc, #48]	@ (80006e0 <MX_DMA2D_Init+0x5c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 80006b2:	4b0b      	ldr	r3, [pc, #44]	@ (80006e0 <MX_DMA2D_Init+0x5c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 80006b8:	4809      	ldr	r0, [pc, #36]	@ (80006e0 <MX_DMA2D_Init+0x5c>)
 80006ba:	f002 fd25 	bl	8003108 <HAL_DMA2D_Init>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 80006c4:	f000 fb64 	bl	8000d90 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 80006c8:	2101      	movs	r1, #1
 80006ca:	4805      	ldr	r0, [pc, #20]	@ (80006e0 <MX_DMA2D_Init+0x5c>)
 80006cc:	f002 ff8a 	bl	80035e4 <HAL_DMA2D_ConfigLayer>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 80006d6:	f000 fb5b 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 80006da:	bf00      	nop
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	20000078 	.word	0x20000078
 80006e4:	4002b000 	.word	0x4002b000

080006e8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80006ec:	4b1b      	ldr	r3, [pc, #108]	@ (800075c <MX_I2C3_Init+0x74>)
 80006ee:	4a1c      	ldr	r2, [pc, #112]	@ (8000760 <MX_I2C3_Init+0x78>)
 80006f0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 80006f2:	4b1a      	ldr	r3, [pc, #104]	@ (800075c <MX_I2C3_Init+0x74>)
 80006f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000764 <MX_I2C3_Init+0x7c>)
 80006f6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006f8:	4b18      	ldr	r3, [pc, #96]	@ (800075c <MX_I2C3_Init+0x74>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 80006fe:	4b17      	ldr	r3, [pc, #92]	@ (800075c <MX_I2C3_Init+0x74>)
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000704:	4b15      	ldr	r3, [pc, #84]	@ (800075c <MX_I2C3_Init+0x74>)
 8000706:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800070a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800070c:	4b13      	ldr	r3, [pc, #76]	@ (800075c <MX_I2C3_Init+0x74>)
 800070e:	2200      	movs	r2, #0
 8000710:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000712:	4b12      	ldr	r3, [pc, #72]	@ (800075c <MX_I2C3_Init+0x74>)
 8000714:	2200      	movs	r2, #0
 8000716:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000718:	4b10      	ldr	r3, [pc, #64]	@ (800075c <MX_I2C3_Init+0x74>)
 800071a:	2200      	movs	r2, #0
 800071c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800071e:	4b0f      	ldr	r3, [pc, #60]	@ (800075c <MX_I2C3_Init+0x74>)
 8000720:	2200      	movs	r2, #0
 8000722:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000724:	480d      	ldr	r0, [pc, #52]	@ (800075c <MX_I2C3_Init+0x74>)
 8000726:	f005 f98d 	bl	8005a44 <HAL_I2C_Init>
 800072a:	4603      	mov	r3, r0
 800072c:	2b00      	cmp	r3, #0
 800072e:	d001      	beq.n	8000734 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000730:	f000 fb2e 	bl	8000d90 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000734:	2100      	movs	r1, #0
 8000736:	4809      	ldr	r0, [pc, #36]	@ (800075c <MX_I2C3_Init+0x74>)
 8000738:	f005 fac8 	bl	8005ccc <HAL_I2CEx_ConfigAnalogFilter>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 8000742:	f000 fb25 	bl	8000d90 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000746:	2100      	movs	r1, #0
 8000748:	4804      	ldr	r0, [pc, #16]	@ (800075c <MX_I2C3_Init+0x74>)
 800074a:	f005 fafb 	bl	8005d44 <HAL_I2CEx_ConfigDigitalFilter>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 8000754:	f000 fb1c 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000758:	bf00      	nop
 800075a:	bd80      	pop	{r7, pc}
 800075c:	200000b8 	.word	0x200000b8
 8000760:	40005c00 	.word	0x40005c00
 8000764:	000186a0 	.word	0x000186a0

08000768 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08e      	sub	sp, #56	@ 0x38
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	2234      	movs	r2, #52	@ 0x34
 8000772:	2100      	movs	r1, #0
 8000774:	4618      	mov	r0, r3
 8000776:	f009 f8c9 	bl	800990c <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800077a:	4b39      	ldr	r3, [pc, #228]	@ (8000860 <MX_LTDC_Init+0xf8>)
 800077c:	4a39      	ldr	r2, [pc, #228]	@ (8000864 <MX_LTDC_Init+0xfc>)
 800077e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000780:	4b37      	ldr	r3, [pc, #220]	@ (8000860 <MX_LTDC_Init+0xf8>)
 8000782:	2200      	movs	r2, #0
 8000784:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000786:	4b36      	ldr	r3, [pc, #216]	@ (8000860 <MX_LTDC_Init+0xf8>)
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800078c:	4b34      	ldr	r3, [pc, #208]	@ (8000860 <MX_LTDC_Init+0xf8>)
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000792:	4b33      	ldr	r3, [pc, #204]	@ (8000860 <MX_LTDC_Init+0xf8>)
 8000794:	2200      	movs	r2, #0
 8000796:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000798:	4b31      	ldr	r3, [pc, #196]	@ (8000860 <MX_LTDC_Init+0xf8>)
 800079a:	2209      	movs	r2, #9
 800079c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800079e:	4b30      	ldr	r3, [pc, #192]	@ (8000860 <MX_LTDC_Init+0xf8>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 80007a4:	4b2e      	ldr	r3, [pc, #184]	@ (8000860 <MX_LTDC_Init+0xf8>)
 80007a6:	221d      	movs	r2, #29
 80007a8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 80007aa:	4b2d      	ldr	r3, [pc, #180]	@ (8000860 <MX_LTDC_Init+0xf8>)
 80007ac:	2203      	movs	r2, #3
 80007ae:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 80007b0:	4b2b      	ldr	r3, [pc, #172]	@ (8000860 <MX_LTDC_Init+0xf8>)
 80007b2:	f240 120d 	movw	r2, #269	@ 0x10d
 80007b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 80007b8:	4b29      	ldr	r3, [pc, #164]	@ (8000860 <MX_LTDC_Init+0xf8>)
 80007ba:	f240 1243 	movw	r2, #323	@ 0x143
 80007be:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 80007c0:	4b27      	ldr	r3, [pc, #156]	@ (8000860 <MX_LTDC_Init+0xf8>)
 80007c2:	f240 1217 	movw	r2, #279	@ 0x117
 80007c6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 80007c8:	4b25      	ldr	r3, [pc, #148]	@ (8000860 <MX_LTDC_Init+0xf8>)
 80007ca:	f240 1247 	movw	r2, #327	@ 0x147
 80007ce:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80007d0:	4b23      	ldr	r3, [pc, #140]	@ (8000860 <MX_LTDC_Init+0xf8>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 80007d8:	4b21      	ldr	r3, [pc, #132]	@ (8000860 <MX_LTDC_Init+0xf8>)
 80007da:	2200      	movs	r2, #0
 80007dc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 80007e0:	4b1f      	ldr	r3, [pc, #124]	@ (8000860 <MX_LTDC_Init+0xf8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80007e8:	481d      	ldr	r0, [pc, #116]	@ (8000860 <MX_LTDC_Init+0xf8>)
 80007ea:	f005 faeb 	bl	8005dc4 <HAL_LTDC_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80007f4:	f000 facc 	bl	8000d90 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 80007fc:	23f0      	movs	r3, #240	@ 0xf0
 80007fe:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 8000804:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000808:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800080a:	2302      	movs	r3, #2
 800080c:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800080e:	23ff      	movs	r3, #255	@ 0xff
 8000810:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8000812:	2300      	movs	r3, #0
 8000814:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8000816:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800081a:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800081c:	2307      	movs	r3, #7
 800081e:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000820:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000824:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 8000826:	23f0      	movs	r3, #240	@ 0xf0
 8000828:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 800082a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800082e:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 8000836:	2300      	movs	r3, #0
 8000838:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 800083c:	2300      	movs	r3, #0
 800083e:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000842:	1d3b      	adds	r3, r7, #4
 8000844:	2200      	movs	r2, #0
 8000846:	4619      	mov	r1, r3
 8000848:	4805      	ldr	r0, [pc, #20]	@ (8000860 <MX_LTDC_Init+0xf8>)
 800084a:	f005 fc4d 	bl	80060e8 <HAL_LTDC_ConfigLayer>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 8000854:	f000 fa9c 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8000858:	bf00      	nop
 800085a:	3738      	adds	r7, #56	@ 0x38
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	2000010c 	.word	0x2000010c
 8000864:	40016800 	.word	0x40016800

08000868 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800086c:	4b17      	ldr	r3, [pc, #92]	@ (80008cc <MX_SPI5_Init+0x64>)
 800086e:	4a18      	ldr	r2, [pc, #96]	@ (80008d0 <MX_SPI5_Init+0x68>)
 8000870:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000872:	4b16      	ldr	r3, [pc, #88]	@ (80008cc <MX_SPI5_Init+0x64>)
 8000874:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000878:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800087a:	4b14      	ldr	r3, [pc, #80]	@ (80008cc <MX_SPI5_Init+0x64>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000880:	4b12      	ldr	r3, [pc, #72]	@ (80008cc <MX_SPI5_Init+0x64>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000886:	4b11      	ldr	r3, [pc, #68]	@ (80008cc <MX_SPI5_Init+0x64>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800088c:	4b0f      	ldr	r3, [pc, #60]	@ (80008cc <MX_SPI5_Init+0x64>)
 800088e:	2200      	movs	r2, #0
 8000890:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000892:	4b0e      	ldr	r3, [pc, #56]	@ (80008cc <MX_SPI5_Init+0x64>)
 8000894:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000898:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800089a:	4b0c      	ldr	r3, [pc, #48]	@ (80008cc <MX_SPI5_Init+0x64>)
 800089c:	2200      	movs	r2, #0
 800089e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008a0:	4b0a      	ldr	r3, [pc, #40]	@ (80008cc <MX_SPI5_Init+0x64>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80008a6:	4b09      	ldr	r3, [pc, #36]	@ (80008cc <MX_SPI5_Init+0x64>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008ac:	4b07      	ldr	r3, [pc, #28]	@ (80008cc <MX_SPI5_Init+0x64>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80008b2:	4b06      	ldr	r3, [pc, #24]	@ (80008cc <MX_SPI5_Init+0x64>)
 80008b4:	220a      	movs	r2, #10
 80008b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80008b8:	4804      	ldr	r0, [pc, #16]	@ (80008cc <MX_SPI5_Init+0x64>)
 80008ba:	f006 fdae 	bl	800741a <HAL_SPI_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80008c4:	f000 fa64 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80008c8:	bf00      	nop
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	200001b4 	.word	0x200001b4
 80008d0:	40015000 	.word	0x40015000

080008d4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b086      	sub	sp, #24
 80008d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008da:	f107 0308 	add.w	r3, r7, #8
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
 80008e2:	605a      	str	r2, [r3, #4]
 80008e4:	609a      	str	r2, [r3, #8]
 80008e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008e8:	463b      	mov	r3, r7
 80008ea:	2200      	movs	r2, #0
 80008ec:	601a      	str	r2, [r3, #0]
 80008ee:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80008f0:	4b1e      	ldr	r3, [pc, #120]	@ (800096c <MX_TIM1_Init+0x98>)
 80008f2:	4a1f      	ldr	r2, [pc, #124]	@ (8000970 <MX_TIM1_Init+0x9c>)
 80008f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80008f6:	4b1d      	ldr	r3, [pc, #116]	@ (800096c <MX_TIM1_Init+0x98>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008fc:	4b1b      	ldr	r3, [pc, #108]	@ (800096c <MX_TIM1_Init+0x98>)
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000902:	4b1a      	ldr	r3, [pc, #104]	@ (800096c <MX_TIM1_Init+0x98>)
 8000904:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000908:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800090a:	4b18      	ldr	r3, [pc, #96]	@ (800096c <MX_TIM1_Init+0x98>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000910:	4b16      	ldr	r3, [pc, #88]	@ (800096c <MX_TIM1_Init+0x98>)
 8000912:	2200      	movs	r2, #0
 8000914:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000916:	4b15      	ldr	r3, [pc, #84]	@ (800096c <MX_TIM1_Init+0x98>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800091c:	4813      	ldr	r0, [pc, #76]	@ (800096c <MX_TIM1_Init+0x98>)
 800091e:	f007 fb83 	bl	8008028 <HAL_TIM_Base_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000928:	f000 fa32 	bl	8000d90 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800092c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000930:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000932:	f107 0308 	add.w	r3, r7, #8
 8000936:	4619      	mov	r1, r3
 8000938:	480c      	ldr	r0, [pc, #48]	@ (800096c <MX_TIM1_Init+0x98>)
 800093a:	f007 fd25 	bl	8008388 <HAL_TIM_ConfigClockSource>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d001      	beq.n	8000948 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000944:	f000 fa24 	bl	8000d90 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000948:	2300      	movs	r3, #0
 800094a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800094c:	2300      	movs	r3, #0
 800094e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000950:	463b      	mov	r3, r7
 8000952:	4619      	mov	r1, r3
 8000954:	4805      	ldr	r0, [pc, #20]	@ (800096c <MX_TIM1_Init+0x98>)
 8000956:	f007 ff4d 	bl	80087f4 <HAL_TIMEx_MasterConfigSynchronization>
 800095a:	4603      	mov	r3, r0
 800095c:	2b00      	cmp	r3, #0
 800095e:	d001      	beq.n	8000964 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000960:	f000 fa16 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000964:	bf00      	nop
 8000966:	3718      	adds	r7, #24
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	2000020c 	.word	0x2000020c
 8000970:	40010000 	.word	0x40010000

08000974 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000978:	4b11      	ldr	r3, [pc, #68]	@ (80009c0 <MX_USART1_UART_Init+0x4c>)
 800097a:	4a12      	ldr	r2, [pc, #72]	@ (80009c4 <MX_USART1_UART_Init+0x50>)
 800097c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800097e:	4b10      	ldr	r3, [pc, #64]	@ (80009c0 <MX_USART1_UART_Init+0x4c>)
 8000980:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000984:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b0e      	ldr	r3, [pc, #56]	@ (80009c0 <MX_USART1_UART_Init+0x4c>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b0c      	ldr	r3, [pc, #48]	@ (80009c0 <MX_USART1_UART_Init+0x4c>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000992:	4b0b      	ldr	r3, [pc, #44]	@ (80009c0 <MX_USART1_UART_Init+0x4c>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b09      	ldr	r3, [pc, #36]	@ (80009c0 <MX_USART1_UART_Init+0x4c>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b08      	ldr	r3, [pc, #32]	@ (80009c0 <MX_USART1_UART_Init+0x4c>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b06      	ldr	r3, [pc, #24]	@ (80009c0 <MX_USART1_UART_Init+0x4c>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80009aa:	4805      	ldr	r0, [pc, #20]	@ (80009c0 <MX_USART1_UART_Init+0x4c>)
 80009ac:	f007 ffb2 	bl	8008914 <HAL_UART_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80009b6:	f000 f9eb 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80009ba:	bf00      	nop
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop
 80009c0:	20000254 	.word	0x20000254
 80009c4:	40011000 	.word	0x40011000

080009c8 <MX_USB_OTG_HS_HCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_HCD_Init(void)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80009cc:	4b12      	ldr	r3, [pc, #72]	@ (8000a18 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80009ce:	4a13      	ldr	r2, [pc, #76]	@ (8000a1c <MX_USB_OTG_HS_HCD_Init+0x54>)
 80009d0:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 80009d2:	4b11      	ldr	r3, [pc, #68]	@ (8000a18 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80009d4:	220c      	movs	r2, #12
 80009d6:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 80009d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000a18 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80009da:	2201      	movs	r2, #1
 80009dc:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80009de:	4b0e      	ldr	r3, [pc, #56]	@ (8000a18 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80009e0:	2200      	movs	r2, #0
 80009e2:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80009e4:	4b0c      	ldr	r3, [pc, #48]	@ (8000a18 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80009e6:	2202      	movs	r2, #2
 80009e8:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80009ea:	4b0b      	ldr	r3, [pc, #44]	@ (8000a18 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80009ec:	2200      	movs	r2, #0
 80009ee:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80009f0:	4b09      	ldr	r3, [pc, #36]	@ (8000a18 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80009f6:	4b08      	ldr	r3, [pc, #32]	@ (8000a18 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80009fc:	4b06      	ldr	r3, [pc, #24]	@ (8000a18 <MX_USB_OTG_HS_HCD_Init+0x50>)
 80009fe:	2200      	movs	r2, #0
 8000a00:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 8000a02:	4805      	ldr	r0, [pc, #20]	@ (8000a18 <MX_USB_OTG_HS_HCD_Init+0x50>)
 8000a04:	f003 f9ed 	bl	8003de2 <HAL_HCD_Init>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <MX_USB_OTG_HS_HCD_Init+0x4a>
  {
    Error_Handler();
 8000a0e:	f000 f9bf 	bl	8000d90 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000a12:	bf00      	nop
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	2000029c 	.word	0x2000029c
 8000a1c:	40040000 	.word	0x40040000

08000a20 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b088      	sub	sp, #32
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000a26:	1d3b      	adds	r3, r7, #4
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
 8000a34:	615a      	str	r2, [r3, #20]
 8000a36:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000a38:	4b1e      	ldr	r3, [pc, #120]	@ (8000ab4 <MX_FMC_Init+0x94>)
 8000a3a:	4a1f      	ldr	r2, [pc, #124]	@ (8000ab8 <MX_FMC_Init+0x98>)
 8000a3c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000a3e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ab4 <MX_FMC_Init+0x94>)
 8000a40:	2201      	movs	r2, #1
 8000a42:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000a44:	4b1b      	ldr	r3, [pc, #108]	@ (8000ab4 <MX_FMC_Init+0x94>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8000a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8000ab4 <MX_FMC_Init+0x94>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000a50:	4b18      	ldr	r3, [pc, #96]	@ (8000ab4 <MX_FMC_Init+0x94>)
 8000a52:	2210      	movs	r2, #16
 8000a54:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000a56:	4b17      	ldr	r3, [pc, #92]	@ (8000ab4 <MX_FMC_Init+0x94>)
 8000a58:	2240      	movs	r2, #64	@ 0x40
 8000a5a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8000a5c:	4b15      	ldr	r3, [pc, #84]	@ (8000ab4 <MX_FMC_Init+0x94>)
 8000a5e:	2280      	movs	r2, #128	@ 0x80
 8000a60:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000a62:	4b14      	ldr	r3, [pc, #80]	@ (8000ab4 <MX_FMC_Init+0x94>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8000a68:	4b12      	ldr	r3, [pc, #72]	@ (8000ab4 <MX_FMC_Init+0x94>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000a6e:	4b11      	ldr	r3, [pc, #68]	@ (8000ab4 <MX_FMC_Init+0x94>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8000a74:	4b0f      	ldr	r3, [pc, #60]	@ (8000ab4 <MX_FMC_Init+0x94>)
 8000a76:	2200      	movs	r2, #0
 8000a78:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8000a7a:	2310      	movs	r3, #16
 8000a7c:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8000a7e:	2310      	movs	r3, #16
 8000a80:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8000a82:	2310      	movs	r3, #16
 8000a84:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8000a86:	2310      	movs	r3, #16
 8000a88:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8000a8a:	2310      	movs	r3, #16
 8000a8c:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8000a8e:	2310      	movs	r3, #16
 8000a90:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8000a92:	2310      	movs	r3, #16
 8000a94:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000a96:	1d3b      	adds	r3, r7, #4
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4806      	ldr	r0, [pc, #24]	@ (8000ab4 <MX_FMC_Init+0x94>)
 8000a9c:	f006 fc2c 	bl	80072f8 <HAL_SDRAM_Init>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8000aa6:	f000 f973 	bl	8000d90 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000aaa:	bf00      	nop
 8000aac:	3720      	adds	r7, #32
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	bd80      	pop	{r7, pc}
 8000ab2:	bf00      	nop
 8000ab4:	2000067c 	.word	0x2000067c
 8000ab8:	a0000140 	.word	0xa0000140

08000abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b08e      	sub	sp, #56	@ 0x38
 8000ac0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	623b      	str	r3, [r7, #32]
 8000ad6:	4b9e      	ldr	r3, [pc, #632]	@ (8000d50 <MX_GPIO_Init+0x294>)
 8000ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ada:	4a9d      	ldr	r2, [pc, #628]	@ (8000d50 <MX_GPIO_Init+0x294>)
 8000adc:	f043 0304 	orr.w	r3, r3, #4
 8000ae0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae2:	4b9b      	ldr	r3, [pc, #620]	@ (8000d50 <MX_GPIO_Init+0x294>)
 8000ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ae6:	f003 0304 	and.w	r3, r3, #4
 8000aea:	623b      	str	r3, [r7, #32]
 8000aec:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
 8000af2:	4b97      	ldr	r3, [pc, #604]	@ (8000d50 <MX_GPIO_Init+0x294>)
 8000af4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000af6:	4a96      	ldr	r2, [pc, #600]	@ (8000d50 <MX_GPIO_Init+0x294>)
 8000af8:	f043 0320 	orr.w	r3, r3, #32
 8000afc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000afe:	4b94      	ldr	r3, [pc, #592]	@ (8000d50 <MX_GPIO_Init+0x294>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b02:	f003 0320 	and.w	r3, r3, #32
 8000b06:	61fb      	str	r3, [r7, #28]
 8000b08:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61bb      	str	r3, [r7, #24]
 8000b0e:	4b90      	ldr	r3, [pc, #576]	@ (8000d50 <MX_GPIO_Init+0x294>)
 8000b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b12:	4a8f      	ldr	r2, [pc, #572]	@ (8000d50 <MX_GPIO_Init+0x294>)
 8000b14:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000b18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1a:	4b8d      	ldr	r3, [pc, #564]	@ (8000d50 <MX_GPIO_Init+0x294>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b1e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000b22:	61bb      	str	r3, [r7, #24]
 8000b24:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b26:	2300      	movs	r3, #0
 8000b28:	617b      	str	r3, [r7, #20]
 8000b2a:	4b89      	ldr	r3, [pc, #548]	@ (8000d50 <MX_GPIO_Init+0x294>)
 8000b2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b2e:	4a88      	ldr	r2, [pc, #544]	@ (8000d50 <MX_GPIO_Init+0x294>)
 8000b30:	f043 0301 	orr.w	r3, r3, #1
 8000b34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b36:	4b86      	ldr	r3, [pc, #536]	@ (8000d50 <MX_GPIO_Init+0x294>)
 8000b38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b3a:	f003 0301 	and.w	r3, r3, #1
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b42:	2300      	movs	r3, #0
 8000b44:	613b      	str	r3, [r7, #16]
 8000b46:	4b82      	ldr	r3, [pc, #520]	@ (8000d50 <MX_GPIO_Init+0x294>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b4a:	4a81      	ldr	r2, [pc, #516]	@ (8000d50 <MX_GPIO_Init+0x294>)
 8000b4c:	f043 0302 	orr.w	r3, r3, #2
 8000b50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b52:	4b7f      	ldr	r3, [pc, #508]	@ (8000d50 <MX_GPIO_Init+0x294>)
 8000b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b56:	f003 0302 	and.w	r3, r3, #2
 8000b5a:	613b      	str	r3, [r7, #16]
 8000b5c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000b5e:	2300      	movs	r3, #0
 8000b60:	60fb      	str	r3, [r7, #12]
 8000b62:	4b7b      	ldr	r3, [pc, #492]	@ (8000d50 <MX_GPIO_Init+0x294>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b66:	4a7a      	ldr	r2, [pc, #488]	@ (8000d50 <MX_GPIO_Init+0x294>)
 8000b68:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000b6c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6e:	4b78      	ldr	r3, [pc, #480]	@ (8000d50 <MX_GPIO_Init+0x294>)
 8000b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	60bb      	str	r3, [r7, #8]
 8000b7e:	4b74      	ldr	r3, [pc, #464]	@ (8000d50 <MX_GPIO_Init+0x294>)
 8000b80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b82:	4a73      	ldr	r2, [pc, #460]	@ (8000d50 <MX_GPIO_Init+0x294>)
 8000b84:	f043 0310 	orr.w	r3, r3, #16
 8000b88:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b8a:	4b71      	ldr	r3, [pc, #452]	@ (8000d50 <MX_GPIO_Init+0x294>)
 8000b8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b8e:	f003 0310 	and.w	r3, r3, #16
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	4b6d      	ldr	r3, [pc, #436]	@ (8000d50 <MX_GPIO_Init+0x294>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b9e:	4a6c      	ldr	r2, [pc, #432]	@ (8000d50 <MX_GPIO_Init+0x294>)
 8000ba0:	f043 0308 	orr.w	r3, r3, #8
 8000ba4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ba6:	4b6a      	ldr	r3, [pc, #424]	@ (8000d50 <MX_GPIO_Init+0x294>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000baa:	f003 0308 	and.w	r3, r3, #8
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_13, GPIO_PIN_RESET);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	f44f 5101 	mov.w	r1, #8256	@ 0x2040
 8000bb8:	4866      	ldr	r0, [pc, #408]	@ (8000d54 <MX_GPIO_Init+0x298>)
 8000bba:	f003 f8f9 	bl	8003db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2116      	movs	r1, #22
 8000bc2:	4865      	ldr	r0, [pc, #404]	@ (8000d58 <MX_GPIO_Init+0x29c>)
 8000bc4:	f003 f8f4 	bl	8003db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000bc8:	2200      	movs	r2, #0
 8000bca:	2180      	movs	r1, #128	@ 0x80
 8000bcc:	4863      	ldr	r0, [pc, #396]	@ (8000d5c <MX_GPIO_Init+0x2a0>)
 8000bce:	f003 f8ef 	bl	8003db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000bd8:	4861      	ldr	r0, [pc, #388]	@ (8000d60 <MX_GPIO_Init+0x2a4>)
 8000bda:	f003 f8e9 	bl	8003db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000bde:	2200      	movs	r2, #0
 8000be0:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000be4:	485f      	ldr	r0, [pc, #380]	@ (8000d64 <MX_GPIO_Init+0x2a8>)
 8000be6:	f003 f8e3 	bl	8003db0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF6 PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_13;
 8000bea:	f44f 5301 	mov.w	r3, #8256	@ 0x2040
 8000bee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bfc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c00:	4619      	mov	r1, r3
 8000c02:	4854      	ldr	r0, [pc, #336]	@ (8000d54 <MX_GPIO_Init+0x298>)
 8000c04:	f002 fe1c 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000c08:	2316      	movs	r3, #22
 8000c0a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c10:	2300      	movs	r3, #0
 8000c12:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c14:	2300      	movs	r3, #0
 8000c16:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	484e      	ldr	r0, [pc, #312]	@ (8000d58 <MX_GPIO_Init+0x29c>)
 8000c20:	f002 fe0e 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c24:	2308      	movs	r3, #8
 8000c26:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c34:	4619      	mov	r1, r3
 8000c36:	4848      	ldr	r0, [pc, #288]	@ (8000d58 <MX_GPIO_Init+0x29c>)
 8000c38:	f002 fe02 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000c3c:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000c40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c42:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c50:	4619      	mov	r1, r3
 8000c52:	4842      	ldr	r0, [pc, #264]	@ (8000d5c <MX_GPIO_Init+0x2a0>)
 8000c54:	f002 fdf4 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000c58:	2320      	movs	r3, #32
 8000c5a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c64:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c68:	4619      	mov	r1, r3
 8000c6a:	483c      	ldr	r0, [pc, #240]	@ (8000d5c <MX_GPIO_Init+0x2a0>)
 8000c6c:	f002 fde8 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000c70:	2380      	movs	r3, #128	@ 0x80
 8000c72:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c74:	2301      	movs	r3, #1
 8000c76:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000c80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c84:	4619      	mov	r1, r3
 8000c86:	4835      	ldr	r0, [pc, #212]	@ (8000d5c <MX_GPIO_Init+0x2a0>)
 8000c88:	f002 fdda 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000c8c:	2320      	movs	r3, #32
 8000c8e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c90:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c94:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c96:	2300      	movs	r3, #0
 8000c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000c9a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	482d      	ldr	r0, [pc, #180]	@ (8000d58 <MX_GPIO_Init+0x29c>)
 8000ca2:	f002 fdcd 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000ca6:	2304      	movs	r3, #4
 8000ca8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000caa:	2300      	movs	r3, #0
 8000cac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	2300      	movs	r3, #0
 8000cb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000cb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	482b      	ldr	r0, [pc, #172]	@ (8000d68 <MX_GPIO_Init+0x2ac>)
 8000cba:	f002 fdc1 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF12 PF14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8000cbe:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8000cc2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000ccc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4820      	ldr	r0, [pc, #128]	@ (8000d54 <MX_GPIO_Init+0x298>)
 8000cd4:	f002 fdb4 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000cd8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000cdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cea:	4619      	mov	r1, r3
 8000cec:	481c      	ldr	r0, [pc, #112]	@ (8000d60 <MX_GPIO_Init+0x2a4>)
 8000cee:	f002 fda7 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000cf2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000cf6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d04:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4815      	ldr	r0, [pc, #84]	@ (8000d60 <MX_GPIO_Init+0x2a4>)
 8000d0c:	f002 fd98 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d10:	230c      	movs	r3, #12
 8000d12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d1c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d20:	4619      	mov	r1, r3
 8000d22:	4810      	ldr	r0, [pc, #64]	@ (8000d64 <MX_GPIO_Init+0x2a8>)
 8000d24:	f002 fd8c 	bl	8003840 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000d28:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000d2c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d36:	2300      	movs	r3, #0
 8000d38:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d3a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d3e:	4619      	mov	r1, r3
 8000d40:	4808      	ldr	r0, [pc, #32]	@ (8000d64 <MX_GPIO_Init+0x2a8>)
 8000d42:	f002 fd7d 	bl	8003840 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000d46:	bf00      	nop
 8000d48:	3738      	adds	r7, #56	@ 0x38
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	40023800 	.word	0x40023800
 8000d54:	40021400 	.word	0x40021400
 8000d58:	40020800 	.word	0x40020800
 8000d5c:	40020000 	.word	0x40020000
 8000d60:	40020c00 	.word	0x40020c00
 8000d64:	40021800 	.word	0x40021800
 8000d68:	40020400 	.word	0x40020400

08000d6c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b082      	sub	sp, #8
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	4a04      	ldr	r2, [pc, #16]	@ (8000d8c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d101      	bne.n	8000d82 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000d7e:	f001 fec3 	bl	8002b08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d82:	bf00      	nop
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	40001000 	.word	0x40001000

08000d90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d94:	b672      	cpsid	i
}
 8000d96:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d98:	bf00      	nop
 8000d9a:	e7fd      	b.n	8000d98 <Error_Handler+0x8>

08000d9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	4b10      	ldr	r3, [pc, #64]	@ (8000de8 <HAL_MspInit+0x4c>)
 8000da8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000daa:	4a0f      	ldr	r2, [pc, #60]	@ (8000de8 <HAL_MspInit+0x4c>)
 8000dac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000db0:	6453      	str	r3, [r2, #68]	@ 0x44
 8000db2:	4b0d      	ldr	r3, [pc, #52]	@ (8000de8 <HAL_MspInit+0x4c>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000db6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	603b      	str	r3, [r7, #0]
 8000dc2:	4b09      	ldr	r3, [pc, #36]	@ (8000de8 <HAL_MspInit+0x4c>)
 8000dc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc6:	4a08      	ldr	r2, [pc, #32]	@ (8000de8 <HAL_MspInit+0x4c>)
 8000dc8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dcc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dce:	4b06      	ldr	r3, [pc, #24]	@ (8000de8 <HAL_MspInit+0x4c>)
 8000dd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	40023800 	.word	0x40023800

08000dec <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b085      	sub	sp, #20
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a0b      	ldr	r2, [pc, #44]	@ (8000e28 <HAL_CRC_MspInit+0x3c>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d10d      	bne.n	8000e1a <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	4b0a      	ldr	r3, [pc, #40]	@ (8000e2c <HAL_CRC_MspInit+0x40>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e06:	4a09      	ldr	r2, [pc, #36]	@ (8000e2c <HAL_CRC_MspInit+0x40>)
 8000e08:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e0e:	4b07      	ldr	r3, [pc, #28]	@ (8000e2c <HAL_CRC_MspInit+0x40>)
 8000e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e16:	60fb      	str	r3, [r7, #12]
 8000e18:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8000e1a:	bf00      	nop
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
 8000e26:	bf00      	nop
 8000e28:	40023000 	.word	0x40023000
 8000e2c:	40023800 	.word	0x40023800

08000e30 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b084      	sub	sp, #16
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a0e      	ldr	r2, [pc, #56]	@ (8000e78 <HAL_DMA2D_MspInit+0x48>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d115      	bne.n	8000e6e <HAL_DMA2D_MspInit+0x3e>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	4b0d      	ldr	r3, [pc, #52]	@ (8000e7c <HAL_DMA2D_MspInit+0x4c>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4a:	4a0c      	ldr	r2, [pc, #48]	@ (8000e7c <HAL_DMA2D_MspInit+0x4c>)
 8000e4c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000e50:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e52:	4b0a      	ldr	r3, [pc, #40]	@ (8000e7c <HAL_DMA2D_MspInit+0x4c>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e56:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2105      	movs	r1, #5
 8000e62:	205a      	movs	r0, #90	@ 0x5a
 8000e64:	f001 ff4c 	bl	8002d00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000e68:	205a      	movs	r0, #90	@ 0x5a
 8000e6a:	f001 ff65 	bl	8002d38 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000e6e:	bf00      	nop
 8000e70:	3710      	adds	r7, #16
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	4002b000 	.word	0x4002b000
 8000e7c:	40023800 	.word	0x40023800

08000e80 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08a      	sub	sp, #40	@ 0x28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a29      	ldr	r2, [pc, #164]	@ (8000f44 <HAL_I2C_MspInit+0xc4>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d14b      	bne.n	8000f3a <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	4b28      	ldr	r3, [pc, #160]	@ (8000f48 <HAL_I2C_MspInit+0xc8>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eaa:	4a27      	ldr	r2, [pc, #156]	@ (8000f48 <HAL_I2C_MspInit+0xc8>)
 8000eac:	f043 0304 	orr.w	r3, r3, #4
 8000eb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000eb2:	4b25      	ldr	r3, [pc, #148]	@ (8000f48 <HAL_I2C_MspInit+0xc8>)
 8000eb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eb6:	f003 0304 	and.w	r3, r3, #4
 8000eba:	613b      	str	r3, [r7, #16]
 8000ebc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	4b21      	ldr	r3, [pc, #132]	@ (8000f48 <HAL_I2C_MspInit+0xc8>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	4a20      	ldr	r2, [pc, #128]	@ (8000f48 <HAL_I2C_MspInit+0xc8>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ece:	4b1e      	ldr	r3, [pc, #120]	@ (8000f48 <HAL_I2C_MspInit+0xc8>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000eda:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ee0:	2312      	movs	r3, #18
 8000ee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000eec:	2304      	movs	r3, #4
 8000eee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	4815      	ldr	r0, [pc, #84]	@ (8000f4c <HAL_I2C_MspInit+0xcc>)
 8000ef8:	f002 fca2 	bl	8003840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000efc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f02:	2312      	movs	r3, #18
 8000f04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f06:	2301      	movs	r3, #1
 8000f08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000f0e:	2304      	movs	r3, #4
 8000f10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000f12:	f107 0314 	add.w	r3, r7, #20
 8000f16:	4619      	mov	r1, r3
 8000f18:	480d      	ldr	r0, [pc, #52]	@ (8000f50 <HAL_I2C_MspInit+0xd0>)
 8000f1a:	f002 fc91 	bl	8003840 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	4b09      	ldr	r3, [pc, #36]	@ (8000f48 <HAL_I2C_MspInit+0xc8>)
 8000f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f26:	4a08      	ldr	r2, [pc, #32]	@ (8000f48 <HAL_I2C_MspInit+0xc8>)
 8000f28:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000f2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f2e:	4b06      	ldr	r3, [pc, #24]	@ (8000f48 <HAL_I2C_MspInit+0xc8>)
 8000f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 8000f3a:	bf00      	nop
 8000f3c:	3728      	adds	r7, #40	@ 0x28
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40005c00 	.word	0x40005c00
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40020800 	.word	0x40020800
 8000f50:	40020000 	.word	0x40020000

08000f54 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b09a      	sub	sp, #104	@ 0x68
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f5c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f6c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f70:	2230      	movs	r2, #48	@ 0x30
 8000f72:	2100      	movs	r1, #0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f008 fcc9 	bl	800990c <memset>
  if(hltdc->Instance==LTDC)
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	4a85      	ldr	r2, [pc, #532]	@ (8001194 <HAL_LTDC_MspInit+0x240>)
 8000f80:	4293      	cmp	r3, r2
 8000f82:	f040 8102 	bne.w	800118a <HAL_LTDC_MspInit+0x236>

    /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8000f86:	2308      	movs	r3, #8
 8000f88:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8000f8a:	2332      	movs	r3, #50	@ 0x32
 8000f8c:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8000f92:	2300      	movs	r3, #0
 8000f94:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f96:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f005 ffec 	bl	8006f78 <HAL_RCCEx_PeriphCLKConfig>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 8000fa6:	f7ff fef3 	bl	8000d90 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8000faa:	2300      	movs	r3, #0
 8000fac:	623b      	str	r3, [r7, #32]
 8000fae:	4b7a      	ldr	r3, [pc, #488]	@ (8001198 <HAL_LTDC_MspInit+0x244>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fb2:	4a79      	ldr	r2, [pc, #484]	@ (8001198 <HAL_LTDC_MspInit+0x244>)
 8000fb4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8000fb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fba:	4b77      	ldr	r3, [pc, #476]	@ (8001198 <HAL_LTDC_MspInit+0x244>)
 8000fbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fbe:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8000fc2:	623b      	str	r3, [r7, #32]
 8000fc4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	61fb      	str	r3, [r7, #28]
 8000fca:	4b73      	ldr	r3, [pc, #460]	@ (8001198 <HAL_LTDC_MspInit+0x244>)
 8000fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fce:	4a72      	ldr	r2, [pc, #456]	@ (8001198 <HAL_LTDC_MspInit+0x244>)
 8000fd0:	f043 0320 	orr.w	r3, r3, #32
 8000fd4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fd6:	4b70      	ldr	r3, [pc, #448]	@ (8001198 <HAL_LTDC_MspInit+0x244>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fda:	f003 0320 	and.w	r3, r3, #32
 8000fde:	61fb      	str	r3, [r7, #28]
 8000fe0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	61bb      	str	r3, [r7, #24]
 8000fe6:	4b6c      	ldr	r3, [pc, #432]	@ (8001198 <HAL_LTDC_MspInit+0x244>)
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fea:	4a6b      	ldr	r2, [pc, #428]	@ (8001198 <HAL_LTDC_MspInit+0x244>)
 8000fec:	f043 0301 	orr.w	r3, r3, #1
 8000ff0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ff2:	4b69      	ldr	r3, [pc, #420]	@ (8001198 <HAL_LTDC_MspInit+0x244>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ff6:	f003 0301 	and.w	r3, r3, #1
 8000ffa:	61bb      	str	r3, [r7, #24]
 8000ffc:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ffe:	2300      	movs	r3, #0
 8001000:	617b      	str	r3, [r7, #20]
 8001002:	4b65      	ldr	r3, [pc, #404]	@ (8001198 <HAL_LTDC_MspInit+0x244>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001006:	4a64      	ldr	r2, [pc, #400]	@ (8001198 <HAL_LTDC_MspInit+0x244>)
 8001008:	f043 0302 	orr.w	r3, r3, #2
 800100c:	6313      	str	r3, [r2, #48]	@ 0x30
 800100e:	4b62      	ldr	r3, [pc, #392]	@ (8001198 <HAL_LTDC_MspInit+0x244>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001012:	f003 0302 	and.w	r3, r3, #2
 8001016:	617b      	str	r3, [r7, #20]
 8001018:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800101a:	2300      	movs	r3, #0
 800101c:	613b      	str	r3, [r7, #16]
 800101e:	4b5e      	ldr	r3, [pc, #376]	@ (8001198 <HAL_LTDC_MspInit+0x244>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001022:	4a5d      	ldr	r2, [pc, #372]	@ (8001198 <HAL_LTDC_MspInit+0x244>)
 8001024:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001028:	6313      	str	r3, [r2, #48]	@ 0x30
 800102a:	4b5b      	ldr	r3, [pc, #364]	@ (8001198 <HAL_LTDC_MspInit+0x244>)
 800102c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800102e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001032:	613b      	str	r3, [r7, #16]
 8001034:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	60fb      	str	r3, [r7, #12]
 800103a:	4b57      	ldr	r3, [pc, #348]	@ (8001198 <HAL_LTDC_MspInit+0x244>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	4a56      	ldr	r2, [pc, #344]	@ (8001198 <HAL_LTDC_MspInit+0x244>)
 8001040:	f043 0304 	orr.w	r3, r3, #4
 8001044:	6313      	str	r3, [r2, #48]	@ 0x30
 8001046:	4b54      	ldr	r3, [pc, #336]	@ (8001198 <HAL_LTDC_MspInit+0x244>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	f003 0304 	and.w	r3, r3, #4
 800104e:	60fb      	str	r3, [r7, #12]
 8001050:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001052:	2300      	movs	r3, #0
 8001054:	60bb      	str	r3, [r7, #8]
 8001056:	4b50      	ldr	r3, [pc, #320]	@ (8001198 <HAL_LTDC_MspInit+0x244>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	4a4f      	ldr	r2, [pc, #316]	@ (8001198 <HAL_LTDC_MspInit+0x244>)
 800105c:	f043 0308 	orr.w	r3, r3, #8
 8001060:	6313      	str	r3, [r2, #48]	@ 0x30
 8001062:	4b4d      	ldr	r3, [pc, #308]	@ (8001198 <HAL_LTDC_MspInit+0x244>)
 8001064:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001066:	f003 0308 	and.w	r3, r3, #8
 800106a:	60bb      	str	r3, [r7, #8]
 800106c:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 800106e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001072:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001074:	2302      	movs	r3, #2
 8001076:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001078:	2300      	movs	r3, #0
 800107a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800107c:	2300      	movs	r3, #0
 800107e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001080:	230e      	movs	r3, #14
 8001082:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001084:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001088:	4619      	mov	r1, r3
 800108a:	4844      	ldr	r0, [pc, #272]	@ (800119c <HAL_LTDC_MspInit+0x248>)
 800108c:	f002 fbd8 	bl	8003840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001090:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001094:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001096:	2302      	movs	r3, #2
 8001098:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800109a:	2300      	movs	r3, #0
 800109c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	2300      	movs	r3, #0
 80010a0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010a2:	230e      	movs	r3, #14
 80010a4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010aa:	4619      	mov	r1, r3
 80010ac:	483c      	ldr	r0, [pc, #240]	@ (80011a0 <HAL_LTDC_MspInit+0x24c>)
 80010ae:	f002 fbc7 	bl	8003840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80010b2:	2303      	movs	r3, #3
 80010b4:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010b6:	2302      	movs	r3, #2
 80010b8:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ba:	2300      	movs	r3, #0
 80010bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010be:	2300      	movs	r3, #0
 80010c0:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80010c2:	2309      	movs	r3, #9
 80010c4:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010c6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010ca:	4619      	mov	r1, r3
 80010cc:	4835      	ldr	r0, [pc, #212]	@ (80011a4 <HAL_LTDC_MspInit+0x250>)
 80010ce:	f002 fbb7 	bl	8003840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80010d2:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80010d6:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010d8:	2302      	movs	r3, #2
 80010da:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010dc:	2300      	movs	r3, #0
 80010de:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010e0:	2300      	movs	r3, #0
 80010e2:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80010e4:	230e      	movs	r3, #14
 80010e6:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80010ec:	4619      	mov	r1, r3
 80010ee:	482d      	ldr	r0, [pc, #180]	@ (80011a4 <HAL_LTDC_MspInit+0x250>)
 80010f0:	f002 fba6 	bl	8003840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80010f4:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80010f8:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010fa:	2302      	movs	r3, #2
 80010fc:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2300      	movs	r3, #0
 8001104:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001106:	230e      	movs	r3, #14
 8001108:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800110a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800110e:	4619      	mov	r1, r3
 8001110:	4825      	ldr	r0, [pc, #148]	@ (80011a8 <HAL_LTDC_MspInit+0x254>)
 8001112:	f002 fb95 	bl	8003840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8001116:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 800111a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111c:	2302      	movs	r3, #2
 800111e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001120:	2300      	movs	r3, #0
 8001122:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001124:	2300      	movs	r3, #0
 8001126:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001128:	230e      	movs	r3, #14
 800112a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800112c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001130:	4619      	mov	r1, r3
 8001132:	481e      	ldr	r0, [pc, #120]	@ (80011ac <HAL_LTDC_MspInit+0x258>)
 8001134:	f002 fb84 	bl	8003840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8001138:	2348      	movs	r3, #72	@ 0x48
 800113a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	2302      	movs	r3, #2
 800113e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001144:	2300      	movs	r3, #0
 8001146:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001148:	230e      	movs	r3, #14
 800114a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800114c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001150:	4619      	mov	r1, r3
 8001152:	4817      	ldr	r0, [pc, #92]	@ (80011b0 <HAL_LTDC_MspInit+0x25c>)
 8001154:	f002 fb74 	bl	8003840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8001158:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800115c:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800115e:	2302      	movs	r3, #2
 8001160:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001166:	2300      	movs	r3, #0
 8001168:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800116a:	2309      	movs	r3, #9
 800116c:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800116e:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001172:	4619      	mov	r1, r3
 8001174:	480c      	ldr	r0, [pc, #48]	@ (80011a8 <HAL_LTDC_MspInit+0x254>)
 8001176:	f002 fb63 	bl	8003840 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800117a:	2200      	movs	r2, #0
 800117c:	2105      	movs	r1, #5
 800117e:	2058      	movs	r0, #88	@ 0x58
 8001180:	f001 fdbe 	bl	8002d00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001184:	2058      	movs	r0, #88	@ 0x58
 8001186:	f001 fdd7 	bl	8002d38 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 800118a:	bf00      	nop
 800118c:	3768      	adds	r7, #104	@ 0x68
 800118e:	46bd      	mov	sp, r7
 8001190:	bd80      	pop	{r7, pc}
 8001192:	bf00      	nop
 8001194:	40016800 	.word	0x40016800
 8001198:	40023800 	.word	0x40023800
 800119c:	40021400 	.word	0x40021400
 80011a0:	40020000 	.word	0x40020000
 80011a4:	40020400 	.word	0x40020400
 80011a8:	40021800 	.word	0x40021800
 80011ac:	40020800 	.word	0x40020800
 80011b0:	40020c00 	.word	0x40020c00

080011b4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b08a      	sub	sp, #40	@ 0x28
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011bc:	f107 0314 	add.w	r3, r7, #20
 80011c0:	2200      	movs	r2, #0
 80011c2:	601a      	str	r2, [r3, #0]
 80011c4:	605a      	str	r2, [r3, #4]
 80011c6:	609a      	str	r2, [r3, #8]
 80011c8:	60da      	str	r2, [r3, #12]
 80011ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a19      	ldr	r2, [pc, #100]	@ (8001238 <HAL_SPI_MspInit+0x84>)
 80011d2:	4293      	cmp	r3, r2
 80011d4:	d12c      	bne.n	8001230 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI5_MspInit 0 */

    /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	613b      	str	r3, [r7, #16]
 80011da:	4b18      	ldr	r3, [pc, #96]	@ (800123c <HAL_SPI_MspInit+0x88>)
 80011dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011de:	4a17      	ldr	r2, [pc, #92]	@ (800123c <HAL_SPI_MspInit+0x88>)
 80011e0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80011e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80011e6:	4b15      	ldr	r3, [pc, #84]	@ (800123c <HAL_SPI_MspInit+0x88>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011ea:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011ee:	613b      	str	r3, [r7, #16]
 80011f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60fb      	str	r3, [r7, #12]
 80011f6:	4b11      	ldr	r3, [pc, #68]	@ (800123c <HAL_SPI_MspInit+0x88>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	4a10      	ldr	r2, [pc, #64]	@ (800123c <HAL_SPI_MspInit+0x88>)
 80011fc:	f043 0320 	orr.w	r3, r3, #32
 8001200:	6313      	str	r3, [r2, #48]	@ 0x30
 8001202:	4b0e      	ldr	r3, [pc, #56]	@ (800123c <HAL_SPI_MspInit+0x88>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	f003 0320 	and.w	r3, r3, #32
 800120a:	60fb      	str	r3, [r7, #12]
 800120c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800120e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001212:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001214:	2302      	movs	r3, #2
 8001216:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001218:	2300      	movs	r3, #0
 800121a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121c:	2300      	movs	r3, #0
 800121e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001220:	2305      	movs	r3, #5
 8001222:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001224:	f107 0314 	add.w	r3, r7, #20
 8001228:	4619      	mov	r1, r3
 800122a:	4805      	ldr	r0, [pc, #20]	@ (8001240 <HAL_SPI_MspInit+0x8c>)
 800122c:	f002 fb08 	bl	8003840 <HAL_GPIO_Init>

    /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001230:	bf00      	nop
 8001232:	3728      	adds	r7, #40	@ 0x28
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	40015000 	.word	0x40015000
 800123c:	40023800 	.word	0x40023800
 8001240:	40021400 	.word	0x40021400

08001244 <HAL_SPI_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b082      	sub	sp, #8
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  if(hspi->Instance==SPI5)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	4a08      	ldr	r2, [pc, #32]	@ (8001274 <HAL_SPI_MspDeInit+0x30>)
 8001252:	4293      	cmp	r3, r2
 8001254:	d10a      	bne.n	800126c <HAL_SPI_MspDeInit+0x28>
  {
    /* USER CODE BEGIN SPI5_MspDeInit 0 */

    /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8001256:	4b08      	ldr	r3, [pc, #32]	@ (8001278 <HAL_SPI_MspDeInit+0x34>)
 8001258:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800125a:	4a07      	ldr	r2, [pc, #28]	@ (8001278 <HAL_SPI_MspDeInit+0x34>)
 800125c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8001260:	6453      	str	r3, [r2, #68]	@ 0x44
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    HAL_GPIO_DeInit(GPIOF, SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin);
 8001262:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8001266:	4805      	ldr	r0, [pc, #20]	@ (800127c <HAL_SPI_MspDeInit+0x38>)
 8001268:	f002 fc96 	bl	8003b98 <HAL_GPIO_DeInit>
    /* USER CODE BEGIN SPI5_MspDeInit 1 */

    /* USER CODE END SPI5_MspDeInit 1 */
  }

}
 800126c:	bf00      	nop
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	40015000 	.word	0x40015000
 8001278:	40023800 	.word	0x40023800
 800127c:	40021400 	.word	0x40021400

08001280 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001280:	b480      	push	{r7}
 8001282:	b085      	sub	sp, #20
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a0b      	ldr	r2, [pc, #44]	@ (80012bc <HAL_TIM_Base_MspInit+0x3c>)
 800128e:	4293      	cmp	r3, r2
 8001290:	d10d      	bne.n	80012ae <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60fb      	str	r3, [r7, #12]
 8001296:	4b0a      	ldr	r3, [pc, #40]	@ (80012c0 <HAL_TIM_Base_MspInit+0x40>)
 8001298:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800129a:	4a09      	ldr	r2, [pc, #36]	@ (80012c0 <HAL_TIM_Base_MspInit+0x40>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012a2:	4b07      	ldr	r3, [pc, #28]	@ (80012c0 <HAL_TIM_Base_MspInit+0x40>)
 80012a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	60fb      	str	r3, [r7, #12]
 80012ac:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 80012ae:	bf00      	nop
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	40010000 	.word	0x40010000
 80012c0:	40023800 	.word	0x40023800

080012c4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08a      	sub	sp, #40	@ 0x28
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012cc:	f107 0314 	add.w	r3, r7, #20
 80012d0:	2200      	movs	r2, #0
 80012d2:	601a      	str	r2, [r3, #0]
 80012d4:	605a      	str	r2, [r3, #4]
 80012d6:	609a      	str	r2, [r3, #8]
 80012d8:	60da      	str	r2, [r3, #12]
 80012da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a19      	ldr	r2, [pc, #100]	@ (8001348 <HAL_UART_MspInit+0x84>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d12c      	bne.n	8001340 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	613b      	str	r3, [r7, #16]
 80012ea:	4b18      	ldr	r3, [pc, #96]	@ (800134c <HAL_UART_MspInit+0x88>)
 80012ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ee:	4a17      	ldr	r2, [pc, #92]	@ (800134c <HAL_UART_MspInit+0x88>)
 80012f0:	f043 0310 	orr.w	r3, r3, #16
 80012f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80012f6:	4b15      	ldr	r3, [pc, #84]	@ (800134c <HAL_UART_MspInit+0x88>)
 80012f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012fa:	f003 0310 	and.w	r3, r3, #16
 80012fe:	613b      	str	r3, [r7, #16]
 8001300:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60fb      	str	r3, [r7, #12]
 8001306:	4b11      	ldr	r3, [pc, #68]	@ (800134c <HAL_UART_MspInit+0x88>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	4a10      	ldr	r2, [pc, #64]	@ (800134c <HAL_UART_MspInit+0x88>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6313      	str	r3, [r2, #48]	@ 0x30
 8001312:	4b0e      	ldr	r3, [pc, #56]	@ (800134c <HAL_UART_MspInit+0x88>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800131e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001322:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001324:	2302      	movs	r3, #2
 8001326:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001328:	2300      	movs	r3, #0
 800132a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800132c:	2303      	movs	r3, #3
 800132e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001330:	2307      	movs	r3, #7
 8001332:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001334:	f107 0314 	add.w	r3, r7, #20
 8001338:	4619      	mov	r1, r3
 800133a:	4805      	ldr	r0, [pc, #20]	@ (8001350 <HAL_UART_MspInit+0x8c>)
 800133c:	f002 fa80 	bl	8003840 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8001340:	bf00      	nop
 8001342:	3728      	adds	r7, #40	@ 0x28
 8001344:	46bd      	mov	sp, r7
 8001346:	bd80      	pop	{r7, pc}
 8001348:	40011000 	.word	0x40011000
 800134c:	40023800 	.word	0x40023800
 8001350:	40020000 	.word	0x40020000

08001354 <HAL_HCD_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hhcd: HCD handle pointer
  * @retval None
  */
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b08a      	sub	sp, #40	@ 0x28
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135c:	f107 0314 	add.w	r3, r7, #20
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_HS)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a24      	ldr	r2, [pc, #144]	@ (8001404 <HAL_HCD_MspInit+0xb0>)
 8001372:	4293      	cmp	r3, r2
 8001374:	d141      	bne.n	80013fa <HAL_HCD_MspInit+0xa6>
  {
    /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

    /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001376:	2300      	movs	r3, #0
 8001378:	613b      	str	r3, [r7, #16]
 800137a:	4b23      	ldr	r3, [pc, #140]	@ (8001408 <HAL_HCD_MspInit+0xb4>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800137e:	4a22      	ldr	r2, [pc, #136]	@ (8001408 <HAL_HCD_MspInit+0xb4>)
 8001380:	f043 0302 	orr.w	r3, r3, #2
 8001384:	6313      	str	r3, [r2, #48]	@ 0x30
 8001386:	4b20      	ldr	r3, [pc, #128]	@ (8001408 <HAL_HCD_MspInit+0xb4>)
 8001388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800138a:	f003 0302 	and.w	r3, r3, #2
 800138e:	613b      	str	r3, [r7, #16]
 8001390:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001392:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001396:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001398:	2302      	movs	r3, #2
 800139a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	2300      	movs	r3, #0
 800139e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a0:	2300      	movs	r3, #0
 80013a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80013a4:	230c      	movs	r3, #12
 80013a6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013a8:	f107 0314 	add.w	r3, r7, #20
 80013ac:	4619      	mov	r1, r3
 80013ae:	4817      	ldr	r0, [pc, #92]	@ (800140c <HAL_HCD_MspInit+0xb8>)
 80013b0:	f002 fa46 	bl	8003840 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80013b4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ba:	2300      	movs	r3, #0
 80013bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013be:	2300      	movs	r3, #0
 80013c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80013c2:	f107 0314 	add.w	r3, r7, #20
 80013c6:	4619      	mov	r1, r3
 80013c8:	4810      	ldr	r0, [pc, #64]	@ (800140c <HAL_HCD_MspInit+0xb8>)
 80013ca:	f002 fa39 	bl	8003840 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60fb      	str	r3, [r7, #12]
 80013d2:	4b0d      	ldr	r3, [pc, #52]	@ (8001408 <HAL_HCD_MspInit+0xb4>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	4a0c      	ldr	r2, [pc, #48]	@ (8001408 <HAL_HCD_MspInit+0xb4>)
 80013d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80013dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80013de:	4b0a      	ldr	r3, [pc, #40]	@ (8001408 <HAL_HCD_MspInit+0xb4>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80013e6:	60fb      	str	r3, [r7, #12]
 80013e8:	68fb      	ldr	r3, [r7, #12]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	204d      	movs	r0, #77	@ 0x4d
 80013f0:	f001 fc86 	bl	8002d00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 80013f4:	204d      	movs	r0, #77	@ 0x4d
 80013f6:	f001 fc9f 	bl	8002d38 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USB_OTG_HS_MspInit 1 */

  }

}
 80013fa:	bf00      	nop
 80013fc:	3728      	adds	r7, #40	@ 0x28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}
 8001402:	bf00      	nop
 8001404:	40040000 	.word	0x40040000
 8001408:	40023800 	.word	0x40023800
 800140c:	40020400 	.word	0x40020400

08001410 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001416:	1d3b      	adds	r3, r7, #4
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001424:	4b3b      	ldr	r3, [pc, #236]	@ (8001514 <HAL_FMC_MspInit+0x104>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d16f      	bne.n	800150c <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 800142c:	4b39      	ldr	r3, [pc, #228]	@ (8001514 <HAL_FMC_MspInit+0x104>)
 800142e:	2201      	movs	r2, #1
 8001430:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8001432:	2300      	movs	r3, #0
 8001434:	603b      	str	r3, [r7, #0]
 8001436:	4b38      	ldr	r3, [pc, #224]	@ (8001518 <HAL_FMC_MspInit+0x108>)
 8001438:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800143a:	4a37      	ldr	r2, [pc, #220]	@ (8001518 <HAL_FMC_MspInit+0x108>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6393      	str	r3, [r2, #56]	@ 0x38
 8001442:	4b35      	ldr	r3, [pc, #212]	@ (8001518 <HAL_FMC_MspInit+0x108>)
 8001444:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	603b      	str	r3, [r7, #0]
 800144c:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800144e:	f648 033f 	movw	r3, #34879	@ 0x883f
 8001452:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001454:	2302      	movs	r3, #2
 8001456:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145c:	2303      	movs	r3, #3
 800145e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001460:	230c      	movs	r3, #12
 8001462:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	4619      	mov	r1, r3
 8001468:	482c      	ldr	r0, [pc, #176]	@ (800151c <HAL_FMC_MspInit+0x10c>)
 800146a:	f002 f9e9 	bl	8003840 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800146e:	2301      	movs	r3, #1
 8001470:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800147e:	230c      	movs	r3, #12
 8001480:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8001482:	1d3b      	adds	r3, r7, #4
 8001484:	4619      	mov	r1, r3
 8001486:	4826      	ldr	r0, [pc, #152]	@ (8001520 <HAL_FMC_MspInit+0x110>)
 8001488:	f002 f9da 	bl	8003840 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800148c:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001490:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001492:	2302      	movs	r3, #2
 8001494:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001496:	2300      	movs	r3, #0
 8001498:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800149a:	2303      	movs	r3, #3
 800149c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800149e:	230c      	movs	r3, #12
 80014a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014a2:	1d3b      	adds	r3, r7, #4
 80014a4:	4619      	mov	r1, r3
 80014a6:	481f      	ldr	r0, [pc, #124]	@ (8001524 <HAL_FMC_MspInit+0x114>)
 80014a8:	f002 f9ca 	bl	8003840 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80014ac:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80014b0:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	2302      	movs	r3, #2
 80014b4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b6:	2300      	movs	r3, #0
 80014b8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014ba:	2303      	movs	r3, #3
 80014bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014be:	230c      	movs	r3, #12
 80014c0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014c2:	1d3b      	adds	r3, r7, #4
 80014c4:	4619      	mov	r1, r3
 80014c6:	4818      	ldr	r0, [pc, #96]	@ (8001528 <HAL_FMC_MspInit+0x118>)
 80014c8:	f002 f9ba 	bl	8003840 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80014cc:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80014d0:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d2:	2302      	movs	r3, #2
 80014d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d6:	2300      	movs	r3, #0
 80014d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014da:	2303      	movs	r3, #3
 80014dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014de:	230c      	movs	r3, #12
 80014e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	4619      	mov	r1, r3
 80014e6:	4811      	ldr	r0, [pc, #68]	@ (800152c <HAL_FMC_MspInit+0x11c>)
 80014e8:	f002 f9aa 	bl	8003840 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80014ec:	2360      	movs	r3, #96	@ 0x60
 80014ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014f8:	2303      	movs	r3, #3
 80014fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014fc:	230c      	movs	r3, #12
 80014fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001500:	1d3b      	adds	r3, r7, #4
 8001502:	4619      	mov	r1, r3
 8001504:	480a      	ldr	r0, [pc, #40]	@ (8001530 <HAL_FMC_MspInit+0x120>)
 8001506:	f002 f99b 	bl	8003840 <HAL_GPIO_Init>
 800150a:	e000      	b.n	800150e <HAL_FMC_MspInit+0xfe>
    return;
 800150c:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	200006b0 	.word	0x200006b0
 8001518:	40023800 	.word	0x40023800
 800151c:	40021400 	.word	0x40021400
 8001520:	40020800 	.word	0x40020800
 8001524:	40021800 	.word	0x40021800
 8001528:	40021000 	.word	0x40021000
 800152c:	40020c00 	.word	0x40020c00
 8001530:	40020400 	.word	0x40020400

08001534 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800153c:	f7ff ff68 	bl	8001410 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08e      	sub	sp, #56	@ 0x38
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001550:	2300      	movs	r3, #0
 8001552:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001554:	2300      	movs	r3, #0
 8001556:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001558:	2300      	movs	r3, #0
 800155a:	60fb      	str	r3, [r7, #12]
 800155c:	4b33      	ldr	r3, [pc, #204]	@ (800162c <HAL_InitTick+0xe4>)
 800155e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001560:	4a32      	ldr	r2, [pc, #200]	@ (800162c <HAL_InitTick+0xe4>)
 8001562:	f043 0310 	orr.w	r3, r3, #16
 8001566:	6413      	str	r3, [r2, #64]	@ 0x40
 8001568:	4b30      	ldr	r3, [pc, #192]	@ (800162c <HAL_InitTick+0xe4>)
 800156a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156c:	f003 0310 	and.w	r3, r3, #16
 8001570:	60fb      	str	r3, [r7, #12]
 8001572:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001574:	f107 0210 	add.w	r2, r7, #16
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	4611      	mov	r1, r2
 800157e:	4618      	mov	r0, r3
 8001580:	f005 fcc8 	bl	8006f14 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001584:	6a3b      	ldr	r3, [r7, #32]
 8001586:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001588:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800158a:	2b00      	cmp	r3, #0
 800158c:	d103      	bne.n	8001596 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800158e:	f005 fc99 	bl	8006ec4 <HAL_RCC_GetPCLK1Freq>
 8001592:	6378      	str	r0, [r7, #52]	@ 0x34
 8001594:	e004      	b.n	80015a0 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001596:	f005 fc95 	bl	8006ec4 <HAL_RCC_GetPCLK1Freq>
 800159a:	4603      	mov	r3, r0
 800159c:	005b      	lsls	r3, r3, #1
 800159e:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80015a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80015a2:	4a23      	ldr	r2, [pc, #140]	@ (8001630 <HAL_InitTick+0xe8>)
 80015a4:	fba2 2303 	umull	r2, r3, r2, r3
 80015a8:	0c9b      	lsrs	r3, r3, #18
 80015aa:	3b01      	subs	r3, #1
 80015ac:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80015ae:	4b21      	ldr	r3, [pc, #132]	@ (8001634 <HAL_InitTick+0xec>)
 80015b0:	4a21      	ldr	r2, [pc, #132]	@ (8001638 <HAL_InitTick+0xf0>)
 80015b2:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80015b4:	4b1f      	ldr	r3, [pc, #124]	@ (8001634 <HAL_InitTick+0xec>)
 80015b6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015ba:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80015bc:	4a1d      	ldr	r2, [pc, #116]	@ (8001634 <HAL_InitTick+0xec>)
 80015be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015c0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80015c2:	4b1c      	ldr	r3, [pc, #112]	@ (8001634 <HAL_InitTick+0xec>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015c8:	4b1a      	ldr	r3, [pc, #104]	@ (8001634 <HAL_InitTick+0xec>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ce:	4b19      	ldr	r3, [pc, #100]	@ (8001634 <HAL_InitTick+0xec>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80015d4:	4817      	ldr	r0, [pc, #92]	@ (8001634 <HAL_InitTick+0xec>)
 80015d6:	f006 fd27 	bl	8008028 <HAL_TIM_Base_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80015e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d11b      	bne.n	8001620 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80015e8:	4812      	ldr	r0, [pc, #72]	@ (8001634 <HAL_InitTick+0xec>)
 80015ea:	f006 fd6d 	bl	80080c8 <HAL_TIM_Base_Start_IT>
 80015ee:	4603      	mov	r3, r0
 80015f0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80015f4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d111      	bne.n	8001620 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80015fc:	2036      	movs	r0, #54	@ 0x36
 80015fe:	f001 fb9b 	bl	8002d38 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	2b0f      	cmp	r3, #15
 8001606:	d808      	bhi.n	800161a <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001608:	2200      	movs	r2, #0
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	2036      	movs	r0, #54	@ 0x36
 800160e:	f001 fb77 	bl	8002d00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001612:	4a0a      	ldr	r2, [pc, #40]	@ (800163c <HAL_InitTick+0xf4>)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6013      	str	r3, [r2, #0]
 8001618:	e002      	b.n	8001620 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001620:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001624:	4618      	mov	r0, r3
 8001626:	3738      	adds	r7, #56	@ 0x38
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	40023800 	.word	0x40023800
 8001630:	431bde83 	.word	0x431bde83
 8001634:	200006b4 	.word	0x200006b4
 8001638:	40001000 	.word	0x40001000
 800163c:	2000004c 	.word	0x2000004c

08001640 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001644:	bf00      	nop
 8001646:	e7fd      	b.n	8001644 <NMI_Handler+0x4>

08001648 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800164c:	bf00      	nop
 800164e:	e7fd      	b.n	800164c <HardFault_Handler+0x4>

08001650 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001654:	bf00      	nop
 8001656:	e7fd      	b.n	8001654 <MemManage_Handler+0x4>

08001658 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800165c:	bf00      	nop
 800165e:	e7fd      	b.n	800165c <BusFault_Handler+0x4>

08001660 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001664:	bf00      	nop
 8001666:	e7fd      	b.n	8001664 <UsageFault_Handler+0x4>

08001668 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800166c:	bf00      	nop
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr

08001676 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001676:	b480      	push	{r7}
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr

08001684 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001688:	bf00      	nop
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr

08001692 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001692:	b480      	push	{r7}
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016a4:	4802      	ldr	r0, [pc, #8]	@ (80016b0 <TIM6_DAC_IRQHandler+0x10>)
 80016a6:	f006 fd7f 	bl	80081a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200006b4 	.word	0x200006b4

080016b4 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80016b8:	4802      	ldr	r0, [pc, #8]	@ (80016c4 <OTG_HS_IRQHandler+0x10>)
 80016ba:	f002 fbf9 	bl	8003eb0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	2000029c 	.word	0x2000029c

080016c8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80016cc:	4802      	ldr	r0, [pc, #8]	@ (80016d8 <LTDC_IRQHandler+0x10>)
 80016ce:	f004 fc49 	bl	8005f64 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	2000010c 	.word	0x2000010c

080016dc <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80016e0:	4802      	ldr	r0, [pc, #8]	@ (80016ec <DMA2D_IRQHandler+0x10>)
 80016e2:	f001 fe6e 	bl	80033c2 <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80016e6:	bf00      	nop
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	20000078 	.word	0x20000078

080016f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016f4:	4b06      	ldr	r3, [pc, #24]	@ (8001710 <SystemInit+0x20>)
 80016f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016fa:	4a05      	ldr	r2, [pc, #20]	@ (8001710 <SystemInit+0x20>)
 80016fc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001700:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001704:	bf00      	nop
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr
 800170e:	bf00      	nop
 8001710:	e000ed00 	.word	0xe000ed00

08001714 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001714:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800174c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001718:	f7ff ffea 	bl	80016f0 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800171c:	480c      	ldr	r0, [pc, #48]	@ (8001750 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800171e:	490d      	ldr	r1, [pc, #52]	@ (8001754 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001720:	4a0d      	ldr	r2, [pc, #52]	@ (8001758 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001722:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001724:	e002      	b.n	800172c <LoopCopyDataInit>

08001726 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001726:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001728:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172a:	3304      	adds	r3, #4

0800172c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800172c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800172e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001730:	d3f9      	bcc.n	8001726 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001732:	4a0a      	ldr	r2, [pc, #40]	@ (800175c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001734:	4c0a      	ldr	r4, [pc, #40]	@ (8001760 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001736:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001738:	e001      	b.n	800173e <LoopFillZerobss>

0800173a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800173c:	3204      	adds	r2, #4

0800173e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800173e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001740:	d3fb      	bcc.n	800173a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001742:	f008 f8eb 	bl	800991c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001746:	f7fe ff11 	bl	800056c <main>
  bx  lr    
 800174a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800174c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001750:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001754:	20000054 	.word	0x20000054
  ldr r2, =_sidata
 8001758:	0800b53c 	.word	0x0800b53c
  ldr r2, =_sbss
 800175c:	20000054 	.word	0x20000054
  ldr r4, =_ebss
 8001760:	20000954 	.word	0x20000954

08001764 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001764:	e7fe      	b.n	8001764 <ADC_IRQHandler>

08001766 <ili9341_Init>:
  * @brief  Power on the LCD.
  * @param  None
  * @retval None
  */
void ili9341_Init(void)
{
 8001766:	b580      	push	{r7, lr}
 8001768:	af00      	add	r7, sp, #0
  /* Initialize ILI9341 low level bus layer ----------------------------------*/
  LCD_IO_Init();
 800176a:	f000 fa5d 	bl	8001c28 <LCD_IO_Init>
  
  /* Configure LCD */
  ili9341_WriteReg(0xCA);
 800176e:	20ca      	movs	r0, #202	@ 0xca
 8001770:	f000 f95d 	bl	8001a2e <ili9341_WriteReg>
  ili9341_WriteData(0xC3);
 8001774:	20c3      	movs	r0, #195	@ 0xc3
 8001776:	f000 f967 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x08);
 800177a:	2008      	movs	r0, #8
 800177c:	f000 f964 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x50);
 8001780:	2050      	movs	r0, #80	@ 0x50
 8001782:	f000 f961 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERB);
 8001786:	20cf      	movs	r0, #207	@ 0xcf
 8001788:	f000 f951 	bl	8001a2e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800178c:	2000      	movs	r0, #0
 800178e:	f000 f95b 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0xC1);
 8001792:	20c1      	movs	r0, #193	@ 0xc1
 8001794:	f000 f958 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x30);
 8001798:	2030      	movs	r0, #48	@ 0x30
 800179a:	f000 f955 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER_SEQ);
 800179e:	20ed      	movs	r0, #237	@ 0xed
 80017a0:	f000 f945 	bl	8001a2e <ili9341_WriteReg>
  ili9341_WriteData(0x64);
 80017a4:	2064      	movs	r0, #100	@ 0x64
 80017a6:	f000 f94f 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x03);
 80017aa:	2003      	movs	r0, #3
 80017ac:	f000 f94c 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x12);
 80017b0:	2012      	movs	r0, #18
 80017b2:	f000 f949 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x81);
 80017b6:	2081      	movs	r0, #129	@ 0x81
 80017b8:	f000 f946 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCA);
 80017bc:	20e8      	movs	r0, #232	@ 0xe8
 80017be:	f000 f936 	bl	8001a2e <ili9341_WriteReg>
  ili9341_WriteData(0x85);
 80017c2:	2085      	movs	r0, #133	@ 0x85
 80017c4:	f000 f940 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80017c8:	2000      	movs	r0, #0
 80017ca:	f000 f93d 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 80017ce:	2078      	movs	r0, #120	@ 0x78
 80017d0:	f000 f93a 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWERA);
 80017d4:	20cb      	movs	r0, #203	@ 0xcb
 80017d6:	f000 f92a 	bl	8001a2e <ili9341_WriteReg>
  ili9341_WriteData(0x39);
 80017da:	2039      	movs	r0, #57	@ 0x39
 80017dc:	f000 f934 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x2C);
 80017e0:	202c      	movs	r0, #44	@ 0x2c
 80017e2:	f000 f931 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80017e6:	2000      	movs	r0, #0
 80017e8:	f000 f92e 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x34);
 80017ec:	2034      	movs	r0, #52	@ 0x34
 80017ee:	f000 f92b 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x02);
 80017f2:	2002      	movs	r0, #2
 80017f4:	f000 f928 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteReg(LCD_PRC);
 80017f8:	20f7      	movs	r0, #247	@ 0xf7
 80017fa:	f000 f918 	bl	8001a2e <ili9341_WriteReg>
  ili9341_WriteData(0x20);
 80017fe:	2020      	movs	r0, #32
 8001800:	f000 f922 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DTCB);
 8001804:	20ea      	movs	r0, #234	@ 0xea
 8001806:	f000 f912 	bl	8001a2e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800180a:	2000      	movs	r0, #0
 800180c:	f000 f91c 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001810:	2000      	movs	r0, #0
 8001812:	f000 f919 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteReg(LCD_FRMCTR1);
 8001816:	20b1      	movs	r0, #177	@ 0xb1
 8001818:	f000 f909 	bl	8001a2e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 800181c:	2000      	movs	r0, #0
 800181e:	f000 f913 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001822:	201b      	movs	r0, #27
 8001824:	f000 f910 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001828:	20b6      	movs	r0, #182	@ 0xb6
 800182a:	f000 f900 	bl	8001a2e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800182e:	200a      	movs	r0, #10
 8001830:	f000 f90a 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0xA2);
 8001834:	20a2      	movs	r0, #162	@ 0xa2
 8001836:	f000 f907 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER1);
 800183a:	20c0      	movs	r0, #192	@ 0xc0
 800183c:	f000 f8f7 	bl	8001a2e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 8001840:	2010      	movs	r0, #16
 8001842:	f000 f901 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteReg(LCD_POWER2);
 8001846:	20c1      	movs	r0, #193	@ 0xc1
 8001848:	f000 f8f1 	bl	8001a2e <ili9341_WriteReg>
  ili9341_WriteData(0x10);
 800184c:	2010      	movs	r0, #16
 800184e:	f000 f8fb 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM1);
 8001852:	20c5      	movs	r0, #197	@ 0xc5
 8001854:	f000 f8eb 	bl	8001a2e <ili9341_WriteReg>
  ili9341_WriteData(0x45);
 8001858:	2045      	movs	r0, #69	@ 0x45
 800185a:	f000 f8f5 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x15);
 800185e:	2015      	movs	r0, #21
 8001860:	f000 f8f2 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteReg(LCD_VCOM2);
 8001864:	20c7      	movs	r0, #199	@ 0xc7
 8001866:	f000 f8e2 	bl	8001a2e <ili9341_WriteReg>
  ili9341_WriteData(0x90);
 800186a:	2090      	movs	r0, #144	@ 0x90
 800186c:	f000 f8ec 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteReg(LCD_MAC);
 8001870:	2036      	movs	r0, #54	@ 0x36
 8001872:	f000 f8dc 	bl	8001a2e <ili9341_WriteReg>
  ili9341_WriteData(0xC8);
 8001876:	20c8      	movs	r0, #200	@ 0xc8
 8001878:	f000 f8e6 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteReg(LCD_3GAMMA_EN);
 800187c:	20f2      	movs	r0, #242	@ 0xf2
 800187e:	f000 f8d6 	bl	8001a2e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001882:	2000      	movs	r0, #0
 8001884:	f000 f8e0 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteReg(LCD_RGB_INTERFACE);
 8001888:	20b0      	movs	r0, #176	@ 0xb0
 800188a:	f000 f8d0 	bl	8001a2e <ili9341_WriteReg>
  ili9341_WriteData(0xC2);
 800188e:	20c2      	movs	r0, #194	@ 0xc2
 8001890:	f000 f8da 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteReg(LCD_DFC);
 8001894:	20b6      	movs	r0, #182	@ 0xb6
 8001896:	f000 f8ca 	bl	8001a2e <ili9341_WriteReg>
  ili9341_WriteData(0x0A);
 800189a:	200a      	movs	r0, #10
 800189c:	f000 f8d4 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0xA7);
 80018a0:	20a7      	movs	r0, #167	@ 0xa7
 80018a2:	f000 f8d1 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x27);
 80018a6:	2027      	movs	r0, #39	@ 0x27
 80018a8:	f000 f8ce 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 80018ac:	2004      	movs	r0, #4
 80018ae:	f000 f8cb 	bl	8001a48 <ili9341_WriteData>
  
  /* Colomn address set */
  ili9341_WriteReg(LCD_COLUMN_ADDR);
 80018b2:	202a      	movs	r0, #42	@ 0x2a
 80018b4:	f000 f8bb 	bl	8001a2e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80018b8:	2000      	movs	r0, #0
 80018ba:	f000 f8c5 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80018be:	2000      	movs	r0, #0
 80018c0:	f000 f8c2 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80018c4:	2000      	movs	r0, #0
 80018c6:	f000 f8bf 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0xEF);
 80018ca:	20ef      	movs	r0, #239	@ 0xef
 80018cc:	f000 f8bc 	bl	8001a48 <ili9341_WriteData>
  /* Page address set */
  ili9341_WriteReg(LCD_PAGE_ADDR);
 80018d0:	202b      	movs	r0, #43	@ 0x2b
 80018d2:	f000 f8ac 	bl	8001a2e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 80018d6:	2000      	movs	r0, #0
 80018d8:	f000 f8b6 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80018dc:	2000      	movs	r0, #0
 80018de:	f000 f8b3 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x01);
 80018e2:	2001      	movs	r0, #1
 80018e4:	f000 f8b0 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x3F);
 80018e8:	203f      	movs	r0, #63	@ 0x3f
 80018ea:	f000 f8ad 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteReg(LCD_INTERFACE);
 80018ee:	20f6      	movs	r0, #246	@ 0xf6
 80018f0:	f000 f89d 	bl	8001a2e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 80018f4:	2001      	movs	r0, #1
 80018f6:	f000 f8a7 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 80018fa:	2000      	movs	r0, #0
 80018fc:	f000 f8a4 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x06);
 8001900:	2006      	movs	r0, #6
 8001902:	f000 f8a1 	bl	8001a48 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_GRAM);
 8001906:	202c      	movs	r0, #44	@ 0x2c
 8001908:	f000 f891 	bl	8001a2e <ili9341_WriteReg>
  LCD_Delay(200);
 800190c:	20c8      	movs	r0, #200	@ 0xc8
 800190e:	f000 fa79 	bl	8001e04 <LCD_Delay>
  
  ili9341_WriteReg(LCD_GAMMA);
 8001912:	2026      	movs	r0, #38	@ 0x26
 8001914:	f000 f88b 	bl	8001a2e <ili9341_WriteReg>
  ili9341_WriteData(0x01);
 8001918:	2001      	movs	r0, #1
 800191a:	f000 f895 	bl	8001a48 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_PGAMMA);
 800191e:	20e0      	movs	r0, #224	@ 0xe0
 8001920:	f000 f885 	bl	8001a2e <ili9341_WriteReg>
  ili9341_WriteData(0x0F);
 8001924:	200f      	movs	r0, #15
 8001926:	f000 f88f 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x29);
 800192a:	2029      	movs	r0, #41	@ 0x29
 800192c:	f000 f88c 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x24);
 8001930:	2024      	movs	r0, #36	@ 0x24
 8001932:	f000 f889 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 8001936:	200c      	movs	r0, #12
 8001938:	f000 f886 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x0E);
 800193c:	200e      	movs	r0, #14
 800193e:	f000 f883 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 8001942:	2009      	movs	r0, #9
 8001944:	f000 f880 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x4E);
 8001948:	204e      	movs	r0, #78	@ 0x4e
 800194a:	f000 f87d 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x78);
 800194e:	2078      	movs	r0, #120	@ 0x78
 8001950:	f000 f87a 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x3C);
 8001954:	203c      	movs	r0, #60	@ 0x3c
 8001956:	f000 f877 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x09);
 800195a:	2009      	movs	r0, #9
 800195c:	f000 f874 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x13);
 8001960:	2013      	movs	r0, #19
 8001962:	f000 f871 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 8001966:	2005      	movs	r0, #5
 8001968:	f000 f86e 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x17);
 800196c:	2017      	movs	r0, #23
 800196e:	f000 f86b 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 8001972:	2011      	movs	r0, #17
 8001974:	f000 f868 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x00);
 8001978:	2000      	movs	r0, #0
 800197a:	f000 f865 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteReg(LCD_NGAMMA);
 800197e:	20e1      	movs	r0, #225	@ 0xe1
 8001980:	f000 f855 	bl	8001a2e <ili9341_WriteReg>
  ili9341_WriteData(0x00);
 8001984:	2000      	movs	r0, #0
 8001986:	f000 f85f 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x16);
 800198a:	2016      	movs	r0, #22
 800198c:	f000 f85c 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x1B);
 8001990:	201b      	movs	r0, #27
 8001992:	f000 f859 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x04);
 8001996:	2004      	movs	r0, #4
 8001998:	f000 f856 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x11);
 800199c:	2011      	movs	r0, #17
 800199e:	f000 f853 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x07);
 80019a2:	2007      	movs	r0, #7
 80019a4:	f000 f850 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x31);
 80019a8:	2031      	movs	r0, #49	@ 0x31
 80019aa:	f000 f84d 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x33);
 80019ae:	2033      	movs	r0, #51	@ 0x33
 80019b0:	f000 f84a 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x42);
 80019b4:	2042      	movs	r0, #66	@ 0x42
 80019b6:	f000 f847 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x05);
 80019ba:	2005      	movs	r0, #5
 80019bc:	f000 f844 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x0C);
 80019c0:	200c      	movs	r0, #12
 80019c2:	f000 f841 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x0A);
 80019c6:	200a      	movs	r0, #10
 80019c8:	f000 f83e 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x28);
 80019cc:	2028      	movs	r0, #40	@ 0x28
 80019ce:	f000 f83b 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x2F);
 80019d2:	202f      	movs	r0, #47	@ 0x2f
 80019d4:	f000 f838 	bl	8001a48 <ili9341_WriteData>
  ili9341_WriteData(0x0F);
 80019d8:	200f      	movs	r0, #15
 80019da:	f000 f835 	bl	8001a48 <ili9341_WriteData>
  
  ili9341_WriteReg(LCD_SLEEP_OUT);
 80019de:	2011      	movs	r0, #17
 80019e0:	f000 f825 	bl	8001a2e <ili9341_WriteReg>
  LCD_Delay(200);
 80019e4:	20c8      	movs	r0, #200	@ 0xc8
 80019e6:	f000 fa0d 	bl	8001e04 <LCD_Delay>
  ili9341_WriteReg(LCD_DISPLAY_ON);
 80019ea:	2029      	movs	r0, #41	@ 0x29
 80019ec:	f000 f81f 	bl	8001a2e <ili9341_WriteReg>
  /* GRAM start writing */
  ili9341_WriteReg(LCD_GRAM);
 80019f0:	202c      	movs	r0, #44	@ 0x2c
 80019f2:	f000 f81c 	bl	8001a2e <ili9341_WriteReg>
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}

080019fa <ili9341_ReadID>:
  * @brief  Disables the Display.
  * @param  None
  * @retval LCD Register Value.
  */
uint16_t ili9341_ReadID(void)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	af00      	add	r7, sp, #0
  LCD_IO_Init();
 80019fe:	f000 f913 	bl	8001c28 <LCD_IO_Init>
  return ((uint16_t)ili9341_ReadData(LCD_READ_ID4, LCD_READ_ID4_SIZE));
 8001a02:	2103      	movs	r1, #3
 8001a04:	20d3      	movs	r0, #211	@ 0xd3
 8001a06:	f000 f82c 	bl	8001a62 <ili9341_ReadData>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	b29b      	uxth	r3, r3
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	bd80      	pop	{r7, pc}

08001a12 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	af00      	add	r7, sp, #0
  /* Display On */
  ili9341_WriteReg(LCD_DISPLAY_ON);
 8001a16:	2029      	movs	r0, #41	@ 0x29
 8001a18:	f000 f809 	bl	8001a2e <ili9341_WriteReg>
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* Display Off */
  ili9341_WriteReg(LCD_DISPLAY_OFF);
 8001a24:	2028      	movs	r0, #40	@ 0x28
 8001a26:	f000 f802 	bl	8001a2e <ili9341_WriteReg>
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}

08001a2e <ili9341_WriteReg>:
  * @brief  Writes  to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteReg(uint8_t LCD_Reg)
{
 8001a2e:	b580      	push	{r7, lr}
 8001a30:	b082      	sub	sp, #8
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	4603      	mov	r3, r0
 8001a36:	71fb      	strb	r3, [r7, #7]
  LCD_IO_WriteReg(LCD_Reg);
 8001a38:	79fb      	ldrb	r3, [r7, #7]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f000 f98e 	bl	8001d5c <LCD_IO_WriteReg>
}
 8001a40:	bf00      	nop
 8001a42:	3708      	adds	r7, #8
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}

08001a48 <ili9341_WriteData>:
  * @brief  Writes data to the selected LCD register.
  * @param  LCD_Reg: address of the selected register.
  * @retval None
  */
void ili9341_WriteData(uint16_t RegValue)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b082      	sub	sp, #8
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	80fb      	strh	r3, [r7, #6]
  LCD_IO_WriteData(RegValue);
 8001a52:	88fb      	ldrh	r3, [r7, #6]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f000 f95f 	bl	8001d18 <LCD_IO_WriteData>
}
 8001a5a:	bf00      	nop
 8001a5c:	3708      	adds	r7, #8
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	bd80      	pop	{r7, pc}

08001a62 <ili9341_ReadData>:
  * @param  RegValue: Address of the register to read
  * @param  ReadSize: Number of bytes to read
  * @retval LCD Register Value.
  */
uint32_t ili9341_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001a62:	b580      	push	{r7, lr}
 8001a64:	b082      	sub	sp, #8
 8001a66:	af00      	add	r7, sp, #0
 8001a68:	4603      	mov	r3, r0
 8001a6a:	460a      	mov	r2, r1
 8001a6c:	80fb      	strh	r3, [r7, #6]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	717b      	strb	r3, [r7, #5]
  /* Read a max of 4 bytes */
  return (LCD_IO_ReadData(RegValue, ReadSize));
 8001a72:	797a      	ldrb	r2, [r7, #5]
 8001a74:	88fb      	ldrh	r3, [r7, #6]
 8001a76:	4611      	mov	r1, r2
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 f991 	bl	8001da0 <LCD_IO_ReadData>
 8001a7e:	4603      	mov	r3, r0
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <ili9341_GetLcdPixelWidth>:
  * @brief  Get LCD PIXEL WIDTH.
  * @param  None
  * @retval LCD PIXEL WIDTH.
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
 8001a8c:	23f0      	movs	r3, #240	@ 0xf0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <ili9341_GetLcdPixelHeight>:
  * @brief  Get LCD PIXEL HEIGHT.
  * @param  None
  * @retval LCD PIXEL HEIGHT.
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
 8001a9c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
}
 8001aa0:	4618      	mov	r0, r3
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
	...

08001aac <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	af00      	add	r7, sp, #0
  if (HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 8001ab0:	4819      	ldr	r0, [pc, #100]	@ (8001b18 <SPIx_Init+0x6c>)
 8001ab2:	f006 f969 	bl	8007d88 <HAL_SPI_GetState>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d12b      	bne.n	8001b14 <SPIx_Init+0x68>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8001abc:	4b16      	ldr	r3, [pc, #88]	@ (8001b18 <SPIx_Init+0x6c>)
 8001abe:	4a17      	ldr	r2, [pc, #92]	@ (8001b1c <SPIx_Init+0x70>)
 8001ac0:	601a      	str	r2, [r3, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8001ac2:	4b15      	ldr	r3, [pc, #84]	@ (8001b18 <SPIx_Init+0x6c>)
 8001ac4:	2218      	movs	r2, #24
 8001ac6:	61da      	str	r2, [r3, #28]

    /* On STM32F429I-Discovery, LCD ID cannot be read then keep a common configuration */
    /* for LCD and GYRO (SPI_DIRECTION_2LINES) */
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8001ac8:	4b13      	ldr	r3, [pc, #76]	@ (8001b18 <SPIx_Init+0x6c>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	609a      	str	r2, [r3, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8001ace:	4b12      	ldr	r3, [pc, #72]	@ (8001b18 <SPIx_Init+0x6c>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	615a      	str	r2, [r3, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8001ad4:	4b10      	ldr	r3, [pc, #64]	@ (8001b18 <SPIx_Init+0x6c>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	611a      	str	r2, [r3, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 8001ada:	4b0f      	ldr	r3, [pc, #60]	@ (8001b18 <SPIx_Init+0x6c>)
 8001adc:	2200      	movs	r2, #0
 8001ade:	629a      	str	r2, [r3, #40]	@ 0x28
    SpiHandle.Init.CRCPolynomial  = 7;
 8001ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8001b18 <SPIx_Init+0x6c>)
 8001ae2:	2207      	movs	r2, #7
 8001ae4:	62da      	str	r2, [r3, #44]	@ 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 8001ae6:	4b0c      	ldr	r3, [pc, #48]	@ (8001b18 <SPIx_Init+0x6c>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	60da      	str	r2, [r3, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 8001aec:	4b0a      	ldr	r3, [pc, #40]	@ (8001b18 <SPIx_Init+0x6c>)
 8001aee:	2200      	movs	r2, #0
 8001af0:	621a      	str	r2, [r3, #32]
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8001af2:	4b09      	ldr	r3, [pc, #36]	@ (8001b18 <SPIx_Init+0x6c>)
 8001af4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001af8:	619a      	str	r2, [r3, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8001afa:	4b07      	ldr	r3, [pc, #28]	@ (8001b18 <SPIx_Init+0x6c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	625a      	str	r2, [r3, #36]	@ 0x24
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 8001b00:	4b05      	ldr	r3, [pc, #20]	@ (8001b18 <SPIx_Init+0x6c>)
 8001b02:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001b06:	605a      	str	r2, [r3, #4]

    SPIx_MspInit(&SpiHandle);
 8001b08:	4803      	ldr	r0, [pc, #12]	@ (8001b18 <SPIx_Init+0x6c>)
 8001b0a:	f000 f853 	bl	8001bb4 <SPIx_MspInit>
    HAL_SPI_Init(&SpiHandle);
 8001b0e:	4802      	ldr	r0, [pc, #8]	@ (8001b18 <SPIx_Init+0x6c>)
 8001b10:	f005 fc83 	bl	800741a <HAL_SPI_Init>
  }
}
 8001b14:	bf00      	nop
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	200006fc 	.word	0x200006fc
 8001b1c:	40015000 	.word	0x40015000

08001b20 <SPIx_Read>:
  * @brief  Reads 4 bytes from device.
  * @param  ReadSize: Number of bytes to read (max 4 bytes)
  * @retval Value read on the SPI
  */
static uint32_t SPIx_Read(uint8_t ReadSize)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b084      	sub	sp, #16
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]
  HAL_StatusTypeDef status = HAL_OK;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	73fb      	strb	r3, [r7, #15]
  uint32_t readvalue;

  status = HAL_SPI_Receive(&SpiHandle, (uint8_t *) &readvalue, ReadSize, SpixTimeout);
 8001b2e:	79fb      	ldrb	r3, [r7, #7]
 8001b30:	b29a      	uxth	r2, r3
 8001b32:	4b09      	ldr	r3, [pc, #36]	@ (8001b58 <SPIx_Read+0x38>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f107 0108 	add.w	r1, r7, #8
 8001b3a:	4808      	ldr	r0, [pc, #32]	@ (8001b5c <SPIx_Read+0x3c>)
 8001b3c:	f005 fe62 	bl	8007804 <HAL_SPI_Receive>
 8001b40:	4603      	mov	r3, r0
 8001b42:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8001b44:	7bfb      	ldrb	r3, [r7, #15]
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <SPIx_Read+0x2e>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001b4a:	f000 f827 	bl	8001b9c <SPIx_Error>
  }

  return readvalue;
 8001b4e:	68bb      	ldr	r3, [r7, #8]
}
 8001b50:	4618      	mov	r0, r3
 8001b52:	3710      	adds	r7, #16
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	2000003c 	.word	0x2000003c
 8001b5c:	200006fc 	.word	0x200006fc

08001b60 <SPIx_Write>:
/**
  * @brief  Writes a byte to device.
  * @param  Value: value to be written
  */
static void SPIx_Write(uint16_t Value)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	4603      	mov	r3, r0
 8001b68:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	73fb      	strb	r3, [r7, #15]

  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t *) &Value, 1, SpixTimeout);
 8001b6e:	4b09      	ldr	r3, [pc, #36]	@ (8001b94 <SPIx_Write+0x34>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	1db9      	adds	r1, r7, #6
 8001b74:	2201      	movs	r2, #1
 8001b76:	4808      	ldr	r0, [pc, #32]	@ (8001b98 <SPIx_Write+0x38>)
 8001b78:	f005 fd00 	bl	800757c <HAL_SPI_Transmit>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	73fb      	strb	r3, [r7, #15]

  /* Check the communication status */
  if (status != HAL_OK)
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <SPIx_Write+0x2a>
  {
    /* Re-Initialize the BUS */
    SPIx_Error();
 8001b86:	f000 f809 	bl	8001b9c <SPIx_Error>
  }
}
 8001b8a:	bf00      	nop
 8001b8c:	3710      	adds	r7, #16
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	2000003c 	.word	0x2000003c
 8001b98:	200006fc 	.word	0x200006fc

08001b9c <SPIx_Error>:

/**
  * @brief  SPIx error treatment function.
  */
static void SPIx_Error(void)
{
 8001b9c:	b580      	push	{r7, lr}
 8001b9e:	af00      	add	r7, sp, #0
  /* De-initialize the SPI communication BUS */
  HAL_SPI_DeInit(&SpiHandle);
 8001ba0:	4803      	ldr	r0, [pc, #12]	@ (8001bb0 <SPIx_Error+0x14>)
 8001ba2:	f005 fcc3 	bl	800752c <HAL_SPI_DeInit>

  /* Re- Initialize the SPI communication BUS */
  SPIx_Init();
 8001ba6:	f7ff ff81 	bl	8001aac <SPIx_Init>
}
 8001baa:	bf00      	nop
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	200006fc 	.word	0x200006fc

08001bb4 <SPIx_MspInit>:
/**
  * @brief  SPI MSP Init.
  * @param  hspi: SPI handle
  */
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b08a      	sub	sp, #40	@ 0x28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	613b      	str	r3, [r7, #16]
 8001bc0:	4b17      	ldr	r3, [pc, #92]	@ (8001c20 <SPIx_MspInit+0x6c>)
 8001bc2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc4:	4a16      	ldr	r2, [pc, #88]	@ (8001c20 <SPIx_MspInit+0x6c>)
 8001bc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001bca:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bcc:	4b14      	ldr	r3, [pc, #80]	@ (8001c20 <SPIx_MspInit+0x6c>)
 8001bce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001bd4:	613b      	str	r3, [r7, #16]
 8001bd6:	693b      	ldr	r3, [r7, #16]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8001bd8:	2300      	movs	r3, #0
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	4b10      	ldr	r3, [pc, #64]	@ (8001c20 <SPIx_MspInit+0x6c>)
 8001bde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be0:	4a0f      	ldr	r2, [pc, #60]	@ (8001c20 <SPIx_MspInit+0x6c>)
 8001be2:	f043 0320 	orr.w	r3, r3, #32
 8001be6:	6313      	str	r3, [r2, #48]	@ 0x30
 8001be8:	4b0d      	ldr	r3, [pc, #52]	@ (8001c20 <SPIx_MspInit+0x6c>)
 8001bea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bec:	f003 0320 	and.w	r3, r3, #32
 8001bf0:	60fb      	str	r3, [r7, #12]
 8001bf2:	68fb      	ldr	r3, [r7, #12]

  /* configure SPI SCK, MOSI and MISO */
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 8001bf4:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001bf8:	617b      	str	r3, [r7, #20]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	61fb      	str	r3, [r7, #28]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 8001c02:	2301      	movs	r3, #1
 8001c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 8001c06:	2305      	movs	r3, #5
 8001c08:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8001c0a:	f107 0314 	add.w	r3, r7, #20
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4804      	ldr	r0, [pc, #16]	@ (8001c24 <SPIx_MspInit+0x70>)
 8001c12:	f001 fe15 	bl	8003840 <HAL_GPIO_Init>
}
 8001c16:	bf00      	nop
 8001c18:	3728      	adds	r7, #40	@ 0x28
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40021400 	.word	0x40021400

08001c28 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b088      	sub	sp, #32
 8001c2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  if (Is_LCD_IO_Initialized == 0)
 8001c2e:	4b36      	ldr	r3, [pc, #216]	@ (8001d08 <LCD_IO_Init+0xe0>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d164      	bne.n	8001d00 <LCD_IO_Init+0xd8>
  {
    Is_LCD_IO_Initialized = 1;
 8001c36:	4b34      	ldr	r3, [pc, #208]	@ (8001d08 <LCD_IO_Init+0xe0>)
 8001c38:	2201      	movs	r2, #1
 8001c3a:	701a      	strb	r2, [r3, #0]

    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	60bb      	str	r3, [r7, #8]
 8001c40:	4b32      	ldr	r3, [pc, #200]	@ (8001d0c <LCD_IO_Init+0xe4>)
 8001c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c44:	4a31      	ldr	r2, [pc, #196]	@ (8001d0c <LCD_IO_Init+0xe4>)
 8001c46:	f043 0308 	orr.w	r3, r3, #8
 8001c4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c4c:	4b2f      	ldr	r3, [pc, #188]	@ (8001d0c <LCD_IO_Init+0xe4>)
 8001c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c50:	f003 0308 	and.w	r3, r3, #8
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8001c58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c5c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001c66:	2302      	movs	r3, #2
 8001c68:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8001c6a:	f107 030c 	add.w	r3, r7, #12
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4827      	ldr	r0, [pc, #156]	@ (8001d10 <LCD_IO_Init+0xe8>)
 8001c72:	f001 fde5 	bl	8003840 <HAL_GPIO_Init>

    LCD_RDX_GPIO_CLK_ENABLE();
 8001c76:	2300      	movs	r3, #0
 8001c78:	607b      	str	r3, [r7, #4]
 8001c7a:	4b24      	ldr	r3, [pc, #144]	@ (8001d0c <LCD_IO_Init+0xe4>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c7e:	4a23      	ldr	r2, [pc, #140]	@ (8001d0c <LCD_IO_Init+0xe4>)
 8001c80:	f043 0308 	orr.w	r3, r3, #8
 8001c84:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c86:	4b21      	ldr	r3, [pc, #132]	@ (8001d0c <LCD_IO_Init+0xe4>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8a:	f003 0308 	and.w	r3, r3, #8
 8001c8e:	607b      	str	r3, [r7, #4]
 8001c90:	687b      	ldr	r3, [r7, #4]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8001c92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c96:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001ca0:	2302      	movs	r3, #2
 8001ca2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8001ca4:	f107 030c 	add.w	r3, r7, #12
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4819      	ldr	r0, [pc, #100]	@ (8001d10 <LCD_IO_Init+0xe8>)
 8001cac:	f001 fdc8 	bl	8003840 <HAL_GPIO_Init>

    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	603b      	str	r3, [r7, #0]
 8001cb4:	4b15      	ldr	r3, [pc, #84]	@ (8001d0c <LCD_IO_Init+0xe4>)
 8001cb6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cb8:	4a14      	ldr	r2, [pc, #80]	@ (8001d0c <LCD_IO_Init+0xe4>)
 8001cba:	f043 0304 	orr.w	r3, r3, #4
 8001cbe:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cc0:	4b12      	ldr	r3, [pc, #72]	@ (8001d0c <LCD_IO_Init+0xe4>)
 8001cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cc4:	f003 0304 	and.w	r3, r3, #4
 8001cc8:	603b      	str	r3, [r7, #0]
 8001cca:	683b      	ldr	r3, [r7, #0]

    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8001ccc:	2304      	movs	r3, #4
 8001cce:	60fb      	str	r3, [r7, #12]
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	613b      	str	r3, [r7, #16]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8001cd8:	2302      	movs	r3, #2
 8001cda:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8001cdc:	f107 030c 	add.w	r3, r7, #12
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	480c      	ldr	r0, [pc, #48]	@ (8001d14 <LCD_IO_Init+0xec>)
 8001ce4:	f001 fdac 	bl	8003840 <HAL_GPIO_Init>

    /* Set or Reset the control line */
    LCD_CS_LOW();
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2104      	movs	r1, #4
 8001cec:	4809      	ldr	r0, [pc, #36]	@ (8001d14 <LCD_IO_Init+0xec>)
 8001cee:	f002 f85f 	bl	8003db0 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	2104      	movs	r1, #4
 8001cf6:	4807      	ldr	r0, [pc, #28]	@ (8001d14 <LCD_IO_Init+0xec>)
 8001cf8:	f002 f85a 	bl	8003db0 <HAL_GPIO_WritePin>

    SPIx_Init();
 8001cfc:	f7ff fed6 	bl	8001aac <SPIx_Init>
  }
}
 8001d00:	bf00      	nop
 8001d02:	3720      	adds	r7, #32
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000754 	.word	0x20000754
 8001d0c:	40023800 	.word	0x40023800
 8001d10:	40020c00 	.word	0x40020c00
 8001d14:	40020800 	.word	0x40020800

08001d18 <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	80fb      	strh	r3, [r7, #6]
  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001d22:	2201      	movs	r2, #1
 8001d24:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d28:	480a      	ldr	r0, [pc, #40]	@ (8001d54 <LCD_IO_WriteData+0x3c>)
 8001d2a:	f002 f841 	bl	8003db0 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send data */
  LCD_CS_LOW();
 8001d2e:	2200      	movs	r2, #0
 8001d30:	2104      	movs	r1, #4
 8001d32:	4809      	ldr	r0, [pc, #36]	@ (8001d58 <LCD_IO_WriteData+0x40>)
 8001d34:	f002 f83c 	bl	8003db0 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff ff10 	bl	8001b60 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001d40:	2201      	movs	r2, #1
 8001d42:	2104      	movs	r1, #4
 8001d44:	4804      	ldr	r0, [pc, #16]	@ (8001d58 <LCD_IO_WriteData+0x40>)
 8001d46:	f002 f833 	bl	8003db0 <HAL_GPIO_WritePin>
}
 8001d4a:	bf00      	nop
 8001d4c:	3708      	adds	r7, #8
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	40020c00 	.word	0x40020c00
 8001d58:	40020800 	.word	0x40020800

08001d5c <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	4603      	mov	r3, r0
 8001d64:	71fb      	strb	r3, [r7, #7]
  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001d66:	2200      	movs	r2, #0
 8001d68:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d6c:	480a      	ldr	r0, [pc, #40]	@ (8001d98 <LCD_IO_WriteReg+0x3c>)
 8001d6e:	f002 f81f 	bl	8003db0 <HAL_GPIO_WritePin>

  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8001d72:	2200      	movs	r2, #0
 8001d74:	2104      	movs	r1, #4
 8001d76:	4809      	ldr	r0, [pc, #36]	@ (8001d9c <LCD_IO_WriteReg+0x40>)
 8001d78:	f002 f81a 	bl	8003db0 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8001d7c:	79fb      	ldrb	r3, [r7, #7]
 8001d7e:	b29b      	uxth	r3, r3
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff feed 	bl	8001b60 <SPIx_Write>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001d86:	2201      	movs	r2, #1
 8001d88:	2104      	movs	r1, #4
 8001d8a:	4804      	ldr	r0, [pc, #16]	@ (8001d9c <LCD_IO_WriteReg+0x40>)
 8001d8c:	f002 f810 	bl	8003db0 <HAL_GPIO_WritePin>
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40020c00 	.word	0x40020c00
 8001d9c:	40020800 	.word	0x40020800

08001da0 <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	4603      	mov	r3, r0
 8001da8:	460a      	mov	r2, r1
 8001daa:	80fb      	strh	r3, [r7, #6]
 8001dac:	4613      	mov	r3, r2
 8001dae:	717b      	strb	r3, [r7, #5]
  uint32_t readvalue = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	60fb      	str	r3, [r7, #12]

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8001db4:	2200      	movs	r2, #0
 8001db6:	2104      	movs	r1, #4
 8001db8:	4810      	ldr	r0, [pc, #64]	@ (8001dfc <LCD_IO_ReadData+0x5c>)
 8001dba:	f001 fff9 	bl	8003db0 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001dc4:	480e      	ldr	r0, [pc, #56]	@ (8001e00 <LCD_IO_ReadData+0x60>)
 8001dc6:	f001 fff3 	bl	8003db0 <HAL_GPIO_WritePin>

  SPIx_Write(RegValue);
 8001dca:	88fb      	ldrh	r3, [r7, #6]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f7ff fec7 	bl	8001b60 <SPIx_Write>

  readvalue = SPIx_Read(ReadSize);
 8001dd2:	797b      	ldrb	r3, [r7, #5]
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7ff fea3 	bl	8001b20 <SPIx_Read>
 8001dda:	60f8      	str	r0, [r7, #12]

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8001ddc:	2201      	movs	r2, #1
 8001dde:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001de2:	4807      	ldr	r0, [pc, #28]	@ (8001e00 <LCD_IO_ReadData+0x60>)
 8001de4:	f001 ffe4 	bl	8003db0 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8001de8:	2201      	movs	r2, #1
 8001dea:	2104      	movs	r1, #4
 8001dec:	4803      	ldr	r0, [pc, #12]	@ (8001dfc <LCD_IO_ReadData+0x5c>)
 8001dee:	f001 ffdf 	bl	8003db0 <HAL_GPIO_WritePin>

  return readvalue;
 8001df2:	68fb      	ldr	r3, [r7, #12]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40020800 	.word	0x40020800
 8001e00:	40020c00 	.word	0x40020c00

08001e04 <LCD_Delay>:
/**
  * @brief  Wait for loop in ms.
  * @param  Delay in ms.
  */
void LCD_Delay(uint32_t Delay)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8001e0c:	6878      	ldr	r0, [r7, #4]
 8001e0e:	f000 fe9b 	bl	8002b48 <HAL_Delay>
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}
	...

08001e1c <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
  /* PIN EXTC is not connected to VDD and then LCD_READ_ID4 is not accessible. */
  /* In this case, ReadID function is bypassed.*/
  /*if(ili9341_drv.ReadID() == ILI9341_ID)*/

  /* LTDC Configuration ----------------------------------------------------*/
  LtdcHandler.Instance = LTDC;
 8001e20:	4b2d      	ldr	r3, [pc, #180]	@ (8001ed8 <BSP_LCD_Init+0xbc>)
 8001e22:	4a2e      	ldr	r2, [pc, #184]	@ (8001edc <BSP_LCD_Init+0xc0>)
 8001e24:	601a      	str	r2, [r3, #0]
        ActiveH=320 (323-2-2+1)
        VFP=4 (327-320-2-2+1)
    */

  /* Configure horizontal synchronization width */
  LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 8001e26:	4b2c      	ldr	r3, [pc, #176]	@ (8001ed8 <BSP_LCD_Init+0xbc>)
 8001e28:	2209      	movs	r2, #9
 8001e2a:	615a      	str	r2, [r3, #20]
  /* Configure vertical synchronization height */
  LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8001e2c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed8 <BSP_LCD_Init+0xbc>)
 8001e2e:	2201      	movs	r2, #1
 8001e30:	619a      	str	r2, [r3, #24]
  /* Configure accumulated horizontal back porch */
  LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8001e32:	4b29      	ldr	r3, [pc, #164]	@ (8001ed8 <BSP_LCD_Init+0xbc>)
 8001e34:	221d      	movs	r2, #29
 8001e36:	61da      	str	r2, [r3, #28]
  /* Configure accumulated vertical back porch */
  LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8001e38:	4b27      	ldr	r3, [pc, #156]	@ (8001ed8 <BSP_LCD_Init+0xbc>)
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	621a      	str	r2, [r3, #32]
  /* Configure accumulated active width */
  LtdcHandler.Init.AccumulatedActiveW = 269;
 8001e3e:	4b26      	ldr	r3, [pc, #152]	@ (8001ed8 <BSP_LCD_Init+0xbc>)
 8001e40:	f240 120d 	movw	r2, #269	@ 0x10d
 8001e44:	625a      	str	r2, [r3, #36]	@ 0x24
  /* Configure accumulated active height */
  LtdcHandler.Init.AccumulatedActiveH = 323;
 8001e46:	4b24      	ldr	r3, [pc, #144]	@ (8001ed8 <BSP_LCD_Init+0xbc>)
 8001e48:	f240 1243 	movw	r2, #323	@ 0x143
 8001e4c:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Configure total width */
  LtdcHandler.Init.TotalWidth = 279;
 8001e4e:	4b22      	ldr	r3, [pc, #136]	@ (8001ed8 <BSP_LCD_Init+0xbc>)
 8001e50:	f240 1217 	movw	r2, #279	@ 0x117
 8001e54:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Configure total height */
  LtdcHandler.Init.TotalHeigh = 327;
 8001e56:	4b20      	ldr	r3, [pc, #128]	@ (8001ed8 <BSP_LCD_Init+0xbc>)
 8001e58:	f240 1247 	movw	r2, #327	@ 0x147
 8001e5c:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Configure R,G,B component values for LCD background color */
  LtdcHandler.Init.Backcolor.Red = 0;
 8001e5e:	4b1e      	ldr	r3, [pc, #120]	@ (8001ed8 <BSP_LCD_Init+0xbc>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  LtdcHandler.Init.Backcolor.Blue = 0;
 8001e66:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed8 <BSP_LCD_Init+0xbc>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  LtdcHandler.Init.Backcolor.Green = 0;
 8001e6e:	4b1a      	ldr	r3, [pc, #104]	@ (8001ed8 <BSP_LCD_Init+0xbc>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  /* LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/4 = 48 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_8 = 48/4 = 6Mhz */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001e76:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee0 <BSP_LCD_Init+0xc4>)
 8001e78:	2208      	movs	r2, #8
 8001e7a:	601a      	str	r2, [r3, #0]
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 8001e7c:	4b18      	ldr	r3, [pc, #96]	@ (8001ee0 <BSP_LCD_Init+0xc4>)
 8001e7e:	22c0      	movs	r2, #192	@ 0xc0
 8001e80:	611a      	str	r2, [r3, #16]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8001e82:	4b17      	ldr	r3, [pc, #92]	@ (8001ee0 <BSP_LCD_Init+0xc4>)
 8001e84:	2204      	movs	r2, #4
 8001e86:	619a      	str	r2, [r3, #24]
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001e88:	4b15      	ldr	r3, [pc, #84]	@ (8001ee0 <BSP_LCD_Init+0xc4>)
 8001e8a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e8e:	625a      	str	r2, [r3, #36]	@ 0x24
  HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8001e90:	4813      	ldr	r0, [pc, #76]	@ (8001ee0 <BSP_LCD_Init+0xc4>)
 8001e92:	f005 f871 	bl	8006f78 <HAL_RCCEx_PeriphCLKConfig>

  /* Polarity */
  LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001e96:	4b10      	ldr	r3, [pc, #64]	@ (8001ed8 <BSP_LCD_Init+0xbc>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	605a      	str	r2, [r3, #4]
  LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001e9c:	4b0e      	ldr	r3, [pc, #56]	@ (8001ed8 <BSP_LCD_Init+0xbc>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	609a      	str	r2, [r3, #8]
  LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001ea2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ed8 <BSP_LCD_Init+0xbc>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	60da      	str	r2, [r3, #12]
  LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001ea8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ed8 <BSP_LCD_Init+0xbc>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	611a      	str	r2, [r3, #16]

  BSP_LCD_MspInit();
 8001eae:	f000 fa51 	bl	8002354 <BSP_LCD_MspInit>
  HAL_LTDC_Init(&LtdcHandler);
 8001eb2:	4809      	ldr	r0, [pc, #36]	@ (8001ed8 <BSP_LCD_Init+0xbc>)
 8001eb4:	f003 ff86 	bl	8005dc4 <HAL_LTDC_Init>

  /* Select the device */
  LcdDrv = &ili9341_drv;
 8001eb8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ee4 <BSP_LCD_Init+0xc8>)
 8001eba:	4a0b      	ldr	r2, [pc, #44]	@ (8001ee8 <BSP_LCD_Init+0xcc>)
 8001ebc:	601a      	str	r2, [r3, #0]

  /* LCD Init */
  LcdDrv->Init();
 8001ebe:	4b09      	ldr	r3, [pc, #36]	@ (8001ee4 <BSP_LCD_Init+0xc8>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4798      	blx	r3

  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8001ec6:	f000 fc33 	bl	8002730 <BSP_SDRAM_Init>

  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 8001eca:	4808      	ldr	r0, [pc, #32]	@ (8001eec <BSP_LCD_Init+0xd0>)
 8001ecc:	f000 f8ee 	bl	80020ac <BSP_LCD_SetFont>

  return LCD_OK;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000758 	.word	0x20000758
 8001edc:	40016800 	.word	0x40016800
 8001ee0:	20000840 	.word	0x20000840
 8001ee4:	2000088c 	.word	0x2000088c
 8001ee8:	20000004 	.word	0x20000004
 8001eec:	20000040 	.word	0x20000040

08001ef0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval The used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelWidth();
 8001ef4:	4b03      	ldr	r3, [pc, #12]	@ (8001f04 <BSP_LCD_GetXSize+0x14>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001efa:	4798      	blx	r3
 8001efc:	4603      	mov	r3, r0
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	bd80      	pop	{r7, pc}
 8001f02:	bf00      	nop
 8001f04:	2000088c 	.word	0x2000088c

08001f08 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval The used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
  return LcdDrv->GetLcdPixelHeight();
 8001f0c:	4b03      	ldr	r3, [pc, #12]	@ (8001f1c <BSP_LCD_GetYSize+0x14>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f12:	4798      	blx	r3
 8001f14:	4603      	mov	r3, r0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	2000088c 	.word	0x2000088c

08001f20 <BSP_LCD_LayerDefaultInit>:
  * @brief  Initializes the LCD layers.
  * @param  LayerIndex: the layer foreground or background.
  * @param  FB_Address: the layer frame buffer.
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b090      	sub	sp, #64	@ 0x40
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	6039      	str	r1, [r7, #0]
 8001f2a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef   Layercfg;

  /* Layer Init */
  Layercfg.WindowX0 = 0;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	60fb      	str	r3, [r7, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8001f30:	f7ff ffde 	bl	8001ef0 <BSP_LCD_GetXSize>
 8001f34:	4603      	mov	r3, r0
 8001f36:	613b      	str	r3, [r7, #16]
  Layercfg.WindowY0 = 0;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	617b      	str	r3, [r7, #20]
  Layercfg.WindowY1 = BSP_LCD_GetYSize();
 8001f3c:	f7ff ffe4 	bl	8001f08 <BSP_LCD_GetYSize>
 8001f40:	4603      	mov	r3, r0
 8001f42:	61bb      	str	r3, [r7, #24]
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8001f44:	2300      	movs	r3, #0
 8001f46:	61fb      	str	r3, [r7, #28]
  Layercfg.FBStartAdress = FB_Address;
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	633b      	str	r3, [r7, #48]	@ 0x30
  Layercfg.Alpha = 255;
 8001f4c:	23ff      	movs	r3, #255	@ 0xff
 8001f4e:	623b      	str	r3, [r7, #32]
  Layercfg.Alpha0 = 0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	627b      	str	r3, [r7, #36]	@ 0x24
  Layercfg.Backcolor.Blue = 0;
 8001f54:	2300      	movs	r3, #0
 8001f56:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
  Layercfg.Backcolor.Green = 0;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
  Layercfg.Backcolor.Red = 0;
 8001f60:	2300      	movs	r3, #0
 8001f62:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001f66:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001f6c:	2307      	movs	r3, #7
 8001f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8001f70:	f7ff ffbe 	bl	8001ef0 <BSP_LCD_GetXSize>
 8001f74:	4603      	mov	r3, r0
 8001f76:	637b      	str	r3, [r7, #52]	@ 0x34
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8001f78:	f7ff ffc6 	bl	8001f08 <BSP_LCD_GetYSize>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	63bb      	str	r3, [r7, #56]	@ 0x38

  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex);
 8001f80:	88fa      	ldrh	r2, [r7, #6]
 8001f82:	f107 030c 	add.w	r3, r7, #12
 8001f86:	4619      	mov	r1, r3
 8001f88:	4814      	ldr	r0, [pc, #80]	@ (8001fdc <BSP_LCD_LayerDefaultInit+0xbc>)
 8001f8a:	f004 f8ad 	bl	80060e8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8001f8e:	88fa      	ldrh	r2, [r7, #6]
 8001f90:	4913      	ldr	r1, [pc, #76]	@ (8001fe0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001f92:	4613      	mov	r3, r2
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	4413      	add	r3, r2
 8001f98:	009b      	lsls	r3, r3, #2
 8001f9a:	440b      	add	r3, r1
 8001f9c:	3304      	adds	r3, #4
 8001f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8001fa2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8001fa4:	88fa      	ldrh	r2, [r7, #6]
 8001fa6:	490e      	ldr	r1, [pc, #56]	@ (8001fe0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001fa8:	4613      	mov	r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	4413      	add	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	440b      	add	r3, r1
 8001fb2:	3308      	adds	r3, #8
 8001fb4:	4a0b      	ldr	r2, [pc, #44]	@ (8001fe4 <BSP_LCD_LayerDefaultInit+0xc4>)
 8001fb6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK;
 8001fb8:	88fa      	ldrh	r2, [r7, #6]
 8001fba:	4909      	ldr	r1, [pc, #36]	@ (8001fe0 <BSP_LCD_LayerDefaultInit+0xc0>)
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	005b      	lsls	r3, r3, #1
 8001fc0:	4413      	add	r3, r2
 8001fc2:	009b      	lsls	r3, r3, #2
 8001fc4:	440b      	add	r3, r1
 8001fc6:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8001fca:	601a      	str	r2, [r3, #0]

  /* Dithering activation */
  HAL_LTDC_EnableDither(&LtdcHandler);
 8001fcc:	4803      	ldr	r0, [pc, #12]	@ (8001fdc <BSP_LCD_LayerDefaultInit+0xbc>)
 8001fce:	f004 f947 	bl	8006260 <HAL_LTDC_EnableDither>
}
 8001fd2:	bf00      	nop
 8001fd4:	3740      	adds	r7, #64	@ 0x40
 8001fd6:	46bd      	mov	sp, r7
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	20000758 	.word	0x20000758
 8001fe0:	20000874 	.word	0x20000874
 8001fe4:	20000040 	.word	0x20000040

08001fe8 <BSP_LCD_SelectLayer>:
/**
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: the Layer foreground or background.
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	b083      	sub	sp, #12
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8001ff0:	4a04      	ldr	r2, [pc, #16]	@ (8002004 <BSP_LCD_SelectLayer+0x1c>)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6013      	str	r3, [r2, #0]
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	20000870 	.word	0x20000870

08002008 <BSP_LCD_SetLayerVisible>:
  * @param  LayerIndex: the visible Layer.
  * @param  state: new state of the specified layer.
  *    This parameter can be: ENABLE or DISABLE.
  */
void BSP_LCD_SetLayerVisible(uint32_t LayerIndex, FunctionalState state)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	460b      	mov	r3, r1
 8002012:	70fb      	strb	r3, [r7, #3]
  if (state == ENABLE)
 8002014:	78fb      	ldrb	r3, [r7, #3]
 8002016:	2b01      	cmp	r3, #1
 8002018:	d112      	bne.n	8002040 <BSP_LCD_SetLayerVisible+0x38>
  {
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 800201a:	4b19      	ldr	r3, [pc, #100]	@ (8002080 <BSP_LCD_SetLayerVisible+0x78>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	461a      	mov	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	01db      	lsls	r3, r3, #7
 8002024:	4413      	add	r3, r2
 8002026:	3384      	adds	r3, #132	@ 0x84
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a15      	ldr	r2, [pc, #84]	@ (8002080 <BSP_LCD_SetLayerVisible+0x78>)
 800202c:	6812      	ldr	r2, [r2, #0]
 800202e:	4611      	mov	r1, r2
 8002030:	687a      	ldr	r2, [r7, #4]
 8002032:	01d2      	lsls	r2, r2, #7
 8002034:	440a      	add	r2, r1
 8002036:	3284      	adds	r2, #132	@ 0x84
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6013      	str	r3, [r2, #0]
 800203e:	e011      	b.n	8002064 <BSP_LCD_SetLayerVisible+0x5c>
  }
  else
  {
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 8002040:	4b0f      	ldr	r3, [pc, #60]	@ (8002080 <BSP_LCD_SetLayerVisible+0x78>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	461a      	mov	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	01db      	lsls	r3, r3, #7
 800204a:	4413      	add	r3, r2
 800204c:	3384      	adds	r3, #132	@ 0x84
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	4a0b      	ldr	r2, [pc, #44]	@ (8002080 <BSP_LCD_SetLayerVisible+0x78>)
 8002052:	6812      	ldr	r2, [r2, #0]
 8002054:	4611      	mov	r1, r2
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	01d2      	lsls	r2, r2, #7
 800205a:	440a      	add	r2, r1
 800205c:	3284      	adds	r2, #132	@ 0x84
 800205e:	f023 0301 	bic.w	r3, r3, #1
 8002062:	6013      	str	r3, [r2, #0]
  }
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 8002064:	4b06      	ldr	r3, [pc, #24]	@ (8002080 <BSP_LCD_SetLayerVisible+0x78>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800206a:	4b05      	ldr	r3, [pc, #20]	@ (8002080 <BSP_LCD_SetLayerVisible+0x78>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 0201 	orr.w	r2, r2, #1
 8002072:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8002074:	bf00      	nop
 8002076:	370c      	adds	r7, #12
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr
 8002080:	20000758 	.word	0x20000758

08002084 <BSP_LCD_SetColorKeying>:
  * @brief  Configures and sets the color Keying.
  * @param  LayerIndex: the Layer foreground or background
  * @param  RGBValue: the Color reference
  */
void BSP_LCD_SetColorKeying(uint32_t LayerIndex, uint32_t RGBValue)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b082      	sub	sp, #8
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  /* Configure and Enable the color Keying for LCD Layer */
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 800208e:	687a      	ldr	r2, [r7, #4]
 8002090:	6839      	ldr	r1, [r7, #0]
 8002092:	4805      	ldr	r0, [pc, #20]	@ (80020a8 <BSP_LCD_SetColorKeying+0x24>)
 8002094:	f004 f866 	bl	8006164 <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 8002098:	6879      	ldr	r1, [r7, #4]
 800209a:	4803      	ldr	r0, [pc, #12]	@ (80020a8 <BSP_LCD_SetColorKeying+0x24>)
 800209c:	f004 f8a6 	bl	80061ec <HAL_LTDC_EnableColorKeying>
}
 80020a0:	bf00      	nop
 80020a2:	3708      	adds	r7, #8
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	20000758 	.word	0x20000758

080020ac <BSP_LCD_SetFont>:
/**
  * @brief  Sets the Text Font.
  * @param  pFonts: the layer font to be used
  */
void BSP_LCD_SetFont(sFONT *pFonts)
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = pFonts;
 80020b4:	4b08      	ldr	r3, [pc, #32]	@ (80020d8 <BSP_LCD_SetFont+0x2c>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4908      	ldr	r1, [pc, #32]	@ (80020dc <BSP_LCD_SetFont+0x30>)
 80020ba:	4613      	mov	r3, r2
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	4413      	add	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	440b      	add	r3, r1
 80020c4:	3308      	adds	r3, #8
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	601a      	str	r2, [r3, #0]
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr
 80020d6:	bf00      	nop
 80020d8:	20000870 	.word	0x20000870
 80020dc:	20000874 	.word	0x20000874

080020e0 <BSP_LCD_Clear>:
/**
  * @brief  Clears the hole LCD.
  * @param  Color: the color of the background
  */
void BSP_LCD_Clear(uint32_t Color)
{
 80020e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020e2:	b085      	sub	sp, #20
 80020e4:	af02      	add	r7, sp, #8
 80020e6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(),
 80020e8:	4b0f      	ldr	r3, [pc, #60]	@ (8002128 <BSP_LCD_Clear+0x48>)
 80020ea:	681c      	ldr	r4, [r3, #0]
 80020ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002128 <BSP_LCD_Clear+0x48>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4a0e      	ldr	r2, [pc, #56]	@ (800212c <BSP_LCD_Clear+0x4c>)
 80020f2:	2134      	movs	r1, #52	@ 0x34
 80020f4:	fb01 f303 	mul.w	r3, r1, r3
 80020f8:	4413      	add	r3, r2
 80020fa:	335c      	adds	r3, #92	@ 0x5c
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	461e      	mov	r6, r3
 8002100:	f7ff fef6 	bl	8001ef0 <BSP_LCD_GetXSize>
 8002104:	4605      	mov	r5, r0
 8002106:	f7ff feff 	bl	8001f08 <BSP_LCD_GetYSize>
 800210a:	4602      	mov	r2, r0
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	9301      	str	r3, [sp, #4]
 8002110:	2300      	movs	r3, #0
 8002112:	9300      	str	r3, [sp, #0]
 8002114:	4613      	mov	r3, r2
 8002116:	462a      	mov	r2, r5
 8002118:	4631      	mov	r1, r6
 800211a:	4620      	mov	r0, r4
 800211c:	f000 fad0 	bl	80026c0 <FillBuffer>
             BSP_LCD_GetYSize(), 0, Color);
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002128:	20000870 	.word	0x20000870
 800212c:	20000758 	.word	0x20000758

08002130 <BSP_LCD_DisplayChar>:
  * @param  Xpos: start column address
  * @param  Ypos: the Line where to display the character shape
  * @param  Ascii: character ascii code, must be between 0x20 and 0x7E
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002130:	b590      	push	{r4, r7, lr}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	4603      	mov	r3, r0
 8002138:	80fb      	strh	r3, [r7, #6]
 800213a:	460b      	mov	r3, r1
 800213c:	80bb      	strh	r3, [r7, #4]
 800213e:	4613      	mov	r3, r2
 8002140:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8002142:	4b1b      	ldr	r3, [pc, #108]	@ (80021b0 <BSP_LCD_DisplayChar+0x80>)
 8002144:	681a      	ldr	r2, [r3, #0]
 8002146:	491b      	ldr	r1, [pc, #108]	@ (80021b4 <BSP_LCD_DisplayChar+0x84>)
 8002148:	4613      	mov	r3, r2
 800214a:	005b      	lsls	r3, r3, #1
 800214c:	4413      	add	r3, r2
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	440b      	add	r3, r1
 8002152:	3308      	adds	r3, #8
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	6819      	ldr	r1, [r3, #0]
 8002158:	78fb      	ldrb	r3, [r7, #3]
 800215a:	f1a3 0020 	sub.w	r0, r3, #32
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800215e:	4b14      	ldr	r3, [pc, #80]	@ (80021b0 <BSP_LCD_DisplayChar+0x80>)
 8002160:	681a      	ldr	r2, [r3, #0]
 8002162:	4c14      	ldr	r4, [pc, #80]	@ (80021b4 <BSP_LCD_DisplayChar+0x84>)
 8002164:	4613      	mov	r3, r2
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	4413      	add	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4423      	add	r3, r4
 800216e:	3308      	adds	r3, #8
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 8002174:	fb03 f000 	mul.w	r0, r3, r0
                                                           DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002178:	4b0d      	ldr	r3, [pc, #52]	@ (80021b0 <BSP_LCD_DisplayChar+0x80>)
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4c0d      	ldr	r4, [pc, #52]	@ (80021b4 <BSP_LCD_DisplayChar+0x84>)
 800217e:	4613      	mov	r3, r2
 8002180:	005b      	lsls	r3, r3, #1
 8002182:	4413      	add	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4423      	add	r3, r4
 8002188:	3308      	adds	r3, #8
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	889b      	ldrh	r3, [r3, #4]
 800218e:	3307      	adds	r3, #7
 8002190:	2b00      	cmp	r3, #0
 8002192:	da00      	bge.n	8002196 <BSP_LCD_DisplayChar+0x66>
 8002194:	3307      	adds	r3, #7
 8002196:	10db      	asrs	r3, r3, #3
 8002198:	fb00 f303 	mul.w	r3, r0, r3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii - ' ') *\
 800219c:	18ca      	adds	r2, r1, r3
 800219e:	88b9      	ldrh	r1, [r7, #4]
 80021a0:	88fb      	ldrh	r3, [r7, #6]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 f9d2 	bl	800254c <DrawChar>
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd90      	pop	{r4, r7, pc}
 80021b0:	20000870 	.word	0x20000870
 80021b4:	20000874 	.word	0x20000874

080021b8 <BSP_LCD_DisplayStringAt>:
  *                @arg CENTER_MODE
  *                @arg RIGHT_MODE
  *                @arg LEFT_MODE
  */
void BSP_LCD_DisplayStringAt(uint16_t X, uint16_t Y, uint8_t *pText, Text_AlignModeTypdef mode)
{
 80021b8:	b5b0      	push	{r4, r5, r7, lr}
 80021ba:	b088      	sub	sp, #32
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60ba      	str	r2, [r7, #8]
 80021c0:	461a      	mov	r2, r3
 80021c2:	4603      	mov	r3, r0
 80021c4:	81fb      	strh	r3, [r7, #14]
 80021c6:	460b      	mov	r3, r1
 80021c8:	81bb      	strh	r3, [r7, #12]
 80021ca:	4613      	mov	r3, r2
 80021cc:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80021ce:	2301      	movs	r3, #1
 80021d0:	83fb      	strh	r3, [r7, #30]
 80021d2:	2300      	movs	r3, #0
 80021d4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0;
 80021d6:	2300      	movs	r3, #0
 80021d8:	61bb      	str	r3, [r7, #24]
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = pText;
 80021de:	68bb      	ldr	r3, [r7, #8]
 80021e0:	617b      	str	r3, [r7, #20]

  /* Get the text size */
  while (*ptr++) { size ++ ; }
 80021e2:	e002      	b.n	80021ea <BSP_LCD_DisplayStringAt+0x32>
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	3301      	adds	r3, #1
 80021e8:	61bb      	str	r3, [r7, #24]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	1c5a      	adds	r2, r3, #1
 80021ee:	617a      	str	r2, [r7, #20]
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f6      	bne.n	80021e4 <BSP_LCD_DisplayStringAt+0x2c>

  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize() / DrawProp[ActiveLayer].pFont->Width);
 80021f6:	f7ff fe7b 	bl	8001ef0 <BSP_LCD_GetXSize>
 80021fa:	4601      	mov	r1, r0
 80021fc:	4b4b      	ldr	r3, [pc, #300]	@ (800232c <BSP_LCD_DisplayStringAt+0x174>)
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	484b      	ldr	r0, [pc, #300]	@ (8002330 <BSP_LCD_DisplayStringAt+0x178>)
 8002202:	4613      	mov	r3, r2
 8002204:	005b      	lsls	r3, r3, #1
 8002206:	4413      	add	r3, r2
 8002208:	009b      	lsls	r3, r3, #2
 800220a:	4403      	add	r3, r0
 800220c:	3308      	adds	r3, #8
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	889b      	ldrh	r3, [r3, #4]
 8002212:	fbb1 f3f3 	udiv	r3, r1, r3
 8002216:	613b      	str	r3, [r7, #16]

  switch (mode)
 8002218:	79fb      	ldrb	r3, [r7, #7]
 800221a:	2b03      	cmp	r3, #3
 800221c:	d01c      	beq.n	8002258 <BSP_LCD_DisplayStringAt+0xa0>
 800221e:	2b03      	cmp	r3, #3
 8002220:	dc33      	bgt.n	800228a <BSP_LCD_DisplayStringAt+0xd2>
 8002222:	2b01      	cmp	r3, #1
 8002224:	d002      	beq.n	800222c <BSP_LCD_DisplayStringAt+0x74>
 8002226:	2b02      	cmp	r3, #2
 8002228:	d019      	beq.n	800225e <BSP_LCD_DisplayStringAt+0xa6>
 800222a:	e02e      	b.n	800228a <BSP_LCD_DisplayStringAt+0xd2>
  {
    case CENTER_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width) / 2;
 800222c:	693a      	ldr	r2, [r7, #16]
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	1ad1      	subs	r1, r2, r3
 8002232:	4b3e      	ldr	r3, [pc, #248]	@ (800232c <BSP_LCD_DisplayStringAt+0x174>)
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	483e      	ldr	r0, [pc, #248]	@ (8002330 <BSP_LCD_DisplayStringAt+0x178>)
 8002238:	4613      	mov	r3, r2
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	4413      	add	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	4403      	add	r3, r0
 8002242:	3308      	adds	r3, #8
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	889b      	ldrh	r3, [r3, #4]
 8002248:	fb01 f303 	mul.w	r3, r1, r3
 800224c:	085b      	lsrs	r3, r3, #1
 800224e:	b29a      	uxth	r2, r3
 8002250:	89fb      	ldrh	r3, [r7, #14]
 8002252:	4413      	add	r3, r2
 8002254:	83fb      	strh	r3, [r7, #30]
      break;
 8002256:	e01b      	b.n	8002290 <BSP_LCD_DisplayStringAt+0xd8>
    }
    case LEFT_MODE:
    {
      refcolumn = X;
 8002258:	89fb      	ldrh	r3, [r7, #14]
 800225a:	83fb      	strh	r3, [r7, #30]
      break;
 800225c:	e018      	b.n	8002290 <BSP_LCD_DisplayStringAt+0xd8>
    }
    case RIGHT_MODE:
    {
      refcolumn = X + ((xsize - size) * DrawProp[ActiveLayer].pFont->Width);
 800225e:	693a      	ldr	r2, [r7, #16]
 8002260:	69bb      	ldr	r3, [r7, #24]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	b299      	uxth	r1, r3
 8002266:	4b31      	ldr	r3, [pc, #196]	@ (800232c <BSP_LCD_DisplayStringAt+0x174>)
 8002268:	681a      	ldr	r2, [r3, #0]
 800226a:	4831      	ldr	r0, [pc, #196]	@ (8002330 <BSP_LCD_DisplayStringAt+0x178>)
 800226c:	4613      	mov	r3, r2
 800226e:	005b      	lsls	r3, r3, #1
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	4403      	add	r3, r0
 8002276:	3308      	adds	r3, #8
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	889b      	ldrh	r3, [r3, #4]
 800227c:	fb11 f303 	smulbb	r3, r1, r3
 8002280:	b29a      	uxth	r2, r3
 8002282:	89fb      	ldrh	r3, [r7, #14]
 8002284:	4413      	add	r3, r2
 8002286:	83fb      	strh	r3, [r7, #30]
      break;
 8002288:	e002      	b.n	8002290 <BSP_LCD_DisplayStringAt+0xd8>
    }
    default:
    {
      refcolumn = X;
 800228a:	89fb      	ldrh	r3, [r7, #14]
 800228c:	83fb      	strh	r3, [r7, #30]
      break;
 800228e:	bf00      	nop
    }
  }

  /* Send the string character by character on LCD */
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8002290:	e01a      	b.n	80022c8 <BSP_LCD_DisplayStringAt+0x110>
                          DrawProp[ActiveLayer].pFont->Width))
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	781a      	ldrb	r2, [r3, #0]
 8002296:	89b9      	ldrh	r1, [r7, #12]
 8002298:	8bfb      	ldrh	r3, [r7, #30]
 800229a:	4618      	mov	r0, r3
 800229c:	f7ff ff48 	bl	8002130 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 80022a0:	4b22      	ldr	r3, [pc, #136]	@ (800232c <BSP_LCD_DisplayStringAt+0x174>)
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	4922      	ldr	r1, [pc, #136]	@ (8002330 <BSP_LCD_DisplayStringAt+0x178>)
 80022a6:	4613      	mov	r3, r2
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	4413      	add	r3, r2
 80022ac:	009b      	lsls	r3, r3, #2
 80022ae:	440b      	add	r3, r1
 80022b0:	3308      	adds	r3, #8
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	889a      	ldrh	r2, [r3, #4]
 80022b6:	8bfb      	ldrh	r3, [r7, #30]
 80022b8:	4413      	add	r3, r2
 80022ba:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    pText++;
 80022bc:	68bb      	ldr	r3, [r7, #8]
 80022be:	3301      	adds	r3, #1
 80022c0:	60bb      	str	r3, [r7, #8]
    i++;
 80022c2:	8bbb      	ldrh	r3, [r7, #28]
 80022c4:	3301      	adds	r3, #1
 80022c6:	83bb      	strh	r3, [r7, #28]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	bf14      	ite	ne
 80022d0:	2301      	movne	r3, #1
 80022d2:	2300      	moveq	r3, #0
 80022d4:	b2dc      	uxtb	r4, r3
 80022d6:	f7ff fe0b 	bl	8001ef0 <BSP_LCD_GetXSize>
 80022da:	8bb9      	ldrh	r1, [r7, #28]
 80022dc:	4b13      	ldr	r3, [pc, #76]	@ (800232c <BSP_LCD_DisplayStringAt+0x174>)
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	4d13      	ldr	r5, [pc, #76]	@ (8002330 <BSP_LCD_DisplayStringAt+0x178>)
 80022e2:	4613      	mov	r3, r2
 80022e4:	005b      	lsls	r3, r3, #1
 80022e6:	4413      	add	r3, r2
 80022e8:	009b      	lsls	r3, r3, #2
 80022ea:	442b      	add	r3, r5
 80022ec:	3308      	adds	r3, #8
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	889b      	ldrh	r3, [r3, #4]
 80022f2:	fb01 f303 	mul.w	r3, r1, r3
 80022f6:	1ac3      	subs	r3, r0, r3
 80022f8:	b299      	uxth	r1, r3
                          DrawProp[ActiveLayer].pFont->Width))
 80022fa:	4b0c      	ldr	r3, [pc, #48]	@ (800232c <BSP_LCD_DisplayStringAt+0x174>)
 80022fc:	681a      	ldr	r2, [r3, #0]
 80022fe:	480c      	ldr	r0, [pc, #48]	@ (8002330 <BSP_LCD_DisplayStringAt+0x178>)
 8002300:	4613      	mov	r3, r2
 8002302:	005b      	lsls	r3, r3, #1
 8002304:	4413      	add	r3, r2
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4403      	add	r3, r0
 800230a:	3308      	adds	r3, #8
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	889b      	ldrh	r3, [r3, #4]
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i * DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >=
 8002310:	4299      	cmp	r1, r3
 8002312:	bf2c      	ite	cs
 8002314:	2301      	movcs	r3, #1
 8002316:	2300      	movcc	r3, #0
 8002318:	b2db      	uxtb	r3, r3
 800231a:	4023      	ands	r3, r4
 800231c:	b2db      	uxtb	r3, r3
 800231e:	2b00      	cmp	r3, #0
 8002320:	d1b7      	bne.n	8002292 <BSP_LCD_DisplayStringAt+0xda>
  }
}
 8002322:	bf00      	nop
 8002324:	bf00      	nop
 8002326:	3720      	adds	r7, #32
 8002328:	46bd      	mov	sp, r7
 800232a:	bdb0      	pop	{r4, r5, r7, pc}
 800232c:	20000870 	.word	0x20000870
 8002330:	20000874 	.word	0x20000874

08002334 <BSP_LCD_DisplayOn>:

/**
  * @brief  Enables the Display.
  */
void BSP_LCD_DisplayOn(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  if (LcdDrv->DisplayOn != NULL)
 8002338:	4b05      	ldr	r3, [pc, #20]	@ (8002350 <BSP_LCD_DisplayOn+0x1c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d003      	beq.n	800234a <BSP_LCD_DisplayOn+0x16>
  {
    LcdDrv->DisplayOn();
 8002342:	4b03      	ldr	r3, [pc, #12]	@ (8002350 <BSP_LCD_DisplayOn+0x1c>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	4798      	blx	r3
  }
}
 800234a:	bf00      	nop
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	2000088c 	.word	0x2000088c

08002354 <BSP_LCD_MspInit>:

/**
  * @brief  Initializes the LTDC MSP.
  */
__weak void BSP_LCD_MspInit(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b08e      	sub	sp, #56	@ 0x38
 8002358:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStructure;

  /* Enable the LTDC and DMA2D Clock */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	623b      	str	r3, [r7, #32]
 800235e:	4b61      	ldr	r3, [pc, #388]	@ (80024e4 <BSP_LCD_MspInit+0x190>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002362:	4a60      	ldr	r2, [pc, #384]	@ (80024e4 <BSP_LCD_MspInit+0x190>)
 8002364:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002368:	6453      	str	r3, [r2, #68]	@ 0x44
 800236a:	4b5e      	ldr	r3, [pc, #376]	@ (80024e4 <BSP_LCD_MspInit+0x190>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002372:	623b      	str	r3, [r7, #32]
 8002374:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8002376:	2300      	movs	r3, #0
 8002378:	61fb      	str	r3, [r7, #28]
 800237a:	4b5a      	ldr	r3, [pc, #360]	@ (80024e4 <BSP_LCD_MspInit+0x190>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237e:	4a59      	ldr	r2, [pc, #356]	@ (80024e4 <BSP_LCD_MspInit+0x190>)
 8002380:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002384:	6313      	str	r3, [r2, #48]	@ 0x30
 8002386:	4b57      	ldr	r3, [pc, #348]	@ (80024e4 <BSP_LCD_MspInit+0x190>)
 8002388:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800238e:	61fb      	str	r3, [r7, #28]
 8002390:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002392:	2300      	movs	r3, #0
 8002394:	61bb      	str	r3, [r7, #24]
 8002396:	4b53      	ldr	r3, [pc, #332]	@ (80024e4 <BSP_LCD_MspInit+0x190>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800239a:	4a52      	ldr	r2, [pc, #328]	@ (80024e4 <BSP_LCD_MspInit+0x190>)
 800239c:	f043 0301 	orr.w	r3, r3, #1
 80023a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80023a2:	4b50      	ldr	r3, [pc, #320]	@ (80024e4 <BSP_LCD_MspInit+0x190>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	61bb      	str	r3, [r7, #24]
 80023ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	4b4c      	ldr	r3, [pc, #304]	@ (80024e4 <BSP_LCD_MspInit+0x190>)
 80023b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023b6:	4a4b      	ldr	r2, [pc, #300]	@ (80024e4 <BSP_LCD_MspInit+0x190>)
 80023b8:	f043 0302 	orr.w	r3, r3, #2
 80023bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80023be:	4b49      	ldr	r3, [pc, #292]	@ (80024e4 <BSP_LCD_MspInit+0x190>)
 80023c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c2:	f003 0302 	and.w	r3, r3, #2
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	613b      	str	r3, [r7, #16]
 80023ce:	4b45      	ldr	r3, [pc, #276]	@ (80024e4 <BSP_LCD_MspInit+0x190>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023d2:	4a44      	ldr	r2, [pc, #272]	@ (80024e4 <BSP_LCD_MspInit+0x190>)
 80023d4:	f043 0304 	orr.w	r3, r3, #4
 80023d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80023da:	4b42      	ldr	r3, [pc, #264]	@ (80024e4 <BSP_LCD_MspInit+0x190>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023de:	f003 0304 	and.w	r3, r3, #4
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	60fb      	str	r3, [r7, #12]
 80023ea:	4b3e      	ldr	r3, [pc, #248]	@ (80024e4 <BSP_LCD_MspInit+0x190>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023ee:	4a3d      	ldr	r2, [pc, #244]	@ (80024e4 <BSP_LCD_MspInit+0x190>)
 80023f0:	f043 0308 	orr.w	r3, r3, #8
 80023f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80023f6:	4b3b      	ldr	r3, [pc, #236]	@ (80024e4 <BSP_LCD_MspInit+0x190>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fa:	f003 0308 	and.w	r3, r3, #8
 80023fe:	60fb      	str	r3, [r7, #12]
 8002400:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002402:	2300      	movs	r3, #0
 8002404:	60bb      	str	r3, [r7, #8]
 8002406:	4b37      	ldr	r3, [pc, #220]	@ (80024e4 <BSP_LCD_MspInit+0x190>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240a:	4a36      	ldr	r2, [pc, #216]	@ (80024e4 <BSP_LCD_MspInit+0x190>)
 800240c:	f043 0320 	orr.w	r3, r3, #32
 8002410:	6313      	str	r3, [r2, #48]	@ 0x30
 8002412:	4b34      	ldr	r3, [pc, #208]	@ (80024e4 <BSP_LCD_MspInit+0x190>)
 8002414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002416:	f003 0320 	and.w	r3, r3, #32
 800241a:	60bb      	str	r3, [r7, #8]
 800241c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800241e:	2300      	movs	r3, #0
 8002420:	607b      	str	r3, [r7, #4]
 8002422:	4b30      	ldr	r3, [pc, #192]	@ (80024e4 <BSP_LCD_MspInit+0x190>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002426:	4a2f      	ldr	r2, [pc, #188]	@ (80024e4 <BSP_LCD_MspInit+0x190>)
 8002428:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800242c:	6313      	str	r3, [r2, #48]	@ 0x30
 800242e:	4b2d      	ldr	r3, [pc, #180]	@ (80024e4 <BSP_LCD_MspInit+0x190>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002436:	607b      	str	r3, [r7, #4]
 8002438:	687b      	ldr	r3, [r7, #4]
            |  LCD_TFT CLK   <-> PG.07  | LCD_TFT DE   <->  PF.10 |
             -----------------------------------------------------
  */

  /* GPIOA configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800243a:	f641 0358 	movw	r3, #6232	@ 0x1858
 800243e:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11 | GPIO_PIN_12;
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8002440:	2302      	movs	r3, #2
 8002442:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8002444:	2300      	movs	r3, #0
 8002446:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8002448:	2302      	movs	r3, #2
 800244a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStructure.Alternate = GPIO_AF14_LTDC;
 800244c:	230e      	movs	r3, #14
 800244e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8002450:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002454:	4619      	mov	r1, r3
 8002456:	4824      	ldr	r0, [pc, #144]	@ (80024e8 <BSP_LCD_MspInit+0x194>)
 8002458:	f001 f9f2 	bl	8003840 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800245c:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8002460:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8002462:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002466:	4619      	mov	r1, r3
 8002468:	4820      	ldr	r0, [pc, #128]	@ (80024ec <BSP_LCD_MspInit+0x198>)
 800246a:	f001 f9e9 	bl	8003840 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 800246e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8002472:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8002474:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002478:	4619      	mov	r1, r3
 800247a:	481d      	ldr	r0, [pc, #116]	@ (80024f0 <BSP_LCD_MspInit+0x19c>)
 800247c:	f001 f9e0 	bl	8003840 <HAL_GPIO_Init>

  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8002480:	2348      	movs	r3, #72	@ 0x48
 8002482:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8002484:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002488:	4619      	mov	r1, r3
 800248a:	481a      	ldr	r0, [pc, #104]	@ (80024f4 <BSP_LCD_MspInit+0x1a0>)
 800248c:	f001 f9d8 	bl	8003840 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 8002490:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002494:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 8002496:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800249a:	4619      	mov	r1, r3
 800249c:	4816      	ldr	r0, [pc, #88]	@ (80024f8 <BSP_LCD_MspInit+0x1a4>)
 800249e:	f001 f9cf 	bl	8003840 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80024a2:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80024a6:	627b      	str	r3, [r7, #36]	@ 0x24
                           GPIO_PIN_11;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80024a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024ac:	4619      	mov	r1, r3
 80024ae:	4813      	ldr	r0, [pc, #76]	@ (80024fc <BSP_LCD_MspInit+0x1a8>)
 80024b0:	f001 f9c6 	bl	8003840 <HAL_GPIO_Init>

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80024b4:	2303      	movs	r3, #3
 80024b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStructure.Alternate = GPIO_AF9_LTDC;
 80024b8:	2309      	movs	r3, #9
 80024ba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80024bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024c0:	4619      	mov	r1, r3
 80024c2:	480a      	ldr	r0, [pc, #40]	@ (80024ec <BSP_LCD_MspInit+0x198>)
 80024c4:	f001 f9bc 	bl	8003840 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80024c8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80024cc:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80024ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024d2:	4619      	mov	r1, r3
 80024d4:	4809      	ldr	r0, [pc, #36]	@ (80024fc <BSP_LCD_MspInit+0x1a8>)
 80024d6:	f001 f9b3 	bl	8003840 <HAL_GPIO_Init>
}
 80024da:	bf00      	nop
 80024dc:	3738      	adds	r7, #56	@ 0x38
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40023800 	.word	0x40023800
 80024e8:	40020000 	.word	0x40020000
 80024ec:	40020400 	.word	0x40020400
 80024f0:	40020800 	.word	0x40020800
 80024f4:	40020c00 	.word	0x40020c00
 80024f8:	40021400 	.word	0x40021400
 80024fc:	40021800 	.word	0x40021800

08002500 <BSP_LCD_DrawPixel>:
  * @param  Xpos: the X position
  * @param  Ypos: the Y position
  * @param  RGB_Code: the pixel color in ARGB mode (8-8-8-8)
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002500:	b5b0      	push	{r4, r5, r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	4603      	mov	r3, r0
 8002508:	603a      	str	r2, [r7, #0]
 800250a:	80fb      	strh	r3, [r7, #6]
 800250c:	460b      	mov	r3, r1
 800250e:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  *(__IO uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4 * (Ypos * BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002510:	4b0c      	ldr	r3, [pc, #48]	@ (8002544 <BSP_LCD_DrawPixel+0x44>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a0c      	ldr	r2, [pc, #48]	@ (8002548 <BSP_LCD_DrawPixel+0x48>)
 8002516:	2134      	movs	r1, #52	@ 0x34
 8002518:	fb01 f303 	mul.w	r3, r1, r3
 800251c:	4413      	add	r3, r2
 800251e:	335c      	adds	r3, #92	@ 0x5c
 8002520:	681c      	ldr	r4, [r3, #0]
 8002522:	88bd      	ldrh	r5, [r7, #4]
 8002524:	f7ff fce4 	bl	8001ef0 <BSP_LCD_GetXSize>
 8002528:	4603      	mov	r3, r0
 800252a:	fb03 f205 	mul.w	r2, r3, r5
 800252e:	88fb      	ldrh	r3, [r7, #6]
 8002530:	4413      	add	r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	4423      	add	r3, r4
 8002536:	461a      	mov	r2, r3
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	6013      	str	r3, [r2, #0]
}
 800253c:	bf00      	nop
 800253e:	3708      	adds	r7, #8
 8002540:	46bd      	mov	sp, r7
 8002542:	bdb0      	pop	{r4, r5, r7, pc}
 8002544:	20000870 	.word	0x20000870
 8002548:	20000758 	.word	0x20000758

0800254c <DrawChar>:
  * @param  Xpos: the Line where to display the character shape
  * @param  Ypos: start column address
  * @param  c: pointer to the character data
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b088      	sub	sp, #32
 8002550:	af00      	add	r7, sp, #0
 8002552:	4603      	mov	r3, r0
 8002554:	603a      	str	r2, [r7, #0]
 8002556:	80fb      	strh	r3, [r7, #6]
 8002558:	460b      	mov	r3, r1
 800255a:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 800255c:	2300      	movs	r3, #0
 800255e:	61fb      	str	r3, [r7, #28]
 8002560:	2300      	movs	r3, #0
 8002562:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t offset;
  uint8_t *pchar;
  uint32_t line = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	617b      	str	r3, [r7, #20]

  height = DrawProp[ActiveLayer].pFont->Height;
 8002568:	4b53      	ldr	r3, [pc, #332]	@ (80026b8 <DrawChar+0x16c>)
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	4953      	ldr	r1, [pc, #332]	@ (80026bc <DrawChar+0x170>)
 800256e:	4613      	mov	r3, r2
 8002570:	005b      	lsls	r3, r3, #1
 8002572:	4413      	add	r3, r2
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	440b      	add	r3, r1
 8002578:	3308      	adds	r3, #8
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	88db      	ldrh	r3, [r3, #6]
 800257e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8002580:	4b4d      	ldr	r3, [pc, #308]	@ (80026b8 <DrawChar+0x16c>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	494d      	ldr	r1, [pc, #308]	@ (80026bc <DrawChar+0x170>)
 8002586:	4613      	mov	r3, r2
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	4413      	add	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	440b      	add	r3, r1
 8002590:	3308      	adds	r3, #8
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	889b      	ldrh	r3, [r3, #4]
 8002596:	823b      	strh	r3, [r7, #16]

  offset = 8 * ((width + 7) / 8) -  width ;
 8002598:	8a3b      	ldrh	r3, [r7, #16]
 800259a:	3307      	adds	r3, #7
 800259c:	2b00      	cmp	r3, #0
 800259e:	da00      	bge.n	80025a2 <DrawChar+0x56>
 80025a0:	3307      	adds	r3, #7
 80025a2:	10db      	asrs	r3, r3, #3
 80025a4:	b2db      	uxtb	r3, r3
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	b2da      	uxtb	r2, r3
 80025aa:	8a3b      	ldrh	r3, [r7, #16]
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	1ad3      	subs	r3, r2, r3
 80025b0:	73fb      	strb	r3, [r7, #15]

  for (i = 0; i < height; i++)
 80025b2:	2300      	movs	r3, #0
 80025b4:	61fb      	str	r3, [r7, #28]
 80025b6:	e076      	b.n	80026a6 <DrawChar+0x15a>
  {
    pchar = ((uint8_t *)c + (width + 7) / 8 * i);
 80025b8:	8a3b      	ldrh	r3, [r7, #16]
 80025ba:	3307      	adds	r3, #7
 80025bc:	2b00      	cmp	r3, #0
 80025be:	da00      	bge.n	80025c2 <DrawChar+0x76>
 80025c0:	3307      	adds	r3, #7
 80025c2:	10db      	asrs	r3, r3, #3
 80025c4:	461a      	mov	r2, r3
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	fb02 f303 	mul.w	r3, r2, r3
 80025cc:	683a      	ldr	r2, [r7, #0]
 80025ce:	4413      	add	r3, r2
 80025d0:	60bb      	str	r3, [r7, #8]

    switch (((width + 7) / 8))
 80025d2:	8a3b      	ldrh	r3, [r7, #16]
 80025d4:	3307      	adds	r3, #7
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	da00      	bge.n	80025dc <DrawChar+0x90>
 80025da:	3307      	adds	r3, #7
 80025dc:	10db      	asrs	r3, r3, #3
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d002      	beq.n	80025e8 <DrawChar+0x9c>
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d004      	beq.n	80025f0 <DrawChar+0xa4>
 80025e6:	e00c      	b.n	8002602 <DrawChar+0xb6>
    {
      case 1:
        line =  pchar[0];
 80025e8:	68bb      	ldr	r3, [r7, #8]
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	617b      	str	r3, [r7, #20]
        break;
 80025ee:	e016      	b.n	800261e <DrawChar+0xd2>

      case 2:
        line = (pchar[0] << 8) | pchar[1];
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	021b      	lsls	r3, r3, #8
 80025f6:	68ba      	ldr	r2, [r7, #8]
 80025f8:	3201      	adds	r2, #1
 80025fa:	7812      	ldrb	r2, [r2, #0]
 80025fc:	4313      	orrs	r3, r2
 80025fe:	617b      	str	r3, [r7, #20]
        break;
 8002600:	e00d      	b.n	800261e <DrawChar+0xd2>

      case 3:
      default:
        line = (pchar[0] << 16) | (pchar[1] << 8) | pchar[2];
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	781b      	ldrb	r3, [r3, #0]
 8002606:	041a      	lsls	r2, r3, #16
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	3301      	adds	r3, #1
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	021b      	lsls	r3, r3, #8
 8002610:	4313      	orrs	r3, r2
 8002612:	68ba      	ldr	r2, [r7, #8]
 8002614:	3202      	adds	r2, #2
 8002616:	7812      	ldrb	r2, [r2, #0]
 8002618:	4313      	orrs	r3, r2
 800261a:	617b      	str	r3, [r7, #20]
        break;
 800261c:	bf00      	nop
    }

    for (j = 0; j < width; j++)
 800261e:	2300      	movs	r3, #0
 8002620:	61bb      	str	r3, [r7, #24]
 8002622:	e036      	b.n	8002692 <DrawChar+0x146>
    {
      if (line & (1 << (width - j + offset - 1)))
 8002624:	8a3a      	ldrh	r2, [r7, #16]
 8002626:	69bb      	ldr	r3, [r7, #24]
 8002628:	1ad2      	subs	r2, r2, r3
 800262a:	7bfb      	ldrb	r3, [r7, #15]
 800262c:	4413      	add	r3, r2
 800262e:	3b01      	subs	r3, #1
 8002630:	2201      	movs	r2, #1
 8002632:	fa02 f303 	lsl.w	r3, r2, r3
 8002636:	461a      	mov	r2, r3
 8002638:	697b      	ldr	r3, [r7, #20]
 800263a:	4013      	ands	r3, r2
 800263c:	2b00      	cmp	r3, #0
 800263e:	d012      	beq.n	8002666 <DrawChar+0x11a>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8002640:	69bb      	ldr	r3, [r7, #24]
 8002642:	b29a      	uxth	r2, r3
 8002644:	88fb      	ldrh	r3, [r7, #6]
 8002646:	4413      	add	r3, r2
 8002648:	b298      	uxth	r0, r3
 800264a:	4b1b      	ldr	r3, [pc, #108]	@ (80026b8 <DrawChar+0x16c>)
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	491b      	ldr	r1, [pc, #108]	@ (80026bc <DrawChar+0x170>)
 8002650:	4613      	mov	r3, r2
 8002652:	005b      	lsls	r3, r3, #1
 8002654:	4413      	add	r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	681a      	ldr	r2, [r3, #0]
 800265c:	88bb      	ldrh	r3, [r7, #4]
 800265e:	4619      	mov	r1, r3
 8002660:	f7ff ff4e 	bl	8002500 <BSP_LCD_DrawPixel>
 8002664:	e012      	b.n	800268c <DrawChar+0x140>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8002666:	69bb      	ldr	r3, [r7, #24]
 8002668:	b29a      	uxth	r2, r3
 800266a:	88fb      	ldrh	r3, [r7, #6]
 800266c:	4413      	add	r3, r2
 800266e:	b298      	uxth	r0, r3
 8002670:	4b11      	ldr	r3, [pc, #68]	@ (80026b8 <DrawChar+0x16c>)
 8002672:	681a      	ldr	r2, [r3, #0]
 8002674:	4911      	ldr	r1, [pc, #68]	@ (80026bc <DrawChar+0x170>)
 8002676:	4613      	mov	r3, r2
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	4413      	add	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	440b      	add	r3, r1
 8002680:	3304      	adds	r3, #4
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	88bb      	ldrh	r3, [r7, #4]
 8002686:	4619      	mov	r1, r3
 8002688:	f7ff ff3a 	bl	8002500 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800268c:	69bb      	ldr	r3, [r7, #24]
 800268e:	3301      	adds	r3, #1
 8002690:	61bb      	str	r3, [r7, #24]
 8002692:	8a3b      	ldrh	r3, [r7, #16]
 8002694:	69ba      	ldr	r2, [r7, #24]
 8002696:	429a      	cmp	r2, r3
 8002698:	d3c4      	bcc.n	8002624 <DrawChar+0xd8>
      }
    }
    Ypos++;
 800269a:	88bb      	ldrh	r3, [r7, #4]
 800269c:	3301      	adds	r3, #1
 800269e:	80bb      	strh	r3, [r7, #4]
  for (i = 0; i < height; i++)
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	3301      	adds	r3, #1
 80026a4:	61fb      	str	r3, [r7, #28]
 80026a6:	8a7b      	ldrh	r3, [r7, #18]
 80026a8:	69fa      	ldr	r2, [r7, #28]
 80026aa:	429a      	cmp	r2, r3
 80026ac:	d384      	bcc.n	80025b8 <DrawChar+0x6c>
  }
}
 80026ae:	bf00      	nop
 80026b0:	bf00      	nop
 80026b2:	3720      	adds	r7, #32
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	20000870 	.word	0x20000870
 80026bc:	20000874 	.word	0x20000874

080026c0 <FillBuffer>:
  * @param  OffLine: offset
  * @param  ColorIndex: color Index
  */
static void FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine,
                       uint32_t ColorIndex)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b086      	sub	sp, #24
 80026c4:	af02      	add	r7, sp, #8
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	60b9      	str	r1, [r7, #8]
 80026ca:	607a      	str	r2, [r7, #4]
 80026cc:	603b      	str	r3, [r7, #0]

  /* Register to memory mode with ARGB8888 as color Mode */
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 80026ce:	4b16      	ldr	r3, [pc, #88]	@ (8002728 <FillBuffer+0x68>)
 80026d0:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80026d4:	605a      	str	r2, [r3, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80026d6:	4b14      	ldr	r3, [pc, #80]	@ (8002728 <FillBuffer+0x68>)
 80026d8:	2200      	movs	r2, #0
 80026da:	609a      	str	r2, [r3, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;
 80026dc:	4a12      	ldr	r2, [pc, #72]	@ (8002728 <FillBuffer+0x68>)
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	60d3      	str	r3, [r2, #12]

  Dma2dHandler.Instance = DMA2D;
 80026e2:	4b11      	ldr	r3, [pc, #68]	@ (8002728 <FillBuffer+0x68>)
 80026e4:	4a11      	ldr	r2, [pc, #68]	@ (800272c <FillBuffer+0x6c>)
 80026e6:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if (HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK)
 80026e8:	480f      	ldr	r0, [pc, #60]	@ (8002728 <FillBuffer+0x68>)
 80026ea:	f000 fd0d 	bl	8003108 <HAL_DMA2D_Init>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d115      	bne.n	8002720 <FillBuffer+0x60>
  {
    if (HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK)
 80026f4:	68f9      	ldr	r1, [r7, #12]
 80026f6:	480c      	ldr	r0, [pc, #48]	@ (8002728 <FillBuffer+0x68>)
 80026f8:	f000 ff74 	bl	80035e4 <HAL_DMA2D_ConfigLayer>
 80026fc:	4603      	mov	r3, r0
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d10e      	bne.n	8002720 <FillBuffer+0x60>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8002702:	68ba      	ldr	r2, [r7, #8]
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	9300      	str	r3, [sp, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	69f9      	ldr	r1, [r7, #28]
 800270c:	4806      	ldr	r0, [pc, #24]	@ (8002728 <FillBuffer+0x68>)
 800270e:	f000 fd44 	bl	800319a <HAL_DMA2D_Start>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d103      	bne.n	8002720 <FillBuffer+0x60>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8002718:	210a      	movs	r1, #10
 800271a:	4803      	ldr	r0, [pc, #12]	@ (8002728 <FillBuffer+0x68>)
 800271c:	f000 fd68 	bl	80031f0 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8002720:	bf00      	nop
 8002722:	3710      	adds	r7, #16
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	20000800 	.word	0x20000800
 800272c:	4002b000 	.word	0x4002b000

08002730 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
uint8_t BSP_SDRAM_Init(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;

  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8002734:	4b29      	ldr	r3, [pc, #164]	@ (80027dc <BSP_SDRAM_Init+0xac>)
 8002736:	4a2a      	ldr	r2, [pc, #168]	@ (80027e0 <BSP_SDRAM_Init+0xb0>)
 8002738:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800273a:	4b2a      	ldr	r3, [pc, #168]	@ (80027e4 <BSP_SDRAM_Init+0xb4>)
 800273c:	2202      	movs	r2, #2
 800273e:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 8002740:	4b28      	ldr	r3, [pc, #160]	@ (80027e4 <BSP_SDRAM_Init+0xb4>)
 8002742:	2207      	movs	r2, #7
 8002744:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 8002746:	4b27      	ldr	r3, [pc, #156]	@ (80027e4 <BSP_SDRAM_Init+0xb4>)
 8002748:	2204      	movs	r2, #4
 800274a:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 800274c:	4b25      	ldr	r3, [pc, #148]	@ (80027e4 <BSP_SDRAM_Init+0xb4>)
 800274e:	2207      	movs	r2, #7
 8002750:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 8002752:	4b24      	ldr	r3, [pc, #144]	@ (80027e4 <BSP_SDRAM_Init+0xb4>)
 8002754:	2202      	movs	r2, #2
 8002756:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 8002758:	4b22      	ldr	r3, [pc, #136]	@ (80027e4 <BSP_SDRAM_Init+0xb4>)
 800275a:	2202      	movs	r2, #2
 800275c:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800275e:	4b21      	ldr	r3, [pc, #132]	@ (80027e4 <BSP_SDRAM_Init+0xb4>)
 8002760:	2202      	movs	r2, #2
 8002762:	619a      	str	r2, [r3, #24]

  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8002764:	4b1d      	ldr	r3, [pc, #116]	@ (80027dc <BSP_SDRAM_Init+0xac>)
 8002766:	2201      	movs	r2, #1
 8002768:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800276a:	4b1c      	ldr	r3, [pc, #112]	@ (80027dc <BSP_SDRAM_Init+0xac>)
 800276c:	2200      	movs	r2, #0
 800276e:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8002770:	4b1a      	ldr	r3, [pc, #104]	@ (80027dc <BSP_SDRAM_Init+0xac>)
 8002772:	2204      	movs	r2, #4
 8002774:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8002776:	4b19      	ldr	r3, [pc, #100]	@ (80027dc <BSP_SDRAM_Init+0xac>)
 8002778:	2210      	movs	r2, #16
 800277a:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800277c:	4b17      	ldr	r3, [pc, #92]	@ (80027dc <BSP_SDRAM_Init+0xac>)
 800277e:	2240      	movs	r2, #64	@ 0x40
 8002780:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8002782:	4b16      	ldr	r3, [pc, #88]	@ (80027dc <BSP_SDRAM_Init+0xac>)
 8002784:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002788:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800278a:	4b14      	ldr	r3, [pc, #80]	@ (80027dc <BSP_SDRAM_Init+0xac>)
 800278c:	2200      	movs	r2, #0
 800278e:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8002790:	4b12      	ldr	r3, [pc, #72]	@ (80027dc <BSP_SDRAM_Init+0xac>)
 8002792:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002796:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 8002798:	4b10      	ldr	r3, [pc, #64]	@ (80027dc <BSP_SDRAM_Init+0xac>)
 800279a:	2200      	movs	r2, #0
 800279c:	625a      	str	r2, [r3, #36]	@ 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800279e:	4b0f      	ldr	r3, [pc, #60]	@ (80027dc <BSP_SDRAM_Init+0xac>)
 80027a0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027a4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* SDRAM controller initialization */
  /* __weak function can be surcharged by the application code */
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80027a6:	2100      	movs	r1, #0
 80027a8:	480c      	ldr	r0, [pc, #48]	@ (80027dc <BSP_SDRAM_Init+0xac>)
 80027aa:	f000 f87f 	bl	80028ac <BSP_SDRAM_MspInit>
  if (HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80027ae:	490d      	ldr	r1, [pc, #52]	@ (80027e4 <BSP_SDRAM_Init+0xb4>)
 80027b0:	480a      	ldr	r0, [pc, #40]	@ (80027dc <BSP_SDRAM_Init+0xac>)
 80027b2:	f004 fda1 	bl	80072f8 <HAL_SDRAM_Init>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80027bc:	4b0a      	ldr	r3, [pc, #40]	@ (80027e8 <BSP_SDRAM_Init+0xb8>)
 80027be:	2201      	movs	r2, #1
 80027c0:	701a      	strb	r2, [r3, #0]
 80027c2:	e002      	b.n	80027ca <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80027c4:	4b08      	ldr	r3, [pc, #32]	@ (80027e8 <BSP_SDRAM_Init+0xb8>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	701a      	strb	r2, [r3, #0]
  }

  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80027ca:	f240 506a 	movw	r0, #1386	@ 0x56a
 80027ce:	f000 f80d 	bl	80027ec <BSP_SDRAM_Initialization_sequence>

  return sdramstatus;
 80027d2:	4b05      	ldr	r3, [pc, #20]	@ (80027e8 <BSP_SDRAM_Init+0xb8>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	20000890 	.word	0x20000890
 80027e0:	a0000140 	.word	0xa0000140
 80027e4:	200008c4 	.word	0x200008c4
 80027e8:	20000048 	.word	0x20000048

080027ec <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80027f4:	2300      	movs	r3, #0
 80027f6:	60fb      	str	r3, [r7, #12]

  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 80027f8:	4b2a      	ldr	r3, [pc, #168]	@ (80028a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80027fa:	2201      	movs	r2, #1
 80027fc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80027fe:	4b29      	ldr	r3, [pc, #164]	@ (80028a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002800:	2208      	movs	r2, #8
 8002802:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 8002804:	4b27      	ldr	r3, [pc, #156]	@ (80028a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002806:	2201      	movs	r2, #1
 8002808:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800280a:	4b26      	ldr	r3, [pc, #152]	@ (80028a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800280c:	2200      	movs	r2, #0
 800280e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002810:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002814:	4923      	ldr	r1, [pc, #140]	@ (80028a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002816:	4824      	ldr	r0, [pc, #144]	@ (80028a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002818:	f004 fda2 	bl	8007360 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800281c:	2001      	movs	r0, #1
 800281e:	f000 f993 	bl	8002b48 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 8002822:	4b20      	ldr	r3, [pc, #128]	@ (80028a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002824:	2202      	movs	r2, #2
 8002826:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002828:	4b1e      	ldr	r3, [pc, #120]	@ (80028a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800282a:	2208      	movs	r2, #8
 800282c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800282e:	4b1d      	ldr	r3, [pc, #116]	@ (80028a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002830:	2201      	movs	r2, #1
 8002832:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002834:	4b1b      	ldr	r3, [pc, #108]	@ (80028a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002836:	2200      	movs	r2, #0
 8002838:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800283a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800283e:	4919      	ldr	r1, [pc, #100]	@ (80028a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002840:	4819      	ldr	r0, [pc, #100]	@ (80028a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002842:	f004 fd8d 	bl	8007360 <HAL_SDRAM_SendCommand>

  /* Step 4: Configure an Auto Refresh command */
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8002846:	4b17      	ldr	r3, [pc, #92]	@ (80028a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002848:	2203      	movs	r2, #3
 800284a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800284c:	4b15      	ldr	r3, [pc, #84]	@ (80028a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800284e:	2208      	movs	r2, #8
 8002850:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 8002852:	4b14      	ldr	r3, [pc, #80]	@ (80028a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002854:	2204      	movs	r2, #4
 8002856:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 8002858:	4b12      	ldr	r3, [pc, #72]	@ (80028a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800285a:	2200      	movs	r2, #0
 800285c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800285e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002862:	4910      	ldr	r1, [pc, #64]	@ (80028a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002864:	4810      	ldr	r0, [pc, #64]	@ (80028a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002866:	f004 fd7b 	bl	8007360 <HAL_SDRAM_SendCommand>

  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800286a:	f44f 730c 	mov.w	r3, #560	@ 0x230
 800286e:	60fb      	str	r3, [r7, #12]
           SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
           SDRAM_MODEREG_CAS_LATENCY_3           |
           SDRAM_MODEREG_OPERATING_MODE_STANDARD |
           SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;

  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 8002870:	4b0c      	ldr	r3, [pc, #48]	@ (80028a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002872:	2204      	movs	r2, #4
 8002874:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8002876:	4b0b      	ldr	r3, [pc, #44]	@ (80028a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002878:	2208      	movs	r2, #8
 800287a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800287c:	4b09      	ldr	r3, [pc, #36]	@ (80028a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800287e:	2201      	movs	r2, #1
 8002880:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	4a07      	ldr	r2, [pc, #28]	@ (80028a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8002886:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8002888:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800288c:	4905      	ldr	r1, [pc, #20]	@ (80028a4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 800288e:	4806      	ldr	r0, [pc, #24]	@ (80028a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002890:	f004 fd66 	bl	8007360 <HAL_SDRAM_SendCommand>

  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount);
 8002894:	6879      	ldr	r1, [r7, #4]
 8002896:	4804      	ldr	r0, [pc, #16]	@ (80028a8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8002898:	f004 fd97 	bl	80073ca <HAL_SDRAM_ProgramRefreshRate>
}
 800289c:	bf00      	nop
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	200008e0 	.word	0x200008e0
 80028a8:	20000890 	.word	0x20000890

080028ac <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b090      	sub	sp, #64	@ 0x40
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
 80028b4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if (hsdram != (SDRAM_HandleTypeDef *)NULL)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	f000 80ec 	beq.w	8002a96 <BSP_SDRAM_MspInit+0x1ea>
  {
    /* Enable FMC clock */
    __HAL_RCC_FMC_CLK_ENABLE();
 80028be:	2300      	movs	r3, #0
 80028c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028c2:	4b77      	ldr	r3, [pc, #476]	@ (8002aa0 <BSP_SDRAM_MspInit+0x1f4>)
 80028c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028c6:	4a76      	ldr	r2, [pc, #472]	@ (8002aa0 <BSP_SDRAM_MspInit+0x1f4>)
 80028c8:	f043 0301 	orr.w	r3, r3, #1
 80028cc:	6393      	str	r3, [r2, #56]	@ 0x38
 80028ce:	4b74      	ldr	r3, [pc, #464]	@ (8002aa0 <BSP_SDRAM_MspInit+0x1f4>)
 80028d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Enable chosen DMAx clock */
    __DMAx_CLK_ENABLE();
 80028da:	2300      	movs	r3, #0
 80028dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80028de:	4b70      	ldr	r3, [pc, #448]	@ (8002aa0 <BSP_SDRAM_MspInit+0x1f4>)
 80028e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028e2:	4a6f      	ldr	r2, [pc, #444]	@ (8002aa0 <BSP_SDRAM_MspInit+0x1f4>)
 80028e4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80028e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80028ea:	4b6d      	ldr	r3, [pc, #436]	@ (8002aa0 <BSP_SDRAM_MspInit+0x1f4>)
 80028ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80028f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028f6:	2300      	movs	r3, #0
 80028f8:	623b      	str	r3, [r7, #32]
 80028fa:	4b69      	ldr	r3, [pc, #420]	@ (8002aa0 <BSP_SDRAM_MspInit+0x1f4>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028fe:	4a68      	ldr	r2, [pc, #416]	@ (8002aa0 <BSP_SDRAM_MspInit+0x1f4>)
 8002900:	f043 0302 	orr.w	r3, r3, #2
 8002904:	6313      	str	r3, [r2, #48]	@ 0x30
 8002906:	4b66      	ldr	r3, [pc, #408]	@ (8002aa0 <BSP_SDRAM_MspInit+0x1f4>)
 8002908:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800290a:	f003 0302 	and.w	r3, r3, #2
 800290e:	623b      	str	r3, [r7, #32]
 8002910:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	61fb      	str	r3, [r7, #28]
 8002916:	4b62      	ldr	r3, [pc, #392]	@ (8002aa0 <BSP_SDRAM_MspInit+0x1f4>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291a:	4a61      	ldr	r2, [pc, #388]	@ (8002aa0 <BSP_SDRAM_MspInit+0x1f4>)
 800291c:	f043 0304 	orr.w	r3, r3, #4
 8002920:	6313      	str	r3, [r2, #48]	@ 0x30
 8002922:	4b5f      	ldr	r3, [pc, #380]	@ (8002aa0 <BSP_SDRAM_MspInit+0x1f4>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002926:	f003 0304 	and.w	r3, r3, #4
 800292a:	61fb      	str	r3, [r7, #28]
 800292c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800292e:	2300      	movs	r3, #0
 8002930:	61bb      	str	r3, [r7, #24]
 8002932:	4b5b      	ldr	r3, [pc, #364]	@ (8002aa0 <BSP_SDRAM_MspInit+0x1f4>)
 8002934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002936:	4a5a      	ldr	r2, [pc, #360]	@ (8002aa0 <BSP_SDRAM_MspInit+0x1f4>)
 8002938:	f043 0308 	orr.w	r3, r3, #8
 800293c:	6313      	str	r3, [r2, #48]	@ 0x30
 800293e:	4b58      	ldr	r3, [pc, #352]	@ (8002aa0 <BSP_SDRAM_MspInit+0x1f4>)
 8002940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002942:	f003 0308 	and.w	r3, r3, #8
 8002946:	61bb      	str	r3, [r7, #24]
 8002948:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	4b54      	ldr	r3, [pc, #336]	@ (8002aa0 <BSP_SDRAM_MspInit+0x1f4>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002952:	4a53      	ldr	r2, [pc, #332]	@ (8002aa0 <BSP_SDRAM_MspInit+0x1f4>)
 8002954:	f043 0310 	orr.w	r3, r3, #16
 8002958:	6313      	str	r3, [r2, #48]	@ 0x30
 800295a:	4b51      	ldr	r3, [pc, #324]	@ (8002aa0 <BSP_SDRAM_MspInit+0x1f4>)
 800295c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800295e:	f003 0310 	and.w	r3, r3, #16
 8002962:	617b      	str	r3, [r7, #20]
 8002964:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	613b      	str	r3, [r7, #16]
 800296a:	4b4d      	ldr	r3, [pc, #308]	@ (8002aa0 <BSP_SDRAM_MspInit+0x1f4>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296e:	4a4c      	ldr	r2, [pc, #304]	@ (8002aa0 <BSP_SDRAM_MspInit+0x1f4>)
 8002970:	f043 0320 	orr.w	r3, r3, #32
 8002974:	6313      	str	r3, [r2, #48]	@ 0x30
 8002976:	4b4a      	ldr	r3, [pc, #296]	@ (8002aa0 <BSP_SDRAM_MspInit+0x1f4>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297a:	f003 0320 	and.w	r3, r3, #32
 800297e:	613b      	str	r3, [r7, #16]
 8002980:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	60fb      	str	r3, [r7, #12]
 8002986:	4b46      	ldr	r3, [pc, #280]	@ (8002aa0 <BSP_SDRAM_MspInit+0x1f4>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298a:	4a45      	ldr	r2, [pc, #276]	@ (8002aa0 <BSP_SDRAM_MspInit+0x1f4>)
 800298c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002990:	6313      	str	r3, [r2, #48]	@ 0x30
 8002992:	4b43      	ldr	r3, [pc, #268]	@ (8002aa0 <BSP_SDRAM_MspInit+0x1f4>)
 8002994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002996:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800299a:	60fb      	str	r3, [r7, #12]
 800299c:	68fb      	ldr	r3, [r7, #12]
     +-------------------+

    */

    /* Common GPIO configuration */
    GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800299e:	2302      	movs	r3, #2
 80029a0:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 80029a2:	2302      	movs	r3, #2
 80029a4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStructure.Pull  = GPIO_NOPULL;
 80029a6:	2300      	movs	r3, #0
 80029a8:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 80029aa:	230c      	movs	r3, #12
 80029ac:	63fb      	str	r3, [r7, #60]	@ 0x3c

    /* GPIOB configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 80029ae:	2360      	movs	r3, #96	@ 0x60
 80029b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80029b2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029b6:	4619      	mov	r1, r3
 80029b8:	483a      	ldr	r0, [pc, #232]	@ (8002aa4 <BSP_SDRAM_MspInit+0x1f8>)
 80029ba:	f000 ff41 	bl	8003840 <HAL_GPIO_Init>

    /* GPIOC configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0;
 80029be:	2301      	movs	r3, #1
 80029c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 80029c2:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029c6:	4619      	mov	r1, r3
 80029c8:	4837      	ldr	r0, [pc, #220]	@ (8002aa8 <BSP_SDRAM_MspInit+0x1fc>)
 80029ca:	f000 ff39 	bl	8003840 <HAL_GPIO_Init>

    /* GPIOD configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80029ce:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80029d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                             GPIO_PIN_15;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80029d4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029d8:	4619      	mov	r1, r3
 80029da:	4834      	ldr	r0, [pc, #208]	@ (8002aac <BSP_SDRAM_MspInit+0x200>)
 80029dc:	f000 ff30 	bl	8003840 <HAL_GPIO_Init>

    /* GPIOE configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80029e0:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80029e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80029e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029ea:	4619      	mov	r1, r3
 80029ec:	4830      	ldr	r0, [pc, #192]	@ (8002ab0 <BSP_SDRAM_MspInit+0x204>)
 80029ee:	f000 ff27 	bl	8003840 <HAL_GPIO_Init>

    /* GPIOF configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 |
 80029f2:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80029f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                             GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                             GPIO_PIN_14 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80029f8:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80029fc:	4619      	mov	r1, r3
 80029fe:	482d      	ldr	r0, [pc, #180]	@ (8002ab4 <BSP_SDRAM_MspInit+0x208>)
 8002a00:	f000 ff1e 	bl	8003840 <HAL_GPIO_Init>

    /* GPIOG configuration */
    GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 8002a04:	f248 1333 	movw	r3, #33075	@ 0x8133
 8002a08:	62fb      	str	r3, [r7, #44]	@ 0x2c
                             GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 8002a0a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8002a0e:	4619      	mov	r1, r3
 8002a10:	4829      	ldr	r0, [pc, #164]	@ (8002ab8 <BSP_SDRAM_MspInit+0x20c>)
 8002a12:	f000 ff15 	bl	8003840 <HAL_GPIO_Init>

    /* Configure common DMA parameters */
    dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8002a16:	4b29      	ldr	r3, [pc, #164]	@ (8002abc <BSP_SDRAM_MspInit+0x210>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	605a      	str	r2, [r3, #4]
    dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8002a1c:	4b27      	ldr	r3, [pc, #156]	@ (8002abc <BSP_SDRAM_MspInit+0x210>)
 8002a1e:	2280      	movs	r2, #128	@ 0x80
 8002a20:	609a      	str	r2, [r3, #8]
    dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8002a22:	4b26      	ldr	r3, [pc, #152]	@ (8002abc <BSP_SDRAM_MspInit+0x210>)
 8002a24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a28:	60da      	str	r2, [r3, #12]
    dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 8002a2a:	4b24      	ldr	r3, [pc, #144]	@ (8002abc <BSP_SDRAM_MspInit+0x210>)
 8002a2c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a30:	611a      	str	r2, [r3, #16]
    dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8002a32:	4b22      	ldr	r3, [pc, #136]	@ (8002abc <BSP_SDRAM_MspInit+0x210>)
 8002a34:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002a38:	615a      	str	r2, [r3, #20]
    dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8002a3a:	4b20      	ldr	r3, [pc, #128]	@ (8002abc <BSP_SDRAM_MspInit+0x210>)
 8002a3c:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002a40:	619a      	str	r2, [r3, #24]
    dmaHandle.Init.Mode                = DMA_NORMAL;
 8002a42:	4b1e      	ldr	r3, [pc, #120]	@ (8002abc <BSP_SDRAM_MspInit+0x210>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	61da      	str	r2, [r3, #28]
    dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8002a48:	4b1c      	ldr	r3, [pc, #112]	@ (8002abc <BSP_SDRAM_MspInit+0x210>)
 8002a4a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002a4e:	621a      	str	r2, [r3, #32]
    dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8002a50:	4b1a      	ldr	r3, [pc, #104]	@ (8002abc <BSP_SDRAM_MspInit+0x210>)
 8002a52:	2200      	movs	r2, #0
 8002a54:	625a      	str	r2, [r3, #36]	@ 0x24
    dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8002a56:	4b19      	ldr	r3, [pc, #100]	@ (8002abc <BSP_SDRAM_MspInit+0x210>)
 8002a58:	2203      	movs	r2, #3
 8002a5a:	629a      	str	r2, [r3, #40]	@ 0x28
    dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8002a5c:	4b17      	ldr	r3, [pc, #92]	@ (8002abc <BSP_SDRAM_MspInit+0x210>)
 8002a5e:	2200      	movs	r2, #0
 8002a60:	62da      	str	r2, [r3, #44]	@ 0x2c
    dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8002a62:	4b16      	ldr	r3, [pc, #88]	@ (8002abc <BSP_SDRAM_MspInit+0x210>)
 8002a64:	2200      	movs	r2, #0
 8002a66:	631a      	str	r2, [r3, #48]	@ 0x30

    dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8002a68:	4b14      	ldr	r3, [pc, #80]	@ (8002abc <BSP_SDRAM_MspInit+0x210>)
 8002a6a:	4a15      	ldr	r2, [pc, #84]	@ (8002ac0 <BSP_SDRAM_MspInit+0x214>)
 8002a6c:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a12      	ldr	r2, [pc, #72]	@ (8002abc <BSP_SDRAM_MspInit+0x210>)
 8002a72:	631a      	str	r2, [r3, #48]	@ 0x30
 8002a74:	4a11      	ldr	r2, [pc, #68]	@ (8002abc <BSP_SDRAM_MspInit+0x210>)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the stream for new transfer */
    HAL_DMA_DeInit(&dmaHandle);
 8002a7a:	4810      	ldr	r0, [pc, #64]	@ (8002abc <BSP_SDRAM_MspInit+0x210>)
 8002a7c:	f000 fa34 	bl	8002ee8 <HAL_DMA_DeInit>

    /* Configure the DMA stream */
    HAL_DMA_Init(&dmaHandle);
 8002a80:	480e      	ldr	r0, [pc, #56]	@ (8002abc <BSP_SDRAM_MspInit+0x210>)
 8002a82:	f000 f983 	bl	8002d8c <HAL_DMA_Init>

    /* NVIC configuration for DMA transfer complete interrupt */
    HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8002a86:	2200      	movs	r2, #0
 8002a88:	210f      	movs	r1, #15
 8002a8a:	2038      	movs	r0, #56	@ 0x38
 8002a8c:	f000 f938 	bl	8002d00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8002a90:	2038      	movs	r0, #56	@ 0x38
 8002a92:	f000 f951 	bl	8002d38 <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 8002a96:	bf00      	nop
 8002a98:	3740      	adds	r7, #64	@ 0x40
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40023800 	.word	0x40023800
 8002aa4:	40020400 	.word	0x40020400
 8002aa8:	40020800 	.word	0x40020800
 8002aac:	40020c00 	.word	0x40020c00
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	40021400 	.word	0x40021400
 8002ab8:	40021800 	.word	0x40021800
 8002abc:	200008f0 	.word	0x200008f0
 8002ac0:	40026410 	.word	0x40026410

08002ac4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002ac8:	4b0e      	ldr	r3, [pc, #56]	@ (8002b04 <HAL_Init+0x40>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a0d      	ldr	r2, [pc, #52]	@ (8002b04 <HAL_Init+0x40>)
 8002ace:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ad2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	@ (8002b04 <HAL_Init+0x40>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4a0a      	ldr	r2, [pc, #40]	@ (8002b04 <HAL_Init+0x40>)
 8002ada:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ade:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ae0:	4b08      	ldr	r3, [pc, #32]	@ (8002b04 <HAL_Init+0x40>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a07      	ldr	r2, [pc, #28]	@ (8002b04 <HAL_Init+0x40>)
 8002ae6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002aea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002aec:	2003      	movs	r0, #3
 8002aee:	f000 f8fc 	bl	8002cea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002af2:	200f      	movs	r0, #15
 8002af4:	f7fe fd28 	bl	8001548 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002af8:	f7fe f950 	bl	8000d9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002afc:	2300      	movs	r3, #0
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40023c00 	.word	0x40023c00

08002b08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002b0c:	4b06      	ldr	r3, [pc, #24]	@ (8002b28 <HAL_IncTick+0x20>)
 8002b0e:	781b      	ldrb	r3, [r3, #0]
 8002b10:	461a      	mov	r2, r3
 8002b12:	4b06      	ldr	r3, [pc, #24]	@ (8002b2c <HAL_IncTick+0x24>)
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	4413      	add	r3, r2
 8002b18:	4a04      	ldr	r2, [pc, #16]	@ (8002b2c <HAL_IncTick+0x24>)
 8002b1a:	6013      	str	r3, [r2, #0]
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	20000050 	.word	0x20000050
 8002b2c:	20000950 	.word	0x20000950

08002b30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  return uwTick;
 8002b34:	4b03      	ldr	r3, [pc, #12]	@ (8002b44 <HAL_GetTick+0x14>)
 8002b36:	681b      	ldr	r3, [r3, #0]
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	20000950 	.word	0x20000950

08002b48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b084      	sub	sp, #16
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002b50:	f7ff ffee 	bl	8002b30 <HAL_GetTick>
 8002b54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b60:	d005      	beq.n	8002b6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002b62:	4b0a      	ldr	r3, [pc, #40]	@ (8002b8c <HAL_Delay+0x44>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	461a      	mov	r2, r3
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002b6e:	bf00      	nop
 8002b70:	f7ff ffde 	bl	8002b30 <HAL_GetTick>
 8002b74:	4602      	mov	r2, r0
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	1ad3      	subs	r3, r2, r3
 8002b7a:	68fa      	ldr	r2, [r7, #12]
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d8f7      	bhi.n	8002b70 <HAL_Delay+0x28>
  {
  }
}
 8002b80:	bf00      	nop
 8002b82:	bf00      	nop
 8002b84:	3710      	adds	r7, #16
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}
 8002b8a:	bf00      	nop
 8002b8c:	20000050 	.word	0x20000050

08002b90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f003 0307 	and.w	r3, r3, #7
 8002b9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002ba0:	4b0c      	ldr	r3, [pc, #48]	@ (8002bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002ba6:	68ba      	ldr	r2, [r7, #8]
 8002ba8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002bac:	4013      	ands	r3, r2
 8002bae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bb8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002bbc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002bc0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bc2:	4a04      	ldr	r2, [pc, #16]	@ (8002bd4 <__NVIC_SetPriorityGrouping+0x44>)
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	60d3      	str	r3, [r2, #12]
}
 8002bc8:	bf00      	nop
 8002bca:	3714      	adds	r7, #20
 8002bcc:	46bd      	mov	sp, r7
 8002bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd2:	4770      	bx	lr
 8002bd4:	e000ed00 	.word	0xe000ed00

08002bd8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002bdc:	4b04      	ldr	r3, [pc, #16]	@ (8002bf0 <__NVIC_GetPriorityGrouping+0x18>)
 8002bde:	68db      	ldr	r3, [r3, #12]
 8002be0:	0a1b      	lsrs	r3, r3, #8
 8002be2:	f003 0307 	and.w	r3, r3, #7
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	e000ed00 	.word	0xe000ed00

08002bf4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	db0b      	blt.n	8002c1e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c06:	79fb      	ldrb	r3, [r7, #7]
 8002c08:	f003 021f 	and.w	r2, r3, #31
 8002c0c:	4907      	ldr	r1, [pc, #28]	@ (8002c2c <__NVIC_EnableIRQ+0x38>)
 8002c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c12:	095b      	lsrs	r3, r3, #5
 8002c14:	2001      	movs	r0, #1
 8002c16:	fa00 f202 	lsl.w	r2, r0, r2
 8002c1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
 8002c2a:	bf00      	nop
 8002c2c:	e000e100 	.word	0xe000e100

08002c30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c30:	b480      	push	{r7}
 8002c32:	b083      	sub	sp, #12
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	4603      	mov	r3, r0
 8002c38:	6039      	str	r1, [r7, #0]
 8002c3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	db0a      	blt.n	8002c5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	490c      	ldr	r1, [pc, #48]	@ (8002c7c <__NVIC_SetPriority+0x4c>)
 8002c4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c4e:	0112      	lsls	r2, r2, #4
 8002c50:	b2d2      	uxtb	r2, r2
 8002c52:	440b      	add	r3, r1
 8002c54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c58:	e00a      	b.n	8002c70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	b2da      	uxtb	r2, r3
 8002c5e:	4908      	ldr	r1, [pc, #32]	@ (8002c80 <__NVIC_SetPriority+0x50>)
 8002c60:	79fb      	ldrb	r3, [r7, #7]
 8002c62:	f003 030f 	and.w	r3, r3, #15
 8002c66:	3b04      	subs	r3, #4
 8002c68:	0112      	lsls	r2, r2, #4
 8002c6a:	b2d2      	uxtb	r2, r2
 8002c6c:	440b      	add	r3, r1
 8002c6e:	761a      	strb	r2, [r3, #24]
}
 8002c70:	bf00      	nop
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr
 8002c7c:	e000e100 	.word	0xe000e100
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b089      	sub	sp, #36	@ 0x24
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	60f8      	str	r0, [r7, #12]
 8002c8c:	60b9      	str	r1, [r7, #8]
 8002c8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f003 0307 	and.w	r3, r3, #7
 8002c96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	f1c3 0307 	rsb	r3, r3, #7
 8002c9e:	2b04      	cmp	r3, #4
 8002ca0:	bf28      	it	cs
 8002ca2:	2304      	movcs	r3, #4
 8002ca4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	3304      	adds	r3, #4
 8002caa:	2b06      	cmp	r3, #6
 8002cac:	d902      	bls.n	8002cb4 <NVIC_EncodePriority+0x30>
 8002cae:	69fb      	ldr	r3, [r7, #28]
 8002cb0:	3b03      	subs	r3, #3
 8002cb2:	e000      	b.n	8002cb6 <NVIC_EncodePriority+0x32>
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cb8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cbc:	69bb      	ldr	r3, [r7, #24]
 8002cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc2:	43da      	mvns	r2, r3
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	401a      	ands	r2, r3
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ccc:	f04f 31ff 	mov.w	r1, #4294967295
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd6:	43d9      	mvns	r1, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002cdc:	4313      	orrs	r3, r2
         );
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3724      	adds	r7, #36	@ 0x24
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr

08002cea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff ff4c 	bl	8002b90 <__NVIC_SetPriorityGrouping>
}
 8002cf8:	bf00      	nop
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	60b9      	str	r1, [r7, #8]
 8002d0a:	607a      	str	r2, [r7, #4]
 8002d0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d0e:	2300      	movs	r3, #0
 8002d10:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d12:	f7ff ff61 	bl	8002bd8 <__NVIC_GetPriorityGrouping>
 8002d16:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	68b9      	ldr	r1, [r7, #8]
 8002d1c:	6978      	ldr	r0, [r7, #20]
 8002d1e:	f7ff ffb1 	bl	8002c84 <NVIC_EncodePriority>
 8002d22:	4602      	mov	r2, r0
 8002d24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d28:	4611      	mov	r1, r2
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff ff80 	bl	8002c30 <__NVIC_SetPriority>
}
 8002d30:	bf00      	nop
 8002d32:	3718      	adds	r7, #24
 8002d34:	46bd      	mov	sp, r7
 8002d36:	bd80      	pop	{r7, pc}

08002d38 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d46:	4618      	mov	r0, r3
 8002d48:	f7ff ff54 	bl	8002bf4 <__NVIC_EnableIRQ>
}
 8002d4c:	bf00      	nop
 8002d4e:	3708      	adds	r7, #8
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b082      	sub	sp, #8
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d101      	bne.n	8002d66 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e00e      	b.n	8002d84 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	795b      	ldrb	r3, [r3, #5]
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d105      	bne.n	8002d7c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8002d76:	6878      	ldr	r0, [r7, #4]
 8002d78:	f7fe f838 	bl	8000dec <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2201      	movs	r2, #1
 8002d80:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002d98:	f7ff feca 	bl	8002b30 <HAL_GetTick>
 8002d9c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d101      	bne.n	8002da8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e099      	b.n	8002edc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2202      	movs	r2, #2
 8002dac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2200      	movs	r2, #0
 8002db4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	681a      	ldr	r2, [r3, #0]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f022 0201 	bic.w	r2, r2, #1
 8002dc6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dc8:	e00f      	b.n	8002dea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002dca:	f7ff feb1 	bl	8002b30 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	2b05      	cmp	r3, #5
 8002dd6:	d908      	bls.n	8002dea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2203      	movs	r2, #3
 8002de2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e078      	b.n	8002edc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0301 	and.w	r3, r3, #1
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d1e8      	bne.n	8002dca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002e00:	697a      	ldr	r2, [r7, #20]
 8002e02:	4b38      	ldr	r3, [pc, #224]	@ (8002ee4 <HAL_DMA_Init+0x158>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	685a      	ldr	r2, [r3, #4]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e16:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002e22:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002e2e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a1b      	ldr	r3, [r3, #32]
 8002e34:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002e36:	697a      	ldr	r2, [r7, #20]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e40:	2b04      	cmp	r3, #4
 8002e42:	d107      	bne.n	8002e54 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	697a      	ldr	r2, [r7, #20]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	697a      	ldr	r2, [r7, #20]
 8002e5a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	695b      	ldr	r3, [r3, #20]
 8002e62:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	f023 0307 	bic.w	r3, r3, #7
 8002e6a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e70:	697a      	ldr	r2, [r7, #20]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e7a:	2b04      	cmp	r3, #4
 8002e7c:	d117      	bne.n	8002eae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e82:	697a      	ldr	r2, [r7, #20]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00e      	beq.n	8002eae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002e90:	6878      	ldr	r0, [r7, #4]
 8002e92:	f000 f8bd 	bl	8003010 <DMA_CheckFifoParam>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d008      	beq.n	8002eae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2240      	movs	r2, #64	@ 0x40
 8002ea0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2201      	movs	r2, #1
 8002ea6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e016      	b.n	8002edc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	697a      	ldr	r2, [r7, #20]
 8002eb4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 f874 	bl	8002fa4 <DMA_CalcBaseAndBitshift>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ec4:	223f      	movs	r2, #63	@ 0x3f
 8002ec6:	409a      	lsls	r2, r3
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002eda:	2300      	movs	r3, #0
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3718      	adds	r7, #24
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	f010803f 	.word	0xf010803f

08002ee8 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b084      	sub	sp, #16
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e050      	b.n	8002f9c <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d101      	bne.n	8002f0a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8002f06:	2302      	movs	r3, #2
 8002f08:	e048      	b.n	8002f9c <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	681a      	ldr	r2, [r3, #0]
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f022 0201 	bic.w	r2, r2, #1
 8002f18:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2200      	movs	r2, #0
 8002f28:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2200      	movs	r2, #0
 8002f38:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2200      	movs	r2, #0
 8002f40:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	2221      	movs	r2, #33	@ 0x21
 8002f48:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 f82a 	bl	8002fa4 <DMA_CalcBaseAndBitshift>
 8002f50:	4603      	mov	r3, r0
 8002f52:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2200      	movs	r2, #0
 8002f58:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback = NULL;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2200      	movs	r2, #0
 8002f64:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback = NULL;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback = NULL;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f7c:	223f      	movs	r2, #63	@ 0x3f
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002f9a:	2300      	movs	r3, #0
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3710      	adds	r7, #16
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b085      	sub	sp, #20
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	b2db      	uxtb	r3, r3
 8002fb2:	3b10      	subs	r3, #16
 8002fb4:	4a14      	ldr	r2, [pc, #80]	@ (8003008 <DMA_CalcBaseAndBitshift+0x64>)
 8002fb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fba:	091b      	lsrs	r3, r3, #4
 8002fbc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002fbe:	4a13      	ldr	r2, [pc, #76]	@ (800300c <DMA_CalcBaseAndBitshift+0x68>)
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2b03      	cmp	r3, #3
 8002fd0:	d909      	bls.n	8002fe6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002fda:	f023 0303 	bic.w	r3, r3, #3
 8002fde:	1d1a      	adds	r2, r3, #4
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	659a      	str	r2, [r3, #88]	@ 0x58
 8002fe4:	e007      	b.n	8002ff6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002fee:	f023 0303 	bic.w	r3, r3, #3
 8002ff2:	687a      	ldr	r2, [r7, #4]
 8002ff4:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3714      	adds	r7, #20
 8002ffe:	46bd      	mov	sp, r7
 8003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	aaaaaaab 	.word	0xaaaaaaab
 800300c:	0800b524 	.word	0x0800b524

08003010 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003010:	b480      	push	{r7}
 8003012:	b085      	sub	sp, #20
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003018:	2300      	movs	r3, #0
 800301a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003020:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	699b      	ldr	r3, [r3, #24]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d11f      	bne.n	800306a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800302a:	68bb      	ldr	r3, [r7, #8]
 800302c:	2b03      	cmp	r3, #3
 800302e:	d856      	bhi.n	80030de <DMA_CheckFifoParam+0xce>
 8003030:	a201      	add	r2, pc, #4	@ (adr r2, 8003038 <DMA_CheckFifoParam+0x28>)
 8003032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003036:	bf00      	nop
 8003038:	08003049 	.word	0x08003049
 800303c:	0800305b 	.word	0x0800305b
 8003040:	08003049 	.word	0x08003049
 8003044:	080030df 	.word	0x080030df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800304c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d046      	beq.n	80030e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003054:	2301      	movs	r3, #1
 8003056:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003058:	e043      	b.n	80030e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003062:	d140      	bne.n	80030e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003068:	e03d      	b.n	80030e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	699b      	ldr	r3, [r3, #24]
 800306e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003072:	d121      	bne.n	80030b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	2b03      	cmp	r3, #3
 8003078:	d837      	bhi.n	80030ea <DMA_CheckFifoParam+0xda>
 800307a:	a201      	add	r2, pc, #4	@ (adr r2, 8003080 <DMA_CheckFifoParam+0x70>)
 800307c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003080:	08003091 	.word	0x08003091
 8003084:	08003097 	.word	0x08003097
 8003088:	08003091 	.word	0x08003091
 800308c:	080030a9 	.word	0x080030a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	73fb      	strb	r3, [r7, #15]
      break;
 8003094:	e030      	b.n	80030f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d025      	beq.n	80030ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80030a6:	e022      	b.n	80030ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030ac:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80030b0:	d11f      	bne.n	80030f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80030b6:	e01c      	b.n	80030f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d903      	bls.n	80030c6 <DMA_CheckFifoParam+0xb6>
 80030be:	68bb      	ldr	r3, [r7, #8]
 80030c0:	2b03      	cmp	r3, #3
 80030c2:	d003      	beq.n	80030cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80030c4:	e018      	b.n	80030f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80030c6:	2301      	movs	r3, #1
 80030c8:	73fb      	strb	r3, [r7, #15]
      break;
 80030ca:	e015      	b.n	80030f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80030d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00e      	beq.n	80030f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80030d8:	2301      	movs	r3, #1
 80030da:	73fb      	strb	r3, [r7, #15]
      break;
 80030dc:	e00b      	b.n	80030f6 <DMA_CheckFifoParam+0xe6>
      break;
 80030de:	bf00      	nop
 80030e0:	e00a      	b.n	80030f8 <DMA_CheckFifoParam+0xe8>
      break;
 80030e2:	bf00      	nop
 80030e4:	e008      	b.n	80030f8 <DMA_CheckFifoParam+0xe8>
      break;
 80030e6:	bf00      	nop
 80030e8:	e006      	b.n	80030f8 <DMA_CheckFifoParam+0xe8>
      break;
 80030ea:	bf00      	nop
 80030ec:	e004      	b.n	80030f8 <DMA_CheckFifoParam+0xe8>
      break;
 80030ee:	bf00      	nop
 80030f0:	e002      	b.n	80030f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80030f2:	bf00      	nop
 80030f4:	e000      	b.n	80030f8 <DMA_CheckFifoParam+0xe8>
      break;
 80030f6:	bf00      	nop
    }
  } 
  
  return status; 
 80030f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80030fa:	4618      	mov	r0, r3
 80030fc:	3714      	adds	r7, #20
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop

08003108 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e03b      	b.n	8003192 <HAL_DMA2D_Init+0x8a>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8003120:	b2db      	uxtb	r3, r3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d106      	bne.n	8003134 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2200      	movs	r2, #0
 800312a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f7fd fe7e 	bl	8000e30 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2202      	movs	r2, #2
 8003138:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	685a      	ldr	r2, [r3, #4]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	430a      	orrs	r2, r1
 8003150:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003158:	f023 0107 	bic.w	r1, r3, #7
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	635a      	str	r2, [r3, #52]	@ 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800316e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8003172:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8003176:	687a      	ldr	r2, [r7, #4]
 8003178:	68d1      	ldr	r1, [r2, #12]
 800317a:	687a      	ldr	r2, [r7, #4]
 800317c:	6812      	ldr	r2, [r2, #0]
 800317e:	430b      	orrs	r3, r1
 8003180:	6413      	str	r3, [r2, #64]	@ 0x40


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8003190:	2300      	movs	r3, #0
}
 8003192:	4618      	mov	r0, r3
 8003194:	3708      	adds	r7, #8
 8003196:	46bd      	mov	sp, r7
 8003198:	bd80      	pop	{r7, pc}

0800319a <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800319a:	b580      	push	{r7, lr}
 800319c:	b086      	sub	sp, #24
 800319e:	af02      	add	r7, sp, #8
 80031a0:	60f8      	str	r0, [r7, #12]
 80031a2:	60b9      	str	r1, [r7, #8]
 80031a4:	607a      	str	r2, [r7, #4]
 80031a6:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d101      	bne.n	80031b6 <HAL_DMA2D_Start+0x1c>
 80031b2:	2302      	movs	r3, #2
 80031b4:	e018      	b.n	80031e8 <HAL_DMA2D_Start+0x4e>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2202      	movs	r2, #2
 80031c2:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	9300      	str	r3, [sp, #0]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	687a      	ldr	r2, [r7, #4]
 80031ce:	68b9      	ldr	r1, [r7, #8]
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f000 fa99 	bl	8003708 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f042 0201 	orr.w	r2, r2, #1
 80031e4:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}

080031f0 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0301 	and.w	r3, r3, #1
 8003208:	2b00      	cmp	r3, #0
 800320a:	d056      	beq.n	80032ba <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800320c:	f7ff fc90 	bl	8002b30 <HAL_GetTick>
 8003210:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8003212:	e04b      	b.n	80032ac <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8003222:	2b00      	cmp	r3, #0
 8003224:	d023      	beq.n	800326e <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	f003 0320 	and.w	r3, r3, #32
 800322c:	2b00      	cmp	r3, #0
 800322e:	d005      	beq.n	800323c <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003234:	f043 0202 	orr.w	r2, r3, #2
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	2b00      	cmp	r3, #0
 8003244:	d005      	beq.n	8003252 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800324a:	f043 0201 	orr.w	r2, r3, #1
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2221      	movs	r2, #33	@ 0x21
 8003258:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	2204      	movs	r2, #4
 800325e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e0a5      	b.n	80033ba <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003274:	d01a      	beq.n	80032ac <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003276:	f7ff fc5b 	bl	8002b30 <HAL_GetTick>
 800327a:	4602      	mov	r2, r0
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	1ad3      	subs	r3, r2, r3
 8003280:	683a      	ldr	r2, [r7, #0]
 8003282:	429a      	cmp	r2, r3
 8003284:	d302      	bcc.n	800328c <HAL_DMA2D_PollForTransfer+0x9c>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d10f      	bne.n	80032ac <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003290:	f043 0220 	orr.w	r2, r3, #32
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2203      	movs	r2, #3
 800329c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2200      	movs	r2, #0
 80032a4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e086      	b.n	80033ba <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d0ac      	beq.n	8003214 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	f003 0320 	and.w	r3, r3, #32
 80032c4:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032cc:	f003 0320 	and.w	r3, r3, #32
 80032d0:	693a      	ldr	r2, [r7, #16]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d061      	beq.n	80033a0 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 80032dc:	f7ff fc28 	bl	8002b30 <HAL_GetTick>
 80032e0:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 80032e2:	e056      	b.n	8003392 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d02e      	beq.n	8003354 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f003 0308 	and.w	r3, r3, #8
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003304:	f043 0204 	orr.w	r2, r3, #4
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f003 0320 	and.w	r3, r3, #32
 8003312:	2b00      	cmp	r3, #0
 8003314:	d005      	beq.n	8003322 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800331a:	f043 0202 	orr.w	r2, r3, #2
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	f003 0301 	and.w	r3, r3, #1
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003330:	f043 0201 	orr.w	r2, r3, #1
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	2229      	movs	r2, #41	@ 0x29
 800333e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2204      	movs	r2, #4
 8003344:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2200      	movs	r2, #0
 800334c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

        return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e032      	b.n	80033ba <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	f1b3 3fff 	cmp.w	r3, #4294967295
 800335a:	d01a      	beq.n	8003392 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800335c:	f7ff fbe8 	bl	8002b30 <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	429a      	cmp	r2, r3
 800336a:	d302      	bcc.n	8003372 <HAL_DMA2D_PollForTransfer+0x182>
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d10f      	bne.n	8003392 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003376:	f043 0220 	orr.w	r2, r3, #32
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2203      	movs	r2, #3
 8003382:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2200      	movs	r2, #0
 800338a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

          return HAL_TIMEOUT;
 800338e:	2303      	movs	r3, #3
 8003390:	e013      	b.n	80033ba <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	f003 0310 	and.w	r3, r3, #16
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0a1      	beq.n	80032e4 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2212      	movs	r2, #18
 80033a6:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3718      	adds	r7, #24
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_DMA2D_IRQHandler>:
  * @param  hdma2d Pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
void HAL_DMA2D_IRQHandler(DMA2D_HandleTypeDef *hdma2d)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b084      	sub	sp, #16
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	60fb      	str	r3, [r7, #12]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d026      	beq.n	8003432 <HAL_DMA2D_IRQHandler+0x70>
  {
    if ((crflags & DMA2D_IT_TE) != 0U)
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d021      	beq.n	8003432 <HAL_DMA2D_IRQHandler+0x70>
    {
      /* Disable the transfer Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	681a      	ldr	r2, [r3, #0]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80033fc:	601a      	str	r2, [r3, #0]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003402:	f043 0201 	orr.w	r2, r3, #1
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Clear the transfer error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2201      	movs	r2, #1
 8003410:	609a      	str	r2, [r3, #8]

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2204      	movs	r2, #4
 8003416:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	695b      	ldr	r3, [r3, #20]
 8003426:	2b00      	cmp	r3, #0
 8003428:	d003      	beq.n	8003432 <HAL_DMA2D_IRQHandler+0x70>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	695b      	ldr	r3, [r3, #20]
 800342e:	6878      	ldr	r0, [r7, #4]
 8003430:	4798      	blx	r3
      }
    }
  }
  /* Configuration Error Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f003 0320 	and.w	r3, r3, #32
 8003438:	2b00      	cmp	r3, #0
 800343a:	d026      	beq.n	800348a <HAL_DMA2D_IRQHandler+0xc8>
  {
    if ((crflags & DMA2D_IT_CE) != 0U)
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003442:	2b00      	cmp	r3, #0
 8003444:	d021      	beq.n	800348a <HAL_DMA2D_IRQHandler+0xc8>
    {
      /* Disable the Configuration Error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003454:	601a      	str	r2, [r3, #0]

      /* Clear the Configuration error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2220      	movs	r2, #32
 800345c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003462:	f043 0202 	orr.w	r2, r3, #2
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2204      	movs	r2, #4
 800346e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	695b      	ldr	r3, [r3, #20]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d003      	beq.n	800348a <HAL_DMA2D_IRQHandler+0xc8>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	695b      	ldr	r3, [r3, #20]
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	4798      	blx	r3
      }
    }
  }
  /* CLUT access Error Interrupt management ***********************************/
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	2b00      	cmp	r3, #0
 8003492:	d026      	beq.n	80034e2 <HAL_DMA2D_IRQHandler+0x120>
  {
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8003494:	68bb      	ldr	r3, [r7, #8]
 8003496:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800349a:	2b00      	cmp	r3, #0
 800349c:	d021      	beq.n	80034e2 <HAL_DMA2D_IRQHandler+0x120>
    {
      /* Disable the CLUT access error interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681a      	ldr	r2, [r3, #0]
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034ac:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT access error flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	2208      	movs	r2, #8
 80034b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034ba:	f043 0204 	orr.w	r2, r3, #4
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2204      	movs	r2, #4
 80034c6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferErrorCallback != NULL)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d003      	beq.n	80034e2 <HAL_DMA2D_IRQHandler+0x120>
      {
        /* Transfer error Callback */
        hdma2d->XferErrorCallback(hdma2d);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	695b      	ldr	r3, [r3, #20]
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	4798      	blx	r3
      }
    }
  }
  /* Transfer watermark Interrupt management **********************************/
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d013      	beq.n	8003514 <HAL_DMA2D_IRQHandler+0x152>
  {
    if ((crflags & DMA2D_IT_TW) != 0U)
 80034ec:	68bb      	ldr	r3, [r7, #8]
 80034ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00e      	beq.n	8003514 <HAL_DMA2D_IRQHandler+0x152>
    {
      /* Disable the transfer watermark interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003504:	601a      	str	r2, [r3, #0]

      /* Clear the transfer watermark flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	2204      	movs	r2, #4
 800350c:	609a      	str	r2, [r3, #8]

      /* Transfer watermark Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->LineEventCallback(hdma2d);
#else
      HAL_DMA2D_LineEventCallback(hdma2d);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 f853 	bl	80035ba <HAL_DMA2D_LineEventCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */

    }
  }
  /* Transfer Complete Interrupt management ************************************/
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d024      	beq.n	8003568 <HAL_DMA2D_IRQHandler+0x1a6>
  {
    if ((crflags & DMA2D_IT_TC) != 0U)
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003524:	2b00      	cmp	r3, #0
 8003526:	d01f      	beq.n	8003568 <HAL_DMA2D_IRQHandler+0x1a6>
    {
      /* Disable the transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003536:	601a      	str	r2, [r3, #0]

      /* Clear the transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	2202      	movs	r2, #2
 800353e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      if (hdma2d->XferCpltCallback != NULL)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	691b      	ldr	r3, [r3, #16]
 800355c:	2b00      	cmp	r3, #0
 800355e:	d003      	beq.n	8003568 <HAL_DMA2D_IRQHandler+0x1a6>
      {
        /* Transfer complete Callback */
        hdma2d->XferCpltCallback(hdma2d);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	6878      	ldr	r0, [r7, #4]
 8003566:	4798      	blx	r3
      }
    }
  }
  /* CLUT Transfer Complete Interrupt management ******************************/
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	f003 0310 	and.w	r3, r3, #16
 800356e:	2b00      	cmp	r3, #0
 8003570:	d01f      	beq.n	80035b2 <HAL_DMA2D_IRQHandler+0x1f0>
  {
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003578:	2b00      	cmp	r3, #0
 800357a:	d01a      	beq.n	80035b2 <HAL_DMA2D_IRQHandler+0x1f0>
    {
      /* Disable the CLUT transfer complete interrupt */
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800358a:	601a      	str	r2, [r3, #0]

      /* Clear the CLUT transfer complete flag */
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	2210      	movs	r2, #16
 8003592:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Change DMA2D state */
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

      /* Process Unlocked */
      __HAL_UNLOCK(hdma2d);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

      /* CLUT Transfer complete Callback */
#if (USE_HAL_DMA2D_REGISTER_CALLBACKS == 1)
      hdma2d->CLUTLoadingCpltCallback(hdma2d);
#else
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80035ac:	6878      	ldr	r0, [r7, #4]
 80035ae:	f000 f80e 	bl	80035ce <HAL_DMA2D_CLUTLoadingCpltCallback>
#endif /* USE_HAL_DMA2D_REGISTER_CALLBACKS */
    }
  }

}
 80035b2:	bf00      	nop
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}

080035ba <HAL_DMA2D_LineEventCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80035ba:	b480      	push	{r7}
 80035bc:	b083      	sub	sp, #12
 80035be:	af00      	add	r7, sp, #0
 80035c0:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_LineEventCallback can be implemented in the user file.
   */
}
 80035c2:	bf00      	nop
 80035c4:	370c      	adds	r7, #12
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
{
 80035ce:	b480      	push	{r7}
 80035d0:	b083      	sub	sp, #12
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_CLUTLoadingCpltCallback can be implemented in the user file.
   */
}
 80035d6:	bf00      	nop
 80035d8:	370c      	adds	r7, #12
 80035da:	46bd      	mov	sp, r7
 80035dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e0:	4770      	bx	lr
	...

080035e4 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80035e4:	b480      	push	{r7}
 80035e6:	b087      	sub	sp, #28
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
 80035ec:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
      assert_param(IS_DMA2D_ALPHA_MODE(hdma2d->LayerCfg[LayerIdx].AlphaMode));
    }
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80035fc:	2b01      	cmp	r3, #1
 80035fe:	d101      	bne.n	8003604 <HAL_DMA2D_ConfigLayer+0x20>
 8003600:	2302      	movs	r3, #2
 8003602:	e079      	b.n	80036f8 <HAL_DMA2D_ConfigLayer+0x114>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2202      	movs	r2, #2
 8003610:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	011b      	lsls	r3, r3, #4
 8003618:	3318      	adds	r3, #24
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	4413      	add	r3, r2
 800361e:	613b      	str	r3, [r7, #16]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	685a      	ldr	r2, [r3, #4]
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	689b      	ldr	r3, [r3, #8]
 8003628:	041b      	lsls	r3, r3, #16
 800362a:	4313      	orrs	r3, r2
 800362c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 800362e:	4b35      	ldr	r3, [pc, #212]	@ (8003704 <HAL_DMA2D_ConfigLayer+0x120>)
 8003630:	60fb      	str	r3, [r7, #12]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003632:	693b      	ldr	r3, [r7, #16]
 8003634:	685b      	ldr	r3, [r3, #4]
 8003636:	2b0a      	cmp	r3, #10
 8003638:	d003      	beq.n	8003642 <HAL_DMA2D_ConfigLayer+0x5e>
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	2b09      	cmp	r3, #9
 8003640:	d107      	bne.n	8003652 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8003642:	693b      	ldr	r3, [r7, #16]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	4313      	orrs	r3, r2
 800364e:	617b      	str	r3, [r7, #20]
 8003650:	e005      	b.n	800365e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	061b      	lsls	r3, r3, #24
 8003658:	697a      	ldr	r2, [r7, #20]
 800365a:	4313      	orrs	r3, r2
 800365c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d120      	bne.n	80036a6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	43db      	mvns	r3, r3
 800366e:	ea02 0103 	and.w	r1, r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	430a      	orrs	r2, r1
 800367a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	693a      	ldr	r2, [r7, #16]
 8003682:	6812      	ldr	r2, [r2, #0]
 8003684:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8003686:	693b      	ldr	r3, [r7, #16]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	2b0a      	cmp	r3, #10
 800368c:	d003      	beq.n	8003696 <HAL_DMA2D_ConfigLayer+0xb2>
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	2b09      	cmp	r3, #9
 8003694:	d127      	bne.n	80036e6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	68da      	ldr	r2, [r3, #12]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80036a2:	629a      	str	r2, [r3, #40]	@ 0x28
 80036a4:	e01f      	b.n	80036e6 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	69da      	ldr	r2, [r3, #28]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	43db      	mvns	r3, r3
 80036b0:	ea02 0103 	and.w	r1, r2, r3
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	693a      	ldr	r2, [r7, #16]
 80036c4:	6812      	ldr	r2, [r2, #0]
 80036c6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	2b0a      	cmp	r3, #10
 80036ce:	d003      	beq.n	80036d8 <HAL_DMA2D_ConfigLayer+0xf4>
 80036d0:	693b      	ldr	r3, [r7, #16]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	2b09      	cmp	r3, #9
 80036d6:	d106      	bne.n	80036e6 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80036d8:	693b      	ldr	r3, [r7, #16]
 80036da:	68da      	ldr	r2, [r3, #12]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80036e4:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2200      	movs	r2, #0
 80036f2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80036f6:	2300      	movs	r3, #0
}
 80036f8:	4618      	mov	r0, r3
 80036fa:	371c      	adds	r7, #28
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr
 8003704:	ff03000f 	.word	0xff03000f

08003708 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8003708:	b480      	push	{r7}
 800370a:	b08b      	sub	sp, #44	@ 0x2c
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	60b9      	str	r1, [r7, #8]
 8003712:	607a      	str	r2, [r7, #4]
 8003714:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800371c:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	041a      	lsls	r2, r3, #16
 8003724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003726:	431a      	orrs	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003740:	d174      	bne.n	800382c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8003748:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8003750:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8003752:	68bb      	ldr	r3, [r7, #8]
 8003754:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8003758:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	b2db      	uxtb	r3, r3
 800375e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d108      	bne.n	800377a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8003768:	69ba      	ldr	r2, [r7, #24]
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	431a      	orrs	r2, r3
 800376e:	6a3b      	ldr	r3, [r7, #32]
 8003770:	4313      	orrs	r3, r2
 8003772:	697a      	ldr	r2, [r7, #20]
 8003774:	4313      	orrs	r3, r2
 8003776:	627b      	str	r3, [r7, #36]	@ 0x24
 8003778:	e053      	b.n	8003822 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d106      	bne.n	8003790 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8003782:	69ba      	ldr	r2, [r7, #24]
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	4313      	orrs	r3, r2
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	4313      	orrs	r3, r2
 800378c:	627b      	str	r3, [r7, #36]	@ 0x24
 800378e:	e048      	b.n	8003822 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	2b02      	cmp	r3, #2
 8003796:	d111      	bne.n	80037bc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8003798:	69fb      	ldr	r3, [r7, #28]
 800379a:	0cdb      	lsrs	r3, r3, #19
 800379c:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	0a9b      	lsrs	r3, r3, #10
 80037a2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	08db      	lsrs	r3, r3, #3
 80037a8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	015a      	lsls	r2, r3, #5
 80037ae:	69fb      	ldr	r3, [r7, #28]
 80037b0:	02db      	lsls	r3, r3, #11
 80037b2:	4313      	orrs	r3, r2
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80037ba:	e032      	b.n	8003822 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	689b      	ldr	r3, [r3, #8]
 80037c0:	2b03      	cmp	r3, #3
 80037c2:	d117      	bne.n	80037f4 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80037c4:	6a3b      	ldr	r3, [r7, #32]
 80037c6:	0fdb      	lsrs	r3, r3, #31
 80037c8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80037ca:	69fb      	ldr	r3, [r7, #28]
 80037cc:	0cdb      	lsrs	r3, r3, #19
 80037ce:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80037d0:	69bb      	ldr	r3, [r7, #24]
 80037d2:	0adb      	lsrs	r3, r3, #11
 80037d4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	08db      	lsrs	r3, r3, #3
 80037da:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	015a      	lsls	r2, r3, #5
 80037e0:	69fb      	ldr	r3, [r7, #28]
 80037e2:	029b      	lsls	r3, r3, #10
 80037e4:	431a      	orrs	r2, r3
 80037e6:	6a3b      	ldr	r3, [r7, #32]
 80037e8:	03db      	lsls	r3, r3, #15
 80037ea:	4313      	orrs	r3, r2
 80037ec:	697a      	ldr	r2, [r7, #20]
 80037ee:	4313      	orrs	r3, r2
 80037f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80037f2:	e016      	b.n	8003822 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	0f1b      	lsrs	r3, r3, #28
 80037f8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 80037fa:	69fb      	ldr	r3, [r7, #28]
 80037fc:	0d1b      	lsrs	r3, r3, #20
 80037fe:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	0b1b      	lsrs	r3, r3, #12
 8003804:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	091b      	lsrs	r3, r3, #4
 800380a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	011a      	lsls	r2, r3, #4
 8003810:	69fb      	ldr	r3, [r7, #28]
 8003812:	021b      	lsls	r3, r3, #8
 8003814:	431a      	orrs	r2, r3
 8003816:	6a3b      	ldr	r3, [r7, #32]
 8003818:	031b      	lsls	r3, r3, #12
 800381a:	4313      	orrs	r3, r2
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	4313      	orrs	r3, r2
 8003820:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003828:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800382a:	e003      	b.n	8003834 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	60da      	str	r2, [r3, #12]
}
 8003834:	bf00      	nop
 8003836:	372c      	adds	r7, #44	@ 0x2c
 8003838:	46bd      	mov	sp, r7
 800383a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383e:	4770      	bx	lr

08003840 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003840:	b480      	push	{r7}
 8003842:	b089      	sub	sp, #36	@ 0x24
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800384a:	2300      	movs	r3, #0
 800384c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800384e:	2300      	movs	r3, #0
 8003850:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003852:	2300      	movs	r3, #0
 8003854:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003856:	2300      	movs	r3, #0
 8003858:	61fb      	str	r3, [r7, #28]
 800385a:	e177      	b.n	8003b4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800385c:	2201      	movs	r2, #1
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	4013      	ands	r3, r2
 800386e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003870:	693a      	ldr	r2, [r7, #16]
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	429a      	cmp	r2, r3
 8003876:	f040 8166 	bne.w	8003b46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	f003 0303 	and.w	r3, r3, #3
 8003882:	2b01      	cmp	r3, #1
 8003884:	d005      	beq.n	8003892 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800388e:	2b02      	cmp	r3, #2
 8003890:	d130      	bne.n	80038f4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003898:	69fb      	ldr	r3, [r7, #28]
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	2203      	movs	r2, #3
 800389e:	fa02 f303 	lsl.w	r3, r2, r3
 80038a2:	43db      	mvns	r3, r3
 80038a4:	69ba      	ldr	r2, [r7, #24]
 80038a6:	4013      	ands	r3, r2
 80038a8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	68da      	ldr	r2, [r3, #12]
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	005b      	lsls	r3, r3, #1
 80038b2:	fa02 f303 	lsl.w	r3, r2, r3
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	4313      	orrs	r3, r2
 80038ba:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	69ba      	ldr	r2, [r7, #24]
 80038c0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038c8:	2201      	movs	r2, #1
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	fa02 f303 	lsl.w	r3, r2, r3
 80038d0:	43db      	mvns	r3, r3
 80038d2:	69ba      	ldr	r2, [r7, #24]
 80038d4:	4013      	ands	r3, r2
 80038d6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	091b      	lsrs	r3, r3, #4
 80038de:	f003 0201 	and.w	r2, r3, #1
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	69ba      	ldr	r2, [r7, #24]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	f003 0303 	and.w	r3, r3, #3
 80038fc:	2b03      	cmp	r3, #3
 80038fe:	d017      	beq.n	8003930 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003906:	69fb      	ldr	r3, [r7, #28]
 8003908:	005b      	lsls	r3, r3, #1
 800390a:	2203      	movs	r2, #3
 800390c:	fa02 f303 	lsl.w	r3, r2, r3
 8003910:	43db      	mvns	r3, r3
 8003912:	69ba      	ldr	r2, [r7, #24]
 8003914:	4013      	ands	r3, r2
 8003916:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	689a      	ldr	r2, [r3, #8]
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	005b      	lsls	r3, r3, #1
 8003920:	fa02 f303 	lsl.w	r3, r2, r3
 8003924:	69ba      	ldr	r2, [r7, #24]
 8003926:	4313      	orrs	r3, r2
 8003928:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69ba      	ldr	r2, [r7, #24]
 800392e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 0303 	and.w	r3, r3, #3
 8003938:	2b02      	cmp	r3, #2
 800393a:	d123      	bne.n	8003984 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	08da      	lsrs	r2, r3, #3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	3208      	adds	r2, #8
 8003944:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003948:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800394a:	69fb      	ldr	r3, [r7, #28]
 800394c:	f003 0307 	and.w	r3, r3, #7
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	220f      	movs	r2, #15
 8003954:	fa02 f303 	lsl.w	r3, r2, r3
 8003958:	43db      	mvns	r3, r3
 800395a:	69ba      	ldr	r2, [r7, #24]
 800395c:	4013      	ands	r3, r2
 800395e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	691a      	ldr	r2, [r3, #16]
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f003 0307 	and.w	r3, r3, #7
 800396a:	009b      	lsls	r3, r3, #2
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	4313      	orrs	r3, r2
 8003974:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	08da      	lsrs	r2, r3, #3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	3208      	adds	r2, #8
 800397e:	69b9      	ldr	r1, [r7, #24]
 8003980:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	005b      	lsls	r3, r3, #1
 800398e:	2203      	movs	r2, #3
 8003990:	fa02 f303 	lsl.w	r3, r2, r3
 8003994:	43db      	mvns	r3, r3
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4013      	ands	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	f003 0203 	and.w	r2, r3, #3
 80039a4:	69fb      	ldr	r3, [r7, #28]
 80039a6:	005b      	lsls	r3, r3, #1
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	69ba      	ldr	r2, [r7, #24]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039b8:	683b      	ldr	r3, [r7, #0]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	f000 80c0 	beq.w	8003b46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039c6:	2300      	movs	r3, #0
 80039c8:	60fb      	str	r3, [r7, #12]
 80039ca:	4b66      	ldr	r3, [pc, #408]	@ (8003b64 <HAL_GPIO_Init+0x324>)
 80039cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ce:	4a65      	ldr	r2, [pc, #404]	@ (8003b64 <HAL_GPIO_Init+0x324>)
 80039d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80039d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80039d6:	4b63      	ldr	r3, [pc, #396]	@ (8003b64 <HAL_GPIO_Init+0x324>)
 80039d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039e2:	4a61      	ldr	r2, [pc, #388]	@ (8003b68 <HAL_GPIO_Init+0x328>)
 80039e4:	69fb      	ldr	r3, [r7, #28]
 80039e6:	089b      	lsrs	r3, r3, #2
 80039e8:	3302      	adds	r3, #2
 80039ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80039f0:	69fb      	ldr	r3, [r7, #28]
 80039f2:	f003 0303 	and.w	r3, r3, #3
 80039f6:	009b      	lsls	r3, r3, #2
 80039f8:	220f      	movs	r2, #15
 80039fa:	fa02 f303 	lsl.w	r3, r2, r3
 80039fe:	43db      	mvns	r3, r3
 8003a00:	69ba      	ldr	r2, [r7, #24]
 8003a02:	4013      	ands	r3, r2
 8003a04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a58      	ldr	r2, [pc, #352]	@ (8003b6c <HAL_GPIO_Init+0x32c>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d037      	beq.n	8003a7e <HAL_GPIO_Init+0x23e>
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	4a57      	ldr	r2, [pc, #348]	@ (8003b70 <HAL_GPIO_Init+0x330>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d031      	beq.n	8003a7a <HAL_GPIO_Init+0x23a>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a56      	ldr	r2, [pc, #344]	@ (8003b74 <HAL_GPIO_Init+0x334>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d02b      	beq.n	8003a76 <HAL_GPIO_Init+0x236>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a55      	ldr	r2, [pc, #340]	@ (8003b78 <HAL_GPIO_Init+0x338>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d025      	beq.n	8003a72 <HAL_GPIO_Init+0x232>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a54      	ldr	r2, [pc, #336]	@ (8003b7c <HAL_GPIO_Init+0x33c>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d01f      	beq.n	8003a6e <HAL_GPIO_Init+0x22e>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a53      	ldr	r2, [pc, #332]	@ (8003b80 <HAL_GPIO_Init+0x340>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d019      	beq.n	8003a6a <HAL_GPIO_Init+0x22a>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a52      	ldr	r2, [pc, #328]	@ (8003b84 <HAL_GPIO_Init+0x344>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d013      	beq.n	8003a66 <HAL_GPIO_Init+0x226>
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	4a51      	ldr	r2, [pc, #324]	@ (8003b88 <HAL_GPIO_Init+0x348>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d00d      	beq.n	8003a62 <HAL_GPIO_Init+0x222>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	4a50      	ldr	r2, [pc, #320]	@ (8003b8c <HAL_GPIO_Init+0x34c>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d007      	beq.n	8003a5e <HAL_GPIO_Init+0x21e>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a4f      	ldr	r2, [pc, #316]	@ (8003b90 <HAL_GPIO_Init+0x350>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d101      	bne.n	8003a5a <HAL_GPIO_Init+0x21a>
 8003a56:	2309      	movs	r3, #9
 8003a58:	e012      	b.n	8003a80 <HAL_GPIO_Init+0x240>
 8003a5a:	230a      	movs	r3, #10
 8003a5c:	e010      	b.n	8003a80 <HAL_GPIO_Init+0x240>
 8003a5e:	2308      	movs	r3, #8
 8003a60:	e00e      	b.n	8003a80 <HAL_GPIO_Init+0x240>
 8003a62:	2307      	movs	r3, #7
 8003a64:	e00c      	b.n	8003a80 <HAL_GPIO_Init+0x240>
 8003a66:	2306      	movs	r3, #6
 8003a68:	e00a      	b.n	8003a80 <HAL_GPIO_Init+0x240>
 8003a6a:	2305      	movs	r3, #5
 8003a6c:	e008      	b.n	8003a80 <HAL_GPIO_Init+0x240>
 8003a6e:	2304      	movs	r3, #4
 8003a70:	e006      	b.n	8003a80 <HAL_GPIO_Init+0x240>
 8003a72:	2303      	movs	r3, #3
 8003a74:	e004      	b.n	8003a80 <HAL_GPIO_Init+0x240>
 8003a76:	2302      	movs	r3, #2
 8003a78:	e002      	b.n	8003a80 <HAL_GPIO_Init+0x240>
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e000      	b.n	8003a80 <HAL_GPIO_Init+0x240>
 8003a7e:	2300      	movs	r3, #0
 8003a80:	69fa      	ldr	r2, [r7, #28]
 8003a82:	f002 0203 	and.w	r2, r2, #3
 8003a86:	0092      	lsls	r2, r2, #2
 8003a88:	4093      	lsls	r3, r2
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	4313      	orrs	r3, r2
 8003a8e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a90:	4935      	ldr	r1, [pc, #212]	@ (8003b68 <HAL_GPIO_Init+0x328>)
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	089b      	lsrs	r3, r3, #2
 8003a96:	3302      	adds	r3, #2
 8003a98:	69ba      	ldr	r2, [r7, #24]
 8003a9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a9e:	4b3d      	ldr	r3, [pc, #244]	@ (8003b94 <HAL_GPIO_Init+0x354>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa4:	693b      	ldr	r3, [r7, #16]
 8003aa6:	43db      	mvns	r3, r3
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003ac2:	4a34      	ldr	r2, [pc, #208]	@ (8003b94 <HAL_GPIO_Init+0x354>)
 8003ac4:	69bb      	ldr	r3, [r7, #24]
 8003ac6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ac8:	4b32      	ldr	r3, [pc, #200]	@ (8003b94 <HAL_GPIO_Init+0x354>)
 8003aca:	68db      	ldr	r3, [r3, #12]
 8003acc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	43db      	mvns	r3, r3
 8003ad2:	69ba      	ldr	r2, [r7, #24]
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	685b      	ldr	r3, [r3, #4]
 8003adc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d003      	beq.n	8003aec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003aec:	4a29      	ldr	r2, [pc, #164]	@ (8003b94 <HAL_GPIO_Init+0x354>)
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003af2:	4b28      	ldr	r3, [pc, #160]	@ (8003b94 <HAL_GPIO_Init+0x354>)
 8003af4:	685b      	ldr	r3, [r3, #4]
 8003af6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	43db      	mvns	r3, r3
 8003afc:	69ba      	ldr	r2, [r7, #24]
 8003afe:	4013      	ands	r3, r2
 8003b00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d003      	beq.n	8003b16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	4313      	orrs	r3, r2
 8003b14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b16:	4a1f      	ldr	r2, [pc, #124]	@ (8003b94 <HAL_GPIO_Init+0x354>)
 8003b18:	69bb      	ldr	r3, [r7, #24]
 8003b1a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b1c:	4b1d      	ldr	r3, [pc, #116]	@ (8003b94 <HAL_GPIO_Init+0x354>)
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	43db      	mvns	r3, r3
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d003      	beq.n	8003b40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b40:	4a14      	ldr	r2, [pc, #80]	@ (8003b94 <HAL_GPIO_Init+0x354>)
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b46:	69fb      	ldr	r3, [r7, #28]
 8003b48:	3301      	adds	r3, #1
 8003b4a:	61fb      	str	r3, [r7, #28]
 8003b4c:	69fb      	ldr	r3, [r7, #28]
 8003b4e:	2b0f      	cmp	r3, #15
 8003b50:	f67f ae84 	bls.w	800385c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b54:	bf00      	nop
 8003b56:	bf00      	nop
 8003b58:	3724      	adds	r7, #36	@ 0x24
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40023800 	.word	0x40023800
 8003b68:	40013800 	.word	0x40013800
 8003b6c:	40020000 	.word	0x40020000
 8003b70:	40020400 	.word	0x40020400
 8003b74:	40020800 	.word	0x40020800
 8003b78:	40020c00 	.word	0x40020c00
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	40021400 	.word	0x40021400
 8003b84:	40021800 	.word	0x40021800
 8003b88:	40021c00 	.word	0x40021c00
 8003b8c:	40022000 	.word	0x40022000
 8003b90:	40022400 	.word	0x40022400
 8003b94:	40013c00 	.word	0x40013c00

08003b98 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b087      	sub	sp, #28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
 8003ba0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 8003baa:	2300      	movs	r3, #0
 8003bac:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bae:	2300      	movs	r3, #0
 8003bb0:	617b      	str	r3, [r7, #20]
 8003bb2:	e0d9      	b.n	8003d68 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003bb4:	2201      	movs	r2, #1
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bbc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 8003bbe:	683a      	ldr	r2, [r7, #0]
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	4013      	ands	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8003bc6:	68fa      	ldr	r2, [r7, #12]
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	429a      	cmp	r2, r3
 8003bcc:	f040 80c9 	bne.w	8003d62 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 8003bd0:	4a6b      	ldr	r2, [pc, #428]	@ (8003d80 <HAL_GPIO_DeInit+0x1e8>)
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	089b      	lsrs	r3, r3, #2
 8003bd6:	3302      	adds	r3, #2
 8003bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bdc:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	f003 0303 	and.w	r3, r3, #3
 8003be4:	009b      	lsls	r3, r3, #2
 8003be6:	220f      	movs	r2, #15
 8003be8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a63      	ldr	r2, [pc, #396]	@ (8003d84 <HAL_GPIO_DeInit+0x1ec>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d037      	beq.n	8003c6a <HAL_GPIO_DeInit+0xd2>
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a62      	ldr	r2, [pc, #392]	@ (8003d88 <HAL_GPIO_DeInit+0x1f0>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d031      	beq.n	8003c66 <HAL_GPIO_DeInit+0xce>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	4a61      	ldr	r2, [pc, #388]	@ (8003d8c <HAL_GPIO_DeInit+0x1f4>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d02b      	beq.n	8003c62 <HAL_GPIO_DeInit+0xca>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a60      	ldr	r2, [pc, #384]	@ (8003d90 <HAL_GPIO_DeInit+0x1f8>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d025      	beq.n	8003c5e <HAL_GPIO_DeInit+0xc6>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a5f      	ldr	r2, [pc, #380]	@ (8003d94 <HAL_GPIO_DeInit+0x1fc>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d01f      	beq.n	8003c5a <HAL_GPIO_DeInit+0xc2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a5e      	ldr	r2, [pc, #376]	@ (8003d98 <HAL_GPIO_DeInit+0x200>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d019      	beq.n	8003c56 <HAL_GPIO_DeInit+0xbe>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a5d      	ldr	r2, [pc, #372]	@ (8003d9c <HAL_GPIO_DeInit+0x204>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d013      	beq.n	8003c52 <HAL_GPIO_DeInit+0xba>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a5c      	ldr	r2, [pc, #368]	@ (8003da0 <HAL_GPIO_DeInit+0x208>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d00d      	beq.n	8003c4e <HAL_GPIO_DeInit+0xb6>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a5b      	ldr	r2, [pc, #364]	@ (8003da4 <HAL_GPIO_DeInit+0x20c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d007      	beq.n	8003c4a <HAL_GPIO_DeInit+0xb2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a5a      	ldr	r2, [pc, #360]	@ (8003da8 <HAL_GPIO_DeInit+0x210>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d101      	bne.n	8003c46 <HAL_GPIO_DeInit+0xae>
 8003c42:	2309      	movs	r3, #9
 8003c44:	e012      	b.n	8003c6c <HAL_GPIO_DeInit+0xd4>
 8003c46:	230a      	movs	r3, #10
 8003c48:	e010      	b.n	8003c6c <HAL_GPIO_DeInit+0xd4>
 8003c4a:	2308      	movs	r3, #8
 8003c4c:	e00e      	b.n	8003c6c <HAL_GPIO_DeInit+0xd4>
 8003c4e:	2307      	movs	r3, #7
 8003c50:	e00c      	b.n	8003c6c <HAL_GPIO_DeInit+0xd4>
 8003c52:	2306      	movs	r3, #6
 8003c54:	e00a      	b.n	8003c6c <HAL_GPIO_DeInit+0xd4>
 8003c56:	2305      	movs	r3, #5
 8003c58:	e008      	b.n	8003c6c <HAL_GPIO_DeInit+0xd4>
 8003c5a:	2304      	movs	r3, #4
 8003c5c:	e006      	b.n	8003c6c <HAL_GPIO_DeInit+0xd4>
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e004      	b.n	8003c6c <HAL_GPIO_DeInit+0xd4>
 8003c62:	2302      	movs	r3, #2
 8003c64:	e002      	b.n	8003c6c <HAL_GPIO_DeInit+0xd4>
 8003c66:	2301      	movs	r3, #1
 8003c68:	e000      	b.n	8003c6c <HAL_GPIO_DeInit+0xd4>
 8003c6a:	2300      	movs	r3, #0
 8003c6c:	697a      	ldr	r2, [r7, #20]
 8003c6e:	f002 0203 	and.w	r2, r2, #3
 8003c72:	0092      	lsls	r2, r2, #2
 8003c74:	4093      	lsls	r3, r2
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d132      	bne.n	8003ce2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8003c7c:	4b4b      	ldr	r3, [pc, #300]	@ (8003dac <HAL_GPIO_DeInit+0x214>)
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	43db      	mvns	r3, r3
 8003c84:	4949      	ldr	r1, [pc, #292]	@ (8003dac <HAL_GPIO_DeInit+0x214>)
 8003c86:	4013      	ands	r3, r2
 8003c88:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8003c8a:	4b48      	ldr	r3, [pc, #288]	@ (8003dac <HAL_GPIO_DeInit+0x214>)
 8003c8c:	685a      	ldr	r2, [r3, #4]
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	43db      	mvns	r3, r3
 8003c92:	4946      	ldr	r1, [pc, #280]	@ (8003dac <HAL_GPIO_DeInit+0x214>)
 8003c94:	4013      	ands	r3, r2
 8003c96:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8003c98:	4b44      	ldr	r3, [pc, #272]	@ (8003dac <HAL_GPIO_DeInit+0x214>)
 8003c9a:	68da      	ldr	r2, [r3, #12]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	43db      	mvns	r3, r3
 8003ca0:	4942      	ldr	r1, [pc, #264]	@ (8003dac <HAL_GPIO_DeInit+0x214>)
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8003ca6:	4b41      	ldr	r3, [pc, #260]	@ (8003dac <HAL_GPIO_DeInit+0x214>)
 8003ca8:	689a      	ldr	r2, [r3, #8]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	43db      	mvns	r3, r3
 8003cae:	493f      	ldr	r1, [pc, #252]	@ (8003dac <HAL_GPIO_DeInit+0x214>)
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	220f      	movs	r2, #15
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8003cc4:	4a2e      	ldr	r2, [pc, #184]	@ (8003d80 <HAL_GPIO_DeInit+0x1e8>)
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	089b      	lsrs	r3, r3, #2
 8003cca:	3302      	adds	r3, #2
 8003ccc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	43da      	mvns	r2, r3
 8003cd4:	482a      	ldr	r0, [pc, #168]	@ (8003d80 <HAL_GPIO_DeInit+0x1e8>)
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	089b      	lsrs	r3, r3, #2
 8003cda:	400a      	ands	r2, r1
 8003cdc:	3302      	adds	r3, #2
 8003cde:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	2103      	movs	r1, #3
 8003cec:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf0:	43db      	mvns	r3, r3
 8003cf2:	401a      	ands	r2, r3
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003cf8:	697b      	ldr	r3, [r7, #20]
 8003cfa:	08da      	lsrs	r2, r3, #3
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	3208      	adds	r2, #8
 8003d00:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	f003 0307 	and.w	r3, r3, #7
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	220f      	movs	r2, #15
 8003d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003d12:	43db      	mvns	r3, r3
 8003d14:	697a      	ldr	r2, [r7, #20]
 8003d16:	08d2      	lsrs	r2, r2, #3
 8003d18:	4019      	ands	r1, r3
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	3208      	adds	r2, #8
 8003d1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68da      	ldr	r2, [r3, #12]
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	005b      	lsls	r3, r3, #1
 8003d2a:	2103      	movs	r1, #3
 8003d2c:	fa01 f303 	lsl.w	r3, r1, r3
 8003d30:	43db      	mvns	r3, r3
 8003d32:	401a      	ands	r2, r3
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685a      	ldr	r2, [r3, #4]
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	697b      	ldr	r3, [r7, #20]
 8003d40:	fa01 f303 	lsl.w	r3, r1, r3
 8003d44:	43db      	mvns	r3, r3
 8003d46:	401a      	ands	r2, r3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	689a      	ldr	r2, [r3, #8]
 8003d50:	697b      	ldr	r3, [r7, #20]
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	2103      	movs	r1, #3
 8003d56:	fa01 f303 	lsl.w	r3, r1, r3
 8003d5a:	43db      	mvns	r3, r3
 8003d5c:	401a      	ands	r2, r3
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d62:	697b      	ldr	r3, [r7, #20]
 8003d64:	3301      	adds	r3, #1
 8003d66:	617b      	str	r3, [r7, #20]
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	2b0f      	cmp	r3, #15
 8003d6c:	f67f af22 	bls.w	8003bb4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8003d70:	bf00      	nop
 8003d72:	bf00      	nop
 8003d74:	371c      	adds	r7, #28
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	40013800 	.word	0x40013800
 8003d84:	40020000 	.word	0x40020000
 8003d88:	40020400 	.word	0x40020400
 8003d8c:	40020800 	.word	0x40020800
 8003d90:	40020c00 	.word	0x40020c00
 8003d94:	40021000 	.word	0x40021000
 8003d98:	40021400 	.word	0x40021400
 8003d9c:	40021800 	.word	0x40021800
 8003da0:	40021c00 	.word	0x40021c00
 8003da4:	40022000 	.word	0x40022000
 8003da8:	40022400 	.word	0x40022400
 8003dac:	40013c00 	.word	0x40013c00

08003db0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	460b      	mov	r3, r1
 8003dba:	807b      	strh	r3, [r7, #2]
 8003dbc:	4613      	mov	r3, r2
 8003dbe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003dc0:	787b      	ldrb	r3, [r7, #1]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003dc6:	887a      	ldrh	r2, [r7, #2]
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003dcc:	e003      	b.n	8003dd6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003dce:	887b      	ldrh	r3, [r7, #2]
 8003dd0:	041a      	lsls	r2, r3, #16
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	619a      	str	r2, [r3, #24]
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de0:	4770      	bx	lr

08003de2 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8003de2:	b580      	push	{r7, lr}
 8003de4:	b086      	sub	sp, #24
 8003de6:	af02      	add	r7, sp, #8
 8003de8:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d101      	bne.n	8003df4 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003df0:	2301      	movs	r3, #1
 8003df2:	e059      	b.n	8003ea8 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d106      	bne.n	8003e14 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f7fd faa0 	bl	8001354 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2203      	movs	r2, #3
 8003e18:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003e22:	d102      	bne.n	8003e2a <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f005 f9b2 	bl	8009198 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6818      	ldr	r0, [r3, #0]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	7c1a      	ldrb	r2, [r3, #16]
 8003e3c:	f88d 2000 	strb.w	r2, [sp]
 8003e40:	3304      	adds	r3, #4
 8003e42:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e44:	f005 f944 	bl	80090d0 <USB_CoreInit>
 8003e48:	4603      	mov	r3, r0
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d005      	beq.n	8003e5a <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2202      	movs	r2, #2
 8003e52:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e026      	b.n	8003ea8 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	2101      	movs	r1, #1
 8003e60:	4618      	mov	r0, r3
 8003e62:	f005 f9aa 	bl	80091ba <USB_SetCurrentMode>
 8003e66:	4603      	mov	r3, r0
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d005      	beq.n	8003e78 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e017      	b.n	8003ea8 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	7c1a      	ldrb	r2, [r3, #16]
 8003e80:	f88d 2000 	strb.w	r2, [sp]
 8003e84:	3304      	adds	r3, #4
 8003e86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003e88:	f005 fb0e 	bl	80094a8 <USB_HostInit>
 8003e8c:	4603      	mov	r3, r0
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d005      	beq.n	8003e9e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2202      	movs	r2, #2
 8003e96:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e004      	b.n	8003ea8 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ebe:	693b      	ldr	r3, [r7, #16]
 8003ec0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f005 faaf 	bl	800942a <USB_GetMode>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	2b01      	cmp	r3, #1
 8003ed0:	f040 80fb 	bne.w	80040ca <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f005 fa72 	bl	80093c2 <USB_ReadInterrupts>
 8003ede:	4603      	mov	r3, r0
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	f000 80f1 	beq.w	80040c8 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	4618      	mov	r0, r3
 8003eec:	f005 fa69 	bl	80093c2 <USB_ReadInterrupts>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ef6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003efa:	d104      	bne.n	8003f06 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8003f04:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f005 fa59 	bl	80093c2 <USB_ReadInterrupts>
 8003f10:	4603      	mov	r3, r0
 8003f12:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003f16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003f1a:	d104      	bne.n	8003f26 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8003f24:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f005 fa49 	bl	80093c2 <USB_ReadInterrupts>
 8003f30:	4603      	mov	r3, r0
 8003f32:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003f36:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003f3a:	d104      	bne.n	8003f46 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003f44:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4618      	mov	r0, r3
 8003f4c:	f005 fa39 	bl	80093c2 <USB_ReadInterrupts>
 8003f50:	4603      	mov	r3, r0
 8003f52:	f003 0302 	and.w	r3, r3, #2
 8003f56:	2b02      	cmp	r3, #2
 8003f58:	d103      	bne.n	8003f62 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2202      	movs	r2, #2
 8003f60:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f005 fa2b 	bl	80093c2 <USB_ReadInterrupts>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003f72:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003f76:	d120      	bne.n	8003fba <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8003f80:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d113      	bne.n	8003fba <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8003f92:	2110      	movs	r1, #16
 8003f94:	6938      	ldr	r0, [r7, #16]
 8003f96:	f005 f95c 	bl	8009252 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8003f9a:	6938      	ldr	r0, [r7, #16]
 8003f9c:	f005 f98b 	bl	80092b6 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	7a5b      	ldrb	r3, [r3, #9]
 8003fa4:	2b02      	cmp	r3, #2
 8003fa6:	d105      	bne.n	8003fb4 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2101      	movs	r1, #1
 8003fae:	4618      	mov	r0, r3
 8003fb0:	f005 fb3e 	bl	8009630 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8003fb4:	6878      	ldr	r0, [r7, #4]
 8003fb6:	f000 f89f 	bl	80040f8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f005 f9ff 	bl	80093c2 <USB_ReadInterrupts>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003fca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fce:	d102      	bne.n	8003fd6 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f001 fcc4 	bl	800595e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f005 f9f1 	bl	80093c2 <USB_ReadInterrupts>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b08      	cmp	r3, #8
 8003fe8:	d106      	bne.n	8003ff8 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003fea:	6878      	ldr	r0, [r7, #4]
 8003fec:	f000 f870 	bl	80040d0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	2208      	movs	r2, #8
 8003ff6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f005 f9e0 	bl	80093c2 <USB_ReadInterrupts>
 8004002:	4603      	mov	r3, r0
 8004004:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004008:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800400c:	d139      	bne.n	8004082 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4618      	mov	r0, r3
 8004014:	f005 fb49 	bl	80096aa <USB_HC_ReadInterrupt>
 8004018:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800401a:	2300      	movs	r3, #0
 800401c:	617b      	str	r3, [r7, #20]
 800401e:	e025      	b.n	800406c <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f003 030f 	and.w	r3, r3, #15
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	fa22 f303 	lsr.w	r3, r2, r3
 800402c:	f003 0301 	and.w	r3, r3, #1
 8004030:	2b00      	cmp	r3, #0
 8004032:	d018      	beq.n	8004066 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	015a      	lsls	r2, r3, #5
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	4413      	add	r3, r2
 800403c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004046:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800404a:	d106      	bne.n	800405a <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	b2db      	uxtb	r3, r3
 8004050:	4619      	mov	r1, r3
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f87c 	bl	8004150 <HCD_HC_IN_IRQHandler>
 8004058:	e005      	b.n	8004066 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 800405a:	697b      	ldr	r3, [r7, #20]
 800405c:	b2db      	uxtb	r3, r3
 800405e:	4619      	mov	r1, r3
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 fede 	bl	8004e22 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	3301      	adds	r3, #1
 800406a:	617b      	str	r3, [r7, #20]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	795b      	ldrb	r3, [r3, #5]
 8004070:	461a      	mov	r2, r3
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	4293      	cmp	r3, r2
 8004076:	d3d3      	bcc.n	8004020 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004080:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	4618      	mov	r0, r3
 8004088:	f005 f99b 	bl	80093c2 <USB_ReadInterrupts>
 800408c:	4603      	mov	r3, r0
 800408e:	f003 0310 	and.w	r3, r3, #16
 8004092:	2b10      	cmp	r3, #16
 8004094:	d101      	bne.n	800409a <HAL_HCD_IRQHandler+0x1ea>
 8004096:	2301      	movs	r3, #1
 8004098:	e000      	b.n	800409c <HAL_HCD_IRQHandler+0x1ec>
 800409a:	2300      	movs	r3, #0
 800409c:	2b00      	cmp	r3, #0
 800409e:	d014      	beq.n	80040ca <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	699a      	ldr	r2, [r3, #24]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	f022 0210 	bic.w	r2, r2, #16
 80040ae:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f001 fb75 	bl	80057a0 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	699a      	ldr	r2, [r3, #24]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f042 0210 	orr.w	r2, r2, #16
 80040c4:	619a      	str	r2, [r3, #24]
 80040c6:	e000      	b.n	80040ca <HAL_HCD_IRQHandler+0x21a>
      return;
 80040c8:	bf00      	nop
    }
  }
}
 80040ca:	3718      	adds	r7, #24
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_SOF_Callback could be implemented in the user file
   */
}
 80040d8:	bf00      	nop
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr

080040e4 <HAL_HCD_Connect_Callback>:
  * @brief Connection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80040e4:	b480      	push	{r7}
 80040e6:	b083      	sub	sp, #12
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Connect_Callback could be implemented in the user file
   */
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr

080040f8 <HAL_HCD_Disconnect_Callback>:
  * @brief  Disconnection Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80040f8:	b480      	push	{r7}
 80040fa:	b083      	sub	sp, #12
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8004100:	bf00      	nop
 8004102:	370c      	adds	r7, #12
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr

0800410c <HAL_HCD_PortEnabled_Callback>:
  * @brief  Port Enabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Disabled  Event callback.
  * @param  hhcd HCD handle
  * @retval None
  */
__weak void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(hhcd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_Disconnect_Callback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_HCD_HC_NotifyURBChange_Callback>:
  *            URB_ERROR/
  *            URB_STALL/
  * @retval None
  */
__weak void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	460b      	mov	r3, r1
 800413e:	70fb      	strb	r3, [r7, #3]
 8004140:	4613      	mov	r3, r2
 8004142:	70bb      	strb	r3, [r7, #2]
  UNUSED(urb_state);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HCD_HC_NotifyURBChange_Callback could be implemented in the user file
   */
}
 8004144:	bf00      	nop
 8004146:	370c      	adds	r7, #12
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	6078      	str	r0, [r7, #4]
 8004158:	460b      	mov	r3, r1
 800415a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	78fa      	ldrb	r2, [r7, #3]
 800416c:	4611      	mov	r1, r2
 800416e:	4618      	mov	r0, r3
 8004170:	f005 f93a 	bl	80093e8 <USB_ReadChInterrupts>
 8004174:	4603      	mov	r3, r0
 8004176:	f003 0304 	and.w	r3, r3, #4
 800417a:	2b04      	cmp	r3, #4
 800417c:	d11a      	bne.n	80041b4 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800417e:	78fb      	ldrb	r3, [r7, #3]
 8004180:	015a      	lsls	r2, r3, #5
 8004182:	693b      	ldr	r3, [r7, #16]
 8004184:	4413      	add	r3, r2
 8004186:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800418a:	461a      	mov	r2, r3
 800418c:	2304      	movs	r3, #4
 800418e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004190:	78fa      	ldrb	r2, [r7, #3]
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	4613      	mov	r3, r2
 8004196:	011b      	lsls	r3, r3, #4
 8004198:	1a9b      	subs	r3, r3, r2
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	440b      	add	r3, r1
 800419e:	334d      	adds	r3, #77	@ 0x4d
 80041a0:	2207      	movs	r2, #7
 80041a2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	78fa      	ldrb	r2, [r7, #3]
 80041aa:	4611      	mov	r1, r2
 80041ac:	4618      	mov	r0, r3
 80041ae:	f005 fa8d 	bl	80096cc <USB_HC_Halt>
 80041b2:	e09e      	b.n	80042f2 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	78fa      	ldrb	r2, [r7, #3]
 80041ba:	4611      	mov	r1, r2
 80041bc:	4618      	mov	r0, r3
 80041be:	f005 f913 	bl	80093e8 <USB_ReadChInterrupts>
 80041c2:	4603      	mov	r3, r0
 80041c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041cc:	d11b      	bne.n	8004206 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80041ce:	78fb      	ldrb	r3, [r7, #3]
 80041d0:	015a      	lsls	r2, r3, #5
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	4413      	add	r3, r2
 80041d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80041da:	461a      	mov	r2, r3
 80041dc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80041e0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80041e2:	78fa      	ldrb	r2, [r7, #3]
 80041e4:	6879      	ldr	r1, [r7, #4]
 80041e6:	4613      	mov	r3, r2
 80041e8:	011b      	lsls	r3, r3, #4
 80041ea:	1a9b      	subs	r3, r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	440b      	add	r3, r1
 80041f0:	334d      	adds	r3, #77	@ 0x4d
 80041f2:	2208      	movs	r2, #8
 80041f4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	78fa      	ldrb	r2, [r7, #3]
 80041fc:	4611      	mov	r1, r2
 80041fe:	4618      	mov	r0, r3
 8004200:	f005 fa64 	bl	80096cc <USB_HC_Halt>
 8004204:	e075      	b.n	80042f2 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	78fa      	ldrb	r2, [r7, #3]
 800420c:	4611      	mov	r1, r2
 800420e:	4618      	mov	r0, r3
 8004210:	f005 f8ea 	bl	80093e8 <USB_ReadChInterrupts>
 8004214:	4603      	mov	r3, r0
 8004216:	f003 0308 	and.w	r3, r3, #8
 800421a:	2b08      	cmp	r3, #8
 800421c:	d11a      	bne.n	8004254 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800421e:	78fb      	ldrb	r3, [r7, #3]
 8004220:	015a      	lsls	r2, r3, #5
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	4413      	add	r3, r2
 8004226:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800422a:	461a      	mov	r2, r3
 800422c:	2308      	movs	r3, #8
 800422e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8004230:	78fa      	ldrb	r2, [r7, #3]
 8004232:	6879      	ldr	r1, [r7, #4]
 8004234:	4613      	mov	r3, r2
 8004236:	011b      	lsls	r3, r3, #4
 8004238:	1a9b      	subs	r3, r3, r2
 800423a:	009b      	lsls	r3, r3, #2
 800423c:	440b      	add	r3, r1
 800423e:	334d      	adds	r3, #77	@ 0x4d
 8004240:	2206      	movs	r2, #6
 8004242:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	78fa      	ldrb	r2, [r7, #3]
 800424a:	4611      	mov	r1, r2
 800424c:	4618      	mov	r0, r3
 800424e:	f005 fa3d 	bl	80096cc <USB_HC_Halt>
 8004252:	e04e      	b.n	80042f2 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	78fa      	ldrb	r2, [r7, #3]
 800425a:	4611      	mov	r1, r2
 800425c:	4618      	mov	r0, r3
 800425e:	f005 f8c3 	bl	80093e8 <USB_ReadChInterrupts>
 8004262:	4603      	mov	r3, r0
 8004264:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004268:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800426c:	d11b      	bne.n	80042a6 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 800426e:	78fb      	ldrb	r3, [r7, #3]
 8004270:	015a      	lsls	r2, r3, #5
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	4413      	add	r3, r2
 8004276:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800427a:	461a      	mov	r2, r3
 800427c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004280:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8004282:	78fa      	ldrb	r2, [r7, #3]
 8004284:	6879      	ldr	r1, [r7, #4]
 8004286:	4613      	mov	r3, r2
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	1a9b      	subs	r3, r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	440b      	add	r3, r1
 8004290:	334d      	adds	r3, #77	@ 0x4d
 8004292:	2209      	movs	r2, #9
 8004294:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	78fa      	ldrb	r2, [r7, #3]
 800429c:	4611      	mov	r1, r2
 800429e:	4618      	mov	r0, r3
 80042a0:	f005 fa14 	bl	80096cc <USB_HC_Halt>
 80042a4:	e025      	b.n	80042f2 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	78fa      	ldrb	r2, [r7, #3]
 80042ac:	4611      	mov	r1, r2
 80042ae:	4618      	mov	r0, r3
 80042b0:	f005 f89a 	bl	80093e8 <USB_ReadChInterrupts>
 80042b4:	4603      	mov	r3, r0
 80042b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042ba:	2b80      	cmp	r3, #128	@ 0x80
 80042bc:	d119      	bne.n	80042f2 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80042be:	78fb      	ldrb	r3, [r7, #3]
 80042c0:	015a      	lsls	r2, r3, #5
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	4413      	add	r3, r2
 80042c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042ca:	461a      	mov	r2, r3
 80042cc:	2380      	movs	r3, #128	@ 0x80
 80042ce:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80042d0:	78fa      	ldrb	r2, [r7, #3]
 80042d2:	6879      	ldr	r1, [r7, #4]
 80042d4:	4613      	mov	r3, r2
 80042d6:	011b      	lsls	r3, r3, #4
 80042d8:	1a9b      	subs	r3, r3, r2
 80042da:	009b      	lsls	r3, r3, #2
 80042dc:	440b      	add	r3, r1
 80042de:	334d      	adds	r3, #77	@ 0x4d
 80042e0:	2207      	movs	r2, #7
 80042e2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	78fa      	ldrb	r2, [r7, #3]
 80042ea:	4611      	mov	r1, r2
 80042ec:	4618      	mov	r0, r3
 80042ee:	f005 f9ed 	bl	80096cc <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	78fa      	ldrb	r2, [r7, #3]
 80042f8:	4611      	mov	r1, r2
 80042fa:	4618      	mov	r0, r3
 80042fc:	f005 f874 	bl	80093e8 <USB_ReadChInterrupts>
 8004300:	4603      	mov	r3, r0
 8004302:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004306:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800430a:	d112      	bne.n	8004332 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	78fa      	ldrb	r2, [r7, #3]
 8004312:	4611      	mov	r1, r2
 8004314:	4618      	mov	r0, r3
 8004316:	f005 f9d9 	bl	80096cc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800431a:	78fb      	ldrb	r3, [r7, #3]
 800431c:	015a      	lsls	r2, r3, #5
 800431e:	693b      	ldr	r3, [r7, #16]
 8004320:	4413      	add	r3, r2
 8004322:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004326:	461a      	mov	r2, r3
 8004328:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800432c:	6093      	str	r3, [r2, #8]
 800432e:	f000 bd75 	b.w	8004e1c <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	78fa      	ldrb	r2, [r7, #3]
 8004338:	4611      	mov	r1, r2
 800433a:	4618      	mov	r0, r3
 800433c:	f005 f854 	bl	80093e8 <USB_ReadChInterrupts>
 8004340:	4603      	mov	r3, r0
 8004342:	f003 0301 	and.w	r3, r3, #1
 8004346:	2b01      	cmp	r3, #1
 8004348:	f040 8128 	bne.w	800459c <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800434c:	78fb      	ldrb	r3, [r7, #3]
 800434e:	015a      	lsls	r2, r3, #5
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	4413      	add	r3, r2
 8004354:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004358:	461a      	mov	r2, r3
 800435a:	2320      	movs	r3, #32
 800435c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800435e:	78fa      	ldrb	r2, [r7, #3]
 8004360:	6879      	ldr	r1, [r7, #4]
 8004362:	4613      	mov	r3, r2
 8004364:	011b      	lsls	r3, r3, #4
 8004366:	1a9b      	subs	r3, r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	440b      	add	r3, r1
 800436c:	331b      	adds	r3, #27
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	2b01      	cmp	r3, #1
 8004372:	d119      	bne.n	80043a8 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004374:	78fa      	ldrb	r2, [r7, #3]
 8004376:	6879      	ldr	r1, [r7, #4]
 8004378:	4613      	mov	r3, r2
 800437a:	011b      	lsls	r3, r3, #4
 800437c:	1a9b      	subs	r3, r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	440b      	add	r3, r1
 8004382:	331b      	adds	r3, #27
 8004384:	2200      	movs	r2, #0
 8004386:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004388:	78fb      	ldrb	r3, [r7, #3]
 800438a:	015a      	lsls	r2, r3, #5
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	4413      	add	r3, r2
 8004390:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	78fa      	ldrb	r2, [r7, #3]
 8004398:	0151      	lsls	r1, r2, #5
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	440a      	add	r2, r1
 800439e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80043a2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043a6:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	799b      	ldrb	r3, [r3, #6]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d01b      	beq.n	80043e8 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80043b0:	78fa      	ldrb	r2, [r7, #3]
 80043b2:	6879      	ldr	r1, [r7, #4]
 80043b4:	4613      	mov	r3, r2
 80043b6:	011b      	lsls	r3, r3, #4
 80043b8:	1a9b      	subs	r3, r3, r2
 80043ba:	009b      	lsls	r3, r3, #2
 80043bc:	440b      	add	r3, r1
 80043be:	3330      	adds	r3, #48	@ 0x30
 80043c0:	6819      	ldr	r1, [r3, #0]
 80043c2:	78fb      	ldrb	r3, [r7, #3]
 80043c4:	015a      	lsls	r2, r3, #5
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	4413      	add	r3, r2
 80043ca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043d4:	78fa      	ldrb	r2, [r7, #3]
 80043d6:	1ac9      	subs	r1, r1, r3
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	4613      	mov	r3, r2
 80043dc:	011b      	lsls	r3, r3, #4
 80043de:	1a9b      	subs	r3, r3, r2
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	4403      	add	r3, r0
 80043e4:	3338      	adds	r3, #56	@ 0x38
 80043e6:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80043e8:	78fa      	ldrb	r2, [r7, #3]
 80043ea:	6879      	ldr	r1, [r7, #4]
 80043ec:	4613      	mov	r3, r2
 80043ee:	011b      	lsls	r3, r3, #4
 80043f0:	1a9b      	subs	r3, r3, r2
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	440b      	add	r3, r1
 80043f6:	334d      	adds	r3, #77	@ 0x4d
 80043f8:	2201      	movs	r2, #1
 80043fa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80043fc:	78fa      	ldrb	r2, [r7, #3]
 80043fe:	6879      	ldr	r1, [r7, #4]
 8004400:	4613      	mov	r3, r2
 8004402:	011b      	lsls	r3, r3, #4
 8004404:	1a9b      	subs	r3, r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	440b      	add	r3, r1
 800440a:	3344      	adds	r3, #68	@ 0x44
 800440c:	2200      	movs	r2, #0
 800440e:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8004410:	78fb      	ldrb	r3, [r7, #3]
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	4413      	add	r3, r2
 8004418:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800441c:	461a      	mov	r2, r3
 800441e:	2301      	movs	r3, #1
 8004420:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004422:	78fa      	ldrb	r2, [r7, #3]
 8004424:	6879      	ldr	r1, [r7, #4]
 8004426:	4613      	mov	r3, r2
 8004428:	011b      	lsls	r3, r3, #4
 800442a:	1a9b      	subs	r3, r3, r2
 800442c:	009b      	lsls	r3, r3, #2
 800442e:	440b      	add	r3, r1
 8004430:	3326      	adds	r3, #38	@ 0x26
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d00a      	beq.n	800444e <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004438:	78fa      	ldrb	r2, [r7, #3]
 800443a:	6879      	ldr	r1, [r7, #4]
 800443c:	4613      	mov	r3, r2
 800443e:	011b      	lsls	r3, r3, #4
 8004440:	1a9b      	subs	r3, r3, r2
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	440b      	add	r3, r1
 8004446:	3326      	adds	r3, #38	@ 0x26
 8004448:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800444a:	2b02      	cmp	r3, #2
 800444c:	d110      	bne.n	8004470 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	78fa      	ldrb	r2, [r7, #3]
 8004454:	4611      	mov	r1, r2
 8004456:	4618      	mov	r0, r3
 8004458:	f005 f938 	bl	80096cc <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800445c:	78fb      	ldrb	r3, [r7, #3]
 800445e:	015a      	lsls	r2, r3, #5
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	4413      	add	r3, r2
 8004464:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004468:	461a      	mov	r2, r3
 800446a:	2310      	movs	r3, #16
 800446c:	6093      	str	r3, [r2, #8]
 800446e:	e03d      	b.n	80044ec <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004470:	78fa      	ldrb	r2, [r7, #3]
 8004472:	6879      	ldr	r1, [r7, #4]
 8004474:	4613      	mov	r3, r2
 8004476:	011b      	lsls	r3, r3, #4
 8004478:	1a9b      	subs	r3, r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	440b      	add	r3, r1
 800447e:	3326      	adds	r3, #38	@ 0x26
 8004480:	781b      	ldrb	r3, [r3, #0]
 8004482:	2b03      	cmp	r3, #3
 8004484:	d00a      	beq.n	800449c <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8004486:	78fa      	ldrb	r2, [r7, #3]
 8004488:	6879      	ldr	r1, [r7, #4]
 800448a:	4613      	mov	r3, r2
 800448c:	011b      	lsls	r3, r3, #4
 800448e:	1a9b      	subs	r3, r3, r2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	440b      	add	r3, r1
 8004494:	3326      	adds	r3, #38	@ 0x26
 8004496:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8004498:	2b01      	cmp	r3, #1
 800449a:	d127      	bne.n	80044ec <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800449c:	78fb      	ldrb	r3, [r7, #3]
 800449e:	015a      	lsls	r2, r3, #5
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	4413      	add	r3, r2
 80044a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	78fa      	ldrb	r2, [r7, #3]
 80044ac:	0151      	lsls	r1, r2, #5
 80044ae:	693a      	ldr	r2, [r7, #16]
 80044b0:	440a      	add	r2, r1
 80044b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80044b6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80044ba:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 80044bc:	78fa      	ldrb	r2, [r7, #3]
 80044be:	6879      	ldr	r1, [r7, #4]
 80044c0:	4613      	mov	r3, r2
 80044c2:	011b      	lsls	r3, r3, #4
 80044c4:	1a9b      	subs	r3, r3, r2
 80044c6:	009b      	lsls	r3, r3, #2
 80044c8:	440b      	add	r3, r1
 80044ca:	334c      	adds	r3, #76	@ 0x4c
 80044cc:	2201      	movs	r2, #1
 80044ce:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80044d0:	78fa      	ldrb	r2, [r7, #3]
 80044d2:	6879      	ldr	r1, [r7, #4]
 80044d4:	4613      	mov	r3, r2
 80044d6:	011b      	lsls	r3, r3, #4
 80044d8:	1a9b      	subs	r3, r3, r2
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	440b      	add	r3, r1
 80044de:	334c      	adds	r3, #76	@ 0x4c
 80044e0:	781a      	ldrb	r2, [r3, #0]
 80044e2:	78fb      	ldrb	r3, [r7, #3]
 80044e4:	4619      	mov	r1, r3
 80044e6:	6878      	ldr	r0, [r7, #4]
 80044e8:	f7ff fe24 	bl	8004134 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	799b      	ldrb	r3, [r3, #6]
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d13b      	bne.n	800456c <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 80044f4:	78fa      	ldrb	r2, [r7, #3]
 80044f6:	6879      	ldr	r1, [r7, #4]
 80044f8:	4613      	mov	r3, r2
 80044fa:	011b      	lsls	r3, r3, #4
 80044fc:	1a9b      	subs	r3, r3, r2
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	440b      	add	r3, r1
 8004502:	3338      	adds	r3, #56	@ 0x38
 8004504:	6819      	ldr	r1, [r3, #0]
 8004506:	78fa      	ldrb	r2, [r7, #3]
 8004508:	6878      	ldr	r0, [r7, #4]
 800450a:	4613      	mov	r3, r2
 800450c:	011b      	lsls	r3, r3, #4
 800450e:	1a9b      	subs	r3, r3, r2
 8004510:	009b      	lsls	r3, r3, #2
 8004512:	4403      	add	r3, r0
 8004514:	3328      	adds	r3, #40	@ 0x28
 8004516:	881b      	ldrh	r3, [r3, #0]
 8004518:	440b      	add	r3, r1
 800451a:	1e59      	subs	r1, r3, #1
 800451c:	78fa      	ldrb	r2, [r7, #3]
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	4613      	mov	r3, r2
 8004522:	011b      	lsls	r3, r3, #4
 8004524:	1a9b      	subs	r3, r3, r2
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4403      	add	r3, r0
 800452a:	3328      	adds	r3, #40	@ 0x28
 800452c:	881b      	ldrh	r3, [r3, #0]
 800452e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004532:	f003 0301 	and.w	r3, r3, #1
 8004536:	2b00      	cmp	r3, #0
 8004538:	f000 8470 	beq.w	8004e1c <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 800453c:	78fa      	ldrb	r2, [r7, #3]
 800453e:	6879      	ldr	r1, [r7, #4]
 8004540:	4613      	mov	r3, r2
 8004542:	011b      	lsls	r3, r3, #4
 8004544:	1a9b      	subs	r3, r3, r2
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	440b      	add	r3, r1
 800454a:	333c      	adds	r3, #60	@ 0x3c
 800454c:	781b      	ldrb	r3, [r3, #0]
 800454e:	78fa      	ldrb	r2, [r7, #3]
 8004550:	f083 0301 	eor.w	r3, r3, #1
 8004554:	b2d8      	uxtb	r0, r3
 8004556:	6879      	ldr	r1, [r7, #4]
 8004558:	4613      	mov	r3, r2
 800455a:	011b      	lsls	r3, r3, #4
 800455c:	1a9b      	subs	r3, r3, r2
 800455e:	009b      	lsls	r3, r3, #2
 8004560:	440b      	add	r3, r1
 8004562:	333c      	adds	r3, #60	@ 0x3c
 8004564:	4602      	mov	r2, r0
 8004566:	701a      	strb	r2, [r3, #0]
 8004568:	f000 bc58 	b.w	8004e1c <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 800456c:	78fa      	ldrb	r2, [r7, #3]
 800456e:	6879      	ldr	r1, [r7, #4]
 8004570:	4613      	mov	r3, r2
 8004572:	011b      	lsls	r3, r3, #4
 8004574:	1a9b      	subs	r3, r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	440b      	add	r3, r1
 800457a:	333c      	adds	r3, #60	@ 0x3c
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	78fa      	ldrb	r2, [r7, #3]
 8004580:	f083 0301 	eor.w	r3, r3, #1
 8004584:	b2d8      	uxtb	r0, r3
 8004586:	6879      	ldr	r1, [r7, #4]
 8004588:	4613      	mov	r3, r2
 800458a:	011b      	lsls	r3, r3, #4
 800458c:	1a9b      	subs	r3, r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	440b      	add	r3, r1
 8004592:	333c      	adds	r3, #60	@ 0x3c
 8004594:	4602      	mov	r2, r0
 8004596:	701a      	strb	r2, [r3, #0]
 8004598:	f000 bc40 	b.w	8004e1c <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	78fa      	ldrb	r2, [r7, #3]
 80045a2:	4611      	mov	r1, r2
 80045a4:	4618      	mov	r0, r3
 80045a6:	f004 ff1f 	bl	80093e8 <USB_ReadChInterrupts>
 80045aa:	4603      	mov	r3, r0
 80045ac:	f003 0320 	and.w	r3, r3, #32
 80045b0:	2b20      	cmp	r3, #32
 80045b2:	d131      	bne.n	8004618 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80045b4:	78fb      	ldrb	r3, [r7, #3]
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80045c0:	461a      	mov	r2, r3
 80045c2:	2320      	movs	r3, #32
 80045c4:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 80045c6:	78fa      	ldrb	r2, [r7, #3]
 80045c8:	6879      	ldr	r1, [r7, #4]
 80045ca:	4613      	mov	r3, r2
 80045cc:	011b      	lsls	r3, r3, #4
 80045ce:	1a9b      	subs	r3, r3, r2
 80045d0:	009b      	lsls	r3, r3, #2
 80045d2:	440b      	add	r3, r1
 80045d4:	331a      	adds	r3, #26
 80045d6:	781b      	ldrb	r3, [r3, #0]
 80045d8:	2b01      	cmp	r3, #1
 80045da:	f040 841f 	bne.w	8004e1c <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 80045de:	78fa      	ldrb	r2, [r7, #3]
 80045e0:	6879      	ldr	r1, [r7, #4]
 80045e2:	4613      	mov	r3, r2
 80045e4:	011b      	lsls	r3, r3, #4
 80045e6:	1a9b      	subs	r3, r3, r2
 80045e8:	009b      	lsls	r3, r3, #2
 80045ea:	440b      	add	r3, r1
 80045ec:	331b      	adds	r3, #27
 80045ee:	2201      	movs	r2, #1
 80045f0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80045f2:	78fa      	ldrb	r2, [r7, #3]
 80045f4:	6879      	ldr	r1, [r7, #4]
 80045f6:	4613      	mov	r3, r2
 80045f8:	011b      	lsls	r3, r3, #4
 80045fa:	1a9b      	subs	r3, r3, r2
 80045fc:	009b      	lsls	r3, r3, #2
 80045fe:	440b      	add	r3, r1
 8004600:	334d      	adds	r3, #77	@ 0x4d
 8004602:	2203      	movs	r2, #3
 8004604:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	78fa      	ldrb	r2, [r7, #3]
 800460c:	4611      	mov	r1, r2
 800460e:	4618      	mov	r0, r3
 8004610:	f005 f85c 	bl	80096cc <USB_HC_Halt>
 8004614:	f000 bc02 	b.w	8004e1c <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	78fa      	ldrb	r2, [r7, #3]
 800461e:	4611      	mov	r1, r2
 8004620:	4618      	mov	r0, r3
 8004622:	f004 fee1 	bl	80093e8 <USB_ReadChInterrupts>
 8004626:	4603      	mov	r3, r0
 8004628:	f003 0302 	and.w	r3, r3, #2
 800462c:	2b02      	cmp	r3, #2
 800462e:	f040 8305 	bne.w	8004c3c <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8004632:	78fb      	ldrb	r3, [r7, #3]
 8004634:	015a      	lsls	r2, r3, #5
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	4413      	add	r3, r2
 800463a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800463e:	461a      	mov	r2, r3
 8004640:	2302      	movs	r3, #2
 8004642:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8004644:	78fa      	ldrb	r2, [r7, #3]
 8004646:	6879      	ldr	r1, [r7, #4]
 8004648:	4613      	mov	r3, r2
 800464a:	011b      	lsls	r3, r3, #4
 800464c:	1a9b      	subs	r3, r3, r2
 800464e:	009b      	lsls	r3, r3, #2
 8004650:	440b      	add	r3, r1
 8004652:	334d      	adds	r3, #77	@ 0x4d
 8004654:	781b      	ldrb	r3, [r3, #0]
 8004656:	2b01      	cmp	r3, #1
 8004658:	d114      	bne.n	8004684 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800465a:	78fa      	ldrb	r2, [r7, #3]
 800465c:	6879      	ldr	r1, [r7, #4]
 800465e:	4613      	mov	r3, r2
 8004660:	011b      	lsls	r3, r3, #4
 8004662:	1a9b      	subs	r3, r3, r2
 8004664:	009b      	lsls	r3, r3, #2
 8004666:	440b      	add	r3, r1
 8004668:	334d      	adds	r3, #77	@ 0x4d
 800466a:	2202      	movs	r2, #2
 800466c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800466e:	78fa      	ldrb	r2, [r7, #3]
 8004670:	6879      	ldr	r1, [r7, #4]
 8004672:	4613      	mov	r3, r2
 8004674:	011b      	lsls	r3, r3, #4
 8004676:	1a9b      	subs	r3, r3, r2
 8004678:	009b      	lsls	r3, r3, #2
 800467a:	440b      	add	r3, r1
 800467c:	334c      	adds	r3, #76	@ 0x4c
 800467e:	2201      	movs	r2, #1
 8004680:	701a      	strb	r2, [r3, #0]
 8004682:	e2cc      	b.n	8004c1e <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8004684:	78fa      	ldrb	r2, [r7, #3]
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	4613      	mov	r3, r2
 800468a:	011b      	lsls	r3, r3, #4
 800468c:	1a9b      	subs	r3, r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	440b      	add	r3, r1
 8004692:	334d      	adds	r3, #77	@ 0x4d
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	2b06      	cmp	r3, #6
 8004698:	d114      	bne.n	80046c4 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800469a:	78fa      	ldrb	r2, [r7, #3]
 800469c:	6879      	ldr	r1, [r7, #4]
 800469e:	4613      	mov	r3, r2
 80046a0:	011b      	lsls	r3, r3, #4
 80046a2:	1a9b      	subs	r3, r3, r2
 80046a4:	009b      	lsls	r3, r3, #2
 80046a6:	440b      	add	r3, r1
 80046a8:	334d      	adds	r3, #77	@ 0x4d
 80046aa:	2202      	movs	r2, #2
 80046ac:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 80046ae:	78fa      	ldrb	r2, [r7, #3]
 80046b0:	6879      	ldr	r1, [r7, #4]
 80046b2:	4613      	mov	r3, r2
 80046b4:	011b      	lsls	r3, r3, #4
 80046b6:	1a9b      	subs	r3, r3, r2
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	440b      	add	r3, r1
 80046bc:	334c      	adds	r3, #76	@ 0x4c
 80046be:	2205      	movs	r2, #5
 80046c0:	701a      	strb	r2, [r3, #0]
 80046c2:	e2ac      	b.n	8004c1e <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80046c4:	78fa      	ldrb	r2, [r7, #3]
 80046c6:	6879      	ldr	r1, [r7, #4]
 80046c8:	4613      	mov	r3, r2
 80046ca:	011b      	lsls	r3, r3, #4
 80046cc:	1a9b      	subs	r3, r3, r2
 80046ce:	009b      	lsls	r3, r3, #2
 80046d0:	440b      	add	r3, r1
 80046d2:	334d      	adds	r3, #77	@ 0x4d
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	2b07      	cmp	r3, #7
 80046d8:	d00b      	beq.n	80046f2 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80046da:	78fa      	ldrb	r2, [r7, #3]
 80046dc:	6879      	ldr	r1, [r7, #4]
 80046de:	4613      	mov	r3, r2
 80046e0:	011b      	lsls	r3, r3, #4
 80046e2:	1a9b      	subs	r3, r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	440b      	add	r3, r1
 80046e8:	334d      	adds	r3, #77	@ 0x4d
 80046ea:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80046ec:	2b09      	cmp	r3, #9
 80046ee:	f040 80a6 	bne.w	800483e <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80046f2:	78fa      	ldrb	r2, [r7, #3]
 80046f4:	6879      	ldr	r1, [r7, #4]
 80046f6:	4613      	mov	r3, r2
 80046f8:	011b      	lsls	r3, r3, #4
 80046fa:	1a9b      	subs	r3, r3, r2
 80046fc:	009b      	lsls	r3, r3, #2
 80046fe:	440b      	add	r3, r1
 8004700:	334d      	adds	r3, #77	@ 0x4d
 8004702:	2202      	movs	r2, #2
 8004704:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004706:	78fa      	ldrb	r2, [r7, #3]
 8004708:	6879      	ldr	r1, [r7, #4]
 800470a:	4613      	mov	r3, r2
 800470c:	011b      	lsls	r3, r3, #4
 800470e:	1a9b      	subs	r3, r3, r2
 8004710:	009b      	lsls	r3, r3, #2
 8004712:	440b      	add	r3, r1
 8004714:	3344      	adds	r3, #68	@ 0x44
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	1c59      	adds	r1, r3, #1
 800471a:	6878      	ldr	r0, [r7, #4]
 800471c:	4613      	mov	r3, r2
 800471e:	011b      	lsls	r3, r3, #4
 8004720:	1a9b      	subs	r3, r3, r2
 8004722:	009b      	lsls	r3, r3, #2
 8004724:	4403      	add	r3, r0
 8004726:	3344      	adds	r3, #68	@ 0x44
 8004728:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800472a:	78fa      	ldrb	r2, [r7, #3]
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	4613      	mov	r3, r2
 8004730:	011b      	lsls	r3, r3, #4
 8004732:	1a9b      	subs	r3, r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	440b      	add	r3, r1
 8004738:	3344      	adds	r3, #68	@ 0x44
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	2b02      	cmp	r3, #2
 800473e:	d943      	bls.n	80047c8 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8004740:	78fa      	ldrb	r2, [r7, #3]
 8004742:	6879      	ldr	r1, [r7, #4]
 8004744:	4613      	mov	r3, r2
 8004746:	011b      	lsls	r3, r3, #4
 8004748:	1a9b      	subs	r3, r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	440b      	add	r3, r1
 800474e:	3344      	adds	r3, #68	@ 0x44
 8004750:	2200      	movs	r2, #0
 8004752:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8004754:	78fa      	ldrb	r2, [r7, #3]
 8004756:	6879      	ldr	r1, [r7, #4]
 8004758:	4613      	mov	r3, r2
 800475a:	011b      	lsls	r3, r3, #4
 800475c:	1a9b      	subs	r3, r3, r2
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	440b      	add	r3, r1
 8004762:	331a      	adds	r3, #26
 8004764:	781b      	ldrb	r3, [r3, #0]
 8004766:	2b01      	cmp	r3, #1
 8004768:	d123      	bne.n	80047b2 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 800476a:	78fa      	ldrb	r2, [r7, #3]
 800476c:	6879      	ldr	r1, [r7, #4]
 800476e:	4613      	mov	r3, r2
 8004770:	011b      	lsls	r3, r3, #4
 8004772:	1a9b      	subs	r3, r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	440b      	add	r3, r1
 8004778:	331b      	adds	r3, #27
 800477a:	2200      	movs	r2, #0
 800477c:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800477e:	78fa      	ldrb	r2, [r7, #3]
 8004780:	6879      	ldr	r1, [r7, #4]
 8004782:	4613      	mov	r3, r2
 8004784:	011b      	lsls	r3, r3, #4
 8004786:	1a9b      	subs	r3, r3, r2
 8004788:	009b      	lsls	r3, r3, #2
 800478a:	440b      	add	r3, r1
 800478c:	331c      	adds	r3, #28
 800478e:	2200      	movs	r2, #0
 8004790:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004792:	78fb      	ldrb	r3, [r7, #3]
 8004794:	015a      	lsls	r2, r3, #5
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	4413      	add	r3, r2
 800479a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	78fa      	ldrb	r2, [r7, #3]
 80047a2:	0151      	lsls	r1, r2, #5
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	440a      	add	r2, r1
 80047a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80047ac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80047b0:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 80047b2:	78fa      	ldrb	r2, [r7, #3]
 80047b4:	6879      	ldr	r1, [r7, #4]
 80047b6:	4613      	mov	r3, r2
 80047b8:	011b      	lsls	r3, r3, #4
 80047ba:	1a9b      	subs	r3, r3, r2
 80047bc:	009b      	lsls	r3, r3, #2
 80047be:	440b      	add	r3, r1
 80047c0:	334c      	adds	r3, #76	@ 0x4c
 80047c2:	2204      	movs	r2, #4
 80047c4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80047c6:	e229      	b.n	8004c1c <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80047c8:	78fa      	ldrb	r2, [r7, #3]
 80047ca:	6879      	ldr	r1, [r7, #4]
 80047cc:	4613      	mov	r3, r2
 80047ce:	011b      	lsls	r3, r3, #4
 80047d0:	1a9b      	subs	r3, r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	440b      	add	r3, r1
 80047d6:	334c      	adds	r3, #76	@ 0x4c
 80047d8:	2202      	movs	r2, #2
 80047da:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80047dc:	78fa      	ldrb	r2, [r7, #3]
 80047de:	6879      	ldr	r1, [r7, #4]
 80047e0:	4613      	mov	r3, r2
 80047e2:	011b      	lsls	r3, r3, #4
 80047e4:	1a9b      	subs	r3, r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	440b      	add	r3, r1
 80047ea:	3326      	adds	r3, #38	@ 0x26
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d00b      	beq.n	800480a <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80047f2:	78fa      	ldrb	r2, [r7, #3]
 80047f4:	6879      	ldr	r1, [r7, #4]
 80047f6:	4613      	mov	r3, r2
 80047f8:	011b      	lsls	r3, r3, #4
 80047fa:	1a9b      	subs	r3, r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	440b      	add	r3, r1
 8004800:	3326      	adds	r3, #38	@ 0x26
 8004802:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004804:	2b02      	cmp	r3, #2
 8004806:	f040 8209 	bne.w	8004c1c <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800480a:	78fb      	ldrb	r3, [r7, #3]
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	693b      	ldr	r3, [r7, #16]
 8004810:	4413      	add	r3, r2
 8004812:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004820:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004828:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800482a:	78fb      	ldrb	r3, [r7, #3]
 800482c:	015a      	lsls	r2, r3, #5
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	4413      	add	r3, r2
 8004832:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004836:	461a      	mov	r2, r3
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800483c:	e1ee      	b.n	8004c1c <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800483e:	78fa      	ldrb	r2, [r7, #3]
 8004840:	6879      	ldr	r1, [r7, #4]
 8004842:	4613      	mov	r3, r2
 8004844:	011b      	lsls	r3, r3, #4
 8004846:	1a9b      	subs	r3, r3, r2
 8004848:	009b      	lsls	r3, r3, #2
 800484a:	440b      	add	r3, r1
 800484c:	334d      	adds	r3, #77	@ 0x4d
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	2b05      	cmp	r3, #5
 8004852:	f040 80c8 	bne.w	80049e6 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004856:	78fa      	ldrb	r2, [r7, #3]
 8004858:	6879      	ldr	r1, [r7, #4]
 800485a:	4613      	mov	r3, r2
 800485c:	011b      	lsls	r3, r3, #4
 800485e:	1a9b      	subs	r3, r3, r2
 8004860:	009b      	lsls	r3, r3, #2
 8004862:	440b      	add	r3, r1
 8004864:	334d      	adds	r3, #77	@ 0x4d
 8004866:	2202      	movs	r2, #2
 8004868:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800486a:	78fa      	ldrb	r2, [r7, #3]
 800486c:	6879      	ldr	r1, [r7, #4]
 800486e:	4613      	mov	r3, r2
 8004870:	011b      	lsls	r3, r3, #4
 8004872:	1a9b      	subs	r3, r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	440b      	add	r3, r1
 8004878:	331b      	adds	r3, #27
 800487a:	781b      	ldrb	r3, [r3, #0]
 800487c:	2b01      	cmp	r3, #1
 800487e:	f040 81ce 	bne.w	8004c1e <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004882:	78fa      	ldrb	r2, [r7, #3]
 8004884:	6879      	ldr	r1, [r7, #4]
 8004886:	4613      	mov	r3, r2
 8004888:	011b      	lsls	r3, r3, #4
 800488a:	1a9b      	subs	r3, r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	440b      	add	r3, r1
 8004890:	3326      	adds	r3, #38	@ 0x26
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	2b03      	cmp	r3, #3
 8004896:	d16b      	bne.n	8004970 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8004898:	78fa      	ldrb	r2, [r7, #3]
 800489a:	6879      	ldr	r1, [r7, #4]
 800489c:	4613      	mov	r3, r2
 800489e:	011b      	lsls	r3, r3, #4
 80048a0:	1a9b      	subs	r3, r3, r2
 80048a2:	009b      	lsls	r3, r3, #2
 80048a4:	440b      	add	r3, r1
 80048a6:	3348      	adds	r3, #72	@ 0x48
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	1c59      	adds	r1, r3, #1
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	4613      	mov	r3, r2
 80048b0:	011b      	lsls	r3, r3, #4
 80048b2:	1a9b      	subs	r3, r3, r2
 80048b4:	009b      	lsls	r3, r3, #2
 80048b6:	4403      	add	r3, r0
 80048b8:	3348      	adds	r3, #72	@ 0x48
 80048ba:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 80048bc:	78fa      	ldrb	r2, [r7, #3]
 80048be:	6879      	ldr	r1, [r7, #4]
 80048c0:	4613      	mov	r3, r2
 80048c2:	011b      	lsls	r3, r3, #4
 80048c4:	1a9b      	subs	r3, r3, r2
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	440b      	add	r3, r1
 80048ca:	3348      	adds	r3, #72	@ 0x48
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2b02      	cmp	r3, #2
 80048d0:	d943      	bls.n	800495a <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 80048d2:	78fa      	ldrb	r2, [r7, #3]
 80048d4:	6879      	ldr	r1, [r7, #4]
 80048d6:	4613      	mov	r3, r2
 80048d8:	011b      	lsls	r3, r3, #4
 80048da:	1a9b      	subs	r3, r3, r2
 80048dc:	009b      	lsls	r3, r3, #2
 80048de:	440b      	add	r3, r1
 80048e0:	3348      	adds	r3, #72	@ 0x48
 80048e2:	2200      	movs	r2, #0
 80048e4:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 80048e6:	78fa      	ldrb	r2, [r7, #3]
 80048e8:	6879      	ldr	r1, [r7, #4]
 80048ea:	4613      	mov	r3, r2
 80048ec:	011b      	lsls	r3, r3, #4
 80048ee:	1a9b      	subs	r3, r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	440b      	add	r3, r1
 80048f4:	331b      	adds	r3, #27
 80048f6:	2200      	movs	r2, #0
 80048f8:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80048fa:	78fa      	ldrb	r2, [r7, #3]
 80048fc:	6879      	ldr	r1, [r7, #4]
 80048fe:	4613      	mov	r3, r2
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	1a9b      	subs	r3, r3, r2
 8004904:	009b      	lsls	r3, r3, #2
 8004906:	440b      	add	r3, r1
 8004908:	3344      	adds	r3, #68	@ 0x44
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	2b02      	cmp	r3, #2
 800490e:	d809      	bhi.n	8004924 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8004910:	78fa      	ldrb	r2, [r7, #3]
 8004912:	6879      	ldr	r1, [r7, #4]
 8004914:	4613      	mov	r3, r2
 8004916:	011b      	lsls	r3, r3, #4
 8004918:	1a9b      	subs	r3, r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	440b      	add	r3, r1
 800491e:	331c      	adds	r3, #28
 8004920:	2201      	movs	r2, #1
 8004922:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004924:	78fb      	ldrb	r3, [r7, #3]
 8004926:	015a      	lsls	r2, r3, #5
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	4413      	add	r3, r2
 800492c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	78fa      	ldrb	r2, [r7, #3]
 8004934:	0151      	lsls	r1, r2, #5
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	440a      	add	r2, r1
 800493a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800493e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004942:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8004944:	78fa      	ldrb	r2, [r7, #3]
 8004946:	6879      	ldr	r1, [r7, #4]
 8004948:	4613      	mov	r3, r2
 800494a:	011b      	lsls	r3, r3, #4
 800494c:	1a9b      	subs	r3, r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	440b      	add	r3, r1
 8004952:	334c      	adds	r3, #76	@ 0x4c
 8004954:	2204      	movs	r2, #4
 8004956:	701a      	strb	r2, [r3, #0]
 8004958:	e014      	b.n	8004984 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800495a:	78fa      	ldrb	r2, [r7, #3]
 800495c:	6879      	ldr	r1, [r7, #4]
 800495e:	4613      	mov	r3, r2
 8004960:	011b      	lsls	r3, r3, #4
 8004962:	1a9b      	subs	r3, r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	440b      	add	r3, r1
 8004968:	334c      	adds	r3, #76	@ 0x4c
 800496a:	2202      	movs	r2, #2
 800496c:	701a      	strb	r2, [r3, #0]
 800496e:	e009      	b.n	8004984 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004970:	78fa      	ldrb	r2, [r7, #3]
 8004972:	6879      	ldr	r1, [r7, #4]
 8004974:	4613      	mov	r3, r2
 8004976:	011b      	lsls	r3, r3, #4
 8004978:	1a9b      	subs	r3, r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	440b      	add	r3, r1
 800497e:	334c      	adds	r3, #76	@ 0x4c
 8004980:	2202      	movs	r2, #2
 8004982:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004984:	78fa      	ldrb	r2, [r7, #3]
 8004986:	6879      	ldr	r1, [r7, #4]
 8004988:	4613      	mov	r3, r2
 800498a:	011b      	lsls	r3, r3, #4
 800498c:	1a9b      	subs	r3, r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	440b      	add	r3, r1
 8004992:	3326      	adds	r3, #38	@ 0x26
 8004994:	781b      	ldrb	r3, [r3, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00b      	beq.n	80049b2 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800499a:	78fa      	ldrb	r2, [r7, #3]
 800499c:	6879      	ldr	r1, [r7, #4]
 800499e:	4613      	mov	r3, r2
 80049a0:	011b      	lsls	r3, r3, #4
 80049a2:	1a9b      	subs	r3, r3, r2
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	440b      	add	r3, r1
 80049a8:	3326      	adds	r3, #38	@ 0x26
 80049aa:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80049ac:	2b02      	cmp	r3, #2
 80049ae:	f040 8136 	bne.w	8004c1e <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80049b2:	78fb      	ldrb	r3, [r7, #3]
 80049b4:	015a      	lsls	r2, r3, #5
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	4413      	add	r3, r2
 80049ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80049c8:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80049d0:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80049d2:	78fb      	ldrb	r3, [r7, #3]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	693b      	ldr	r3, [r7, #16]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80049de:	461a      	mov	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	6013      	str	r3, [r2, #0]
 80049e4:	e11b      	b.n	8004c1e <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 80049e6:	78fa      	ldrb	r2, [r7, #3]
 80049e8:	6879      	ldr	r1, [r7, #4]
 80049ea:	4613      	mov	r3, r2
 80049ec:	011b      	lsls	r3, r3, #4
 80049ee:	1a9b      	subs	r3, r3, r2
 80049f0:	009b      	lsls	r3, r3, #2
 80049f2:	440b      	add	r3, r1
 80049f4:	334d      	adds	r3, #77	@ 0x4d
 80049f6:	781b      	ldrb	r3, [r3, #0]
 80049f8:	2b03      	cmp	r3, #3
 80049fa:	f040 8081 	bne.w	8004b00 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80049fe:	78fa      	ldrb	r2, [r7, #3]
 8004a00:	6879      	ldr	r1, [r7, #4]
 8004a02:	4613      	mov	r3, r2
 8004a04:	011b      	lsls	r3, r3, #4
 8004a06:	1a9b      	subs	r3, r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	440b      	add	r3, r1
 8004a0c:	334d      	adds	r3, #77	@ 0x4d
 8004a0e:	2202      	movs	r2, #2
 8004a10:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8004a12:	78fa      	ldrb	r2, [r7, #3]
 8004a14:	6879      	ldr	r1, [r7, #4]
 8004a16:	4613      	mov	r3, r2
 8004a18:	011b      	lsls	r3, r3, #4
 8004a1a:	1a9b      	subs	r3, r3, r2
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	440b      	add	r3, r1
 8004a20:	331b      	adds	r3, #27
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	f040 80fa 	bne.w	8004c1e <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004a2a:	78fa      	ldrb	r2, [r7, #3]
 8004a2c:	6879      	ldr	r1, [r7, #4]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	011b      	lsls	r3, r3, #4
 8004a32:	1a9b      	subs	r3, r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	440b      	add	r3, r1
 8004a38:	334c      	adds	r3, #76	@ 0x4c
 8004a3a:	2202      	movs	r2, #2
 8004a3c:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8004a3e:	78fb      	ldrb	r3, [r7, #3]
 8004a40:	015a      	lsls	r2, r3, #5
 8004a42:	693b      	ldr	r3, [r7, #16]
 8004a44:	4413      	add	r3, r2
 8004a46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	78fa      	ldrb	r2, [r7, #3]
 8004a4e:	0151      	lsls	r1, r2, #5
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	440a      	add	r2, r1
 8004a54:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a5c:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8004a5e:	78fb      	ldrb	r3, [r7, #3]
 8004a60:	015a      	lsls	r2, r3, #5
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	4413      	add	r3, r2
 8004a66:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	78fa      	ldrb	r2, [r7, #3]
 8004a6e:	0151      	lsls	r1, r2, #5
 8004a70:	693a      	ldr	r2, [r7, #16]
 8004a72:	440a      	add	r2, r1
 8004a74:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a78:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a7c:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8004a7e:	78fb      	ldrb	r3, [r7, #3]
 8004a80:	015a      	lsls	r2, r3, #5
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	4413      	add	r3, r2
 8004a86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	78fa      	ldrb	r2, [r7, #3]
 8004a8e:	0151      	lsls	r1, r2, #5
 8004a90:	693a      	ldr	r2, [r7, #16]
 8004a92:	440a      	add	r2, r1
 8004a94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004a98:	f023 0320 	bic.w	r3, r3, #32
 8004a9c:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004a9e:	78fa      	ldrb	r2, [r7, #3]
 8004aa0:	6879      	ldr	r1, [r7, #4]
 8004aa2:	4613      	mov	r3, r2
 8004aa4:	011b      	lsls	r3, r3, #4
 8004aa6:	1a9b      	subs	r3, r3, r2
 8004aa8:	009b      	lsls	r3, r3, #2
 8004aaa:	440b      	add	r3, r1
 8004aac:	3326      	adds	r3, #38	@ 0x26
 8004aae:	781b      	ldrb	r3, [r3, #0]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d00b      	beq.n	8004acc <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004ab4:	78fa      	ldrb	r2, [r7, #3]
 8004ab6:	6879      	ldr	r1, [r7, #4]
 8004ab8:	4613      	mov	r3, r2
 8004aba:	011b      	lsls	r3, r3, #4
 8004abc:	1a9b      	subs	r3, r3, r2
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	440b      	add	r3, r1
 8004ac2:	3326      	adds	r3, #38	@ 0x26
 8004ac4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	f040 80a9 	bne.w	8004c1e <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8004acc:	78fb      	ldrb	r3, [r7, #3]
 8004ace:	015a      	lsls	r2, r3, #5
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004ae2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004aea:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8004aec:	78fb      	ldrb	r3, [r7, #3]
 8004aee:	015a      	lsls	r2, r3, #5
 8004af0:	693b      	ldr	r3, [r7, #16]
 8004af2:	4413      	add	r3, r2
 8004af4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004af8:	461a      	mov	r2, r3
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6013      	str	r3, [r2, #0]
 8004afe:	e08e      	b.n	8004c1e <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8004b00:	78fa      	ldrb	r2, [r7, #3]
 8004b02:	6879      	ldr	r1, [r7, #4]
 8004b04:	4613      	mov	r3, r2
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	1a9b      	subs	r3, r3, r2
 8004b0a:	009b      	lsls	r3, r3, #2
 8004b0c:	440b      	add	r3, r1
 8004b0e:	334d      	adds	r3, #77	@ 0x4d
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	2b04      	cmp	r3, #4
 8004b14:	d143      	bne.n	8004b9e <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004b16:	78fa      	ldrb	r2, [r7, #3]
 8004b18:	6879      	ldr	r1, [r7, #4]
 8004b1a:	4613      	mov	r3, r2
 8004b1c:	011b      	lsls	r3, r3, #4
 8004b1e:	1a9b      	subs	r3, r3, r2
 8004b20:	009b      	lsls	r3, r3, #2
 8004b22:	440b      	add	r3, r1
 8004b24:	334d      	adds	r3, #77	@ 0x4d
 8004b26:	2202      	movs	r2, #2
 8004b28:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004b2a:	78fa      	ldrb	r2, [r7, #3]
 8004b2c:	6879      	ldr	r1, [r7, #4]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	011b      	lsls	r3, r3, #4
 8004b32:	1a9b      	subs	r3, r3, r2
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	440b      	add	r3, r1
 8004b38:	334c      	adds	r3, #76	@ 0x4c
 8004b3a:	2202      	movs	r2, #2
 8004b3c:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004b3e:	78fa      	ldrb	r2, [r7, #3]
 8004b40:	6879      	ldr	r1, [r7, #4]
 8004b42:	4613      	mov	r3, r2
 8004b44:	011b      	lsls	r3, r3, #4
 8004b46:	1a9b      	subs	r3, r3, r2
 8004b48:	009b      	lsls	r3, r3, #2
 8004b4a:	440b      	add	r3, r1
 8004b4c:	3326      	adds	r3, #38	@ 0x26
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d00a      	beq.n	8004b6a <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004b54:	78fa      	ldrb	r2, [r7, #3]
 8004b56:	6879      	ldr	r1, [r7, #4]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	011b      	lsls	r3, r3, #4
 8004b5c:	1a9b      	subs	r3, r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	440b      	add	r3, r1
 8004b62:	3326      	adds	r3, #38	@ 0x26
 8004b64:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004b66:	2b02      	cmp	r3, #2
 8004b68:	d159      	bne.n	8004c1e <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8004b6a:	78fb      	ldrb	r3, [r7, #3]
 8004b6c:	015a      	lsls	r2, r3, #5
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	4413      	add	r3, r2
 8004b72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004b80:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004b88:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8004b8a:	78fb      	ldrb	r3, [r7, #3]
 8004b8c:	015a      	lsls	r2, r3, #5
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	4413      	add	r3, r2
 8004b92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004b96:	461a      	mov	r2, r3
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6013      	str	r3, [r2, #0]
 8004b9c:	e03f      	b.n	8004c1e <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8004b9e:	78fa      	ldrb	r2, [r7, #3]
 8004ba0:	6879      	ldr	r1, [r7, #4]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	011b      	lsls	r3, r3, #4
 8004ba6:	1a9b      	subs	r3, r3, r2
 8004ba8:	009b      	lsls	r3, r3, #2
 8004baa:	440b      	add	r3, r1
 8004bac:	334d      	adds	r3, #77	@ 0x4d
 8004bae:	781b      	ldrb	r3, [r3, #0]
 8004bb0:	2b08      	cmp	r3, #8
 8004bb2:	d126      	bne.n	8004c02 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8004bb4:	78fa      	ldrb	r2, [r7, #3]
 8004bb6:	6879      	ldr	r1, [r7, #4]
 8004bb8:	4613      	mov	r3, r2
 8004bba:	011b      	lsls	r3, r3, #4
 8004bbc:	1a9b      	subs	r3, r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	440b      	add	r3, r1
 8004bc2:	334d      	adds	r3, #77	@ 0x4d
 8004bc4:	2202      	movs	r2, #2
 8004bc6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8004bc8:	78fa      	ldrb	r2, [r7, #3]
 8004bca:	6879      	ldr	r1, [r7, #4]
 8004bcc:	4613      	mov	r3, r2
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	1a9b      	subs	r3, r3, r2
 8004bd2:	009b      	lsls	r3, r3, #2
 8004bd4:	440b      	add	r3, r1
 8004bd6:	3344      	adds	r3, #68	@ 0x44
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	1c59      	adds	r1, r3, #1
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	4613      	mov	r3, r2
 8004be0:	011b      	lsls	r3, r3, #4
 8004be2:	1a9b      	subs	r3, r3, r2
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	4403      	add	r3, r0
 8004be8:	3344      	adds	r3, #68	@ 0x44
 8004bea:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8004bec:	78fa      	ldrb	r2, [r7, #3]
 8004bee:	6879      	ldr	r1, [r7, #4]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	011b      	lsls	r3, r3, #4
 8004bf4:	1a9b      	subs	r3, r3, r2
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	440b      	add	r3, r1
 8004bfa:	334c      	adds	r3, #76	@ 0x4c
 8004bfc:	2204      	movs	r2, #4
 8004bfe:	701a      	strb	r2, [r3, #0]
 8004c00:	e00d      	b.n	8004c1e <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8004c02:	78fa      	ldrb	r2, [r7, #3]
 8004c04:	6879      	ldr	r1, [r7, #4]
 8004c06:	4613      	mov	r3, r2
 8004c08:	011b      	lsls	r3, r3, #4
 8004c0a:	1a9b      	subs	r3, r3, r2
 8004c0c:	009b      	lsls	r3, r3, #2
 8004c0e:	440b      	add	r3, r1
 8004c10:	334d      	adds	r3, #77	@ 0x4d
 8004c12:	781b      	ldrb	r3, [r3, #0]
 8004c14:	2b02      	cmp	r3, #2
 8004c16:	f000 8100 	beq.w	8004e1a <HCD_HC_IN_IRQHandler+0xcca>
 8004c1a:	e000      	b.n	8004c1e <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8004c1c:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8004c1e:	78fa      	ldrb	r2, [r7, #3]
 8004c20:	6879      	ldr	r1, [r7, #4]
 8004c22:	4613      	mov	r3, r2
 8004c24:	011b      	lsls	r3, r3, #4
 8004c26:	1a9b      	subs	r3, r3, r2
 8004c28:	009b      	lsls	r3, r3, #2
 8004c2a:	440b      	add	r3, r1
 8004c2c:	334c      	adds	r3, #76	@ 0x4c
 8004c2e:	781a      	ldrb	r2, [r3, #0]
 8004c30:	78fb      	ldrb	r3, [r7, #3]
 8004c32:	4619      	mov	r1, r3
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	f7ff fa7d 	bl	8004134 <HAL_HCD_HC_NotifyURBChange_Callback>
 8004c3a:	e0ef      	b.n	8004e1c <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	78fa      	ldrb	r2, [r7, #3]
 8004c42:	4611      	mov	r1, r2
 8004c44:	4618      	mov	r0, r3
 8004c46:	f004 fbcf 	bl	80093e8 <USB_ReadChInterrupts>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c50:	2b40      	cmp	r3, #64	@ 0x40
 8004c52:	d12f      	bne.n	8004cb4 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8004c54:	78fb      	ldrb	r3, [r7, #3]
 8004c56:	015a      	lsls	r2, r3, #5
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	4413      	add	r3, r2
 8004c5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004c60:	461a      	mov	r2, r3
 8004c62:	2340      	movs	r3, #64	@ 0x40
 8004c64:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8004c66:	78fa      	ldrb	r2, [r7, #3]
 8004c68:	6879      	ldr	r1, [r7, #4]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	011b      	lsls	r3, r3, #4
 8004c6e:	1a9b      	subs	r3, r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	440b      	add	r3, r1
 8004c74:	334d      	adds	r3, #77	@ 0x4d
 8004c76:	2205      	movs	r2, #5
 8004c78:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8004c7a:	78fa      	ldrb	r2, [r7, #3]
 8004c7c:	6879      	ldr	r1, [r7, #4]
 8004c7e:	4613      	mov	r3, r2
 8004c80:	011b      	lsls	r3, r3, #4
 8004c82:	1a9b      	subs	r3, r3, r2
 8004c84:	009b      	lsls	r3, r3, #2
 8004c86:	440b      	add	r3, r1
 8004c88:	331a      	adds	r3, #26
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d109      	bne.n	8004ca4 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004c90:	78fa      	ldrb	r2, [r7, #3]
 8004c92:	6879      	ldr	r1, [r7, #4]
 8004c94:	4613      	mov	r3, r2
 8004c96:	011b      	lsls	r3, r3, #4
 8004c98:	1a9b      	subs	r3, r3, r2
 8004c9a:	009b      	lsls	r3, r3, #2
 8004c9c:	440b      	add	r3, r1
 8004c9e:	3344      	adds	r3, #68	@ 0x44
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	78fa      	ldrb	r2, [r7, #3]
 8004caa:	4611      	mov	r1, r2
 8004cac:	4618      	mov	r0, r3
 8004cae:	f004 fd0d 	bl	80096cc <USB_HC_Halt>
 8004cb2:	e0b3      	b.n	8004e1c <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	78fa      	ldrb	r2, [r7, #3]
 8004cba:	4611      	mov	r1, r2
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	f004 fb93 	bl	80093e8 <USB_ReadChInterrupts>
 8004cc2:	4603      	mov	r3, r0
 8004cc4:	f003 0310 	and.w	r3, r3, #16
 8004cc8:	2b10      	cmp	r3, #16
 8004cca:	f040 80a7 	bne.w	8004e1c <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8004cce:	78fa      	ldrb	r2, [r7, #3]
 8004cd0:	6879      	ldr	r1, [r7, #4]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	011b      	lsls	r3, r3, #4
 8004cd6:	1a9b      	subs	r3, r3, r2
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	440b      	add	r3, r1
 8004cdc:	3326      	adds	r3, #38	@ 0x26
 8004cde:	781b      	ldrb	r3, [r3, #0]
 8004ce0:	2b03      	cmp	r3, #3
 8004ce2:	d11b      	bne.n	8004d1c <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004ce4:	78fa      	ldrb	r2, [r7, #3]
 8004ce6:	6879      	ldr	r1, [r7, #4]
 8004ce8:	4613      	mov	r3, r2
 8004cea:	011b      	lsls	r3, r3, #4
 8004cec:	1a9b      	subs	r3, r3, r2
 8004cee:	009b      	lsls	r3, r3, #2
 8004cf0:	440b      	add	r3, r1
 8004cf2:	3344      	adds	r3, #68	@ 0x44
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8004cf8:	78fa      	ldrb	r2, [r7, #3]
 8004cfa:	6879      	ldr	r1, [r7, #4]
 8004cfc:	4613      	mov	r3, r2
 8004cfe:	011b      	lsls	r3, r3, #4
 8004d00:	1a9b      	subs	r3, r3, r2
 8004d02:	009b      	lsls	r3, r3, #2
 8004d04:	440b      	add	r3, r1
 8004d06:	334d      	adds	r3, #77	@ 0x4d
 8004d08:	2204      	movs	r2, #4
 8004d0a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	78fa      	ldrb	r2, [r7, #3]
 8004d12:	4611      	mov	r1, r2
 8004d14:	4618      	mov	r0, r3
 8004d16:	f004 fcd9 	bl	80096cc <USB_HC_Halt>
 8004d1a:	e03f      	b.n	8004d9c <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004d1c:	78fa      	ldrb	r2, [r7, #3]
 8004d1e:	6879      	ldr	r1, [r7, #4]
 8004d20:	4613      	mov	r3, r2
 8004d22:	011b      	lsls	r3, r3, #4
 8004d24:	1a9b      	subs	r3, r3, r2
 8004d26:	009b      	lsls	r3, r3, #2
 8004d28:	440b      	add	r3, r1
 8004d2a:	3326      	adds	r3, #38	@ 0x26
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d00a      	beq.n	8004d48 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8004d32:	78fa      	ldrb	r2, [r7, #3]
 8004d34:	6879      	ldr	r1, [r7, #4]
 8004d36:	4613      	mov	r3, r2
 8004d38:	011b      	lsls	r3, r3, #4
 8004d3a:	1a9b      	subs	r3, r3, r2
 8004d3c:	009b      	lsls	r3, r3, #2
 8004d3e:	440b      	add	r3, r1
 8004d40:	3326      	adds	r3, #38	@ 0x26
 8004d42:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8004d44:	2b02      	cmp	r3, #2
 8004d46:	d129      	bne.n	8004d9c <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8004d48:	78fa      	ldrb	r2, [r7, #3]
 8004d4a:	6879      	ldr	r1, [r7, #4]
 8004d4c:	4613      	mov	r3, r2
 8004d4e:	011b      	lsls	r3, r3, #4
 8004d50:	1a9b      	subs	r3, r3, r2
 8004d52:	009b      	lsls	r3, r3, #2
 8004d54:	440b      	add	r3, r1
 8004d56:	3344      	adds	r3, #68	@ 0x44
 8004d58:	2200      	movs	r2, #0
 8004d5a:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	799b      	ldrb	r3, [r3, #6]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d00a      	beq.n	8004d7a <HCD_HC_IN_IRQHandler+0xc2a>
 8004d64:	78fa      	ldrb	r2, [r7, #3]
 8004d66:	6879      	ldr	r1, [r7, #4]
 8004d68:	4613      	mov	r3, r2
 8004d6a:	011b      	lsls	r3, r3, #4
 8004d6c:	1a9b      	subs	r3, r3, r2
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	440b      	add	r3, r1
 8004d72:	331b      	adds	r3, #27
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	2b01      	cmp	r3, #1
 8004d78:	d110      	bne.n	8004d9c <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8004d7a:	78fa      	ldrb	r2, [r7, #3]
 8004d7c:	6879      	ldr	r1, [r7, #4]
 8004d7e:	4613      	mov	r3, r2
 8004d80:	011b      	lsls	r3, r3, #4
 8004d82:	1a9b      	subs	r3, r3, r2
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	440b      	add	r3, r1
 8004d88:	334d      	adds	r3, #77	@ 0x4d
 8004d8a:	2204      	movs	r2, #4
 8004d8c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	78fa      	ldrb	r2, [r7, #3]
 8004d94:	4611      	mov	r1, r2
 8004d96:	4618      	mov	r0, r3
 8004d98:	f004 fc98 	bl	80096cc <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8004d9c:	78fa      	ldrb	r2, [r7, #3]
 8004d9e:	6879      	ldr	r1, [r7, #4]
 8004da0:	4613      	mov	r3, r2
 8004da2:	011b      	lsls	r3, r3, #4
 8004da4:	1a9b      	subs	r3, r3, r2
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	440b      	add	r3, r1
 8004daa:	331b      	adds	r3, #27
 8004dac:	781b      	ldrb	r3, [r3, #0]
 8004dae:	2b01      	cmp	r3, #1
 8004db0:	d129      	bne.n	8004e06 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8004db2:	78fa      	ldrb	r2, [r7, #3]
 8004db4:	6879      	ldr	r1, [r7, #4]
 8004db6:	4613      	mov	r3, r2
 8004db8:	011b      	lsls	r3, r3, #4
 8004dba:	1a9b      	subs	r3, r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	440b      	add	r3, r1
 8004dc0:	331b      	adds	r3, #27
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8004dc6:	78fb      	ldrb	r3, [r7, #3]
 8004dc8:	015a      	lsls	r2, r3, #5
 8004dca:	693b      	ldr	r3, [r7, #16]
 8004dcc:	4413      	add	r3, r2
 8004dce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	78fa      	ldrb	r2, [r7, #3]
 8004dd6:	0151      	lsls	r1, r2, #5
 8004dd8:	693a      	ldr	r2, [r7, #16]
 8004dda:	440a      	add	r2, r1
 8004ddc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004de0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004de4:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8004de6:	78fb      	ldrb	r3, [r7, #3]
 8004de8:	015a      	lsls	r2, r3, #5
 8004dea:	693b      	ldr	r3, [r7, #16]
 8004dec:	4413      	add	r3, r2
 8004dee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004df2:	68db      	ldr	r3, [r3, #12]
 8004df4:	78fa      	ldrb	r2, [r7, #3]
 8004df6:	0151      	lsls	r1, r2, #5
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	440a      	add	r2, r1
 8004dfc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004e00:	f043 0320 	orr.w	r3, r3, #32
 8004e04:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8004e06:	78fb      	ldrb	r3, [r7, #3]
 8004e08:	015a      	lsls	r2, r3, #5
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e12:	461a      	mov	r2, r3
 8004e14:	2310      	movs	r3, #16
 8004e16:	6093      	str	r3, [r2, #8]
 8004e18:	e000      	b.n	8004e1c <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8004e1a:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8004e1c:	3718      	adds	r7, #24
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b086      	sub	sp, #24
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	78fa      	ldrb	r2, [r7, #3]
 8004e3e:	4611      	mov	r1, r2
 8004e40:	4618      	mov	r0, r3
 8004e42:	f004 fad1 	bl	80093e8 <USB_ReadChInterrupts>
 8004e46:	4603      	mov	r3, r0
 8004e48:	f003 0304 	and.w	r3, r3, #4
 8004e4c:	2b04      	cmp	r3, #4
 8004e4e:	d11b      	bne.n	8004e88 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8004e50:	78fb      	ldrb	r3, [r7, #3]
 8004e52:	015a      	lsls	r2, r3, #5
 8004e54:	693b      	ldr	r3, [r7, #16]
 8004e56:	4413      	add	r3, r2
 8004e58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004e5c:	461a      	mov	r2, r3
 8004e5e:	2304      	movs	r3, #4
 8004e60:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8004e62:	78fa      	ldrb	r2, [r7, #3]
 8004e64:	6879      	ldr	r1, [r7, #4]
 8004e66:	4613      	mov	r3, r2
 8004e68:	011b      	lsls	r3, r3, #4
 8004e6a:	1a9b      	subs	r3, r3, r2
 8004e6c:	009b      	lsls	r3, r3, #2
 8004e6e:	440b      	add	r3, r1
 8004e70:	334d      	adds	r3, #77	@ 0x4d
 8004e72:	2207      	movs	r2, #7
 8004e74:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	78fa      	ldrb	r2, [r7, #3]
 8004e7c:	4611      	mov	r1, r2
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f004 fc24 	bl	80096cc <USB_HC_Halt>
 8004e84:	f000 bc89 	b.w	800579a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	78fa      	ldrb	r2, [r7, #3]
 8004e8e:	4611      	mov	r1, r2
 8004e90:	4618      	mov	r0, r3
 8004e92:	f004 faa9 	bl	80093e8 <USB_ReadChInterrupts>
 8004e96:	4603      	mov	r3, r0
 8004e98:	f003 0320 	and.w	r3, r3, #32
 8004e9c:	2b20      	cmp	r3, #32
 8004e9e:	f040 8082 	bne.w	8004fa6 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8004ea2:	78fb      	ldrb	r3, [r7, #3]
 8004ea4:	015a      	lsls	r2, r3, #5
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	4413      	add	r3, r2
 8004eaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004eae:	461a      	mov	r2, r3
 8004eb0:	2320      	movs	r3, #32
 8004eb2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8004eb4:	78fa      	ldrb	r2, [r7, #3]
 8004eb6:	6879      	ldr	r1, [r7, #4]
 8004eb8:	4613      	mov	r3, r2
 8004eba:	011b      	lsls	r3, r3, #4
 8004ebc:	1a9b      	subs	r3, r3, r2
 8004ebe:	009b      	lsls	r3, r3, #2
 8004ec0:	440b      	add	r3, r1
 8004ec2:	3319      	adds	r3, #25
 8004ec4:	781b      	ldrb	r3, [r3, #0]
 8004ec6:	2b01      	cmp	r3, #1
 8004ec8:	d124      	bne.n	8004f14 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8004eca:	78fa      	ldrb	r2, [r7, #3]
 8004ecc:	6879      	ldr	r1, [r7, #4]
 8004ece:	4613      	mov	r3, r2
 8004ed0:	011b      	lsls	r3, r3, #4
 8004ed2:	1a9b      	subs	r3, r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	440b      	add	r3, r1
 8004ed8:	3319      	adds	r3, #25
 8004eda:	2200      	movs	r2, #0
 8004edc:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8004ede:	78fa      	ldrb	r2, [r7, #3]
 8004ee0:	6879      	ldr	r1, [r7, #4]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	011b      	lsls	r3, r3, #4
 8004ee6:	1a9b      	subs	r3, r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	440b      	add	r3, r1
 8004eec:	334c      	adds	r3, #76	@ 0x4c
 8004eee:	2202      	movs	r2, #2
 8004ef0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8004ef2:	78fa      	ldrb	r2, [r7, #3]
 8004ef4:	6879      	ldr	r1, [r7, #4]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	011b      	lsls	r3, r3, #4
 8004efa:	1a9b      	subs	r3, r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	440b      	add	r3, r1
 8004f00:	334d      	adds	r3, #77	@ 0x4d
 8004f02:	2203      	movs	r2, #3
 8004f04:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	78fa      	ldrb	r2, [r7, #3]
 8004f0c:	4611      	mov	r1, r2
 8004f0e:	4618      	mov	r0, r3
 8004f10:	f004 fbdc 	bl	80096cc <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8004f14:	78fa      	ldrb	r2, [r7, #3]
 8004f16:	6879      	ldr	r1, [r7, #4]
 8004f18:	4613      	mov	r3, r2
 8004f1a:	011b      	lsls	r3, r3, #4
 8004f1c:	1a9b      	subs	r3, r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	440b      	add	r3, r1
 8004f22:	331a      	adds	r3, #26
 8004f24:	781b      	ldrb	r3, [r3, #0]
 8004f26:	2b01      	cmp	r3, #1
 8004f28:	f040 8437 	bne.w	800579a <HCD_HC_OUT_IRQHandler+0x978>
 8004f2c:	78fa      	ldrb	r2, [r7, #3]
 8004f2e:	6879      	ldr	r1, [r7, #4]
 8004f30:	4613      	mov	r3, r2
 8004f32:	011b      	lsls	r3, r3, #4
 8004f34:	1a9b      	subs	r3, r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	440b      	add	r3, r1
 8004f3a:	331b      	adds	r3, #27
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	f040 842b 	bne.w	800579a <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8004f44:	78fa      	ldrb	r2, [r7, #3]
 8004f46:	6879      	ldr	r1, [r7, #4]
 8004f48:	4613      	mov	r3, r2
 8004f4a:	011b      	lsls	r3, r3, #4
 8004f4c:	1a9b      	subs	r3, r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	440b      	add	r3, r1
 8004f52:	3326      	adds	r3, #38	@ 0x26
 8004f54:	781b      	ldrb	r3, [r3, #0]
 8004f56:	2b01      	cmp	r3, #1
 8004f58:	d009      	beq.n	8004f6e <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8004f5a:	78fa      	ldrb	r2, [r7, #3]
 8004f5c:	6879      	ldr	r1, [r7, #4]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	011b      	lsls	r3, r3, #4
 8004f62:	1a9b      	subs	r3, r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	440b      	add	r3, r1
 8004f68:	331b      	adds	r3, #27
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8004f6e:	78fa      	ldrb	r2, [r7, #3]
 8004f70:	6879      	ldr	r1, [r7, #4]
 8004f72:	4613      	mov	r3, r2
 8004f74:	011b      	lsls	r3, r3, #4
 8004f76:	1a9b      	subs	r3, r3, r2
 8004f78:	009b      	lsls	r3, r3, #2
 8004f7a:	440b      	add	r3, r1
 8004f7c:	334d      	adds	r3, #77	@ 0x4d
 8004f7e:	2203      	movs	r2, #3
 8004f80:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	78fa      	ldrb	r2, [r7, #3]
 8004f88:	4611      	mov	r1, r2
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f004 fb9e 	bl	80096cc <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8004f90:	78fa      	ldrb	r2, [r7, #3]
 8004f92:	6879      	ldr	r1, [r7, #4]
 8004f94:	4613      	mov	r3, r2
 8004f96:	011b      	lsls	r3, r3, #4
 8004f98:	1a9b      	subs	r3, r3, r2
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	440b      	add	r3, r1
 8004f9e:	3344      	adds	r3, #68	@ 0x44
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	601a      	str	r2, [r3, #0]
 8004fa4:	e3f9      	b.n	800579a <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	78fa      	ldrb	r2, [r7, #3]
 8004fac:	4611      	mov	r1, r2
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f004 fa1a 	bl	80093e8 <USB_ReadChInterrupts>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004fba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004fbe:	d111      	bne.n	8004fe4 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8004fc0:	78fb      	ldrb	r3, [r7, #3]
 8004fc2:	015a      	lsls	r2, r3, #5
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	4413      	add	r3, r2
 8004fc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004fcc:	461a      	mov	r2, r3
 8004fce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004fd2:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	78fa      	ldrb	r2, [r7, #3]
 8004fda:	4611      	mov	r1, r2
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f004 fb75 	bl	80096cc <USB_HC_Halt>
 8004fe2:	e3da      	b.n	800579a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	78fa      	ldrb	r2, [r7, #3]
 8004fea:	4611      	mov	r1, r2
 8004fec:	4618      	mov	r0, r3
 8004fee:	f004 f9fb 	bl	80093e8 <USB_ReadChInterrupts>
 8004ff2:	4603      	mov	r3, r0
 8004ff4:	f003 0301 	and.w	r3, r3, #1
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d168      	bne.n	80050ce <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8004ffc:	78fa      	ldrb	r2, [r7, #3]
 8004ffe:	6879      	ldr	r1, [r7, #4]
 8005000:	4613      	mov	r3, r2
 8005002:	011b      	lsls	r3, r3, #4
 8005004:	1a9b      	subs	r3, r3, r2
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	440b      	add	r3, r1
 800500a:	3344      	adds	r3, #68	@ 0x44
 800500c:	2200      	movs	r2, #0
 800500e:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	78fa      	ldrb	r2, [r7, #3]
 8005016:	4611      	mov	r1, r2
 8005018:	4618      	mov	r0, r3
 800501a:	f004 f9e5 	bl	80093e8 <USB_ReadChInterrupts>
 800501e:	4603      	mov	r3, r0
 8005020:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005024:	2b40      	cmp	r3, #64	@ 0x40
 8005026:	d112      	bne.n	800504e <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005028:	78fa      	ldrb	r2, [r7, #3]
 800502a:	6879      	ldr	r1, [r7, #4]
 800502c:	4613      	mov	r3, r2
 800502e:	011b      	lsls	r3, r3, #4
 8005030:	1a9b      	subs	r3, r3, r2
 8005032:	009b      	lsls	r3, r3, #2
 8005034:	440b      	add	r3, r1
 8005036:	3319      	adds	r3, #25
 8005038:	2201      	movs	r2, #1
 800503a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800503c:	78fb      	ldrb	r3, [r7, #3]
 800503e:	015a      	lsls	r2, r3, #5
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	4413      	add	r3, r2
 8005044:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005048:	461a      	mov	r2, r3
 800504a:	2340      	movs	r3, #64	@ 0x40
 800504c:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800504e:	78fa      	ldrb	r2, [r7, #3]
 8005050:	6879      	ldr	r1, [r7, #4]
 8005052:	4613      	mov	r3, r2
 8005054:	011b      	lsls	r3, r3, #4
 8005056:	1a9b      	subs	r3, r3, r2
 8005058:	009b      	lsls	r3, r3, #2
 800505a:	440b      	add	r3, r1
 800505c:	331b      	adds	r3, #27
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d019      	beq.n	8005098 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8005064:	78fa      	ldrb	r2, [r7, #3]
 8005066:	6879      	ldr	r1, [r7, #4]
 8005068:	4613      	mov	r3, r2
 800506a:	011b      	lsls	r3, r3, #4
 800506c:	1a9b      	subs	r3, r3, r2
 800506e:	009b      	lsls	r3, r3, #2
 8005070:	440b      	add	r3, r1
 8005072:	331b      	adds	r3, #27
 8005074:	2200      	movs	r2, #0
 8005076:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8005078:	78fb      	ldrb	r3, [r7, #3]
 800507a:	015a      	lsls	r2, r3, #5
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	4413      	add	r3, r2
 8005080:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	78fa      	ldrb	r2, [r7, #3]
 8005088:	0151      	lsls	r1, r2, #5
 800508a:	693a      	ldr	r2, [r7, #16]
 800508c:	440a      	add	r2, r1
 800508e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005092:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005096:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8005098:	78fb      	ldrb	r3, [r7, #3]
 800509a:	015a      	lsls	r2, r3, #5
 800509c:	693b      	ldr	r3, [r7, #16]
 800509e:	4413      	add	r3, r2
 80050a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80050a4:	461a      	mov	r2, r3
 80050a6:	2301      	movs	r3, #1
 80050a8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80050aa:	78fa      	ldrb	r2, [r7, #3]
 80050ac:	6879      	ldr	r1, [r7, #4]
 80050ae:	4613      	mov	r3, r2
 80050b0:	011b      	lsls	r3, r3, #4
 80050b2:	1a9b      	subs	r3, r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	440b      	add	r3, r1
 80050b8:	334d      	adds	r3, #77	@ 0x4d
 80050ba:	2201      	movs	r2, #1
 80050bc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	78fa      	ldrb	r2, [r7, #3]
 80050c4:	4611      	mov	r1, r2
 80050c6:	4618      	mov	r0, r3
 80050c8:	f004 fb00 	bl	80096cc <USB_HC_Halt>
 80050cc:	e365      	b.n	800579a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	78fa      	ldrb	r2, [r7, #3]
 80050d4:	4611      	mov	r1, r2
 80050d6:	4618      	mov	r0, r3
 80050d8:	f004 f986 	bl	80093e8 <USB_ReadChInterrupts>
 80050dc:	4603      	mov	r3, r0
 80050de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050e2:	2b40      	cmp	r3, #64	@ 0x40
 80050e4:	d139      	bne.n	800515a <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80050e6:	78fa      	ldrb	r2, [r7, #3]
 80050e8:	6879      	ldr	r1, [r7, #4]
 80050ea:	4613      	mov	r3, r2
 80050ec:	011b      	lsls	r3, r3, #4
 80050ee:	1a9b      	subs	r3, r3, r2
 80050f0:	009b      	lsls	r3, r3, #2
 80050f2:	440b      	add	r3, r1
 80050f4:	334d      	adds	r3, #77	@ 0x4d
 80050f6:	2205      	movs	r2, #5
 80050f8:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80050fa:	78fa      	ldrb	r2, [r7, #3]
 80050fc:	6879      	ldr	r1, [r7, #4]
 80050fe:	4613      	mov	r3, r2
 8005100:	011b      	lsls	r3, r3, #4
 8005102:	1a9b      	subs	r3, r3, r2
 8005104:	009b      	lsls	r3, r3, #2
 8005106:	440b      	add	r3, r1
 8005108:	331a      	adds	r3, #26
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d109      	bne.n	8005124 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8005110:	78fa      	ldrb	r2, [r7, #3]
 8005112:	6879      	ldr	r1, [r7, #4]
 8005114:	4613      	mov	r3, r2
 8005116:	011b      	lsls	r3, r3, #4
 8005118:	1a9b      	subs	r3, r3, r2
 800511a:	009b      	lsls	r3, r3, #2
 800511c:	440b      	add	r3, r1
 800511e:	3319      	adds	r3, #25
 8005120:	2201      	movs	r2, #1
 8005122:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8005124:	78fa      	ldrb	r2, [r7, #3]
 8005126:	6879      	ldr	r1, [r7, #4]
 8005128:	4613      	mov	r3, r2
 800512a:	011b      	lsls	r3, r3, #4
 800512c:	1a9b      	subs	r3, r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	440b      	add	r3, r1
 8005132:	3344      	adds	r3, #68	@ 0x44
 8005134:	2200      	movs	r2, #0
 8005136:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	78fa      	ldrb	r2, [r7, #3]
 800513e:	4611      	mov	r1, r2
 8005140:	4618      	mov	r0, r3
 8005142:	f004 fac3 	bl	80096cc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8005146:	78fb      	ldrb	r3, [r7, #3]
 8005148:	015a      	lsls	r2, r3, #5
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	4413      	add	r3, r2
 800514e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005152:	461a      	mov	r2, r3
 8005154:	2340      	movs	r3, #64	@ 0x40
 8005156:	6093      	str	r3, [r2, #8]
 8005158:	e31f      	b.n	800579a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	78fa      	ldrb	r2, [r7, #3]
 8005160:	4611      	mov	r1, r2
 8005162:	4618      	mov	r0, r3
 8005164:	f004 f940 	bl	80093e8 <USB_ReadChInterrupts>
 8005168:	4603      	mov	r3, r0
 800516a:	f003 0308 	and.w	r3, r3, #8
 800516e:	2b08      	cmp	r3, #8
 8005170:	d11a      	bne.n	80051a8 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8005172:	78fb      	ldrb	r3, [r7, #3]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	4413      	add	r3, r2
 800517a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800517e:	461a      	mov	r2, r3
 8005180:	2308      	movs	r3, #8
 8005182:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8005184:	78fa      	ldrb	r2, [r7, #3]
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	4613      	mov	r3, r2
 800518a:	011b      	lsls	r3, r3, #4
 800518c:	1a9b      	subs	r3, r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	440b      	add	r3, r1
 8005192:	334d      	adds	r3, #77	@ 0x4d
 8005194:	2206      	movs	r2, #6
 8005196:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	78fa      	ldrb	r2, [r7, #3]
 800519e:	4611      	mov	r1, r2
 80051a0:	4618      	mov	r0, r3
 80051a2:	f004 fa93 	bl	80096cc <USB_HC_Halt>
 80051a6:	e2f8      	b.n	800579a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	78fa      	ldrb	r2, [r7, #3]
 80051ae:	4611      	mov	r1, r2
 80051b0:	4618      	mov	r0, r3
 80051b2:	f004 f919 	bl	80093e8 <USB_ReadChInterrupts>
 80051b6:	4603      	mov	r3, r0
 80051b8:	f003 0310 	and.w	r3, r3, #16
 80051bc:	2b10      	cmp	r3, #16
 80051be:	d144      	bne.n	800524a <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80051c0:	78fa      	ldrb	r2, [r7, #3]
 80051c2:	6879      	ldr	r1, [r7, #4]
 80051c4:	4613      	mov	r3, r2
 80051c6:	011b      	lsls	r3, r3, #4
 80051c8:	1a9b      	subs	r3, r3, r2
 80051ca:	009b      	lsls	r3, r3, #2
 80051cc:	440b      	add	r3, r1
 80051ce:	3344      	adds	r3, #68	@ 0x44
 80051d0:	2200      	movs	r2, #0
 80051d2:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80051d4:	78fa      	ldrb	r2, [r7, #3]
 80051d6:	6879      	ldr	r1, [r7, #4]
 80051d8:	4613      	mov	r3, r2
 80051da:	011b      	lsls	r3, r3, #4
 80051dc:	1a9b      	subs	r3, r3, r2
 80051de:	009b      	lsls	r3, r3, #2
 80051e0:	440b      	add	r3, r1
 80051e2:	334d      	adds	r3, #77	@ 0x4d
 80051e4:	2204      	movs	r2, #4
 80051e6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80051e8:	78fa      	ldrb	r2, [r7, #3]
 80051ea:	6879      	ldr	r1, [r7, #4]
 80051ec:	4613      	mov	r3, r2
 80051ee:	011b      	lsls	r3, r3, #4
 80051f0:	1a9b      	subs	r3, r3, r2
 80051f2:	009b      	lsls	r3, r3, #2
 80051f4:	440b      	add	r3, r1
 80051f6:	3319      	adds	r3, #25
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d114      	bne.n	8005228 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80051fe:	78fa      	ldrb	r2, [r7, #3]
 8005200:	6879      	ldr	r1, [r7, #4]
 8005202:	4613      	mov	r3, r2
 8005204:	011b      	lsls	r3, r3, #4
 8005206:	1a9b      	subs	r3, r3, r2
 8005208:	009b      	lsls	r3, r3, #2
 800520a:	440b      	add	r3, r1
 800520c:	3318      	adds	r3, #24
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d109      	bne.n	8005228 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8005214:	78fa      	ldrb	r2, [r7, #3]
 8005216:	6879      	ldr	r1, [r7, #4]
 8005218:	4613      	mov	r3, r2
 800521a:	011b      	lsls	r3, r3, #4
 800521c:	1a9b      	subs	r3, r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	440b      	add	r3, r1
 8005222:	3319      	adds	r3, #25
 8005224:	2201      	movs	r2, #1
 8005226:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	78fa      	ldrb	r2, [r7, #3]
 800522e:	4611      	mov	r1, r2
 8005230:	4618      	mov	r0, r3
 8005232:	f004 fa4b 	bl	80096cc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8005236:	78fb      	ldrb	r3, [r7, #3]
 8005238:	015a      	lsls	r2, r3, #5
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	4413      	add	r3, r2
 800523e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005242:	461a      	mov	r2, r3
 8005244:	2310      	movs	r3, #16
 8005246:	6093      	str	r3, [r2, #8]
 8005248:	e2a7      	b.n	800579a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	78fa      	ldrb	r2, [r7, #3]
 8005250:	4611      	mov	r1, r2
 8005252:	4618      	mov	r0, r3
 8005254:	f004 f8c8 	bl	80093e8 <USB_ReadChInterrupts>
 8005258:	4603      	mov	r3, r0
 800525a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800525e:	2b80      	cmp	r3, #128	@ 0x80
 8005260:	f040 8083 	bne.w	800536a <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	799b      	ldrb	r3, [r3, #6]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d111      	bne.n	8005290 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 800526c:	78fa      	ldrb	r2, [r7, #3]
 800526e:	6879      	ldr	r1, [r7, #4]
 8005270:	4613      	mov	r3, r2
 8005272:	011b      	lsls	r3, r3, #4
 8005274:	1a9b      	subs	r3, r3, r2
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	440b      	add	r3, r1
 800527a:	334d      	adds	r3, #77	@ 0x4d
 800527c:	2207      	movs	r2, #7
 800527e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	78fa      	ldrb	r2, [r7, #3]
 8005286:	4611      	mov	r1, r2
 8005288:	4618      	mov	r0, r3
 800528a:	f004 fa1f 	bl	80096cc <USB_HC_Halt>
 800528e:	e062      	b.n	8005356 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8005290:	78fa      	ldrb	r2, [r7, #3]
 8005292:	6879      	ldr	r1, [r7, #4]
 8005294:	4613      	mov	r3, r2
 8005296:	011b      	lsls	r3, r3, #4
 8005298:	1a9b      	subs	r3, r3, r2
 800529a:	009b      	lsls	r3, r3, #2
 800529c:	440b      	add	r3, r1
 800529e:	3344      	adds	r3, #68	@ 0x44
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	1c59      	adds	r1, r3, #1
 80052a4:	6878      	ldr	r0, [r7, #4]
 80052a6:	4613      	mov	r3, r2
 80052a8:	011b      	lsls	r3, r3, #4
 80052aa:	1a9b      	subs	r3, r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	4403      	add	r3, r0
 80052b0:	3344      	adds	r3, #68	@ 0x44
 80052b2:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80052b4:	78fa      	ldrb	r2, [r7, #3]
 80052b6:	6879      	ldr	r1, [r7, #4]
 80052b8:	4613      	mov	r3, r2
 80052ba:	011b      	lsls	r3, r3, #4
 80052bc:	1a9b      	subs	r3, r3, r2
 80052be:	009b      	lsls	r3, r3, #2
 80052c0:	440b      	add	r3, r1
 80052c2:	3344      	adds	r3, #68	@ 0x44
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d922      	bls.n	8005310 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80052ca:	78fa      	ldrb	r2, [r7, #3]
 80052cc:	6879      	ldr	r1, [r7, #4]
 80052ce:	4613      	mov	r3, r2
 80052d0:	011b      	lsls	r3, r3, #4
 80052d2:	1a9b      	subs	r3, r3, r2
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	440b      	add	r3, r1
 80052d8:	3344      	adds	r3, #68	@ 0x44
 80052da:	2200      	movs	r2, #0
 80052dc:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80052de:	78fa      	ldrb	r2, [r7, #3]
 80052e0:	6879      	ldr	r1, [r7, #4]
 80052e2:	4613      	mov	r3, r2
 80052e4:	011b      	lsls	r3, r3, #4
 80052e6:	1a9b      	subs	r3, r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	440b      	add	r3, r1
 80052ec:	334c      	adds	r3, #76	@ 0x4c
 80052ee:	2204      	movs	r2, #4
 80052f0:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80052f2:	78fa      	ldrb	r2, [r7, #3]
 80052f4:	6879      	ldr	r1, [r7, #4]
 80052f6:	4613      	mov	r3, r2
 80052f8:	011b      	lsls	r3, r3, #4
 80052fa:	1a9b      	subs	r3, r3, r2
 80052fc:	009b      	lsls	r3, r3, #2
 80052fe:	440b      	add	r3, r1
 8005300:	334c      	adds	r3, #76	@ 0x4c
 8005302:	781a      	ldrb	r2, [r3, #0]
 8005304:	78fb      	ldrb	r3, [r7, #3]
 8005306:	4619      	mov	r1, r3
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f7fe ff13 	bl	8004134 <HAL_HCD_HC_NotifyURBChange_Callback>
 800530e:	e022      	b.n	8005356 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005310:	78fa      	ldrb	r2, [r7, #3]
 8005312:	6879      	ldr	r1, [r7, #4]
 8005314:	4613      	mov	r3, r2
 8005316:	011b      	lsls	r3, r3, #4
 8005318:	1a9b      	subs	r3, r3, r2
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	440b      	add	r3, r1
 800531e:	334c      	adds	r3, #76	@ 0x4c
 8005320:	2202      	movs	r2, #2
 8005322:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005324:	78fb      	ldrb	r3, [r7, #3]
 8005326:	015a      	lsls	r2, r3, #5
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	4413      	add	r3, r2
 800532c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800533a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005342:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005344:	78fb      	ldrb	r3, [r7, #3]
 8005346:	015a      	lsls	r2, r3, #5
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	4413      	add	r3, r2
 800534c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005350:	461a      	mov	r2, r3
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8005356:	78fb      	ldrb	r3, [r7, #3]
 8005358:	015a      	lsls	r2, r3, #5
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	4413      	add	r3, r2
 800535e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005362:	461a      	mov	r2, r3
 8005364:	2380      	movs	r3, #128	@ 0x80
 8005366:	6093      	str	r3, [r2, #8]
 8005368:	e217      	b.n	800579a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	78fa      	ldrb	r2, [r7, #3]
 8005370:	4611      	mov	r1, r2
 8005372:	4618      	mov	r0, r3
 8005374:	f004 f838 	bl	80093e8 <USB_ReadChInterrupts>
 8005378:	4603      	mov	r3, r0
 800537a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800537e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005382:	d11b      	bne.n	80053bc <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8005384:	78fa      	ldrb	r2, [r7, #3]
 8005386:	6879      	ldr	r1, [r7, #4]
 8005388:	4613      	mov	r3, r2
 800538a:	011b      	lsls	r3, r3, #4
 800538c:	1a9b      	subs	r3, r3, r2
 800538e:	009b      	lsls	r3, r3, #2
 8005390:	440b      	add	r3, r1
 8005392:	334d      	adds	r3, #77	@ 0x4d
 8005394:	2209      	movs	r2, #9
 8005396:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	78fa      	ldrb	r2, [r7, #3]
 800539e:	4611      	mov	r1, r2
 80053a0:	4618      	mov	r0, r3
 80053a2:	f004 f993 	bl	80096cc <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80053a6:	78fb      	ldrb	r3, [r7, #3]
 80053a8:	015a      	lsls	r2, r3, #5
 80053aa:	693b      	ldr	r3, [r7, #16]
 80053ac:	4413      	add	r3, r2
 80053ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053b2:	461a      	mov	r2, r3
 80053b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80053b8:	6093      	str	r3, [r2, #8]
 80053ba:	e1ee      	b.n	800579a <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	78fa      	ldrb	r2, [r7, #3]
 80053c2:	4611      	mov	r1, r2
 80053c4:	4618      	mov	r0, r3
 80053c6:	f004 f80f 	bl	80093e8 <USB_ReadChInterrupts>
 80053ca:	4603      	mov	r3, r0
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b02      	cmp	r3, #2
 80053d2:	f040 81df 	bne.w	8005794 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80053d6:	78fb      	ldrb	r3, [r7, #3]
 80053d8:	015a      	lsls	r2, r3, #5
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	4413      	add	r3, r2
 80053de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80053e2:	461a      	mov	r2, r3
 80053e4:	2302      	movs	r3, #2
 80053e6:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80053e8:	78fa      	ldrb	r2, [r7, #3]
 80053ea:	6879      	ldr	r1, [r7, #4]
 80053ec:	4613      	mov	r3, r2
 80053ee:	011b      	lsls	r3, r3, #4
 80053f0:	1a9b      	subs	r3, r3, r2
 80053f2:	009b      	lsls	r3, r3, #2
 80053f4:	440b      	add	r3, r1
 80053f6:	334d      	adds	r3, #77	@ 0x4d
 80053f8:	781b      	ldrb	r3, [r3, #0]
 80053fa:	2b01      	cmp	r3, #1
 80053fc:	f040 8093 	bne.w	8005526 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005400:	78fa      	ldrb	r2, [r7, #3]
 8005402:	6879      	ldr	r1, [r7, #4]
 8005404:	4613      	mov	r3, r2
 8005406:	011b      	lsls	r3, r3, #4
 8005408:	1a9b      	subs	r3, r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	440b      	add	r3, r1
 800540e:	334d      	adds	r3, #77	@ 0x4d
 8005410:	2202      	movs	r2, #2
 8005412:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8005414:	78fa      	ldrb	r2, [r7, #3]
 8005416:	6879      	ldr	r1, [r7, #4]
 8005418:	4613      	mov	r3, r2
 800541a:	011b      	lsls	r3, r3, #4
 800541c:	1a9b      	subs	r3, r3, r2
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	440b      	add	r3, r1
 8005422:	334c      	adds	r3, #76	@ 0x4c
 8005424:	2201      	movs	r2, #1
 8005426:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005428:	78fa      	ldrb	r2, [r7, #3]
 800542a:	6879      	ldr	r1, [r7, #4]
 800542c:	4613      	mov	r3, r2
 800542e:	011b      	lsls	r3, r3, #4
 8005430:	1a9b      	subs	r3, r3, r2
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	440b      	add	r3, r1
 8005436:	3326      	adds	r3, #38	@ 0x26
 8005438:	781b      	ldrb	r3, [r3, #0]
 800543a:	2b02      	cmp	r3, #2
 800543c:	d00b      	beq.n	8005456 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 800543e:	78fa      	ldrb	r2, [r7, #3]
 8005440:	6879      	ldr	r1, [r7, #4]
 8005442:	4613      	mov	r3, r2
 8005444:	011b      	lsls	r3, r3, #4
 8005446:	1a9b      	subs	r3, r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	440b      	add	r3, r1
 800544c:	3326      	adds	r3, #38	@ 0x26
 800544e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8005450:	2b03      	cmp	r3, #3
 8005452:	f040 8190 	bne.w	8005776 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	799b      	ldrb	r3, [r3, #6]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d115      	bne.n	800548a <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 800545e:	78fa      	ldrb	r2, [r7, #3]
 8005460:	6879      	ldr	r1, [r7, #4]
 8005462:	4613      	mov	r3, r2
 8005464:	011b      	lsls	r3, r3, #4
 8005466:	1a9b      	subs	r3, r3, r2
 8005468:	009b      	lsls	r3, r3, #2
 800546a:	440b      	add	r3, r1
 800546c:	333d      	adds	r3, #61	@ 0x3d
 800546e:	781b      	ldrb	r3, [r3, #0]
 8005470:	78fa      	ldrb	r2, [r7, #3]
 8005472:	f083 0301 	eor.w	r3, r3, #1
 8005476:	b2d8      	uxtb	r0, r3
 8005478:	6879      	ldr	r1, [r7, #4]
 800547a:	4613      	mov	r3, r2
 800547c:	011b      	lsls	r3, r3, #4
 800547e:	1a9b      	subs	r3, r3, r2
 8005480:	009b      	lsls	r3, r3, #2
 8005482:	440b      	add	r3, r1
 8005484:	333d      	adds	r3, #61	@ 0x3d
 8005486:	4602      	mov	r2, r0
 8005488:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	799b      	ldrb	r3, [r3, #6]
 800548e:	2b01      	cmp	r3, #1
 8005490:	f040 8171 	bne.w	8005776 <HCD_HC_OUT_IRQHandler+0x954>
 8005494:	78fa      	ldrb	r2, [r7, #3]
 8005496:	6879      	ldr	r1, [r7, #4]
 8005498:	4613      	mov	r3, r2
 800549a:	011b      	lsls	r3, r3, #4
 800549c:	1a9b      	subs	r3, r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	440b      	add	r3, r1
 80054a2:	3334      	adds	r3, #52	@ 0x34
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 8165 	beq.w	8005776 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 80054ac:	78fa      	ldrb	r2, [r7, #3]
 80054ae:	6879      	ldr	r1, [r7, #4]
 80054b0:	4613      	mov	r3, r2
 80054b2:	011b      	lsls	r3, r3, #4
 80054b4:	1a9b      	subs	r3, r3, r2
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	440b      	add	r3, r1
 80054ba:	3334      	adds	r3, #52	@ 0x34
 80054bc:	6819      	ldr	r1, [r3, #0]
 80054be:	78fa      	ldrb	r2, [r7, #3]
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	4613      	mov	r3, r2
 80054c4:	011b      	lsls	r3, r3, #4
 80054c6:	1a9b      	subs	r3, r3, r2
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4403      	add	r3, r0
 80054cc:	3328      	adds	r3, #40	@ 0x28
 80054ce:	881b      	ldrh	r3, [r3, #0]
 80054d0:	440b      	add	r3, r1
 80054d2:	1e59      	subs	r1, r3, #1
 80054d4:	78fa      	ldrb	r2, [r7, #3]
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	4613      	mov	r3, r2
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	1a9b      	subs	r3, r3, r2
 80054de:	009b      	lsls	r3, r3, #2
 80054e0:	4403      	add	r3, r0
 80054e2:	3328      	adds	r3, #40	@ 0x28
 80054e4:	881b      	ldrh	r3, [r3, #0]
 80054e6:	fbb1 f3f3 	udiv	r3, r1, r3
 80054ea:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	f003 0301 	and.w	r3, r3, #1
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	f000 813f 	beq.w	8005776 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 80054f8:	78fa      	ldrb	r2, [r7, #3]
 80054fa:	6879      	ldr	r1, [r7, #4]
 80054fc:	4613      	mov	r3, r2
 80054fe:	011b      	lsls	r3, r3, #4
 8005500:	1a9b      	subs	r3, r3, r2
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	440b      	add	r3, r1
 8005506:	333d      	adds	r3, #61	@ 0x3d
 8005508:	781b      	ldrb	r3, [r3, #0]
 800550a:	78fa      	ldrb	r2, [r7, #3]
 800550c:	f083 0301 	eor.w	r3, r3, #1
 8005510:	b2d8      	uxtb	r0, r3
 8005512:	6879      	ldr	r1, [r7, #4]
 8005514:	4613      	mov	r3, r2
 8005516:	011b      	lsls	r3, r3, #4
 8005518:	1a9b      	subs	r3, r3, r2
 800551a:	009b      	lsls	r3, r3, #2
 800551c:	440b      	add	r3, r1
 800551e:	333d      	adds	r3, #61	@ 0x3d
 8005520:	4602      	mov	r2, r0
 8005522:	701a      	strb	r2, [r3, #0]
 8005524:	e127      	b.n	8005776 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8005526:	78fa      	ldrb	r2, [r7, #3]
 8005528:	6879      	ldr	r1, [r7, #4]
 800552a:	4613      	mov	r3, r2
 800552c:	011b      	lsls	r3, r3, #4
 800552e:	1a9b      	subs	r3, r3, r2
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	440b      	add	r3, r1
 8005534:	334d      	adds	r3, #77	@ 0x4d
 8005536:	781b      	ldrb	r3, [r3, #0]
 8005538:	2b03      	cmp	r3, #3
 800553a:	d120      	bne.n	800557e <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800553c:	78fa      	ldrb	r2, [r7, #3]
 800553e:	6879      	ldr	r1, [r7, #4]
 8005540:	4613      	mov	r3, r2
 8005542:	011b      	lsls	r3, r3, #4
 8005544:	1a9b      	subs	r3, r3, r2
 8005546:	009b      	lsls	r3, r3, #2
 8005548:	440b      	add	r3, r1
 800554a:	334d      	adds	r3, #77	@ 0x4d
 800554c:	2202      	movs	r2, #2
 800554e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8005550:	78fa      	ldrb	r2, [r7, #3]
 8005552:	6879      	ldr	r1, [r7, #4]
 8005554:	4613      	mov	r3, r2
 8005556:	011b      	lsls	r3, r3, #4
 8005558:	1a9b      	subs	r3, r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	440b      	add	r3, r1
 800555e:	331b      	adds	r3, #27
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	2b01      	cmp	r3, #1
 8005564:	f040 8107 	bne.w	8005776 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8005568:	78fa      	ldrb	r2, [r7, #3]
 800556a:	6879      	ldr	r1, [r7, #4]
 800556c:	4613      	mov	r3, r2
 800556e:	011b      	lsls	r3, r3, #4
 8005570:	1a9b      	subs	r3, r3, r2
 8005572:	009b      	lsls	r3, r3, #2
 8005574:	440b      	add	r3, r1
 8005576:	334c      	adds	r3, #76	@ 0x4c
 8005578:	2202      	movs	r2, #2
 800557a:	701a      	strb	r2, [r3, #0]
 800557c:	e0fb      	b.n	8005776 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800557e:	78fa      	ldrb	r2, [r7, #3]
 8005580:	6879      	ldr	r1, [r7, #4]
 8005582:	4613      	mov	r3, r2
 8005584:	011b      	lsls	r3, r3, #4
 8005586:	1a9b      	subs	r3, r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	440b      	add	r3, r1
 800558c:	334d      	adds	r3, #77	@ 0x4d
 800558e:	781b      	ldrb	r3, [r3, #0]
 8005590:	2b04      	cmp	r3, #4
 8005592:	d13a      	bne.n	800560a <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005594:	78fa      	ldrb	r2, [r7, #3]
 8005596:	6879      	ldr	r1, [r7, #4]
 8005598:	4613      	mov	r3, r2
 800559a:	011b      	lsls	r3, r3, #4
 800559c:	1a9b      	subs	r3, r3, r2
 800559e:	009b      	lsls	r3, r3, #2
 80055a0:	440b      	add	r3, r1
 80055a2:	334d      	adds	r3, #77	@ 0x4d
 80055a4:	2202      	movs	r2, #2
 80055a6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80055a8:	78fa      	ldrb	r2, [r7, #3]
 80055aa:	6879      	ldr	r1, [r7, #4]
 80055ac:	4613      	mov	r3, r2
 80055ae:	011b      	lsls	r3, r3, #4
 80055b0:	1a9b      	subs	r3, r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	440b      	add	r3, r1
 80055b6:	334c      	adds	r3, #76	@ 0x4c
 80055b8:	2202      	movs	r2, #2
 80055ba:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80055bc:	78fa      	ldrb	r2, [r7, #3]
 80055be:	6879      	ldr	r1, [r7, #4]
 80055c0:	4613      	mov	r3, r2
 80055c2:	011b      	lsls	r3, r3, #4
 80055c4:	1a9b      	subs	r3, r3, r2
 80055c6:	009b      	lsls	r3, r3, #2
 80055c8:	440b      	add	r3, r1
 80055ca:	331b      	adds	r3, #27
 80055cc:	781b      	ldrb	r3, [r3, #0]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	f040 80d1 	bne.w	8005776 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 80055d4:	78fa      	ldrb	r2, [r7, #3]
 80055d6:	6879      	ldr	r1, [r7, #4]
 80055d8:	4613      	mov	r3, r2
 80055da:	011b      	lsls	r3, r3, #4
 80055dc:	1a9b      	subs	r3, r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	440b      	add	r3, r1
 80055e2:	331b      	adds	r3, #27
 80055e4:	2200      	movs	r2, #0
 80055e6:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80055e8:	78fb      	ldrb	r3, [r7, #3]
 80055ea:	015a      	lsls	r2, r3, #5
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	4413      	add	r3, r2
 80055f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80055f4:	685b      	ldr	r3, [r3, #4]
 80055f6:	78fa      	ldrb	r2, [r7, #3]
 80055f8:	0151      	lsls	r1, r2, #5
 80055fa:	693a      	ldr	r2, [r7, #16]
 80055fc:	440a      	add	r2, r1
 80055fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8005602:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005606:	6053      	str	r3, [r2, #4]
 8005608:	e0b5      	b.n	8005776 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 800560a:	78fa      	ldrb	r2, [r7, #3]
 800560c:	6879      	ldr	r1, [r7, #4]
 800560e:	4613      	mov	r3, r2
 8005610:	011b      	lsls	r3, r3, #4
 8005612:	1a9b      	subs	r3, r3, r2
 8005614:	009b      	lsls	r3, r3, #2
 8005616:	440b      	add	r3, r1
 8005618:	334d      	adds	r3, #77	@ 0x4d
 800561a:	781b      	ldrb	r3, [r3, #0]
 800561c:	2b05      	cmp	r3, #5
 800561e:	d114      	bne.n	800564a <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005620:	78fa      	ldrb	r2, [r7, #3]
 8005622:	6879      	ldr	r1, [r7, #4]
 8005624:	4613      	mov	r3, r2
 8005626:	011b      	lsls	r3, r3, #4
 8005628:	1a9b      	subs	r3, r3, r2
 800562a:	009b      	lsls	r3, r3, #2
 800562c:	440b      	add	r3, r1
 800562e:	334d      	adds	r3, #77	@ 0x4d
 8005630:	2202      	movs	r2, #2
 8005632:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8005634:	78fa      	ldrb	r2, [r7, #3]
 8005636:	6879      	ldr	r1, [r7, #4]
 8005638:	4613      	mov	r3, r2
 800563a:	011b      	lsls	r3, r3, #4
 800563c:	1a9b      	subs	r3, r3, r2
 800563e:	009b      	lsls	r3, r3, #2
 8005640:	440b      	add	r3, r1
 8005642:	334c      	adds	r3, #76	@ 0x4c
 8005644:	2202      	movs	r2, #2
 8005646:	701a      	strb	r2, [r3, #0]
 8005648:	e095      	b.n	8005776 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 800564a:	78fa      	ldrb	r2, [r7, #3]
 800564c:	6879      	ldr	r1, [r7, #4]
 800564e:	4613      	mov	r3, r2
 8005650:	011b      	lsls	r3, r3, #4
 8005652:	1a9b      	subs	r3, r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	440b      	add	r3, r1
 8005658:	334d      	adds	r3, #77	@ 0x4d
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	2b06      	cmp	r3, #6
 800565e:	d114      	bne.n	800568a <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8005660:	78fa      	ldrb	r2, [r7, #3]
 8005662:	6879      	ldr	r1, [r7, #4]
 8005664:	4613      	mov	r3, r2
 8005666:	011b      	lsls	r3, r3, #4
 8005668:	1a9b      	subs	r3, r3, r2
 800566a:	009b      	lsls	r3, r3, #2
 800566c:	440b      	add	r3, r1
 800566e:	334d      	adds	r3, #77	@ 0x4d
 8005670:	2202      	movs	r2, #2
 8005672:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8005674:	78fa      	ldrb	r2, [r7, #3]
 8005676:	6879      	ldr	r1, [r7, #4]
 8005678:	4613      	mov	r3, r2
 800567a:	011b      	lsls	r3, r3, #4
 800567c:	1a9b      	subs	r3, r3, r2
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	440b      	add	r3, r1
 8005682:	334c      	adds	r3, #76	@ 0x4c
 8005684:	2205      	movs	r2, #5
 8005686:	701a      	strb	r2, [r3, #0]
 8005688:	e075      	b.n	8005776 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800568a:	78fa      	ldrb	r2, [r7, #3]
 800568c:	6879      	ldr	r1, [r7, #4]
 800568e:	4613      	mov	r3, r2
 8005690:	011b      	lsls	r3, r3, #4
 8005692:	1a9b      	subs	r3, r3, r2
 8005694:	009b      	lsls	r3, r3, #2
 8005696:	440b      	add	r3, r1
 8005698:	334d      	adds	r3, #77	@ 0x4d
 800569a:	781b      	ldrb	r3, [r3, #0]
 800569c:	2b07      	cmp	r3, #7
 800569e:	d00a      	beq.n	80056b6 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 80056a0:	78fa      	ldrb	r2, [r7, #3]
 80056a2:	6879      	ldr	r1, [r7, #4]
 80056a4:	4613      	mov	r3, r2
 80056a6:	011b      	lsls	r3, r3, #4
 80056a8:	1a9b      	subs	r3, r3, r2
 80056aa:	009b      	lsls	r3, r3, #2
 80056ac:	440b      	add	r3, r1
 80056ae:	334d      	adds	r3, #77	@ 0x4d
 80056b0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 80056b2:	2b09      	cmp	r3, #9
 80056b4:	d170      	bne.n	8005798 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80056b6:	78fa      	ldrb	r2, [r7, #3]
 80056b8:	6879      	ldr	r1, [r7, #4]
 80056ba:	4613      	mov	r3, r2
 80056bc:	011b      	lsls	r3, r3, #4
 80056be:	1a9b      	subs	r3, r3, r2
 80056c0:	009b      	lsls	r3, r3, #2
 80056c2:	440b      	add	r3, r1
 80056c4:	334d      	adds	r3, #77	@ 0x4d
 80056c6:	2202      	movs	r2, #2
 80056c8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80056ca:	78fa      	ldrb	r2, [r7, #3]
 80056cc:	6879      	ldr	r1, [r7, #4]
 80056ce:	4613      	mov	r3, r2
 80056d0:	011b      	lsls	r3, r3, #4
 80056d2:	1a9b      	subs	r3, r3, r2
 80056d4:	009b      	lsls	r3, r3, #2
 80056d6:	440b      	add	r3, r1
 80056d8:	3344      	adds	r3, #68	@ 0x44
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	1c59      	adds	r1, r3, #1
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	4613      	mov	r3, r2
 80056e2:	011b      	lsls	r3, r3, #4
 80056e4:	1a9b      	subs	r3, r3, r2
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	4403      	add	r3, r0
 80056ea:	3344      	adds	r3, #68	@ 0x44
 80056ec:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80056ee:	78fa      	ldrb	r2, [r7, #3]
 80056f0:	6879      	ldr	r1, [r7, #4]
 80056f2:	4613      	mov	r3, r2
 80056f4:	011b      	lsls	r3, r3, #4
 80056f6:	1a9b      	subs	r3, r3, r2
 80056f8:	009b      	lsls	r3, r3, #2
 80056fa:	440b      	add	r3, r1
 80056fc:	3344      	adds	r3, #68	@ 0x44
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	2b02      	cmp	r3, #2
 8005702:	d914      	bls.n	800572e <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8005704:	78fa      	ldrb	r2, [r7, #3]
 8005706:	6879      	ldr	r1, [r7, #4]
 8005708:	4613      	mov	r3, r2
 800570a:	011b      	lsls	r3, r3, #4
 800570c:	1a9b      	subs	r3, r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	440b      	add	r3, r1
 8005712:	3344      	adds	r3, #68	@ 0x44
 8005714:	2200      	movs	r2, #0
 8005716:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8005718:	78fa      	ldrb	r2, [r7, #3]
 800571a:	6879      	ldr	r1, [r7, #4]
 800571c:	4613      	mov	r3, r2
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	1a9b      	subs	r3, r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	440b      	add	r3, r1
 8005726:	334c      	adds	r3, #76	@ 0x4c
 8005728:	2204      	movs	r2, #4
 800572a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800572c:	e022      	b.n	8005774 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800572e:	78fa      	ldrb	r2, [r7, #3]
 8005730:	6879      	ldr	r1, [r7, #4]
 8005732:	4613      	mov	r3, r2
 8005734:	011b      	lsls	r3, r3, #4
 8005736:	1a9b      	subs	r3, r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	440b      	add	r3, r1
 800573c:	334c      	adds	r3, #76	@ 0x4c
 800573e:	2202      	movs	r2, #2
 8005740:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8005742:	78fb      	ldrb	r3, [r7, #3]
 8005744:	015a      	lsls	r2, r3, #5
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	4413      	add	r3, r2
 800574a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8005758:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8005760:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8005762:	78fb      	ldrb	r3, [r7, #3]
 8005764:	015a      	lsls	r2, r3, #5
 8005766:	693b      	ldr	r3, [r7, #16]
 8005768:	4413      	add	r3, r2
 800576a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800576e:	461a      	mov	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8005774:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8005776:	78fa      	ldrb	r2, [r7, #3]
 8005778:	6879      	ldr	r1, [r7, #4]
 800577a:	4613      	mov	r3, r2
 800577c:	011b      	lsls	r3, r3, #4
 800577e:	1a9b      	subs	r3, r3, r2
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	440b      	add	r3, r1
 8005784:	334c      	adds	r3, #76	@ 0x4c
 8005786:	781a      	ldrb	r2, [r3, #0]
 8005788:	78fb      	ldrb	r3, [r7, #3]
 800578a:	4619      	mov	r1, r3
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f7fe fcd1 	bl	8004134 <HAL_HCD_HC_NotifyURBChange_Callback>
 8005792:	e002      	b.n	800579a <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8005794:	bf00      	nop
 8005796:	e000      	b.n	800579a <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8005798:	bf00      	nop
  }
}
 800579a:	3718      	adds	r7, #24
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b08a      	sub	sp, #40	@ 0x28
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b0:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	6a1b      	ldr	r3, [r3, #32]
 80057b8:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80057ba:	69fb      	ldr	r3, [r7, #28]
 80057bc:	f003 030f 	and.w	r3, r3, #15
 80057c0:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	0c5b      	lsrs	r3, r3, #17
 80057c6:	f003 030f 	and.w	r3, r3, #15
 80057ca:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80057cc:	69fb      	ldr	r3, [r7, #28]
 80057ce:	091b      	lsrs	r3, r3, #4
 80057d0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80057d4:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	2b02      	cmp	r3, #2
 80057da:	d004      	beq.n	80057e6 <HCD_RXQLVL_IRQHandler+0x46>
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	2b05      	cmp	r3, #5
 80057e0:	f000 80b6 	beq.w	8005950 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80057e4:	e0b7      	b.n	8005956 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 80057e6:	693b      	ldr	r3, [r7, #16]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	f000 80b3 	beq.w	8005954 <HCD_RXQLVL_IRQHandler+0x1b4>
 80057ee:	6879      	ldr	r1, [r7, #4]
 80057f0:	69ba      	ldr	r2, [r7, #24]
 80057f2:	4613      	mov	r3, r2
 80057f4:	011b      	lsls	r3, r3, #4
 80057f6:	1a9b      	subs	r3, r3, r2
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	440b      	add	r3, r1
 80057fc:	332c      	adds	r3, #44	@ 0x2c
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	2b00      	cmp	r3, #0
 8005802:	f000 80a7 	beq.w	8005954 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8005806:	6879      	ldr	r1, [r7, #4]
 8005808:	69ba      	ldr	r2, [r7, #24]
 800580a:	4613      	mov	r3, r2
 800580c:	011b      	lsls	r3, r3, #4
 800580e:	1a9b      	subs	r3, r3, r2
 8005810:	009b      	lsls	r3, r3, #2
 8005812:	440b      	add	r3, r1
 8005814:	3338      	adds	r3, #56	@ 0x38
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	693b      	ldr	r3, [r7, #16]
 800581a:	18d1      	adds	r1, r2, r3
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	69ba      	ldr	r2, [r7, #24]
 8005820:	4613      	mov	r3, r2
 8005822:	011b      	lsls	r3, r3, #4
 8005824:	1a9b      	subs	r3, r3, r2
 8005826:	009b      	lsls	r3, r3, #2
 8005828:	4403      	add	r3, r0
 800582a:	3334      	adds	r3, #52	@ 0x34
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4299      	cmp	r1, r3
 8005830:	f200 8083 	bhi.w	800593a <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6818      	ldr	r0, [r3, #0]
 8005838:	6879      	ldr	r1, [r7, #4]
 800583a:	69ba      	ldr	r2, [r7, #24]
 800583c:	4613      	mov	r3, r2
 800583e:	011b      	lsls	r3, r3, #4
 8005840:	1a9b      	subs	r3, r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	440b      	add	r3, r1
 8005846:	332c      	adds	r3, #44	@ 0x2c
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	b292      	uxth	r2, r2
 800584e:	4619      	mov	r1, r3
 8005850:	f003 fd5f 	bl	8009312 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8005854:	6879      	ldr	r1, [r7, #4]
 8005856:	69ba      	ldr	r2, [r7, #24]
 8005858:	4613      	mov	r3, r2
 800585a:	011b      	lsls	r3, r3, #4
 800585c:	1a9b      	subs	r3, r3, r2
 800585e:	009b      	lsls	r3, r3, #2
 8005860:	440b      	add	r3, r1
 8005862:	332c      	adds	r3, #44	@ 0x2c
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	18d1      	adds	r1, r2, r3
 800586a:	6878      	ldr	r0, [r7, #4]
 800586c:	69ba      	ldr	r2, [r7, #24]
 800586e:	4613      	mov	r3, r2
 8005870:	011b      	lsls	r3, r3, #4
 8005872:	1a9b      	subs	r3, r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	4403      	add	r3, r0
 8005878:	332c      	adds	r3, #44	@ 0x2c
 800587a:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800587c:	6879      	ldr	r1, [r7, #4]
 800587e:	69ba      	ldr	r2, [r7, #24]
 8005880:	4613      	mov	r3, r2
 8005882:	011b      	lsls	r3, r3, #4
 8005884:	1a9b      	subs	r3, r3, r2
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	440b      	add	r3, r1
 800588a:	3338      	adds	r3, #56	@ 0x38
 800588c:	681a      	ldr	r2, [r3, #0]
 800588e:	693b      	ldr	r3, [r7, #16]
 8005890:	18d1      	adds	r1, r2, r3
 8005892:	6878      	ldr	r0, [r7, #4]
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	4613      	mov	r3, r2
 8005898:	011b      	lsls	r3, r3, #4
 800589a:	1a9b      	subs	r3, r3, r2
 800589c:	009b      	lsls	r3, r3, #2
 800589e:	4403      	add	r3, r0
 80058a0:	3338      	adds	r3, #56	@ 0x38
 80058a2:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 80058a4:	69bb      	ldr	r3, [r7, #24]
 80058a6:	015a      	lsls	r2, r3, #5
 80058a8:	6a3b      	ldr	r3, [r7, #32]
 80058aa:	4413      	add	r3, r2
 80058ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058b0:	691b      	ldr	r3, [r3, #16]
 80058b2:	0cdb      	lsrs	r3, r3, #19
 80058b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80058b8:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80058ba:	6879      	ldr	r1, [r7, #4]
 80058bc:	69ba      	ldr	r2, [r7, #24]
 80058be:	4613      	mov	r3, r2
 80058c0:	011b      	lsls	r3, r3, #4
 80058c2:	1a9b      	subs	r3, r3, r2
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	440b      	add	r3, r1
 80058c8:	3328      	adds	r3, #40	@ 0x28
 80058ca:	881b      	ldrh	r3, [r3, #0]
 80058cc:	461a      	mov	r2, r3
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	4293      	cmp	r3, r2
 80058d2:	d13f      	bne.n	8005954 <HCD_RXQLVL_IRQHandler+0x1b4>
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	2b00      	cmp	r3, #0
 80058d8:	d03c      	beq.n	8005954 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	015a      	lsls	r2, r3, #5
 80058de:	6a3b      	ldr	r3, [r7, #32]
 80058e0:	4413      	add	r3, r2
 80058e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80058f0:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80058f8:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 80058fa:	69bb      	ldr	r3, [r7, #24]
 80058fc:	015a      	lsls	r2, r3, #5
 80058fe:	6a3b      	ldr	r3, [r7, #32]
 8005900:	4413      	add	r3, r2
 8005902:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8005906:	461a      	mov	r2, r3
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800590c:	6879      	ldr	r1, [r7, #4]
 800590e:	69ba      	ldr	r2, [r7, #24]
 8005910:	4613      	mov	r3, r2
 8005912:	011b      	lsls	r3, r3, #4
 8005914:	1a9b      	subs	r3, r3, r2
 8005916:	009b      	lsls	r3, r3, #2
 8005918:	440b      	add	r3, r1
 800591a:	333c      	adds	r3, #60	@ 0x3c
 800591c:	781b      	ldrb	r3, [r3, #0]
 800591e:	f083 0301 	eor.w	r3, r3, #1
 8005922:	b2d8      	uxtb	r0, r3
 8005924:	6879      	ldr	r1, [r7, #4]
 8005926:	69ba      	ldr	r2, [r7, #24]
 8005928:	4613      	mov	r3, r2
 800592a:	011b      	lsls	r3, r3, #4
 800592c:	1a9b      	subs	r3, r3, r2
 800592e:	009b      	lsls	r3, r3, #2
 8005930:	440b      	add	r3, r1
 8005932:	333c      	adds	r3, #60	@ 0x3c
 8005934:	4602      	mov	r2, r0
 8005936:	701a      	strb	r2, [r3, #0]
      break;
 8005938:	e00c      	b.n	8005954 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800593a:	6879      	ldr	r1, [r7, #4]
 800593c:	69ba      	ldr	r2, [r7, #24]
 800593e:	4613      	mov	r3, r2
 8005940:	011b      	lsls	r3, r3, #4
 8005942:	1a9b      	subs	r3, r3, r2
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	440b      	add	r3, r1
 8005948:	334c      	adds	r3, #76	@ 0x4c
 800594a:	2204      	movs	r2, #4
 800594c:	701a      	strb	r2, [r3, #0]
      break;
 800594e:	e001      	b.n	8005954 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8005950:	bf00      	nop
 8005952:	e000      	b.n	8005956 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8005954:	bf00      	nop
  }
}
 8005956:	bf00      	nop
 8005958:	3728      	adds	r7, #40	@ 0x28
 800595a:	46bd      	mov	sp, r7
 800595c:	bd80      	pop	{r7, pc}

0800595e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800595e:	b580      	push	{r7, lr}
 8005960:	b086      	sub	sp, #24
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8005984:	68bb      	ldr	r3, [r7, #8]
 8005986:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800598a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	f003 0302 	and.w	r3, r3, #2
 8005992:	2b02      	cmp	r3, #2
 8005994:	d10b      	bne.n	80059ae <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b01      	cmp	r3, #1
 800599e:	d102      	bne.n	80059a6 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f7fe fb9f 	bl	80040e4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	f043 0302 	orr.w	r3, r3, #2
 80059ac:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	f003 0308 	and.w	r3, r3, #8
 80059b4:	2b08      	cmp	r3, #8
 80059b6:	d132      	bne.n	8005a1e <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	f043 0308 	orr.w	r3, r3, #8
 80059be:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f003 0304 	and.w	r3, r3, #4
 80059c6:	2b04      	cmp	r3, #4
 80059c8:	d126      	bne.n	8005a18 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	7a5b      	ldrb	r3, [r3, #9]
 80059ce:	2b02      	cmp	r3, #2
 80059d0:	d113      	bne.n	80059fa <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80059d8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80059dc:	d106      	bne.n	80059ec <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	2102      	movs	r1, #2
 80059e4:	4618      	mov	r0, r3
 80059e6:	f003 fe23 	bl	8009630 <USB_InitFSLSPClkSel>
 80059ea:	e011      	b.n	8005a10 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	2101      	movs	r1, #1
 80059f2:	4618      	mov	r0, r3
 80059f4:	f003 fe1c 	bl	8009630 <USB_InitFSLSPClkSel>
 80059f8:	e00a      	b.n	8005a10 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	79db      	ldrb	r3, [r3, #7]
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d106      	bne.n	8005a10 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8005a08:	461a      	mov	r2, r3
 8005a0a:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8005a0e:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f7fe fb7b 	bl	800410c <HAL_HCD_PortEnabled_Callback>
 8005a16:	e002      	b.n	8005a1e <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f7fe fb81 	bl	8004120 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f003 0320 	and.w	r3, r3, #32
 8005a24:	2b20      	cmp	r3, #32
 8005a26:	d103      	bne.n	8005a30 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8005a28:	68bb      	ldr	r3, [r7, #8]
 8005a2a:	f043 0320 	orr.w	r3, r3, #32
 8005a2e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8005a30:	693b      	ldr	r3, [r7, #16]
 8005a32:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8005a36:	461a      	mov	r2, r3
 8005a38:	68bb      	ldr	r3, [r7, #8]
 8005a3a:	6013      	str	r3, [r2, #0]
}
 8005a3c:	bf00      	nop
 8005a3e:	3718      	adds	r7, #24
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e12b      	b.n	8005cae <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d106      	bne.n	8005a70 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f7fb fa08 	bl	8000e80 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2224      	movs	r2, #36	@ 0x24
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f022 0201 	bic.w	r2, r2, #1
 8005a86:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	681a      	ldr	r2, [r3, #0]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005a96:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	681a      	ldr	r2, [r3, #0]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005aa6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005aa8:	f001 fa0c 	bl	8006ec4 <HAL_RCC_GetPCLK1Freq>
 8005aac:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	685b      	ldr	r3, [r3, #4]
 8005ab2:	4a81      	ldr	r2, [pc, #516]	@ (8005cb8 <HAL_I2C_Init+0x274>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d807      	bhi.n	8005ac8 <HAL_I2C_Init+0x84>
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	4a80      	ldr	r2, [pc, #512]	@ (8005cbc <HAL_I2C_Init+0x278>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	bf94      	ite	ls
 8005ac0:	2301      	movls	r3, #1
 8005ac2:	2300      	movhi	r3, #0
 8005ac4:	b2db      	uxtb	r3, r3
 8005ac6:	e006      	b.n	8005ad6 <HAL_I2C_Init+0x92>
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	4a7d      	ldr	r2, [pc, #500]	@ (8005cc0 <HAL_I2C_Init+0x27c>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	bf94      	ite	ls
 8005ad0:	2301      	movls	r3, #1
 8005ad2:	2300      	movhi	r3, #0
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d001      	beq.n	8005ade <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005ada:	2301      	movs	r3, #1
 8005adc:	e0e7      	b.n	8005cae <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	4a78      	ldr	r2, [pc, #480]	@ (8005cc4 <HAL_I2C_Init+0x280>)
 8005ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ae6:	0c9b      	lsrs	r3, r3, #18
 8005ae8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	430a      	orrs	r2, r1
 8005afc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	6a1b      	ldr	r3, [r3, #32]
 8005b04:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	685b      	ldr	r3, [r3, #4]
 8005b0c:	4a6a      	ldr	r2, [pc, #424]	@ (8005cb8 <HAL_I2C_Init+0x274>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d802      	bhi.n	8005b18 <HAL_I2C_Init+0xd4>
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	3301      	adds	r3, #1
 8005b16:	e009      	b.n	8005b2c <HAL_I2C_Init+0xe8>
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005b1e:	fb02 f303 	mul.w	r3, r2, r3
 8005b22:	4a69      	ldr	r2, [pc, #420]	@ (8005cc8 <HAL_I2C_Init+0x284>)
 8005b24:	fba2 2303 	umull	r2, r3, r2, r3
 8005b28:	099b      	lsrs	r3, r3, #6
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	687a      	ldr	r2, [r7, #4]
 8005b2e:	6812      	ldr	r2, [r2, #0]
 8005b30:	430b      	orrs	r3, r1
 8005b32:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	69db      	ldr	r3, [r3, #28]
 8005b3a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005b3e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	685b      	ldr	r3, [r3, #4]
 8005b46:	495c      	ldr	r1, [pc, #368]	@ (8005cb8 <HAL_I2C_Init+0x274>)
 8005b48:	428b      	cmp	r3, r1
 8005b4a:	d819      	bhi.n	8005b80 <HAL_I2C_Init+0x13c>
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	1e59      	subs	r1, r3, #1
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	685b      	ldr	r3, [r3, #4]
 8005b54:	005b      	lsls	r3, r3, #1
 8005b56:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b5a:	1c59      	adds	r1, r3, #1
 8005b5c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005b60:	400b      	ands	r3, r1
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d00a      	beq.n	8005b7c <HAL_I2C_Init+0x138>
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	1e59      	subs	r1, r3, #1
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	685b      	ldr	r3, [r3, #4]
 8005b6e:	005b      	lsls	r3, r3, #1
 8005b70:	fbb1 f3f3 	udiv	r3, r1, r3
 8005b74:	3301      	adds	r3, #1
 8005b76:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b7a:	e051      	b.n	8005c20 <HAL_I2C_Init+0x1dc>
 8005b7c:	2304      	movs	r3, #4
 8005b7e:	e04f      	b.n	8005c20 <HAL_I2C_Init+0x1dc>
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689b      	ldr	r3, [r3, #8]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d111      	bne.n	8005bac <HAL_I2C_Init+0x168>
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	1e58      	subs	r0, r3, #1
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6859      	ldr	r1, [r3, #4]
 8005b90:	460b      	mov	r3, r1
 8005b92:	005b      	lsls	r3, r3, #1
 8005b94:	440b      	add	r3, r1
 8005b96:	fbb0 f3f3 	udiv	r3, r0, r3
 8005b9a:	3301      	adds	r3, #1
 8005b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	bf0c      	ite	eq
 8005ba4:	2301      	moveq	r3, #1
 8005ba6:	2300      	movne	r3, #0
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	e012      	b.n	8005bd2 <HAL_I2C_Init+0x18e>
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	1e58      	subs	r0, r3, #1
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6859      	ldr	r1, [r3, #4]
 8005bb4:	460b      	mov	r3, r1
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	440b      	add	r3, r1
 8005bba:	0099      	lsls	r1, r3, #2
 8005bbc:	440b      	add	r3, r1
 8005bbe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	bf0c      	ite	eq
 8005bcc:	2301      	moveq	r3, #1
 8005bce:	2300      	movne	r3, #0
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d001      	beq.n	8005bda <HAL_I2C_Init+0x196>
 8005bd6:	2301      	movs	r3, #1
 8005bd8:	e022      	b.n	8005c20 <HAL_I2C_Init+0x1dc>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	689b      	ldr	r3, [r3, #8]
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d10e      	bne.n	8005c00 <HAL_I2C_Init+0x1bc>
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	1e58      	subs	r0, r3, #1
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	6859      	ldr	r1, [r3, #4]
 8005bea:	460b      	mov	r3, r1
 8005bec:	005b      	lsls	r3, r3, #1
 8005bee:	440b      	add	r3, r1
 8005bf0:	fbb0 f3f3 	udiv	r3, r0, r3
 8005bf4:	3301      	adds	r3, #1
 8005bf6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005bfa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005bfe:	e00f      	b.n	8005c20 <HAL_I2C_Init+0x1dc>
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	1e58      	subs	r0, r3, #1
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6859      	ldr	r1, [r3, #4]
 8005c08:	460b      	mov	r3, r1
 8005c0a:	009b      	lsls	r3, r3, #2
 8005c0c:	440b      	add	r3, r1
 8005c0e:	0099      	lsls	r1, r3, #2
 8005c10:	440b      	add	r3, r1
 8005c12:	fbb0 f3f3 	udiv	r3, r0, r3
 8005c16:	3301      	adds	r3, #1
 8005c18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005c1c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005c20:	6879      	ldr	r1, [r7, #4]
 8005c22:	6809      	ldr	r1, [r1, #0]
 8005c24:	4313      	orrs	r3, r2
 8005c26:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	69da      	ldr	r2, [r3, #28]
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	6a1b      	ldr	r3, [r3, #32]
 8005c3a:	431a      	orrs	r2, r3
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	430a      	orrs	r2, r1
 8005c42:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005c4e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005c52:	687a      	ldr	r2, [r7, #4]
 8005c54:	6911      	ldr	r1, [r2, #16]
 8005c56:	687a      	ldr	r2, [r7, #4]
 8005c58:	68d2      	ldr	r2, [r2, #12]
 8005c5a:	4311      	orrs	r1, r2
 8005c5c:	687a      	ldr	r2, [r7, #4]
 8005c5e:	6812      	ldr	r2, [r2, #0]
 8005c60:	430b      	orrs	r3, r1
 8005c62:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68db      	ldr	r3, [r3, #12]
 8005c6a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	695a      	ldr	r2, [r3, #20]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	699b      	ldr	r3, [r3, #24]
 8005c76:	431a      	orrs	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	430a      	orrs	r2, r1
 8005c7e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f042 0201 	orr.w	r2, r2, #1
 8005c8e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2200      	movs	r2, #0
 8005c94:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2220      	movs	r2, #32
 8005c9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	000186a0 	.word	0x000186a0
 8005cbc:	001e847f 	.word	0x001e847f
 8005cc0:	003d08ff 	.word	0x003d08ff
 8005cc4:	431bde83 	.word	0x431bde83
 8005cc8:	10624dd3 	.word	0x10624dd3

08005ccc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b083      	sub	sp, #12
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
 8005cd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b20      	cmp	r3, #32
 8005ce0:	d129      	bne.n	8005d36 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2224      	movs	r2, #36	@ 0x24
 8005ce6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f022 0201 	bic.w	r2, r2, #1
 8005cf8:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f022 0210 	bic.w	r2, r2, #16
 8005d08:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	683a      	ldr	r2, [r7, #0]
 8005d16:	430a      	orrs	r2, r1
 8005d18:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f042 0201 	orr.w	r2, r2, #1
 8005d28:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2220      	movs	r2, #32
 8005d2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005d32:	2300      	movs	r3, #0
 8005d34:	e000      	b.n	8005d38 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8005d36:	2302      	movs	r3, #2
  }
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 8005d4e:	2300      	movs	r3, #0
 8005d50:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d58:	b2db      	uxtb	r3, r3
 8005d5a:	2b20      	cmp	r3, #32
 8005d5c:	d12a      	bne.n	8005db4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	2224      	movs	r2, #36	@ 0x24
 8005d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	681a      	ldr	r2, [r3, #0]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f022 0201 	bic.w	r2, r2, #1
 8005d74:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d7c:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005d7e:	89fb      	ldrh	r3, [r7, #14]
 8005d80:	f023 030f 	bic.w	r3, r3, #15
 8005d84:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	b29a      	uxth	r2, r3
 8005d8a:	89fb      	ldrh	r3, [r7, #14]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	89fa      	ldrh	r2, [r7, #14]
 8005d96:	625a      	str	r2, [r3, #36]	@ 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	681a      	ldr	r2, [r3, #0]
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f042 0201 	orr.w	r2, r2, #1
 8005da6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	2220      	movs	r2, #32
 8005dac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    return HAL_OK;
 8005db0:	2300      	movs	r3, #0
 8005db2:	e000      	b.n	8005db6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 8005db4:	2302      	movs	r3, #2
  }
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
	...

08005dc4 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d101      	bne.n	8005dd6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e0bf      	b.n	8005f56 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8005ddc:	b2db      	uxtb	r3, r3
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d106      	bne.n	8005df0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8005dea:	6878      	ldr	r0, [r7, #4]
 8005dec:	f7fb f8b2 	bl	8000f54 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2202      	movs	r2, #2
 8005df4:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	699a      	ldr	r2, [r3, #24]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8005e06:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6999      	ldr	r1, [r3, #24]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	685a      	ldr	r2, [r3, #4]
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005e1c:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	430a      	orrs	r2, r1
 8005e2a:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6899      	ldr	r1, [r3, #8]
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	4b4a      	ldr	r3, [pc, #296]	@ (8005f60 <HAL_LTDC_Init+0x19c>)
 8005e38:	400b      	ands	r3, r1
 8005e3a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	695b      	ldr	r3, [r3, #20]
 8005e40:	041b      	lsls	r3, r3, #16
 8005e42:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	6899      	ldr	r1, [r3, #8]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	699a      	ldr	r2, [r3, #24]
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	431a      	orrs	r2, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	430a      	orrs	r2, r1
 8005e58:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68d9      	ldr	r1, [r3, #12]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681a      	ldr	r2, [r3, #0]
 8005e64:	4b3e      	ldr	r3, [pc, #248]	@ (8005f60 <HAL_LTDC_Init+0x19c>)
 8005e66:	400b      	ands	r3, r1
 8005e68:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	69db      	ldr	r3, [r3, #28]
 8005e6e:	041b      	lsls	r3, r3, #16
 8005e70:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	68d9      	ldr	r1, [r3, #12]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	6a1a      	ldr	r2, [r3, #32]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	431a      	orrs	r2, r3
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	430a      	orrs	r2, r1
 8005e86:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	6919      	ldr	r1, [r3, #16]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	4b33      	ldr	r3, [pc, #204]	@ (8005f60 <HAL_LTDC_Init+0x19c>)
 8005e94:	400b      	ands	r3, r1
 8005e96:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e9c:	041b      	lsls	r3, r3, #16
 8005e9e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	6919      	ldr	r1, [r3, #16]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	431a      	orrs	r2, r3
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	6959      	ldr	r1, [r3, #20]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681a      	ldr	r2, [r3, #0]
 8005ec0:	4b27      	ldr	r3, [pc, #156]	@ (8005f60 <HAL_LTDC_Init+0x19c>)
 8005ec2:	400b      	ands	r3, r1
 8005ec4:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eca:	041b      	lsls	r3, r3, #16
 8005ecc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	6959      	ldr	r1, [r3, #20]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	431a      	orrs	r2, r3
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	430a      	orrs	r2, r1
 8005ee2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8005eea:	021b      	lsls	r3, r3, #8
 8005eec:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8005ef4:	041b      	lsls	r3, r3, #16
 8005ef6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8005f06:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8005f0e:	68ba      	ldr	r2, [r7, #8]
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8005f1a:	431a      	orrs	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	430a      	orrs	r2, r1
 8005f22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	f042 0206 	orr.w	r2, r2, #6
 8005f32:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	699a      	ldr	r2, [r3, #24]
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f042 0201 	orr.w	r2, r2, #1
 8005f42:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3710      	adds	r7, #16
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	f000f800 	.word	0xf000f800

08005f64 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b084      	sub	sp, #16
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f72:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005f7a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f003 0304 	and.w	r3, r3, #4
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d023      	beq.n	8005fce <HAL_LTDC_IRQHandler+0x6a>
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	f003 0304 	and.w	r3, r3, #4
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d01e      	beq.n	8005fce <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f022 0204 	bic.w	r2, r2, #4
 8005f9e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2204      	movs	r2, #4
 8005fa6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8005fae:	f043 0201 	orr.w	r2, r3, #1
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2204      	movs	r2, #4
 8005fbc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2200      	movs	r2, #0
 8005fc4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 f86f 	bl	80060ac <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	f003 0302 	and.w	r3, r3, #2
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d023      	beq.n	8006020 <HAL_LTDC_IRQHandler+0xbc>
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d01e      	beq.n	8006020 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f022 0202 	bic.w	r2, r2, #2
 8005ff0:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	2202      	movs	r2, #2
 8005ff8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006000:	f043 0202 	orr.w	r2, r3, #2
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2204      	movs	r2, #4
 800600e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800601a:	6878      	ldr	r0, [r7, #4]
 800601c:	f000 f846 	bl	80060ac <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f003 0301 	and.w	r3, r3, #1
 8006026:	2b00      	cmp	r3, #0
 8006028:	d01b      	beq.n	8006062 <HAL_LTDC_IRQHandler+0xfe>
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	f003 0301 	and.w	r3, r3, #1
 8006030:	2b00      	cmp	r3, #0
 8006032:	d016      	beq.n	8006062 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f022 0201 	bic.w	r2, r2, #1
 8006042:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2201      	movs	r2, #1
 800604a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2201      	movs	r2, #1
 8006050:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 f82f 	bl	80060c0 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	f003 0308 	and.w	r3, r3, #8
 8006068:	2b00      	cmp	r3, #0
 800606a:	d01b      	beq.n	80060a4 <HAL_LTDC_IRQHandler+0x140>
 800606c:	68bb      	ldr	r3, [r7, #8]
 800606e:	f003 0308 	and.w	r3, r3, #8
 8006072:	2b00      	cmp	r3, #0
 8006074:	d016      	beq.n	80060a4 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f022 0208 	bic.w	r2, r2, #8
 8006084:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	2208      	movs	r2, #8
 800608c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 f818 	bl	80060d4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80060a4:	bf00      	nop
 80060a6:	3710      	adds	r7, #16
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80060b4:	bf00      	nop
 80060b6:	370c      	adds	r7, #12
 80060b8:	46bd      	mov	sp, r7
 80060ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060be:	4770      	bx	lr

080060c0 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80060c0:	b480      	push	{r7}
 80060c2:	b083      	sub	sp, #12
 80060c4:	af00      	add	r7, sp, #0
 80060c6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80060c8:	bf00      	nop
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b083      	sub	sp, #12
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80060dc:	bf00      	nop
 80060de:	370c      	adds	r7, #12
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80060e8:	b5b0      	push	{r4, r5, r7, lr}
 80060ea:	b084      	sub	sp, #16
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	60f8      	str	r0, [r7, #12]
 80060f0:	60b9      	str	r1, [r7, #8]
 80060f2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80060fa:	2b01      	cmp	r3, #1
 80060fc:	d101      	bne.n	8006102 <HAL_LTDC_ConfigLayer+0x1a>
 80060fe:	2302      	movs	r3, #2
 8006100:	e02c      	b.n	800615c <HAL_LTDC_ConfigLayer+0x74>
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2201      	movs	r2, #1
 8006106:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2202      	movs	r2, #2
 800610e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006112:	68fa      	ldr	r2, [r7, #12]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2134      	movs	r1, #52	@ 0x34
 8006118:	fb01 f303 	mul.w	r3, r1, r3
 800611c:	4413      	add	r3, r2
 800611e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	4614      	mov	r4, r2
 8006126:	461d      	mov	r5, r3
 8006128:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800612a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800612c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800612e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006130:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006134:	682b      	ldr	r3, [r5, #0]
 8006136:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8006138:	687a      	ldr	r2, [r7, #4]
 800613a:	68b9      	ldr	r1, [r7, #8]
 800613c:	68f8      	ldr	r0, [r7, #12]
 800613e:	f000 f8b9 	bl	80062b4 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	2201      	movs	r2, #1
 8006148:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2201      	movs	r2, #1
 800614e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800615a:	2300      	movs	r3, #0
}
 800615c:	4618      	mov	r0, r3
 800615e:	3710      	adds	r7, #16
 8006160:	46bd      	mov	sp, r7
 8006162:	bdb0      	pop	{r4, r5, r7, pc}

08006164 <HAL_LTDC_ConfigColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t RGBValue, uint32_t LayerIdx)
{
 8006164:	b480      	push	{r7}
 8006166:	b085      	sub	sp, #20
 8006168:	af00      	add	r7, sp, #0
 800616a:	60f8      	str	r0, [r7, #12]
 800616c:	60b9      	str	r1, [r7, #8]
 800616e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8006176:	2b01      	cmp	r3, #1
 8006178:	d101      	bne.n	800617e <HAL_LTDC_ConfigColorKeying+0x1a>
 800617a:	2302      	movs	r3, #2
 800617c:	e030      	b.n	80061e0 <HAL_LTDC_ConfigColorKeying+0x7c>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2201      	movs	r2, #1
 8006182:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	2202      	movs	r2, #2
 800618a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the default color values */
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	461a      	mov	r2, r3
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	01db      	lsls	r3, r3, #7
 8006198:	4413      	add	r3, r2
 800619a:	3384      	adds	r3, #132	@ 0x84
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	68fa      	ldr	r2, [r7, #12]
 80061a0:	6812      	ldr	r2, [r2, #0]
 80061a2:	4611      	mov	r1, r2
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	01d2      	lsls	r2, r2, #7
 80061a8:	440a      	add	r2, r1
 80061aa:	3284      	adds	r2, #132	@ 0x84
 80061ac:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 80061b0:	60d3      	str	r3, [r2, #12]
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	461a      	mov	r2, r3
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	01db      	lsls	r3, r3, #7
 80061bc:	4413      	add	r3, r2
 80061be:	3384      	adds	r3, #132	@ 0x84
 80061c0:	461a      	mov	r2, r3
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	60d3      	str	r3, [r2, #12]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	2201      	movs	r2, #1
 80061cc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3714      	adds	r7, #20
 80061e4:	46bd      	mov	sp, r7
 80061e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ea:	4770      	bx	lr

080061ec <HAL_LTDC_EnableColorKeying>:
  *                   This parameter can be one of the following values:
  *                   LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval  HAL status
  */
HAL_StatusTypeDef HAL_LTDC_EnableColorKeying(LTDC_HandleTypeDef *hltdc, uint32_t LayerIdx)
{
 80061ec:	b480      	push	{r7}
 80061ee:	b083      	sub	sp, #12
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LTDC_LAYER(LayerIdx));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 80061fc:	2b01      	cmp	r3, #1
 80061fe:	d101      	bne.n	8006204 <HAL_LTDC_EnableColorKeying+0x18>
 8006200:	2302      	movs	r3, #2
 8006202:	e026      	b.n	8006252 <HAL_LTDC_EnableColorKeying+0x66>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2201      	movs	r2, #1
 8006208:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2202      	movs	r2, #2
 8006210:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable LTDC color keying by setting COLKEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	461a      	mov	r2, r3
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	01db      	lsls	r3, r3, #7
 800621e:	4413      	add	r3, r2
 8006220:	3384      	adds	r3, #132	@ 0x84
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	6812      	ldr	r2, [r2, #0]
 8006228:	4611      	mov	r1, r2
 800622a:	683a      	ldr	r2, [r7, #0]
 800622c:	01d2      	lsls	r2, r2, #7
 800622e:	440a      	add	r2, r1
 8006230:	3284      	adds	r2, #132	@ 0x84
 8006232:	f043 0302 	orr.w	r3, r3, #2
 8006236:	6013      	str	r3, [r2, #0]

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	2201      	movs	r2, #1
 800623e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8006250:	2300      	movs	r3, #0
}
 8006252:	4618      	mov	r0, r3
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625c:	4770      	bx	lr
	...

08006260 <HAL_LTDC_EnableDither>:
  *                the configuration information for the LTDC.
  * @retval  HAL status
  */

HAL_StatusTypeDef HAL_LTDC_EnableDither(LTDC_HandleTypeDef *hltdc)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hltdc);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800626e:	2b01      	cmp	r3, #1
 8006270:	d101      	bne.n	8006276 <HAL_LTDC_EnableDither+0x16>
 8006272:	2302      	movs	r3, #2
 8006274:	e016      	b.n	80062a4 <HAL_LTDC_EnableDither+0x44>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2201      	movs	r2, #1
 800627a:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2202      	movs	r2, #2
 8006282:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Enable Dither by setting DTEN bit */
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 8006286:	4b0a      	ldr	r3, [pc, #40]	@ (80062b0 <HAL_LTDC_EnableDither+0x50>)
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	4a09      	ldr	r2, [pc, #36]	@ (80062b0 <HAL_LTDC_EnableDither+0x50>)
 800628c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006290:	6193      	str	r3, [r2, #24]

  /* Change the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2201      	movs	r2, #1
 8006296:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 80062a2:	2300      	movs	r3, #0
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr
 80062b0:	40016800 	.word	0x40016800

080062b4 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80062b4:	b480      	push	{r7}
 80062b6:	b089      	sub	sp, #36	@ 0x24
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	60f8      	str	r0, [r7, #12]
 80062bc:	60b9      	str	r1, [r7, #8]
 80062be:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	685a      	ldr	r2, [r3, #4]
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	68db      	ldr	r3, [r3, #12]
 80062ca:	0c1b      	lsrs	r3, r3, #16
 80062cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80062d0:	4413      	add	r3, r2
 80062d2:	041b      	lsls	r3, r3, #16
 80062d4:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	461a      	mov	r2, r3
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	01db      	lsls	r3, r3, #7
 80062e0:	4413      	add	r3, r2
 80062e2:	3384      	adds	r3, #132	@ 0x84
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	6812      	ldr	r2, [r2, #0]
 80062ea:	4611      	mov	r1, r2
 80062ec:	687a      	ldr	r2, [r7, #4]
 80062ee:	01d2      	lsls	r2, r2, #7
 80062f0:	440a      	add	r2, r1
 80062f2:	3284      	adds	r2, #132	@ 0x84
 80062f4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 80062f8:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80062fa:	68bb      	ldr	r3, [r7, #8]
 80062fc:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	0c1b      	lsrs	r3, r3, #16
 8006306:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800630a:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800630c:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	4619      	mov	r1, r3
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	01db      	lsls	r3, r3, #7
 8006318:	440b      	add	r3, r1
 800631a:	3384      	adds	r3, #132	@ 0x84
 800631c:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800631e:	69fb      	ldr	r3, [r7, #28]
 8006320:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8006322:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8006324:	68bb      	ldr	r3, [r7, #8]
 8006326:	68da      	ldr	r2, [r3, #12]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	68db      	ldr	r3, [r3, #12]
 800632e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006332:	4413      	add	r3, r2
 8006334:	041b      	lsls	r3, r3, #16
 8006336:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	461a      	mov	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	01db      	lsls	r3, r3, #7
 8006342:	4413      	add	r3, r2
 8006344:	3384      	adds	r3, #132	@ 0x84
 8006346:	689b      	ldr	r3, [r3, #8]
 8006348:	68fa      	ldr	r2, [r7, #12]
 800634a:	6812      	ldr	r2, [r2, #0]
 800634c:	4611      	mov	r1, r2
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	01d2      	lsls	r2, r2, #7
 8006352:	440a      	add	r2, r1
 8006354:	3284      	adds	r2, #132	@ 0x84
 8006356:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800635a:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800635c:	68bb      	ldr	r3, [r7, #8]
 800635e:	689a      	ldr	r2, [r3, #8]
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800636a:	4413      	add	r3, r2
 800636c:	1c5a      	adds	r2, r3, #1
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	4619      	mov	r1, r3
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	01db      	lsls	r3, r3, #7
 8006378:	440b      	add	r3, r1
 800637a:	3384      	adds	r3, #132	@ 0x84
 800637c:	4619      	mov	r1, r3
 800637e:	69fb      	ldr	r3, [r7, #28]
 8006380:	4313      	orrs	r3, r2
 8006382:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	461a      	mov	r2, r3
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	01db      	lsls	r3, r3, #7
 800638e:	4413      	add	r3, r2
 8006390:	3384      	adds	r3, #132	@ 0x84
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	6812      	ldr	r2, [r2, #0]
 8006398:	4611      	mov	r1, r2
 800639a:	687a      	ldr	r2, [r7, #4]
 800639c:	01d2      	lsls	r2, r2, #7
 800639e:	440a      	add	r2, r1
 80063a0:	3284      	adds	r2, #132	@ 0x84
 80063a2:	f023 0307 	bic.w	r3, r3, #7
 80063a6:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	461a      	mov	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	01db      	lsls	r3, r3, #7
 80063b2:	4413      	add	r3, r2
 80063b4:	3384      	adds	r3, #132	@ 0x84
 80063b6:	461a      	mov	r2, r3
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 80063be:	68bb      	ldr	r3, [r7, #8]
 80063c0:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80063c4:	021b      	lsls	r3, r3, #8
 80063c6:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 80063ce:	041b      	lsls	r3, r3, #16
 80063d0:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	699b      	ldr	r3, [r3, #24]
 80063d6:	061b      	lsls	r3, r3, #24
 80063d8:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED |
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	461a      	mov	r2, r3
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	01db      	lsls	r3, r3, #7
 80063e4:	4413      	add	r3, r2
 80063e6:	3384      	adds	r3, #132	@ 0x84
 80063e8:	699b      	ldr	r3, [r3, #24]
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	461a      	mov	r2, r3
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	01db      	lsls	r3, r3, #7
 80063f4:	4413      	add	r3, r2
 80063f6:	3384      	adds	r3, #132	@ 0x84
 80063f8:	461a      	mov	r2, r3
 80063fa:	2300      	movs	r3, #0
 80063fc:	6193      	str	r3, [r2, #24]
                                         LTDC_LxDCCR_DCALPHA);
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80063fe:	68bb      	ldr	r3, [r7, #8]
 8006400:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8006404:	461a      	mov	r2, r3
 8006406:	69fb      	ldr	r3, [r7, #28]
 8006408:	431a      	orrs	r2, r3
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	431a      	orrs	r2, r3
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4619      	mov	r1, r3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	01db      	lsls	r3, r3, #7
 8006418:	440b      	add	r3, r1
 800641a:	3384      	adds	r3, #132	@ 0x84
 800641c:	4619      	mov	r1, r3
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	4313      	orrs	r3, r2
 8006422:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	461a      	mov	r2, r3
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	01db      	lsls	r3, r3, #7
 800642e:	4413      	add	r3, r2
 8006430:	3384      	adds	r3, #132	@ 0x84
 8006432:	695b      	ldr	r3, [r3, #20]
 8006434:	68fa      	ldr	r2, [r7, #12]
 8006436:	6812      	ldr	r2, [r2, #0]
 8006438:	4611      	mov	r1, r2
 800643a:	687a      	ldr	r2, [r7, #4]
 800643c:	01d2      	lsls	r2, r2, #7
 800643e:	440a      	add	r2, r1
 8006440:	3284      	adds	r2, #132	@ 0x84
 8006442:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8006446:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	461a      	mov	r2, r3
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	01db      	lsls	r3, r3, #7
 8006452:	4413      	add	r3, r2
 8006454:	3384      	adds	r3, #132	@ 0x84
 8006456:	461a      	mov	r2, r3
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	695b      	ldr	r3, [r3, #20]
 800645c:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	461a      	mov	r2, r3
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	01db      	lsls	r3, r3, #7
 8006468:	4413      	add	r3, r2
 800646a:	3384      	adds	r3, #132	@ 0x84
 800646c:	69db      	ldr	r3, [r3, #28]
 800646e:	68fa      	ldr	r2, [r7, #12]
 8006470:	6812      	ldr	r2, [r2, #0]
 8006472:	4611      	mov	r1, r2
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	01d2      	lsls	r2, r2, #7
 8006478:	440a      	add	r2, r1
 800647a:	3284      	adds	r2, #132	@ 0x84
 800647c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8006480:	f023 0307 	bic.w	r3, r3, #7
 8006484:	61d3      	str	r3, [r2, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	69da      	ldr	r2, [r3, #28]
 800648a:	68bb      	ldr	r3, [r7, #8]
 800648c:	6a1b      	ldr	r3, [r3, #32]
 800648e:	68f9      	ldr	r1, [r7, #12]
 8006490:	6809      	ldr	r1, [r1, #0]
 8006492:	4608      	mov	r0, r1
 8006494:	6879      	ldr	r1, [r7, #4]
 8006496:	01c9      	lsls	r1, r1, #7
 8006498:	4401      	add	r1, r0
 800649a:	3184      	adds	r1, #132	@ 0x84
 800649c:	4313      	orrs	r3, r2
 800649e:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	461a      	mov	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	01db      	lsls	r3, r3, #7
 80064aa:	4413      	add	r3, r2
 80064ac:	3384      	adds	r3, #132	@ 0x84
 80064ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	461a      	mov	r2, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	01db      	lsls	r3, r3, #7
 80064ba:	4413      	add	r3, r2
 80064bc:	3384      	adds	r3, #132	@ 0x84
 80064be:	461a      	mov	r2, r3
 80064c0:	2300      	movs	r3, #0
 80064c2:	6293      	str	r3, [r2, #40]	@ 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	461a      	mov	r2, r3
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	01db      	lsls	r3, r3, #7
 80064ce:	4413      	add	r3, r2
 80064d0:	3384      	adds	r3, #132	@ 0x84
 80064d2:	461a      	mov	r2, r3
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d8:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	691b      	ldr	r3, [r3, #16]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d102      	bne.n	80064e8 <LTDC_SetConfig+0x234>
  {
    tmp = 4U;
 80064e2:	2304      	movs	r3, #4
 80064e4:	61fb      	str	r3, [r7, #28]
 80064e6:	e01b      	b.n	8006520 <LTDC_SetConfig+0x26c>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d102      	bne.n	80064f6 <LTDC_SetConfig+0x242>
  {
    tmp = 3U;
 80064f0:	2303      	movs	r3, #3
 80064f2:	61fb      	str	r3, [r7, #28]
 80064f4:	e014      	b.n	8006520 <LTDC_SetConfig+0x26c>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80064f6:	68bb      	ldr	r3, [r7, #8]
 80064f8:	691b      	ldr	r3, [r3, #16]
 80064fa:	2b04      	cmp	r3, #4
 80064fc:	d00b      	beq.n	8006516 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8006502:	2b02      	cmp	r3, #2
 8006504:	d007      	beq.n	8006516 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800650a:	2b03      	cmp	r3, #3
 800650c:	d003      	beq.n	8006516 <LTDC_SetConfig+0x262>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800650e:	68bb      	ldr	r3, [r7, #8]
 8006510:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8006512:	2b07      	cmp	r3, #7
 8006514:	d102      	bne.n	800651c <LTDC_SetConfig+0x268>
  {
    tmp = 2U;
 8006516:	2302      	movs	r3, #2
 8006518:	61fb      	str	r3, [r7, #28]
 800651a:	e001      	b.n	8006520 <LTDC_SetConfig+0x26c>
  }
  else
  {
    tmp = 1U;
 800651c:	2301      	movs	r3, #1
 800651e:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	461a      	mov	r2, r3
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	01db      	lsls	r3, r3, #7
 800652a:	4413      	add	r3, r2
 800652c:	3384      	adds	r3, #132	@ 0x84
 800652e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006530:	68fa      	ldr	r2, [r7, #12]
 8006532:	6812      	ldr	r2, [r2, #0]
 8006534:	4611      	mov	r1, r2
 8006536:	687a      	ldr	r2, [r7, #4]
 8006538:	01d2      	lsls	r2, r2, #7
 800653a:	440a      	add	r2, r1
 800653c:	3284      	adds	r2, #132	@ 0x84
 800653e:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8006542:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006548:	69fa      	ldr	r2, [r7, #28]
 800654a:	fb02 f303 	mul.w	r3, r2, r3
 800654e:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8006550:	68bb      	ldr	r3, [r7, #8]
 8006552:	6859      	ldr	r1, [r3, #4]
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	1acb      	subs	r3, r1, r3
 800655a:	69f9      	ldr	r1, [r7, #28]
 800655c:	fb01 f303 	mul.w	r3, r1, r3
 8006560:	3303      	adds	r3, #3
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | \
 8006562:	68f9      	ldr	r1, [r7, #12]
 8006564:	6809      	ldr	r1, [r1, #0]
 8006566:	4608      	mov	r0, r1
 8006568:	6879      	ldr	r1, [r7, #4]
 800656a:	01c9      	lsls	r1, r1, #7
 800656c:	4401      	add	r1, r0
 800656e:	3184      	adds	r1, #132	@ 0x84
 8006570:	4313      	orrs	r3, r2
 8006572:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	461a      	mov	r2, r3
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	01db      	lsls	r3, r3, #7
 800657e:	4413      	add	r3, r2
 8006580:	3384      	adds	r3, #132	@ 0x84
 8006582:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006584:	68fa      	ldr	r2, [r7, #12]
 8006586:	6812      	ldr	r2, [r2, #0]
 8006588:	4611      	mov	r1, r2
 800658a:	687a      	ldr	r2, [r7, #4]
 800658c:	01d2      	lsls	r2, r2, #7
 800658e:	440a      	add	r2, r1
 8006590:	3284      	adds	r2, #132	@ 0x84
 8006592:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8006596:	f023 0307 	bic.w	r3, r3, #7
 800659a:	6313      	str	r3, [r2, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	461a      	mov	r2, r3
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	01db      	lsls	r3, r3, #7
 80065a6:	4413      	add	r3, r2
 80065a8:	3384      	adds	r3, #132	@ 0x84
 80065aa:	461a      	mov	r2, r3
 80065ac:	68bb      	ldr	r3, [r7, #8]
 80065ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b0:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	461a      	mov	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	01db      	lsls	r3, r3, #7
 80065bc:	4413      	add	r3, r2
 80065be:	3384      	adds	r3, #132	@ 0x84
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	68fa      	ldr	r2, [r7, #12]
 80065c4:	6812      	ldr	r2, [r2, #0]
 80065c6:	4611      	mov	r1, r2
 80065c8:	687a      	ldr	r2, [r7, #4]
 80065ca:	01d2      	lsls	r2, r2, #7
 80065cc:	440a      	add	r2, r1
 80065ce:	3284      	adds	r2, #132	@ 0x84
 80065d0:	f043 0301 	orr.w	r3, r3, #1
 80065d4:	6013      	str	r3, [r2, #0]
}
 80065d6:	bf00      	nop
 80065d8:	3724      	adds	r7, #36	@ 0x24
 80065da:	46bd      	mov	sp, r7
 80065dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e0:	4770      	bx	lr
	...

080065e4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b086      	sub	sp, #24
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e267      	b.n	8006ac6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f003 0301 	and.w	r3, r3, #1
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d075      	beq.n	80066ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006602:	4b88      	ldr	r3, [pc, #544]	@ (8006824 <HAL_RCC_OscConfig+0x240>)
 8006604:	689b      	ldr	r3, [r3, #8]
 8006606:	f003 030c 	and.w	r3, r3, #12
 800660a:	2b04      	cmp	r3, #4
 800660c:	d00c      	beq.n	8006628 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800660e:	4b85      	ldr	r3, [pc, #532]	@ (8006824 <HAL_RCC_OscConfig+0x240>)
 8006610:	689b      	ldr	r3, [r3, #8]
 8006612:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006616:	2b08      	cmp	r3, #8
 8006618:	d112      	bne.n	8006640 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800661a:	4b82      	ldr	r3, [pc, #520]	@ (8006824 <HAL_RCC_OscConfig+0x240>)
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006622:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006626:	d10b      	bne.n	8006640 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006628:	4b7e      	ldr	r3, [pc, #504]	@ (8006824 <HAL_RCC_OscConfig+0x240>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006630:	2b00      	cmp	r3, #0
 8006632:	d05b      	beq.n	80066ec <HAL_RCC_OscConfig+0x108>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	685b      	ldr	r3, [r3, #4]
 8006638:	2b00      	cmp	r3, #0
 800663a:	d157      	bne.n	80066ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800663c:	2301      	movs	r3, #1
 800663e:	e242      	b.n	8006ac6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006648:	d106      	bne.n	8006658 <HAL_RCC_OscConfig+0x74>
 800664a:	4b76      	ldr	r3, [pc, #472]	@ (8006824 <HAL_RCC_OscConfig+0x240>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	4a75      	ldr	r2, [pc, #468]	@ (8006824 <HAL_RCC_OscConfig+0x240>)
 8006650:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006654:	6013      	str	r3, [r2, #0]
 8006656:	e01d      	b.n	8006694 <HAL_RCC_OscConfig+0xb0>
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	685b      	ldr	r3, [r3, #4]
 800665c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006660:	d10c      	bne.n	800667c <HAL_RCC_OscConfig+0x98>
 8006662:	4b70      	ldr	r3, [pc, #448]	@ (8006824 <HAL_RCC_OscConfig+0x240>)
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a6f      	ldr	r2, [pc, #444]	@ (8006824 <HAL_RCC_OscConfig+0x240>)
 8006668:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800666c:	6013      	str	r3, [r2, #0]
 800666e:	4b6d      	ldr	r3, [pc, #436]	@ (8006824 <HAL_RCC_OscConfig+0x240>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a6c      	ldr	r2, [pc, #432]	@ (8006824 <HAL_RCC_OscConfig+0x240>)
 8006674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006678:	6013      	str	r3, [r2, #0]
 800667a:	e00b      	b.n	8006694 <HAL_RCC_OscConfig+0xb0>
 800667c:	4b69      	ldr	r3, [pc, #420]	@ (8006824 <HAL_RCC_OscConfig+0x240>)
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	4a68      	ldr	r2, [pc, #416]	@ (8006824 <HAL_RCC_OscConfig+0x240>)
 8006682:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006686:	6013      	str	r3, [r2, #0]
 8006688:	4b66      	ldr	r3, [pc, #408]	@ (8006824 <HAL_RCC_OscConfig+0x240>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	4a65      	ldr	r2, [pc, #404]	@ (8006824 <HAL_RCC_OscConfig+0x240>)
 800668e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006692:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	685b      	ldr	r3, [r3, #4]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d013      	beq.n	80066c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800669c:	f7fc fa48 	bl	8002b30 <HAL_GetTick>
 80066a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066a2:	e008      	b.n	80066b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066a4:	f7fc fa44 	bl	8002b30 <HAL_GetTick>
 80066a8:	4602      	mov	r2, r0
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	1ad3      	subs	r3, r2, r3
 80066ae:	2b64      	cmp	r3, #100	@ 0x64
 80066b0:	d901      	bls.n	80066b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80066b2:	2303      	movs	r3, #3
 80066b4:	e207      	b.n	8006ac6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80066b6:	4b5b      	ldr	r3, [pc, #364]	@ (8006824 <HAL_RCC_OscConfig+0x240>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d0f0      	beq.n	80066a4 <HAL_RCC_OscConfig+0xc0>
 80066c2:	e014      	b.n	80066ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066c4:	f7fc fa34 	bl	8002b30 <HAL_GetTick>
 80066c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066ca:	e008      	b.n	80066de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80066cc:	f7fc fa30 	bl	8002b30 <HAL_GetTick>
 80066d0:	4602      	mov	r2, r0
 80066d2:	693b      	ldr	r3, [r7, #16]
 80066d4:	1ad3      	subs	r3, r2, r3
 80066d6:	2b64      	cmp	r3, #100	@ 0x64
 80066d8:	d901      	bls.n	80066de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80066da:	2303      	movs	r3, #3
 80066dc:	e1f3      	b.n	8006ac6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80066de:	4b51      	ldr	r3, [pc, #324]	@ (8006824 <HAL_RCC_OscConfig+0x240>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d1f0      	bne.n	80066cc <HAL_RCC_OscConfig+0xe8>
 80066ea:	e000      	b.n	80066ee <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80066ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f003 0302 	and.w	r3, r3, #2
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d063      	beq.n	80067c2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80066fa:	4b4a      	ldr	r3, [pc, #296]	@ (8006824 <HAL_RCC_OscConfig+0x240>)
 80066fc:	689b      	ldr	r3, [r3, #8]
 80066fe:	f003 030c 	and.w	r3, r3, #12
 8006702:	2b00      	cmp	r3, #0
 8006704:	d00b      	beq.n	800671e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006706:	4b47      	ldr	r3, [pc, #284]	@ (8006824 <HAL_RCC_OscConfig+0x240>)
 8006708:	689b      	ldr	r3, [r3, #8]
 800670a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800670e:	2b08      	cmp	r3, #8
 8006710:	d11c      	bne.n	800674c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006712:	4b44      	ldr	r3, [pc, #272]	@ (8006824 <HAL_RCC_OscConfig+0x240>)
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800671a:	2b00      	cmp	r3, #0
 800671c:	d116      	bne.n	800674c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800671e:	4b41      	ldr	r3, [pc, #260]	@ (8006824 <HAL_RCC_OscConfig+0x240>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	f003 0302 	and.w	r3, r3, #2
 8006726:	2b00      	cmp	r3, #0
 8006728:	d005      	beq.n	8006736 <HAL_RCC_OscConfig+0x152>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	68db      	ldr	r3, [r3, #12]
 800672e:	2b01      	cmp	r3, #1
 8006730:	d001      	beq.n	8006736 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	e1c7      	b.n	8006ac6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006736:	4b3b      	ldr	r3, [pc, #236]	@ (8006824 <HAL_RCC_OscConfig+0x240>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	691b      	ldr	r3, [r3, #16]
 8006742:	00db      	lsls	r3, r3, #3
 8006744:	4937      	ldr	r1, [pc, #220]	@ (8006824 <HAL_RCC_OscConfig+0x240>)
 8006746:	4313      	orrs	r3, r2
 8006748:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800674a:	e03a      	b.n	80067c2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	68db      	ldr	r3, [r3, #12]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d020      	beq.n	8006796 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006754:	4b34      	ldr	r3, [pc, #208]	@ (8006828 <HAL_RCC_OscConfig+0x244>)
 8006756:	2201      	movs	r2, #1
 8006758:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800675a:	f7fc f9e9 	bl	8002b30 <HAL_GetTick>
 800675e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006760:	e008      	b.n	8006774 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006762:	f7fc f9e5 	bl	8002b30 <HAL_GetTick>
 8006766:	4602      	mov	r2, r0
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	1ad3      	subs	r3, r2, r3
 800676c:	2b02      	cmp	r3, #2
 800676e:	d901      	bls.n	8006774 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006770:	2303      	movs	r3, #3
 8006772:	e1a8      	b.n	8006ac6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006774:	4b2b      	ldr	r3, [pc, #172]	@ (8006824 <HAL_RCC_OscConfig+0x240>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f003 0302 	and.w	r3, r3, #2
 800677c:	2b00      	cmp	r3, #0
 800677e:	d0f0      	beq.n	8006762 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006780:	4b28      	ldr	r3, [pc, #160]	@ (8006824 <HAL_RCC_OscConfig+0x240>)
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	00db      	lsls	r3, r3, #3
 800678e:	4925      	ldr	r1, [pc, #148]	@ (8006824 <HAL_RCC_OscConfig+0x240>)
 8006790:	4313      	orrs	r3, r2
 8006792:	600b      	str	r3, [r1, #0]
 8006794:	e015      	b.n	80067c2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006796:	4b24      	ldr	r3, [pc, #144]	@ (8006828 <HAL_RCC_OscConfig+0x244>)
 8006798:	2200      	movs	r2, #0
 800679a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800679c:	f7fc f9c8 	bl	8002b30 <HAL_GetTick>
 80067a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067a2:	e008      	b.n	80067b6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80067a4:	f7fc f9c4 	bl	8002b30 <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	2b02      	cmp	r3, #2
 80067b0:	d901      	bls.n	80067b6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e187      	b.n	8006ac6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80067b6:	4b1b      	ldr	r3, [pc, #108]	@ (8006824 <HAL_RCC_OscConfig+0x240>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f003 0302 	and.w	r3, r3, #2
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1f0      	bne.n	80067a4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0308 	and.w	r3, r3, #8
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d036      	beq.n	800683c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	695b      	ldr	r3, [r3, #20]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d016      	beq.n	8006804 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80067d6:	4b15      	ldr	r3, [pc, #84]	@ (800682c <HAL_RCC_OscConfig+0x248>)
 80067d8:	2201      	movs	r2, #1
 80067da:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80067dc:	f7fc f9a8 	bl	8002b30 <HAL_GetTick>
 80067e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067e2:	e008      	b.n	80067f6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80067e4:	f7fc f9a4 	bl	8002b30 <HAL_GetTick>
 80067e8:	4602      	mov	r2, r0
 80067ea:	693b      	ldr	r3, [r7, #16]
 80067ec:	1ad3      	subs	r3, r2, r3
 80067ee:	2b02      	cmp	r3, #2
 80067f0:	d901      	bls.n	80067f6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80067f2:	2303      	movs	r3, #3
 80067f4:	e167      	b.n	8006ac6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80067f6:	4b0b      	ldr	r3, [pc, #44]	@ (8006824 <HAL_RCC_OscConfig+0x240>)
 80067f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80067fa:	f003 0302 	and.w	r3, r3, #2
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d0f0      	beq.n	80067e4 <HAL_RCC_OscConfig+0x200>
 8006802:	e01b      	b.n	800683c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006804:	4b09      	ldr	r3, [pc, #36]	@ (800682c <HAL_RCC_OscConfig+0x248>)
 8006806:	2200      	movs	r2, #0
 8006808:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800680a:	f7fc f991 	bl	8002b30 <HAL_GetTick>
 800680e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006810:	e00e      	b.n	8006830 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006812:	f7fc f98d 	bl	8002b30 <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	693b      	ldr	r3, [r7, #16]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	2b02      	cmp	r3, #2
 800681e:	d907      	bls.n	8006830 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e150      	b.n	8006ac6 <HAL_RCC_OscConfig+0x4e2>
 8006824:	40023800 	.word	0x40023800
 8006828:	42470000 	.word	0x42470000
 800682c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006830:	4b88      	ldr	r3, [pc, #544]	@ (8006a54 <HAL_RCC_OscConfig+0x470>)
 8006832:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006834:	f003 0302 	and.w	r3, r3, #2
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1ea      	bne.n	8006812 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f003 0304 	and.w	r3, r3, #4
 8006844:	2b00      	cmp	r3, #0
 8006846:	f000 8097 	beq.w	8006978 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800684a:	2300      	movs	r3, #0
 800684c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800684e:	4b81      	ldr	r3, [pc, #516]	@ (8006a54 <HAL_RCC_OscConfig+0x470>)
 8006850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006852:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006856:	2b00      	cmp	r3, #0
 8006858:	d10f      	bne.n	800687a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800685a:	2300      	movs	r3, #0
 800685c:	60bb      	str	r3, [r7, #8]
 800685e:	4b7d      	ldr	r3, [pc, #500]	@ (8006a54 <HAL_RCC_OscConfig+0x470>)
 8006860:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006862:	4a7c      	ldr	r2, [pc, #496]	@ (8006a54 <HAL_RCC_OscConfig+0x470>)
 8006864:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006868:	6413      	str	r3, [r2, #64]	@ 0x40
 800686a:	4b7a      	ldr	r3, [pc, #488]	@ (8006a54 <HAL_RCC_OscConfig+0x470>)
 800686c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800686e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006872:	60bb      	str	r3, [r7, #8]
 8006874:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006876:	2301      	movs	r3, #1
 8006878:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800687a:	4b77      	ldr	r3, [pc, #476]	@ (8006a58 <HAL_RCC_OscConfig+0x474>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006882:	2b00      	cmp	r3, #0
 8006884:	d118      	bne.n	80068b8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006886:	4b74      	ldr	r3, [pc, #464]	@ (8006a58 <HAL_RCC_OscConfig+0x474>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4a73      	ldr	r2, [pc, #460]	@ (8006a58 <HAL_RCC_OscConfig+0x474>)
 800688c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006892:	f7fc f94d 	bl	8002b30 <HAL_GetTick>
 8006896:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006898:	e008      	b.n	80068ac <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800689a:	f7fc f949 	bl	8002b30 <HAL_GetTick>
 800689e:	4602      	mov	r2, r0
 80068a0:	693b      	ldr	r3, [r7, #16]
 80068a2:	1ad3      	subs	r3, r2, r3
 80068a4:	2b02      	cmp	r3, #2
 80068a6:	d901      	bls.n	80068ac <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80068a8:	2303      	movs	r3, #3
 80068aa:	e10c      	b.n	8006ac6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80068ac:	4b6a      	ldr	r3, [pc, #424]	@ (8006a58 <HAL_RCC_OscConfig+0x474>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d0f0      	beq.n	800689a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	689b      	ldr	r3, [r3, #8]
 80068bc:	2b01      	cmp	r3, #1
 80068be:	d106      	bne.n	80068ce <HAL_RCC_OscConfig+0x2ea>
 80068c0:	4b64      	ldr	r3, [pc, #400]	@ (8006a54 <HAL_RCC_OscConfig+0x470>)
 80068c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068c4:	4a63      	ldr	r2, [pc, #396]	@ (8006a54 <HAL_RCC_OscConfig+0x470>)
 80068c6:	f043 0301 	orr.w	r3, r3, #1
 80068ca:	6713      	str	r3, [r2, #112]	@ 0x70
 80068cc:	e01c      	b.n	8006908 <HAL_RCC_OscConfig+0x324>
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	689b      	ldr	r3, [r3, #8]
 80068d2:	2b05      	cmp	r3, #5
 80068d4:	d10c      	bne.n	80068f0 <HAL_RCC_OscConfig+0x30c>
 80068d6:	4b5f      	ldr	r3, [pc, #380]	@ (8006a54 <HAL_RCC_OscConfig+0x470>)
 80068d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068da:	4a5e      	ldr	r2, [pc, #376]	@ (8006a54 <HAL_RCC_OscConfig+0x470>)
 80068dc:	f043 0304 	orr.w	r3, r3, #4
 80068e0:	6713      	str	r3, [r2, #112]	@ 0x70
 80068e2:	4b5c      	ldr	r3, [pc, #368]	@ (8006a54 <HAL_RCC_OscConfig+0x470>)
 80068e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068e6:	4a5b      	ldr	r2, [pc, #364]	@ (8006a54 <HAL_RCC_OscConfig+0x470>)
 80068e8:	f043 0301 	orr.w	r3, r3, #1
 80068ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80068ee:	e00b      	b.n	8006908 <HAL_RCC_OscConfig+0x324>
 80068f0:	4b58      	ldr	r3, [pc, #352]	@ (8006a54 <HAL_RCC_OscConfig+0x470>)
 80068f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80068f4:	4a57      	ldr	r2, [pc, #348]	@ (8006a54 <HAL_RCC_OscConfig+0x470>)
 80068f6:	f023 0301 	bic.w	r3, r3, #1
 80068fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80068fc:	4b55      	ldr	r3, [pc, #340]	@ (8006a54 <HAL_RCC_OscConfig+0x470>)
 80068fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006900:	4a54      	ldr	r2, [pc, #336]	@ (8006a54 <HAL_RCC_OscConfig+0x470>)
 8006902:	f023 0304 	bic.w	r3, r3, #4
 8006906:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d015      	beq.n	800693c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006910:	f7fc f90e 	bl	8002b30 <HAL_GetTick>
 8006914:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006916:	e00a      	b.n	800692e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006918:	f7fc f90a 	bl	8002b30 <HAL_GetTick>
 800691c:	4602      	mov	r2, r0
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	1ad3      	subs	r3, r2, r3
 8006922:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006926:	4293      	cmp	r3, r2
 8006928:	d901      	bls.n	800692e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800692a:	2303      	movs	r3, #3
 800692c:	e0cb      	b.n	8006ac6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800692e:	4b49      	ldr	r3, [pc, #292]	@ (8006a54 <HAL_RCC_OscConfig+0x470>)
 8006930:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006932:	f003 0302 	and.w	r3, r3, #2
 8006936:	2b00      	cmp	r3, #0
 8006938:	d0ee      	beq.n	8006918 <HAL_RCC_OscConfig+0x334>
 800693a:	e014      	b.n	8006966 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800693c:	f7fc f8f8 	bl	8002b30 <HAL_GetTick>
 8006940:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006942:	e00a      	b.n	800695a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006944:	f7fc f8f4 	bl	8002b30 <HAL_GetTick>
 8006948:	4602      	mov	r2, r0
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	1ad3      	subs	r3, r2, r3
 800694e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006952:	4293      	cmp	r3, r2
 8006954:	d901      	bls.n	800695a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006956:	2303      	movs	r3, #3
 8006958:	e0b5      	b.n	8006ac6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800695a:	4b3e      	ldr	r3, [pc, #248]	@ (8006a54 <HAL_RCC_OscConfig+0x470>)
 800695c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800695e:	f003 0302 	and.w	r3, r3, #2
 8006962:	2b00      	cmp	r3, #0
 8006964:	d1ee      	bne.n	8006944 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006966:	7dfb      	ldrb	r3, [r7, #23]
 8006968:	2b01      	cmp	r3, #1
 800696a:	d105      	bne.n	8006978 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800696c:	4b39      	ldr	r3, [pc, #228]	@ (8006a54 <HAL_RCC_OscConfig+0x470>)
 800696e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006970:	4a38      	ldr	r2, [pc, #224]	@ (8006a54 <HAL_RCC_OscConfig+0x470>)
 8006972:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006976:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	699b      	ldr	r3, [r3, #24]
 800697c:	2b00      	cmp	r3, #0
 800697e:	f000 80a1 	beq.w	8006ac4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006982:	4b34      	ldr	r3, [pc, #208]	@ (8006a54 <HAL_RCC_OscConfig+0x470>)
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	f003 030c 	and.w	r3, r3, #12
 800698a:	2b08      	cmp	r3, #8
 800698c:	d05c      	beq.n	8006a48 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	2b02      	cmp	r3, #2
 8006994:	d141      	bne.n	8006a1a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006996:	4b31      	ldr	r3, [pc, #196]	@ (8006a5c <HAL_RCC_OscConfig+0x478>)
 8006998:	2200      	movs	r2, #0
 800699a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800699c:	f7fc f8c8 	bl	8002b30 <HAL_GetTick>
 80069a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069a2:	e008      	b.n	80069b6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069a4:	f7fc f8c4 	bl	8002b30 <HAL_GetTick>
 80069a8:	4602      	mov	r2, r0
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	1ad3      	subs	r3, r2, r3
 80069ae:	2b02      	cmp	r3, #2
 80069b0:	d901      	bls.n	80069b6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80069b2:	2303      	movs	r3, #3
 80069b4:	e087      	b.n	8006ac6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80069b6:	4b27      	ldr	r3, [pc, #156]	@ (8006a54 <HAL_RCC_OscConfig+0x470>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d1f0      	bne.n	80069a4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	69da      	ldr	r2, [r3, #28]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	431a      	orrs	r2, r3
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d0:	019b      	lsls	r3, r3, #6
 80069d2:	431a      	orrs	r2, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d8:	085b      	lsrs	r3, r3, #1
 80069da:	3b01      	subs	r3, #1
 80069dc:	041b      	lsls	r3, r3, #16
 80069de:	431a      	orrs	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069e4:	061b      	lsls	r3, r3, #24
 80069e6:	491b      	ldr	r1, [pc, #108]	@ (8006a54 <HAL_RCC_OscConfig+0x470>)
 80069e8:	4313      	orrs	r3, r2
 80069ea:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80069ec:	4b1b      	ldr	r3, [pc, #108]	@ (8006a5c <HAL_RCC_OscConfig+0x478>)
 80069ee:	2201      	movs	r2, #1
 80069f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069f2:	f7fc f89d 	bl	8002b30 <HAL_GetTick>
 80069f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80069f8:	e008      	b.n	8006a0c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80069fa:	f7fc f899 	bl	8002b30 <HAL_GetTick>
 80069fe:	4602      	mov	r2, r0
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	1ad3      	subs	r3, r2, r3
 8006a04:	2b02      	cmp	r3, #2
 8006a06:	d901      	bls.n	8006a0c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e05c      	b.n	8006ac6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006a0c:	4b11      	ldr	r3, [pc, #68]	@ (8006a54 <HAL_RCC_OscConfig+0x470>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d0f0      	beq.n	80069fa <HAL_RCC_OscConfig+0x416>
 8006a18:	e054      	b.n	8006ac4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a1a:	4b10      	ldr	r3, [pc, #64]	@ (8006a5c <HAL_RCC_OscConfig+0x478>)
 8006a1c:	2200      	movs	r2, #0
 8006a1e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a20:	f7fc f886 	bl	8002b30 <HAL_GetTick>
 8006a24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a26:	e008      	b.n	8006a3a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006a28:	f7fc f882 	bl	8002b30 <HAL_GetTick>
 8006a2c:	4602      	mov	r2, r0
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	1ad3      	subs	r3, r2, r3
 8006a32:	2b02      	cmp	r3, #2
 8006a34:	d901      	bls.n	8006a3a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006a36:	2303      	movs	r3, #3
 8006a38:	e045      	b.n	8006ac6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a3a:	4b06      	ldr	r3, [pc, #24]	@ (8006a54 <HAL_RCC_OscConfig+0x470>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d1f0      	bne.n	8006a28 <HAL_RCC_OscConfig+0x444>
 8006a46:	e03d      	b.n	8006ac4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	699b      	ldr	r3, [r3, #24]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d107      	bne.n	8006a60 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e038      	b.n	8006ac6 <HAL_RCC_OscConfig+0x4e2>
 8006a54:	40023800 	.word	0x40023800
 8006a58:	40007000 	.word	0x40007000
 8006a5c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006a60:	4b1b      	ldr	r3, [pc, #108]	@ (8006ad0 <HAL_RCC_OscConfig+0x4ec>)
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d028      	beq.n	8006ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	d121      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006a86:	429a      	cmp	r2, r3
 8006a88:	d11a      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006a90:	4013      	ands	r3, r2
 8006a92:	687a      	ldr	r2, [r7, #4]
 8006a94:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006a96:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d111      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006aa6:	085b      	lsrs	r3, r3, #1
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006aac:	429a      	cmp	r2, r3
 8006aae:	d107      	bne.n	8006ac0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006aba:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d001      	beq.n	8006ac4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006ac0:	2301      	movs	r3, #1
 8006ac2:	e000      	b.n	8006ac6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006ac4:	2300      	movs	r3, #0
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3718      	adds	r7, #24
 8006aca:	46bd      	mov	sp, r7
 8006acc:	bd80      	pop	{r7, pc}
 8006ace:	bf00      	nop
 8006ad0:	40023800 	.word	0x40023800

08006ad4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b084      	sub	sp, #16
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
 8006adc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d101      	bne.n	8006ae8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	e0cc      	b.n	8006c82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006ae8:	4b68      	ldr	r3, [pc, #416]	@ (8006c8c <HAL_RCC_ClockConfig+0x1b8>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f003 030f 	and.w	r3, r3, #15
 8006af0:	683a      	ldr	r2, [r7, #0]
 8006af2:	429a      	cmp	r2, r3
 8006af4:	d90c      	bls.n	8006b10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006af6:	4b65      	ldr	r3, [pc, #404]	@ (8006c8c <HAL_RCC_ClockConfig+0x1b8>)
 8006af8:	683a      	ldr	r2, [r7, #0]
 8006afa:	b2d2      	uxtb	r2, r2
 8006afc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006afe:	4b63      	ldr	r3, [pc, #396]	@ (8006c8c <HAL_RCC_ClockConfig+0x1b8>)
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f003 030f 	and.w	r3, r3, #15
 8006b06:	683a      	ldr	r2, [r7, #0]
 8006b08:	429a      	cmp	r2, r3
 8006b0a:	d001      	beq.n	8006b10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006b0c:	2301      	movs	r3, #1
 8006b0e:	e0b8      	b.n	8006c82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f003 0302 	and.w	r3, r3, #2
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d020      	beq.n	8006b5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f003 0304 	and.w	r3, r3, #4
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d005      	beq.n	8006b34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006b28:	4b59      	ldr	r3, [pc, #356]	@ (8006c90 <HAL_RCC_ClockConfig+0x1bc>)
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	4a58      	ldr	r2, [pc, #352]	@ (8006c90 <HAL_RCC_ClockConfig+0x1bc>)
 8006b2e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006b32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	f003 0308 	and.w	r3, r3, #8
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d005      	beq.n	8006b4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006b40:	4b53      	ldr	r3, [pc, #332]	@ (8006c90 <HAL_RCC_ClockConfig+0x1bc>)
 8006b42:	689b      	ldr	r3, [r3, #8]
 8006b44:	4a52      	ldr	r2, [pc, #328]	@ (8006c90 <HAL_RCC_ClockConfig+0x1bc>)
 8006b46:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006b4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006b4c:	4b50      	ldr	r3, [pc, #320]	@ (8006c90 <HAL_RCC_ClockConfig+0x1bc>)
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	689b      	ldr	r3, [r3, #8]
 8006b58:	494d      	ldr	r1, [pc, #308]	@ (8006c90 <HAL_RCC_ClockConfig+0x1bc>)
 8006b5a:	4313      	orrs	r3, r2
 8006b5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f003 0301 	and.w	r3, r3, #1
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d044      	beq.n	8006bf4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	685b      	ldr	r3, [r3, #4]
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d107      	bne.n	8006b82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006b72:	4b47      	ldr	r3, [pc, #284]	@ (8006c90 <HAL_RCC_ClockConfig+0x1bc>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d119      	bne.n	8006bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	e07f      	b.n	8006c82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	685b      	ldr	r3, [r3, #4]
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d003      	beq.n	8006b92 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006b8e:	2b03      	cmp	r3, #3
 8006b90:	d107      	bne.n	8006ba2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006b92:	4b3f      	ldr	r3, [pc, #252]	@ (8006c90 <HAL_RCC_ClockConfig+0x1bc>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d109      	bne.n	8006bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006b9e:	2301      	movs	r3, #1
 8006ba0:	e06f      	b.n	8006c82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006ba2:	4b3b      	ldr	r3, [pc, #236]	@ (8006c90 <HAL_RCC_ClockConfig+0x1bc>)
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f003 0302 	and.w	r3, r3, #2
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d101      	bne.n	8006bb2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e067      	b.n	8006c82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006bb2:	4b37      	ldr	r3, [pc, #220]	@ (8006c90 <HAL_RCC_ClockConfig+0x1bc>)
 8006bb4:	689b      	ldr	r3, [r3, #8]
 8006bb6:	f023 0203 	bic.w	r2, r3, #3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	4934      	ldr	r1, [pc, #208]	@ (8006c90 <HAL_RCC_ClockConfig+0x1bc>)
 8006bc0:	4313      	orrs	r3, r2
 8006bc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006bc4:	f7fb ffb4 	bl	8002b30 <HAL_GetTick>
 8006bc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006bca:	e00a      	b.n	8006be2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006bcc:	f7fb ffb0 	bl	8002b30 <HAL_GetTick>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	68fb      	ldr	r3, [r7, #12]
 8006bd4:	1ad3      	subs	r3, r2, r3
 8006bd6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d901      	bls.n	8006be2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e04f      	b.n	8006c82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006be2:	4b2b      	ldr	r3, [pc, #172]	@ (8006c90 <HAL_RCC_ClockConfig+0x1bc>)
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	f003 020c 	and.w	r2, r3, #12
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	009b      	lsls	r3, r3, #2
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d1eb      	bne.n	8006bcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006bf4:	4b25      	ldr	r3, [pc, #148]	@ (8006c8c <HAL_RCC_ClockConfig+0x1b8>)
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 030f 	and.w	r3, r3, #15
 8006bfc:	683a      	ldr	r2, [r7, #0]
 8006bfe:	429a      	cmp	r2, r3
 8006c00:	d20c      	bcs.n	8006c1c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c02:	4b22      	ldr	r3, [pc, #136]	@ (8006c8c <HAL_RCC_ClockConfig+0x1b8>)
 8006c04:	683a      	ldr	r2, [r7, #0]
 8006c06:	b2d2      	uxtb	r2, r2
 8006c08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006c0a:	4b20      	ldr	r3, [pc, #128]	@ (8006c8c <HAL_RCC_ClockConfig+0x1b8>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f003 030f 	and.w	r3, r3, #15
 8006c12:	683a      	ldr	r2, [r7, #0]
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d001      	beq.n	8006c1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006c18:	2301      	movs	r3, #1
 8006c1a:	e032      	b.n	8006c82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f003 0304 	and.w	r3, r3, #4
 8006c24:	2b00      	cmp	r3, #0
 8006c26:	d008      	beq.n	8006c3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006c28:	4b19      	ldr	r3, [pc, #100]	@ (8006c90 <HAL_RCC_ClockConfig+0x1bc>)
 8006c2a:	689b      	ldr	r3, [r3, #8]
 8006c2c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	68db      	ldr	r3, [r3, #12]
 8006c34:	4916      	ldr	r1, [pc, #88]	@ (8006c90 <HAL_RCC_ClockConfig+0x1bc>)
 8006c36:	4313      	orrs	r3, r2
 8006c38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	f003 0308 	and.w	r3, r3, #8
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d009      	beq.n	8006c5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006c46:	4b12      	ldr	r3, [pc, #72]	@ (8006c90 <HAL_RCC_ClockConfig+0x1bc>)
 8006c48:	689b      	ldr	r3, [r3, #8]
 8006c4a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	691b      	ldr	r3, [r3, #16]
 8006c52:	00db      	lsls	r3, r3, #3
 8006c54:	490e      	ldr	r1, [pc, #56]	@ (8006c90 <HAL_RCC_ClockConfig+0x1bc>)
 8006c56:	4313      	orrs	r3, r2
 8006c58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006c5a:	f000 f821 	bl	8006ca0 <HAL_RCC_GetSysClockFreq>
 8006c5e:	4602      	mov	r2, r0
 8006c60:	4b0b      	ldr	r3, [pc, #44]	@ (8006c90 <HAL_RCC_ClockConfig+0x1bc>)
 8006c62:	689b      	ldr	r3, [r3, #8]
 8006c64:	091b      	lsrs	r3, r3, #4
 8006c66:	f003 030f 	and.w	r3, r3, #15
 8006c6a:	490a      	ldr	r1, [pc, #40]	@ (8006c94 <HAL_RCC_ClockConfig+0x1c0>)
 8006c6c:	5ccb      	ldrb	r3, [r1, r3]
 8006c6e:	fa22 f303 	lsr.w	r3, r2, r3
 8006c72:	4a09      	ldr	r2, [pc, #36]	@ (8006c98 <HAL_RCC_ClockConfig+0x1c4>)
 8006c74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006c76:	4b09      	ldr	r3, [pc, #36]	@ (8006c9c <HAL_RCC_ClockConfig+0x1c8>)
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	f7fa fc64 	bl	8001548 <HAL_InitTick>

  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}
 8006c8a:	bf00      	nop
 8006c8c:	40023c00 	.word	0x40023c00
 8006c90:	40023800 	.word	0x40023800
 8006c94:	08009a54 	.word	0x08009a54
 8006c98:	20000000 	.word	0x20000000
 8006c9c:	2000004c 	.word	0x2000004c

08006ca0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ca0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ca4:	b094      	sub	sp, #80	@ 0x50
 8006ca6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006ca8:	2300      	movs	r3, #0
 8006caa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006cac:	2300      	movs	r3, #0
 8006cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006cb4:	2300      	movs	r3, #0
 8006cb6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006cb8:	4b79      	ldr	r3, [pc, #484]	@ (8006ea0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cba:	689b      	ldr	r3, [r3, #8]
 8006cbc:	f003 030c 	and.w	r3, r3, #12
 8006cc0:	2b08      	cmp	r3, #8
 8006cc2:	d00d      	beq.n	8006ce0 <HAL_RCC_GetSysClockFreq+0x40>
 8006cc4:	2b08      	cmp	r3, #8
 8006cc6:	f200 80e1 	bhi.w	8006e8c <HAL_RCC_GetSysClockFreq+0x1ec>
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d002      	beq.n	8006cd4 <HAL_RCC_GetSysClockFreq+0x34>
 8006cce:	2b04      	cmp	r3, #4
 8006cd0:	d003      	beq.n	8006cda <HAL_RCC_GetSysClockFreq+0x3a>
 8006cd2:	e0db      	b.n	8006e8c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006cd4:	4b73      	ldr	r3, [pc, #460]	@ (8006ea4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006cd6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006cd8:	e0db      	b.n	8006e92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006cda:	4b73      	ldr	r3, [pc, #460]	@ (8006ea8 <HAL_RCC_GetSysClockFreq+0x208>)
 8006cdc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006cde:	e0d8      	b.n	8006e92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ce0:	4b6f      	ldr	r3, [pc, #444]	@ (8006ea0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006ce8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006cea:	4b6d      	ldr	r3, [pc, #436]	@ (8006ea0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d063      	beq.n	8006dbe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006cf6:	4b6a      	ldr	r3, [pc, #424]	@ (8006ea0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006cf8:	685b      	ldr	r3, [r3, #4]
 8006cfa:	099b      	lsrs	r3, r3, #6
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d00:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006d02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006d04:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006d08:	633b      	str	r3, [r7, #48]	@ 0x30
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	637b      	str	r3, [r7, #52]	@ 0x34
 8006d0e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006d12:	4622      	mov	r2, r4
 8006d14:	462b      	mov	r3, r5
 8006d16:	f04f 0000 	mov.w	r0, #0
 8006d1a:	f04f 0100 	mov.w	r1, #0
 8006d1e:	0159      	lsls	r1, r3, #5
 8006d20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006d24:	0150      	lsls	r0, r2, #5
 8006d26:	4602      	mov	r2, r0
 8006d28:	460b      	mov	r3, r1
 8006d2a:	4621      	mov	r1, r4
 8006d2c:	1a51      	subs	r1, r2, r1
 8006d2e:	6139      	str	r1, [r7, #16]
 8006d30:	4629      	mov	r1, r5
 8006d32:	eb63 0301 	sbc.w	r3, r3, r1
 8006d36:	617b      	str	r3, [r7, #20]
 8006d38:	f04f 0200 	mov.w	r2, #0
 8006d3c:	f04f 0300 	mov.w	r3, #0
 8006d40:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006d44:	4659      	mov	r1, fp
 8006d46:	018b      	lsls	r3, r1, #6
 8006d48:	4651      	mov	r1, sl
 8006d4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006d4e:	4651      	mov	r1, sl
 8006d50:	018a      	lsls	r2, r1, #6
 8006d52:	4651      	mov	r1, sl
 8006d54:	ebb2 0801 	subs.w	r8, r2, r1
 8006d58:	4659      	mov	r1, fp
 8006d5a:	eb63 0901 	sbc.w	r9, r3, r1
 8006d5e:	f04f 0200 	mov.w	r2, #0
 8006d62:	f04f 0300 	mov.w	r3, #0
 8006d66:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006d6a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006d6e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006d72:	4690      	mov	r8, r2
 8006d74:	4699      	mov	r9, r3
 8006d76:	4623      	mov	r3, r4
 8006d78:	eb18 0303 	adds.w	r3, r8, r3
 8006d7c:	60bb      	str	r3, [r7, #8]
 8006d7e:	462b      	mov	r3, r5
 8006d80:	eb49 0303 	adc.w	r3, r9, r3
 8006d84:	60fb      	str	r3, [r7, #12]
 8006d86:	f04f 0200 	mov.w	r2, #0
 8006d8a:	f04f 0300 	mov.w	r3, #0
 8006d8e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006d92:	4629      	mov	r1, r5
 8006d94:	024b      	lsls	r3, r1, #9
 8006d96:	4621      	mov	r1, r4
 8006d98:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006d9c:	4621      	mov	r1, r4
 8006d9e:	024a      	lsls	r2, r1, #9
 8006da0:	4610      	mov	r0, r2
 8006da2:	4619      	mov	r1, r3
 8006da4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006da6:	2200      	movs	r2, #0
 8006da8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006daa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006dac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006db0:	f7f9 fa1c 	bl	80001ec <__aeabi_uldivmod>
 8006db4:	4602      	mov	r2, r0
 8006db6:	460b      	mov	r3, r1
 8006db8:	4613      	mov	r3, r2
 8006dba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006dbc:	e058      	b.n	8006e70 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dbe:	4b38      	ldr	r3, [pc, #224]	@ (8006ea0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	099b      	lsrs	r3, r3, #6
 8006dc4:	2200      	movs	r2, #0
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	4611      	mov	r1, r2
 8006dca:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006dce:	623b      	str	r3, [r7, #32]
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8006dd4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006dd8:	4642      	mov	r2, r8
 8006dda:	464b      	mov	r3, r9
 8006ddc:	f04f 0000 	mov.w	r0, #0
 8006de0:	f04f 0100 	mov.w	r1, #0
 8006de4:	0159      	lsls	r1, r3, #5
 8006de6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006dea:	0150      	lsls	r0, r2, #5
 8006dec:	4602      	mov	r2, r0
 8006dee:	460b      	mov	r3, r1
 8006df0:	4641      	mov	r1, r8
 8006df2:	ebb2 0a01 	subs.w	sl, r2, r1
 8006df6:	4649      	mov	r1, r9
 8006df8:	eb63 0b01 	sbc.w	fp, r3, r1
 8006dfc:	f04f 0200 	mov.w	r2, #0
 8006e00:	f04f 0300 	mov.w	r3, #0
 8006e04:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006e08:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006e0c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006e10:	ebb2 040a 	subs.w	r4, r2, sl
 8006e14:	eb63 050b 	sbc.w	r5, r3, fp
 8006e18:	f04f 0200 	mov.w	r2, #0
 8006e1c:	f04f 0300 	mov.w	r3, #0
 8006e20:	00eb      	lsls	r3, r5, #3
 8006e22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006e26:	00e2      	lsls	r2, r4, #3
 8006e28:	4614      	mov	r4, r2
 8006e2a:	461d      	mov	r5, r3
 8006e2c:	4643      	mov	r3, r8
 8006e2e:	18e3      	adds	r3, r4, r3
 8006e30:	603b      	str	r3, [r7, #0]
 8006e32:	464b      	mov	r3, r9
 8006e34:	eb45 0303 	adc.w	r3, r5, r3
 8006e38:	607b      	str	r3, [r7, #4]
 8006e3a:	f04f 0200 	mov.w	r2, #0
 8006e3e:	f04f 0300 	mov.w	r3, #0
 8006e42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006e46:	4629      	mov	r1, r5
 8006e48:	028b      	lsls	r3, r1, #10
 8006e4a:	4621      	mov	r1, r4
 8006e4c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006e50:	4621      	mov	r1, r4
 8006e52:	028a      	lsls	r2, r1, #10
 8006e54:	4610      	mov	r0, r2
 8006e56:	4619      	mov	r1, r3
 8006e58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006e5a:	2200      	movs	r2, #0
 8006e5c:	61bb      	str	r3, [r7, #24]
 8006e5e:	61fa      	str	r2, [r7, #28]
 8006e60:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e64:	f7f9 f9c2 	bl	80001ec <__aeabi_uldivmod>
 8006e68:	4602      	mov	r2, r0
 8006e6a:	460b      	mov	r3, r1
 8006e6c:	4613      	mov	r3, r2
 8006e6e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006e70:	4b0b      	ldr	r3, [pc, #44]	@ (8006ea0 <HAL_RCC_GetSysClockFreq+0x200>)
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	0c1b      	lsrs	r3, r3, #16
 8006e76:	f003 0303 	and.w	r3, r3, #3
 8006e7a:	3301      	adds	r3, #1
 8006e7c:	005b      	lsls	r3, r3, #1
 8006e7e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8006e80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8006e88:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e8a:	e002      	b.n	8006e92 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006e8c:	4b05      	ldr	r3, [pc, #20]	@ (8006ea4 <HAL_RCC_GetSysClockFreq+0x204>)
 8006e8e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006e90:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006e92:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3750      	adds	r7, #80	@ 0x50
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006e9e:	bf00      	nop
 8006ea0:	40023800 	.word	0x40023800
 8006ea4:	00f42400 	.word	0x00f42400
 8006ea8:	007a1200 	.word	0x007a1200

08006eac <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006eac:	b480      	push	{r7}
 8006eae:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006eb0:	4b03      	ldr	r3, [pc, #12]	@ (8006ec0 <HAL_RCC_GetHCLKFreq+0x14>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
}
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ebc:	4770      	bx	lr
 8006ebe:	bf00      	nop
 8006ec0:	20000000 	.word	0x20000000

08006ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006ec8:	f7ff fff0 	bl	8006eac <HAL_RCC_GetHCLKFreq>
 8006ecc:	4602      	mov	r2, r0
 8006ece:	4b05      	ldr	r3, [pc, #20]	@ (8006ee4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	0a9b      	lsrs	r3, r3, #10
 8006ed4:	f003 0307 	and.w	r3, r3, #7
 8006ed8:	4903      	ldr	r1, [pc, #12]	@ (8006ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006eda:	5ccb      	ldrb	r3, [r1, r3]
 8006edc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	40023800 	.word	0x40023800
 8006ee8:	08009a64 	.word	0x08009a64

08006eec <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006ef0:	f7ff ffdc 	bl	8006eac <HAL_RCC_GetHCLKFreq>
 8006ef4:	4602      	mov	r2, r0
 8006ef6:	4b05      	ldr	r3, [pc, #20]	@ (8006f0c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006ef8:	689b      	ldr	r3, [r3, #8]
 8006efa:	0b5b      	lsrs	r3, r3, #13
 8006efc:	f003 0307 	and.w	r3, r3, #7
 8006f00:	4903      	ldr	r1, [pc, #12]	@ (8006f10 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f02:	5ccb      	ldrb	r3, [r1, r3]
 8006f04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	bd80      	pop	{r7, pc}
 8006f0c:	40023800 	.word	0x40023800
 8006f10:	08009a64 	.word	0x08009a64

08006f14 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	220f      	movs	r2, #15
 8006f22:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006f24:	4b12      	ldr	r3, [pc, #72]	@ (8006f70 <HAL_RCC_GetClockConfig+0x5c>)
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	f003 0203 	and.w	r2, r3, #3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006f30:	4b0f      	ldr	r3, [pc, #60]	@ (8006f70 <HAL_RCC_GetClockConfig+0x5c>)
 8006f32:	689b      	ldr	r3, [r3, #8]
 8006f34:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006f3c:	4b0c      	ldr	r3, [pc, #48]	@ (8006f70 <HAL_RCC_GetClockConfig+0x5c>)
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006f48:	4b09      	ldr	r3, [pc, #36]	@ (8006f70 <HAL_RCC_GetClockConfig+0x5c>)
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	08db      	lsrs	r3, r3, #3
 8006f4e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006f56:	4b07      	ldr	r3, [pc, #28]	@ (8006f74 <HAL_RCC_GetClockConfig+0x60>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f003 020f 	and.w	r2, r3, #15
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	601a      	str	r2, [r3, #0]
}
 8006f62:	bf00      	nop
 8006f64:	370c      	adds	r7, #12
 8006f66:	46bd      	mov	sp, r7
 8006f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f6c:	4770      	bx	lr
 8006f6e:	bf00      	nop
 8006f70:	40023800 	.word	0x40023800
 8006f74:	40023c00 	.word	0x40023c00

08006f78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b086      	sub	sp, #24
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f80:	2300      	movs	r3, #0
 8006f82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006f84:	2300      	movs	r3, #0
 8006f86:	613b      	str	r3, [r7, #16]

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	f003 0301 	and.w	r3, r3, #1
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d10b      	bne.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	f003 0302 	and.w	r3, r3, #2
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d105      	bne.n	8006fac <HAL_RCCEx_PeriphCLKConfig+0x34>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == RCC_PERIPHCLK_SAI_PLLI2S) ||
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d075      	beq.n	8007098 <HAL_RCCEx_PeriphCLKConfig+0x120>
  {
    /* check for Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8006fac:	4b91      	ldr	r3, [pc, #580]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8006fae:	2200      	movs	r2, #0
 8006fb0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006fb2:	f7fb fdbd 	bl	8002b30 <HAL_GetTick>
 8006fb6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006fb8:	e008      	b.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8006fba:	f7fb fdb9 	bl	8002b30 <HAL_GetTick>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	697b      	ldr	r3, [r7, #20]
 8006fc2:	1ad3      	subs	r3, r2, r3
 8006fc4:	2b02      	cmp	r3, #2
 8006fc6:	d901      	bls.n	8006fcc <HAL_RCCEx_PeriphCLKConfig+0x54>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	e189      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006fcc:	4b8a      	ldr	r3, [pc, #552]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d1f0      	bne.n	8006fba <HAL_RCCEx_PeriphCLKConfig+0x42>
    }

    /*---------------------------- I2S configuration -------------------------*/
    /* In Case of I2S Clock Configuration through PLLI2S, PLLI2SR must be added
      only for I2S configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f003 0301 	and.w	r3, r3, #1
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d009      	beq.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	685b      	ldr	r3, [r3, #4]
 8006fe8:	019a      	lsls	r2, r3, #6
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	689b      	ldr	r3, [r3, #8]
 8006fee:	071b      	lsls	r3, r3, #28
 8006ff0:	4981      	ldr	r1, [pc, #516]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8006ff2:	4313      	orrs	r3, r2
 8006ff4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLI2S, PLLI2SQ and PLLI2S_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f003 0302 	and.w	r3, r3, #2
 8007000:	2b00      	cmp	r3, #0
 8007002:	d01f      	beq.n	8007044 <HAL_RCCEx_PeriphCLKConfig+0xcc>
      /* Check the PLLI2S division factors */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007004:	4b7c      	ldr	r3, [pc, #496]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007006:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800700a:	0f1b      	lsrs	r3, r3, #28
 800700c:	f003 0307 	and.w	r3, r3, #7
 8007010:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	685b      	ldr	r3, [r3, #4]
 8007016:	019a      	lsls	r2, r3, #6
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	68db      	ldr	r3, [r3, #12]
 800701c:	061b      	lsls	r3, r3, #24
 800701e:	431a      	orrs	r2, r3
 8007020:	693b      	ldr	r3, [r7, #16]
 8007022:	071b      	lsls	r3, r3, #28
 8007024:	4974      	ldr	r1, [pc, #464]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007026:	4313      	orrs	r3, r2
 8007028:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800702c:	4b72      	ldr	r3, [pc, #456]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800702e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007032:	f023 021f 	bic.w	r2, r3, #31
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	69db      	ldr	r3, [r3, #28]
 800703a:	3b01      	subs	r3, #1
 800703c:	496e      	ldr	r1, [pc, #440]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800703e:	4313      	orrs	r3, r2
 8007040:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00d      	beq.n	800706c <HAL_RCCEx_PeriphCLKConfig+0xf4>
      /* Check for Parameters */
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Configure the PLLI2S multiplication and division factors */
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ,
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	685b      	ldr	r3, [r3, #4]
 8007054:	019a      	lsls	r2, r3, #6
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	68db      	ldr	r3, [r3, #12]
 800705a:	061b      	lsls	r3, r3, #24
 800705c:	431a      	orrs	r2, r3
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	689b      	ldr	r3, [r3, #8]
 8007062:	071b      	lsls	r3, r3, #28
 8007064:	4964      	ldr	r1, [pc, #400]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007066:	4313      	orrs	r3, r2
 8007068:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                                     PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800706c:	4b61      	ldr	r3, [pc, #388]	@ (80071f4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800706e:	2201      	movs	r2, #1
 8007070:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007072:	f7fb fd5d 	bl	8002b30 <HAL_GetTick>
 8007076:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007078:	e008      	b.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x114>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800707a:	f7fb fd59 	bl	8002b30 <HAL_GetTick>
 800707e:	4602      	mov	r2, r0
 8007080:	697b      	ldr	r3, [r7, #20]
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	2b02      	cmp	r3, #2
 8007086:	d901      	bls.n	800708c <HAL_RCCEx_PeriphCLKConfig+0x114>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007088:	2303      	movs	r3, #3
 800708a:	e129      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800708c:	4b5a      	ldr	r3, [pc, #360]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007094:	2b00      	cmp	r3, #0
 8007096:	d0f0      	beq.n	800707a <HAL_RCCEx_PeriphCLKConfig+0x102>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 0304 	and.w	r3, r3, #4
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d105      	bne.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x138>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	f003 0308 	and.w	r3, r3, #8
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d079      	beq.n	80071a4 <HAL_RCCEx_PeriphCLKConfig+0x22c>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80070b0:	4b52      	ldr	r3, [pc, #328]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80070b2:	2200      	movs	r2, #0
 80070b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80070b6:	f7fb fd3b 	bl	8002b30 <HAL_GetTick>
 80070ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80070bc:	e008      	b.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80070be:	f7fb fd37 	bl	8002b30 <HAL_GetTick>
 80070c2:	4602      	mov	r2, r0
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	1ad3      	subs	r3, r2, r3
 80070c8:	2b02      	cmp	r3, #2
 80070ca:	d901      	bls.n	80070d0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80070cc:	2303      	movs	r3, #3
 80070ce:	e107      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80070d0:	4b49      	ldr	r3, [pc, #292]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80070d8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070dc:	d0ef      	beq.n	80070be <HAL_RCCEx_PeriphCLKConfig+0x146>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f003 0304 	and.w	r3, r3, #4
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d020      	beq.n	800712c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80070ea:	4b43      	ldr	r3, [pc, #268]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80070ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80070f0:	0f1b      	lsrs	r3, r3, #28
 80070f2:	f003 0307 	and.w	r3, r3, #7
 80070f6:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	691b      	ldr	r3, [r3, #16]
 80070fc:	019a      	lsls	r2, r3, #6
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	695b      	ldr	r3, [r3, #20]
 8007102:	061b      	lsls	r3, r3, #24
 8007104:	431a      	orrs	r2, r3
 8007106:	693b      	ldr	r3, [r7, #16]
 8007108:	071b      	lsls	r3, r3, #28
 800710a:	493b      	ldr	r1, [pc, #236]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800710c:	4313      	orrs	r3, r2
 800710e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8007112:	4b39      	ldr	r3, [pc, #228]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007114:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007118:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	6a1b      	ldr	r3, [r3, #32]
 8007120:	3b01      	subs	r3, #1
 8007122:	021b      	lsls	r3, r3, #8
 8007124:	4934      	ldr	r1, [pc, #208]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007126:	4313      	orrs	r3, r2
 8007128:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f003 0308 	and.w	r3, r3, #8
 8007134:	2b00      	cmp	r3, #0
 8007136:	d01e      	beq.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8007138:	4b2f      	ldr	r3, [pc, #188]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800713a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800713e:	0e1b      	lsrs	r3, r3, #24
 8007140:	f003 030f 	and.w	r3, r3, #15
 8007144:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	691b      	ldr	r3, [r3, #16]
 800714a:	019a      	lsls	r2, r3, #6
 800714c:	693b      	ldr	r3, [r7, #16]
 800714e:	061b      	lsls	r3, r3, #24
 8007150:	431a      	orrs	r2, r3
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	699b      	ldr	r3, [r3, #24]
 8007156:	071b      	lsls	r3, r3, #28
 8007158:	4927      	ldr	r1, [pc, #156]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800715a:	4313      	orrs	r3, r2
 800715c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8007160:	4b25      	ldr	r3, [pc, #148]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007162:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007166:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800716e:	4922      	ldr	r1, [pc, #136]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007170:	4313      	orrs	r3, r2
 8007172:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8007176:	4b21      	ldr	r3, [pc, #132]	@ (80071fc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8007178:	2201      	movs	r2, #1
 800717a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800717c:	f7fb fcd8 	bl	8002b30 <HAL_GetTick>
 8007180:	6178      	str	r0, [r7, #20]
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007182:	e008      	b.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x21e>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8007184:	f7fb fcd4 	bl	8002b30 <HAL_GetTick>
 8007188:	4602      	mov	r2, r0
 800718a:	697b      	ldr	r3, [r7, #20]
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	2b02      	cmp	r3, #2
 8007190:	d901      	bls.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0x21e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007192:	2303      	movs	r3, #3
 8007194:	e0a4      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8007196:	4b18      	ldr	r3, [pc, #96]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800719e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80071a2:	d1ef      	bne.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0x20c>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f003 0320 	and.w	r3, r3, #32
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	f000 808b 	beq.w	80072c8 <HAL_RCCEx_PeriphCLKConfig+0x350>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80071b2:	2300      	movs	r3, #0
 80071b4:	60fb      	str	r3, [r7, #12]
 80071b6:	4b10      	ldr	r3, [pc, #64]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ba:	4a0f      	ldr	r2, [pc, #60]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80071c2:	4b0d      	ldr	r3, [pc, #52]	@ (80071f8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80071c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071ca:	60fb      	str	r3, [r7, #12]
 80071cc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80071ce:	4b0c      	ldr	r3, [pc, #48]	@ (8007200 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	4a0b      	ldr	r2, [pc, #44]	@ (8007200 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 80071d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071d8:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80071da:	f7fb fca9 	bl	8002b30 <HAL_GetTick>
 80071de:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80071e0:	e010      	b.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x28c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071e2:	f7fb fca5 	bl	8002b30 <HAL_GetTick>
 80071e6:	4602      	mov	r2, r0
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	1ad3      	subs	r3, r2, r3
 80071ec:	2b02      	cmp	r3, #2
 80071ee:	d909      	bls.n	8007204 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      {
        return HAL_TIMEOUT;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e075      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 80071f4:	42470068 	.word	0x42470068
 80071f8:	40023800 	.word	0x40023800
 80071fc:	42470070 	.word	0x42470070
 8007200:	40007000 	.word	0x40007000
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007204:	4b38      	ldr	r3, [pc, #224]	@ (80072e8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800720c:	2b00      	cmp	r3, #0
 800720e:	d0e8      	beq.n	80071e2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007210:	4b36      	ldr	r3, [pc, #216]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007214:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007218:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d02f      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007224:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007228:	693a      	ldr	r2, [r7, #16]
 800722a:	429a      	cmp	r2, r3
 800722c:	d028      	beq.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800722e:	4b2f      	ldr	r3, [pc, #188]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007230:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007232:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007236:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007238:	4b2d      	ldr	r3, [pc, #180]	@ (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 800723a:	2201      	movs	r2, #1
 800723c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800723e:	4b2c      	ldr	r3, [pc, #176]	@ (80072f0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8007240:	2200      	movs	r2, #0
 8007242:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007244:	4a29      	ldr	r2, [pc, #164]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800724a:	4b28      	ldr	r3, [pc, #160]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 800724c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800724e:	f003 0301 	and.w	r3, r3, #1
 8007252:	2b01      	cmp	r3, #1
 8007254:	d114      	bne.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x308>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007256:	f7fb fc6b 	bl	8002b30 <HAL_GetTick>
 800725a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800725c:	e00a      	b.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800725e:	f7fb fc67 	bl	8002b30 <HAL_GetTick>
 8007262:	4602      	mov	r2, r0
 8007264:	697b      	ldr	r3, [r7, #20]
 8007266:	1ad3      	subs	r3, r2, r3
 8007268:	f241 3288 	movw	r2, #5000	@ 0x1388
 800726c:	4293      	cmp	r3, r2
 800726e:	d901      	bls.n	8007274 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
          {
            return HAL_TIMEOUT;
 8007270:	2303      	movs	r3, #3
 8007272:	e035      	b.n	80072e0 <HAL_RCCEx_PeriphCLKConfig+0x368>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007274:	4b1d      	ldr	r3, [pc, #116]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007276:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007278:	f003 0302 	and.w	r3, r3, #2
 800727c:	2b00      	cmp	r3, #0
 800727e:	d0ee      	beq.n	800725e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007284:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007288:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800728c:	d10d      	bne.n	80072aa <HAL_RCCEx_PeriphCLKConfig+0x332>
 800728e:	4b17      	ldr	r3, [pc, #92]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8007290:	689b      	ldr	r3, [r3, #8]
 8007292:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800729a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800729e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072a2:	4912      	ldr	r1, [pc, #72]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072a4:	4313      	orrs	r3, r2
 80072a6:	608b      	str	r3, [r1, #8]
 80072a8:	e005      	b.n	80072b6 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 80072aa:	4b10      	ldr	r3, [pc, #64]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072ac:	689b      	ldr	r3, [r3, #8]
 80072ae:	4a0f      	ldr	r2, [pc, #60]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072b0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80072b4:	6093      	str	r3, [r2, #8]
 80072b6:	4b0d      	ldr	r3, [pc, #52]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072b8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072c2:	490a      	ldr	r1, [pc, #40]	@ (80072ec <HAL_RCCEx_PeriphCLKConfig+0x374>)
 80072c4:	4313      	orrs	r3, r2
 80072c6:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	f003 0310 	and.w	r3, r3, #16
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d004      	beq.n	80072de <HAL_RCCEx_PeriphCLKConfig+0x366>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 80072da:	4b06      	ldr	r3, [pc, #24]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 80072dc:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3718      	adds	r7, #24
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	40007000 	.word	0x40007000
 80072ec:	40023800 	.word	0x40023800
 80072f0:	42470e40 	.word	0x42470e40
 80072f4:	424711e0 	.word	0x424711e0

080072f8 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b082      	sub	sp, #8
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d101      	bne.n	800730c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	e025      	b.n	8007358 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007312:	b2db      	uxtb	r3, r3
 8007314:	2b00      	cmp	r3, #0
 8007316:	d106      	bne.n	8007326 <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f7fa f907 	bl	8001534 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2202      	movs	r2, #2
 800732a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681a      	ldr	r2, [r3, #0]
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	3304      	adds	r3, #4
 8007336:	4619      	mov	r1, r3
 8007338:	4610      	mov	r0, r2
 800733a:	f001 fdaf 	bl	8008e9c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	6818      	ldr	r0, [r3, #0]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	685b      	ldr	r3, [r3, #4]
 8007346:	461a      	mov	r2, r3
 8007348:	6839      	ldr	r1, [r7, #0]
 800734a:	f001 fe04 	bl	8008f56 <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	2201      	movs	r2, #1
 8007352:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8007356:	2300      	movs	r3, #0
}
 8007358:	4618      	mov	r0, r3
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b086      	sub	sp, #24
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8007372:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8007374:	7dfb      	ldrb	r3, [r7, #23]
 8007376:	2b02      	cmp	r3, #2
 8007378:	d101      	bne.n	800737e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 800737a:	2302      	movs	r3, #2
 800737c:	e021      	b.n	80073c2 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800737e:	7dfb      	ldrb	r3, [r7, #23]
 8007380:	2b01      	cmp	r3, #1
 8007382:	d002      	beq.n	800738a <HAL_SDRAM_SendCommand+0x2a>
 8007384:	7dfb      	ldrb	r3, [r7, #23]
 8007386:	2b05      	cmp	r3, #5
 8007388:	d118      	bne.n	80073bc <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2202      	movs	r2, #2
 800738e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	687a      	ldr	r2, [r7, #4]
 8007398:	68b9      	ldr	r1, [r7, #8]
 800739a:	4618      	mov	r0, r3
 800739c:	f001 fe44 	bl	8009028 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	2b02      	cmp	r3, #2
 80073a6:	d104      	bne.n	80073b2 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2205      	movs	r2, #5
 80073ac:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80073b0:	e006      	b.n	80073c0 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2201      	movs	r2, #1
 80073b6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80073ba:	e001      	b.n	80073c0 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80073bc:	2301      	movs	r3, #1
 80073be:	e000      	b.n	80073c2 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80073c0:	2300      	movs	r3, #0
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3718      	adds	r7, #24
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b082      	sub	sp, #8
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80073da:	b2db      	uxtb	r3, r3
 80073dc:	2b02      	cmp	r3, #2
 80073de:	d101      	bne.n	80073e4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80073e0:	2302      	movs	r3, #2
 80073e2:	e016      	b.n	8007412 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d10f      	bne.n	8007410 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2202      	movs	r2, #2
 80073f4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	6839      	ldr	r1, [r7, #0]
 80073fe:	4618      	mov	r0, r3
 8007400:	f001 fe4f 	bl	80090a2 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800740c:	2300      	movs	r3, #0
 800740e:	e000      	b.n	8007412 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8007410:	2301      	movs	r3, #1
}
 8007412:	4618      	mov	r0, r3
 8007414:	3708      	adds	r7, #8
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}

0800741a <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800741a:	b580      	push	{r7, lr}
 800741c:	b082      	sub	sp, #8
 800741e:	af00      	add	r7, sp, #0
 8007420:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2b00      	cmp	r3, #0
 8007426:	d101      	bne.n	800742c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007428:	2301      	movs	r3, #1
 800742a:	e07b      	b.n	8007524 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007430:	2b00      	cmp	r3, #0
 8007432:	d108      	bne.n	8007446 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685b      	ldr	r3, [r3, #4]
 8007438:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800743c:	d009      	beq.n	8007452 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2200      	movs	r2, #0
 8007442:	61da      	str	r2, [r3, #28]
 8007444:	e005      	b.n	8007452 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2200      	movs	r2, #0
 8007450:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2200      	movs	r2, #0
 8007456:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800745e:	b2db      	uxtb	r3, r3
 8007460:	2b00      	cmp	r3, #0
 8007462:	d106      	bne.n	8007472 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f7f9 fea1 	bl	80011b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2202      	movs	r2, #2
 8007476:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	681a      	ldr	r2, [r3, #0]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007488:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	685b      	ldr	r3, [r3, #4]
 800748e:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	689b      	ldr	r3, [r3, #8]
 8007496:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800749a:	431a      	orrs	r2, r3
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	68db      	ldr	r3, [r3, #12]
 80074a0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80074a4:	431a      	orrs	r2, r3
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	f003 0302 	and.w	r3, r3, #2
 80074ae:	431a      	orrs	r2, r3
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	695b      	ldr	r3, [r3, #20]
 80074b4:	f003 0301 	and.w	r3, r3, #1
 80074b8:	431a      	orrs	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	699b      	ldr	r3, [r3, #24]
 80074be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80074c2:	431a      	orrs	r2, r3
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	69db      	ldr	r3, [r3, #28]
 80074c8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80074cc:	431a      	orrs	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	6a1b      	ldr	r3, [r3, #32]
 80074d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80074d6:	ea42 0103 	orr.w	r1, r2, r3
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80074de:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	430a      	orrs	r2, r1
 80074e8:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	699b      	ldr	r3, [r3, #24]
 80074ee:	0c1b      	lsrs	r3, r3, #16
 80074f0:	f003 0104 	and.w	r1, r3, #4
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074f8:	f003 0210 	and.w	r2, r3, #16
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	430a      	orrs	r2, r1
 8007502:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	69da      	ldr	r2, [r3, #28]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007512:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	2200      	movs	r2, #0
 8007518:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2201      	movs	r2, #1
 800751e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	3708      	adds	r7, #8
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <HAL_SPI_DeInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_DeInit(SPI_HandleTypeDef *hspi)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	2b00      	cmp	r3, #0
 8007538:	d101      	bne.n	800753e <HAL_SPI_DeInit+0x12>
  {
    return HAL_ERROR;
 800753a:	2301      	movs	r3, #1
 800753c:	e01a      	b.n	8007574 <HAL_SPI_DeInit+0x48>
  }

  /* Check SPI Instance parameter */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));

  hspi->State = HAL_SPI_STATE_BUSY;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2202      	movs	r2, #2
 8007542:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the SPI Peripheral Clock */
  __HAL_SPI_DISABLE(hspi);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007554:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  hspi->MspDeInitCallback(hspi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC... */
  HAL_SPI_MspDeInit(hspi);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f7f9 fe74 	bl	8001244 <HAL_SPI_MspDeInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State = HAL_SPI_STATE_RESET;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2200      	movs	r2, #0
 8007566:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Release Lock */
  __HAL_UNLOCK(hspi);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  return HAL_OK;
 8007572:	2300      	movs	r3, #0
}
 8007574:	4618      	mov	r0, r3
 8007576:	3708      	adds	r7, #8
 8007578:	46bd      	mov	sp, r7
 800757a:	bd80      	pop	{r7, pc}

0800757c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800757c:	b580      	push	{r7, lr}
 800757e:	b088      	sub	sp, #32
 8007580:	af00      	add	r7, sp, #0
 8007582:	60f8      	str	r0, [r7, #12]
 8007584:	60b9      	str	r1, [r7, #8]
 8007586:	603b      	str	r3, [r7, #0]
 8007588:	4613      	mov	r3, r2
 800758a:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800758c:	f7fb fad0 	bl	8002b30 <HAL_GetTick>
 8007590:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007592:	88fb      	ldrh	r3, [r7, #6]
 8007594:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800759c:	b2db      	uxtb	r3, r3
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d001      	beq.n	80075a6 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80075a2:	2302      	movs	r3, #2
 80075a4:	e12a      	b.n	80077fc <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	d002      	beq.n	80075b2 <HAL_SPI_Transmit+0x36>
 80075ac:	88fb      	ldrh	r3, [r7, #6]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d101      	bne.n	80075b6 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e122      	b.n	80077fc <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d101      	bne.n	80075c4 <HAL_SPI_Transmit+0x48>
 80075c0:	2302      	movs	r3, #2
 80075c2:	e11b      	b.n	80077fc <HAL_SPI_Transmit+0x280>
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	2201      	movs	r2, #1
 80075c8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2203      	movs	r2, #3
 80075d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	2200      	movs	r2, #0
 80075d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	88fa      	ldrh	r2, [r7, #6]
 80075e4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	88fa      	ldrh	r2, [r7, #6]
 80075ea:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	2200      	movs	r2, #0
 80075f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	2200      	movs	r2, #0
 80075f6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	2200      	movs	r2, #0
 8007602:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	2200      	movs	r2, #0
 8007608:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	689b      	ldr	r3, [r3, #8]
 800760e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007612:	d10f      	bne.n	8007634 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007622:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	681a      	ldr	r2, [r3, #0]
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007632:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800763e:	2b40      	cmp	r3, #64	@ 0x40
 8007640:	d007      	beq.n	8007652 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	681a      	ldr	r2, [r3, #0]
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007650:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	68db      	ldr	r3, [r3, #12]
 8007656:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800765a:	d152      	bne.n	8007702 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d002      	beq.n	800766a <HAL_SPI_Transmit+0xee>
 8007664:	8b7b      	ldrh	r3, [r7, #26]
 8007666:	2b01      	cmp	r3, #1
 8007668:	d145      	bne.n	80076f6 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800766e:	881a      	ldrh	r2, [r3, #0]
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800767a:	1c9a      	adds	r2, r3, #2
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007684:	b29b      	uxth	r3, r3
 8007686:	3b01      	subs	r3, #1
 8007688:	b29a      	uxth	r2, r3
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800768e:	e032      	b.n	80076f6 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f003 0302 	and.w	r3, r3, #2
 800769a:	2b02      	cmp	r3, #2
 800769c:	d112      	bne.n	80076c4 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076a2:	881a      	ldrh	r2, [r3, #0]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80076ae:	1c9a      	adds	r2, r3, #2
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076b8:	b29b      	uxth	r3, r3
 80076ba:	3b01      	subs	r3, #1
 80076bc:	b29a      	uxth	r2, r3
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80076c2:	e018      	b.n	80076f6 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80076c4:	f7fb fa34 	bl	8002b30 <HAL_GetTick>
 80076c8:	4602      	mov	r2, r0
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	1ad3      	subs	r3, r2, r3
 80076ce:	683a      	ldr	r2, [r7, #0]
 80076d0:	429a      	cmp	r2, r3
 80076d2:	d803      	bhi.n	80076dc <HAL_SPI_Transmit+0x160>
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076da:	d102      	bne.n	80076e2 <HAL_SPI_Transmit+0x166>
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d109      	bne.n	80076f6 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	2201      	movs	r2, #1
 80076e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80076f2:	2303      	movs	r3, #3
 80076f4:	e082      	b.n	80077fc <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80076fa:	b29b      	uxth	r3, r3
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d1c7      	bne.n	8007690 <HAL_SPI_Transmit+0x114>
 8007700:	e053      	b.n	80077aa <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d002      	beq.n	8007710 <HAL_SPI_Transmit+0x194>
 800770a:	8b7b      	ldrh	r3, [r7, #26]
 800770c:	2b01      	cmp	r3, #1
 800770e:	d147      	bne.n	80077a0 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	330c      	adds	r3, #12
 800771a:	7812      	ldrb	r2, [r2, #0]
 800771c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007722:	1c5a      	adds	r2, r3, #1
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800772c:	b29b      	uxth	r3, r3
 800772e:	3b01      	subs	r3, #1
 8007730:	b29a      	uxth	r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007736:	e033      	b.n	80077a0 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	f003 0302 	and.w	r3, r3, #2
 8007742:	2b02      	cmp	r3, #2
 8007744:	d113      	bne.n	800776e <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	330c      	adds	r3, #12
 8007750:	7812      	ldrb	r2, [r2, #0]
 8007752:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007758:	1c5a      	adds	r2, r3, #1
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007762:	b29b      	uxth	r3, r3
 8007764:	3b01      	subs	r3, #1
 8007766:	b29a      	uxth	r2, r3
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800776c:	e018      	b.n	80077a0 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800776e:	f7fb f9df 	bl	8002b30 <HAL_GetTick>
 8007772:	4602      	mov	r2, r0
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	1ad3      	subs	r3, r2, r3
 8007778:	683a      	ldr	r2, [r7, #0]
 800777a:	429a      	cmp	r2, r3
 800777c:	d803      	bhi.n	8007786 <HAL_SPI_Transmit+0x20a>
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007784:	d102      	bne.n	800778c <HAL_SPI_Transmit+0x210>
 8007786:	683b      	ldr	r3, [r7, #0]
 8007788:	2b00      	cmp	r3, #0
 800778a:	d109      	bne.n	80077a0 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	2201      	movs	r2, #1
 8007790:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007794:	68fb      	ldr	r3, [r7, #12]
 8007796:	2200      	movs	r2, #0
 8007798:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800779c:	2303      	movs	r3, #3
 800779e:	e02d      	b.n	80077fc <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d1c6      	bne.n	8007738 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80077aa:	69fa      	ldr	r2, [r7, #28]
 80077ac:	6839      	ldr	r1, [r7, #0]
 80077ae:	68f8      	ldr	r0, [r7, #12]
 80077b0:	f000 fbe6 	bl	8007f80 <SPI_EndRxTxTransaction>
 80077b4:	4603      	mov	r3, r0
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d002      	beq.n	80077c0 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	2220      	movs	r2, #32
 80077be:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	689b      	ldr	r3, [r3, #8]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d10a      	bne.n	80077de <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80077c8:	2300      	movs	r3, #0
 80077ca:	617b      	str	r3, [r7, #20]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	68db      	ldr	r3, [r3, #12]
 80077d2:	617b      	str	r3, [r7, #20]
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	689b      	ldr	r3, [r3, #8]
 80077da:	617b      	str	r3, [r7, #20]
 80077dc:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	2201      	movs	r2, #1
 80077e2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2200      	movs	r2, #0
 80077ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d001      	beq.n	80077fa <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80077f6:	2301      	movs	r3, #1
 80077f8:	e000      	b.n	80077fc <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80077fa:	2300      	movs	r3, #0
  }
}
 80077fc:	4618      	mov	r0, r3
 80077fe:	3720      	adds	r7, #32
 8007800:	46bd      	mov	sp, r7
 8007802:	bd80      	pop	{r7, pc}

08007804 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	b088      	sub	sp, #32
 8007808:	af02      	add	r7, sp, #8
 800780a:	60f8      	str	r0, [r7, #12]
 800780c:	60b9      	str	r1, [r7, #8]
 800780e:	603b      	str	r3, [r7, #0]
 8007810:	4613      	mov	r3, r2
 8007812:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800781a:	b2db      	uxtb	r3, r3
 800781c:	2b01      	cmp	r3, #1
 800781e:	d001      	beq.n	8007824 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8007820:	2302      	movs	r3, #2
 8007822:	e104      	b.n	8007a2e <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800782c:	d112      	bne.n	8007854 <HAL_SPI_Receive+0x50>
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	689b      	ldr	r3, [r3, #8]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d10e      	bne.n	8007854 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	2204      	movs	r2, #4
 800783a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800783e:	88fa      	ldrh	r2, [r7, #6]
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	9300      	str	r3, [sp, #0]
 8007844:	4613      	mov	r3, r2
 8007846:	68ba      	ldr	r2, [r7, #8]
 8007848:	68b9      	ldr	r1, [r7, #8]
 800784a:	68f8      	ldr	r0, [r7, #12]
 800784c:	f000 f8f3 	bl	8007a36 <HAL_SPI_TransmitReceive>
 8007850:	4603      	mov	r3, r0
 8007852:	e0ec      	b.n	8007a2e <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007854:	f7fb f96c 	bl	8002b30 <HAL_GetTick>
 8007858:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d002      	beq.n	8007866 <HAL_SPI_Receive+0x62>
 8007860:	88fb      	ldrh	r3, [r7, #6]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d101      	bne.n	800786a <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e0e1      	b.n	8007a2e <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007870:	2b01      	cmp	r3, #1
 8007872:	d101      	bne.n	8007878 <HAL_SPI_Receive+0x74>
 8007874:	2302      	movs	r3, #2
 8007876:	e0da      	b.n	8007a2e <HAL_SPI_Receive+0x22a>
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	2201      	movs	r2, #1
 800787c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	2204      	movs	r2, #4
 8007884:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	2200      	movs	r2, #0
 800788c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	68ba      	ldr	r2, [r7, #8]
 8007892:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	88fa      	ldrh	r2, [r7, #6]
 8007898:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	88fa      	ldrh	r2, [r7, #6]
 800789e:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2200      	movs	r2, #0
 80078aa:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	2200      	movs	r2, #0
 80078b0:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	689b      	ldr	r3, [r3, #8]
 80078c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80078c6:	d10f      	bne.n	80078e8 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	681a      	ldr	r2, [r3, #0]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80078d6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80078e6:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078f2:	2b40      	cmp	r3, #64	@ 0x40
 80078f4:	d007      	beq.n	8007906 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	681a      	ldr	r2, [r3, #0]
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007904:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	68db      	ldr	r3, [r3, #12]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d170      	bne.n	80079f0 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800790e:	e035      	b.n	800797c <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	f003 0301 	and.w	r3, r3, #1
 800791a:	2b01      	cmp	r3, #1
 800791c:	d115      	bne.n	800794a <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f103 020c 	add.w	r2, r3, #12
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800792a:	7812      	ldrb	r2, [r2, #0]
 800792c:	b2d2      	uxtb	r2, r2
 800792e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007934:	1c5a      	adds	r2, r3, #1
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800793e:	b29b      	uxth	r3, r3
 8007940:	3b01      	subs	r3, #1
 8007942:	b29a      	uxth	r2, r3
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007948:	e018      	b.n	800797c <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800794a:	f7fb f8f1 	bl	8002b30 <HAL_GetTick>
 800794e:	4602      	mov	r2, r0
 8007950:	697b      	ldr	r3, [r7, #20]
 8007952:	1ad3      	subs	r3, r2, r3
 8007954:	683a      	ldr	r2, [r7, #0]
 8007956:	429a      	cmp	r2, r3
 8007958:	d803      	bhi.n	8007962 <HAL_SPI_Receive+0x15e>
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007960:	d102      	bne.n	8007968 <HAL_SPI_Receive+0x164>
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d109      	bne.n	800797c <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	2200      	movs	r2, #0
 8007974:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8007978:	2303      	movs	r3, #3
 800797a:	e058      	b.n	8007a2e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007980:	b29b      	uxth	r3, r3
 8007982:	2b00      	cmp	r3, #0
 8007984:	d1c4      	bne.n	8007910 <HAL_SPI_Receive+0x10c>
 8007986:	e038      	b.n	80079fa <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	689b      	ldr	r3, [r3, #8]
 800798e:	f003 0301 	and.w	r3, r3, #1
 8007992:	2b01      	cmp	r3, #1
 8007994:	d113      	bne.n	80079be <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	68da      	ldr	r2, [r3, #12]
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079a0:	b292      	uxth	r2, r2
 80079a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80079a8:	1c9a      	adds	r2, r3, #2
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079b2:	b29b      	uxth	r3, r3
 80079b4:	3b01      	subs	r3, #1
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80079bc:	e018      	b.n	80079f0 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80079be:	f7fb f8b7 	bl	8002b30 <HAL_GetTick>
 80079c2:	4602      	mov	r2, r0
 80079c4:	697b      	ldr	r3, [r7, #20]
 80079c6:	1ad3      	subs	r3, r2, r3
 80079c8:	683a      	ldr	r2, [r7, #0]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d803      	bhi.n	80079d6 <HAL_SPI_Receive+0x1d2>
 80079ce:	683b      	ldr	r3, [r7, #0]
 80079d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d4:	d102      	bne.n	80079dc <HAL_SPI_Receive+0x1d8>
 80079d6:	683b      	ldr	r3, [r7, #0]
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d109      	bne.n	80079f0 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	2200      	movs	r2, #0
 80079e8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80079ec:	2303      	movs	r3, #3
 80079ee:	e01e      	b.n	8007a2e <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80079f4:	b29b      	uxth	r3, r3
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1c6      	bne.n	8007988 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80079fa:	697a      	ldr	r2, [r7, #20]
 80079fc:	6839      	ldr	r1, [r7, #0]
 80079fe:	68f8      	ldr	r0, [r7, #12]
 8007a00:	f000 fa58 	bl	8007eb4 <SPI_EndRxTransaction>
 8007a04:	4603      	mov	r3, r0
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d002      	beq.n	8007a10 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	2220      	movs	r2, #32
 8007a0e:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2201      	movs	r2, #1
 8007a14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007a18:	68fb      	ldr	r3, [r7, #12]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d001      	beq.n	8007a2c <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007a28:	2301      	movs	r3, #1
 8007a2a:	e000      	b.n	8007a2e <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
  }
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3718      	adds	r7, #24
 8007a32:	46bd      	mov	sp, r7
 8007a34:	bd80      	pop	{r7, pc}

08007a36 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007a36:	b580      	push	{r7, lr}
 8007a38:	b08a      	sub	sp, #40	@ 0x28
 8007a3a:	af00      	add	r7, sp, #0
 8007a3c:	60f8      	str	r0, [r7, #12]
 8007a3e:	60b9      	str	r1, [r7, #8]
 8007a40:	607a      	str	r2, [r7, #4]
 8007a42:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007a44:	2301      	movs	r3, #1
 8007a46:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007a48:	f7fb f872 	bl	8002b30 <HAL_GetTick>
 8007a4c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007a54:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8007a5c:	887b      	ldrh	r3, [r7, #2]
 8007a5e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007a60:	7ffb      	ldrb	r3, [r7, #31]
 8007a62:	2b01      	cmp	r3, #1
 8007a64:	d00c      	beq.n	8007a80 <HAL_SPI_TransmitReceive+0x4a>
 8007a66:	69bb      	ldr	r3, [r7, #24]
 8007a68:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007a6c:	d106      	bne.n	8007a7c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	689b      	ldr	r3, [r3, #8]
 8007a72:	2b00      	cmp	r3, #0
 8007a74:	d102      	bne.n	8007a7c <HAL_SPI_TransmitReceive+0x46>
 8007a76:	7ffb      	ldrb	r3, [r7, #31]
 8007a78:	2b04      	cmp	r3, #4
 8007a7a:	d001      	beq.n	8007a80 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 8007a7c:	2302      	movs	r3, #2
 8007a7e:	e17f      	b.n	8007d80 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d005      	beq.n	8007a92 <HAL_SPI_TransmitReceive+0x5c>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d002      	beq.n	8007a92 <HAL_SPI_TransmitReceive+0x5c>
 8007a8c:	887b      	ldrh	r3, [r7, #2]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d101      	bne.n	8007a96 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8007a92:	2301      	movs	r3, #1
 8007a94:	e174      	b.n	8007d80 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8007a9c:	2b01      	cmp	r3, #1
 8007a9e:	d101      	bne.n	8007aa4 <HAL_SPI_TransmitReceive+0x6e>
 8007aa0:	2302      	movs	r3, #2
 8007aa2:	e16d      	b.n	8007d80 <HAL_SPI_TransmitReceive+0x34a>
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007ab2:	b2db      	uxtb	r3, r3
 8007ab4:	2b04      	cmp	r3, #4
 8007ab6:	d003      	beq.n	8007ac0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	2205      	movs	r2, #5
 8007abc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007ac6:	68fb      	ldr	r3, [r7, #12]
 8007ac8:	687a      	ldr	r2, [r7, #4]
 8007aca:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	887a      	ldrh	r2, [r7, #2]
 8007ad0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	887a      	ldrh	r2, [r7, #2]
 8007ad6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	887a      	ldrh	r2, [r7, #2]
 8007ae2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	887a      	ldrh	r2, [r7, #2]
 8007ae8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	2200      	movs	r2, #0
 8007aee:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	2200      	movs	r2, #0
 8007af4:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b00:	2b40      	cmp	r3, #64	@ 0x40
 8007b02:	d007      	beq.n	8007b14 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681a      	ldr	r2, [r3, #0]
 8007b0a:	68fb      	ldr	r3, [r7, #12]
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007b12:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	68db      	ldr	r3, [r3, #12]
 8007b18:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007b1c:	d17e      	bne.n	8007c1c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d002      	beq.n	8007b2c <HAL_SPI_TransmitReceive+0xf6>
 8007b26:	8afb      	ldrh	r3, [r7, #22]
 8007b28:	2b01      	cmp	r3, #1
 8007b2a:	d16c      	bne.n	8007c06 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b30:	881a      	ldrh	r2, [r3, #0]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b3c:	1c9a      	adds	r2, r3, #2
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b46:	b29b      	uxth	r3, r3
 8007b48:	3b01      	subs	r3, #1
 8007b4a:	b29a      	uxth	r2, r3
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007b50:	e059      	b.n	8007c06 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	689b      	ldr	r3, [r3, #8]
 8007b58:	f003 0302 	and.w	r3, r3, #2
 8007b5c:	2b02      	cmp	r3, #2
 8007b5e:	d11b      	bne.n	8007b98 <HAL_SPI_TransmitReceive+0x162>
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b64:	b29b      	uxth	r3, r3
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d016      	beq.n	8007b98 <HAL_SPI_TransmitReceive+0x162>
 8007b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6c:	2b01      	cmp	r3, #1
 8007b6e:	d113      	bne.n	8007b98 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b74:	881a      	ldrh	r2, [r3, #0]
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b80:	1c9a      	adds	r2, r3, #2
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007b8a:	b29b      	uxth	r3, r3
 8007b8c:	3b01      	subs	r3, #1
 8007b8e:	b29a      	uxth	r2, r3
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007b94:	2300      	movs	r3, #0
 8007b96:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f003 0301 	and.w	r3, r3, #1
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d119      	bne.n	8007bda <HAL_SPI_TransmitReceive+0x1a4>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d014      	beq.n	8007bda <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68da      	ldr	r2, [r3, #12]
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bba:	b292      	uxth	r2, r2
 8007bbc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007bc2:	1c9a      	adds	r2, r3, #2
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007bcc:	b29b      	uxth	r3, r3
 8007bce:	3b01      	subs	r3, #1
 8007bd0:	b29a      	uxth	r2, r3
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007bda:	f7fa ffa9 	bl	8002b30 <HAL_GetTick>
 8007bde:	4602      	mov	r2, r0
 8007be0:	6a3b      	ldr	r3, [r7, #32]
 8007be2:	1ad3      	subs	r3, r2, r3
 8007be4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d80d      	bhi.n	8007c06 <HAL_SPI_TransmitReceive+0x1d0>
 8007bea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007bec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bf0:	d009      	beq.n	8007c06 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007bfa:	68fb      	ldr	r3, [r7, #12]
 8007bfc:	2200      	movs	r2, #0
 8007bfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007c02:	2303      	movs	r3, #3
 8007c04:	e0bc      	b.n	8007d80 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d1a0      	bne.n	8007b52 <HAL_SPI_TransmitReceive+0x11c>
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007c14:	b29b      	uxth	r3, r3
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d19b      	bne.n	8007b52 <HAL_SPI_TransmitReceive+0x11c>
 8007c1a:	e082      	b.n	8007d22 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d002      	beq.n	8007c2a <HAL_SPI_TransmitReceive+0x1f4>
 8007c24:	8afb      	ldrh	r3, [r7, #22]
 8007c26:	2b01      	cmp	r3, #1
 8007c28:	d171      	bne.n	8007d0e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	330c      	adds	r3, #12
 8007c34:	7812      	ldrb	r2, [r2, #0]
 8007c36:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c3c:	1c5a      	adds	r2, r3, #1
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c46:	b29b      	uxth	r3, r3
 8007c48:	3b01      	subs	r3, #1
 8007c4a:	b29a      	uxth	r2, r3
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007c50:	e05d      	b.n	8007d0e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	689b      	ldr	r3, [r3, #8]
 8007c58:	f003 0302 	and.w	r3, r3, #2
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d11c      	bne.n	8007c9a <HAL_SPI_TransmitReceive+0x264>
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d017      	beq.n	8007c9a <HAL_SPI_TransmitReceive+0x264>
 8007c6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d114      	bne.n	8007c9a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	330c      	adds	r3, #12
 8007c7a:	7812      	ldrb	r2, [r2, #0]
 8007c7c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c82:	1c5a      	adds	r2, r3, #1
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007c8c:	b29b      	uxth	r3, r3
 8007c8e:	3b01      	subs	r3, #1
 8007c90:	b29a      	uxth	r2, r3
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007c96:	2300      	movs	r3, #0
 8007c98:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	689b      	ldr	r3, [r3, #8]
 8007ca0:	f003 0301 	and.w	r3, r3, #1
 8007ca4:	2b01      	cmp	r3, #1
 8007ca6:	d119      	bne.n	8007cdc <HAL_SPI_TransmitReceive+0x2a6>
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d014      	beq.n	8007cdc <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	68da      	ldr	r2, [r3, #12]
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cbc:	b2d2      	uxtb	r2, r2
 8007cbe:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007cc4:	1c5a      	adds	r2, r3, #1
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007cce:	b29b      	uxth	r3, r3
 8007cd0:	3b01      	subs	r3, #1
 8007cd2:	b29a      	uxth	r2, r3
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007cd8:	2301      	movs	r3, #1
 8007cda:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8007cdc:	f7fa ff28 	bl	8002b30 <HAL_GetTick>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	6a3b      	ldr	r3, [r7, #32]
 8007ce4:	1ad3      	subs	r3, r2, r3
 8007ce6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d803      	bhi.n	8007cf4 <HAL_SPI_TransmitReceive+0x2be>
 8007cec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf2:	d102      	bne.n	8007cfa <HAL_SPI_TransmitReceive+0x2c4>
 8007cf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d109      	bne.n	8007d0e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	2201      	movs	r2, #1
 8007cfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007d02:	68fb      	ldr	r3, [r7, #12]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007d0a:	2303      	movs	r3, #3
 8007d0c:	e038      	b.n	8007d80 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007d12:	b29b      	uxth	r3, r3
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d19c      	bne.n	8007c52 <HAL_SPI_TransmitReceive+0x21c>
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007d1c:	b29b      	uxth	r3, r3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d197      	bne.n	8007c52 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007d22:	6a3a      	ldr	r2, [r7, #32]
 8007d24:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	f000 f92a 	bl	8007f80 <SPI_EndRxTxTransaction>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d008      	beq.n	8007d44 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	2220      	movs	r2, #32
 8007d36:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007d40:	2301      	movs	r3, #1
 8007d42:	e01d      	b.n	8007d80 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	689b      	ldr	r3, [r3, #8]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d10a      	bne.n	8007d62 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	613b      	str	r3, [r7, #16]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	68db      	ldr	r3, [r3, #12]
 8007d56:	613b      	str	r3, [r7, #16]
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	689b      	ldr	r3, [r3, #8]
 8007d5e:	613b      	str	r3, [r7, #16]
 8007d60:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	2201      	movs	r2, #1
 8007d66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d001      	beq.n	8007d7e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8007d7a:	2301      	movs	r3, #1
 8007d7c:	e000      	b.n	8007d80 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8007d7e:	2300      	movs	r3, #0
  }
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	3728      	adds	r7, #40	@ 0x28
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bd80      	pop	{r7, pc}

08007d88 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007d96:	b2db      	uxtb	r3, r3
}
 8007d98:	4618      	mov	r0, r3
 8007d9a:	370c      	adds	r7, #12
 8007d9c:	46bd      	mov	sp, r7
 8007d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da2:	4770      	bx	lr

08007da4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007da4:	b580      	push	{r7, lr}
 8007da6:	b088      	sub	sp, #32
 8007da8:	af00      	add	r7, sp, #0
 8007daa:	60f8      	str	r0, [r7, #12]
 8007dac:	60b9      	str	r1, [r7, #8]
 8007dae:	603b      	str	r3, [r7, #0]
 8007db0:	4613      	mov	r3, r2
 8007db2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007db4:	f7fa febc 	bl	8002b30 <HAL_GetTick>
 8007db8:	4602      	mov	r2, r0
 8007dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007dbc:	1a9b      	subs	r3, r3, r2
 8007dbe:	683a      	ldr	r2, [r7, #0]
 8007dc0:	4413      	add	r3, r2
 8007dc2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007dc4:	f7fa feb4 	bl	8002b30 <HAL_GetTick>
 8007dc8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007dca:	4b39      	ldr	r3, [pc, #228]	@ (8007eb0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	015b      	lsls	r3, r3, #5
 8007dd0:	0d1b      	lsrs	r3, r3, #20
 8007dd2:	69fa      	ldr	r2, [r7, #28]
 8007dd4:	fb02 f303 	mul.w	r3, r2, r3
 8007dd8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007dda:	e054      	b.n	8007e86 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007ddc:	683b      	ldr	r3, [r7, #0]
 8007dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007de2:	d050      	beq.n	8007e86 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007de4:	f7fa fea4 	bl	8002b30 <HAL_GetTick>
 8007de8:	4602      	mov	r2, r0
 8007dea:	69bb      	ldr	r3, [r7, #24]
 8007dec:	1ad3      	subs	r3, r2, r3
 8007dee:	69fa      	ldr	r2, [r7, #28]
 8007df0:	429a      	cmp	r2, r3
 8007df2:	d902      	bls.n	8007dfa <SPI_WaitFlagStateUntilTimeout+0x56>
 8007df4:	69fb      	ldr	r3, [r7, #28]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d13d      	bne.n	8007e76 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	685a      	ldr	r2, [r3, #4]
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007e08:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	685b      	ldr	r3, [r3, #4]
 8007e0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e12:	d111      	bne.n	8007e38 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e1c:	d004      	beq.n	8007e28 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	689b      	ldr	r3, [r3, #8]
 8007e22:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007e26:	d107      	bne.n	8007e38 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	681b      	ldr	r3, [r3, #0]
 8007e32:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e3c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007e40:	d10f      	bne.n	8007e62 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007e42:	68fb      	ldr	r3, [r7, #12]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	681a      	ldr	r2, [r3, #0]
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007e50:	601a      	str	r2, [r3, #0]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	681a      	ldr	r2, [r3, #0]
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007e60:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	2201      	movs	r2, #1
 8007e66:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2200      	movs	r2, #0
 8007e6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007e72:	2303      	movs	r3, #3
 8007e74:	e017      	b.n	8007ea6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	d101      	bne.n	8007e80 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007e7c:	2300      	movs	r3, #0
 8007e7e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8007e80:	697b      	ldr	r3, [r7, #20]
 8007e82:	3b01      	subs	r3, #1
 8007e84:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	689a      	ldr	r2, [r3, #8]
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	4013      	ands	r3, r2
 8007e90:	68ba      	ldr	r2, [r7, #8]
 8007e92:	429a      	cmp	r2, r3
 8007e94:	bf0c      	ite	eq
 8007e96:	2301      	moveq	r3, #1
 8007e98:	2300      	movne	r3, #0
 8007e9a:	b2db      	uxtb	r3, r3
 8007e9c:	461a      	mov	r2, r3
 8007e9e:	79fb      	ldrb	r3, [r7, #7]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d19b      	bne.n	8007ddc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007ea4:	2300      	movs	r3, #0
}
 8007ea6:	4618      	mov	r0, r3
 8007ea8:	3720      	adds	r7, #32
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	bd80      	pop	{r7, pc}
 8007eae:	bf00      	nop
 8007eb0:	20000000 	.word	0x20000000

08007eb4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b086      	sub	sp, #24
 8007eb8:	af02      	add	r7, sp, #8
 8007eba:	60f8      	str	r0, [r7, #12]
 8007ebc:	60b9      	str	r1, [r7, #8]
 8007ebe:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ec8:	d111      	bne.n	8007eee <SPI_EndRxTransaction+0x3a>
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	689b      	ldr	r3, [r3, #8]
 8007ece:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007ed2:	d004      	beq.n	8007ede <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	689b      	ldr	r3, [r3, #8]
 8007ed8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007edc:	d107      	bne.n	8007eee <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007ede:	68fb      	ldr	r3, [r7, #12]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	681a      	ldr	r2, [r3, #0]
 8007ee4:	68fb      	ldr	r3, [r7, #12]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007eec:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007ef6:	d12a      	bne.n	8007f4e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	689b      	ldr	r3, [r3, #8]
 8007efc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007f00:	d012      	beq.n	8007f28 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	68bb      	ldr	r3, [r7, #8]
 8007f08:	2200      	movs	r2, #0
 8007f0a:	2180      	movs	r1, #128	@ 0x80
 8007f0c:	68f8      	ldr	r0, [r7, #12]
 8007f0e:	f7ff ff49 	bl	8007da4 <SPI_WaitFlagStateUntilTimeout>
 8007f12:	4603      	mov	r3, r0
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d02d      	beq.n	8007f74 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f1c:	f043 0220 	orr.w	r2, r3, #32
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007f24:	2303      	movs	r3, #3
 8007f26:	e026      	b.n	8007f76 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	9300      	str	r3, [sp, #0]
 8007f2c:	68bb      	ldr	r3, [r7, #8]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	2101      	movs	r1, #1
 8007f32:	68f8      	ldr	r0, [r7, #12]
 8007f34:	f7ff ff36 	bl	8007da4 <SPI_WaitFlagStateUntilTimeout>
 8007f38:	4603      	mov	r3, r0
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d01a      	beq.n	8007f74 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f3e:	68fb      	ldr	r3, [r7, #12]
 8007f40:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f42:	f043 0220 	orr.w	r2, r3, #32
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007f4a:	2303      	movs	r3, #3
 8007f4c:	e013      	b.n	8007f76 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	9300      	str	r3, [sp, #0]
 8007f52:	68bb      	ldr	r3, [r7, #8]
 8007f54:	2200      	movs	r2, #0
 8007f56:	2101      	movs	r1, #1
 8007f58:	68f8      	ldr	r0, [r7, #12]
 8007f5a:	f7ff ff23 	bl	8007da4 <SPI_WaitFlagStateUntilTimeout>
 8007f5e:	4603      	mov	r3, r0
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d007      	beq.n	8007f74 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007f68:	f043 0220 	orr.w	r2, r3, #32
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007f70:	2303      	movs	r3, #3
 8007f72:	e000      	b.n	8007f76 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007f74:	2300      	movs	r3, #0
}
 8007f76:	4618      	mov	r0, r3
 8007f78:	3710      	adds	r7, #16
 8007f7a:	46bd      	mov	sp, r7
 8007f7c:	bd80      	pop	{r7, pc}
	...

08007f80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b088      	sub	sp, #32
 8007f84:	af02      	add	r7, sp, #8
 8007f86:	60f8      	str	r0, [r7, #12]
 8007f88:	60b9      	str	r1, [r7, #8]
 8007f8a:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	9300      	str	r3, [sp, #0]
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	2201      	movs	r2, #1
 8007f94:	2102      	movs	r1, #2
 8007f96:	68f8      	ldr	r0, [r7, #12]
 8007f98:	f7ff ff04 	bl	8007da4 <SPI_WaitFlagStateUntilTimeout>
 8007f9c:	4603      	mov	r3, r0
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d007      	beq.n	8007fb2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fa6:	f043 0220 	orr.w	r2, r3, #32
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8007fae:	2303      	movs	r3, #3
 8007fb0:	e032      	b.n	8008018 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007fb2:	4b1b      	ldr	r3, [pc, #108]	@ (8008020 <SPI_EndRxTxTransaction+0xa0>)
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	4a1b      	ldr	r2, [pc, #108]	@ (8008024 <SPI_EndRxTxTransaction+0xa4>)
 8007fb8:	fba2 2303 	umull	r2, r3, r2, r3
 8007fbc:	0d5b      	lsrs	r3, r3, #21
 8007fbe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8007fc2:	fb02 f303 	mul.w	r3, r2, r3
 8007fc6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	685b      	ldr	r3, [r3, #4]
 8007fcc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007fd0:	d112      	bne.n	8007ff8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	9300      	str	r3, [sp, #0]
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	2200      	movs	r2, #0
 8007fda:	2180      	movs	r1, #128	@ 0x80
 8007fdc:	68f8      	ldr	r0, [r7, #12]
 8007fde:	f7ff fee1 	bl	8007da4 <SPI_WaitFlagStateUntilTimeout>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	d016      	beq.n	8008016 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007fec:	f043 0220 	orr.w	r2, r3, #32
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007ff4:	2303      	movs	r3, #3
 8007ff6:	e00f      	b.n	8008018 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007ff8:	697b      	ldr	r3, [r7, #20]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d00a      	beq.n	8008014 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	3b01      	subs	r3, #1
 8008002:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	689b      	ldr	r3, [r3, #8]
 800800a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800800e:	2b80      	cmp	r3, #128	@ 0x80
 8008010:	d0f2      	beq.n	8007ff8 <SPI_EndRxTxTransaction+0x78>
 8008012:	e000      	b.n	8008016 <SPI_EndRxTxTransaction+0x96>
        break;
 8008014:	bf00      	nop
  }

  return HAL_OK;
 8008016:	2300      	movs	r3, #0
}
 8008018:	4618      	mov	r0, r3
 800801a:	3718      	adds	r7, #24
 800801c:	46bd      	mov	sp, r7
 800801e:	bd80      	pop	{r7, pc}
 8008020:	20000000 	.word	0x20000000
 8008024:	165e9f81 	.word	0x165e9f81

08008028 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d101      	bne.n	800803a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008036:	2301      	movs	r3, #1
 8008038:	e041      	b.n	80080be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008040:	b2db      	uxtb	r3, r3
 8008042:	2b00      	cmp	r3, #0
 8008044:	d106      	bne.n	8008054 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	2200      	movs	r2, #0
 800804a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800804e:	6878      	ldr	r0, [r7, #4]
 8008050:	f7f9 f916 	bl	8001280 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2202      	movs	r2, #2
 8008058:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681a      	ldr	r2, [r3, #0]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	3304      	adds	r3, #4
 8008064:	4619      	mov	r1, r3
 8008066:	4610      	mov	r0, r2
 8008068:	f000 fa7e 	bl	8008568 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	2201      	movs	r2, #1
 8008090:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2201      	movs	r2, #1
 80080b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80080bc:	2300      	movs	r3, #0
}
 80080be:	4618      	mov	r0, r3
 80080c0:	3708      	adds	r7, #8
 80080c2:	46bd      	mov	sp, r7
 80080c4:	bd80      	pop	{r7, pc}
	...

080080c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80080d6:	b2db      	uxtb	r3, r3
 80080d8:	2b01      	cmp	r3, #1
 80080da:	d001      	beq.n	80080e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80080dc:	2301      	movs	r3, #1
 80080de:	e04e      	b.n	800817e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2202      	movs	r2, #2
 80080e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	68da      	ldr	r2, [r3, #12]
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f042 0201 	orr.w	r2, r2, #1
 80080f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	4a23      	ldr	r2, [pc, #140]	@ (800818c <HAL_TIM_Base_Start_IT+0xc4>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d022      	beq.n	8008148 <HAL_TIM_Base_Start_IT+0x80>
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800810a:	d01d      	beq.n	8008148 <HAL_TIM_Base_Start_IT+0x80>
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a1f      	ldr	r2, [pc, #124]	@ (8008190 <HAL_TIM_Base_Start_IT+0xc8>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d018      	beq.n	8008148 <HAL_TIM_Base_Start_IT+0x80>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	4a1e      	ldr	r2, [pc, #120]	@ (8008194 <HAL_TIM_Base_Start_IT+0xcc>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d013      	beq.n	8008148 <HAL_TIM_Base_Start_IT+0x80>
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a1c      	ldr	r2, [pc, #112]	@ (8008198 <HAL_TIM_Base_Start_IT+0xd0>)
 8008126:	4293      	cmp	r3, r2
 8008128:	d00e      	beq.n	8008148 <HAL_TIM_Base_Start_IT+0x80>
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	4a1b      	ldr	r2, [pc, #108]	@ (800819c <HAL_TIM_Base_Start_IT+0xd4>)
 8008130:	4293      	cmp	r3, r2
 8008132:	d009      	beq.n	8008148 <HAL_TIM_Base_Start_IT+0x80>
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4a19      	ldr	r2, [pc, #100]	@ (80081a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d004      	beq.n	8008148 <HAL_TIM_Base_Start_IT+0x80>
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	4a18      	ldr	r2, [pc, #96]	@ (80081a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d111      	bne.n	800816c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	689b      	ldr	r3, [r3, #8]
 800814e:	f003 0307 	and.w	r3, r3, #7
 8008152:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2b06      	cmp	r3, #6
 8008158:	d010      	beq.n	800817c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	681a      	ldr	r2, [r3, #0]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	f042 0201 	orr.w	r2, r2, #1
 8008168:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800816a:	e007      	b.n	800817c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f042 0201 	orr.w	r2, r2, #1
 800817a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800817c:	2300      	movs	r3, #0
}
 800817e:	4618      	mov	r0, r3
 8008180:	3714      	adds	r7, #20
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr
 800818a:	bf00      	nop
 800818c:	40010000 	.word	0x40010000
 8008190:	40000400 	.word	0x40000400
 8008194:	40000800 	.word	0x40000800
 8008198:	40000c00 	.word	0x40000c00
 800819c:	40010400 	.word	0x40010400
 80081a0:	40014000 	.word	0x40014000
 80081a4:	40001800 	.word	0x40001800

080081a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	68db      	ldr	r3, [r3, #12]
 80081b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	691b      	ldr	r3, [r3, #16]
 80081be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80081c0:	68bb      	ldr	r3, [r7, #8]
 80081c2:	f003 0302 	and.w	r3, r3, #2
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d020      	beq.n	800820c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f003 0302 	and.w	r3, r3, #2
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d01b      	beq.n	800820c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f06f 0202 	mvn.w	r2, #2
 80081dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2201      	movs	r2, #1
 80081e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	699b      	ldr	r3, [r3, #24]
 80081ea:	f003 0303 	and.w	r3, r3, #3
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d003      	beq.n	80081fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80081f2:	6878      	ldr	r0, [r7, #4]
 80081f4:	f000 f999 	bl	800852a <HAL_TIM_IC_CaptureCallback>
 80081f8:	e005      	b.n	8008206 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80081fa:	6878      	ldr	r0, [r7, #4]
 80081fc:	f000 f98b 	bl	8008516 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008200:	6878      	ldr	r0, [r7, #4]
 8008202:	f000 f99c 	bl	800853e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	2200      	movs	r2, #0
 800820a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800820c:	68bb      	ldr	r3, [r7, #8]
 800820e:	f003 0304 	and.w	r3, r3, #4
 8008212:	2b00      	cmp	r3, #0
 8008214:	d020      	beq.n	8008258 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f003 0304 	and.w	r3, r3, #4
 800821c:	2b00      	cmp	r3, #0
 800821e:	d01b      	beq.n	8008258 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	f06f 0204 	mvn.w	r2, #4
 8008228:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2202      	movs	r2, #2
 800822e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	699b      	ldr	r3, [r3, #24]
 8008236:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800823a:	2b00      	cmp	r3, #0
 800823c:	d003      	beq.n	8008246 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f000 f973 	bl	800852a <HAL_TIM_IC_CaptureCallback>
 8008244:	e005      	b.n	8008252 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008246:	6878      	ldr	r0, [r7, #4]
 8008248:	f000 f965 	bl	8008516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800824c:	6878      	ldr	r0, [r7, #4]
 800824e:	f000 f976 	bl	800853e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2200      	movs	r2, #0
 8008256:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	f003 0308 	and.w	r3, r3, #8
 800825e:	2b00      	cmp	r3, #0
 8008260:	d020      	beq.n	80082a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	f003 0308 	and.w	r3, r3, #8
 8008268:	2b00      	cmp	r3, #0
 800826a:	d01b      	beq.n	80082a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f06f 0208 	mvn.w	r2, #8
 8008274:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2204      	movs	r2, #4
 800827a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	69db      	ldr	r3, [r3, #28]
 8008282:	f003 0303 	and.w	r3, r3, #3
 8008286:	2b00      	cmp	r3, #0
 8008288:	d003      	beq.n	8008292 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800828a:	6878      	ldr	r0, [r7, #4]
 800828c:	f000 f94d 	bl	800852a <HAL_TIM_IC_CaptureCallback>
 8008290:	e005      	b.n	800829e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008292:	6878      	ldr	r0, [r7, #4]
 8008294:	f000 f93f 	bl	8008516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008298:	6878      	ldr	r0, [r7, #4]
 800829a:	f000 f950 	bl	800853e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	2200      	movs	r2, #0
 80082a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80082a4:	68bb      	ldr	r3, [r7, #8]
 80082a6:	f003 0310 	and.w	r3, r3, #16
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d020      	beq.n	80082f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	f003 0310 	and.w	r3, r3, #16
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d01b      	beq.n	80082f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f06f 0210 	mvn.w	r2, #16
 80082c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2208      	movs	r2, #8
 80082c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	69db      	ldr	r3, [r3, #28]
 80082ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d003      	beq.n	80082de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80082d6:	6878      	ldr	r0, [r7, #4]
 80082d8:	f000 f927 	bl	800852a <HAL_TIM_IC_CaptureCallback>
 80082dc:	e005      	b.n	80082ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f000 f919 	bl	8008516 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082e4:	6878      	ldr	r0, [r7, #4]
 80082e6:	f000 f92a 	bl	800853e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2200      	movs	r2, #0
 80082ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	f003 0301 	and.w	r3, r3, #1
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d00c      	beq.n	8008314 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	f003 0301 	and.w	r3, r3, #1
 8008300:	2b00      	cmp	r3, #0
 8008302:	d007      	beq.n	8008314 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	f06f 0201 	mvn.w	r2, #1
 800830c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f7f8 fd2c 	bl	8000d6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800831a:	2b00      	cmp	r3, #0
 800831c:	d00c      	beq.n	8008338 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008324:	2b00      	cmp	r3, #0
 8008326:	d007      	beq.n	8008338 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008330:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008332:	6878      	ldr	r0, [r7, #4]
 8008334:	f000 fae4 	bl	8008900 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008338:	68bb      	ldr	r3, [r7, #8]
 800833a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00c      	beq.n	800835c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008348:	2b00      	cmp	r3, #0
 800834a:	d007      	beq.n	800835c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008354:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008356:	6878      	ldr	r0, [r7, #4]
 8008358:	f000 f8fb 	bl	8008552 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	f003 0320 	and.w	r3, r3, #32
 8008362:	2b00      	cmp	r3, #0
 8008364:	d00c      	beq.n	8008380 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	f003 0320 	and.w	r3, r3, #32
 800836c:	2b00      	cmp	r3, #0
 800836e:	d007      	beq.n	8008380 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f06f 0220 	mvn.w	r2, #32
 8008378:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 fab6 	bl	80088ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008380:	bf00      	nop
 8008382:	3710      	adds	r7, #16
 8008384:	46bd      	mov	sp, r7
 8008386:	bd80      	pop	{r7, pc}

08008388 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008388:	b580      	push	{r7, lr}
 800838a:	b084      	sub	sp, #16
 800838c:	af00      	add	r7, sp, #0
 800838e:	6078      	str	r0, [r7, #4]
 8008390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008392:	2300      	movs	r3, #0
 8008394:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800839c:	2b01      	cmp	r3, #1
 800839e:	d101      	bne.n	80083a4 <HAL_TIM_ConfigClockSource+0x1c>
 80083a0:	2302      	movs	r3, #2
 80083a2:	e0b4      	b.n	800850e <HAL_TIM_ConfigClockSource+0x186>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2201      	movs	r2, #1
 80083a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	2202      	movs	r2, #2
 80083b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80083c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80083ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	68ba      	ldr	r2, [r7, #8]
 80083d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80083d4:	683b      	ldr	r3, [r7, #0]
 80083d6:	681b      	ldr	r3, [r3, #0]
 80083d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083dc:	d03e      	beq.n	800845c <HAL_TIM_ConfigClockSource+0xd4>
 80083de:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083e2:	f200 8087 	bhi.w	80084f4 <HAL_TIM_ConfigClockSource+0x16c>
 80083e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083ea:	f000 8086 	beq.w	80084fa <HAL_TIM_ConfigClockSource+0x172>
 80083ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083f2:	d87f      	bhi.n	80084f4 <HAL_TIM_ConfigClockSource+0x16c>
 80083f4:	2b70      	cmp	r3, #112	@ 0x70
 80083f6:	d01a      	beq.n	800842e <HAL_TIM_ConfigClockSource+0xa6>
 80083f8:	2b70      	cmp	r3, #112	@ 0x70
 80083fa:	d87b      	bhi.n	80084f4 <HAL_TIM_ConfigClockSource+0x16c>
 80083fc:	2b60      	cmp	r3, #96	@ 0x60
 80083fe:	d050      	beq.n	80084a2 <HAL_TIM_ConfigClockSource+0x11a>
 8008400:	2b60      	cmp	r3, #96	@ 0x60
 8008402:	d877      	bhi.n	80084f4 <HAL_TIM_ConfigClockSource+0x16c>
 8008404:	2b50      	cmp	r3, #80	@ 0x50
 8008406:	d03c      	beq.n	8008482 <HAL_TIM_ConfigClockSource+0xfa>
 8008408:	2b50      	cmp	r3, #80	@ 0x50
 800840a:	d873      	bhi.n	80084f4 <HAL_TIM_ConfigClockSource+0x16c>
 800840c:	2b40      	cmp	r3, #64	@ 0x40
 800840e:	d058      	beq.n	80084c2 <HAL_TIM_ConfigClockSource+0x13a>
 8008410:	2b40      	cmp	r3, #64	@ 0x40
 8008412:	d86f      	bhi.n	80084f4 <HAL_TIM_ConfigClockSource+0x16c>
 8008414:	2b30      	cmp	r3, #48	@ 0x30
 8008416:	d064      	beq.n	80084e2 <HAL_TIM_ConfigClockSource+0x15a>
 8008418:	2b30      	cmp	r3, #48	@ 0x30
 800841a:	d86b      	bhi.n	80084f4 <HAL_TIM_ConfigClockSource+0x16c>
 800841c:	2b20      	cmp	r3, #32
 800841e:	d060      	beq.n	80084e2 <HAL_TIM_ConfigClockSource+0x15a>
 8008420:	2b20      	cmp	r3, #32
 8008422:	d867      	bhi.n	80084f4 <HAL_TIM_ConfigClockSource+0x16c>
 8008424:	2b00      	cmp	r3, #0
 8008426:	d05c      	beq.n	80084e2 <HAL_TIM_ConfigClockSource+0x15a>
 8008428:	2b10      	cmp	r3, #16
 800842a:	d05a      	beq.n	80084e2 <HAL_TIM_ConfigClockSource+0x15a>
 800842c:	e062      	b.n	80084f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008436:	683b      	ldr	r3, [r7, #0]
 8008438:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800843a:	683b      	ldr	r3, [r7, #0]
 800843c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800843e:	f000 f9b9 	bl	80087b4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	689b      	ldr	r3, [r3, #8]
 8008448:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800844a:	68bb      	ldr	r3, [r7, #8]
 800844c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008450:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	68ba      	ldr	r2, [r7, #8]
 8008458:	609a      	str	r2, [r3, #8]
      break;
 800845a:	e04f      	b.n	80084fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008460:	683b      	ldr	r3, [r7, #0]
 8008462:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008464:	683b      	ldr	r3, [r7, #0]
 8008466:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800846c:	f000 f9a2 	bl	80087b4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	689a      	ldr	r2, [r3, #8]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800847e:	609a      	str	r2, [r3, #8]
      break;
 8008480:	e03c      	b.n	80084fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008486:	683b      	ldr	r3, [r7, #0]
 8008488:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800848a:	683b      	ldr	r3, [r7, #0]
 800848c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800848e:	461a      	mov	r2, r3
 8008490:	f000 f916 	bl	80086c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	2150      	movs	r1, #80	@ 0x50
 800849a:	4618      	mov	r0, r3
 800849c:	f000 f96f 	bl	800877e <TIM_ITRx_SetConfig>
      break;
 80084a0:	e02c      	b.n	80084fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084aa:	683b      	ldr	r3, [r7, #0]
 80084ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80084ae:	461a      	mov	r2, r3
 80084b0:	f000 f935 	bl	800871e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	2160      	movs	r1, #96	@ 0x60
 80084ba:	4618      	mov	r0, r3
 80084bc:	f000 f95f 	bl	800877e <TIM_ITRx_SetConfig>
      break;
 80084c0:	e01c      	b.n	80084fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80084ce:	461a      	mov	r2, r3
 80084d0:	f000 f8f6 	bl	80086c0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2140      	movs	r1, #64	@ 0x40
 80084da:	4618      	mov	r0, r3
 80084dc:	f000 f94f 	bl	800877e <TIM_ITRx_SetConfig>
      break;
 80084e0:	e00c      	b.n	80084fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681a      	ldr	r2, [r3, #0]
 80084e6:	683b      	ldr	r3, [r7, #0]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4619      	mov	r1, r3
 80084ec:	4610      	mov	r0, r2
 80084ee:	f000 f946 	bl	800877e <TIM_ITRx_SetConfig>
      break;
 80084f2:	e003      	b.n	80084fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80084f4:	2301      	movs	r3, #1
 80084f6:	73fb      	strb	r3, [r7, #15]
      break;
 80084f8:	e000      	b.n	80084fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80084fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2201      	movs	r2, #1
 8008500:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	2200      	movs	r2, #0
 8008508:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800850c:	7bfb      	ldrb	r3, [r7, #15]
}
 800850e:	4618      	mov	r0, r3
 8008510:	3710      	adds	r7, #16
 8008512:	46bd      	mov	sp, r7
 8008514:	bd80      	pop	{r7, pc}

08008516 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008516:	b480      	push	{r7}
 8008518:	b083      	sub	sp, #12
 800851a:	af00      	add	r7, sp, #0
 800851c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800851e:	bf00      	nop
 8008520:	370c      	adds	r7, #12
 8008522:	46bd      	mov	sp, r7
 8008524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008528:	4770      	bx	lr

0800852a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800852a:	b480      	push	{r7}
 800852c:	b083      	sub	sp, #12
 800852e:	af00      	add	r7, sp, #0
 8008530:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008532:	bf00      	nop
 8008534:	370c      	adds	r7, #12
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800853e:	b480      	push	{r7}
 8008540:	b083      	sub	sp, #12
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008546:	bf00      	nop
 8008548:	370c      	adds	r7, #12
 800854a:	46bd      	mov	sp, r7
 800854c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008550:	4770      	bx	lr

08008552 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008552:	b480      	push	{r7}
 8008554:	b083      	sub	sp, #12
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800855a:	bf00      	nop
 800855c:	370c      	adds	r7, #12
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr
	...

08008568 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008568:	b480      	push	{r7}
 800856a:	b085      	sub	sp, #20
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	4a46      	ldr	r2, [pc, #280]	@ (8008694 <TIM_Base_SetConfig+0x12c>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d013      	beq.n	80085a8 <TIM_Base_SetConfig+0x40>
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008586:	d00f      	beq.n	80085a8 <TIM_Base_SetConfig+0x40>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	4a43      	ldr	r2, [pc, #268]	@ (8008698 <TIM_Base_SetConfig+0x130>)
 800858c:	4293      	cmp	r3, r2
 800858e:	d00b      	beq.n	80085a8 <TIM_Base_SetConfig+0x40>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	4a42      	ldr	r2, [pc, #264]	@ (800869c <TIM_Base_SetConfig+0x134>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d007      	beq.n	80085a8 <TIM_Base_SetConfig+0x40>
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	4a41      	ldr	r2, [pc, #260]	@ (80086a0 <TIM_Base_SetConfig+0x138>)
 800859c:	4293      	cmp	r3, r2
 800859e:	d003      	beq.n	80085a8 <TIM_Base_SetConfig+0x40>
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	4a40      	ldr	r2, [pc, #256]	@ (80086a4 <TIM_Base_SetConfig+0x13c>)
 80085a4:	4293      	cmp	r3, r2
 80085a6:	d108      	bne.n	80085ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80085ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80085b0:	683b      	ldr	r3, [r7, #0]
 80085b2:	685b      	ldr	r3, [r3, #4]
 80085b4:	68fa      	ldr	r2, [r7, #12]
 80085b6:	4313      	orrs	r3, r2
 80085b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	4a35      	ldr	r2, [pc, #212]	@ (8008694 <TIM_Base_SetConfig+0x12c>)
 80085be:	4293      	cmp	r3, r2
 80085c0:	d02b      	beq.n	800861a <TIM_Base_SetConfig+0xb2>
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80085c8:	d027      	beq.n	800861a <TIM_Base_SetConfig+0xb2>
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	4a32      	ldr	r2, [pc, #200]	@ (8008698 <TIM_Base_SetConfig+0x130>)
 80085ce:	4293      	cmp	r3, r2
 80085d0:	d023      	beq.n	800861a <TIM_Base_SetConfig+0xb2>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	4a31      	ldr	r2, [pc, #196]	@ (800869c <TIM_Base_SetConfig+0x134>)
 80085d6:	4293      	cmp	r3, r2
 80085d8:	d01f      	beq.n	800861a <TIM_Base_SetConfig+0xb2>
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	4a30      	ldr	r2, [pc, #192]	@ (80086a0 <TIM_Base_SetConfig+0x138>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d01b      	beq.n	800861a <TIM_Base_SetConfig+0xb2>
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	4a2f      	ldr	r2, [pc, #188]	@ (80086a4 <TIM_Base_SetConfig+0x13c>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d017      	beq.n	800861a <TIM_Base_SetConfig+0xb2>
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	4a2e      	ldr	r2, [pc, #184]	@ (80086a8 <TIM_Base_SetConfig+0x140>)
 80085ee:	4293      	cmp	r3, r2
 80085f0:	d013      	beq.n	800861a <TIM_Base_SetConfig+0xb2>
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	4a2d      	ldr	r2, [pc, #180]	@ (80086ac <TIM_Base_SetConfig+0x144>)
 80085f6:	4293      	cmp	r3, r2
 80085f8:	d00f      	beq.n	800861a <TIM_Base_SetConfig+0xb2>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	4a2c      	ldr	r2, [pc, #176]	@ (80086b0 <TIM_Base_SetConfig+0x148>)
 80085fe:	4293      	cmp	r3, r2
 8008600:	d00b      	beq.n	800861a <TIM_Base_SetConfig+0xb2>
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	4a2b      	ldr	r2, [pc, #172]	@ (80086b4 <TIM_Base_SetConfig+0x14c>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d007      	beq.n	800861a <TIM_Base_SetConfig+0xb2>
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	4a2a      	ldr	r2, [pc, #168]	@ (80086b8 <TIM_Base_SetConfig+0x150>)
 800860e:	4293      	cmp	r3, r2
 8008610:	d003      	beq.n	800861a <TIM_Base_SetConfig+0xb2>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	4a29      	ldr	r2, [pc, #164]	@ (80086bc <TIM_Base_SetConfig+0x154>)
 8008616:	4293      	cmp	r3, r2
 8008618:	d108      	bne.n	800862c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008620:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	4313      	orrs	r3, r2
 800862a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	695b      	ldr	r3, [r3, #20]
 8008636:	4313      	orrs	r3, r2
 8008638:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	68fa      	ldr	r2, [r7, #12]
 800863e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008640:	683b      	ldr	r3, [r7, #0]
 8008642:	689a      	ldr	r2, [r3, #8]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008648:	683b      	ldr	r3, [r7, #0]
 800864a:	681a      	ldr	r2, [r3, #0]
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a10      	ldr	r2, [pc, #64]	@ (8008694 <TIM_Base_SetConfig+0x12c>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d003      	beq.n	8008660 <TIM_Base_SetConfig+0xf8>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a12      	ldr	r2, [pc, #72]	@ (80086a4 <TIM_Base_SetConfig+0x13c>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d103      	bne.n	8008668 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	691a      	ldr	r2, [r3, #16]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	2201      	movs	r2, #1
 800866c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	691b      	ldr	r3, [r3, #16]
 8008672:	f003 0301 	and.w	r3, r3, #1
 8008676:	2b01      	cmp	r3, #1
 8008678:	d105      	bne.n	8008686 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	691b      	ldr	r3, [r3, #16]
 800867e:	f023 0201 	bic.w	r2, r3, #1
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	611a      	str	r2, [r3, #16]
  }
}
 8008686:	bf00      	nop
 8008688:	3714      	adds	r7, #20
 800868a:	46bd      	mov	sp, r7
 800868c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008690:	4770      	bx	lr
 8008692:	bf00      	nop
 8008694:	40010000 	.word	0x40010000
 8008698:	40000400 	.word	0x40000400
 800869c:	40000800 	.word	0x40000800
 80086a0:	40000c00 	.word	0x40000c00
 80086a4:	40010400 	.word	0x40010400
 80086a8:	40014000 	.word	0x40014000
 80086ac:	40014400 	.word	0x40014400
 80086b0:	40014800 	.word	0x40014800
 80086b4:	40001800 	.word	0x40001800
 80086b8:	40001c00 	.word	0x40001c00
 80086bc:	40002000 	.word	0x40002000

080086c0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b087      	sub	sp, #28
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	6a1b      	ldr	r3, [r3, #32]
 80086d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80086d2:	68fb      	ldr	r3, [r7, #12]
 80086d4:	6a1b      	ldr	r3, [r3, #32]
 80086d6:	f023 0201 	bic.w	r2, r3, #1
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086de:	68fb      	ldr	r3, [r7, #12]
 80086e0:	699b      	ldr	r3, [r3, #24]
 80086e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80086ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	011b      	lsls	r3, r3, #4
 80086f0:	693a      	ldr	r2, [r7, #16]
 80086f2:	4313      	orrs	r3, r2
 80086f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086f6:	697b      	ldr	r3, [r7, #20]
 80086f8:	f023 030a 	bic.w	r3, r3, #10
 80086fc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80086fe:	697a      	ldr	r2, [r7, #20]
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	4313      	orrs	r3, r2
 8008704:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	693a      	ldr	r2, [r7, #16]
 800870a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	697a      	ldr	r2, [r7, #20]
 8008710:	621a      	str	r2, [r3, #32]
}
 8008712:	bf00      	nop
 8008714:	371c      	adds	r7, #28
 8008716:	46bd      	mov	sp, r7
 8008718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871c:	4770      	bx	lr

0800871e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800871e:	b480      	push	{r7}
 8008720:	b087      	sub	sp, #28
 8008722:	af00      	add	r7, sp, #0
 8008724:	60f8      	str	r0, [r7, #12]
 8008726:	60b9      	str	r1, [r7, #8]
 8008728:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6a1b      	ldr	r3, [r3, #32]
 800872e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	6a1b      	ldr	r3, [r3, #32]
 8008734:	f023 0210 	bic.w	r2, r3, #16
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	699b      	ldr	r3, [r3, #24]
 8008740:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008742:	693b      	ldr	r3, [r7, #16]
 8008744:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008748:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	031b      	lsls	r3, r3, #12
 800874e:	693a      	ldr	r2, [r7, #16]
 8008750:	4313      	orrs	r3, r2
 8008752:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008754:	697b      	ldr	r3, [r7, #20]
 8008756:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800875a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800875c:	68bb      	ldr	r3, [r7, #8]
 800875e:	011b      	lsls	r3, r3, #4
 8008760:	697a      	ldr	r2, [r7, #20]
 8008762:	4313      	orrs	r3, r2
 8008764:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	693a      	ldr	r2, [r7, #16]
 800876a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	697a      	ldr	r2, [r7, #20]
 8008770:	621a      	str	r2, [r3, #32]
}
 8008772:	bf00      	nop
 8008774:	371c      	adds	r7, #28
 8008776:	46bd      	mov	sp, r7
 8008778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877c:	4770      	bx	lr

0800877e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800877e:	b480      	push	{r7}
 8008780:	b085      	sub	sp, #20
 8008782:	af00      	add	r7, sp, #0
 8008784:	6078      	str	r0, [r7, #4]
 8008786:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	689b      	ldr	r3, [r3, #8]
 800878c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008794:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008796:	683a      	ldr	r2, [r7, #0]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	4313      	orrs	r3, r2
 800879c:	f043 0307 	orr.w	r3, r3, #7
 80087a0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	68fa      	ldr	r2, [r7, #12]
 80087a6:	609a      	str	r2, [r3, #8]
}
 80087a8:	bf00      	nop
 80087aa:	3714      	adds	r7, #20
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b087      	sub	sp, #28
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	60f8      	str	r0, [r7, #12]
 80087bc:	60b9      	str	r1, [r7, #8]
 80087be:	607a      	str	r2, [r7, #4]
 80087c0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	689b      	ldr	r3, [r3, #8]
 80087c6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80087ce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	021a      	lsls	r2, r3, #8
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	431a      	orrs	r2, r3
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	4313      	orrs	r3, r2
 80087dc:	697a      	ldr	r2, [r7, #20]
 80087de:	4313      	orrs	r3, r2
 80087e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	697a      	ldr	r2, [r7, #20]
 80087e6:	609a      	str	r2, [r3, #8]
}
 80087e8:	bf00      	nop
 80087ea:	371c      	adds	r7, #28
 80087ec:	46bd      	mov	sp, r7
 80087ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f2:	4770      	bx	lr

080087f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80087f4:	b480      	push	{r7}
 80087f6:	b085      	sub	sp, #20
 80087f8:	af00      	add	r7, sp, #0
 80087fa:	6078      	str	r0, [r7, #4]
 80087fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008804:	2b01      	cmp	r3, #1
 8008806:	d101      	bne.n	800880c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008808:	2302      	movs	r3, #2
 800880a:	e05a      	b.n	80088c2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2201      	movs	r2, #1
 8008810:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2202      	movs	r2, #2
 8008818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008832:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	68fa      	ldr	r2, [r7, #12]
 800883a:	4313      	orrs	r3, r2
 800883c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	68fa      	ldr	r2, [r7, #12]
 8008844:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	4a21      	ldr	r2, [pc, #132]	@ (80088d0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d022      	beq.n	8008896 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008858:	d01d      	beq.n	8008896 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a1d      	ldr	r2, [pc, #116]	@ (80088d4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008860:	4293      	cmp	r3, r2
 8008862:	d018      	beq.n	8008896 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a1b      	ldr	r2, [pc, #108]	@ (80088d8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d013      	beq.n	8008896 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	4a1a      	ldr	r2, [pc, #104]	@ (80088dc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d00e      	beq.n	8008896 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	681b      	ldr	r3, [r3, #0]
 800887c:	4a18      	ldr	r2, [pc, #96]	@ (80088e0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800887e:	4293      	cmp	r3, r2
 8008880:	d009      	beq.n	8008896 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a17      	ldr	r2, [pc, #92]	@ (80088e4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d004      	beq.n	8008896 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4a15      	ldr	r2, [pc, #84]	@ (80088e8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008892:	4293      	cmp	r3, r2
 8008894:	d10c      	bne.n	80088b0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008896:	68bb      	ldr	r3, [r7, #8]
 8008898:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800889c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800889e:	683b      	ldr	r3, [r7, #0]
 80088a0:	685b      	ldr	r3, [r3, #4]
 80088a2:	68ba      	ldr	r2, [r7, #8]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	68ba      	ldr	r2, [r7, #8]
 80088ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	2200      	movs	r2, #0
 80088bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80088c0:	2300      	movs	r3, #0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3714      	adds	r7, #20
 80088c6:	46bd      	mov	sp, r7
 80088c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088cc:	4770      	bx	lr
 80088ce:	bf00      	nop
 80088d0:	40010000 	.word	0x40010000
 80088d4:	40000400 	.word	0x40000400
 80088d8:	40000800 	.word	0x40000800
 80088dc:	40000c00 	.word	0x40000c00
 80088e0:	40010400 	.word	0x40010400
 80088e4:	40014000 	.word	0x40014000
 80088e8:	40001800 	.word	0x40001800

080088ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b083      	sub	sp, #12
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80088f4:	bf00      	nop
 80088f6:	370c      	adds	r7, #12
 80088f8:	46bd      	mov	sp, r7
 80088fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088fe:	4770      	bx	lr

08008900 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008900:	b480      	push	{r7}
 8008902:	b083      	sub	sp, #12
 8008904:	af00      	add	r7, sp, #0
 8008906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008908:	bf00      	nop
 800890a:	370c      	adds	r7, #12
 800890c:	46bd      	mov	sp, r7
 800890e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008912:	4770      	bx	lr

08008914 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d101      	bne.n	8008926 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008922:	2301      	movs	r3, #1
 8008924:	e042      	b.n	80089ac <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800892c:	b2db      	uxtb	r3, r3
 800892e:	2b00      	cmp	r3, #0
 8008930:	d106      	bne.n	8008940 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	2200      	movs	r2, #0
 8008936:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f7f8 fcc2 	bl	80012c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	2224      	movs	r2, #36	@ 0x24
 8008944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	68da      	ldr	r2, [r3, #12]
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008956:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 f82b 	bl	80089b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	691a      	ldr	r2, [r3, #16]
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800896c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	695a      	ldr	r2, [r3, #20]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800897c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	68da      	ldr	r2, [r3, #12]
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800898c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	2200      	movs	r2, #0
 8008992:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	2220      	movs	r2, #32
 8008998:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2220      	movs	r2, #32
 80089a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	2200      	movs	r2, #0
 80089a8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80089aa:	2300      	movs	r3, #0
}
 80089ac:	4618      	mov	r0, r3
 80089ae:	3708      	adds	r7, #8
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80089b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80089b8:	b0c0      	sub	sp, #256	@ 0x100
 80089ba:	af00      	add	r7, sp, #0
 80089bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80089c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80089cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089d0:	68d9      	ldr	r1, [r3, #12]
 80089d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	ea40 0301 	orr.w	r3, r0, r1
 80089dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80089de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089e2:	689a      	ldr	r2, [r3, #8]
 80089e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	431a      	orrs	r2, r3
 80089ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089f0:	695b      	ldr	r3, [r3, #20]
 80089f2:	431a      	orrs	r2, r3
 80089f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089f8:	69db      	ldr	r3, [r3, #28]
 80089fa:	4313      	orrs	r3, r2
 80089fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008a00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	68db      	ldr	r3, [r3, #12]
 8008a08:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008a0c:	f021 010c 	bic.w	r1, r1, #12
 8008a10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a14:	681a      	ldr	r2, [r3, #0]
 8008a16:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8008a1a:	430b      	orrs	r3, r1
 8008a1c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008a1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	695b      	ldr	r3, [r3, #20]
 8008a26:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8008a2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a2e:	6999      	ldr	r1, [r3, #24]
 8008a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a34:	681a      	ldr	r2, [r3, #0]
 8008a36:	ea40 0301 	orr.w	r3, r0, r1
 8008a3a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	4b8f      	ldr	r3, [pc, #572]	@ (8008c80 <UART_SetConfig+0x2cc>)
 8008a44:	429a      	cmp	r2, r3
 8008a46:	d005      	beq.n	8008a54 <UART_SetConfig+0xa0>
 8008a48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	4b8d      	ldr	r3, [pc, #564]	@ (8008c84 <UART_SetConfig+0x2d0>)
 8008a50:	429a      	cmp	r2, r3
 8008a52:	d104      	bne.n	8008a5e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008a54:	f7fe fa4a 	bl	8006eec <HAL_RCC_GetPCLK2Freq>
 8008a58:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8008a5c:	e003      	b.n	8008a66 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008a5e:	f7fe fa31 	bl	8006ec4 <HAL_RCC_GetPCLK1Freq>
 8008a62:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008a6a:	69db      	ldr	r3, [r3, #28]
 8008a6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008a70:	f040 810c 	bne.w	8008c8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008a74:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008a78:	2200      	movs	r2, #0
 8008a7a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8008a7e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8008a82:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8008a86:	4622      	mov	r2, r4
 8008a88:	462b      	mov	r3, r5
 8008a8a:	1891      	adds	r1, r2, r2
 8008a8c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008a8e:	415b      	adcs	r3, r3
 8008a90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008a92:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8008a96:	4621      	mov	r1, r4
 8008a98:	eb12 0801 	adds.w	r8, r2, r1
 8008a9c:	4629      	mov	r1, r5
 8008a9e:	eb43 0901 	adc.w	r9, r3, r1
 8008aa2:	f04f 0200 	mov.w	r2, #0
 8008aa6:	f04f 0300 	mov.w	r3, #0
 8008aaa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008aae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008ab2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008ab6:	4690      	mov	r8, r2
 8008ab8:	4699      	mov	r9, r3
 8008aba:	4623      	mov	r3, r4
 8008abc:	eb18 0303 	adds.w	r3, r8, r3
 8008ac0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008ac4:	462b      	mov	r3, r5
 8008ac6:	eb49 0303 	adc.w	r3, r9, r3
 8008aca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008ace:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	2200      	movs	r2, #0
 8008ad6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8008ada:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008ade:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008ae2:	460b      	mov	r3, r1
 8008ae4:	18db      	adds	r3, r3, r3
 8008ae6:	653b      	str	r3, [r7, #80]	@ 0x50
 8008ae8:	4613      	mov	r3, r2
 8008aea:	eb42 0303 	adc.w	r3, r2, r3
 8008aee:	657b      	str	r3, [r7, #84]	@ 0x54
 8008af0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008af4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8008af8:	f7f7 fb78 	bl	80001ec <__aeabi_uldivmod>
 8008afc:	4602      	mov	r2, r0
 8008afe:	460b      	mov	r3, r1
 8008b00:	4b61      	ldr	r3, [pc, #388]	@ (8008c88 <UART_SetConfig+0x2d4>)
 8008b02:	fba3 2302 	umull	r2, r3, r3, r2
 8008b06:	095b      	lsrs	r3, r3, #5
 8008b08:	011c      	lsls	r4, r3, #4
 8008b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008b0e:	2200      	movs	r2, #0
 8008b10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008b14:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8008b18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008b1c:	4642      	mov	r2, r8
 8008b1e:	464b      	mov	r3, r9
 8008b20:	1891      	adds	r1, r2, r2
 8008b22:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008b24:	415b      	adcs	r3, r3
 8008b26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8008b2c:	4641      	mov	r1, r8
 8008b2e:	eb12 0a01 	adds.w	sl, r2, r1
 8008b32:	4649      	mov	r1, r9
 8008b34:	eb43 0b01 	adc.w	fp, r3, r1
 8008b38:	f04f 0200 	mov.w	r2, #0
 8008b3c:	f04f 0300 	mov.w	r3, #0
 8008b40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008b44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008b48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008b4c:	4692      	mov	sl, r2
 8008b4e:	469b      	mov	fp, r3
 8008b50:	4643      	mov	r3, r8
 8008b52:	eb1a 0303 	adds.w	r3, sl, r3
 8008b56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8008b5a:	464b      	mov	r3, r9
 8008b5c:	eb4b 0303 	adc.w	r3, fp, r3
 8008b60:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8008b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008b68:	685b      	ldr	r3, [r3, #4]
 8008b6a:	2200      	movs	r2, #0
 8008b6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8008b70:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8008b74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8008b78:	460b      	mov	r3, r1
 8008b7a:	18db      	adds	r3, r3, r3
 8008b7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b7e:	4613      	mov	r3, r2
 8008b80:	eb42 0303 	adc.w	r3, r2, r3
 8008b84:	647b      	str	r3, [r7, #68]	@ 0x44
 8008b86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8008b8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008b8e:	f7f7 fb2d 	bl	80001ec <__aeabi_uldivmod>
 8008b92:	4602      	mov	r2, r0
 8008b94:	460b      	mov	r3, r1
 8008b96:	4611      	mov	r1, r2
 8008b98:	4b3b      	ldr	r3, [pc, #236]	@ (8008c88 <UART_SetConfig+0x2d4>)
 8008b9a:	fba3 2301 	umull	r2, r3, r3, r1
 8008b9e:	095b      	lsrs	r3, r3, #5
 8008ba0:	2264      	movs	r2, #100	@ 0x64
 8008ba2:	fb02 f303 	mul.w	r3, r2, r3
 8008ba6:	1acb      	subs	r3, r1, r3
 8008ba8:	00db      	lsls	r3, r3, #3
 8008baa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008bae:	4b36      	ldr	r3, [pc, #216]	@ (8008c88 <UART_SetConfig+0x2d4>)
 8008bb0:	fba3 2302 	umull	r2, r3, r3, r2
 8008bb4:	095b      	lsrs	r3, r3, #5
 8008bb6:	005b      	lsls	r3, r3, #1
 8008bb8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008bbc:	441c      	add	r4, r3
 8008bbe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008bc2:	2200      	movs	r2, #0
 8008bc4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8008bc8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008bcc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008bd0:	4642      	mov	r2, r8
 8008bd2:	464b      	mov	r3, r9
 8008bd4:	1891      	adds	r1, r2, r2
 8008bd6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8008bd8:	415b      	adcs	r3, r3
 8008bda:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008bdc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008be0:	4641      	mov	r1, r8
 8008be2:	1851      	adds	r1, r2, r1
 8008be4:	6339      	str	r1, [r7, #48]	@ 0x30
 8008be6:	4649      	mov	r1, r9
 8008be8:	414b      	adcs	r3, r1
 8008bea:	637b      	str	r3, [r7, #52]	@ 0x34
 8008bec:	f04f 0200 	mov.w	r2, #0
 8008bf0:	f04f 0300 	mov.w	r3, #0
 8008bf4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8008bf8:	4659      	mov	r1, fp
 8008bfa:	00cb      	lsls	r3, r1, #3
 8008bfc:	4651      	mov	r1, sl
 8008bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008c02:	4651      	mov	r1, sl
 8008c04:	00ca      	lsls	r2, r1, #3
 8008c06:	4610      	mov	r0, r2
 8008c08:	4619      	mov	r1, r3
 8008c0a:	4603      	mov	r3, r0
 8008c0c:	4642      	mov	r2, r8
 8008c0e:	189b      	adds	r3, r3, r2
 8008c10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008c14:	464b      	mov	r3, r9
 8008c16:	460a      	mov	r2, r1
 8008c18:	eb42 0303 	adc.w	r3, r2, r3
 8008c1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c24:	685b      	ldr	r3, [r3, #4]
 8008c26:	2200      	movs	r2, #0
 8008c28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008c2c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8008c30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008c34:	460b      	mov	r3, r1
 8008c36:	18db      	adds	r3, r3, r3
 8008c38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	eb42 0303 	adc.w	r3, r2, r3
 8008c40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008c42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008c46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008c4a:	f7f7 facf 	bl	80001ec <__aeabi_uldivmod>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	460b      	mov	r3, r1
 8008c52:	4b0d      	ldr	r3, [pc, #52]	@ (8008c88 <UART_SetConfig+0x2d4>)
 8008c54:	fba3 1302 	umull	r1, r3, r3, r2
 8008c58:	095b      	lsrs	r3, r3, #5
 8008c5a:	2164      	movs	r1, #100	@ 0x64
 8008c5c:	fb01 f303 	mul.w	r3, r1, r3
 8008c60:	1ad3      	subs	r3, r2, r3
 8008c62:	00db      	lsls	r3, r3, #3
 8008c64:	3332      	adds	r3, #50	@ 0x32
 8008c66:	4a08      	ldr	r2, [pc, #32]	@ (8008c88 <UART_SetConfig+0x2d4>)
 8008c68:	fba2 2303 	umull	r2, r3, r2, r3
 8008c6c:	095b      	lsrs	r3, r3, #5
 8008c6e:	f003 0207 	and.w	r2, r3, #7
 8008c72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4422      	add	r2, r4
 8008c7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008c7c:	e106      	b.n	8008e8c <UART_SetConfig+0x4d8>
 8008c7e:	bf00      	nop
 8008c80:	40011000 	.word	0x40011000
 8008c84:	40011400 	.word	0x40011400
 8008c88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008c8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008c90:	2200      	movs	r2, #0
 8008c92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008c96:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008c9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008c9e:	4642      	mov	r2, r8
 8008ca0:	464b      	mov	r3, r9
 8008ca2:	1891      	adds	r1, r2, r2
 8008ca4:	6239      	str	r1, [r7, #32]
 8008ca6:	415b      	adcs	r3, r3
 8008ca8:	627b      	str	r3, [r7, #36]	@ 0x24
 8008caa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008cae:	4641      	mov	r1, r8
 8008cb0:	1854      	adds	r4, r2, r1
 8008cb2:	4649      	mov	r1, r9
 8008cb4:	eb43 0501 	adc.w	r5, r3, r1
 8008cb8:	f04f 0200 	mov.w	r2, #0
 8008cbc:	f04f 0300 	mov.w	r3, #0
 8008cc0:	00eb      	lsls	r3, r5, #3
 8008cc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008cc6:	00e2      	lsls	r2, r4, #3
 8008cc8:	4614      	mov	r4, r2
 8008cca:	461d      	mov	r5, r3
 8008ccc:	4643      	mov	r3, r8
 8008cce:	18e3      	adds	r3, r4, r3
 8008cd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008cd4:	464b      	mov	r3, r9
 8008cd6:	eb45 0303 	adc.w	r3, r5, r3
 8008cda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008ce2:	685b      	ldr	r3, [r3, #4]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008cea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008cee:	f04f 0200 	mov.w	r2, #0
 8008cf2:	f04f 0300 	mov.w	r3, #0
 8008cf6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8008cfa:	4629      	mov	r1, r5
 8008cfc:	008b      	lsls	r3, r1, #2
 8008cfe:	4621      	mov	r1, r4
 8008d00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008d04:	4621      	mov	r1, r4
 8008d06:	008a      	lsls	r2, r1, #2
 8008d08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008d0c:	f7f7 fa6e 	bl	80001ec <__aeabi_uldivmod>
 8008d10:	4602      	mov	r2, r0
 8008d12:	460b      	mov	r3, r1
 8008d14:	4b60      	ldr	r3, [pc, #384]	@ (8008e98 <UART_SetConfig+0x4e4>)
 8008d16:	fba3 2302 	umull	r2, r3, r3, r2
 8008d1a:	095b      	lsrs	r3, r3, #5
 8008d1c:	011c      	lsls	r4, r3, #4
 8008d1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008d22:	2200      	movs	r2, #0
 8008d24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008d28:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008d2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8008d30:	4642      	mov	r2, r8
 8008d32:	464b      	mov	r3, r9
 8008d34:	1891      	adds	r1, r2, r2
 8008d36:	61b9      	str	r1, [r7, #24]
 8008d38:	415b      	adcs	r3, r3
 8008d3a:	61fb      	str	r3, [r7, #28]
 8008d3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008d40:	4641      	mov	r1, r8
 8008d42:	1851      	adds	r1, r2, r1
 8008d44:	6139      	str	r1, [r7, #16]
 8008d46:	4649      	mov	r1, r9
 8008d48:	414b      	adcs	r3, r1
 8008d4a:	617b      	str	r3, [r7, #20]
 8008d4c:	f04f 0200 	mov.w	r2, #0
 8008d50:	f04f 0300 	mov.w	r3, #0
 8008d54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008d58:	4659      	mov	r1, fp
 8008d5a:	00cb      	lsls	r3, r1, #3
 8008d5c:	4651      	mov	r1, sl
 8008d5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008d62:	4651      	mov	r1, sl
 8008d64:	00ca      	lsls	r2, r1, #3
 8008d66:	4610      	mov	r0, r2
 8008d68:	4619      	mov	r1, r3
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	4642      	mov	r2, r8
 8008d6e:	189b      	adds	r3, r3, r2
 8008d70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008d74:	464b      	mov	r3, r9
 8008d76:	460a      	mov	r2, r1
 8008d78:	eb42 0303 	adc.w	r3, r2, r3
 8008d7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	2200      	movs	r2, #0
 8008d88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008d8a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008d8c:	f04f 0200 	mov.w	r2, #0
 8008d90:	f04f 0300 	mov.w	r3, #0
 8008d94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008d98:	4649      	mov	r1, r9
 8008d9a:	008b      	lsls	r3, r1, #2
 8008d9c:	4641      	mov	r1, r8
 8008d9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008da2:	4641      	mov	r1, r8
 8008da4:	008a      	lsls	r2, r1, #2
 8008da6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008daa:	f7f7 fa1f 	bl	80001ec <__aeabi_uldivmod>
 8008dae:	4602      	mov	r2, r0
 8008db0:	460b      	mov	r3, r1
 8008db2:	4611      	mov	r1, r2
 8008db4:	4b38      	ldr	r3, [pc, #224]	@ (8008e98 <UART_SetConfig+0x4e4>)
 8008db6:	fba3 2301 	umull	r2, r3, r3, r1
 8008dba:	095b      	lsrs	r3, r3, #5
 8008dbc:	2264      	movs	r2, #100	@ 0x64
 8008dbe:	fb02 f303 	mul.w	r3, r2, r3
 8008dc2:	1acb      	subs	r3, r1, r3
 8008dc4:	011b      	lsls	r3, r3, #4
 8008dc6:	3332      	adds	r3, #50	@ 0x32
 8008dc8:	4a33      	ldr	r2, [pc, #204]	@ (8008e98 <UART_SetConfig+0x4e4>)
 8008dca:	fba2 2303 	umull	r2, r3, r2, r3
 8008dce:	095b      	lsrs	r3, r3, #5
 8008dd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008dd4:	441c      	add	r4, r3
 8008dd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008dda:	2200      	movs	r2, #0
 8008ddc:	673b      	str	r3, [r7, #112]	@ 0x70
 8008dde:	677a      	str	r2, [r7, #116]	@ 0x74
 8008de0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008de4:	4642      	mov	r2, r8
 8008de6:	464b      	mov	r3, r9
 8008de8:	1891      	adds	r1, r2, r2
 8008dea:	60b9      	str	r1, [r7, #8]
 8008dec:	415b      	adcs	r3, r3
 8008dee:	60fb      	str	r3, [r7, #12]
 8008df0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008df4:	4641      	mov	r1, r8
 8008df6:	1851      	adds	r1, r2, r1
 8008df8:	6039      	str	r1, [r7, #0]
 8008dfa:	4649      	mov	r1, r9
 8008dfc:	414b      	adcs	r3, r1
 8008dfe:	607b      	str	r3, [r7, #4]
 8008e00:	f04f 0200 	mov.w	r2, #0
 8008e04:	f04f 0300 	mov.w	r3, #0
 8008e08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008e0c:	4659      	mov	r1, fp
 8008e0e:	00cb      	lsls	r3, r1, #3
 8008e10:	4651      	mov	r1, sl
 8008e12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008e16:	4651      	mov	r1, sl
 8008e18:	00ca      	lsls	r2, r1, #3
 8008e1a:	4610      	mov	r0, r2
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	4603      	mov	r3, r0
 8008e20:	4642      	mov	r2, r8
 8008e22:	189b      	adds	r3, r3, r2
 8008e24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008e26:	464b      	mov	r3, r9
 8008e28:	460a      	mov	r2, r1
 8008e2a:	eb42 0303 	adc.w	r3, r2, r3
 8008e2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008e30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e34:	685b      	ldr	r3, [r3, #4]
 8008e36:	2200      	movs	r2, #0
 8008e38:	663b      	str	r3, [r7, #96]	@ 0x60
 8008e3a:	667a      	str	r2, [r7, #100]	@ 0x64
 8008e3c:	f04f 0200 	mov.w	r2, #0
 8008e40:	f04f 0300 	mov.w	r3, #0
 8008e44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008e48:	4649      	mov	r1, r9
 8008e4a:	008b      	lsls	r3, r1, #2
 8008e4c:	4641      	mov	r1, r8
 8008e4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008e52:	4641      	mov	r1, r8
 8008e54:	008a      	lsls	r2, r1, #2
 8008e56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008e5a:	f7f7 f9c7 	bl	80001ec <__aeabi_uldivmod>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	460b      	mov	r3, r1
 8008e62:	4b0d      	ldr	r3, [pc, #52]	@ (8008e98 <UART_SetConfig+0x4e4>)
 8008e64:	fba3 1302 	umull	r1, r3, r3, r2
 8008e68:	095b      	lsrs	r3, r3, #5
 8008e6a:	2164      	movs	r1, #100	@ 0x64
 8008e6c:	fb01 f303 	mul.w	r3, r1, r3
 8008e70:	1ad3      	subs	r3, r2, r3
 8008e72:	011b      	lsls	r3, r3, #4
 8008e74:	3332      	adds	r3, #50	@ 0x32
 8008e76:	4a08      	ldr	r2, [pc, #32]	@ (8008e98 <UART_SetConfig+0x4e4>)
 8008e78:	fba2 2303 	umull	r2, r3, r2, r3
 8008e7c:	095b      	lsrs	r3, r3, #5
 8008e7e:	f003 020f 	and.w	r2, r3, #15
 8008e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4422      	add	r2, r4
 8008e8a:	609a      	str	r2, [r3, #8]
}
 8008e8c:	bf00      	nop
 8008e8e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008e92:	46bd      	mov	sp, r7
 8008e94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e98:	51eb851f 	.word	0x51eb851f

08008e9c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8008e9c:	b480      	push	{r7}
 8008e9e:	b083      	sub	sp, #12
 8008ea0:	af00      	add	r7, sp, #0
 8008ea2:	6078      	str	r0, [r7, #4]
 8008ea4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	681b      	ldr	r3, [r3, #0]
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d123      	bne.n	8008ef6 <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8008eb6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008eba:	683a      	ldr	r2, [r7, #0]
 8008ebc:	6851      	ldr	r1, [r2, #4]
 8008ebe:	683a      	ldr	r2, [r7, #0]
 8008ec0:	6892      	ldr	r2, [r2, #8]
 8008ec2:	4311      	orrs	r1, r2
 8008ec4:	683a      	ldr	r2, [r7, #0]
 8008ec6:	68d2      	ldr	r2, [r2, #12]
 8008ec8:	4311      	orrs	r1, r2
 8008eca:	683a      	ldr	r2, [r7, #0]
 8008ecc:	6912      	ldr	r2, [r2, #16]
 8008ece:	4311      	orrs	r1, r2
 8008ed0:	683a      	ldr	r2, [r7, #0]
 8008ed2:	6952      	ldr	r2, [r2, #20]
 8008ed4:	4311      	orrs	r1, r2
 8008ed6:	683a      	ldr	r2, [r7, #0]
 8008ed8:	6992      	ldr	r2, [r2, #24]
 8008eda:	4311      	orrs	r1, r2
 8008edc:	683a      	ldr	r2, [r7, #0]
 8008ede:	69d2      	ldr	r2, [r2, #28]
 8008ee0:	4311      	orrs	r1, r2
 8008ee2:	683a      	ldr	r2, [r7, #0]
 8008ee4:	6a12      	ldr	r2, [r2, #32]
 8008ee6:	4311      	orrs	r1, r2
 8008ee8:	683a      	ldr	r2, [r7, #0]
 8008eea:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008eec:	430a      	orrs	r2, r1
 8008eee:	431a      	orrs	r2, r3
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	601a      	str	r2, [r3, #0]
 8008ef4:	e028      	b.n	8008f48 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8008efe:	683b      	ldr	r3, [r7, #0]
 8008f00:	69d9      	ldr	r1, [r3, #28]
 8008f02:	683b      	ldr	r3, [r7, #0]
 8008f04:	6a1b      	ldr	r3, [r3, #32]
 8008f06:	4319      	orrs	r1, r3
 8008f08:	683b      	ldr	r3, [r7, #0]
 8008f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008f0c:	430b      	orrs	r3, r1
 8008f0e:	431a      	orrs	r2, r3
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	685b      	ldr	r3, [r3, #4]
 8008f18:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8008f1c:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8008f20:	683a      	ldr	r2, [r7, #0]
 8008f22:	6851      	ldr	r1, [r2, #4]
 8008f24:	683a      	ldr	r2, [r7, #0]
 8008f26:	6892      	ldr	r2, [r2, #8]
 8008f28:	4311      	orrs	r1, r2
 8008f2a:	683a      	ldr	r2, [r7, #0]
 8008f2c:	68d2      	ldr	r2, [r2, #12]
 8008f2e:	4311      	orrs	r1, r2
 8008f30:	683a      	ldr	r2, [r7, #0]
 8008f32:	6912      	ldr	r2, [r2, #16]
 8008f34:	4311      	orrs	r1, r2
 8008f36:	683a      	ldr	r2, [r7, #0]
 8008f38:	6952      	ldr	r2, [r2, #20]
 8008f3a:	4311      	orrs	r1, r2
 8008f3c:	683a      	ldr	r2, [r7, #0]
 8008f3e:	6992      	ldr	r2, [r2, #24]
 8008f40:	430a      	orrs	r2, r1
 8008f42:	431a      	orrs	r2, r3
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8008f48:	2300      	movs	r3, #0
}
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	370c      	adds	r7, #12
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr

08008f56 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8008f56:	b480      	push	{r7}
 8008f58:	b085      	sub	sp, #20
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	60f8      	str	r0, [r7, #12]
 8008f5e:	60b9      	str	r1, [r7, #8]
 8008f60:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d128      	bne.n	8008fba <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	689b      	ldr	r3, [r3, #8]
 8008f6c:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	1e59      	subs	r1, r3, #1
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	011b      	lsls	r3, r3, #4
 8008f7e:	4319      	orrs	r1, r3
 8008f80:	68bb      	ldr	r3, [r7, #8]
 8008f82:	689b      	ldr	r3, [r3, #8]
 8008f84:	3b01      	subs	r3, #1
 8008f86:	021b      	lsls	r3, r3, #8
 8008f88:	4319      	orrs	r1, r3
 8008f8a:	68bb      	ldr	r3, [r7, #8]
 8008f8c:	68db      	ldr	r3, [r3, #12]
 8008f8e:	3b01      	subs	r3, #1
 8008f90:	031b      	lsls	r3, r3, #12
 8008f92:	4319      	orrs	r1, r3
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	691b      	ldr	r3, [r3, #16]
 8008f98:	3b01      	subs	r3, #1
 8008f9a:	041b      	lsls	r3, r3, #16
 8008f9c:	4319      	orrs	r1, r3
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	695b      	ldr	r3, [r3, #20]
 8008fa2:	3b01      	subs	r3, #1
 8008fa4:	051b      	lsls	r3, r3, #20
 8008fa6:	4319      	orrs	r1, r3
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	699b      	ldr	r3, [r3, #24]
 8008fac:	3b01      	subs	r3, #1
 8008fae:	061b      	lsls	r3, r3, #24
 8008fb0:	430b      	orrs	r3, r1
 8008fb2:	431a      	orrs	r2, r3
 8008fb4:	68fb      	ldr	r3, [r7, #12]
 8008fb6:	609a      	str	r2, [r3, #8]
 8008fb8:	e02f      	b.n	800901a <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	689b      	ldr	r3, [r3, #8]
 8008fbe:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8008fc2:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008fc6:	68ba      	ldr	r2, [r7, #8]
 8008fc8:	68d2      	ldr	r2, [r2, #12]
 8008fca:	3a01      	subs	r2, #1
 8008fcc:	0311      	lsls	r1, r2, #12
 8008fce:	68ba      	ldr	r2, [r7, #8]
 8008fd0:	6952      	ldr	r2, [r2, #20]
 8008fd2:	3a01      	subs	r2, #1
 8008fd4:	0512      	lsls	r2, r2, #20
 8008fd6:	430a      	orrs	r2, r1
 8008fd8:	431a      	orrs	r2, r3
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	68db      	ldr	r3, [r3, #12]
 8008fe2:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8008fe6:	68bb      	ldr	r3, [r7, #8]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	1e59      	subs	r1, r3, #1
 8008fec:	68bb      	ldr	r3, [r7, #8]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	3b01      	subs	r3, #1
 8008ff2:	011b      	lsls	r3, r3, #4
 8008ff4:	4319      	orrs	r1, r3
 8008ff6:	68bb      	ldr	r3, [r7, #8]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	3b01      	subs	r3, #1
 8008ffc:	021b      	lsls	r3, r3, #8
 8008ffe:	4319      	orrs	r1, r3
 8009000:	68bb      	ldr	r3, [r7, #8]
 8009002:	691b      	ldr	r3, [r3, #16]
 8009004:	3b01      	subs	r3, #1
 8009006:	041b      	lsls	r3, r3, #16
 8009008:	4319      	orrs	r1, r3
 800900a:	68bb      	ldr	r3, [r7, #8]
 800900c:	699b      	ldr	r3, [r3, #24]
 800900e:	3b01      	subs	r3, #1
 8009010:	061b      	lsls	r3, r3, #24
 8009012:	430b      	orrs	r3, r1
 8009014:	431a      	orrs	r2, r3
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 800901a:	2300      	movs	r3, #0
}
 800901c:	4618      	mov	r0, r3
 800901e:	3714      	adds	r7, #20
 8009020:	46bd      	mov	sp, r7
 8009022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009026:	4770      	bx	lr

08009028 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b086      	sub	sp, #24
 800902c:	af00      	add	r7, sp, #0
 800902e:	60f8      	str	r0, [r7, #12]
 8009030:	60b9      	str	r1, [r7, #8]
 8009032:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8009034:	2300      	movs	r3, #0
 8009036:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	691b      	ldr	r3, [r3, #16]
 800903c:	0d9b      	lsrs	r3, r3, #22
 800903e:	059b      	lsls	r3, r3, #22
 8009040:	68ba      	ldr	r2, [r7, #8]
 8009042:	6811      	ldr	r1, [r2, #0]
 8009044:	68ba      	ldr	r2, [r7, #8]
 8009046:	6852      	ldr	r2, [r2, #4]
 8009048:	4311      	orrs	r1, r2
 800904a:	68ba      	ldr	r2, [r7, #8]
 800904c:	6892      	ldr	r2, [r2, #8]
 800904e:	3a01      	subs	r2, #1
 8009050:	0152      	lsls	r2, r2, #5
 8009052:	4311      	orrs	r1, r2
 8009054:	68ba      	ldr	r2, [r7, #8]
 8009056:	68d2      	ldr	r2, [r2, #12]
 8009058:	0252      	lsls	r2, r2, #9
 800905a:	430a      	orrs	r2, r1
 800905c:	431a      	orrs	r2, r3
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 8009062:	f7f9 fd65 	bl	8002b30 <HAL_GetTick>
 8009066:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8009068:	e010      	b.n	800908c <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009070:	d00c      	beq.n	800908c <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d007      	beq.n	8009088 <FMC_SDRAM_SendCommand+0x60>
 8009078:	f7f9 fd5a 	bl	8002b30 <HAL_GetTick>
 800907c:	4602      	mov	r2, r0
 800907e:	697b      	ldr	r3, [r7, #20]
 8009080:	1ad3      	subs	r3, r2, r3
 8009082:	687a      	ldr	r2, [r7, #4]
 8009084:	429a      	cmp	r2, r3
 8009086:	d201      	bcs.n	800908c <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 8009088:	2303      	movs	r3, #3
 800908a:	e006      	b.n	800909a <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	699b      	ldr	r3, [r3, #24]
 8009090:	f003 0320 	and.w	r3, r3, #32
 8009094:	2b20      	cmp	r3, #32
 8009096:	d0e8      	beq.n	800906a <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 8009098:	2300      	movs	r3, #0
}
 800909a:	4618      	mov	r0, r3
 800909c:	3718      	adds	r7, #24
 800909e:	46bd      	mov	sp, r7
 80090a0:	bd80      	pop	{r7, pc}

080090a2 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80090a2:	b480      	push	{r7}
 80090a4:	b083      	sub	sp, #12
 80090a6:	af00      	add	r7, sp, #0
 80090a8:	6078      	str	r0, [r7, #4]
 80090aa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	695b      	ldr	r3, [r3, #20]
 80090b0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80090b4:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 80090b8:	683a      	ldr	r2, [r7, #0]
 80090ba:	0052      	lsls	r2, r2, #1
 80090bc:	431a      	orrs	r2, r3
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80090c2:	2300      	movs	r3, #0
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	370c      	adds	r7, #12
 80090c8:	46bd      	mov	sp, r7
 80090ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ce:	4770      	bx	lr

080090d0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80090d0:	b084      	sub	sp, #16
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b084      	sub	sp, #16
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
 80090da:	f107 001c 	add.w	r0, r7, #28
 80090de:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80090e2:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80090e6:	2b01      	cmp	r3, #1
 80090e8:	d123      	bne.n	8009132 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80090ee:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	68db      	ldr	r3, [r3, #12]
 80090fa:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80090fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009102:	687a      	ldr	r2, [r7, #4]
 8009104:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	68db      	ldr	r3, [r3, #12]
 800910a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009112:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009116:	2b01      	cmp	r3, #1
 8009118:	d105      	bne.n	8009126 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	68db      	ldr	r3, [r3, #12]
 800911e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009126:	6878      	ldr	r0, [r7, #4]
 8009128:	f000 f98d 	bl	8009446 <USB_CoreReset>
 800912c:	4603      	mov	r3, r0
 800912e:	73fb      	strb	r3, [r7, #15]
 8009130:	e01b      	b.n	800916a <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	68db      	ldr	r3, [r3, #12]
 8009136:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f000 f981 	bl	8009446 <USB_CoreReset>
 8009144:	4603      	mov	r3, r0
 8009146:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009148:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800914c:	2b00      	cmp	r3, #0
 800914e:	d106      	bne.n	800915e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009154:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	639a      	str	r2, [r3, #56]	@ 0x38
 800915c:	e005      	b.n	800916a <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009162:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800916a:	7fbb      	ldrb	r3, [r7, #30]
 800916c:	2b01      	cmp	r3, #1
 800916e:	d10b      	bne.n	8009188 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	f043 0206 	orr.w	r2, r3, #6
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	689b      	ldr	r3, [r3, #8]
 8009180:	f043 0220 	orr.w	r2, r3, #32
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009188:	7bfb      	ldrb	r3, [r7, #15]
}
 800918a:	4618      	mov	r0, r3
 800918c:	3710      	adds	r7, #16
 800918e:	46bd      	mov	sp, r7
 8009190:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009194:	b004      	add	sp, #16
 8009196:	4770      	bx	lr

08009198 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8009198:	b480      	push	{r7}
 800919a:	b083      	sub	sp, #12
 800919c:	af00      	add	r7, sp, #0
 800919e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	689b      	ldr	r3, [r3, #8]
 80091a4:	f023 0201 	bic.w	r2, r3, #1
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80091ac:	2300      	movs	r3, #0
}
 80091ae:	4618      	mov	r0, r3
 80091b0:	370c      	adds	r7, #12
 80091b2:	46bd      	mov	sp, r7
 80091b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091b8:	4770      	bx	lr

080091ba <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b084      	sub	sp, #16
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
 80091c2:	460b      	mov	r3, r1
 80091c4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80091c6:	2300      	movs	r3, #0
 80091c8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	68db      	ldr	r3, [r3, #12]
 80091ce:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80091d6:	78fb      	ldrb	r3, [r7, #3]
 80091d8:	2b01      	cmp	r3, #1
 80091da:	d115      	bne.n	8009208 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80091e8:	200a      	movs	r0, #10
 80091ea:	f7f9 fcad 	bl	8002b48 <HAL_Delay>
      ms += 10U;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	330a      	adds	r3, #10
 80091f2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 f918 	bl	800942a <USB_GetMode>
 80091fa:	4603      	mov	r3, r0
 80091fc:	2b01      	cmp	r3, #1
 80091fe:	d01e      	beq.n	800923e <USB_SetCurrentMode+0x84>
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	2bc7      	cmp	r3, #199	@ 0xc7
 8009204:	d9f0      	bls.n	80091e8 <USB_SetCurrentMode+0x2e>
 8009206:	e01a      	b.n	800923e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009208:	78fb      	ldrb	r3, [r7, #3]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d115      	bne.n	800923a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800921a:	200a      	movs	r0, #10
 800921c:	f7f9 fc94 	bl	8002b48 <HAL_Delay>
      ms += 10U;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	330a      	adds	r3, #10
 8009224:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f000 f8ff 	bl	800942a <USB_GetMode>
 800922c:	4603      	mov	r3, r0
 800922e:	2b00      	cmp	r3, #0
 8009230:	d005      	beq.n	800923e <USB_SetCurrentMode+0x84>
 8009232:	68fb      	ldr	r3, [r7, #12]
 8009234:	2bc7      	cmp	r3, #199	@ 0xc7
 8009236:	d9f0      	bls.n	800921a <USB_SetCurrentMode+0x60>
 8009238:	e001      	b.n	800923e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800923a:	2301      	movs	r3, #1
 800923c:	e005      	b.n	800924a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	2bc8      	cmp	r3, #200	@ 0xc8
 8009242:	d101      	bne.n	8009248 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009244:	2301      	movs	r3, #1
 8009246:	e000      	b.n	800924a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009248:	2300      	movs	r3, #0
}
 800924a:	4618      	mov	r0, r3
 800924c:	3710      	adds	r7, #16
 800924e:	46bd      	mov	sp, r7
 8009250:	bd80      	pop	{r7, pc}

08009252 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009252:	b480      	push	{r7}
 8009254:	b085      	sub	sp, #20
 8009256:	af00      	add	r7, sp, #0
 8009258:	6078      	str	r0, [r7, #4]
 800925a:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800925c:	2300      	movs	r3, #0
 800925e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	3301      	adds	r3, #1
 8009264:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800926c:	d901      	bls.n	8009272 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800926e:	2303      	movs	r3, #3
 8009270:	e01b      	b.n	80092aa <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	691b      	ldr	r3, [r3, #16]
 8009276:	2b00      	cmp	r3, #0
 8009278:	daf2      	bge.n	8009260 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800927a:	2300      	movs	r3, #0
 800927c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800927e:	683b      	ldr	r3, [r7, #0]
 8009280:	019b      	lsls	r3, r3, #6
 8009282:	f043 0220 	orr.w	r2, r3, #32
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	3301      	adds	r3, #1
 800928e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009296:	d901      	bls.n	800929c <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009298:	2303      	movs	r3, #3
 800929a:	e006      	b.n	80092aa <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	691b      	ldr	r3, [r3, #16]
 80092a0:	f003 0320 	and.w	r3, r3, #32
 80092a4:	2b20      	cmp	r3, #32
 80092a6:	d0f0      	beq.n	800928a <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80092a8:	2300      	movs	r3, #0
}
 80092aa:	4618      	mov	r0, r3
 80092ac:	3714      	adds	r7, #20
 80092ae:	46bd      	mov	sp, r7
 80092b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092b4:	4770      	bx	lr

080092b6 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80092b6:	b480      	push	{r7}
 80092b8:	b085      	sub	sp, #20
 80092ba:	af00      	add	r7, sp, #0
 80092bc:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80092be:	2300      	movs	r3, #0
 80092c0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	3301      	adds	r3, #1
 80092c6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80092c8:	68fb      	ldr	r3, [r7, #12]
 80092ca:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80092ce:	d901      	bls.n	80092d4 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80092d0:	2303      	movs	r3, #3
 80092d2:	e018      	b.n	8009306 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	691b      	ldr	r3, [r3, #16]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	daf2      	bge.n	80092c2 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80092dc:	2300      	movs	r3, #0
 80092de:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	2210      	movs	r2, #16
 80092e4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	3301      	adds	r3, #1
 80092ea:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80092f2:	d901      	bls.n	80092f8 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80092f4:	2303      	movs	r3, #3
 80092f6:	e006      	b.n	8009306 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	691b      	ldr	r3, [r3, #16]
 80092fc:	f003 0310 	and.w	r3, r3, #16
 8009300:	2b10      	cmp	r3, #16
 8009302:	d0f0      	beq.n	80092e6 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009304:	2300      	movs	r3, #0
}
 8009306:	4618      	mov	r0, r3
 8009308:	3714      	adds	r7, #20
 800930a:	46bd      	mov	sp, r7
 800930c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009310:	4770      	bx	lr

08009312 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009312:	b480      	push	{r7}
 8009314:	b08b      	sub	sp, #44	@ 0x2c
 8009316:	af00      	add	r7, sp, #0
 8009318:	60f8      	str	r0, [r7, #12]
 800931a:	60b9      	str	r1, [r7, #8]
 800931c:	4613      	mov	r3, r2
 800931e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009328:	88fb      	ldrh	r3, [r7, #6]
 800932a:	089b      	lsrs	r3, r3, #2
 800932c:	b29b      	uxth	r3, r3
 800932e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009330:	88fb      	ldrh	r3, [r7, #6]
 8009332:	f003 0303 	and.w	r3, r3, #3
 8009336:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009338:	2300      	movs	r3, #0
 800933a:	623b      	str	r3, [r7, #32]
 800933c:	e014      	b.n	8009368 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800933e:	69bb      	ldr	r3, [r7, #24]
 8009340:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009344:	681a      	ldr	r2, [r3, #0]
 8009346:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009348:	601a      	str	r2, [r3, #0]
    pDest++;
 800934a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800934c:	3301      	adds	r3, #1
 800934e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009350:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009352:	3301      	adds	r3, #1
 8009354:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009358:	3301      	adds	r3, #1
 800935a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800935c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800935e:	3301      	adds	r3, #1
 8009360:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009362:	6a3b      	ldr	r3, [r7, #32]
 8009364:	3301      	adds	r3, #1
 8009366:	623b      	str	r3, [r7, #32]
 8009368:	6a3a      	ldr	r2, [r7, #32]
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	429a      	cmp	r2, r3
 800936e:	d3e6      	bcc.n	800933e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009370:	8bfb      	ldrh	r3, [r7, #30]
 8009372:	2b00      	cmp	r3, #0
 8009374:	d01e      	beq.n	80093b4 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009376:	2300      	movs	r3, #0
 8009378:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800937a:	69bb      	ldr	r3, [r7, #24]
 800937c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009380:	461a      	mov	r2, r3
 8009382:	f107 0310 	add.w	r3, r7, #16
 8009386:	6812      	ldr	r2, [r2, #0]
 8009388:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800938a:	693a      	ldr	r2, [r7, #16]
 800938c:	6a3b      	ldr	r3, [r7, #32]
 800938e:	b2db      	uxtb	r3, r3
 8009390:	00db      	lsls	r3, r3, #3
 8009392:	fa22 f303 	lsr.w	r3, r2, r3
 8009396:	b2da      	uxtb	r2, r3
 8009398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800939a:	701a      	strb	r2, [r3, #0]
      i++;
 800939c:	6a3b      	ldr	r3, [r7, #32]
 800939e:	3301      	adds	r3, #1
 80093a0:	623b      	str	r3, [r7, #32]
      pDest++;
 80093a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093a4:	3301      	adds	r3, #1
 80093a6:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80093a8:	8bfb      	ldrh	r3, [r7, #30]
 80093aa:	3b01      	subs	r3, #1
 80093ac:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80093ae:	8bfb      	ldrh	r3, [r7, #30]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d1ea      	bne.n	800938a <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80093b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80093b6:	4618      	mov	r0, r3
 80093b8:	372c      	adds	r7, #44	@ 0x2c
 80093ba:	46bd      	mov	sp, r7
 80093bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c0:	4770      	bx	lr

080093c2 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80093c2:	b480      	push	{r7}
 80093c4:	b085      	sub	sp, #20
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	695b      	ldr	r3, [r3, #20]
 80093ce:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	699b      	ldr	r3, [r3, #24]
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	4013      	ands	r3, r2
 80093d8:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80093da:	68fb      	ldr	r3, [r7, #12]
}
 80093dc:	4618      	mov	r0, r3
 80093de:	3714      	adds	r7, #20
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b085      	sub	sp, #20
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	460b      	mov	r3, r1
 80093f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80093f8:	78fb      	ldrb	r3, [r7, #3]
 80093fa:	015a      	lsls	r2, r3, #5
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	4413      	add	r3, r2
 8009400:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009404:	689b      	ldr	r3, [r3, #8]
 8009406:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8009408:	78fb      	ldrb	r3, [r7, #3]
 800940a:	015a      	lsls	r2, r3, #5
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	4413      	add	r3, r2
 8009410:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009414:	68db      	ldr	r3, [r3, #12]
 8009416:	68ba      	ldr	r2, [r7, #8]
 8009418:	4013      	ands	r3, r2
 800941a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800941c:	68bb      	ldr	r3, [r7, #8]
}
 800941e:	4618      	mov	r0, r3
 8009420:	3714      	adds	r7, #20
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr

0800942a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800942a:	b480      	push	{r7}
 800942c:	b083      	sub	sp, #12
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	695b      	ldr	r3, [r3, #20]
 8009436:	f003 0301 	and.w	r3, r3, #1
}
 800943a:	4618      	mov	r0, r3
 800943c:	370c      	adds	r7, #12
 800943e:	46bd      	mov	sp, r7
 8009440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009444:	4770      	bx	lr

08009446 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8009446:	b480      	push	{r7}
 8009448:	b085      	sub	sp, #20
 800944a:	af00      	add	r7, sp, #0
 800944c:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800944e:	2300      	movs	r3, #0
 8009450:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	3301      	adds	r3, #1
 8009456:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800945e:	d901      	bls.n	8009464 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009460:	2303      	movs	r3, #3
 8009462:	e01b      	b.n	800949c <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	691b      	ldr	r3, [r3, #16]
 8009468:	2b00      	cmp	r3, #0
 800946a:	daf2      	bge.n	8009452 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800946c:	2300      	movs	r3, #0
 800946e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	691b      	ldr	r3, [r3, #16]
 8009474:	f043 0201 	orr.w	r2, r3, #1
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	3301      	adds	r3, #1
 8009480:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009488:	d901      	bls.n	800948e <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800948a:	2303      	movs	r3, #3
 800948c:	e006      	b.n	800949c <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	691b      	ldr	r3, [r3, #16]
 8009492:	f003 0301 	and.w	r3, r3, #1
 8009496:	2b01      	cmp	r3, #1
 8009498:	d0f0      	beq.n	800947c <USB_CoreReset+0x36>

  return HAL_OK;
 800949a:	2300      	movs	r3, #0
}
 800949c:	4618      	mov	r0, r3
 800949e:	3714      	adds	r7, #20
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80094a8:	b084      	sub	sp, #16
 80094aa:	b580      	push	{r7, lr}
 80094ac:	b086      	sub	sp, #24
 80094ae:	af00      	add	r7, sp, #0
 80094b0:	6078      	str	r0, [r7, #4]
 80094b2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80094b6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80094ba:	2300      	movs	r3, #0
 80094bc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80094c8:	461a      	mov	r2, r3
 80094ca:	2300      	movs	r3, #0
 80094cc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094d2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094de:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80094ea:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	68db      	ldr	r3, [r3, #12]
 80094f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d119      	bne.n	8009532 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80094fe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009502:	2b01      	cmp	r3, #1
 8009504:	d10a      	bne.n	800951c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	68fa      	ldr	r2, [r7, #12]
 8009510:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009514:	f043 0304 	orr.w	r3, r3, #4
 8009518:	6013      	str	r3, [r2, #0]
 800951a:	e014      	b.n	8009546 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	68fa      	ldr	r2, [r7, #12]
 8009526:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800952a:	f023 0304 	bic.w	r3, r3, #4
 800952e:	6013      	str	r3, [r2, #0]
 8009530:	e009      	b.n	8009546 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	68fa      	ldr	r2, [r7, #12]
 800953c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009540:	f023 0304 	bic.w	r3, r3, #4
 8009544:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009546:	2110      	movs	r1, #16
 8009548:	6878      	ldr	r0, [r7, #4]
 800954a:	f7ff fe82 	bl	8009252 <USB_FlushTxFifo>
 800954e:	4603      	mov	r3, r0
 8009550:	2b00      	cmp	r3, #0
 8009552:	d001      	beq.n	8009558 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8009554:	2301      	movs	r3, #1
 8009556:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009558:	6878      	ldr	r0, [r7, #4]
 800955a:	f7ff feac 	bl	80092b6 <USB_FlushRxFifo>
 800955e:	4603      	mov	r3, r0
 8009560:	2b00      	cmp	r3, #0
 8009562:	d001      	beq.n	8009568 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8009564:	2301      	movs	r3, #1
 8009566:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009568:	2300      	movs	r3, #0
 800956a:	613b      	str	r3, [r7, #16]
 800956c:	e015      	b.n	800959a <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	015a      	lsls	r2, r3, #5
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	4413      	add	r3, r2
 8009576:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800957a:	461a      	mov	r2, r3
 800957c:	f04f 33ff 	mov.w	r3, #4294967295
 8009580:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009582:	693b      	ldr	r3, [r7, #16]
 8009584:	015a      	lsls	r2, r3, #5
 8009586:	68fb      	ldr	r3, [r7, #12]
 8009588:	4413      	add	r3, r2
 800958a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800958e:	461a      	mov	r2, r3
 8009590:	2300      	movs	r3, #0
 8009592:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009594:	693b      	ldr	r3, [r7, #16]
 8009596:	3301      	adds	r3, #1
 8009598:	613b      	str	r3, [r7, #16]
 800959a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800959e:	461a      	mov	r2, r3
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	4293      	cmp	r3, r2
 80095a4:	d3e3      	bcc.n	800956e <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	2200      	movs	r2, #0
 80095aa:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	f04f 32ff 	mov.w	r2, #4294967295
 80095b2:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	4a18      	ldr	r2, [pc, #96]	@ (8009618 <USB_HostInit+0x170>)
 80095b8:	4293      	cmp	r3, r2
 80095ba:	d10b      	bne.n	80095d4 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80095c2:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	4a15      	ldr	r2, [pc, #84]	@ (800961c <USB_HostInit+0x174>)
 80095c8:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	4a14      	ldr	r2, [pc, #80]	@ (8009620 <USB_HostInit+0x178>)
 80095ce:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80095d2:	e009      	b.n	80095e8 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2280      	movs	r2, #128	@ 0x80
 80095d8:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	4a11      	ldr	r2, [pc, #68]	@ (8009624 <USB_HostInit+0x17c>)
 80095de:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	4a11      	ldr	r2, [pc, #68]	@ (8009628 <USB_HostInit+0x180>)
 80095e4:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80095e8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d105      	bne.n	80095fc <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	699b      	ldr	r3, [r3, #24]
 80095f4:	f043 0210 	orr.w	r2, r3, #16
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	699a      	ldr	r2, [r3, #24]
 8009600:	4b0a      	ldr	r3, [pc, #40]	@ (800962c <USB_HostInit+0x184>)
 8009602:	4313      	orrs	r3, r2
 8009604:	687a      	ldr	r2, [r7, #4]
 8009606:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009608:	7dfb      	ldrb	r3, [r7, #23]
}
 800960a:	4618      	mov	r0, r3
 800960c:	3718      	adds	r7, #24
 800960e:	46bd      	mov	sp, r7
 8009610:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009614:	b004      	add	sp, #16
 8009616:	4770      	bx	lr
 8009618:	40040000 	.word	0x40040000
 800961c:	01000200 	.word	0x01000200
 8009620:	00e00300 	.word	0x00e00300
 8009624:	00600080 	.word	0x00600080
 8009628:	004000e0 	.word	0x004000e0
 800962c:	a3200008 	.word	0xa3200008

08009630 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009630:	b480      	push	{r7}
 8009632:	b085      	sub	sp, #20
 8009634:	af00      	add	r7, sp, #0
 8009636:	6078      	str	r0, [r7, #4]
 8009638:	460b      	mov	r3, r1
 800963a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	68fa      	ldr	r2, [r7, #12]
 800964a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800964e:	f023 0303 	bic.w	r3, r3, #3
 8009652:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009654:	68fb      	ldr	r3, [r7, #12]
 8009656:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	78fb      	ldrb	r3, [r7, #3]
 800965e:	f003 0303 	and.w	r3, r3, #3
 8009662:	68f9      	ldr	r1, [r7, #12]
 8009664:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8009668:	4313      	orrs	r3, r2
 800966a:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800966c:	78fb      	ldrb	r3, [r7, #3]
 800966e:	2b01      	cmp	r3, #1
 8009670:	d107      	bne.n	8009682 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8009672:	68fb      	ldr	r3, [r7, #12]
 8009674:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009678:	461a      	mov	r2, r3
 800967a:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800967e:	6053      	str	r3, [r2, #4]
 8009680:	e00c      	b.n	800969c <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8009682:	78fb      	ldrb	r3, [r7, #3]
 8009684:	2b02      	cmp	r3, #2
 8009686:	d107      	bne.n	8009698 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800968e:	461a      	mov	r2, r3
 8009690:	f241 7370 	movw	r3, #6000	@ 0x1770
 8009694:	6053      	str	r3, [r2, #4]
 8009696:	e001      	b.n	800969c <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8009698:	2301      	movs	r3, #1
 800969a:	e000      	b.n	800969e <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800969c:	2300      	movs	r3, #0
}
 800969e:	4618      	mov	r0, r3
 80096a0:	3714      	adds	r7, #20
 80096a2:	46bd      	mov	sp, r7
 80096a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a8:	4770      	bx	lr

080096aa <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80096aa:	b480      	push	{r7}
 80096ac:	b085      	sub	sp, #20
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80096bc:	695b      	ldr	r3, [r3, #20]
 80096be:	b29b      	uxth	r3, r3
}
 80096c0:	4618      	mov	r0, r3
 80096c2:	3714      	adds	r7, #20
 80096c4:	46bd      	mov	sp, r7
 80096c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ca:	4770      	bx	lr

080096cc <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b089      	sub	sp, #36	@ 0x24
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
 80096d4:	460b      	mov	r3, r1
 80096d6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80096dc:	78fb      	ldrb	r3, [r7, #3]
 80096de:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80096e0:	2300      	movs	r3, #0
 80096e2:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80096e4:	69bb      	ldr	r3, [r7, #24]
 80096e6:	015a      	lsls	r2, r3, #5
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	4413      	add	r3, r2
 80096ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	0c9b      	lsrs	r3, r3, #18
 80096f4:	f003 0303 	and.w	r3, r3, #3
 80096f8:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80096fa:	69bb      	ldr	r3, [r7, #24]
 80096fc:	015a      	lsls	r2, r3, #5
 80096fe:	69fb      	ldr	r3, [r7, #28]
 8009700:	4413      	add	r3, r2
 8009702:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	0fdb      	lsrs	r3, r3, #31
 800970a:	f003 0301 	and.w	r3, r3, #1
 800970e:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8009710:	69bb      	ldr	r3, [r7, #24]
 8009712:	015a      	lsls	r2, r3, #5
 8009714:	69fb      	ldr	r3, [r7, #28]
 8009716:	4413      	add	r3, r2
 8009718:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800971c:	685b      	ldr	r3, [r3, #4]
 800971e:	0fdb      	lsrs	r3, r3, #31
 8009720:	f003 0301 	and.w	r3, r3, #1
 8009724:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	689b      	ldr	r3, [r3, #8]
 800972a:	f003 0320 	and.w	r3, r3, #32
 800972e:	2b20      	cmp	r3, #32
 8009730:	d10d      	bne.n	800974e <USB_HC_Halt+0x82>
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d10a      	bne.n	800974e <USB_HC_Halt+0x82>
 8009738:	693b      	ldr	r3, [r7, #16]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d005      	beq.n	800974a <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800973e:	697b      	ldr	r3, [r7, #20]
 8009740:	2b01      	cmp	r3, #1
 8009742:	d002      	beq.n	800974a <USB_HC_Halt+0x7e>
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	2b03      	cmp	r3, #3
 8009748:	d101      	bne.n	800974e <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800974a:	2300      	movs	r3, #0
 800974c:	e0d8      	b.n	8009900 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800974e:	697b      	ldr	r3, [r7, #20]
 8009750:	2b00      	cmp	r3, #0
 8009752:	d002      	beq.n	800975a <USB_HC_Halt+0x8e>
 8009754:	697b      	ldr	r3, [r7, #20]
 8009756:	2b02      	cmp	r3, #2
 8009758:	d173      	bne.n	8009842 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800975a:	69bb      	ldr	r3, [r7, #24]
 800975c:	015a      	lsls	r2, r3, #5
 800975e:	69fb      	ldr	r3, [r7, #28]
 8009760:	4413      	add	r3, r2
 8009762:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	69ba      	ldr	r2, [r7, #24]
 800976a:	0151      	lsls	r1, r2, #5
 800976c:	69fa      	ldr	r2, [r7, #28]
 800976e:	440a      	add	r2, r1
 8009770:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009774:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009778:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	689b      	ldr	r3, [r3, #8]
 800977e:	f003 0320 	and.w	r3, r3, #32
 8009782:	2b00      	cmp	r3, #0
 8009784:	d14a      	bne.n	800981c <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800978a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800978e:	2b00      	cmp	r3, #0
 8009790:	d133      	bne.n	80097fa <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009792:	69bb      	ldr	r3, [r7, #24]
 8009794:	015a      	lsls	r2, r3, #5
 8009796:	69fb      	ldr	r3, [r7, #28]
 8009798:	4413      	add	r3, r2
 800979a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	69ba      	ldr	r2, [r7, #24]
 80097a2:	0151      	lsls	r1, r2, #5
 80097a4:	69fa      	ldr	r2, [r7, #28]
 80097a6:	440a      	add	r2, r1
 80097a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097ac:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80097b0:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80097b2:	69bb      	ldr	r3, [r7, #24]
 80097b4:	015a      	lsls	r2, r3, #5
 80097b6:	69fb      	ldr	r3, [r7, #28]
 80097b8:	4413      	add	r3, r2
 80097ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	69ba      	ldr	r2, [r7, #24]
 80097c2:	0151      	lsls	r1, r2, #5
 80097c4:	69fa      	ldr	r2, [r7, #28]
 80097c6:	440a      	add	r2, r1
 80097c8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80097d0:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80097d2:	68bb      	ldr	r3, [r7, #8]
 80097d4:	3301      	adds	r3, #1
 80097d6:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 80097d8:	68bb      	ldr	r3, [r7, #8]
 80097da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80097de:	d82e      	bhi.n	800983e <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80097e0:	69bb      	ldr	r3, [r7, #24]
 80097e2:	015a      	lsls	r2, r3, #5
 80097e4:	69fb      	ldr	r3, [r7, #28]
 80097e6:	4413      	add	r3, r2
 80097e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80097f2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80097f6:	d0ec      	beq.n	80097d2 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80097f8:	e081      	b.n	80098fe <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80097fa:	69bb      	ldr	r3, [r7, #24]
 80097fc:	015a      	lsls	r2, r3, #5
 80097fe:	69fb      	ldr	r3, [r7, #28]
 8009800:	4413      	add	r3, r2
 8009802:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	69ba      	ldr	r2, [r7, #24]
 800980a:	0151      	lsls	r1, r2, #5
 800980c:	69fa      	ldr	r2, [r7, #28]
 800980e:	440a      	add	r2, r1
 8009810:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009814:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009818:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800981a:	e070      	b.n	80098fe <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800981c:	69bb      	ldr	r3, [r7, #24]
 800981e:	015a      	lsls	r2, r3, #5
 8009820:	69fb      	ldr	r3, [r7, #28]
 8009822:	4413      	add	r3, r2
 8009824:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	69ba      	ldr	r2, [r7, #24]
 800982c:	0151      	lsls	r1, r2, #5
 800982e:	69fa      	ldr	r2, [r7, #28]
 8009830:	440a      	add	r2, r1
 8009832:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009836:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800983a:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800983c:	e05f      	b.n	80098fe <USB_HC_Halt+0x232>
            break;
 800983e:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8009840:	e05d      	b.n	80098fe <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8009842:	69bb      	ldr	r3, [r7, #24]
 8009844:	015a      	lsls	r2, r3, #5
 8009846:	69fb      	ldr	r3, [r7, #28]
 8009848:	4413      	add	r3, r2
 800984a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	69ba      	ldr	r2, [r7, #24]
 8009852:	0151      	lsls	r1, r2, #5
 8009854:	69fa      	ldr	r2, [r7, #28]
 8009856:	440a      	add	r2, r1
 8009858:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800985c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009860:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8009862:	69fb      	ldr	r3, [r7, #28]
 8009864:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009868:	691b      	ldr	r3, [r3, #16]
 800986a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800986e:	2b00      	cmp	r3, #0
 8009870:	d133      	bne.n	80098da <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8009872:	69bb      	ldr	r3, [r7, #24]
 8009874:	015a      	lsls	r2, r3, #5
 8009876:	69fb      	ldr	r3, [r7, #28]
 8009878:	4413      	add	r3, r2
 800987a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	69ba      	ldr	r2, [r7, #24]
 8009882:	0151      	lsls	r1, r2, #5
 8009884:	69fa      	ldr	r2, [r7, #28]
 8009886:	440a      	add	r2, r1
 8009888:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800988c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009890:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	015a      	lsls	r2, r3, #5
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	4413      	add	r3, r2
 800989a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	69ba      	ldr	r2, [r7, #24]
 80098a2:	0151      	lsls	r1, r2, #5
 80098a4:	69fa      	ldr	r2, [r7, #28]
 80098a6:	440a      	add	r2, r1
 80098a8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80098ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80098b0:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	3301      	adds	r3, #1
 80098b6:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80098b8:	68bb      	ldr	r3, [r7, #8]
 80098ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80098be:	d81d      	bhi.n	80098fc <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80098c0:	69bb      	ldr	r3, [r7, #24]
 80098c2:	015a      	lsls	r2, r3, #5
 80098c4:	69fb      	ldr	r3, [r7, #28]
 80098c6:	4413      	add	r3, r2
 80098c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098cc:	681b      	ldr	r3, [r3, #0]
 80098ce:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80098d2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80098d6:	d0ec      	beq.n	80098b2 <USB_HC_Halt+0x1e6>
 80098d8:	e011      	b.n	80098fe <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80098da:	69bb      	ldr	r3, [r7, #24]
 80098dc:	015a      	lsls	r2, r3, #5
 80098de:	69fb      	ldr	r3, [r7, #28]
 80098e0:	4413      	add	r3, r2
 80098e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	69ba      	ldr	r2, [r7, #24]
 80098ea:	0151      	lsls	r1, r2, #5
 80098ec:	69fa      	ldr	r2, [r7, #28]
 80098ee:	440a      	add	r2, r1
 80098f0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80098f4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80098f8:	6013      	str	r3, [r2, #0]
 80098fa:	e000      	b.n	80098fe <USB_HC_Halt+0x232>
          break;
 80098fc:	bf00      	nop
    }
  }

  return HAL_OK;
 80098fe:	2300      	movs	r3, #0
}
 8009900:	4618      	mov	r0, r3
 8009902:	3724      	adds	r7, #36	@ 0x24
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr

0800990c <memset>:
 800990c:	4402      	add	r2, r0
 800990e:	4603      	mov	r3, r0
 8009910:	4293      	cmp	r3, r2
 8009912:	d100      	bne.n	8009916 <memset+0xa>
 8009914:	4770      	bx	lr
 8009916:	f803 1b01 	strb.w	r1, [r3], #1
 800991a:	e7f9      	b.n	8009910 <memset+0x4>

0800991c <__libc_init_array>:
 800991c:	b570      	push	{r4, r5, r6, lr}
 800991e:	4d0d      	ldr	r5, [pc, #52]	@ (8009954 <__libc_init_array+0x38>)
 8009920:	4c0d      	ldr	r4, [pc, #52]	@ (8009958 <__libc_init_array+0x3c>)
 8009922:	1b64      	subs	r4, r4, r5
 8009924:	10a4      	asrs	r4, r4, #2
 8009926:	2600      	movs	r6, #0
 8009928:	42a6      	cmp	r6, r4
 800992a:	d109      	bne.n	8009940 <__libc_init_array+0x24>
 800992c:	4d0b      	ldr	r5, [pc, #44]	@ (800995c <__libc_init_array+0x40>)
 800992e:	4c0c      	ldr	r4, [pc, #48]	@ (8009960 <__libc_init_array+0x44>)
 8009930:	f000 f818 	bl	8009964 <_init>
 8009934:	1b64      	subs	r4, r4, r5
 8009936:	10a4      	asrs	r4, r4, #2
 8009938:	2600      	movs	r6, #0
 800993a:	42a6      	cmp	r6, r4
 800993c:	d105      	bne.n	800994a <__libc_init_array+0x2e>
 800993e:	bd70      	pop	{r4, r5, r6, pc}
 8009940:	f855 3b04 	ldr.w	r3, [r5], #4
 8009944:	4798      	blx	r3
 8009946:	3601      	adds	r6, #1
 8009948:	e7ee      	b.n	8009928 <__libc_init_array+0xc>
 800994a:	f855 3b04 	ldr.w	r3, [r5], #4
 800994e:	4798      	blx	r3
 8009950:	3601      	adds	r6, #1
 8009952:	e7f2      	b.n	800993a <__libc_init_array+0x1e>
 8009954:	0800b534 	.word	0x0800b534
 8009958:	0800b534 	.word	0x0800b534
 800995c:	0800b534 	.word	0x0800b534
 8009960:	0800b538 	.word	0x0800b538

08009964 <_init>:
 8009964:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009966:	bf00      	nop
 8009968:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800996a:	bc08      	pop	{r3}
 800996c:	469e      	mov	lr, r3
 800996e:	4770      	bx	lr

08009970 <_fini>:
 8009970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009972:	bf00      	nop
 8009974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009976:	bc08      	pop	{r3}
 8009978:	469e      	mov	lr, r3
 800997a:	4770      	bx	lr
