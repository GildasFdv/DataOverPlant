
data-over-plant.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bc40  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  0800bdf0  0800bdf0  0000cdf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be80  0800be80  0000d07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800be80  0800be80  0000ce80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be88  0800be88  0000d07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be88  0800be88  0000ce88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800be8c  0800be8c  0000ce8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800be90  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d07c  2**0
                  CONTENTS
 10 .bss          00000bd4  2000007c  2000007c  0000d07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000c50  20000c50  0000d07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000224ab  00000000  00000000  0000d0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ac4  00000000  00000000  0002f557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cd8  00000000  00000000  00034020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001665  00000000  00000000  00035cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00028ff8  00000000  00000000  0003735d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024792  00000000  00000000  00060355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ec22a  00000000  00000000  00084ae7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00170d11  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000080dc  00000000  00000000  00170d54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  00178e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800bdd8 	.word	0x0800bdd8

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000080 	.word	0x20000080
 80001ec:	0800bdd8 	.word	0x0800bdd8

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b988 	b.w	80005c8 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	468e      	mov	lr, r1
 80002d8:	4604      	mov	r4, r0
 80002da:	4688      	mov	r8, r1
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d14a      	bne.n	8000376 <__udivmoddi4+0xa6>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d962      	bls.n	80003ac <__udivmoddi4+0xdc>
 80002e6:	fab2 f682 	clz	r6, r2
 80002ea:	b14e      	cbz	r6, 8000300 <__udivmoddi4+0x30>
 80002ec:	f1c6 0320 	rsb	r3, r6, #32
 80002f0:	fa01 f806 	lsl.w	r8, r1, r6
 80002f4:	fa20 f303 	lsr.w	r3, r0, r3
 80002f8:	40b7      	lsls	r7, r6
 80002fa:	ea43 0808 	orr.w	r8, r3, r8
 80002fe:	40b4      	lsls	r4, r6
 8000300:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	fbb8 f1fe 	udiv	r1, r8, lr
 800030c:	0c23      	lsrs	r3, r4, #16
 800030e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000312:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000316:	fb01 f20c 	mul.w	r2, r1, ip
 800031a:	429a      	cmp	r2, r3
 800031c:	d909      	bls.n	8000332 <__udivmoddi4+0x62>
 800031e:	18fb      	adds	r3, r7, r3
 8000320:	f101 30ff 	add.w	r0, r1, #4294967295
 8000324:	f080 80ea 	bcs.w	80004fc <__udivmoddi4+0x22c>
 8000328:	429a      	cmp	r2, r3
 800032a:	f240 80e7 	bls.w	80004fc <__udivmoddi4+0x22c>
 800032e:	3902      	subs	r1, #2
 8000330:	443b      	add	r3, r7
 8000332:	1a9a      	subs	r2, r3, r2
 8000334:	b2a3      	uxth	r3, r4
 8000336:	fbb2 f0fe 	udiv	r0, r2, lr
 800033a:	fb0e 2210 	mls	r2, lr, r0, r2
 800033e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000342:	fb00 fc0c 	mul.w	ip, r0, ip
 8000346:	459c      	cmp	ip, r3
 8000348:	d909      	bls.n	800035e <__udivmoddi4+0x8e>
 800034a:	18fb      	adds	r3, r7, r3
 800034c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000350:	f080 80d6 	bcs.w	8000500 <__udivmoddi4+0x230>
 8000354:	459c      	cmp	ip, r3
 8000356:	f240 80d3 	bls.w	8000500 <__udivmoddi4+0x230>
 800035a:	443b      	add	r3, r7
 800035c:	3802      	subs	r0, #2
 800035e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000362:	eba3 030c 	sub.w	r3, r3, ip
 8000366:	2100      	movs	r1, #0
 8000368:	b11d      	cbz	r5, 8000372 <__udivmoddi4+0xa2>
 800036a:	40f3      	lsrs	r3, r6
 800036c:	2200      	movs	r2, #0
 800036e:	e9c5 3200 	strd	r3, r2, [r5]
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	428b      	cmp	r3, r1
 8000378:	d905      	bls.n	8000386 <__udivmoddi4+0xb6>
 800037a:	b10d      	cbz	r5, 8000380 <__udivmoddi4+0xb0>
 800037c:	e9c5 0100 	strd	r0, r1, [r5]
 8000380:	2100      	movs	r1, #0
 8000382:	4608      	mov	r0, r1
 8000384:	e7f5      	b.n	8000372 <__udivmoddi4+0xa2>
 8000386:	fab3 f183 	clz	r1, r3
 800038a:	2900      	cmp	r1, #0
 800038c:	d146      	bne.n	800041c <__udivmoddi4+0x14c>
 800038e:	4573      	cmp	r3, lr
 8000390:	d302      	bcc.n	8000398 <__udivmoddi4+0xc8>
 8000392:	4282      	cmp	r2, r0
 8000394:	f200 8105 	bhi.w	80005a2 <__udivmoddi4+0x2d2>
 8000398:	1a84      	subs	r4, r0, r2
 800039a:	eb6e 0203 	sbc.w	r2, lr, r3
 800039e:	2001      	movs	r0, #1
 80003a0:	4690      	mov	r8, r2
 80003a2:	2d00      	cmp	r5, #0
 80003a4:	d0e5      	beq.n	8000372 <__udivmoddi4+0xa2>
 80003a6:	e9c5 4800 	strd	r4, r8, [r5]
 80003aa:	e7e2      	b.n	8000372 <__udivmoddi4+0xa2>
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f000 8090 	beq.w	80004d2 <__udivmoddi4+0x202>
 80003b2:	fab2 f682 	clz	r6, r2
 80003b6:	2e00      	cmp	r6, #0
 80003b8:	f040 80a4 	bne.w	8000504 <__udivmoddi4+0x234>
 80003bc:	1a8a      	subs	r2, r1, r2
 80003be:	0c03      	lsrs	r3, r0, #16
 80003c0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003c4:	b280      	uxth	r0, r0
 80003c6:	b2bc      	uxth	r4, r7
 80003c8:	2101      	movs	r1, #1
 80003ca:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ce:	fb0e 221c 	mls	r2, lr, ip, r2
 80003d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003d6:	fb04 f20c 	mul.w	r2, r4, ip
 80003da:	429a      	cmp	r2, r3
 80003dc:	d907      	bls.n	80003ee <__udivmoddi4+0x11e>
 80003de:	18fb      	adds	r3, r7, r3
 80003e0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x11c>
 80003e6:	429a      	cmp	r2, r3
 80003e8:	f200 80e0 	bhi.w	80005ac <__udivmoddi4+0x2dc>
 80003ec:	46c4      	mov	ip, r8
 80003ee:	1a9b      	subs	r3, r3, r2
 80003f0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003f4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003f8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003fc:	fb02 f404 	mul.w	r4, r2, r4
 8000400:	429c      	cmp	r4, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x144>
 8000404:	18fb      	adds	r3, r7, r3
 8000406:	f102 30ff 	add.w	r0, r2, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x142>
 800040c:	429c      	cmp	r4, r3
 800040e:	f200 80ca 	bhi.w	80005a6 <__udivmoddi4+0x2d6>
 8000412:	4602      	mov	r2, r0
 8000414:	1b1b      	subs	r3, r3, r4
 8000416:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800041a:	e7a5      	b.n	8000368 <__udivmoddi4+0x98>
 800041c:	f1c1 0620 	rsb	r6, r1, #32
 8000420:	408b      	lsls	r3, r1
 8000422:	fa22 f706 	lsr.w	r7, r2, r6
 8000426:	431f      	orrs	r7, r3
 8000428:	fa0e f401 	lsl.w	r4, lr, r1
 800042c:	fa20 f306 	lsr.w	r3, r0, r6
 8000430:	fa2e fe06 	lsr.w	lr, lr, r6
 8000434:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000438:	4323      	orrs	r3, r4
 800043a:	fa00 f801 	lsl.w	r8, r0, r1
 800043e:	fa1f fc87 	uxth.w	ip, r7
 8000442:	fbbe f0f9 	udiv	r0, lr, r9
 8000446:	0c1c      	lsrs	r4, r3, #16
 8000448:	fb09 ee10 	mls	lr, r9, r0, lr
 800044c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000450:	fb00 fe0c 	mul.w	lr, r0, ip
 8000454:	45a6      	cmp	lr, r4
 8000456:	fa02 f201 	lsl.w	r2, r2, r1
 800045a:	d909      	bls.n	8000470 <__udivmoddi4+0x1a0>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000462:	f080 809c 	bcs.w	800059e <__udivmoddi4+0x2ce>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f240 8099 	bls.w	800059e <__udivmoddi4+0x2ce>
 800046c:	3802      	subs	r0, #2
 800046e:	443c      	add	r4, r7
 8000470:	eba4 040e 	sub.w	r4, r4, lr
 8000474:	fa1f fe83 	uxth.w	lr, r3
 8000478:	fbb4 f3f9 	udiv	r3, r4, r9
 800047c:	fb09 4413 	mls	r4, r9, r3, r4
 8000480:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000484:	fb03 fc0c 	mul.w	ip, r3, ip
 8000488:	45a4      	cmp	ip, r4
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x1ce>
 800048c:	193c      	adds	r4, r7, r4
 800048e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000492:	f080 8082 	bcs.w	800059a <__udivmoddi4+0x2ca>
 8000496:	45a4      	cmp	ip, r4
 8000498:	d97f      	bls.n	800059a <__udivmoddi4+0x2ca>
 800049a:	3b02      	subs	r3, #2
 800049c:	443c      	add	r4, r7
 800049e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004a2:	eba4 040c 	sub.w	r4, r4, ip
 80004a6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004aa:	4564      	cmp	r4, ip
 80004ac:	4673      	mov	r3, lr
 80004ae:	46e1      	mov	r9, ip
 80004b0:	d362      	bcc.n	8000578 <__udivmoddi4+0x2a8>
 80004b2:	d05f      	beq.n	8000574 <__udivmoddi4+0x2a4>
 80004b4:	b15d      	cbz	r5, 80004ce <__udivmoddi4+0x1fe>
 80004b6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ba:	eb64 0409 	sbc.w	r4, r4, r9
 80004be:	fa04 f606 	lsl.w	r6, r4, r6
 80004c2:	fa22 f301 	lsr.w	r3, r2, r1
 80004c6:	431e      	orrs	r6, r3
 80004c8:	40cc      	lsrs	r4, r1
 80004ca:	e9c5 6400 	strd	r6, r4, [r5]
 80004ce:	2100      	movs	r1, #0
 80004d0:	e74f      	b.n	8000372 <__udivmoddi4+0xa2>
 80004d2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004d6:	0c01      	lsrs	r1, r0, #16
 80004d8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004dc:	b280      	uxth	r0, r0
 80004de:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004e2:	463b      	mov	r3, r7
 80004e4:	4638      	mov	r0, r7
 80004e6:	463c      	mov	r4, r7
 80004e8:	46b8      	mov	r8, r7
 80004ea:	46be      	mov	lr, r7
 80004ec:	2620      	movs	r6, #32
 80004ee:	fbb1 f1f7 	udiv	r1, r1, r7
 80004f2:	eba2 0208 	sub.w	r2, r2, r8
 80004f6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004fa:	e766      	b.n	80003ca <__udivmoddi4+0xfa>
 80004fc:	4601      	mov	r1, r0
 80004fe:	e718      	b.n	8000332 <__udivmoddi4+0x62>
 8000500:	4610      	mov	r0, r2
 8000502:	e72c      	b.n	800035e <__udivmoddi4+0x8e>
 8000504:	f1c6 0220 	rsb	r2, r6, #32
 8000508:	fa2e f302 	lsr.w	r3, lr, r2
 800050c:	40b7      	lsls	r7, r6
 800050e:	40b1      	lsls	r1, r6
 8000510:	fa20 f202 	lsr.w	r2, r0, r2
 8000514:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000518:	430a      	orrs	r2, r1
 800051a:	fbb3 f8fe 	udiv	r8, r3, lr
 800051e:	b2bc      	uxth	r4, r7
 8000520:	fb0e 3318 	mls	r3, lr, r8, r3
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb08 f904 	mul.w	r9, r8, r4
 800052e:	40b0      	lsls	r0, r6
 8000530:	4589      	cmp	r9, r1
 8000532:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000536:	b280      	uxth	r0, r0
 8000538:	d93e      	bls.n	80005b8 <__udivmoddi4+0x2e8>
 800053a:	1879      	adds	r1, r7, r1
 800053c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000540:	d201      	bcs.n	8000546 <__udivmoddi4+0x276>
 8000542:	4589      	cmp	r9, r1
 8000544:	d81f      	bhi.n	8000586 <__udivmoddi4+0x2b6>
 8000546:	eba1 0109 	sub.w	r1, r1, r9
 800054a:	fbb1 f9fe 	udiv	r9, r1, lr
 800054e:	fb09 f804 	mul.w	r8, r9, r4
 8000552:	fb0e 1119 	mls	r1, lr, r9, r1
 8000556:	b292      	uxth	r2, r2
 8000558:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800055c:	4542      	cmp	r2, r8
 800055e:	d229      	bcs.n	80005b4 <__udivmoddi4+0x2e4>
 8000560:	18ba      	adds	r2, r7, r2
 8000562:	f109 31ff 	add.w	r1, r9, #4294967295
 8000566:	d2c4      	bcs.n	80004f2 <__udivmoddi4+0x222>
 8000568:	4542      	cmp	r2, r8
 800056a:	d2c2      	bcs.n	80004f2 <__udivmoddi4+0x222>
 800056c:	f1a9 0102 	sub.w	r1, r9, #2
 8000570:	443a      	add	r2, r7
 8000572:	e7be      	b.n	80004f2 <__udivmoddi4+0x222>
 8000574:	45f0      	cmp	r8, lr
 8000576:	d29d      	bcs.n	80004b4 <__udivmoddi4+0x1e4>
 8000578:	ebbe 0302 	subs.w	r3, lr, r2
 800057c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000580:	3801      	subs	r0, #1
 8000582:	46e1      	mov	r9, ip
 8000584:	e796      	b.n	80004b4 <__udivmoddi4+0x1e4>
 8000586:	eba7 0909 	sub.w	r9, r7, r9
 800058a:	4449      	add	r1, r9
 800058c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000590:	fbb1 f9fe 	udiv	r9, r1, lr
 8000594:	fb09 f804 	mul.w	r8, r9, r4
 8000598:	e7db      	b.n	8000552 <__udivmoddi4+0x282>
 800059a:	4673      	mov	r3, lr
 800059c:	e77f      	b.n	800049e <__udivmoddi4+0x1ce>
 800059e:	4650      	mov	r0, sl
 80005a0:	e766      	b.n	8000470 <__udivmoddi4+0x1a0>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e6fd      	b.n	80003a2 <__udivmoddi4+0xd2>
 80005a6:	443b      	add	r3, r7
 80005a8:	3a02      	subs	r2, #2
 80005aa:	e733      	b.n	8000414 <__udivmoddi4+0x144>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	443b      	add	r3, r7
 80005b2:	e71c      	b.n	80003ee <__udivmoddi4+0x11e>
 80005b4:	4649      	mov	r1, r9
 80005b6:	e79c      	b.n	80004f2 <__udivmoddi4+0x222>
 80005b8:	eba1 0109 	sub.w	r1, r1, r9
 80005bc:	46c4      	mov	ip, r8
 80005be:	fbb1 f9fe 	udiv	r9, r1, lr
 80005c2:	fb09 f804 	mul.w	r8, r9, r4
 80005c6:	e7c4      	b.n	8000552 <__udivmoddi4+0x282>

080005c8 <__aeabi_idiv0>:
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop

080005cc <serial_print>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void serial_print(char* str)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 80005d4:	6878      	ldr	r0, [r7, #4]
 80005d6:	f7ff fe0b 	bl	80001f0 <strlen>
 80005da:	4603      	mov	r3, r0
 80005dc:	b29a      	uxth	r2, r3
 80005de:	f04f 33ff 	mov.w	r3, #4294967295
 80005e2:	6879      	ldr	r1, [r7, #4]
 80005e4:	4803      	ldr	r0, [pc, #12]	@ (80005f4 <serial_print+0x28>)
 80005e6:	f006 fdb3 	bl	8007150 <HAL_UART_Transmit>
}
 80005ea:	bf00      	nop
 80005ec:	3708      	adds	r7, #8
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	2000027c 	.word	0x2000027c

080005f8 <read_register>:
    HAL_SPI_Transmit(&hspi5, data, 2, HAL_MAX_DELAY);
    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);   // NSS high
}

uint8_t read_register(uint8_t addr)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b084      	sub	sp, #16
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	71fb      	strb	r3, [r7, #7]
    uint8_t value = 0;
 8000602:	2300      	movs	r3, #0
 8000604:	73fb      	strb	r3, [r7, #15]
    uint8_t reg_addr = addr & 0x7F; // bit 7 à 0 pour lecture (mask pour s'assurer que le bit 7 est à 0)
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800060c:	b2db      	uxtb	r3, r3
 800060e:	73bb      	strb	r3, [r7, #14]

    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_RESET); // NSS low
 8000610:	2200      	movs	r2, #0
 8000612:	2140      	movs	r1, #64	@ 0x40
 8000614:	480e      	ldr	r0, [pc, #56]	@ (8000650 <read_register+0x58>)
 8000616:	f001 fdcf 	bl	80021b8 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&hspi5, &reg_addr, 1, HAL_MAX_DELAY); // Envoyer l'adresse du registre
 800061a:	f107 010e 	add.w	r1, r7, #14
 800061e:	f04f 33ff 	mov.w	r3, #4294967295
 8000622:	2201      	movs	r2, #1
 8000624:	480b      	ldr	r0, [pc, #44]	@ (8000654 <read_register+0x5c>)
 8000626:	f005 fb84 	bl	8005d32 <HAL_SPI_Transmit>
    HAL_SPI_Receive(&hspi5, &value, 1, HAL_MAX_DELAY);     // Lire la valeur du registre
 800062a:	f107 010f 	add.w	r1, r7, #15
 800062e:	f04f 33ff 	mov.w	r3, #4294967295
 8000632:	2201      	movs	r2, #1
 8000634:	4807      	ldr	r0, [pc, #28]	@ (8000654 <read_register+0x5c>)
 8000636:	f005 fcc0 	bl	8005fba <HAL_SPI_Receive>
    HAL_GPIO_WritePin(LORA_NSS_GPIO_Port, LORA_NSS_Pin, GPIO_PIN_SET);   // NSS high
 800063a:	2201      	movs	r2, #1
 800063c:	2140      	movs	r1, #64	@ 0x40
 800063e:	4804      	ldr	r0, [pc, #16]	@ (8000650 <read_register+0x58>)
 8000640:	f001 fdba 	bl	80021b8 <HAL_GPIO_WritePin>

    return value;
 8000644:	7bfb      	ldrb	r3, [r7, #15]
}
 8000646:	4618      	mov	r0, r3
 8000648:	3710      	adds	r7, #16
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40021400 	.word	0x40021400
 8000654:	200001dc 	.word	0x200001dc

08000658 <lora_reset>:
	// Passage en mode émetteur
	write_register(0x01, 0x83); // TX mode + LoRa
}

void lora_reset(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_RESET);
 800065c:	2200      	movs	r2, #0
 800065e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000662:	4808      	ldr	r0, [pc, #32]	@ (8000684 <lora_reset+0x2c>)
 8000664:	f001 fda8 	bl	80021b8 <HAL_GPIO_WritePin>
    HAL_Delay(10); // maintenir RESET à 0 pendant 10ms
 8000668:	200a      	movs	r0, #10
 800066a:	f001 f8eb 	bl	8001844 <HAL_Delay>
    HAL_GPIO_WritePin(LORA_RST_GPIO_Port, LORA_RST_Pin, GPIO_PIN_SET);
 800066e:	2201      	movs	r2, #1
 8000670:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000674:	4803      	ldr	r0, [pc, #12]	@ (8000684 <lora_reset+0x2c>)
 8000676:	f001 fd9f 	bl	80021b8 <HAL_GPIO_WritePin>
    HAL_Delay(10); // attendre encore un peu après le relâchement
 800067a:	200a      	movs	r0, #10
 800067c:	f001 f8e2 	bl	8001844 <HAL_Delay>
}
 8000680:	bf00      	nop
 8000682:	bd80      	pop	{r7, pc}
 8000684:	40021400 	.word	0x40021400

08000688 <lora_version>:

uint8_t lora_version(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b08a      	sub	sp, #40	@ 0x28
 800068c:	af00      	add	r7, sp, #0
	uint8_t version = read_register(0x42);
 800068e:	2042      	movs	r0, #66	@ 0x42
 8000690:	f7ff ffb2 	bl	80005f8 <read_register>
 8000694:	4603      	mov	r3, r0
 8000696:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

	char buf[32];
	snprintf(buf, sizeof(buf), "RegVersion = 0x%02X\r\n", version);
 800069a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800069e:	1d38      	adds	r0, r7, #4
 80006a0:	4a0c      	ldr	r2, [pc, #48]	@ (80006d4 <lora_version+0x4c>)
 80006a2:	2120      	movs	r1, #32
 80006a4:	f00a ff92 	bl	800b5cc <sniprintf>
	serial_print(buf);
 80006a8:	1d3b      	adds	r3, r7, #4
 80006aa:	4618      	mov	r0, r3
 80006ac:	f7ff ff8e 	bl	80005cc <serial_print>

	if (version == 0x12) {
 80006b0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80006b4:	2b12      	cmp	r3, #18
 80006b6:	d103      	bne.n	80006c0 <lora_version+0x38>
		serial_print("RFM95 détecté\r\n");
 80006b8:	4807      	ldr	r0, [pc, #28]	@ (80006d8 <lora_version+0x50>)
 80006ba:	f7ff ff87 	bl	80005cc <serial_print>
 80006be:	e002      	b.n	80006c6 <lora_version+0x3e>
	} else {
		serial_print("Erreur RFM95 !\r\n");
 80006c0:	4806      	ldr	r0, [pc, #24]	@ (80006dc <lora_version+0x54>)
 80006c2:	f7ff ff83 	bl	80005cc <serial_print>
	}

	return version;
 80006c6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	3728      	adds	r7, #40	@ 0x28
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	0800bdf0 	.word	0x0800bdf0
 80006d8:	0800be08 	.word	0x0800be08
 80006dc:	0800be1c 	.word	0x0800be1c

080006e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e4:	f001 f86c 	bl	80017c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e8:	f000 f81c 	bl	8000724 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006ec:	f000 fa8a 	bl	8000c04 <MX_GPIO_Init>
  MX_CRC_Init();
 80006f0:	f000 f882 	bl	80007f8 <MX_CRC_Init>
  MX_DMA2D_Init();
 80006f4:	f000 f894 	bl	8000820 <MX_DMA2D_Init>
  MX_FMC_Init();
 80006f8:	f000 fa34 	bl	8000b64 <MX_FMC_Init>
  MX_I2C3_Init();
 80006fc:	f000 f8c2 	bl	8000884 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000700:	f000 f900 	bl	8000904 <MX_LTDC_Init>
  MX_SPI5_Init();
 8000704:	f000 f97e 	bl	8000a04 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000708:	f000 f9b2 	bl	8000a70 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 800070c:	f000 fa00 	bl	8000b10 <MX_USART1_UART_Init>
  MX_USB_HOST_Init();
 8000710:	f00a fb8e 	bl	800ae30 <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
#ifdef RECEIVER
#endif

#ifdef TRANSMITTER
  lora_reset();
 8000714:	f7ff ffa0 	bl	8000658 <lora_reset>
  //init_lora();
  lora_version();
 8000718:	f7ff ffb6 	bl	8000688 <lora_version>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800071c:	f00a fbae 	bl	800ae7c <MX_USB_HOST_Process>
 8000720:	e7fc      	b.n	800071c <main+0x3c>
	...

08000724 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b094      	sub	sp, #80	@ 0x50
 8000728:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800072a:	f107 0320 	add.w	r3, r7, #32
 800072e:	2230      	movs	r2, #48	@ 0x30
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f00a ff80 	bl	800b638 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000738:	f107 030c 	add.w	r3, r7, #12
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000748:	2300      	movs	r3, #0
 800074a:	60bb      	str	r3, [r7, #8]
 800074c:	4b28      	ldr	r3, [pc, #160]	@ (80007f0 <SystemClock_Config+0xcc>)
 800074e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000750:	4a27      	ldr	r2, [pc, #156]	@ (80007f0 <SystemClock_Config+0xcc>)
 8000752:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000756:	6413      	str	r3, [r2, #64]	@ 0x40
 8000758:	4b25      	ldr	r3, [pc, #148]	@ (80007f0 <SystemClock_Config+0xcc>)
 800075a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800075c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000760:	60bb      	str	r3, [r7, #8]
 8000762:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000764:	2300      	movs	r3, #0
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	4b22      	ldr	r3, [pc, #136]	@ (80007f4 <SystemClock_Config+0xd0>)
 800076a:	681b      	ldr	r3, [r3, #0]
 800076c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000770:	4a20      	ldr	r2, [pc, #128]	@ (80007f4 <SystemClock_Config+0xd0>)
 8000772:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000776:	6013      	str	r3, [r2, #0]
 8000778:	4b1e      	ldr	r3, [pc, #120]	@ (80007f4 <SystemClock_Config+0xd0>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000780:	607b      	str	r3, [r7, #4]
 8000782:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000784:	2301      	movs	r3, #1
 8000786:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000788:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800078c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800078e:	2302      	movs	r3, #2
 8000790:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000792:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000796:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000798:	2304      	movs	r3, #4
 800079a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800079c:	2348      	movs	r3, #72	@ 0x48
 800079e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80007a4:	2303      	movs	r3, #3
 80007a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007a8:	f107 0320 	add.w	r3, r7, #32
 80007ac:	4618      	mov	r0, r3
 80007ae:	f004 fb79 	bl	8004ea4 <HAL_RCC_OscConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007b8:	f000 fb5c 	bl	8000e74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007bc:	230f      	movs	r3, #15
 80007be:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007c0:	2302      	movs	r3, #2
 80007c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007c4:	2300      	movs	r3, #0
 80007c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007ce:	2300      	movs	r3, #0
 80007d0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007d2:	f107 030c 	add.w	r3, r7, #12
 80007d6:	2102      	movs	r1, #2
 80007d8:	4618      	mov	r0, r3
 80007da:	f004 fddb 	bl	8005394 <HAL_RCC_ClockConfig>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	d001      	beq.n	80007e8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80007e4:	f000 fb46 	bl	8000e74 <Error_Handler>
  }
}
 80007e8:	bf00      	nop
 80007ea:	3750      	adds	r7, #80	@ 0x50
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40007000 	.word	0x40007000

080007f8 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80007fc:	4b06      	ldr	r3, [pc, #24]	@ (8000818 <MX_CRC_Init+0x20>)
 80007fe:	4a07      	ldr	r2, [pc, #28]	@ (800081c <MX_CRC_Init+0x24>)
 8000800:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000802:	4805      	ldr	r0, [pc, #20]	@ (8000818 <MX_CRC_Init+0x20>)
 8000804:	f001 f924 	bl	8001a50 <HAL_CRC_Init>
 8000808:	4603      	mov	r3, r0
 800080a:	2b00      	cmp	r3, #0
 800080c:	d001      	beq.n	8000812 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 800080e:	f000 fb31 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000098 	.word	0x20000098
 800081c:	40023000 	.word	0x40023000

08000820 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000824:	4b15      	ldr	r3, [pc, #84]	@ (800087c <MX_DMA2D_Init+0x5c>)
 8000826:	4a16      	ldr	r2, [pc, #88]	@ (8000880 <MX_DMA2D_Init+0x60>)
 8000828:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800082a:	4b14      	ldr	r3, [pc, #80]	@ (800087c <MX_DMA2D_Init+0x5c>)
 800082c:	2200      	movs	r2, #0
 800082e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000830:	4b12      	ldr	r3, [pc, #72]	@ (800087c <MX_DMA2D_Init+0x5c>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000836:	4b11      	ldr	r3, [pc, #68]	@ (800087c <MX_DMA2D_Init+0x5c>)
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 800083c:	4b0f      	ldr	r3, [pc, #60]	@ (800087c <MX_DMA2D_Init+0x5c>)
 800083e:	2200      	movs	r2, #0
 8000840:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000842:	4b0e      	ldr	r3, [pc, #56]	@ (800087c <MX_DMA2D_Init+0x5c>)
 8000844:	2200      	movs	r2, #0
 8000846:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000848:	4b0c      	ldr	r3, [pc, #48]	@ (800087c <MX_DMA2D_Init+0x5c>)
 800084a:	2200      	movs	r2, #0
 800084c:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 800084e:	4b0b      	ldr	r3, [pc, #44]	@ (800087c <MX_DMA2D_Init+0x5c>)
 8000850:	2200      	movs	r2, #0
 8000852:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000854:	4809      	ldr	r0, [pc, #36]	@ (800087c <MX_DMA2D_Init+0x5c>)
 8000856:	f001 f917 	bl	8001a88 <HAL_DMA2D_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000860:	f000 fb08 	bl	8000e74 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000864:	2101      	movs	r1, #1
 8000866:	4805      	ldr	r0, [pc, #20]	@ (800087c <MX_DMA2D_Init+0x5c>)
 8000868:	f001 fa68 	bl	8001d3c <HAL_DMA2D_ConfigLayer>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000872:	f000 faff 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000876:	bf00      	nop
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200000a0 	.word	0x200000a0
 8000880:	4002b000 	.word	0x4002b000

08000884 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000888:	4b1b      	ldr	r3, [pc, #108]	@ (80008f8 <MX_I2C3_Init+0x74>)
 800088a:	4a1c      	ldr	r2, [pc, #112]	@ (80008fc <MX_I2C3_Init+0x78>)
 800088c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 800088e:	4b1a      	ldr	r3, [pc, #104]	@ (80008f8 <MX_I2C3_Init+0x74>)
 8000890:	4a1b      	ldr	r2, [pc, #108]	@ (8000900 <MX_I2C3_Init+0x7c>)
 8000892:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000894:	4b18      	ldr	r3, [pc, #96]	@ (80008f8 <MX_I2C3_Init+0x74>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800089a:	4b17      	ldr	r3, [pc, #92]	@ (80008f8 <MX_I2C3_Init+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a0:	4b15      	ldr	r3, [pc, #84]	@ (80008f8 <MX_I2C3_Init+0x74>)
 80008a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80008a6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008a8:	4b13      	ldr	r3, [pc, #76]	@ (80008f8 <MX_I2C3_Init+0x74>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80008ae:	4b12      	ldr	r3, [pc, #72]	@ (80008f8 <MX_I2C3_Init+0x74>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008b4:	4b10      	ldr	r3, [pc, #64]	@ (80008f8 <MX_I2C3_Init+0x74>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008ba:	4b0f      	ldr	r3, [pc, #60]	@ (80008f8 <MX_I2C3_Init+0x74>)
 80008bc:	2200      	movs	r2, #0
 80008be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80008c0:	480d      	ldr	r0, [pc, #52]	@ (80008f8 <MX_I2C3_Init+0x74>)
 80008c2:	f003 fdc7 	bl	8004454 <HAL_I2C_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80008cc:	f000 fad2 	bl	8000e74 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008d0:	2100      	movs	r1, #0
 80008d2:	4809      	ldr	r0, [pc, #36]	@ (80008f8 <MX_I2C3_Init+0x74>)
 80008d4:	f003 ff02 	bl	80046dc <HAL_I2CEx_ConfigAnalogFilter>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_I2C3_Init+0x5e>
  {
    Error_Handler();
 80008de:	f000 fac9 	bl	8000e74 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80008e2:	2100      	movs	r1, #0
 80008e4:	4804      	ldr	r0, [pc, #16]	@ (80008f8 <MX_I2C3_Init+0x74>)
 80008e6:	f003 ff35 	bl	8004754 <HAL_I2CEx_ConfigDigitalFilter>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_I2C3_Init+0x70>
  {
    Error_Handler();
 80008f0:	f000 fac0 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80008f4:	bf00      	nop
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	200000e0 	.word	0x200000e0
 80008fc:	40005c00 	.word	0x40005c00
 8000900:	000186a0 	.word	0x000186a0

08000904 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08e      	sub	sp, #56	@ 0x38
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800090a:	1d3b      	adds	r3, r7, #4
 800090c:	2234      	movs	r2, #52	@ 0x34
 800090e:	2100      	movs	r1, #0
 8000910:	4618      	mov	r0, r3
 8000912:	f00a fe91 	bl	800b638 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000916:	4b39      	ldr	r3, [pc, #228]	@ (80009fc <MX_LTDC_Init+0xf8>)
 8000918:	4a39      	ldr	r2, [pc, #228]	@ (8000a00 <MX_LTDC_Init+0xfc>)
 800091a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800091c:	4b37      	ldr	r3, [pc, #220]	@ (80009fc <MX_LTDC_Init+0xf8>)
 800091e:	2200      	movs	r2, #0
 8000920:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000922:	4b36      	ldr	r3, [pc, #216]	@ (80009fc <MX_LTDC_Init+0xf8>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000928:	4b34      	ldr	r3, [pc, #208]	@ (80009fc <MX_LTDC_Init+0xf8>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800092e:	4b33      	ldr	r3, [pc, #204]	@ (80009fc <MX_LTDC_Init+0xf8>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 9;
 8000934:	4b31      	ldr	r3, [pc, #196]	@ (80009fc <MX_LTDC_Init+0xf8>)
 8000936:	2209      	movs	r2, #9
 8000938:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 1;
 800093a:	4b30      	ldr	r3, [pc, #192]	@ (80009fc <MX_LTDC_Init+0xf8>)
 800093c:	2201      	movs	r2, #1
 800093e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8000940:	4b2e      	ldr	r3, [pc, #184]	@ (80009fc <MX_LTDC_Init+0xf8>)
 8000942:	221d      	movs	r2, #29
 8000944:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8000946:	4b2d      	ldr	r3, [pc, #180]	@ (80009fc <MX_LTDC_Init+0xf8>)
 8000948:	2203      	movs	r2, #3
 800094a:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 800094c:	4b2b      	ldr	r3, [pc, #172]	@ (80009fc <MX_LTDC_Init+0xf8>)
 800094e:	f240 120d 	movw	r2, #269	@ 0x10d
 8000952:	625a      	str	r2, [r3, #36]	@ 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8000954:	4b29      	ldr	r3, [pc, #164]	@ (80009fc <MX_LTDC_Init+0xf8>)
 8000956:	f240 1243 	movw	r2, #323	@ 0x143
 800095a:	629a      	str	r2, [r3, #40]	@ 0x28
  hltdc.Init.TotalWidth = 279;
 800095c:	4b27      	ldr	r3, [pc, #156]	@ (80009fc <MX_LTDC_Init+0xf8>)
 800095e:	f240 1217 	movw	r2, #279	@ 0x117
 8000962:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc.Init.TotalHeigh = 327;
 8000964:	4b25      	ldr	r3, [pc, #148]	@ (80009fc <MX_LTDC_Init+0xf8>)
 8000966:	f240 1247 	movw	r2, #327	@ 0x147
 800096a:	631a      	str	r2, [r3, #48]	@ 0x30
  hltdc.Init.Backcolor.Blue = 0;
 800096c:	4b23      	ldr	r3, [pc, #140]	@ (80009fc <MX_LTDC_Init+0xf8>)
 800096e:	2200      	movs	r2, #0
 8000970:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000974:	4b21      	ldr	r3, [pc, #132]	@ (80009fc <MX_LTDC_Init+0xf8>)
 8000976:	2200      	movs	r2, #0
 8000978:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc.Init.Backcolor.Red = 0;
 800097c:	4b1f      	ldr	r3, [pc, #124]	@ (80009fc <MX_LTDC_Init+0xf8>)
 800097e:	2200      	movs	r2, #0
 8000980:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000984:	481d      	ldr	r0, [pc, #116]	@ (80009fc <MX_LTDC_Init+0xf8>)
 8000986:	f003 ff25 	bl	80047d4 <HAL_LTDC_Init>
 800098a:	4603      	mov	r3, r0
 800098c:	2b00      	cmp	r3, #0
 800098e:	d001      	beq.n	8000994 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000990:	f000 fa70 	bl	8000e74 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000994:	2300      	movs	r3, #0
 8000996:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 240;
 8000998:	23f0      	movs	r3, #240	@ 0xf0
 800099a:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 320;
 80009a0:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80009a4:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80009a6:	2302      	movs	r3, #2
 80009a8:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80009aa:	23ff      	movs	r3, #255	@ 0xff
 80009ac:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80009ae:	2300      	movs	r3, #0
 80009b0:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80009b2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80009b6:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80009b8:	2307      	movs	r3, #7
 80009ba:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 80009bc:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 80009c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.ImageWidth = 240;
 80009c2:	23f0      	movs	r3, #240	@ 0xf0
 80009c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.ImageHeight = 320;
 80009c6:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80009ca:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.Backcolor.Blue = 0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
  pLayerCfg.Backcolor.Green = 0;
 80009d2:	2300      	movs	r3, #0
 80009d4:	f887 3035 	strb.w	r3, [r7, #53]	@ 0x35
  pLayerCfg.Backcolor.Red = 0;
 80009d8:	2300      	movs	r3, #0
 80009da:	f887 3036 	strb.w	r3, [r7, #54]	@ 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2200      	movs	r2, #0
 80009e2:	4619      	mov	r1, r3
 80009e4:	4805      	ldr	r0, [pc, #20]	@ (80009fc <MX_LTDC_Init+0xf8>)
 80009e6:	f004 f887 	bl	8004af8 <HAL_LTDC_ConfigLayer>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_LTDC_Init+0xf0>
  {
    Error_Handler();
 80009f0:	f000 fa40 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 80009f4:	bf00      	nop
 80009f6:	3738      	adds	r7, #56	@ 0x38
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	20000134 	.word	0x20000134
 8000a00:	40016800 	.word	0x40016800

08000a04 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000a08:	4b17      	ldr	r3, [pc, #92]	@ (8000a68 <MX_SPI5_Init+0x64>)
 8000a0a:	4a18      	ldr	r2, [pc, #96]	@ (8000a6c <MX_SPI5_Init+0x68>)
 8000a0c:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000a0e:	4b16      	ldr	r3, [pc, #88]	@ (8000a68 <MX_SPI5_Init+0x64>)
 8000a10:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000a14:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8000a16:	4b14      	ldr	r3, [pc, #80]	@ (8000a68 <MX_SPI5_Init+0x64>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a1c:	4b12      	ldr	r3, [pc, #72]	@ (8000a68 <MX_SPI5_Init+0x64>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a22:	4b11      	ldr	r3, [pc, #68]	@ (8000a68 <MX_SPI5_Init+0x64>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a28:	4b0f      	ldr	r3, [pc, #60]	@ (8000a68 <MX_SPI5_Init+0x64>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000a2e:	4b0e      	ldr	r3, [pc, #56]	@ (8000a68 <MX_SPI5_Init+0x64>)
 8000a30:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000a34:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000a36:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <MX_SPI5_Init+0x64>)
 8000a38:	2218      	movs	r2, #24
 8000a3a:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8000a68 <MX_SPI5_Init+0x64>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a42:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <MX_SPI5_Init+0x64>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a48:	4b07      	ldr	r3, [pc, #28]	@ (8000a68 <MX_SPI5_Init+0x64>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8000a4e:	4b06      	ldr	r3, [pc, #24]	@ (8000a68 <MX_SPI5_Init+0x64>)
 8000a50:	220a      	movs	r2, #10
 8000a52:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8000a54:	4804      	ldr	r0, [pc, #16]	@ (8000a68 <MX_SPI5_Init+0x64>)
 8000a56:	f005 f8e3 	bl	8005c20 <HAL_SPI_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8000a60:	f000 fa08 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	200001dc 	.word	0x200001dc
 8000a6c:	40015000 	.word	0x40015000

08000a70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b086      	sub	sp, #24
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a76:	f107 0308 	add.w	r3, r7, #8
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
 8000a80:	609a      	str	r2, [r3, #8]
 8000a82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a84:	463b      	mov	r3, r7
 8000a86:	2200      	movs	r2, #0
 8000a88:	601a      	str	r2, [r3, #0]
 8000a8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a8c:	4b1e      	ldr	r3, [pc, #120]	@ (8000b08 <MX_TIM1_Init+0x98>)
 8000a8e:	4a1f      	ldr	r2, [pc, #124]	@ (8000b0c <MX_TIM1_Init+0x9c>)
 8000a90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000a92:	4b1d      	ldr	r3, [pc, #116]	@ (8000b08 <MX_TIM1_Init+0x98>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a98:	4b1b      	ldr	r3, [pc, #108]	@ (8000b08 <MX_TIM1_Init+0x98>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000a9e:	4b1a      	ldr	r3, [pc, #104]	@ (8000b08 <MX_TIM1_Init+0x98>)
 8000aa0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000aa4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aa6:	4b18      	ldr	r3, [pc, #96]	@ (8000b08 <MX_TIM1_Init+0x98>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000aac:	4b16      	ldr	r3, [pc, #88]	@ (8000b08 <MX_TIM1_Init+0x98>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ab2:	4b15      	ldr	r3, [pc, #84]	@ (8000b08 <MX_TIM1_Init+0x98>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000ab8:	4813      	ldr	r0, [pc, #76]	@ (8000b08 <MX_TIM1_Init+0x98>)
 8000aba:	f005 fe83 	bl	80067c4 <HAL_TIM_Base_Init>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000ac4:	f000 f9d6 	bl	8000e74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ac8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000acc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000ace:	f107 0308 	add.w	r3, r7, #8
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	480c      	ldr	r0, [pc, #48]	@ (8000b08 <MX_TIM1_Init+0x98>)
 8000ad6:	f006 f825 	bl	8006b24 <HAL_TIM_ConfigClockSource>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d001      	beq.n	8000ae4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000ae0:	f000 f9c8 	bl	8000e74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000aec:	463b      	mov	r3, r7
 8000aee:	4619      	mov	r1, r3
 8000af0:	4805      	ldr	r0, [pc, #20]	@ (8000b08 <MX_TIM1_Init+0x98>)
 8000af2:	f006 fa4d 	bl	8006f90 <HAL_TIMEx_MasterConfigSynchronization>
 8000af6:	4603      	mov	r3, r0
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d001      	beq.n	8000b00 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000afc:	f000 f9ba 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b00:	bf00      	nop
 8000b02:	3718      	adds	r7, #24
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000234 	.word	0x20000234
 8000b0c:	40010000 	.word	0x40010000

08000b10 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000b14:	4b11      	ldr	r3, [pc, #68]	@ (8000b5c <MX_USART1_UART_Init+0x4c>)
 8000b16:	4a12      	ldr	r2, [pc, #72]	@ (8000b60 <MX_USART1_UART_Init+0x50>)
 8000b18:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000b1a:	4b10      	ldr	r3, [pc, #64]	@ (8000b5c <MX_USART1_UART_Init+0x4c>)
 8000b1c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b20:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	@ (8000b5c <MX_USART1_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	@ (8000b5c <MX_USART1_UART_Init+0x4c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b5c <MX_USART1_UART_Init+0x4c>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000b34:	4b09      	ldr	r3, [pc, #36]	@ (8000b5c <MX_USART1_UART_Init+0x4c>)
 8000b36:	220c      	movs	r2, #12
 8000b38:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	@ (8000b5c <MX_USART1_UART_Init+0x4c>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b40:	4b06      	ldr	r3, [pc, #24]	@ (8000b5c <MX_USART1_UART_Init+0x4c>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b46:	4805      	ldr	r0, [pc, #20]	@ (8000b5c <MX_USART1_UART_Init+0x4c>)
 8000b48:	f006 fab2 	bl	80070b0 <HAL_UART_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000b52:	f000 f98f 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	2000027c 	.word	0x2000027c
 8000b60:	40011000 	.word	0x40011000

08000b64 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b088      	sub	sp, #32
 8000b68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8000b6a:	1d3b      	adds	r3, r7, #4
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
 8000b78:	615a      	str	r2, [r3, #20]
 8000b7a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8000b7c:	4b1f      	ldr	r3, [pc, #124]	@ (8000bfc <MX_FMC_Init+0x98>)
 8000b7e:	4a20      	ldr	r2, [pc, #128]	@ (8000c00 <MX_FMC_Init+0x9c>)
 8000b80:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8000b82:	4b1e      	ldr	r3, [pc, #120]	@ (8000bfc <MX_FMC_Init+0x98>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8000b88:	4b1c      	ldr	r3, [pc, #112]	@ (8000bfc <MX_FMC_Init+0x98>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_11;
 8000b8e:	4b1b      	ldr	r3, [pc, #108]	@ (8000bfc <MX_FMC_Init+0x98>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8000b94:	4b19      	ldr	r3, [pc, #100]	@ (8000bfc <MX_FMC_Init+0x98>)
 8000b96:	2210      	movs	r2, #16
 8000b98:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8000b9a:	4b18      	ldr	r3, [pc, #96]	@ (8000bfc <MX_FMC_Init+0x98>)
 8000b9c:	2240      	movs	r2, #64	@ 0x40
 8000b9e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8000ba0:	4b16      	ldr	r3, [pc, #88]	@ (8000bfc <MX_FMC_Init+0x98>)
 8000ba2:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8000ba6:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8000ba8:	4b14      	ldr	r3, [pc, #80]	@ (8000bfc <MX_FMC_Init+0x98>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 8000bae:	4b13      	ldr	r3, [pc, #76]	@ (8000bfc <MX_FMC_Init+0x98>)
 8000bb0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bb4:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8000bb6:	4b11      	ldr	r3, [pc, #68]	@ (8000bfc <MX_FMC_Init+0x98>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 8000bbc:	4b0f      	ldr	r3, [pc, #60]	@ (8000bfc <MX_FMC_Init+0x98>)
 8000bbe:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000bc2:	629a      	str	r2, [r3, #40]	@ 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
 8000bc4:	2302      	movs	r3, #2
 8000bc6:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8000bc8:	2307      	movs	r3, #7
 8000bca:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 4;
 8000bcc:	2304      	movs	r3, #4
 8000bce:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 7;
 8000bd0:	2307      	movs	r3, #7
 8000bd2:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 3;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 2;
 8000bd8:	2302      	movs	r3, #2
 8000bda:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 2;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8000be0:	1d3b      	adds	r3, r7, #4
 8000be2:	4619      	mov	r1, r3
 8000be4:	4805      	ldr	r0, [pc, #20]	@ (8000bfc <MX_FMC_Init+0x98>)
 8000be6:	f004 ffe7 	bl	8005bb8 <HAL_SDRAM_Init>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d001      	beq.n	8000bf4 <MX_FMC_Init+0x90>
  {
    Error_Handler( );
 8000bf0:	f000 f940 	bl	8000e74 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8000bf4:	bf00      	nop
 8000bf6:	3720      	adds	r7, #32
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}
 8000bfc:	200002c4 	.word	0x200002c4
 8000c00:	a0000140 	.word	0xa0000140

08000c04 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08e      	sub	sp, #56	@ 0x38
 8000c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c0a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c0e:	2200      	movs	r2, #0
 8000c10:	601a      	str	r2, [r3, #0]
 8000c12:	605a      	str	r2, [r3, #4]
 8000c14:	609a      	str	r2, [r3, #8]
 8000c16:	60da      	str	r2, [r3, #12]
 8000c18:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	623b      	str	r3, [r7, #32]
 8000c1e:	4b85      	ldr	r3, [pc, #532]	@ (8000e34 <MX_GPIO_Init+0x230>)
 8000c20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c22:	4a84      	ldr	r2, [pc, #528]	@ (8000e34 <MX_GPIO_Init+0x230>)
 8000c24:	f043 0304 	orr.w	r3, r3, #4
 8000c28:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c2a:	4b82      	ldr	r3, [pc, #520]	@ (8000e34 <MX_GPIO_Init+0x230>)
 8000c2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c2e:	f003 0304 	and.w	r3, r3, #4
 8000c32:	623b      	str	r3, [r7, #32]
 8000c34:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
 8000c3a:	4b7e      	ldr	r3, [pc, #504]	@ (8000e34 <MX_GPIO_Init+0x230>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c3e:	4a7d      	ldr	r2, [pc, #500]	@ (8000e34 <MX_GPIO_Init+0x230>)
 8000c40:	f043 0320 	orr.w	r3, r3, #32
 8000c44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c46:	4b7b      	ldr	r3, [pc, #492]	@ (8000e34 <MX_GPIO_Init+0x230>)
 8000c48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c4a:	f003 0320 	and.w	r3, r3, #32
 8000c4e:	61fb      	str	r3, [r7, #28]
 8000c50:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c52:	2300      	movs	r3, #0
 8000c54:	61bb      	str	r3, [r7, #24]
 8000c56:	4b77      	ldr	r3, [pc, #476]	@ (8000e34 <MX_GPIO_Init+0x230>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c5a:	4a76      	ldr	r2, [pc, #472]	@ (8000e34 <MX_GPIO_Init+0x230>)
 8000c5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c62:	4b74      	ldr	r3, [pc, #464]	@ (8000e34 <MX_GPIO_Init+0x230>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c6a:	61bb      	str	r3, [r7, #24]
 8000c6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6e:	2300      	movs	r3, #0
 8000c70:	617b      	str	r3, [r7, #20]
 8000c72:	4b70      	ldr	r3, [pc, #448]	@ (8000e34 <MX_GPIO_Init+0x230>)
 8000c74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c76:	4a6f      	ldr	r2, [pc, #444]	@ (8000e34 <MX_GPIO_Init+0x230>)
 8000c78:	f043 0301 	orr.w	r3, r3, #1
 8000c7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c7e:	4b6d      	ldr	r3, [pc, #436]	@ (8000e34 <MX_GPIO_Init+0x230>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c82:	f003 0301 	and.w	r3, r3, #1
 8000c86:	617b      	str	r3, [r7, #20]
 8000c88:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	4b69      	ldr	r3, [pc, #420]	@ (8000e34 <MX_GPIO_Init+0x230>)
 8000c90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c92:	4a68      	ldr	r2, [pc, #416]	@ (8000e34 <MX_GPIO_Init+0x230>)
 8000c94:	f043 0302 	orr.w	r3, r3, #2
 8000c98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c9a:	4b66      	ldr	r3, [pc, #408]	@ (8000e34 <MX_GPIO_Init+0x230>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c9e:	f003 0302 	and.w	r3, r3, #2
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	4b62      	ldr	r3, [pc, #392]	@ (8000e34 <MX_GPIO_Init+0x230>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cae:	4a61      	ldr	r2, [pc, #388]	@ (8000e34 <MX_GPIO_Init+0x230>)
 8000cb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000cb4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cb6:	4b5f      	ldr	r3, [pc, #380]	@ (8000e34 <MX_GPIO_Init+0x230>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60bb      	str	r3, [r7, #8]
 8000cc6:	4b5b      	ldr	r3, [pc, #364]	@ (8000e34 <MX_GPIO_Init+0x230>)
 8000cc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cca:	4a5a      	ldr	r2, [pc, #360]	@ (8000e34 <MX_GPIO_Init+0x230>)
 8000ccc:	f043 0310 	orr.w	r3, r3, #16
 8000cd0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cd2:	4b58      	ldr	r3, [pc, #352]	@ (8000e34 <MX_GPIO_Init+0x230>)
 8000cd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cd6:	f003 0310 	and.w	r3, r3, #16
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cde:	2300      	movs	r3, #0
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	4b54      	ldr	r3, [pc, #336]	@ (8000e34 <MX_GPIO_Init+0x230>)
 8000ce4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ce6:	4a53      	ldr	r2, [pc, #332]	@ (8000e34 <MX_GPIO_Init+0x230>)
 8000ce8:	f043 0308 	orr.w	r3, r3, #8
 8000cec:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cee:	4b51      	ldr	r3, [pc, #324]	@ (8000e34 <MX_GPIO_Init+0x230>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	f003 0308 	and.w	r3, r3, #8
 8000cf6:	607b      	str	r3, [r7, #4]
 8000cf8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13, GPIO_PIN_RESET);
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	f44f 5141 	mov.w	r1, #12352	@ 0x3040
 8000d00:	484d      	ldr	r0, [pc, #308]	@ (8000e38 <MX_GPIO_Init+0x234>)
 8000d02:	f001 fa59 	bl	80021b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000d06:	2200      	movs	r2, #0
 8000d08:	2116      	movs	r1, #22
 8000d0a:	484c      	ldr	r0, [pc, #304]	@ (8000e3c <MX_GPIO_Init+0x238>)
 8000d0c:	f001 fa54 	bl	80021b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8000d10:	2200      	movs	r2, #0
 8000d12:	2180      	movs	r1, #128	@ 0x80
 8000d14:	484a      	ldr	r0, [pc, #296]	@ (8000e40 <MX_GPIO_Init+0x23c>)
 8000d16:	f001 fa4f 	bl	80021b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 8000d20:	4848      	ldr	r0, [pc, #288]	@ (8000e44 <MX_GPIO_Init+0x240>)
 8000d22:	f001 fa49 	bl	80021b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000d26:	2200      	movs	r2, #0
 8000d28:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000d2c:	4846      	ldr	r0, [pc, #280]	@ (8000e48 <MX_GPIO_Init+0x244>)
 8000d2e:	f001 fa43 	bl	80021b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PF6 PF12 PF13 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_12|GPIO_PIN_13;
 8000d32:	f44f 5341 	mov.w	r3, #12352	@ 0x3040
 8000d36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d40:	2300      	movs	r3, #0
 8000d42:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000d44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d48:	4619      	mov	r1, r3
 8000d4a:	483b      	ldr	r0, [pc, #236]	@ (8000e38 <MX_GPIO_Init+0x234>)
 8000d4c:	f001 f888 	bl	8001e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 8000d50:	2316      	movs	r3, #22
 8000d52:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d60:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d64:	4619      	mov	r1, r3
 8000d66:	4835      	ldr	r0, [pc, #212]	@ (8000e3c <MX_GPIO_Init+0x238>)
 8000d68:	f001 f87a 	bl	8001e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = B1_Pin|MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000d6c:	f248 0307 	movw	r3, #32775	@ 0x8007
 8000d70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000d72:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000d76:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d80:	4619      	mov	r1, r3
 8000d82:	482f      	ldr	r0, [pc, #188]	@ (8000e40 <MX_GPIO_Init+0x23c>)
 8000d84:	f001 f86c 	bl	8001e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000d88:	2380      	movs	r3, #128	@ 0x80
 8000d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d94:	2300      	movs	r3, #0
 8000d96:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000d98:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d9c:	4619      	mov	r1, r3
 8000d9e:	4828      	ldr	r0, [pc, #160]	@ (8000e40 <MX_GPIO_Init+0x23c>)
 8000da0:	f001 f85e 	bl	8001e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000da4:	2320      	movs	r3, #32
 8000da6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000da8:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000dac:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	2300      	movs	r3, #0
 8000db0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000db2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000db6:	4619      	mov	r1, r3
 8000db8:	4820      	ldr	r0, [pc, #128]	@ (8000e3c <MX_GPIO_Init+0x238>)
 8000dba:	f001 f851 	bl	8001e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000dca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000dce:	4619      	mov	r1, r3
 8000dd0:	481e      	ldr	r0, [pc, #120]	@ (8000e4c <MX_GPIO_Init+0x248>)
 8000dd2:	f001 f845 	bl	8001e60 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000dd6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000dda:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de0:	2300      	movs	r3, #0
 8000de2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000de4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000de8:	4619      	mov	r1, r3
 8000dea:	4816      	ldr	r0, [pc, #88]	@ (8000e44 <MX_GPIO_Init+0x240>)
 8000dec:	f001 f838 	bl	8001e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000df0:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000df4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df6:	2301      	movs	r3, #1
 8000df8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e02:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e06:	4619      	mov	r1, r3
 8000e08:	480e      	ldr	r0, [pc, #56]	@ (8000e44 <MX_GPIO_Init+0x240>)
 8000e0a:	f001 f829 	bl	8001e60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000e0e:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000e12:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e14:	2301      	movs	r3, #1
 8000e16:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e20:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e24:	4619      	mov	r1, r3
 8000e26:	4808      	ldr	r0, [pc, #32]	@ (8000e48 <MX_GPIO_Init+0x244>)
 8000e28:	f001 f81a 	bl	8001e60 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000e2c:	bf00      	nop
 8000e2e:	3738      	adds	r7, #56	@ 0x38
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	40023800 	.word	0x40023800
 8000e38:	40021400 	.word	0x40021400
 8000e3c:	40020800 	.word	0x40020800
 8000e40:	40020000 	.word	0x40020000
 8000e44:	40020c00 	.word	0x40020c00
 8000e48:	40021800 	.word	0x40021800
 8000e4c:	40020400 	.word	0x40020400

08000e50 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b082      	sub	sp, #8
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a04      	ldr	r2, [pc, #16]	@ (8000e70 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e5e:	4293      	cmp	r3, r2
 8000e60:	d101      	bne.n	8000e66 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000e62:	f000 fccf 	bl	8001804 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e66:	bf00      	nop
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	40001000 	.word	0x40001000

08000e74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e78:	b672      	cpsid	i
}
 8000e7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e7c:	bf00      	nop
 8000e7e:	e7fd      	b.n	8000e7c <Error_Handler+0x8>

08000e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	607b      	str	r3, [r7, #4]
 8000e8a:	4b10      	ldr	r3, [pc, #64]	@ (8000ecc <HAL_MspInit+0x4c>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e8e:	4a0f      	ldr	r2, [pc, #60]	@ (8000ecc <HAL_MspInit+0x4c>)
 8000e90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e94:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e96:	4b0d      	ldr	r3, [pc, #52]	@ (8000ecc <HAL_MspInit+0x4c>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e9e:	607b      	str	r3, [r7, #4]
 8000ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	603b      	str	r3, [r7, #0]
 8000ea6:	4b09      	ldr	r3, [pc, #36]	@ (8000ecc <HAL_MspInit+0x4c>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eaa:	4a08      	ldr	r2, [pc, #32]	@ (8000ecc <HAL_MspInit+0x4c>)
 8000eac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000eb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eb2:	4b06      	ldr	r3, [pc, #24]	@ (8000ecc <HAL_MspInit+0x4c>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000eba:	603b      	str	r3, [r7, #0]
 8000ebc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	370c      	adds	r7, #12
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop
 8000ecc:	40023800 	.word	0x40023800

08000ed0 <HAL_CRC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcrc: CRC handle pointer
  * @retval None
  */
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b085      	sub	sp, #20
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0b      	ldr	r2, [pc, #44]	@ (8000f0c <HAL_CRC_MspInit+0x3c>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d10d      	bne.n	8000efe <HAL_CRC_MspInit+0x2e>
  {
    /* USER CODE BEGIN CRC_MspInit 0 */

    /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	60fb      	str	r3, [r7, #12]
 8000ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8000f10 <HAL_CRC_MspInit+0x40>)
 8000ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eea:	4a09      	ldr	r2, [pc, #36]	@ (8000f10 <HAL_CRC_MspInit+0x40>)
 8000eec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ef0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ef2:	4b07      	ldr	r3, [pc, #28]	@ (8000f10 <HAL_CRC_MspInit+0x40>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ef6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000efa:	60fb      	str	r3, [r7, #12]
 8000efc:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END CRC_MspInit 1 */

  }

}
 8000efe:	bf00      	nop
 8000f00:	3714      	adds	r7, #20
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	40023000 	.word	0x40023000
 8000f10:	40023800 	.word	0x40023800

08000f14 <HAL_DMA2D_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hdma2d: DMA2D handle pointer
  * @retval None
  */
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4a0e      	ldr	r2, [pc, #56]	@ (8000f5c <HAL_DMA2D_MspInit+0x48>)
 8000f22:	4293      	cmp	r3, r2
 8000f24:	d115      	bne.n	8000f52 <HAL_DMA2D_MspInit+0x3e>
  {
    /* USER CODE BEGIN DMA2D_MspInit 0 */

    /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	60fb      	str	r3, [r7, #12]
 8000f2a:	4b0d      	ldr	r3, [pc, #52]	@ (8000f60 <HAL_DMA2D_MspInit+0x4c>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f2e:	4a0c      	ldr	r2, [pc, #48]	@ (8000f60 <HAL_DMA2D_MspInit+0x4c>)
 8000f30:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8000f34:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f36:	4b0a      	ldr	r3, [pc, #40]	@ (8000f60 <HAL_DMA2D_MspInit+0x4c>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f3a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8000f3e:	60fb      	str	r3, [r7, #12]
 8000f40:	68fb      	ldr	r3, [r7, #12]
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 5, 0);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2105      	movs	r1, #5
 8000f46:	205a      	movs	r0, #90	@ 0x5a
 8000f48:	f000 fd58 	bl	80019fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8000f4c:	205a      	movs	r0, #90	@ 0x5a
 8000f4e:	f000 fd71 	bl	8001a34 <HAL_NVIC_EnableIRQ>

    /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
 8000f5a:	bf00      	nop
 8000f5c:	4002b000 	.word	0x4002b000
 8000f60:	40023800 	.word	0x40023800

08000f64 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08a      	sub	sp, #40	@ 0x28
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6c:	f107 0314 	add.w	r3, r7, #20
 8000f70:	2200      	movs	r2, #0
 8000f72:	601a      	str	r2, [r3, #0]
 8000f74:	605a      	str	r2, [r3, #4]
 8000f76:	609a      	str	r2, [r3, #8]
 8000f78:	60da      	str	r2, [r3, #12]
 8000f7a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a29      	ldr	r2, [pc, #164]	@ (8001028 <HAL_I2C_MspInit+0xc4>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d14b      	bne.n	800101e <HAL_I2C_MspInit+0xba>
  {
    /* USER CODE BEGIN I2C3_MspInit 0 */

    /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	613b      	str	r3, [r7, #16]
 8000f8a:	4b28      	ldr	r3, [pc, #160]	@ (800102c <HAL_I2C_MspInit+0xc8>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f8e:	4a27      	ldr	r2, [pc, #156]	@ (800102c <HAL_I2C_MspInit+0xc8>)
 8000f90:	f043 0304 	orr.w	r3, r3, #4
 8000f94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f96:	4b25      	ldr	r3, [pc, #148]	@ (800102c <HAL_I2C_MspInit+0xc8>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9a:	f003 0304 	and.w	r3, r3, #4
 8000f9e:	613b      	str	r3, [r7, #16]
 8000fa0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	60fb      	str	r3, [r7, #12]
 8000fa6:	4b21      	ldr	r3, [pc, #132]	@ (800102c <HAL_I2C_MspInit+0xc8>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000faa:	4a20      	ldr	r2, [pc, #128]	@ (800102c <HAL_I2C_MspInit+0xc8>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000fb2:	4b1e      	ldr	r3, [pc, #120]	@ (800102c <HAL_I2C_MspInit+0xc8>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	60fb      	str	r3, [r7, #12]
 8000fbc:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL
    */
    GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000fbe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fc4:	2312      	movs	r3, #18
 8000fc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000fd4:	f107 0314 	add.w	r3, r7, #20
 8000fd8:	4619      	mov	r1, r3
 8000fda:	4815      	ldr	r0, [pc, #84]	@ (8001030 <HAL_I2C_MspInit+0xcc>)
 8000fdc:	f000 ff40 	bl	8001e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000fe0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000fe4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000fe6:	2312      	movs	r3, #18
 8000fe8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fea:	2301      	movs	r3, #1
 8000fec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ff2:	2304      	movs	r3, #4
 8000ff4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000ff6:	f107 0314 	add.w	r3, r7, #20
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	480d      	ldr	r0, [pc, #52]	@ (8001034 <HAL_I2C_MspInit+0xd0>)
 8000ffe:	f000 ff2f 	bl	8001e60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001002:	2300      	movs	r3, #0
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	4b09      	ldr	r3, [pc, #36]	@ (800102c <HAL_I2C_MspInit+0xc8>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100a:	4a08      	ldr	r2, [pc, #32]	@ (800102c <HAL_I2C_MspInit+0xc8>)
 800100c:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001010:	6413      	str	r3, [r2, #64]	@ 0x40
 8001012:	4b06      	ldr	r3, [pc, #24]	@ (800102c <HAL_I2C_MspInit+0xc8>)
 8001014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001016:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800101a:	60bb      	str	r3, [r7, #8]
 800101c:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C3_MspInit 1 */

  }

}
 800101e:	bf00      	nop
 8001020:	3728      	adds	r7, #40	@ 0x28
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	40005c00 	.word	0x40005c00
 800102c:	40023800 	.word	0x40023800
 8001030:	40020800 	.word	0x40020800
 8001034:	40020000 	.word	0x40020000

08001038 <HAL_LTDC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hltdc: LTDC handle pointer
  * @retval None
  */
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b09a      	sub	sp, #104	@ 0x68
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
 800104e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001050:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001054:	2230      	movs	r2, #48	@ 0x30
 8001056:	2100      	movs	r1, #0
 8001058:	4618      	mov	r0, r3
 800105a:	f00a faed 	bl	800b638 <memset>
  if(hltdc->Instance==LTDC)
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	4a85      	ldr	r2, [pc, #532]	@ (8001278 <HAL_LTDC_MspInit+0x240>)
 8001064:	4293      	cmp	r3, r2
 8001066:	f040 8102 	bne.w	800126e <HAL_LTDC_MspInit+0x236>

    /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800106a:	2308      	movs	r3, #8
 800106c:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 800106e:	2332      	movs	r3, #50	@ 0x32
 8001070:	637b      	str	r3, [r7, #52]	@ 0x34
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8001072:	2302      	movs	r3, #2
 8001074:	63fb      	str	r3, [r7, #60]	@ 0x3c
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8001076:	2300      	movs	r3, #0
 8001078:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800107a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800107e:	4618      	mov	r0, r3
 8001080:	f004 fbda 	bl	8005838 <HAL_RCCEx_PeriphCLKConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <HAL_LTDC_MspInit+0x56>
    {
      Error_Handler();
 800108a:	f7ff fef3 	bl	8000e74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800108e:	2300      	movs	r3, #0
 8001090:	623b      	str	r3, [r7, #32]
 8001092:	4b7a      	ldr	r3, [pc, #488]	@ (800127c <HAL_LTDC_MspInit+0x244>)
 8001094:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001096:	4a79      	ldr	r2, [pc, #484]	@ (800127c <HAL_LTDC_MspInit+0x244>)
 8001098:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800109c:	6453      	str	r3, [r2, #68]	@ 0x44
 800109e:	4b77      	ldr	r3, [pc, #476]	@ (800127c <HAL_LTDC_MspInit+0x244>)
 80010a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010a2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80010a6:	623b      	str	r3, [r7, #32]
 80010a8:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
 80010ae:	4b73      	ldr	r3, [pc, #460]	@ (800127c <HAL_LTDC_MspInit+0x244>)
 80010b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010b2:	4a72      	ldr	r2, [pc, #456]	@ (800127c <HAL_LTDC_MspInit+0x244>)
 80010b4:	f043 0320 	orr.w	r3, r3, #32
 80010b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ba:	4b70      	ldr	r3, [pc, #448]	@ (800127c <HAL_LTDC_MspInit+0x244>)
 80010bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010be:	f003 0320 	and.w	r3, r3, #32
 80010c2:	61fb      	str	r3, [r7, #28]
 80010c4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	2300      	movs	r3, #0
 80010c8:	61bb      	str	r3, [r7, #24]
 80010ca:	4b6c      	ldr	r3, [pc, #432]	@ (800127c <HAL_LTDC_MspInit+0x244>)
 80010cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ce:	4a6b      	ldr	r2, [pc, #428]	@ (800127c <HAL_LTDC_MspInit+0x244>)
 80010d0:	f043 0301 	orr.w	r3, r3, #1
 80010d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80010d6:	4b69      	ldr	r3, [pc, #420]	@ (800127c <HAL_LTDC_MspInit+0x244>)
 80010d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010da:	f003 0301 	and.w	r3, r3, #1
 80010de:	61bb      	str	r3, [r7, #24]
 80010e0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	617b      	str	r3, [r7, #20]
 80010e6:	4b65      	ldr	r3, [pc, #404]	@ (800127c <HAL_LTDC_MspInit+0x244>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ea:	4a64      	ldr	r2, [pc, #400]	@ (800127c <HAL_LTDC_MspInit+0x244>)
 80010ec:	f043 0302 	orr.w	r3, r3, #2
 80010f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80010f2:	4b62      	ldr	r3, [pc, #392]	@ (800127c <HAL_LTDC_MspInit+0x244>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	617b      	str	r3, [r7, #20]
 80010fc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80010fe:	2300      	movs	r3, #0
 8001100:	613b      	str	r3, [r7, #16]
 8001102:	4b5e      	ldr	r3, [pc, #376]	@ (800127c <HAL_LTDC_MspInit+0x244>)
 8001104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001106:	4a5d      	ldr	r2, [pc, #372]	@ (800127c <HAL_LTDC_MspInit+0x244>)
 8001108:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800110c:	6313      	str	r3, [r2, #48]	@ 0x30
 800110e:	4b5b      	ldr	r3, [pc, #364]	@ (800127c <HAL_LTDC_MspInit+0x244>)
 8001110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001112:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001116:	613b      	str	r3, [r7, #16]
 8001118:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800111a:	2300      	movs	r3, #0
 800111c:	60fb      	str	r3, [r7, #12]
 800111e:	4b57      	ldr	r3, [pc, #348]	@ (800127c <HAL_LTDC_MspInit+0x244>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001122:	4a56      	ldr	r2, [pc, #344]	@ (800127c <HAL_LTDC_MspInit+0x244>)
 8001124:	f043 0304 	orr.w	r3, r3, #4
 8001128:	6313      	str	r3, [r2, #48]	@ 0x30
 800112a:	4b54      	ldr	r3, [pc, #336]	@ (800127c <HAL_LTDC_MspInit+0x244>)
 800112c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800112e:	f003 0304 	and.w	r3, r3, #4
 8001132:	60fb      	str	r3, [r7, #12]
 8001134:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001136:	2300      	movs	r3, #0
 8001138:	60bb      	str	r3, [r7, #8]
 800113a:	4b50      	ldr	r3, [pc, #320]	@ (800127c <HAL_LTDC_MspInit+0x244>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800113e:	4a4f      	ldr	r2, [pc, #316]	@ (800127c <HAL_LTDC_MspInit+0x244>)
 8001140:	f043 0308 	orr.w	r3, r3, #8
 8001144:	6313      	str	r3, [r2, #48]	@ 0x30
 8001146:	4b4d      	ldr	r3, [pc, #308]	@ (800127c <HAL_LTDC_MspInit+0x244>)
 8001148:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114a:	f003 0308 	and.w	r3, r3, #8
 800114e:	60bb      	str	r3, [r7, #8]
 8001150:	68bb      	ldr	r3, [r7, #8]
    PG11     ------> LTDC_B3
    PG12     ------> LTDC_B4
    PB8     ------> LTDC_B6
    PB9     ------> LTDC_B7
    */
    GPIO_InitStruct.Pin = ENABLE_Pin;
 8001152:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001156:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001158:	2302      	movs	r3, #2
 800115a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800115c:	2300      	movs	r3, #0
 800115e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001160:	2300      	movs	r3, #0
 8001162:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001164:	230e      	movs	r3, #14
 8001166:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8001168:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800116c:	4619      	mov	r1, r3
 800116e:	4844      	ldr	r0, [pc, #272]	@ (8001280 <HAL_LTDC_MspInit+0x248>)
 8001170:	f000 fe76 	bl	8001e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8001174:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001178:	657b      	str	r3, [r7, #84]	@ 0x54
                          |R5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800117a:	2302      	movs	r3, #2
 800117c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001182:	2300      	movs	r3, #0
 8001184:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001186:	230e      	movs	r3, #14
 8001188:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800118a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800118e:	4619      	mov	r1, r3
 8001190:	483c      	ldr	r0, [pc, #240]	@ (8001284 <HAL_LTDC_MspInit+0x24c>)
 8001192:	f000 fe65 	bl	8001e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 8001196:	2303      	movs	r3, #3
 8001198:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800119a:	2302      	movs	r3, #2
 800119c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119e:	2300      	movs	r3, #0
 80011a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a2:	2300      	movs	r3, #0
 80011a4:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80011a6:	2309      	movs	r3, #9
 80011a8:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011aa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011ae:	4619      	mov	r1, r3
 80011b0:	4835      	ldr	r0, [pc, #212]	@ (8001288 <HAL_LTDC_MspInit+0x250>)
 80011b2:	f000 fe55 	bl	8001e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 80011b6:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 80011ba:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011bc:	2302      	movs	r3, #2
 80011be:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c0:	2300      	movs	r3, #0
 80011c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011c4:	2300      	movs	r3, #0
 80011c6:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011c8:	230e      	movs	r3, #14
 80011ca:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011cc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011d0:	4619      	mov	r1, r3
 80011d2:	482d      	ldr	r0, [pc, #180]	@ (8001288 <HAL_LTDC_MspInit+0x250>)
 80011d4:	f000 fe44 	bl	8001e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80011d8:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80011dc:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011de:	2302      	movs	r3, #2
 80011e0:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e6:	2300      	movs	r3, #0
 80011e8:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80011ea:	230e      	movs	r3, #14
 80011ec:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011ee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011f2:	4619      	mov	r1, r3
 80011f4:	4825      	ldr	r0, [pc, #148]	@ (800128c <HAL_LTDC_MspInit+0x254>)
 80011f6:	f000 fe33 	bl	8001e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 80011fa:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 80011fe:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001200:	2302      	movs	r3, #2
 8001202:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001204:	2300      	movs	r3, #0
 8001206:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001208:	2300      	movs	r3, #0
 800120a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800120c:	230e      	movs	r3, #14
 800120e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001210:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001214:	4619      	mov	r1, r3
 8001216:	481e      	ldr	r0, [pc, #120]	@ (8001290 <HAL_LTDC_MspInit+0x258>)
 8001218:	f000 fe22 	bl	8001e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 800121c:	2348      	movs	r3, #72	@ 0x48
 800121e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001220:	2302      	movs	r3, #2
 8001222:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001228:	2300      	movs	r3, #0
 800122a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800122c:	230e      	movs	r3, #14
 800122e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001230:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001234:	4619      	mov	r1, r3
 8001236:	4817      	ldr	r0, [pc, #92]	@ (8001294 <HAL_LTDC_MspInit+0x25c>)
 8001238:	f000 fe12 	bl	8001e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 800123c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001240:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001242:	2302      	movs	r3, #2
 8001244:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001246:	2300      	movs	r3, #0
 8001248:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800124a:	2300      	movs	r3, #0
 800124c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 800124e:	2309      	movs	r3, #9
 8001250:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001252:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001256:	4619      	mov	r1, r3
 8001258:	480c      	ldr	r0, [pc, #48]	@ (800128c <HAL_LTDC_MspInit+0x254>)
 800125a:	f000 fe01 	bl	8001e60 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2105      	movs	r1, #5
 8001262:	2058      	movs	r0, #88	@ 0x58
 8001264:	f000 fbca 	bl	80019fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8001268:	2058      	movs	r0, #88	@ 0x58
 800126a:	f000 fbe3 	bl	8001a34 <HAL_NVIC_EnableIRQ>

    /* USER CODE END LTDC_MspInit 1 */

  }

}
 800126e:	bf00      	nop
 8001270:	3768      	adds	r7, #104	@ 0x68
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40016800 	.word	0x40016800
 800127c:	40023800 	.word	0x40023800
 8001280:	40021400 	.word	0x40021400
 8001284:	40020000 	.word	0x40020000
 8001288:	40020400 	.word	0x40020400
 800128c:	40021800 	.word	0x40021800
 8001290:	40020800 	.word	0x40020800
 8001294:	40020c00 	.word	0x40020c00

08001298 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08a      	sub	sp, #40	@ 0x28
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012a0:	f107 0314 	add.w	r3, r7, #20
 80012a4:	2200      	movs	r2, #0
 80012a6:	601a      	str	r2, [r3, #0]
 80012a8:	605a      	str	r2, [r3, #4]
 80012aa:	609a      	str	r2, [r3, #8]
 80012ac:	60da      	str	r2, [r3, #12]
 80012ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a19      	ldr	r2, [pc, #100]	@ (800131c <HAL_SPI_MspInit+0x84>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d12c      	bne.n	8001314 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI5_MspInit 0 */

    /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	613b      	str	r3, [r7, #16]
 80012be:	4b18      	ldr	r3, [pc, #96]	@ (8001320 <HAL_SPI_MspInit+0x88>)
 80012c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012c2:	4a17      	ldr	r2, [pc, #92]	@ (8001320 <HAL_SPI_MspInit+0x88>)
 80012c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80012c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80012ca:	4b15      	ldr	r3, [pc, #84]	@ (8001320 <HAL_SPI_MspInit+0x88>)
 80012cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012d2:	613b      	str	r3, [r7, #16]
 80012d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	60fb      	str	r3, [r7, #12]
 80012da:	4b11      	ldr	r3, [pc, #68]	@ (8001320 <HAL_SPI_MspInit+0x88>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	4a10      	ldr	r2, [pc, #64]	@ (8001320 <HAL_SPI_MspInit+0x88>)
 80012e0:	f043 0320 	orr.w	r3, r3, #32
 80012e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012e6:	4b0e      	ldr	r3, [pc, #56]	@ (8001320 <HAL_SPI_MspInit+0x88>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ea:	f003 0320 	and.w	r3, r3, #32
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 80012f2:	f44f 7360 	mov.w	r3, #896	@ 0x380
 80012f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f8:	2302      	movs	r3, #2
 80012fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012fc:	2300      	movs	r3, #0
 80012fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001304:	2305      	movs	r3, #5
 8001306:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001308:	f107 0314 	add.w	r3, r7, #20
 800130c:	4619      	mov	r1, r3
 800130e:	4805      	ldr	r0, [pc, #20]	@ (8001324 <HAL_SPI_MspInit+0x8c>)
 8001310:	f000 fda6 	bl	8001e60 <HAL_GPIO_Init>

    /* USER CODE END SPI5_MspInit 1 */

  }

}
 8001314:	bf00      	nop
 8001316:	3728      	adds	r7, #40	@ 0x28
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	40015000 	.word	0x40015000
 8001320:	40023800 	.word	0x40023800
 8001324:	40021400 	.word	0x40021400

08001328 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001328:	b480      	push	{r7}
 800132a:	b085      	sub	sp, #20
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a0b      	ldr	r2, [pc, #44]	@ (8001364 <HAL_TIM_Base_MspInit+0x3c>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d10d      	bne.n	8001356 <HAL_TIM_Base_MspInit+0x2e>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	4b0a      	ldr	r3, [pc, #40]	@ (8001368 <HAL_TIM_Base_MspInit+0x40>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001342:	4a09      	ldr	r2, [pc, #36]	@ (8001368 <HAL_TIM_Base_MspInit+0x40>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6453      	str	r3, [r2, #68]	@ 0x44
 800134a:	4b07      	ldr	r3, [pc, #28]	@ (8001368 <HAL_TIM_Base_MspInit+0x40>)
 800134c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800134e:	f003 0301 	and.w	r3, r3, #1
 8001352:	60fb      	str	r3, [r7, #12]
 8001354:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM1_MspInit 1 */

  }

}
 8001356:	bf00      	nop
 8001358:	3714      	adds	r7, #20
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40010000 	.word	0x40010000
 8001368:	40023800 	.word	0x40023800

0800136c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b08a      	sub	sp, #40	@ 0x28
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001374:	f107 0314 	add.w	r3, r7, #20
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	4a19      	ldr	r2, [pc, #100]	@ (80013f0 <HAL_UART_MspInit+0x84>)
 800138a:	4293      	cmp	r3, r2
 800138c:	d12c      	bne.n	80013e8 <HAL_UART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800138e:	2300      	movs	r3, #0
 8001390:	613b      	str	r3, [r7, #16]
 8001392:	4b18      	ldr	r3, [pc, #96]	@ (80013f4 <HAL_UART_MspInit+0x88>)
 8001394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001396:	4a17      	ldr	r2, [pc, #92]	@ (80013f4 <HAL_UART_MspInit+0x88>)
 8001398:	f043 0310 	orr.w	r3, r3, #16
 800139c:	6453      	str	r3, [r2, #68]	@ 0x44
 800139e:	4b15      	ldr	r3, [pc, #84]	@ (80013f4 <HAL_UART_MspInit+0x88>)
 80013a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013a2:	f003 0310 	and.w	r3, r3, #16
 80013a6:	613b      	str	r3, [r7, #16]
 80013a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
 80013ae:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <HAL_UART_MspInit+0x88>)
 80013b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013b2:	4a10      	ldr	r2, [pc, #64]	@ (80013f4 <HAL_UART_MspInit+0x88>)
 80013b4:	f043 0301 	orr.w	r3, r3, #1
 80013b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ba:	4b0e      	ldr	r3, [pc, #56]	@ (80013f4 <HAL_UART_MspInit+0x88>)
 80013bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013be:	f003 0301 	and.w	r3, r3, #1
 80013c2:	60fb      	str	r3, [r7, #12]
 80013c4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80013c6:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80013ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013d4:	2303      	movs	r3, #3
 80013d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80013d8:	2307      	movs	r3, #7
 80013da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013dc:	f107 0314 	add.w	r3, r7, #20
 80013e0:	4619      	mov	r1, r3
 80013e2:	4805      	ldr	r0, [pc, #20]	@ (80013f8 <HAL_UART_MspInit+0x8c>)
 80013e4:	f000 fd3c 	bl	8001e60 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80013e8:	bf00      	nop
 80013ea:	3728      	adds	r7, #40	@ 0x28
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	40011000 	.word	0x40011000
 80013f4:	40023800 	.word	0x40023800
 80013f8:	40020000 	.word	0x40020000

080013fc <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b086      	sub	sp, #24
 8001400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8001410:	4b3b      	ldr	r3, [pc, #236]	@ (8001500 <HAL_FMC_MspInit+0x104>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d16f      	bne.n	80014f8 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8001418:	4b39      	ldr	r3, [pc, #228]	@ (8001500 <HAL_FMC_MspInit+0x104>)
 800141a:	2201      	movs	r2, #1
 800141c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	603b      	str	r3, [r7, #0]
 8001422:	4b38      	ldr	r3, [pc, #224]	@ (8001504 <HAL_FMC_MspInit+0x108>)
 8001424:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001426:	4a37      	ldr	r2, [pc, #220]	@ (8001504 <HAL_FMC_MspInit+0x108>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6393      	str	r3, [r2, #56]	@ 0x38
 800142e:	4b35      	ldr	r3, [pc, #212]	@ (8001504 <HAL_FMC_MspInit+0x108>)
 8001430:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	603b      	str	r3, [r7, #0]
 8001438:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE0   ------> FMC_NBL0
  PE1   ------> FMC_NBL1
  */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800143a:	f64c 033f 	movw	r3, #51263	@ 0xc83f
 800143e:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A8_Pin
                          |A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001440:	2302      	movs	r3, #2
 8001442:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001448:	2303      	movs	r3, #3
 800144a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800144c:	230c      	movs	r3, #12
 800144e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001450:	1d3b      	adds	r3, r7, #4
 8001452:	4619      	mov	r1, r3
 8001454:	482c      	ldr	r0, [pc, #176]	@ (8001508 <HAL_FMC_MspInit+0x10c>)
 8001456:	f000 fd03 	bl	8001e60 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDNWE_Pin;
 800145a:	2301      	movs	r3, #1
 800145c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800145e:	2302      	movs	r3, #2
 8001460:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001466:	2303      	movs	r3, #3
 8001468:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800146a:	230c      	movs	r3, #12
 800146c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800146e:	1d3b      	adds	r3, r7, #4
 8001470:	4619      	mov	r1, r3
 8001472:	4826      	ldr	r0, [pc, #152]	@ (800150c <HAL_FMC_MspInit+0x110>)
 8001474:	f000 fcf4 	bl	8001e60 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8001478:	f248 1333 	movw	r3, #33075	@ 0x8133
 800147c:	607b      	str	r3, [r7, #4]
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800147e:	2302      	movs	r3, #2
 8001480:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001486:	2303      	movs	r3, #3
 8001488:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800148a:	230c      	movs	r3, #12
 800148c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	4619      	mov	r1, r3
 8001492:	481f      	ldr	r0, [pc, #124]	@ (8001510 <HAL_FMC_MspInit+0x114>)
 8001494:	f000 fce4 	bl	8001e60 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8001498:	f64f 7383 	movw	r3, #65411	@ 0xff83
 800149c:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800149e:	2302      	movs	r3, #2
 80014a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a6:	2303      	movs	r3, #3
 80014a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014aa:	230c      	movs	r3, #12
 80014ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80014ae:	1d3b      	adds	r3, r7, #4
 80014b0:	4619      	mov	r1, r3
 80014b2:	4818      	ldr	r0, [pc, #96]	@ (8001514 <HAL_FMC_MspInit+0x118>)
 80014b4:	f000 fcd4 	bl	8001e60 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80014b8:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80014bc:	607b      	str	r3, [r7, #4]
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014be:	2302      	movs	r3, #2
 80014c0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014c6:	2303      	movs	r3, #3
 80014c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014ca:	230c      	movs	r3, #12
 80014cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ce:	1d3b      	adds	r3, r7, #4
 80014d0:	4619      	mov	r1, r3
 80014d2:	4811      	ldr	r0, [pc, #68]	@ (8001518 <HAL_FMC_MspInit+0x11c>)
 80014d4:	f000 fcc4 	bl	8001e60 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 80014d8:	2360      	movs	r3, #96	@ 0x60
 80014da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014e8:	230c      	movs	r3, #12
 80014ea:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	4619      	mov	r1, r3
 80014f0:	480a      	ldr	r0, [pc, #40]	@ (800151c <HAL_FMC_MspInit+0x120>)
 80014f2:	f000 fcb5 	bl	8001e60 <HAL_GPIO_Init>
 80014f6:	e000      	b.n	80014fa <HAL_FMC_MspInit+0xfe>
    return;
 80014f8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80014fa:	3718      	adds	r7, #24
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bd80      	pop	{r7, pc}
 8001500:	200002f8 	.word	0x200002f8
 8001504:	40023800 	.word	0x40023800
 8001508:	40021400 	.word	0x40021400
 800150c:	40020800 	.word	0x40020800
 8001510:	40021800 	.word	0x40021800
 8001514:	40021000 	.word	0x40021000
 8001518:	40020c00 	.word	0x40020c00
 800151c:	40020400 	.word	0x40020400

08001520 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8001520:	b580      	push	{r7, lr}
 8001522:	b082      	sub	sp, #8
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8001528:	f7ff ff68 	bl	80013fc <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800152c:	bf00      	nop
 800152e:	3708      	adds	r7, #8
 8001530:	46bd      	mov	sp, r7
 8001532:	bd80      	pop	{r7, pc}

08001534 <HAL_InitTick>:
 8001534:	b580      	push	{r7, lr}
 8001536:	b08e      	sub	sp, #56	@ 0x38
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	2300      	movs	r3, #0
 800153e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001540:	2300      	movs	r3, #0
 8001542:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001544:	2300      	movs	r3, #0
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	4b33      	ldr	r3, [pc, #204]	@ (8001618 <HAL_InitTick+0xe4>)
 800154a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800154c:	4a32      	ldr	r2, [pc, #200]	@ (8001618 <HAL_InitTick+0xe4>)
 800154e:	f043 0310 	orr.w	r3, r3, #16
 8001552:	6413      	str	r3, [r2, #64]	@ 0x40
 8001554:	4b30      	ldr	r3, [pc, #192]	@ (8001618 <HAL_InitTick+0xe4>)
 8001556:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001558:	f003 0310 	and.w	r3, r3, #16
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	f107 0210 	add.w	r2, r7, #16
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	4611      	mov	r1, r2
 800156a:	4618      	mov	r0, r3
 800156c:	f004 f932 	bl	80057d4 <HAL_RCC_GetClockConfig>
 8001570:	6a3b      	ldr	r3, [r7, #32]
 8001572:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001576:	2b00      	cmp	r3, #0
 8001578:	d103      	bne.n	8001582 <HAL_InitTick+0x4e>
 800157a:	f004 f903 	bl	8005784 <HAL_RCC_GetPCLK1Freq>
 800157e:	6378      	str	r0, [r7, #52]	@ 0x34
 8001580:	e004      	b.n	800158c <HAL_InitTick+0x58>
 8001582:	f004 f8ff 	bl	8005784 <HAL_RCC_GetPCLK1Freq>
 8001586:	4603      	mov	r3, r0
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	637b      	str	r3, [r7, #52]	@ 0x34
 800158c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800158e:	4a23      	ldr	r2, [pc, #140]	@ (800161c <HAL_InitTick+0xe8>)
 8001590:	fba2 2303 	umull	r2, r3, r2, r3
 8001594:	0c9b      	lsrs	r3, r3, #18
 8001596:	3b01      	subs	r3, #1
 8001598:	62bb      	str	r3, [r7, #40]	@ 0x28
 800159a:	4b21      	ldr	r3, [pc, #132]	@ (8001620 <HAL_InitTick+0xec>)
 800159c:	4a21      	ldr	r2, [pc, #132]	@ (8001624 <HAL_InitTick+0xf0>)
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	4b1f      	ldr	r3, [pc, #124]	@ (8001620 <HAL_InitTick+0xec>)
 80015a2:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015a6:	60da      	str	r2, [r3, #12]
 80015a8:	4a1d      	ldr	r2, [pc, #116]	@ (8001620 <HAL_InitTick+0xec>)
 80015aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80015ac:	6053      	str	r3, [r2, #4]
 80015ae:	4b1c      	ldr	r3, [pc, #112]	@ (8001620 <HAL_InitTick+0xec>)
 80015b0:	2200      	movs	r2, #0
 80015b2:	611a      	str	r2, [r3, #16]
 80015b4:	4b1a      	ldr	r3, [pc, #104]	@ (8001620 <HAL_InitTick+0xec>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
 80015ba:	4b19      	ldr	r3, [pc, #100]	@ (8001620 <HAL_InitTick+0xec>)
 80015bc:	2200      	movs	r2, #0
 80015be:	619a      	str	r2, [r3, #24]
 80015c0:	4817      	ldr	r0, [pc, #92]	@ (8001620 <HAL_InitTick+0xec>)
 80015c2:	f005 f8ff 	bl	80067c4 <HAL_TIM_Base_Init>
 80015c6:	4603      	mov	r3, r0
 80015c8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80015cc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d11b      	bne.n	800160c <HAL_InitTick+0xd8>
 80015d4:	4812      	ldr	r0, [pc, #72]	@ (8001620 <HAL_InitTick+0xec>)
 80015d6:	f005 f945 	bl	8006864 <HAL_TIM_Base_Start_IT>
 80015da:	4603      	mov	r3, r0
 80015dc:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 80015e0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d111      	bne.n	800160c <HAL_InitTick+0xd8>
 80015e8:	2036      	movs	r0, #54	@ 0x36
 80015ea:	f000 fa23 	bl	8001a34 <HAL_NVIC_EnableIRQ>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2b0f      	cmp	r3, #15
 80015f2:	d808      	bhi.n	8001606 <HAL_InitTick+0xd2>
 80015f4:	2200      	movs	r2, #0
 80015f6:	6879      	ldr	r1, [r7, #4]
 80015f8:	2036      	movs	r0, #54	@ 0x36
 80015fa:	f000 f9ff 	bl	80019fc <HAL_NVIC_SetPriority>
 80015fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001628 <HAL_InitTick+0xf4>)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6013      	str	r3, [r2, #0]
 8001604:	e002      	b.n	800160c <HAL_InitTick+0xd8>
 8001606:	2301      	movs	r3, #1
 8001608:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
 800160c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001610:	4618      	mov	r0, r3
 8001612:	3738      	adds	r7, #56	@ 0x38
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40023800 	.word	0x40023800
 800161c:	431bde83 	.word	0x431bde83
 8001620:	200002fc 	.word	0x200002fc
 8001624:	40001000 	.word	0x40001000
 8001628:	20000004 	.word	0x20000004

0800162c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001630:	bf00      	nop
 8001632:	e7fd      	b.n	8001630 <NMI_Handler+0x4>

08001634 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001638:	bf00      	nop
 800163a:	e7fd      	b.n	8001638 <HardFault_Handler+0x4>

0800163c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001640:	bf00      	nop
 8001642:	e7fd      	b.n	8001640 <MemManage_Handler+0x4>

08001644 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001648:	bf00      	nop
 800164a:	e7fd      	b.n	8001648 <BusFault_Handler+0x4>

0800164c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001650:	bf00      	nop
 8001652:	e7fd      	b.n	8001650 <UsageFault_Handler+0x4>

08001654 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001654:	b480      	push	{r7}
 8001656:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001658:	bf00      	nop
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001662:	b480      	push	{r7}
 8001664:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001666:	bf00      	nop
 8001668:	46bd      	mov	sp, r7
 800166a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166e:	4770      	bx	lr

08001670 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001670:	b480      	push	{r7}
 8001672:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr

0800167e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800167e:	b480      	push	{r7}
 8001680:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	46bd      	mov	sp, r7
 8001686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168a:	4770      	bx	lr

0800168c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001690:	4802      	ldr	r0, [pc, #8]	@ (800169c <TIM6_DAC_IRQHandler+0x10>)
 8001692:	f005 f957 	bl	8006944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	200002fc 	.word	0x200002fc

080016a0 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_HS);
 80016a4:	4802      	ldr	r0, [pc, #8]	@ (80016b0 <OTG_HS_IRQHandler+0x10>)
 80016a6:	f001 f881 	bl	80027ac <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000728 	.word	0x20000728

080016b4 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80016b8:	4802      	ldr	r0, [pc, #8]	@ (80016c4 <LTDC_IRQHandler+0x10>)
 80016ba:	f003 f95b 	bl	8004974 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80016be:	bf00      	nop
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	20000134 	.word	0x20000134

080016c8 <DMA2D_IRQHandler>:

/**
  * @brief This function handles DMA2D global interrupt.
  */
void DMA2D_IRQHandler(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80016cc:	4802      	ldr	r0, [pc, #8]	@ (80016d8 <DMA2D_IRQHandler+0x10>)
 80016ce:	f000 fa24 	bl	8001b1a <HAL_DMA2D_IRQHandler>
  /* USER CODE BEGIN DMA2D_IRQn 1 */

  /* USER CODE END DMA2D_IRQn 1 */
}
 80016d2:	bf00      	nop
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200000a0 	.word	0x200000a0

080016dc <_sbrk>:
 80016dc:	b580      	push	{r7, lr}
 80016de:	b086      	sub	sp, #24
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	4a14      	ldr	r2, [pc, #80]	@ (8001738 <_sbrk+0x5c>)
 80016e6:	4b15      	ldr	r3, [pc, #84]	@ (800173c <_sbrk+0x60>)
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	613b      	str	r3, [r7, #16]
 80016f0:	4b13      	ldr	r3, [pc, #76]	@ (8001740 <_sbrk+0x64>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d102      	bne.n	80016fe <_sbrk+0x22>
 80016f8:	4b11      	ldr	r3, [pc, #68]	@ (8001740 <_sbrk+0x64>)
 80016fa:	4a12      	ldr	r2, [pc, #72]	@ (8001744 <_sbrk+0x68>)
 80016fc:	601a      	str	r2, [r3, #0]
 80016fe:	4b10      	ldr	r3, [pc, #64]	@ (8001740 <_sbrk+0x64>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	4413      	add	r3, r2
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	429a      	cmp	r2, r3
 800170a:	d207      	bcs.n	800171c <_sbrk+0x40>
 800170c:	f009 ffac 	bl	800b668 <__errno>
 8001710:	4603      	mov	r3, r0
 8001712:	220c      	movs	r2, #12
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	f04f 33ff 	mov.w	r3, #4294967295
 800171a:	e009      	b.n	8001730 <_sbrk+0x54>
 800171c:	4b08      	ldr	r3, [pc, #32]	@ (8001740 <_sbrk+0x64>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	4b07      	ldr	r3, [pc, #28]	@ (8001740 <_sbrk+0x64>)
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	4413      	add	r3, r2
 800172a:	4a05      	ldr	r2, [pc, #20]	@ (8001740 <_sbrk+0x64>)
 800172c:	6013      	str	r3, [r2, #0]
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	4618      	mov	r0, r3
 8001732:	3718      	adds	r7, #24
 8001734:	46bd      	mov	sp, r7
 8001736:	bd80      	pop	{r7, pc}
 8001738:	20030000 	.word	0x20030000
 800173c:	00000400 	.word	0x00000400
 8001740:	20000344 	.word	0x20000344
 8001744:	20000c50 	.word	0x20000c50

08001748 <SystemInit>:
 8001748:	b480      	push	{r7}
 800174a:	af00      	add	r7, sp, #0
 800174c:	4b06      	ldr	r3, [pc, #24]	@ (8001768 <SystemInit+0x20>)
 800174e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001752:	4a05      	ldr	r2, [pc, #20]	@ (8001768 <SystemInit+0x20>)
 8001754:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001758:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
 800175c:	bf00      	nop
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	e000ed00 	.word	0xe000ed00

0800176c <Reset_Handler>:
 800176c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017a4 <LoopFillZerobss+0xe>
 8001770:	f7ff ffea 	bl	8001748 <SystemInit>
 8001774:	480c      	ldr	r0, [pc, #48]	@ (80017a8 <LoopFillZerobss+0x12>)
 8001776:	490d      	ldr	r1, [pc, #52]	@ (80017ac <LoopFillZerobss+0x16>)
 8001778:	4a0d      	ldr	r2, [pc, #52]	@ (80017b0 <LoopFillZerobss+0x1a>)
 800177a:	2300      	movs	r3, #0
 800177c:	e002      	b.n	8001784 <LoopCopyDataInit>

0800177e <CopyDataInit>:
 800177e:	58d4      	ldr	r4, [r2, r3]
 8001780:	50c4      	str	r4, [r0, r3]
 8001782:	3304      	adds	r3, #4

08001784 <LoopCopyDataInit>:
 8001784:	18c4      	adds	r4, r0, r3
 8001786:	428c      	cmp	r4, r1
 8001788:	d3f9      	bcc.n	800177e <CopyDataInit>
 800178a:	4a0a      	ldr	r2, [pc, #40]	@ (80017b4 <LoopFillZerobss+0x1e>)
 800178c:	4c0a      	ldr	r4, [pc, #40]	@ (80017b8 <LoopFillZerobss+0x22>)
 800178e:	2300      	movs	r3, #0
 8001790:	e001      	b.n	8001796 <LoopFillZerobss>

08001792 <FillZerobss>:
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	3204      	adds	r2, #4

08001796 <LoopFillZerobss>:
 8001796:	42a2      	cmp	r2, r4
 8001798:	d3fb      	bcc.n	8001792 <FillZerobss>
 800179a:	f009 ff6b 	bl	800b674 <__libc_init_array>
 800179e:	f7fe ff9f 	bl	80006e0 <main>
 80017a2:	4770      	bx	lr
 80017a4:	20030000 	.word	0x20030000
 80017a8:	20000000 	.word	0x20000000
 80017ac:	2000007c 	.word	0x2000007c
 80017b0:	0800be90 	.word	0x0800be90
 80017b4:	2000007c 	.word	0x2000007c
 80017b8:	20000c50 	.word	0x20000c50

080017bc <ADC_IRQHandler>:
 80017bc:	e7fe      	b.n	80017bc <ADC_IRQHandler>
	...

080017c0 <HAL_Init>:
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	4b0e      	ldr	r3, [pc, #56]	@ (8001800 <HAL_Init+0x40>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a0d      	ldr	r2, [pc, #52]	@ (8001800 <HAL_Init+0x40>)
 80017ca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001800 <HAL_Init+0x40>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001800 <HAL_Init+0x40>)
 80017d6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	4b08      	ldr	r3, [pc, #32]	@ (8001800 <HAL_Init+0x40>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a07      	ldr	r2, [pc, #28]	@ (8001800 <HAL_Init+0x40>)
 80017e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80017e6:	6013      	str	r3, [r2, #0]
 80017e8:	2003      	movs	r0, #3
 80017ea:	f000 f8fc 	bl	80019e6 <HAL_NVIC_SetPriorityGrouping>
 80017ee:	200f      	movs	r0, #15
 80017f0:	f7ff fea0 	bl	8001534 <HAL_InitTick>
 80017f4:	f7ff fb44 	bl	8000e80 <HAL_MspInit>
 80017f8:	2300      	movs	r3, #0
 80017fa:	4618      	mov	r0, r3
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40023c00 	.word	0x40023c00

08001804 <HAL_IncTick>:
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
 8001808:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <HAL_IncTick+0x20>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	461a      	mov	r2, r3
 800180e:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <HAL_IncTick+0x24>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4413      	add	r3, r2
 8001814:	4a04      	ldr	r2, [pc, #16]	@ (8001828 <HAL_IncTick+0x24>)
 8001816:	6013      	str	r3, [r2, #0]
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	20000008 	.word	0x20000008
 8001828:	20000348 	.word	0x20000348

0800182c <HAL_GetTick>:
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
 8001830:	4b03      	ldr	r3, [pc, #12]	@ (8001840 <HAL_GetTick+0x14>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4618      	mov	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	20000348 	.word	0x20000348

08001844 <HAL_Delay>:
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
 800184c:	f7ff ffee 	bl	800182c <HAL_GetTick>
 8001850:	60b8      	str	r0, [r7, #8]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	60fb      	str	r3, [r7, #12]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f1b3 3fff 	cmp.w	r3, #4294967295
 800185c:	d005      	beq.n	800186a <HAL_Delay+0x26>
 800185e:	4b0a      	ldr	r3, [pc, #40]	@ (8001888 <HAL_Delay+0x44>)
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	461a      	mov	r2, r3
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4413      	add	r3, r2
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	bf00      	nop
 800186c:	f7ff ffde 	bl	800182c <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	68bb      	ldr	r3, [r7, #8]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	68fa      	ldr	r2, [r7, #12]
 8001878:	429a      	cmp	r2, r3
 800187a:	d8f7      	bhi.n	800186c <HAL_Delay+0x28>
 800187c:	bf00      	nop
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000008 	.word	0x20000008

0800188c <__NVIC_SetPriorityGrouping>:
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f003 0307 	and.w	r3, r3, #7
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	4b0c      	ldr	r3, [pc, #48]	@ (80018d0 <__NVIC_SetPriorityGrouping+0x44>)
 800189e:	68db      	ldr	r3, [r3, #12]
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	68ba      	ldr	r2, [r7, #8]
 80018a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80018a8:	4013      	ands	r3, r2
 80018aa:	60bb      	str	r3, [r7, #8]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	021a      	lsls	r2, r3, #8
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80018b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	4a04      	ldr	r2, [pc, #16]	@ (80018d0 <__NVIC_SetPriorityGrouping+0x44>)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	60d3      	str	r3, [r2, #12]
 80018c4:	bf00      	nop
 80018c6:	3714      	adds	r7, #20
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	e000ed00 	.word	0xe000ed00

080018d4 <__NVIC_GetPriorityGrouping>:
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
 80018d8:	4b04      	ldr	r3, [pc, #16]	@ (80018ec <__NVIC_GetPriorityGrouping+0x18>)
 80018da:	68db      	ldr	r3, [r3, #12]
 80018dc:	0a1b      	lsrs	r3, r3, #8
 80018de:	f003 0307 	and.w	r3, r3, #7
 80018e2:	4618      	mov	r0, r3
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <__NVIC_EnableIRQ>:
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	71fb      	strb	r3, [r7, #7]
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	2b00      	cmp	r3, #0
 8001900:	db0b      	blt.n	800191a <__NVIC_EnableIRQ+0x2a>
 8001902:	79fb      	ldrb	r3, [r7, #7]
 8001904:	f003 021f 	and.w	r2, r3, #31
 8001908:	4907      	ldr	r1, [pc, #28]	@ (8001928 <__NVIC_EnableIRQ+0x38>)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	095b      	lsrs	r3, r3, #5
 8001910:	2001      	movs	r0, #1
 8001912:	fa00 f202 	lsl.w	r2, r0, r2
 8001916:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
 8001926:	bf00      	nop
 8001928:	e000e100 	.word	0xe000e100

0800192c <__NVIC_SetPriority>:
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	6039      	str	r1, [r7, #0]
 8001936:	71fb      	strb	r3, [r7, #7]
 8001938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193c:	2b00      	cmp	r3, #0
 800193e:	db0a      	blt.n	8001956 <__NVIC_SetPriority+0x2a>
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	b2da      	uxtb	r2, r3
 8001944:	490c      	ldr	r1, [pc, #48]	@ (8001978 <__NVIC_SetPriority+0x4c>)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	0112      	lsls	r2, r2, #4
 800194c:	b2d2      	uxtb	r2, r2
 800194e:	440b      	add	r3, r1
 8001950:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
 8001954:	e00a      	b.n	800196c <__NVIC_SetPriority+0x40>
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	b2da      	uxtb	r2, r3
 800195a:	4908      	ldr	r1, [pc, #32]	@ (800197c <__NVIC_SetPriority+0x50>)
 800195c:	79fb      	ldrb	r3, [r7, #7]
 800195e:	f003 030f 	and.w	r3, r3, #15
 8001962:	3b04      	subs	r3, #4
 8001964:	0112      	lsls	r2, r2, #4
 8001966:	b2d2      	uxtb	r2, r2
 8001968:	440b      	add	r3, r1
 800196a:	761a      	strb	r2, [r3, #24]
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr
 8001978:	e000e100 	.word	0xe000e100
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <NVIC_EncodePriority>:
 8001980:	b480      	push	{r7}
 8001982:	b089      	sub	sp, #36	@ 0x24
 8001984:	af00      	add	r7, sp, #0
 8001986:	60f8      	str	r0, [r7, #12]
 8001988:	60b9      	str	r1, [r7, #8]
 800198a:	607a      	str	r2, [r7, #4]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	f003 0307 	and.w	r3, r3, #7
 8001992:	61fb      	str	r3, [r7, #28]
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	f1c3 0307 	rsb	r3, r3, #7
 800199a:	2b04      	cmp	r3, #4
 800199c:	bf28      	it	cs
 800199e:	2304      	movcs	r3, #4
 80019a0:	61bb      	str	r3, [r7, #24]
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	3304      	adds	r3, #4
 80019a6:	2b06      	cmp	r3, #6
 80019a8:	d902      	bls.n	80019b0 <NVIC_EncodePriority+0x30>
 80019aa:	69fb      	ldr	r3, [r7, #28]
 80019ac:	3b03      	subs	r3, #3
 80019ae:	e000      	b.n	80019b2 <NVIC_EncodePriority+0x32>
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
 80019b4:	f04f 32ff 	mov.w	r2, #4294967295
 80019b8:	69bb      	ldr	r3, [r7, #24]
 80019ba:	fa02 f303 	lsl.w	r3, r2, r3
 80019be:	43da      	mvns	r2, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	401a      	ands	r2, r3
 80019c4:	697b      	ldr	r3, [r7, #20]
 80019c6:	409a      	lsls	r2, r3
 80019c8:	f04f 31ff 	mov.w	r1, #4294967295
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	fa01 f303 	lsl.w	r3, r1, r3
 80019d2:	43d9      	mvns	r1, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	400b      	ands	r3, r1
 80019d8:	4313      	orrs	r3, r2
 80019da:	4618      	mov	r0, r3
 80019dc:	3724      	adds	r7, #36	@ 0x24
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr

080019e6 <HAL_NVIC_SetPriorityGrouping>:
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b082      	sub	sp, #8
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	6078      	str	r0, [r7, #4]
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f7ff ff4c 	bl	800188c <__NVIC_SetPriorityGrouping>
 80019f4:	bf00      	nop
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}

080019fc <HAL_NVIC_SetPriority>:
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	4603      	mov	r3, r0
 8001a04:	60b9      	str	r1, [r7, #8]
 8001a06:	607a      	str	r2, [r7, #4]
 8001a08:	73fb      	strb	r3, [r7, #15]
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	f7ff ff61 	bl	80018d4 <__NVIC_GetPriorityGrouping>
 8001a12:	6178      	str	r0, [r7, #20]
 8001a14:	687a      	ldr	r2, [r7, #4]
 8001a16:	68b9      	ldr	r1, [r7, #8]
 8001a18:	6978      	ldr	r0, [r7, #20]
 8001a1a:	f7ff ffb1 	bl	8001980 <NVIC_EncodePriority>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a24:	4611      	mov	r1, r2
 8001a26:	4618      	mov	r0, r3
 8001a28:	f7ff ff80 	bl	800192c <__NVIC_SetPriority>
 8001a2c:	bf00      	nop
 8001a2e:	3718      	adds	r7, #24
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}

08001a34 <HAL_NVIC_EnableIRQ>:
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	71fb      	strb	r3, [r7, #7]
 8001a3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f7ff ff54 	bl	80018f0 <__NVIC_EnableIRQ>
 8001a48:	bf00      	nop
 8001a4a:	3708      	adds	r7, #8
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <HAL_CRC_Init>:
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d101      	bne.n	8001a62 <HAL_CRC_Init+0x12>
 8001a5e:	2301      	movs	r3, #1
 8001a60:	e00e      	b.n	8001a80 <HAL_CRC_Init+0x30>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	795b      	ldrb	r3, [r3, #5]
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d105      	bne.n	8001a78 <HAL_CRC_Init+0x28>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2200      	movs	r2, #0
 8001a70:	711a      	strb	r2, [r3, #4]
 8001a72:	6878      	ldr	r0, [r7, #4]
 8001a74:	f7ff fa2c 	bl	8000ed0 <HAL_CRC_MspInit>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	2201      	movs	r2, #1
 8001a7c:	715a      	strb	r2, [r3, #5]
 8001a7e:	2300      	movs	r3, #0
 8001a80:	4618      	mov	r0, r3
 8001a82:	3708      	adds	r7, #8
 8001a84:	46bd      	mov	sp, r7
 8001a86:	bd80      	pop	{r7, pc}

08001a88 <HAL_DMA2D_Init>:
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b082      	sub	sp, #8
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d101      	bne.n	8001a9a <HAL_DMA2D_Init+0x12>
 8001a96:	2301      	movs	r3, #1
 8001a98:	e03b      	b.n	8001b12 <HAL_DMA2D_Init+0x8a>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d106      	bne.n	8001ab4 <HAL_DMA2D_Init+0x2c>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff fa30 	bl	8000f14 <HAL_DMA2D_MspInit>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	430a      	orrs	r2, r1
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001ad8:	f023 0107 	bic.w	r1, r3, #7
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689a      	ldr	r2, [r3, #8]
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	635a      	str	r2, [r3, #52]	@ 0x34
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aee:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001af2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	68d1      	ldr	r1, [r2, #12]
 8001afa:	687a      	ldr	r2, [r7, #4]
 8001afc:	6812      	ldr	r2, [r2, #0]
 8001afe:	430b      	orrs	r3, r1
 8001b00:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2200      	movs	r2, #0
 8001b06:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8001b10:	2300      	movs	r3, #0
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <HAL_DMA2D_IRQHandler>:
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b084      	sub	sp, #16
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	685b      	ldr	r3, [r3, #4]
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	60bb      	str	r3, [r7, #8]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f003 0301 	and.w	r3, r3, #1
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d026      	beq.n	8001b8a <HAL_DMA2D_IRQHandler+0x70>
 8001b3c:	68bb      	ldr	r3, [r7, #8]
 8001b3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d021      	beq.n	8001b8a <HAL_DMA2D_IRQHandler+0x70>
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001b54:	601a      	str	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b5a:	f043 0201 	orr.w	r2, r3, #1
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	2201      	movs	r2, #1
 8001b68:	609a      	str	r2, [r3, #8]
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2204      	movs	r2, #4
 8001b6e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	2200      	movs	r2, #0
 8001b76:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <HAL_DMA2D_IRQHandler+0x70>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	4798      	blx	r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	f003 0320 	and.w	r3, r3, #32
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d026      	beq.n	8001be2 <HAL_DMA2D_IRQHandler+0xc8>
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d021      	beq.n	8001be2 <HAL_DMA2D_IRQHandler+0xc8>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001bac:	601a      	str	r2, [r3, #0]
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	2220      	movs	r2, #32
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001bba:	f043 0202 	orr.w	r2, r3, #2
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2204      	movs	r2, #4
 8001bc6:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d003      	beq.n	8001be2 <HAL_DMA2D_IRQHandler+0xc8>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	4798      	blx	r3
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	f003 0308 	and.w	r3, r3, #8
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d026      	beq.n	8001c3a <HAL_DMA2D_IRQHandler+0x120>
 8001bec:	68bb      	ldr	r3, [r7, #8]
 8001bee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d021      	beq.n	8001c3a <HAL_DMA2D_IRQHandler+0x120>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	681a      	ldr	r2, [r3, #0]
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001c04:	601a      	str	r2, [r3, #0]
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	2208      	movs	r2, #8
 8001c0c:	609a      	str	r2, [r3, #8]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c12:	f043 0204 	orr.w	r2, r3, #4
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2204      	movs	r2, #4
 8001c1e:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2200      	movs	r2, #0
 8001c26:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	695b      	ldr	r3, [r3, #20]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_DMA2D_IRQHandler+0x120>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	695b      	ldr	r3, [r3, #20]
 8001c36:	6878      	ldr	r0, [r7, #4]
 8001c38:	4798      	blx	r3
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	f003 0304 	and.w	r3, r3, #4
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d013      	beq.n	8001c6c <HAL_DMA2D_IRQHandler+0x152>
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d00e      	beq.n	8001c6c <HAL_DMA2D_IRQHandler+0x152>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681a      	ldr	r2, [r3, #0]
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	2204      	movs	r2, #4
 8001c64:	609a      	str	r2, [r3, #8]
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f853 	bl	8001d12 <HAL_DMA2D_LineEventCallback>
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	f003 0302 	and.w	r3, r3, #2
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d024      	beq.n	8001cc0 <HAL_DMA2D_IRQHandler+0x1a6>
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d01f      	beq.n	8001cc0 <HAL_DMA2D_IRQHandler+0x1a6>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001c8e:	601a      	str	r2, [r3, #0]
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	2202      	movs	r2, #2
 8001c96:	609a      	str	r2, [r3, #8]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2201      	movs	r2, #1
 8001ca4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	691b      	ldr	r3, [r3, #16]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d003      	beq.n	8001cc0 <HAL_DMA2D_IRQHandler+0x1a6>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	691b      	ldr	r3, [r3, #16]
 8001cbc:	6878      	ldr	r0, [r7, #4]
 8001cbe:	4798      	blx	r3
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	f003 0310 	and.w	r3, r3, #16
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d01f      	beq.n	8001d0a <HAL_DMA2D_IRQHandler+0x1f0>
 8001cca:	68bb      	ldr	r3, [r7, #8]
 8001ccc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d01a      	beq.n	8001d0a <HAL_DMA2D_IRQHandler+0x1f0>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2210      	movs	r2, #16
 8001cea:	609a      	str	r2, [r3, #8]
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	63da      	str	r2, [r3, #60]	@ 0x3c
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f000 f80e 	bl	8001d26 <HAL_DMA2D_CLUTLoadingCpltCallback>
 8001d0a:	bf00      	nop
 8001d0c:	3710      	adds	r7, #16
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}

08001d12 <HAL_DMA2D_LineEventCallback>:
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr

08001d26 <HAL_DMA2D_CLUTLoadingCpltCallback>:
 8001d26:	b480      	push	{r7}
 8001d28:	b083      	sub	sp, #12
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]
 8001d2e:	bf00      	nop
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
	...

08001d3c <HAL_DMA2D_ConfigLayer>:
 8001d3c:	b480      	push	{r7}
 8001d3e:	b087      	sub	sp, #28
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d101      	bne.n	8001d5c <HAL_DMA2D_ConfigLayer+0x20>
 8001d58:	2302      	movs	r3, #2
 8001d5a:	e079      	b.n	8001e50 <HAL_DMA2D_ConfigLayer+0x114>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2201      	movs	r2, #1
 8001d60:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2202      	movs	r2, #2
 8001d68:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	011b      	lsls	r3, r3, #4
 8001d70:	3318      	adds	r3, #24
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	4413      	add	r3, r2
 8001d76:	613b      	str	r3, [r7, #16]
 8001d78:	693b      	ldr	r3, [r7, #16]
 8001d7a:	685a      	ldr	r2, [r3, #4]
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	041b      	lsls	r3, r3, #16
 8001d82:	4313      	orrs	r3, r2
 8001d84:	617b      	str	r3, [r7, #20]
 8001d86:	4b35      	ldr	r3, [pc, #212]	@ (8001e5c <HAL_DMA2D_ConfigLayer+0x120>)
 8001d88:	60fb      	str	r3, [r7, #12]
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	2b0a      	cmp	r3, #10
 8001d90:	d003      	beq.n	8001d9a <HAL_DMA2D_ConfigLayer+0x5e>
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	685b      	ldr	r3, [r3, #4]
 8001d96:	2b09      	cmp	r3, #9
 8001d98:	d107      	bne.n	8001daa <HAL_DMA2D_ConfigLayer+0x6e>
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8001da2:	697a      	ldr	r2, [r7, #20]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	617b      	str	r3, [r7, #20]
 8001da8:	e005      	b.n	8001db6 <HAL_DMA2D_ConfigLayer+0x7a>
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	68db      	ldr	r3, [r3, #12]
 8001dae:	061b      	lsls	r3, r3, #24
 8001db0:	697a      	ldr	r2, [r7, #20]
 8001db2:	4313      	orrs	r3, r2
 8001db4:	617b      	str	r3, [r7, #20]
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d120      	bne.n	8001dfe <HAL_DMA2D_ConfigLayer+0xc2>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	ea02 0103 	and.w	r1, r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	625a      	str	r2, [r3, #36]	@ 0x24
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	693a      	ldr	r2, [r7, #16]
 8001dda:	6812      	ldr	r2, [r2, #0]
 8001ddc:	619a      	str	r2, [r3, #24]
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	2b0a      	cmp	r3, #10
 8001de4:	d003      	beq.n	8001dee <HAL_DMA2D_ConfigLayer+0xb2>
 8001de6:	693b      	ldr	r3, [r7, #16]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	2b09      	cmp	r3, #9
 8001dec:	d127      	bne.n	8001e3e <HAL_DMA2D_ConfigLayer+0x102>
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	68da      	ldr	r2, [r3, #12]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001dfa:	629a      	str	r2, [r3, #40]	@ 0x28
 8001dfc:	e01f      	b.n	8001e3e <HAL_DMA2D_ConfigLayer+0x102>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	69da      	ldr	r2, [r3, #28]
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	43db      	mvns	r3, r3
 8001e08:	ea02 0103 	and.w	r1, r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	697a      	ldr	r2, [r7, #20]
 8001e12:	430a      	orrs	r2, r1
 8001e14:	61da      	str	r2, [r3, #28]
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	693a      	ldr	r2, [r7, #16]
 8001e1c:	6812      	ldr	r2, [r2, #0]
 8001e1e:	611a      	str	r2, [r3, #16]
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b0a      	cmp	r3, #10
 8001e26:	d003      	beq.n	8001e30 <HAL_DMA2D_ConfigLayer+0xf4>
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b09      	cmp	r3, #9
 8001e2e:	d106      	bne.n	8001e3e <HAL_DMA2D_ConfigLayer+0x102>
 8001e30:	693b      	ldr	r3, [r7, #16]
 8001e32:	68da      	ldr	r2, [r3, #12]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8001e3c:	621a      	str	r2, [r3, #32]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2201      	movs	r2, #1
 8001e42:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 8001e4e:	2300      	movs	r3, #0
 8001e50:	4618      	mov	r0, r3
 8001e52:	371c      	adds	r7, #28
 8001e54:	46bd      	mov	sp, r7
 8001e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5a:	4770      	bx	lr
 8001e5c:	ff03000f 	.word	0xff03000f

08001e60 <HAL_GPIO_Init>:
 8001e60:	b480      	push	{r7}
 8001e62:	b089      	sub	sp, #36	@ 0x24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
 8001e68:	6039      	str	r1, [r7, #0]
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	617b      	str	r3, [r7, #20]
 8001e6e:	2300      	movs	r3, #0
 8001e70:	613b      	str	r3, [r7, #16]
 8001e72:	2300      	movs	r3, #0
 8001e74:	61bb      	str	r3, [r7, #24]
 8001e76:	2300      	movs	r3, #0
 8001e78:	61fb      	str	r3, [r7, #28]
 8001e7a:	e177      	b.n	800216c <HAL_GPIO_Init+0x30c>
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	69fb      	ldr	r3, [r7, #28]
 8001e80:	fa02 f303 	lsl.w	r3, r2, r3
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	f040 8166 	bne.w	8002166 <HAL_GPIO_Init+0x306>
 8001e9a:	683b      	ldr	r3, [r7, #0]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d005      	beq.n	8001eb2 <HAL_GPIO_Init+0x52>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f003 0303 	and.w	r3, r3, #3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d130      	bne.n	8001f14 <HAL_GPIO_Init+0xb4>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	689b      	ldr	r3, [r3, #8]
 8001eb6:	61bb      	str	r3, [r7, #24]
 8001eb8:	69fb      	ldr	r3, [r7, #28]
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	2203      	movs	r2, #3
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	61bb      	str	r3, [r7, #24]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	69ba      	ldr	r2, [r7, #24]
 8001ee0:	609a      	str	r2, [r3, #8]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	61bb      	str	r3, [r7, #24]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	f003 0201 	and.w	r2, r3, #1
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	605a      	str	r2, [r3, #4]
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f003 0303 	and.w	r3, r3, #3
 8001f1c:	2b03      	cmp	r3, #3
 8001f1e:	d017      	beq.n	8001f50 <HAL_GPIO_Init+0xf0>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	61bb      	str	r3, [r7, #24]
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	2203      	movs	r2, #3
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	60da      	str	r2, [r3, #12]
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	2b02      	cmp	r3, #2
 8001f5a:	d123      	bne.n	8001fa4 <HAL_GPIO_Init+0x144>
 8001f5c:	69fb      	ldr	r3, [r7, #28]
 8001f5e:	08da      	lsrs	r2, r3, #3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	3208      	adds	r2, #8
 8001f64:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f68:	61bb      	str	r3, [r7, #24]
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	220f      	movs	r2, #15
 8001f74:	fa02 f303 	lsl.w	r3, r2, r3
 8001f78:	43db      	mvns	r3, r3
 8001f7a:	69ba      	ldr	r2, [r7, #24]
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	61bb      	str	r3, [r7, #24]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	691a      	ldr	r2, [r3, #16]
 8001f84:	69fb      	ldr	r3, [r7, #28]
 8001f86:	f003 0307 	and.w	r3, r3, #7
 8001f8a:	009b      	lsls	r3, r3, #2
 8001f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f90:	69ba      	ldr	r2, [r7, #24]
 8001f92:	4313      	orrs	r3, r2
 8001f94:	61bb      	str	r3, [r7, #24]
 8001f96:	69fb      	ldr	r3, [r7, #28]
 8001f98:	08da      	lsrs	r2, r3, #3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	3208      	adds	r2, #8
 8001f9e:	69b9      	ldr	r1, [r7, #24]
 8001fa0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	61bb      	str	r3, [r7, #24]
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	2203      	movs	r2, #3
 8001fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb4:	43db      	mvns	r3, r3
 8001fb6:	69ba      	ldr	r2, [r7, #24]
 8001fb8:	4013      	ands	r3, r2
 8001fba:	61bb      	str	r3, [r7, #24]
 8001fbc:	683b      	ldr	r3, [r7, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	f003 0203 	and.w	r2, r3, #3
 8001fc4:	69fb      	ldr	r3, [r7, #28]
 8001fc6:	005b      	lsls	r3, r3, #1
 8001fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	69ba      	ldr	r2, [r7, #24]
 8001fd6:	601a      	str	r2, [r3, #0]
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	f000 80c0 	beq.w	8002166 <HAL_GPIO_Init+0x306>
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
 8001fea:	4b66      	ldr	r3, [pc, #408]	@ (8002184 <HAL_GPIO_Init+0x324>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fee:	4a65      	ldr	r2, [pc, #404]	@ (8002184 <HAL_GPIO_Init+0x324>)
 8001ff0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ff4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ff6:	4b63      	ldr	r3, [pc, #396]	@ (8002184 <HAL_GPIO_Init+0x324>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	4a61      	ldr	r2, [pc, #388]	@ (8002188 <HAL_GPIO_Init+0x328>)
 8002004:	69fb      	ldr	r3, [r7, #28]
 8002006:	089b      	lsrs	r3, r3, #2
 8002008:	3302      	adds	r3, #2
 800200a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800200e:	61bb      	str	r3, [r7, #24]
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f003 0303 	and.w	r3, r3, #3
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	220f      	movs	r2, #15
 800201a:	fa02 f303 	lsl.w	r3, r2, r3
 800201e:	43db      	mvns	r3, r3
 8002020:	69ba      	ldr	r2, [r7, #24]
 8002022:	4013      	ands	r3, r2
 8002024:	61bb      	str	r3, [r7, #24]
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a58      	ldr	r2, [pc, #352]	@ (800218c <HAL_GPIO_Init+0x32c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d037      	beq.n	800209e <HAL_GPIO_Init+0x23e>
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	4a57      	ldr	r2, [pc, #348]	@ (8002190 <HAL_GPIO_Init+0x330>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d031      	beq.n	800209a <HAL_GPIO_Init+0x23a>
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a56      	ldr	r2, [pc, #344]	@ (8002194 <HAL_GPIO_Init+0x334>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d02b      	beq.n	8002096 <HAL_GPIO_Init+0x236>
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4a55      	ldr	r2, [pc, #340]	@ (8002198 <HAL_GPIO_Init+0x338>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d025      	beq.n	8002092 <HAL_GPIO_Init+0x232>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4a54      	ldr	r2, [pc, #336]	@ (800219c <HAL_GPIO_Init+0x33c>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d01f      	beq.n	800208e <HAL_GPIO_Init+0x22e>
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	4a53      	ldr	r2, [pc, #332]	@ (80021a0 <HAL_GPIO_Init+0x340>)
 8002052:	4293      	cmp	r3, r2
 8002054:	d019      	beq.n	800208a <HAL_GPIO_Init+0x22a>
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	4a52      	ldr	r2, [pc, #328]	@ (80021a4 <HAL_GPIO_Init+0x344>)
 800205a:	4293      	cmp	r3, r2
 800205c:	d013      	beq.n	8002086 <HAL_GPIO_Init+0x226>
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	4a51      	ldr	r2, [pc, #324]	@ (80021a8 <HAL_GPIO_Init+0x348>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d00d      	beq.n	8002082 <HAL_GPIO_Init+0x222>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	4a50      	ldr	r2, [pc, #320]	@ (80021ac <HAL_GPIO_Init+0x34c>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d007      	beq.n	800207e <HAL_GPIO_Init+0x21e>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	4a4f      	ldr	r2, [pc, #316]	@ (80021b0 <HAL_GPIO_Init+0x350>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d101      	bne.n	800207a <HAL_GPIO_Init+0x21a>
 8002076:	2309      	movs	r3, #9
 8002078:	e012      	b.n	80020a0 <HAL_GPIO_Init+0x240>
 800207a:	230a      	movs	r3, #10
 800207c:	e010      	b.n	80020a0 <HAL_GPIO_Init+0x240>
 800207e:	2308      	movs	r3, #8
 8002080:	e00e      	b.n	80020a0 <HAL_GPIO_Init+0x240>
 8002082:	2307      	movs	r3, #7
 8002084:	e00c      	b.n	80020a0 <HAL_GPIO_Init+0x240>
 8002086:	2306      	movs	r3, #6
 8002088:	e00a      	b.n	80020a0 <HAL_GPIO_Init+0x240>
 800208a:	2305      	movs	r3, #5
 800208c:	e008      	b.n	80020a0 <HAL_GPIO_Init+0x240>
 800208e:	2304      	movs	r3, #4
 8002090:	e006      	b.n	80020a0 <HAL_GPIO_Init+0x240>
 8002092:	2303      	movs	r3, #3
 8002094:	e004      	b.n	80020a0 <HAL_GPIO_Init+0x240>
 8002096:	2302      	movs	r3, #2
 8002098:	e002      	b.n	80020a0 <HAL_GPIO_Init+0x240>
 800209a:	2301      	movs	r3, #1
 800209c:	e000      	b.n	80020a0 <HAL_GPIO_Init+0x240>
 800209e:	2300      	movs	r3, #0
 80020a0:	69fa      	ldr	r2, [r7, #28]
 80020a2:	f002 0203 	and.w	r2, r2, #3
 80020a6:	0092      	lsls	r2, r2, #2
 80020a8:	4093      	lsls	r3, r2
 80020aa:	69ba      	ldr	r2, [r7, #24]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61bb      	str	r3, [r7, #24]
 80020b0:	4935      	ldr	r1, [pc, #212]	@ (8002188 <HAL_GPIO_Init+0x328>)
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	089b      	lsrs	r3, r3, #2
 80020b6:	3302      	adds	r3, #2
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80020be:	4b3d      	ldr	r3, [pc, #244]	@ (80021b4 <HAL_GPIO_Init+0x354>)
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	61bb      	str	r3, [r7, #24]
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	43db      	mvns	r3, r3
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	4013      	ands	r3, r2
 80020cc:	61bb      	str	r3, [r7, #24]
 80020ce:	683b      	ldr	r3, [r7, #0]
 80020d0:	685b      	ldr	r3, [r3, #4]
 80020d2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d003      	beq.n	80020e2 <HAL_GPIO_Init+0x282>
 80020da:	69ba      	ldr	r2, [r7, #24]
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	4313      	orrs	r3, r2
 80020e0:	61bb      	str	r3, [r7, #24]
 80020e2:	4a34      	ldr	r2, [pc, #208]	@ (80021b4 <HAL_GPIO_Init+0x354>)
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	6093      	str	r3, [r2, #8]
 80020e8:	4b32      	ldr	r3, [pc, #200]	@ (80021b4 <HAL_GPIO_Init+0x354>)
 80020ea:	68db      	ldr	r3, [r3, #12]
 80020ec:	61bb      	str	r3, [r7, #24]
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	43db      	mvns	r3, r3
 80020f2:	69ba      	ldr	r2, [r7, #24]
 80020f4:	4013      	ands	r3, r2
 80020f6:	61bb      	str	r3, [r7, #24]
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002100:	2b00      	cmp	r3, #0
 8002102:	d003      	beq.n	800210c <HAL_GPIO_Init+0x2ac>
 8002104:	69ba      	ldr	r2, [r7, #24]
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	4313      	orrs	r3, r2
 800210a:	61bb      	str	r3, [r7, #24]
 800210c:	4a29      	ldr	r2, [pc, #164]	@ (80021b4 <HAL_GPIO_Init+0x354>)
 800210e:	69bb      	ldr	r3, [r7, #24]
 8002110:	60d3      	str	r3, [r2, #12]
 8002112:	4b28      	ldr	r3, [pc, #160]	@ (80021b4 <HAL_GPIO_Init+0x354>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	61bb      	str	r3, [r7, #24]
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	43db      	mvns	r3, r3
 800211c:	69ba      	ldr	r2, [r7, #24]
 800211e:	4013      	ands	r3, r2
 8002120:	61bb      	str	r3, [r7, #24]
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800212a:	2b00      	cmp	r3, #0
 800212c:	d003      	beq.n	8002136 <HAL_GPIO_Init+0x2d6>
 800212e:	69ba      	ldr	r2, [r7, #24]
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4313      	orrs	r3, r2
 8002134:	61bb      	str	r3, [r7, #24]
 8002136:	4a1f      	ldr	r2, [pc, #124]	@ (80021b4 <HAL_GPIO_Init+0x354>)
 8002138:	69bb      	ldr	r3, [r7, #24]
 800213a:	6053      	str	r3, [r2, #4]
 800213c:	4b1d      	ldr	r3, [pc, #116]	@ (80021b4 <HAL_GPIO_Init+0x354>)
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	61bb      	str	r3, [r7, #24]
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	43db      	mvns	r3, r3
 8002146:	69ba      	ldr	r2, [r7, #24]
 8002148:	4013      	ands	r3, r2
 800214a:	61bb      	str	r3, [r7, #24]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d003      	beq.n	8002160 <HAL_GPIO_Init+0x300>
 8002158:	69ba      	ldr	r2, [r7, #24]
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	4313      	orrs	r3, r2
 800215e:	61bb      	str	r3, [r7, #24]
 8002160:	4a14      	ldr	r2, [pc, #80]	@ (80021b4 <HAL_GPIO_Init+0x354>)
 8002162:	69bb      	ldr	r3, [r7, #24]
 8002164:	6013      	str	r3, [r2, #0]
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3301      	adds	r3, #1
 800216a:	61fb      	str	r3, [r7, #28]
 800216c:	69fb      	ldr	r3, [r7, #28]
 800216e:	2b0f      	cmp	r3, #15
 8002170:	f67f ae84 	bls.w	8001e7c <HAL_GPIO_Init+0x1c>
 8002174:	bf00      	nop
 8002176:	bf00      	nop
 8002178:	3724      	adds	r7, #36	@ 0x24
 800217a:	46bd      	mov	sp, r7
 800217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002180:	4770      	bx	lr
 8002182:	bf00      	nop
 8002184:	40023800 	.word	0x40023800
 8002188:	40013800 	.word	0x40013800
 800218c:	40020000 	.word	0x40020000
 8002190:	40020400 	.word	0x40020400
 8002194:	40020800 	.word	0x40020800
 8002198:	40020c00 	.word	0x40020c00
 800219c:	40021000 	.word	0x40021000
 80021a0:	40021400 	.word	0x40021400
 80021a4:	40021800 	.word	0x40021800
 80021a8:	40021c00 	.word	0x40021c00
 80021ac:	40022000 	.word	0x40022000
 80021b0:	40022400 	.word	0x40022400
 80021b4:	40013c00 	.word	0x40013c00

080021b8 <HAL_GPIO_WritePin>:
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	460b      	mov	r3, r1
 80021c2:	807b      	strh	r3, [r7, #2]
 80021c4:	4613      	mov	r3, r2
 80021c6:	707b      	strb	r3, [r7, #1]
 80021c8:	787b      	ldrb	r3, [r7, #1]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d003      	beq.n	80021d6 <HAL_GPIO_WritePin+0x1e>
 80021ce:	887a      	ldrh	r2, [r7, #2]
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	619a      	str	r2, [r3, #24]
 80021d4:	e003      	b.n	80021de <HAL_GPIO_WritePin+0x26>
 80021d6:	887b      	ldrh	r3, [r7, #2]
 80021d8:	041a      	lsls	r2, r3, #16
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	619a      	str	r2, [r3, #24]
 80021de:	bf00      	nop
 80021e0:	370c      	adds	r7, #12
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <HAL_HCD_Init>:
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b086      	sub	sp, #24
 80021ee:	af02      	add	r7, sp, #8
 80021f0:	6078      	str	r0, [r7, #4]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d101      	bne.n	80021fc <HAL_HCD_Init+0x12>
 80021f8:	2301      	movs	r3, #1
 80021fa:	e059      	b.n	80022b0 <HAL_HCD_Init+0xc6>
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	60fb      	str	r3, [r7, #12]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8002208:	b2db      	uxtb	r3, r3
 800220a:	2b00      	cmp	r3, #0
 800220c:	d106      	bne.n	800221c <HAL_HCD_Init+0x32>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	2200      	movs	r2, #0
 8002212:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
 8002216:	6878      	ldr	r0, [r7, #4]
 8002218:	f008 fe68 	bl	800aeec <HAL_HCD_MspInit>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2203      	movs	r2, #3
 8002220:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800222a:	d102      	bne.n	8002232 <HAL_HCD_Init+0x48>
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2200      	movs	r2, #0
 8002230:	719a      	strb	r2, [r3, #6]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4618      	mov	r0, r3
 8002238:	f005 fc81 	bl	8007b3e <USB_DisableGlobalInt>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6818      	ldr	r0, [r3, #0]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	7c1a      	ldrb	r2, [r3, #16]
 8002244:	f88d 2000 	strb.w	r2, [sp]
 8002248:	3304      	adds	r3, #4
 800224a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800224c:	f005 fc02 	bl	8007a54 <USB_CoreInit>
 8002250:	4603      	mov	r3, r0
 8002252:	2b00      	cmp	r3, #0
 8002254:	d005      	beq.n	8002262 <HAL_HCD_Init+0x78>
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2202      	movs	r2, #2
 800225a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
 800225e:	2301      	movs	r3, #1
 8002260:	e026      	b.n	80022b0 <HAL_HCD_Init+0xc6>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2101      	movs	r1, #1
 8002268:	4618      	mov	r0, r3
 800226a:	f005 fc79 	bl	8007b60 <USB_SetCurrentMode>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d005      	beq.n	8002280 <HAL_HCD_Init+0x96>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2202      	movs	r2, #2
 8002278:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
 800227c:	2301      	movs	r3, #1
 800227e:	e017      	b.n	80022b0 <HAL_HCD_Init+0xc6>
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6818      	ldr	r0, [r3, #0]
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	7c1a      	ldrb	r2, [r3, #16]
 8002288:	f88d 2000 	strb.w	r2, [sp]
 800228c:	3304      	adds	r3, #4
 800228e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002290:	f005 fe1c 	bl	8007ecc <USB_HostInit>
 8002294:	4603      	mov	r3, r0
 8002296:	2b00      	cmp	r3, #0
 8002298:	d005      	beq.n	80022a6 <HAL_HCD_Init+0xbc>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2202      	movs	r2, #2
 800229e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
 80022a2:	2301      	movs	r3, #1
 80022a4:	e004      	b.n	80022b0 <HAL_HCD_Init+0xc6>
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2201      	movs	r2, #1
 80022aa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
 80022ae:	2300      	movs	r3, #0
 80022b0:	4618      	mov	r0, r3
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}

080022b8 <HAL_HCD_HC_Init>:
 80022b8:	b590      	push	{r4, r7, lr}
 80022ba:	b08b      	sub	sp, #44	@ 0x2c
 80022bc:	af04      	add	r7, sp, #16
 80022be:	6078      	str	r0, [r7, #4]
 80022c0:	4608      	mov	r0, r1
 80022c2:	4611      	mov	r1, r2
 80022c4:	461a      	mov	r2, r3
 80022c6:	4603      	mov	r3, r0
 80022c8:	70fb      	strb	r3, [r7, #3]
 80022ca:	460b      	mov	r3, r1
 80022cc:	70bb      	strb	r3, [r7, #2]
 80022ce:	4613      	mov	r3, r2
 80022d0:	707b      	strb	r3, [r7, #1]
 80022d2:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80022d4:	617b      	str	r3, [r7, #20]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d101      	bne.n	80022e4 <HAL_HCD_HC_Init+0x2c>
 80022e0:	2302      	movs	r3, #2
 80022e2:	e09d      	b.n	8002420 <HAL_HCD_HC_Init+0x168>
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
 80022ec:	78fa      	ldrb	r2, [r7, #3]
 80022ee:	6879      	ldr	r1, [r7, #4]
 80022f0:	4613      	mov	r3, r2
 80022f2:	011b      	lsls	r3, r3, #4
 80022f4:	1a9b      	subs	r3, r3, r2
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	440b      	add	r3, r1
 80022fa:	3319      	adds	r3, #25
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]
 8002300:	78fa      	ldrb	r2, [r7, #3]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	4613      	mov	r3, r2
 8002306:	011b      	lsls	r3, r3, #4
 8002308:	1a9b      	subs	r3, r3, r2
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	440b      	add	r3, r1
 800230e:	3314      	adds	r3, #20
 8002310:	787a      	ldrb	r2, [r7, #1]
 8002312:	701a      	strb	r2, [r3, #0]
 8002314:	78fa      	ldrb	r2, [r7, #3]
 8002316:	6879      	ldr	r1, [r7, #4]
 8002318:	4613      	mov	r3, r2
 800231a:	011b      	lsls	r3, r3, #4
 800231c:	1a9b      	subs	r3, r3, r2
 800231e:	009b      	lsls	r3, r3, #2
 8002320:	440b      	add	r3, r1
 8002322:	3315      	adds	r3, #21
 8002324:	78fa      	ldrb	r2, [r7, #3]
 8002326:	701a      	strb	r2, [r3, #0]
 8002328:	78fa      	ldrb	r2, [r7, #3]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	4613      	mov	r3, r2
 800232e:	011b      	lsls	r3, r3, #4
 8002330:	1a9b      	subs	r3, r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	3326      	adds	r3, #38	@ 0x26
 8002338:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 800233c:	701a      	strb	r2, [r3, #0]
 800233e:	78fa      	ldrb	r2, [r7, #3]
 8002340:	78bb      	ldrb	r3, [r7, #2]
 8002342:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002346:	b2d8      	uxtb	r0, r3
 8002348:	6879      	ldr	r1, [r7, #4]
 800234a:	4613      	mov	r3, r2
 800234c:	011b      	lsls	r3, r3, #4
 800234e:	1a9b      	subs	r3, r3, r2
 8002350:	009b      	lsls	r3, r3, #2
 8002352:	440b      	add	r3, r1
 8002354:	3316      	adds	r3, #22
 8002356:	4602      	mov	r2, r0
 8002358:	701a      	strb	r2, [r3, #0]
 800235a:	78fb      	ldrb	r3, [r7, #3]
 800235c:	4619      	mov	r1, r3
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f000 fbc8 	bl	8002af4 <HAL_HCD_HC_ClearHubInfo>
 8002364:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002368:	2b00      	cmp	r3, #0
 800236a:	da0a      	bge.n	8002382 <HAL_HCD_HC_Init+0xca>
 800236c:	78fa      	ldrb	r2, [r7, #3]
 800236e:	6879      	ldr	r1, [r7, #4]
 8002370:	4613      	mov	r3, r2
 8002372:	011b      	lsls	r3, r3, #4
 8002374:	1a9b      	subs	r3, r3, r2
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	440b      	add	r3, r1
 800237a:	3317      	adds	r3, #23
 800237c:	2201      	movs	r2, #1
 800237e:	701a      	strb	r2, [r3, #0]
 8002380:	e009      	b.n	8002396 <HAL_HCD_HC_Init+0xde>
 8002382:	78fa      	ldrb	r2, [r7, #3]
 8002384:	6879      	ldr	r1, [r7, #4]
 8002386:	4613      	mov	r3, r2
 8002388:	011b      	lsls	r3, r3, #4
 800238a:	1a9b      	subs	r3, r3, r2
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	440b      	add	r3, r1
 8002390:	3317      	adds	r3, #23
 8002392:	2200      	movs	r2, #0
 8002394:	701a      	strb	r2, [r3, #0]
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f005 fefa 	bl	8008194 <USB_GetHostSpeed>
 80023a0:	6138      	str	r0, [r7, #16]
 80023a2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80023a6:	2b01      	cmp	r3, #1
 80023a8:	d10b      	bne.n	80023c2 <HAL_HCD_HC_Init+0x10a>
 80023aa:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d107      	bne.n	80023c2 <HAL_HCD_HC_Init+0x10a>
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d104      	bne.n	80023c2 <HAL_HCD_HC_Init+0x10a>
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	2bbc      	cmp	r3, #188	@ 0xbc
 80023bc:	d901      	bls.n	80023c2 <HAL_HCD_HC_Init+0x10a>
 80023be:	23bc      	movs	r3, #188	@ 0xbc
 80023c0:	617b      	str	r3, [r7, #20]
 80023c2:	78fa      	ldrb	r2, [r7, #3]
 80023c4:	6879      	ldr	r1, [r7, #4]
 80023c6:	4613      	mov	r3, r2
 80023c8:	011b      	lsls	r3, r3, #4
 80023ca:	1a9b      	subs	r3, r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	440b      	add	r3, r1
 80023d0:	3318      	adds	r3, #24
 80023d2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80023d6:	701a      	strb	r2, [r3, #0]
 80023d8:	78fa      	ldrb	r2, [r7, #3]
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	b298      	uxth	r0, r3
 80023de:	6879      	ldr	r1, [r7, #4]
 80023e0:	4613      	mov	r3, r2
 80023e2:	011b      	lsls	r3, r3, #4
 80023e4:	1a9b      	subs	r3, r3, r2
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	3328      	adds	r3, #40	@ 0x28
 80023ec:	4602      	mov	r2, r0
 80023ee:	801a      	strh	r2, [r3, #0]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6818      	ldr	r0, [r3, #0]
 80023f4:	697b      	ldr	r3, [r7, #20]
 80023f6:	b29b      	uxth	r3, r3
 80023f8:	787c      	ldrb	r4, [r7, #1]
 80023fa:	78ba      	ldrb	r2, [r7, #2]
 80023fc:	78f9      	ldrb	r1, [r7, #3]
 80023fe:	9302      	str	r3, [sp, #8]
 8002400:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002404:	9301      	str	r3, [sp, #4]
 8002406:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800240a:	9300      	str	r3, [sp, #0]
 800240c:	4623      	mov	r3, r4
 800240e:	f005 fee9 	bl	80081e4 <USB_HC_Init>
 8002412:	4603      	mov	r3, r0
 8002414:	73fb      	strb	r3, [r7, #15]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
 800241e:	7bfb      	ldrb	r3, [r7, #15]
 8002420:	4618      	mov	r0, r3
 8002422:	371c      	adds	r7, #28
 8002424:	46bd      	mov	sp, r7
 8002426:	bd90      	pop	{r4, r7, pc}

08002428 <HAL_HCD_HC_Halt>:
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	460b      	mov	r3, r1
 8002432:	70fb      	strb	r3, [r7, #3]
 8002434:	2300      	movs	r3, #0
 8002436:	73fb      	strb	r3, [r7, #15]
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800243e:	2b01      	cmp	r3, #1
 8002440:	d101      	bne.n	8002446 <HAL_HCD_HC_Halt+0x1e>
 8002442:	2302      	movs	r3, #2
 8002444:	e00f      	b.n	8002466 <HAL_HCD_HC_Halt+0x3e>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2201      	movs	r2, #1
 800244a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	78fa      	ldrb	r2, [r7, #3]
 8002454:	4611      	mov	r1, r2
 8002456:	4618      	mov	r0, r3
 8002458:	f006 fa7b 	bl	8008952 <USB_HC_Halt>
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2200      	movs	r2, #0
 8002460:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
 8002464:	7bfb      	ldrb	r3, [r7, #15]
 8002466:	4618      	mov	r0, r3
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <HAL_HCD_HC_SubmitRequest>:
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	4608      	mov	r0, r1
 800247a:	4611      	mov	r1, r2
 800247c:	461a      	mov	r2, r3
 800247e:	4603      	mov	r3, r0
 8002480:	70fb      	strb	r3, [r7, #3]
 8002482:	460b      	mov	r3, r1
 8002484:	70bb      	strb	r3, [r7, #2]
 8002486:	4613      	mov	r3, r2
 8002488:	707b      	strb	r3, [r7, #1]
 800248a:	78fa      	ldrb	r2, [r7, #3]
 800248c:	6879      	ldr	r1, [r7, #4]
 800248e:	4613      	mov	r3, r2
 8002490:	011b      	lsls	r3, r3, #4
 8002492:	1a9b      	subs	r3, r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	440b      	add	r3, r1
 8002498:	3317      	adds	r3, #23
 800249a:	78ba      	ldrb	r2, [r7, #2]
 800249c:	701a      	strb	r2, [r3, #0]
 800249e:	78fa      	ldrb	r2, [r7, #3]
 80024a0:	6879      	ldr	r1, [r7, #4]
 80024a2:	4613      	mov	r3, r2
 80024a4:	011b      	lsls	r3, r3, #4
 80024a6:	1a9b      	subs	r3, r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	440b      	add	r3, r1
 80024ac:	3326      	adds	r3, #38	@ 0x26
 80024ae:	787a      	ldrb	r2, [r7, #1]
 80024b0:	701a      	strb	r2, [r3, #0]
 80024b2:	7c3b      	ldrb	r3, [r7, #16]
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d114      	bne.n	80024e2 <HAL_HCD_HC_SubmitRequest+0x72>
 80024b8:	78fa      	ldrb	r2, [r7, #3]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	332a      	adds	r3, #42	@ 0x2a
 80024c8:	2203      	movs	r2, #3
 80024ca:	701a      	strb	r2, [r3, #0]
 80024cc:	78fa      	ldrb	r2, [r7, #3]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	1a9b      	subs	r3, r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	3319      	adds	r3, #25
 80024dc:	7f3a      	ldrb	r2, [r7, #28]
 80024de:	701a      	strb	r2, [r3, #0]
 80024e0:	e009      	b.n	80024f6 <HAL_HCD_HC_SubmitRequest+0x86>
 80024e2:	78fa      	ldrb	r2, [r7, #3]
 80024e4:	6879      	ldr	r1, [r7, #4]
 80024e6:	4613      	mov	r3, r2
 80024e8:	011b      	lsls	r3, r3, #4
 80024ea:	1a9b      	subs	r3, r3, r2
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	440b      	add	r3, r1
 80024f0:	332a      	adds	r3, #42	@ 0x2a
 80024f2:	2202      	movs	r2, #2
 80024f4:	701a      	strb	r2, [r3, #0]
 80024f6:	787b      	ldrb	r3, [r7, #1]
 80024f8:	2b03      	cmp	r3, #3
 80024fa:	f200 8102 	bhi.w	8002702 <HAL_HCD_HC_SubmitRequest+0x292>
 80024fe:	a201      	add	r2, pc, #4	@ (adr r2, 8002504 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002500:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002504:	08002515 	.word	0x08002515
 8002508:	080026ed 	.word	0x080026ed
 800250c:	080025d9 	.word	0x080025d9
 8002510:	08002663 	.word	0x08002663
 8002514:	7c3b      	ldrb	r3, [r7, #16]
 8002516:	2b01      	cmp	r3, #1
 8002518:	f040 80f5 	bne.w	8002706 <HAL_HCD_HC_SubmitRequest+0x296>
 800251c:	78bb      	ldrb	r3, [r7, #2]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d12d      	bne.n	800257e <HAL_HCD_HC_SubmitRequest+0x10e>
 8002522:	8b3b      	ldrh	r3, [r7, #24]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d109      	bne.n	800253c <HAL_HCD_HC_SubmitRequest+0xcc>
 8002528:	78fa      	ldrb	r2, [r7, #3]
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	4613      	mov	r3, r2
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	1a9b      	subs	r3, r3, r2
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	333d      	adds	r3, #61	@ 0x3d
 8002538:	2201      	movs	r2, #1
 800253a:	701a      	strb	r2, [r3, #0]
 800253c:	78fa      	ldrb	r2, [r7, #3]
 800253e:	6879      	ldr	r1, [r7, #4]
 8002540:	4613      	mov	r3, r2
 8002542:	011b      	lsls	r3, r3, #4
 8002544:	1a9b      	subs	r3, r3, r2
 8002546:	009b      	lsls	r3, r3, #2
 8002548:	440b      	add	r3, r1
 800254a:	333d      	adds	r3, #61	@ 0x3d
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d10a      	bne.n	8002568 <HAL_HCD_HC_SubmitRequest+0xf8>
 8002552:	78fa      	ldrb	r2, [r7, #3]
 8002554:	6879      	ldr	r1, [r7, #4]
 8002556:	4613      	mov	r3, r2
 8002558:	011b      	lsls	r3, r3, #4
 800255a:	1a9b      	subs	r3, r3, r2
 800255c:	009b      	lsls	r3, r3, #2
 800255e:	440b      	add	r3, r1
 8002560:	332a      	adds	r3, #42	@ 0x2a
 8002562:	2200      	movs	r2, #0
 8002564:	701a      	strb	r2, [r3, #0]
 8002566:	e0ce      	b.n	8002706 <HAL_HCD_HC_SubmitRequest+0x296>
 8002568:	78fa      	ldrb	r2, [r7, #3]
 800256a:	6879      	ldr	r1, [r7, #4]
 800256c:	4613      	mov	r3, r2
 800256e:	011b      	lsls	r3, r3, #4
 8002570:	1a9b      	subs	r3, r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	440b      	add	r3, r1
 8002576:	332a      	adds	r3, #42	@ 0x2a
 8002578:	2202      	movs	r2, #2
 800257a:	701a      	strb	r2, [r3, #0]
 800257c:	e0c3      	b.n	8002706 <HAL_HCD_HC_SubmitRequest+0x296>
 800257e:	78fa      	ldrb	r2, [r7, #3]
 8002580:	6879      	ldr	r1, [r7, #4]
 8002582:	4613      	mov	r3, r2
 8002584:	011b      	lsls	r3, r3, #4
 8002586:	1a9b      	subs	r3, r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	440b      	add	r3, r1
 800258c:	331a      	adds	r3, #26
 800258e:	781b      	ldrb	r3, [r3, #0]
 8002590:	2b01      	cmp	r3, #1
 8002592:	f040 80b8 	bne.w	8002706 <HAL_HCD_HC_SubmitRequest+0x296>
 8002596:	78fa      	ldrb	r2, [r7, #3]
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	4613      	mov	r3, r2
 800259c:	011b      	lsls	r3, r3, #4
 800259e:	1a9b      	subs	r3, r3, r2
 80025a0:	009b      	lsls	r3, r3, #2
 80025a2:	440b      	add	r3, r1
 80025a4:	333c      	adds	r3, #60	@ 0x3c
 80025a6:	781b      	ldrb	r3, [r3, #0]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10a      	bne.n	80025c2 <HAL_HCD_HC_SubmitRequest+0x152>
 80025ac:	78fa      	ldrb	r2, [r7, #3]
 80025ae:	6879      	ldr	r1, [r7, #4]
 80025b0:	4613      	mov	r3, r2
 80025b2:	011b      	lsls	r3, r3, #4
 80025b4:	1a9b      	subs	r3, r3, r2
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	440b      	add	r3, r1
 80025ba:	332a      	adds	r3, #42	@ 0x2a
 80025bc:	2200      	movs	r2, #0
 80025be:	701a      	strb	r2, [r3, #0]
 80025c0:	e0a1      	b.n	8002706 <HAL_HCD_HC_SubmitRequest+0x296>
 80025c2:	78fa      	ldrb	r2, [r7, #3]
 80025c4:	6879      	ldr	r1, [r7, #4]
 80025c6:	4613      	mov	r3, r2
 80025c8:	011b      	lsls	r3, r3, #4
 80025ca:	1a9b      	subs	r3, r3, r2
 80025cc:	009b      	lsls	r3, r3, #2
 80025ce:	440b      	add	r3, r1
 80025d0:	332a      	adds	r3, #42	@ 0x2a
 80025d2:	2202      	movs	r2, #2
 80025d4:	701a      	strb	r2, [r3, #0]
 80025d6:	e096      	b.n	8002706 <HAL_HCD_HC_SubmitRequest+0x296>
 80025d8:	78bb      	ldrb	r3, [r7, #2]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d120      	bne.n	8002620 <HAL_HCD_HC_SubmitRequest+0x1b0>
 80025de:	78fa      	ldrb	r2, [r7, #3]
 80025e0:	6879      	ldr	r1, [r7, #4]
 80025e2:	4613      	mov	r3, r2
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	1a9b      	subs	r3, r3, r2
 80025e8:	009b      	lsls	r3, r3, #2
 80025ea:	440b      	add	r3, r1
 80025ec:	333d      	adds	r3, #61	@ 0x3d
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10a      	bne.n	800260a <HAL_HCD_HC_SubmitRequest+0x19a>
 80025f4:	78fa      	ldrb	r2, [r7, #3]
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	4613      	mov	r3, r2
 80025fa:	011b      	lsls	r3, r3, #4
 80025fc:	1a9b      	subs	r3, r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	332a      	adds	r3, #42	@ 0x2a
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]
 8002608:	e07e      	b.n	8002708 <HAL_HCD_HC_SubmitRequest+0x298>
 800260a:	78fa      	ldrb	r2, [r7, #3]
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	4613      	mov	r3, r2
 8002610:	011b      	lsls	r3, r3, #4
 8002612:	1a9b      	subs	r3, r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	440b      	add	r3, r1
 8002618:	332a      	adds	r3, #42	@ 0x2a
 800261a:	2202      	movs	r2, #2
 800261c:	701a      	strb	r2, [r3, #0]
 800261e:	e073      	b.n	8002708 <HAL_HCD_HC_SubmitRequest+0x298>
 8002620:	78fa      	ldrb	r2, [r7, #3]
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	011b      	lsls	r3, r3, #4
 8002628:	1a9b      	subs	r3, r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	333c      	adds	r3, #60	@ 0x3c
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d10a      	bne.n	800264c <HAL_HCD_HC_SubmitRequest+0x1dc>
 8002636:	78fa      	ldrb	r2, [r7, #3]
 8002638:	6879      	ldr	r1, [r7, #4]
 800263a:	4613      	mov	r3, r2
 800263c:	011b      	lsls	r3, r3, #4
 800263e:	1a9b      	subs	r3, r3, r2
 8002640:	009b      	lsls	r3, r3, #2
 8002642:	440b      	add	r3, r1
 8002644:	332a      	adds	r3, #42	@ 0x2a
 8002646:	2200      	movs	r2, #0
 8002648:	701a      	strb	r2, [r3, #0]
 800264a:	e05d      	b.n	8002708 <HAL_HCD_HC_SubmitRequest+0x298>
 800264c:	78fa      	ldrb	r2, [r7, #3]
 800264e:	6879      	ldr	r1, [r7, #4]
 8002650:	4613      	mov	r3, r2
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	1a9b      	subs	r3, r3, r2
 8002656:	009b      	lsls	r3, r3, #2
 8002658:	440b      	add	r3, r1
 800265a:	332a      	adds	r3, #42	@ 0x2a
 800265c:	2202      	movs	r2, #2
 800265e:	701a      	strb	r2, [r3, #0]
 8002660:	e052      	b.n	8002708 <HAL_HCD_HC_SubmitRequest+0x298>
 8002662:	78bb      	ldrb	r3, [r7, #2]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d120      	bne.n	80026aa <HAL_HCD_HC_SubmitRequest+0x23a>
 8002668:	78fa      	ldrb	r2, [r7, #3]
 800266a:	6879      	ldr	r1, [r7, #4]
 800266c:	4613      	mov	r3, r2
 800266e:	011b      	lsls	r3, r3, #4
 8002670:	1a9b      	subs	r3, r3, r2
 8002672:	009b      	lsls	r3, r3, #2
 8002674:	440b      	add	r3, r1
 8002676:	333d      	adds	r3, #61	@ 0x3d
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d10a      	bne.n	8002694 <HAL_HCD_HC_SubmitRequest+0x224>
 800267e:	78fa      	ldrb	r2, [r7, #3]
 8002680:	6879      	ldr	r1, [r7, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	011b      	lsls	r3, r3, #4
 8002686:	1a9b      	subs	r3, r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	440b      	add	r3, r1
 800268c:	332a      	adds	r3, #42	@ 0x2a
 800268e:	2200      	movs	r2, #0
 8002690:	701a      	strb	r2, [r3, #0]
 8002692:	e039      	b.n	8002708 <HAL_HCD_HC_SubmitRequest+0x298>
 8002694:	78fa      	ldrb	r2, [r7, #3]
 8002696:	6879      	ldr	r1, [r7, #4]
 8002698:	4613      	mov	r3, r2
 800269a:	011b      	lsls	r3, r3, #4
 800269c:	1a9b      	subs	r3, r3, r2
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	440b      	add	r3, r1
 80026a2:	332a      	adds	r3, #42	@ 0x2a
 80026a4:	2202      	movs	r2, #2
 80026a6:	701a      	strb	r2, [r3, #0]
 80026a8:	e02e      	b.n	8002708 <HAL_HCD_HC_SubmitRequest+0x298>
 80026aa:	78fa      	ldrb	r2, [r7, #3]
 80026ac:	6879      	ldr	r1, [r7, #4]
 80026ae:	4613      	mov	r3, r2
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	1a9b      	subs	r3, r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	440b      	add	r3, r1
 80026b8:	333c      	adds	r3, #60	@ 0x3c
 80026ba:	781b      	ldrb	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d10a      	bne.n	80026d6 <HAL_HCD_HC_SubmitRequest+0x266>
 80026c0:	78fa      	ldrb	r2, [r7, #3]
 80026c2:	6879      	ldr	r1, [r7, #4]
 80026c4:	4613      	mov	r3, r2
 80026c6:	011b      	lsls	r3, r3, #4
 80026c8:	1a9b      	subs	r3, r3, r2
 80026ca:	009b      	lsls	r3, r3, #2
 80026cc:	440b      	add	r3, r1
 80026ce:	332a      	adds	r3, #42	@ 0x2a
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]
 80026d4:	e018      	b.n	8002708 <HAL_HCD_HC_SubmitRequest+0x298>
 80026d6:	78fa      	ldrb	r2, [r7, #3]
 80026d8:	6879      	ldr	r1, [r7, #4]
 80026da:	4613      	mov	r3, r2
 80026dc:	011b      	lsls	r3, r3, #4
 80026de:	1a9b      	subs	r3, r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	440b      	add	r3, r1
 80026e4:	332a      	adds	r3, #42	@ 0x2a
 80026e6:	2202      	movs	r2, #2
 80026e8:	701a      	strb	r2, [r3, #0]
 80026ea:	e00d      	b.n	8002708 <HAL_HCD_HC_SubmitRequest+0x298>
 80026ec:	78fa      	ldrb	r2, [r7, #3]
 80026ee:	6879      	ldr	r1, [r7, #4]
 80026f0:	4613      	mov	r3, r2
 80026f2:	011b      	lsls	r3, r3, #4
 80026f4:	1a9b      	subs	r3, r3, r2
 80026f6:	009b      	lsls	r3, r3, #2
 80026f8:	440b      	add	r3, r1
 80026fa:	332a      	adds	r3, #42	@ 0x2a
 80026fc:	2200      	movs	r2, #0
 80026fe:	701a      	strb	r2, [r3, #0]
 8002700:	e002      	b.n	8002708 <HAL_HCD_HC_SubmitRequest+0x298>
 8002702:	bf00      	nop
 8002704:	e000      	b.n	8002708 <HAL_HCD_HC_SubmitRequest+0x298>
 8002706:	bf00      	nop
 8002708:	78fa      	ldrb	r2, [r7, #3]
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	4613      	mov	r3, r2
 800270e:	011b      	lsls	r3, r3, #4
 8002710:	1a9b      	subs	r3, r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	332c      	adds	r3, #44	@ 0x2c
 8002718:	697a      	ldr	r2, [r7, #20]
 800271a:	601a      	str	r2, [r3, #0]
 800271c:	78fa      	ldrb	r2, [r7, #3]
 800271e:	8b39      	ldrh	r1, [r7, #24]
 8002720:	6878      	ldr	r0, [r7, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	011b      	lsls	r3, r3, #4
 8002726:	1a9b      	subs	r3, r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	4403      	add	r3, r0
 800272c:	3334      	adds	r3, #52	@ 0x34
 800272e:	6019      	str	r1, [r3, #0]
 8002730:	78fa      	ldrb	r2, [r7, #3]
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	4613      	mov	r3, r2
 8002736:	011b      	lsls	r3, r3, #4
 8002738:	1a9b      	subs	r3, r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	334c      	adds	r3, #76	@ 0x4c
 8002740:	2200      	movs	r2, #0
 8002742:	701a      	strb	r2, [r3, #0]
 8002744:	78fa      	ldrb	r2, [r7, #3]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	3338      	adds	r3, #56	@ 0x38
 8002754:	2200      	movs	r2, #0
 8002756:	601a      	str	r2, [r3, #0]
 8002758:	78fa      	ldrb	r2, [r7, #3]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	1a9b      	subs	r3, r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	3315      	adds	r3, #21
 8002768:	78fa      	ldrb	r2, [r7, #3]
 800276a:	701a      	strb	r2, [r3, #0]
 800276c:	78fa      	ldrb	r2, [r7, #3]
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	1a9b      	subs	r3, r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	334d      	adds	r3, #77	@ 0x4d
 800277c:	2200      	movs	r2, #0
 800277e:	701a      	strb	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6818      	ldr	r0, [r3, #0]
 8002784:	78fa      	ldrb	r2, [r7, #3]
 8002786:	4613      	mov	r3, r2
 8002788:	011b      	lsls	r3, r3, #4
 800278a:	1a9b      	subs	r3, r3, r2
 800278c:	009b      	lsls	r3, r3, #2
 800278e:	3310      	adds	r3, #16
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	4413      	add	r3, r2
 8002794:	1d19      	adds	r1, r3, #4
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	799b      	ldrb	r3, [r3, #6]
 800279a:	461a      	mov	r2, r3
 800279c:	f005 fe4e 	bl	800843c <USB_HC_StartXfer>
 80027a0:	4603      	mov	r3, r0
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop

080027ac <HAL_HCD_IRQHandler>:
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b086      	sub	sp, #24
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	693b      	ldr	r3, [r7, #16]
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	4618      	mov	r0, r3
 80027c4:	f005 fb42 	bl	8007e4c <USB_GetMode>
 80027c8:	4603      	mov	r3, r0
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	f040 80fb 	bne.w	80029c6 <HAL_HCD_IRQHandler+0x21a>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f005 fb05 	bl	8007de4 <USB_ReadInterrupts>
 80027da:	4603      	mov	r3, r0
 80027dc:	2b00      	cmp	r3, #0
 80027de:	f000 80f1 	beq.w	80029c4 <HAL_HCD_IRQHandler+0x218>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	4618      	mov	r0, r3
 80027e8:	f005 fafc 	bl	8007de4 <USB_ReadInterrupts>
 80027ec:	4603      	mov	r3, r0
 80027ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80027f6:	d104      	bne.n	8002802 <HAL_HCD_IRQHandler+0x56>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002800:	615a      	str	r2, [r3, #20]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4618      	mov	r0, r3
 8002808:	f005 faec 	bl	8007de4 <USB_ReadInterrupts>
 800280c:	4603      	mov	r3, r0
 800280e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002812:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002816:	d104      	bne.n	8002822 <HAL_HCD_IRQHandler+0x76>
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002820:	615a      	str	r2, [r3, #20]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f005 fadc 	bl	8007de4 <USB_ReadInterrupts>
 800282c:	4603      	mov	r3, r0
 800282e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002832:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002836:	d104      	bne.n	8002842 <HAL_HCD_IRQHandler+0x96>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002840:	615a      	str	r2, [r3, #20]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4618      	mov	r0, r3
 8002848:	f005 facc 	bl	8007de4 <USB_ReadInterrupts>
 800284c:	4603      	mov	r3, r0
 800284e:	f003 0302 	and.w	r3, r3, #2
 8002852:	2b02      	cmp	r3, #2
 8002854:	d103      	bne.n	800285e <HAL_HCD_IRQHandler+0xb2>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	2202      	movs	r2, #2
 800285c:	615a      	str	r2, [r3, #20]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	4618      	mov	r0, r3
 8002864:	f005 fabe 	bl	8007de4 <USB_ReadInterrupts>
 8002868:	4603      	mov	r3, r0
 800286a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800286e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002872:	d120      	bne.n	80028b6 <HAL_HCD_IRQHandler+0x10a>
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800287c:	615a      	str	r2, [r3, #20]
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f003 0301 	and.w	r3, r3, #1
 800288a:	2b00      	cmp	r3, #0
 800288c:	d113      	bne.n	80028b6 <HAL_HCD_IRQHandler+0x10a>
 800288e:	2110      	movs	r1, #16
 8002890:	6938      	ldr	r0, [r7, #16]
 8002892:	f005 f9b1 	bl	8007bf8 <USB_FlushTxFifo>
 8002896:	6938      	ldr	r0, [r7, #16]
 8002898:	f005 f9e0 	bl	8007c5c <USB_FlushRxFifo>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	7a5b      	ldrb	r3, [r3, #9]
 80028a0:	2b02      	cmp	r3, #2
 80028a2:	d105      	bne.n	80028b0 <HAL_HCD_IRQHandler+0x104>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2101      	movs	r1, #1
 80028aa:	4618      	mov	r0, r3
 80028ac:	f005 fbd2 	bl	8008054 <USB_InitFSLSPClkSel>
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f008 fb95 	bl	800afe0 <HAL_HCD_Disconnect_Callback>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f005 fa92 	bl	8007de4 <USB_ReadInterrupts>
 80028c0:	4603      	mov	r3, r0
 80028c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028c6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80028ca:	d102      	bne.n	80028d2 <HAL_HCD_IRQHandler+0x126>
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f001 fd4d 	bl	800436c <HCD_Port_IRQHandler>
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	4618      	mov	r0, r3
 80028d8:	f005 fa84 	bl	8007de4 <USB_ReadInterrupts>
 80028dc:	4603      	mov	r3, r0
 80028de:	f003 0308 	and.w	r3, r3, #8
 80028e2:	2b08      	cmp	r3, #8
 80028e4:	d106      	bne.n	80028f4 <HAL_HCD_IRQHandler+0x148>
 80028e6:	6878      	ldr	r0, [r7, #4]
 80028e8:	f008 fb5e 	bl	800afa8 <HAL_HCD_SOF_Callback>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	2208      	movs	r2, #8
 80028f2:	615a      	str	r2, [r3, #20]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	4618      	mov	r0, r3
 80028fa:	f005 fa73 	bl	8007de4 <USB_ReadInterrupts>
 80028fe:	4603      	mov	r3, r0
 8002900:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002904:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002908:	d139      	bne.n	800297e <HAL_HCD_IRQHandler+0x1d2>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f006 f80e 	bl	8008930 <USB_HC_ReadInterrupt>
 8002914:	60b8      	str	r0, [r7, #8]
 8002916:	2300      	movs	r3, #0
 8002918:	617b      	str	r3, [r7, #20]
 800291a:	e025      	b.n	8002968 <HAL_HCD_IRQHandler+0x1bc>
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	f003 030f 	and.w	r3, r3, #15
 8002922:	68ba      	ldr	r2, [r7, #8]
 8002924:	fa22 f303 	lsr.w	r3, r2, r3
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	d018      	beq.n	8002962 <HAL_HCD_IRQHandler+0x1b6>
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	015a      	lsls	r2, r3, #5
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	4413      	add	r3, r2
 8002938:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002942:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002946:	d106      	bne.n	8002956 <HAL_HCD_IRQHandler+0x1aa>
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	b2db      	uxtb	r3, r3
 800294c:	4619      	mov	r1, r3
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f000 f905 	bl	8002b5e <HCD_HC_IN_IRQHandler>
 8002954:	e005      	b.n	8002962 <HAL_HCD_IRQHandler+0x1b6>
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	b2db      	uxtb	r3, r3
 800295a:	4619      	mov	r1, r3
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f000 ff67 	bl	8003830 <HCD_HC_OUT_IRQHandler>
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	3301      	adds	r3, #1
 8002966:	617b      	str	r3, [r7, #20]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	795b      	ldrb	r3, [r3, #5]
 800296c:	461a      	mov	r2, r3
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	4293      	cmp	r3, r2
 8002972:	d3d3      	bcc.n	800291c <HAL_HCD_IRQHandler+0x170>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800297c:	615a      	str	r2, [r3, #20]
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f005 fa2e 	bl	8007de4 <USB_ReadInterrupts>
 8002988:	4603      	mov	r3, r0
 800298a:	f003 0310 	and.w	r3, r3, #16
 800298e:	2b10      	cmp	r3, #16
 8002990:	d101      	bne.n	8002996 <HAL_HCD_IRQHandler+0x1ea>
 8002992:	2301      	movs	r3, #1
 8002994:	e000      	b.n	8002998 <HAL_HCD_IRQHandler+0x1ec>
 8002996:	2300      	movs	r3, #0
 8002998:	2b00      	cmp	r3, #0
 800299a:	d014      	beq.n	80029c6 <HAL_HCD_IRQHandler+0x21a>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	699a      	ldr	r2, [r3, #24]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f022 0210 	bic.w	r2, r2, #16
 80029aa:	619a      	str	r2, [r3, #24]
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f001 fbfe 	bl	80041ae <HCD_RXQLVL_IRQHandler>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	699a      	ldr	r2, [r3, #24]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f042 0210 	orr.w	r2, r2, #16
 80029c0:	619a      	str	r2, [r3, #24]
 80029c2:	e000      	b.n	80029c6 <HAL_HCD_IRQHandler+0x21a>
 80029c4:	bf00      	nop
 80029c6:	3718      	adds	r7, #24
 80029c8:	46bd      	mov	sp, r7
 80029ca:	bd80      	pop	{r7, pc}

080029cc <HAL_HCD_Start>:
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b082      	sub	sp, #8
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80029da:	2b01      	cmp	r3, #1
 80029dc:	d101      	bne.n	80029e2 <HAL_HCD_Start+0x16>
 80029de:	2302      	movs	r3, #2
 80029e0:	e013      	b.n	8002a0a <HAL_HCD_Start+0x3e>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2201      	movs	r2, #1
 80029e6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2101      	movs	r1, #1
 80029f0:	4618      	mov	r0, r3
 80029f2:	f005 fb96 	bl	8008122 <USB_DriveVbus>
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4618      	mov	r0, r3
 80029fc:	f005 f88e 	bl	8007b1c <USB_EnableGlobalInt>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
 8002a08:	2300      	movs	r3, #0
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <HAL_HCD_Stop>:
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b082      	sub	sp, #8
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d101      	bne.n	8002a28 <HAL_HCD_Stop+0x16>
 8002a24:	2302      	movs	r3, #2
 8002a26:	e00d      	b.n	8002a44 <HAL_HCD_Stop+0x32>
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	4618      	mov	r0, r3
 8002a36:	f006 f8e9 	bl	8008c0c <USB_StopHost>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
 8002a42:	2300      	movs	r3, #0
 8002a44:	4618      	mov	r0, r3
 8002a46:	3708      	adds	r7, #8
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}

08002a4c <HAL_HCD_ResetPort>:
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f005 fb38 	bl	80080ce <USB_ResetPort>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	4618      	mov	r0, r3
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_HCD_HC_GetURBState>:
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
 8002a70:	460b      	mov	r3, r1
 8002a72:	70fb      	strb	r3, [r7, #3]
 8002a74:	78fa      	ldrb	r2, [r7, #3]
 8002a76:	6879      	ldr	r1, [r7, #4]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	011b      	lsls	r3, r3, #4
 8002a7c:	1a9b      	subs	r3, r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	440b      	add	r3, r1
 8002a82:	334c      	adds	r3, #76	@ 0x4c
 8002a84:	781b      	ldrb	r3, [r3, #0]
 8002a86:	4618      	mov	r0, r3
 8002a88:	370c      	adds	r7, #12
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <HAL_HCD_HC_GetXferCount>:
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	70fb      	strb	r3, [r7, #3]
 8002a9e:	78fa      	ldrb	r2, [r7, #3]
 8002aa0:	6879      	ldr	r1, [r7, #4]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	011b      	lsls	r3, r3, #4
 8002aa6:	1a9b      	subs	r3, r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	440b      	add	r3, r1
 8002aac:	3338      	adds	r3, #56	@ 0x38
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_HCD_GetCurrentFrame>:
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b082      	sub	sp, #8
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f005 fb7a 	bl	80081c2 <USB_GetCurrentFrame>
 8002ace:	4603      	mov	r3, r0
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	3708      	adds	r7, #8
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <HAL_HCD_GetCurrentSpeed>:
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b082      	sub	sp, #8
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	6078      	str	r0, [r7, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f005 fb55 	bl	8008194 <USB_GetHostSpeed>
 8002aea:	4603      	mov	r3, r0
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_HCD_HC_ClearHubInfo>:
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
 8002afc:	460b      	mov	r3, r1
 8002afe:	70fb      	strb	r3, [r7, #3]
 8002b00:	78fa      	ldrb	r2, [r7, #3]
 8002b02:	6879      	ldr	r1, [r7, #4]
 8002b04:	4613      	mov	r3, r2
 8002b06:	011b      	lsls	r3, r3, #4
 8002b08:	1a9b      	subs	r3, r3, r2
 8002b0a:	009b      	lsls	r3, r3, #2
 8002b0c:	440b      	add	r3, r1
 8002b0e:	331a      	adds	r3, #26
 8002b10:	2200      	movs	r2, #0
 8002b12:	701a      	strb	r2, [r3, #0]
 8002b14:	78fa      	ldrb	r2, [r7, #3]
 8002b16:	6879      	ldr	r1, [r7, #4]
 8002b18:	4613      	mov	r3, r2
 8002b1a:	011b      	lsls	r3, r3, #4
 8002b1c:	1a9b      	subs	r3, r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	440b      	add	r3, r1
 8002b22:	331b      	adds	r3, #27
 8002b24:	2200      	movs	r2, #0
 8002b26:	701a      	strb	r2, [r3, #0]
 8002b28:	78fa      	ldrb	r2, [r7, #3]
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	011b      	lsls	r3, r3, #4
 8002b30:	1a9b      	subs	r3, r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	3325      	adds	r3, #37	@ 0x25
 8002b38:	2200      	movs	r2, #0
 8002b3a:	701a      	strb	r2, [r3, #0]
 8002b3c:	78fa      	ldrb	r2, [r7, #3]
 8002b3e:	6879      	ldr	r1, [r7, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	011b      	lsls	r3, r3, #4
 8002b44:	1a9b      	subs	r3, r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	3324      	adds	r3, #36	@ 0x24
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	701a      	strb	r2, [r3, #0]
 8002b50:	2300      	movs	r3, #0
 8002b52:	4618      	mov	r0, r3
 8002b54:	370c      	adds	r7, #12
 8002b56:	46bd      	mov	sp, r7
 8002b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5c:	4770      	bx	lr

08002b5e <HCD_HC_IN_IRQHandler>:
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b086      	sub	sp, #24
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
 8002b66:	460b      	mov	r3, r1
 8002b68:	70fb      	strb	r3, [r7, #3]
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	613b      	str	r3, [r7, #16]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	78fa      	ldrb	r2, [r7, #3]
 8002b7a:	4611      	mov	r1, r2
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f005 f944 	bl	8007e0a <USB_ReadChInterrupts>
 8002b82:	4603      	mov	r3, r0
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	2b04      	cmp	r3, #4
 8002b8a:	d11a      	bne.n	8002bc2 <HCD_HC_IN_IRQHandler+0x64>
 8002b8c:	78fb      	ldrb	r3, [r7, #3]
 8002b8e:	015a      	lsls	r2, r3, #5
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	4413      	add	r3, r2
 8002b94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b98:	461a      	mov	r2, r3
 8002b9a:	2304      	movs	r3, #4
 8002b9c:	6093      	str	r3, [r2, #8]
 8002b9e:	78fa      	ldrb	r2, [r7, #3]
 8002ba0:	6879      	ldr	r1, [r7, #4]
 8002ba2:	4613      	mov	r3, r2
 8002ba4:	011b      	lsls	r3, r3, #4
 8002ba6:	1a9b      	subs	r3, r3, r2
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	440b      	add	r3, r1
 8002bac:	334d      	adds	r3, #77	@ 0x4d
 8002bae:	2207      	movs	r2, #7
 8002bb0:	701a      	strb	r2, [r3, #0]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	78fa      	ldrb	r2, [r7, #3]
 8002bb8:	4611      	mov	r1, r2
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f005 fec9 	bl	8008952 <USB_HC_Halt>
 8002bc0:	e09e      	b.n	8002d00 <HCD_HC_IN_IRQHandler+0x1a2>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	78fa      	ldrb	r2, [r7, #3]
 8002bc8:	4611      	mov	r1, r2
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f005 f91d 	bl	8007e0a <USB_ReadChInterrupts>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002bda:	d11b      	bne.n	8002c14 <HCD_HC_IN_IRQHandler+0xb6>
 8002bdc:	78fb      	ldrb	r3, [r7, #3]
 8002bde:	015a      	lsls	r2, r3, #5
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	4413      	add	r3, r2
 8002be4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002be8:	461a      	mov	r2, r3
 8002bea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002bee:	6093      	str	r3, [r2, #8]
 8002bf0:	78fa      	ldrb	r2, [r7, #3]
 8002bf2:	6879      	ldr	r1, [r7, #4]
 8002bf4:	4613      	mov	r3, r2
 8002bf6:	011b      	lsls	r3, r3, #4
 8002bf8:	1a9b      	subs	r3, r3, r2
 8002bfa:	009b      	lsls	r3, r3, #2
 8002bfc:	440b      	add	r3, r1
 8002bfe:	334d      	adds	r3, #77	@ 0x4d
 8002c00:	2208      	movs	r2, #8
 8002c02:	701a      	strb	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	78fa      	ldrb	r2, [r7, #3]
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f005 fea0 	bl	8008952 <USB_HC_Halt>
 8002c12:	e075      	b.n	8002d00 <HCD_HC_IN_IRQHandler+0x1a2>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	78fa      	ldrb	r2, [r7, #3]
 8002c1a:	4611      	mov	r1, r2
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f005 f8f4 	bl	8007e0a <USB_ReadChInterrupts>
 8002c22:	4603      	mov	r3, r0
 8002c24:	f003 0308 	and.w	r3, r3, #8
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d11a      	bne.n	8002c62 <HCD_HC_IN_IRQHandler+0x104>
 8002c2c:	78fb      	ldrb	r3, [r7, #3]
 8002c2e:	015a      	lsls	r2, r3, #5
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	4413      	add	r3, r2
 8002c34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c38:	461a      	mov	r2, r3
 8002c3a:	2308      	movs	r3, #8
 8002c3c:	6093      	str	r3, [r2, #8]
 8002c3e:	78fa      	ldrb	r2, [r7, #3]
 8002c40:	6879      	ldr	r1, [r7, #4]
 8002c42:	4613      	mov	r3, r2
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	1a9b      	subs	r3, r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	334d      	adds	r3, #77	@ 0x4d
 8002c4e:	2206      	movs	r2, #6
 8002c50:	701a      	strb	r2, [r3, #0]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	78fa      	ldrb	r2, [r7, #3]
 8002c58:	4611      	mov	r1, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f005 fe79 	bl	8008952 <USB_HC_Halt>
 8002c60:	e04e      	b.n	8002d00 <HCD_HC_IN_IRQHandler+0x1a2>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	78fa      	ldrb	r2, [r7, #3]
 8002c68:	4611      	mov	r1, r2
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	f005 f8cd 	bl	8007e0a <USB_ReadChInterrupts>
 8002c70:	4603      	mov	r3, r0
 8002c72:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c7a:	d11b      	bne.n	8002cb4 <HCD_HC_IN_IRQHandler+0x156>
 8002c7c:	78fb      	ldrb	r3, [r7, #3]
 8002c7e:	015a      	lsls	r2, r3, #5
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	4413      	add	r3, r2
 8002c84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c88:	461a      	mov	r2, r3
 8002c8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002c8e:	6093      	str	r3, [r2, #8]
 8002c90:	78fa      	ldrb	r2, [r7, #3]
 8002c92:	6879      	ldr	r1, [r7, #4]
 8002c94:	4613      	mov	r3, r2
 8002c96:	011b      	lsls	r3, r3, #4
 8002c98:	1a9b      	subs	r3, r3, r2
 8002c9a:	009b      	lsls	r3, r3, #2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	334d      	adds	r3, #77	@ 0x4d
 8002ca0:	2209      	movs	r2, #9
 8002ca2:	701a      	strb	r2, [r3, #0]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	78fa      	ldrb	r2, [r7, #3]
 8002caa:	4611      	mov	r1, r2
 8002cac:	4618      	mov	r0, r3
 8002cae:	f005 fe50 	bl	8008952 <USB_HC_Halt>
 8002cb2:	e025      	b.n	8002d00 <HCD_HC_IN_IRQHandler+0x1a2>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	78fa      	ldrb	r2, [r7, #3]
 8002cba:	4611      	mov	r1, r2
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f005 f8a4 	bl	8007e0a <USB_ReadChInterrupts>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cc8:	2b80      	cmp	r3, #128	@ 0x80
 8002cca:	d119      	bne.n	8002d00 <HCD_HC_IN_IRQHandler+0x1a2>
 8002ccc:	78fb      	ldrb	r3, [r7, #3]
 8002cce:	015a      	lsls	r2, r3, #5
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002cd8:	461a      	mov	r2, r3
 8002cda:	2380      	movs	r3, #128	@ 0x80
 8002cdc:	6093      	str	r3, [r2, #8]
 8002cde:	78fa      	ldrb	r2, [r7, #3]
 8002ce0:	6879      	ldr	r1, [r7, #4]
 8002ce2:	4613      	mov	r3, r2
 8002ce4:	011b      	lsls	r3, r3, #4
 8002ce6:	1a9b      	subs	r3, r3, r2
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	440b      	add	r3, r1
 8002cec:	334d      	adds	r3, #77	@ 0x4d
 8002cee:	2207      	movs	r2, #7
 8002cf0:	701a      	strb	r2, [r3, #0]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	78fa      	ldrb	r2, [r7, #3]
 8002cf8:	4611      	mov	r1, r2
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	f005 fe29 	bl	8008952 <USB_HC_Halt>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	78fa      	ldrb	r2, [r7, #3]
 8002d06:	4611      	mov	r1, r2
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f005 f87e 	bl	8007e0a <USB_ReadChInterrupts>
 8002d0e:	4603      	mov	r3, r0
 8002d10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d14:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002d18:	d112      	bne.n	8002d40 <HCD_HC_IN_IRQHandler+0x1e2>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	78fa      	ldrb	r2, [r7, #3]
 8002d20:	4611      	mov	r1, r2
 8002d22:	4618      	mov	r0, r3
 8002d24:	f005 fe15 	bl	8008952 <USB_HC_Halt>
 8002d28:	78fb      	ldrb	r3, [r7, #3]
 8002d2a:	015a      	lsls	r2, r3, #5
 8002d2c:	693b      	ldr	r3, [r7, #16]
 8002d2e:	4413      	add	r3, r2
 8002d30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d34:	461a      	mov	r2, r3
 8002d36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002d3a:	6093      	str	r3, [r2, #8]
 8002d3c:	f000 bd75 	b.w	800382a <HCD_HC_IN_IRQHandler+0xccc>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	78fa      	ldrb	r2, [r7, #3]
 8002d46:	4611      	mov	r1, r2
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f005 f85e 	bl	8007e0a <USB_ReadChInterrupts>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f003 0301 	and.w	r3, r3, #1
 8002d54:	2b01      	cmp	r3, #1
 8002d56:	f040 8128 	bne.w	8002faa <HCD_HC_IN_IRQHandler+0x44c>
 8002d5a:	78fb      	ldrb	r3, [r7, #3]
 8002d5c:	015a      	lsls	r2, r3, #5
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	4413      	add	r3, r2
 8002d62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d66:	461a      	mov	r2, r3
 8002d68:	2320      	movs	r3, #32
 8002d6a:	6093      	str	r3, [r2, #8]
 8002d6c:	78fa      	ldrb	r2, [r7, #3]
 8002d6e:	6879      	ldr	r1, [r7, #4]
 8002d70:	4613      	mov	r3, r2
 8002d72:	011b      	lsls	r3, r3, #4
 8002d74:	1a9b      	subs	r3, r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	440b      	add	r3, r1
 8002d7a:	331b      	adds	r3, #27
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	2b01      	cmp	r3, #1
 8002d80:	d119      	bne.n	8002db6 <HCD_HC_IN_IRQHandler+0x258>
 8002d82:	78fa      	ldrb	r2, [r7, #3]
 8002d84:	6879      	ldr	r1, [r7, #4]
 8002d86:	4613      	mov	r3, r2
 8002d88:	011b      	lsls	r3, r3, #4
 8002d8a:	1a9b      	subs	r3, r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	440b      	add	r3, r1
 8002d90:	331b      	adds	r3, #27
 8002d92:	2200      	movs	r2, #0
 8002d94:	701a      	strb	r2, [r3, #0]
 8002d96:	78fb      	ldrb	r3, [r7, #3]
 8002d98:	015a      	lsls	r2, r3, #5
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	78fa      	ldrb	r2, [r7, #3]
 8002da6:	0151      	lsls	r1, r2, #5
 8002da8:	693a      	ldr	r2, [r7, #16]
 8002daa:	440a      	add	r2, r1
 8002dac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002db0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002db4:	6053      	str	r3, [r2, #4]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	799b      	ldrb	r3, [r3, #6]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d01b      	beq.n	8002df6 <HCD_HC_IN_IRQHandler+0x298>
 8002dbe:	78fa      	ldrb	r2, [r7, #3]
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	4613      	mov	r3, r2
 8002dc4:	011b      	lsls	r3, r3, #4
 8002dc6:	1a9b      	subs	r3, r3, r2
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	440b      	add	r3, r1
 8002dcc:	3330      	adds	r3, #48	@ 0x30
 8002dce:	6819      	ldr	r1, [r3, #0]
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	015a      	lsls	r2, r3, #5
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002de2:	78fa      	ldrb	r2, [r7, #3]
 8002de4:	1ac9      	subs	r1, r1, r3
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	4613      	mov	r3, r2
 8002dea:	011b      	lsls	r3, r3, #4
 8002dec:	1a9b      	subs	r3, r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	4403      	add	r3, r0
 8002df2:	3338      	adds	r3, #56	@ 0x38
 8002df4:	6019      	str	r1, [r3, #0]
 8002df6:	78fa      	ldrb	r2, [r7, #3]
 8002df8:	6879      	ldr	r1, [r7, #4]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	011b      	lsls	r3, r3, #4
 8002dfe:	1a9b      	subs	r3, r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	440b      	add	r3, r1
 8002e04:	334d      	adds	r3, #77	@ 0x4d
 8002e06:	2201      	movs	r2, #1
 8002e08:	701a      	strb	r2, [r3, #0]
 8002e0a:	78fa      	ldrb	r2, [r7, #3]
 8002e0c:	6879      	ldr	r1, [r7, #4]
 8002e0e:	4613      	mov	r3, r2
 8002e10:	011b      	lsls	r3, r3, #4
 8002e12:	1a9b      	subs	r3, r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	440b      	add	r3, r1
 8002e18:	3344      	adds	r3, #68	@ 0x44
 8002e1a:	2200      	movs	r2, #0
 8002e1c:	601a      	str	r2, [r3, #0]
 8002e1e:	78fb      	ldrb	r3, [r7, #3]
 8002e20:	015a      	lsls	r2, r3, #5
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	4413      	add	r3, r2
 8002e26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	6093      	str	r3, [r2, #8]
 8002e30:	78fa      	ldrb	r2, [r7, #3]
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	1a9b      	subs	r3, r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	3326      	adds	r3, #38	@ 0x26
 8002e40:	781b      	ldrb	r3, [r3, #0]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <HCD_HC_IN_IRQHandler+0x2fe>
 8002e46:	78fa      	ldrb	r2, [r7, #3]
 8002e48:	6879      	ldr	r1, [r7, #4]
 8002e4a:	4613      	mov	r3, r2
 8002e4c:	011b      	lsls	r3, r3, #4
 8002e4e:	1a9b      	subs	r3, r3, r2
 8002e50:	009b      	lsls	r3, r3, #2
 8002e52:	440b      	add	r3, r1
 8002e54:	3326      	adds	r3, #38	@ 0x26
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b02      	cmp	r3, #2
 8002e5a:	d110      	bne.n	8002e7e <HCD_HC_IN_IRQHandler+0x320>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	78fa      	ldrb	r2, [r7, #3]
 8002e62:	4611      	mov	r1, r2
 8002e64:	4618      	mov	r0, r3
 8002e66:	f005 fd74 	bl	8008952 <USB_HC_Halt>
 8002e6a:	78fb      	ldrb	r3, [r7, #3]
 8002e6c:	015a      	lsls	r2, r3, #5
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4413      	add	r3, r2
 8002e72:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e76:	461a      	mov	r2, r3
 8002e78:	2310      	movs	r3, #16
 8002e7a:	6093      	str	r3, [r2, #8]
 8002e7c:	e03d      	b.n	8002efa <HCD_HC_IN_IRQHandler+0x39c>
 8002e7e:	78fa      	ldrb	r2, [r7, #3]
 8002e80:	6879      	ldr	r1, [r7, #4]
 8002e82:	4613      	mov	r3, r2
 8002e84:	011b      	lsls	r3, r3, #4
 8002e86:	1a9b      	subs	r3, r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	440b      	add	r3, r1
 8002e8c:	3326      	adds	r3, #38	@ 0x26
 8002e8e:	781b      	ldrb	r3, [r3, #0]
 8002e90:	2b03      	cmp	r3, #3
 8002e92:	d00a      	beq.n	8002eaa <HCD_HC_IN_IRQHandler+0x34c>
 8002e94:	78fa      	ldrb	r2, [r7, #3]
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	011b      	lsls	r3, r3, #4
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	3326      	adds	r3, #38	@ 0x26
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d127      	bne.n	8002efa <HCD_HC_IN_IRQHandler+0x39c>
 8002eaa:	78fb      	ldrb	r3, [r7, #3]
 8002eac:	015a      	lsls	r2, r3, #5
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	4413      	add	r3, r2
 8002eb2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	78fa      	ldrb	r2, [r7, #3]
 8002eba:	0151      	lsls	r1, r2, #5
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	440a      	add	r2, r1
 8002ec0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002ec4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002ec8:	6013      	str	r3, [r2, #0]
 8002eca:	78fa      	ldrb	r2, [r7, #3]
 8002ecc:	6879      	ldr	r1, [r7, #4]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	011b      	lsls	r3, r3, #4
 8002ed2:	1a9b      	subs	r3, r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	440b      	add	r3, r1
 8002ed8:	334c      	adds	r3, #76	@ 0x4c
 8002eda:	2201      	movs	r2, #1
 8002edc:	701a      	strb	r2, [r3, #0]
 8002ede:	78fa      	ldrb	r2, [r7, #3]
 8002ee0:	6879      	ldr	r1, [r7, #4]
 8002ee2:	4613      	mov	r3, r2
 8002ee4:	011b      	lsls	r3, r3, #4
 8002ee6:	1a9b      	subs	r3, r3, r2
 8002ee8:	009b      	lsls	r3, r3, #2
 8002eea:	440b      	add	r3, r1
 8002eec:	334c      	adds	r3, #76	@ 0x4c
 8002eee:	781a      	ldrb	r2, [r3, #0]
 8002ef0:	78fb      	ldrb	r3, [r7, #3]
 8002ef2:	4619      	mov	r1, r3
 8002ef4:	6878      	ldr	r0, [r7, #4]
 8002ef6:	f008 f881 	bl	800affc <HAL_HCD_HC_NotifyURBChange_Callback>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	799b      	ldrb	r3, [r3, #6]
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d13b      	bne.n	8002f7a <HCD_HC_IN_IRQHandler+0x41c>
 8002f02:	78fa      	ldrb	r2, [r7, #3]
 8002f04:	6879      	ldr	r1, [r7, #4]
 8002f06:	4613      	mov	r3, r2
 8002f08:	011b      	lsls	r3, r3, #4
 8002f0a:	1a9b      	subs	r3, r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	440b      	add	r3, r1
 8002f10:	3338      	adds	r3, #56	@ 0x38
 8002f12:	6819      	ldr	r1, [r3, #0]
 8002f14:	78fa      	ldrb	r2, [r7, #3]
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4403      	add	r3, r0
 8002f22:	3328      	adds	r3, #40	@ 0x28
 8002f24:	881b      	ldrh	r3, [r3, #0]
 8002f26:	440b      	add	r3, r1
 8002f28:	1e59      	subs	r1, r3, #1
 8002f2a:	78fa      	ldrb	r2, [r7, #3]
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	4613      	mov	r3, r2
 8002f30:	011b      	lsls	r3, r3, #4
 8002f32:	1a9b      	subs	r3, r3, r2
 8002f34:	009b      	lsls	r3, r3, #2
 8002f36:	4403      	add	r3, r0
 8002f38:	3328      	adds	r3, #40	@ 0x28
 8002f3a:	881b      	ldrh	r3, [r3, #0]
 8002f3c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	f000 8470 	beq.w	800382a <HCD_HC_IN_IRQHandler+0xccc>
 8002f4a:	78fa      	ldrb	r2, [r7, #3]
 8002f4c:	6879      	ldr	r1, [r7, #4]
 8002f4e:	4613      	mov	r3, r2
 8002f50:	011b      	lsls	r3, r3, #4
 8002f52:	1a9b      	subs	r3, r3, r2
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	440b      	add	r3, r1
 8002f58:	333c      	adds	r3, #60	@ 0x3c
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	78fa      	ldrb	r2, [r7, #3]
 8002f5e:	f083 0301 	eor.w	r3, r3, #1
 8002f62:	b2d8      	uxtb	r0, r3
 8002f64:	6879      	ldr	r1, [r7, #4]
 8002f66:	4613      	mov	r3, r2
 8002f68:	011b      	lsls	r3, r3, #4
 8002f6a:	1a9b      	subs	r3, r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	440b      	add	r3, r1
 8002f70:	333c      	adds	r3, #60	@ 0x3c
 8002f72:	4602      	mov	r2, r0
 8002f74:	701a      	strb	r2, [r3, #0]
 8002f76:	f000 bc58 	b.w	800382a <HCD_HC_IN_IRQHandler+0xccc>
 8002f7a:	78fa      	ldrb	r2, [r7, #3]
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	011b      	lsls	r3, r3, #4
 8002f82:	1a9b      	subs	r3, r3, r2
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	440b      	add	r3, r1
 8002f88:	333c      	adds	r3, #60	@ 0x3c
 8002f8a:	781b      	ldrb	r3, [r3, #0]
 8002f8c:	78fa      	ldrb	r2, [r7, #3]
 8002f8e:	f083 0301 	eor.w	r3, r3, #1
 8002f92:	b2d8      	uxtb	r0, r3
 8002f94:	6879      	ldr	r1, [r7, #4]
 8002f96:	4613      	mov	r3, r2
 8002f98:	011b      	lsls	r3, r3, #4
 8002f9a:	1a9b      	subs	r3, r3, r2
 8002f9c:	009b      	lsls	r3, r3, #2
 8002f9e:	440b      	add	r3, r1
 8002fa0:	333c      	adds	r3, #60	@ 0x3c
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	701a      	strb	r2, [r3, #0]
 8002fa6:	f000 bc40 	b.w	800382a <HCD_HC_IN_IRQHandler+0xccc>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	78fa      	ldrb	r2, [r7, #3]
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f004 ff29 	bl	8007e0a <USB_ReadChInterrupts>
 8002fb8:	4603      	mov	r3, r0
 8002fba:	f003 0320 	and.w	r3, r3, #32
 8002fbe:	2b20      	cmp	r3, #32
 8002fc0:	d131      	bne.n	8003026 <HCD_HC_IN_IRQHandler+0x4c8>
 8002fc2:	78fb      	ldrb	r3, [r7, #3]
 8002fc4:	015a      	lsls	r2, r3, #5
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4413      	add	r3, r2
 8002fca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fce:	461a      	mov	r2, r3
 8002fd0:	2320      	movs	r3, #32
 8002fd2:	6093      	str	r3, [r2, #8]
 8002fd4:	78fa      	ldrb	r2, [r7, #3]
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	1a9b      	subs	r3, r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	331a      	adds	r3, #26
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	f040 841f 	bne.w	800382a <HCD_HC_IN_IRQHandler+0xccc>
 8002fec:	78fa      	ldrb	r2, [r7, #3]
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	1a9b      	subs	r3, r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	331b      	adds	r3, #27
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	701a      	strb	r2, [r3, #0]
 8003000:	78fa      	ldrb	r2, [r7, #3]
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	1a9b      	subs	r3, r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	334d      	adds	r3, #77	@ 0x4d
 8003010:	2203      	movs	r2, #3
 8003012:	701a      	strb	r2, [r3, #0]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	78fa      	ldrb	r2, [r7, #3]
 800301a:	4611      	mov	r1, r2
 800301c:	4618      	mov	r0, r3
 800301e:	f005 fc98 	bl	8008952 <USB_HC_Halt>
 8003022:	f000 bc02 	b.w	800382a <HCD_HC_IN_IRQHandler+0xccc>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	78fa      	ldrb	r2, [r7, #3]
 800302c:	4611      	mov	r1, r2
 800302e:	4618      	mov	r0, r3
 8003030:	f004 feeb 	bl	8007e0a <USB_ReadChInterrupts>
 8003034:	4603      	mov	r3, r0
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b02      	cmp	r3, #2
 800303c:	f040 8305 	bne.w	800364a <HCD_HC_IN_IRQHandler+0xaec>
 8003040:	78fb      	ldrb	r3, [r7, #3]
 8003042:	015a      	lsls	r2, r3, #5
 8003044:	693b      	ldr	r3, [r7, #16]
 8003046:	4413      	add	r3, r2
 8003048:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800304c:	461a      	mov	r2, r3
 800304e:	2302      	movs	r3, #2
 8003050:	6093      	str	r3, [r2, #8]
 8003052:	78fa      	ldrb	r2, [r7, #3]
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	4613      	mov	r3, r2
 8003058:	011b      	lsls	r3, r3, #4
 800305a:	1a9b      	subs	r3, r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	440b      	add	r3, r1
 8003060:	334d      	adds	r3, #77	@ 0x4d
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b01      	cmp	r3, #1
 8003066:	d114      	bne.n	8003092 <HCD_HC_IN_IRQHandler+0x534>
 8003068:	78fa      	ldrb	r2, [r7, #3]
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	4613      	mov	r3, r2
 800306e:	011b      	lsls	r3, r3, #4
 8003070:	1a9b      	subs	r3, r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	334d      	adds	r3, #77	@ 0x4d
 8003078:	2202      	movs	r2, #2
 800307a:	701a      	strb	r2, [r3, #0]
 800307c:	78fa      	ldrb	r2, [r7, #3]
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	1a9b      	subs	r3, r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	334c      	adds	r3, #76	@ 0x4c
 800308c:	2201      	movs	r2, #1
 800308e:	701a      	strb	r2, [r3, #0]
 8003090:	e2cc      	b.n	800362c <HCD_HC_IN_IRQHandler+0xace>
 8003092:	78fa      	ldrb	r2, [r7, #3]
 8003094:	6879      	ldr	r1, [r7, #4]
 8003096:	4613      	mov	r3, r2
 8003098:	011b      	lsls	r3, r3, #4
 800309a:	1a9b      	subs	r3, r3, r2
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	440b      	add	r3, r1
 80030a0:	334d      	adds	r3, #77	@ 0x4d
 80030a2:	781b      	ldrb	r3, [r3, #0]
 80030a4:	2b06      	cmp	r3, #6
 80030a6:	d114      	bne.n	80030d2 <HCD_HC_IN_IRQHandler+0x574>
 80030a8:	78fa      	ldrb	r2, [r7, #3]
 80030aa:	6879      	ldr	r1, [r7, #4]
 80030ac:	4613      	mov	r3, r2
 80030ae:	011b      	lsls	r3, r3, #4
 80030b0:	1a9b      	subs	r3, r3, r2
 80030b2:	009b      	lsls	r3, r3, #2
 80030b4:	440b      	add	r3, r1
 80030b6:	334d      	adds	r3, #77	@ 0x4d
 80030b8:	2202      	movs	r2, #2
 80030ba:	701a      	strb	r2, [r3, #0]
 80030bc:	78fa      	ldrb	r2, [r7, #3]
 80030be:	6879      	ldr	r1, [r7, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	011b      	lsls	r3, r3, #4
 80030c4:	1a9b      	subs	r3, r3, r2
 80030c6:	009b      	lsls	r3, r3, #2
 80030c8:	440b      	add	r3, r1
 80030ca:	334c      	adds	r3, #76	@ 0x4c
 80030cc:	2205      	movs	r2, #5
 80030ce:	701a      	strb	r2, [r3, #0]
 80030d0:	e2ac      	b.n	800362c <HCD_HC_IN_IRQHandler+0xace>
 80030d2:	78fa      	ldrb	r2, [r7, #3]
 80030d4:	6879      	ldr	r1, [r7, #4]
 80030d6:	4613      	mov	r3, r2
 80030d8:	011b      	lsls	r3, r3, #4
 80030da:	1a9b      	subs	r3, r3, r2
 80030dc:	009b      	lsls	r3, r3, #2
 80030de:	440b      	add	r3, r1
 80030e0:	334d      	adds	r3, #77	@ 0x4d
 80030e2:	781b      	ldrb	r3, [r3, #0]
 80030e4:	2b07      	cmp	r3, #7
 80030e6:	d00b      	beq.n	8003100 <HCD_HC_IN_IRQHandler+0x5a2>
 80030e8:	78fa      	ldrb	r2, [r7, #3]
 80030ea:	6879      	ldr	r1, [r7, #4]
 80030ec:	4613      	mov	r3, r2
 80030ee:	011b      	lsls	r3, r3, #4
 80030f0:	1a9b      	subs	r3, r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	440b      	add	r3, r1
 80030f6:	334d      	adds	r3, #77	@ 0x4d
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	2b09      	cmp	r3, #9
 80030fc:	f040 80a6 	bne.w	800324c <HCD_HC_IN_IRQHandler+0x6ee>
 8003100:	78fa      	ldrb	r2, [r7, #3]
 8003102:	6879      	ldr	r1, [r7, #4]
 8003104:	4613      	mov	r3, r2
 8003106:	011b      	lsls	r3, r3, #4
 8003108:	1a9b      	subs	r3, r3, r2
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	334d      	adds	r3, #77	@ 0x4d
 8003110:	2202      	movs	r2, #2
 8003112:	701a      	strb	r2, [r3, #0]
 8003114:	78fa      	ldrb	r2, [r7, #3]
 8003116:	6879      	ldr	r1, [r7, #4]
 8003118:	4613      	mov	r3, r2
 800311a:	011b      	lsls	r3, r3, #4
 800311c:	1a9b      	subs	r3, r3, r2
 800311e:	009b      	lsls	r3, r3, #2
 8003120:	440b      	add	r3, r1
 8003122:	3344      	adds	r3, #68	@ 0x44
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	1c59      	adds	r1, r3, #1
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	011b      	lsls	r3, r3, #4
 800312e:	1a9b      	subs	r3, r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4403      	add	r3, r0
 8003134:	3344      	adds	r3, #68	@ 0x44
 8003136:	6019      	str	r1, [r3, #0]
 8003138:	78fa      	ldrb	r2, [r7, #3]
 800313a:	6879      	ldr	r1, [r7, #4]
 800313c:	4613      	mov	r3, r2
 800313e:	011b      	lsls	r3, r3, #4
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	009b      	lsls	r3, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	3344      	adds	r3, #68	@ 0x44
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2b02      	cmp	r3, #2
 800314c:	d943      	bls.n	80031d6 <HCD_HC_IN_IRQHandler+0x678>
 800314e:	78fa      	ldrb	r2, [r7, #3]
 8003150:	6879      	ldr	r1, [r7, #4]
 8003152:	4613      	mov	r3, r2
 8003154:	011b      	lsls	r3, r3, #4
 8003156:	1a9b      	subs	r3, r3, r2
 8003158:	009b      	lsls	r3, r3, #2
 800315a:	440b      	add	r3, r1
 800315c:	3344      	adds	r3, #68	@ 0x44
 800315e:	2200      	movs	r2, #0
 8003160:	601a      	str	r2, [r3, #0]
 8003162:	78fa      	ldrb	r2, [r7, #3]
 8003164:	6879      	ldr	r1, [r7, #4]
 8003166:	4613      	mov	r3, r2
 8003168:	011b      	lsls	r3, r3, #4
 800316a:	1a9b      	subs	r3, r3, r2
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	440b      	add	r3, r1
 8003170:	331a      	adds	r3, #26
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	2b01      	cmp	r3, #1
 8003176:	d123      	bne.n	80031c0 <HCD_HC_IN_IRQHandler+0x662>
 8003178:	78fa      	ldrb	r2, [r7, #3]
 800317a:	6879      	ldr	r1, [r7, #4]
 800317c:	4613      	mov	r3, r2
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	1a9b      	subs	r3, r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	440b      	add	r3, r1
 8003186:	331b      	adds	r3, #27
 8003188:	2200      	movs	r2, #0
 800318a:	701a      	strb	r2, [r3, #0]
 800318c:	78fa      	ldrb	r2, [r7, #3]
 800318e:	6879      	ldr	r1, [r7, #4]
 8003190:	4613      	mov	r3, r2
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	1a9b      	subs	r3, r3, r2
 8003196:	009b      	lsls	r3, r3, #2
 8003198:	440b      	add	r3, r1
 800319a:	331c      	adds	r3, #28
 800319c:	2200      	movs	r2, #0
 800319e:	701a      	strb	r2, [r3, #0]
 80031a0:	78fb      	ldrb	r3, [r7, #3]
 80031a2:	015a      	lsls	r2, r3, #5
 80031a4:	693b      	ldr	r3, [r7, #16]
 80031a6:	4413      	add	r3, r2
 80031a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	78fa      	ldrb	r2, [r7, #3]
 80031b0:	0151      	lsls	r1, r2, #5
 80031b2:	693a      	ldr	r2, [r7, #16]
 80031b4:	440a      	add	r2, r1
 80031b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80031ba:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031be:	6053      	str	r3, [r2, #4]
 80031c0:	78fa      	ldrb	r2, [r7, #3]
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	1a9b      	subs	r3, r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	334c      	adds	r3, #76	@ 0x4c
 80031d0:	2204      	movs	r2, #4
 80031d2:	701a      	strb	r2, [r3, #0]
 80031d4:	e229      	b.n	800362a <HCD_HC_IN_IRQHandler+0xacc>
 80031d6:	78fa      	ldrb	r2, [r7, #3]
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	4613      	mov	r3, r2
 80031dc:	011b      	lsls	r3, r3, #4
 80031de:	1a9b      	subs	r3, r3, r2
 80031e0:	009b      	lsls	r3, r3, #2
 80031e2:	440b      	add	r3, r1
 80031e4:	334c      	adds	r3, #76	@ 0x4c
 80031e6:	2202      	movs	r2, #2
 80031e8:	701a      	strb	r2, [r3, #0]
 80031ea:	78fa      	ldrb	r2, [r7, #3]
 80031ec:	6879      	ldr	r1, [r7, #4]
 80031ee:	4613      	mov	r3, r2
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	1a9b      	subs	r3, r3, r2
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	440b      	add	r3, r1
 80031f8:	3326      	adds	r3, #38	@ 0x26
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00b      	beq.n	8003218 <HCD_HC_IN_IRQHandler+0x6ba>
 8003200:	78fa      	ldrb	r2, [r7, #3]
 8003202:	6879      	ldr	r1, [r7, #4]
 8003204:	4613      	mov	r3, r2
 8003206:	011b      	lsls	r3, r3, #4
 8003208:	1a9b      	subs	r3, r3, r2
 800320a:	009b      	lsls	r3, r3, #2
 800320c:	440b      	add	r3, r1
 800320e:	3326      	adds	r3, #38	@ 0x26
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	2b02      	cmp	r3, #2
 8003214:	f040 8209 	bne.w	800362a <HCD_HC_IN_IRQHandler+0xacc>
 8003218:	78fb      	ldrb	r3, [r7, #3]
 800321a:	015a      	lsls	r2, r3, #5
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	4413      	add	r3, r2
 8003220:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	60fb      	str	r3, [r7, #12]
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800322e:	60fb      	str	r3, [r7, #12]
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003236:	60fb      	str	r3, [r7, #12]
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	015a      	lsls	r2, r3, #5
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	4413      	add	r3, r2
 8003240:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003244:	461a      	mov	r2, r3
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	e1ee      	b.n	800362a <HCD_HC_IN_IRQHandler+0xacc>
 800324c:	78fa      	ldrb	r2, [r7, #3]
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	4613      	mov	r3, r2
 8003252:	011b      	lsls	r3, r3, #4
 8003254:	1a9b      	subs	r3, r3, r2
 8003256:	009b      	lsls	r3, r3, #2
 8003258:	440b      	add	r3, r1
 800325a:	334d      	adds	r3, #77	@ 0x4d
 800325c:	781b      	ldrb	r3, [r3, #0]
 800325e:	2b05      	cmp	r3, #5
 8003260:	f040 80c8 	bne.w	80033f4 <HCD_HC_IN_IRQHandler+0x896>
 8003264:	78fa      	ldrb	r2, [r7, #3]
 8003266:	6879      	ldr	r1, [r7, #4]
 8003268:	4613      	mov	r3, r2
 800326a:	011b      	lsls	r3, r3, #4
 800326c:	1a9b      	subs	r3, r3, r2
 800326e:	009b      	lsls	r3, r3, #2
 8003270:	440b      	add	r3, r1
 8003272:	334d      	adds	r3, #77	@ 0x4d
 8003274:	2202      	movs	r2, #2
 8003276:	701a      	strb	r2, [r3, #0]
 8003278:	78fa      	ldrb	r2, [r7, #3]
 800327a:	6879      	ldr	r1, [r7, #4]
 800327c:	4613      	mov	r3, r2
 800327e:	011b      	lsls	r3, r3, #4
 8003280:	1a9b      	subs	r3, r3, r2
 8003282:	009b      	lsls	r3, r3, #2
 8003284:	440b      	add	r3, r1
 8003286:	331b      	adds	r3, #27
 8003288:	781b      	ldrb	r3, [r3, #0]
 800328a:	2b01      	cmp	r3, #1
 800328c:	f040 81ce 	bne.w	800362c <HCD_HC_IN_IRQHandler+0xace>
 8003290:	78fa      	ldrb	r2, [r7, #3]
 8003292:	6879      	ldr	r1, [r7, #4]
 8003294:	4613      	mov	r3, r2
 8003296:	011b      	lsls	r3, r3, #4
 8003298:	1a9b      	subs	r3, r3, r2
 800329a:	009b      	lsls	r3, r3, #2
 800329c:	440b      	add	r3, r1
 800329e:	3326      	adds	r3, #38	@ 0x26
 80032a0:	781b      	ldrb	r3, [r3, #0]
 80032a2:	2b03      	cmp	r3, #3
 80032a4:	d16b      	bne.n	800337e <HCD_HC_IN_IRQHandler+0x820>
 80032a6:	78fa      	ldrb	r2, [r7, #3]
 80032a8:	6879      	ldr	r1, [r7, #4]
 80032aa:	4613      	mov	r3, r2
 80032ac:	011b      	lsls	r3, r3, #4
 80032ae:	1a9b      	subs	r3, r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	440b      	add	r3, r1
 80032b4:	3348      	adds	r3, #72	@ 0x48
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	1c59      	adds	r1, r3, #1
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	1a9b      	subs	r3, r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4403      	add	r3, r0
 80032c6:	3348      	adds	r3, #72	@ 0x48
 80032c8:	6019      	str	r1, [r3, #0]
 80032ca:	78fa      	ldrb	r2, [r7, #3]
 80032cc:	6879      	ldr	r1, [r7, #4]
 80032ce:	4613      	mov	r3, r2
 80032d0:	011b      	lsls	r3, r3, #4
 80032d2:	1a9b      	subs	r3, r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	440b      	add	r3, r1
 80032d8:	3348      	adds	r3, #72	@ 0x48
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d943      	bls.n	8003368 <HCD_HC_IN_IRQHandler+0x80a>
 80032e0:	78fa      	ldrb	r2, [r7, #3]
 80032e2:	6879      	ldr	r1, [r7, #4]
 80032e4:	4613      	mov	r3, r2
 80032e6:	011b      	lsls	r3, r3, #4
 80032e8:	1a9b      	subs	r3, r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	440b      	add	r3, r1
 80032ee:	3348      	adds	r3, #72	@ 0x48
 80032f0:	2200      	movs	r2, #0
 80032f2:	601a      	str	r2, [r3, #0]
 80032f4:	78fa      	ldrb	r2, [r7, #3]
 80032f6:	6879      	ldr	r1, [r7, #4]
 80032f8:	4613      	mov	r3, r2
 80032fa:	011b      	lsls	r3, r3, #4
 80032fc:	1a9b      	subs	r3, r3, r2
 80032fe:	009b      	lsls	r3, r3, #2
 8003300:	440b      	add	r3, r1
 8003302:	331b      	adds	r3, #27
 8003304:	2200      	movs	r2, #0
 8003306:	701a      	strb	r2, [r3, #0]
 8003308:	78fa      	ldrb	r2, [r7, #3]
 800330a:	6879      	ldr	r1, [r7, #4]
 800330c:	4613      	mov	r3, r2
 800330e:	011b      	lsls	r3, r3, #4
 8003310:	1a9b      	subs	r3, r3, r2
 8003312:	009b      	lsls	r3, r3, #2
 8003314:	440b      	add	r3, r1
 8003316:	3344      	adds	r3, #68	@ 0x44
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2b02      	cmp	r3, #2
 800331c:	d809      	bhi.n	8003332 <HCD_HC_IN_IRQHandler+0x7d4>
 800331e:	78fa      	ldrb	r2, [r7, #3]
 8003320:	6879      	ldr	r1, [r7, #4]
 8003322:	4613      	mov	r3, r2
 8003324:	011b      	lsls	r3, r3, #4
 8003326:	1a9b      	subs	r3, r3, r2
 8003328:	009b      	lsls	r3, r3, #2
 800332a:	440b      	add	r3, r1
 800332c:	331c      	adds	r3, #28
 800332e:	2201      	movs	r2, #1
 8003330:	701a      	strb	r2, [r3, #0]
 8003332:	78fb      	ldrb	r3, [r7, #3]
 8003334:	015a      	lsls	r2, r3, #5
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	4413      	add	r3, r2
 800333a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	78fa      	ldrb	r2, [r7, #3]
 8003342:	0151      	lsls	r1, r2, #5
 8003344:	693a      	ldr	r2, [r7, #16]
 8003346:	440a      	add	r2, r1
 8003348:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800334c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003350:	6053      	str	r3, [r2, #4]
 8003352:	78fa      	ldrb	r2, [r7, #3]
 8003354:	6879      	ldr	r1, [r7, #4]
 8003356:	4613      	mov	r3, r2
 8003358:	011b      	lsls	r3, r3, #4
 800335a:	1a9b      	subs	r3, r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	334c      	adds	r3, #76	@ 0x4c
 8003362:	2204      	movs	r2, #4
 8003364:	701a      	strb	r2, [r3, #0]
 8003366:	e014      	b.n	8003392 <HCD_HC_IN_IRQHandler+0x834>
 8003368:	78fa      	ldrb	r2, [r7, #3]
 800336a:	6879      	ldr	r1, [r7, #4]
 800336c:	4613      	mov	r3, r2
 800336e:	011b      	lsls	r3, r3, #4
 8003370:	1a9b      	subs	r3, r3, r2
 8003372:	009b      	lsls	r3, r3, #2
 8003374:	440b      	add	r3, r1
 8003376:	334c      	adds	r3, #76	@ 0x4c
 8003378:	2202      	movs	r2, #2
 800337a:	701a      	strb	r2, [r3, #0]
 800337c:	e009      	b.n	8003392 <HCD_HC_IN_IRQHandler+0x834>
 800337e:	78fa      	ldrb	r2, [r7, #3]
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	4613      	mov	r3, r2
 8003384:	011b      	lsls	r3, r3, #4
 8003386:	1a9b      	subs	r3, r3, r2
 8003388:	009b      	lsls	r3, r3, #2
 800338a:	440b      	add	r3, r1
 800338c:	334c      	adds	r3, #76	@ 0x4c
 800338e:	2202      	movs	r2, #2
 8003390:	701a      	strb	r2, [r3, #0]
 8003392:	78fa      	ldrb	r2, [r7, #3]
 8003394:	6879      	ldr	r1, [r7, #4]
 8003396:	4613      	mov	r3, r2
 8003398:	011b      	lsls	r3, r3, #4
 800339a:	1a9b      	subs	r3, r3, r2
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	440b      	add	r3, r1
 80033a0:	3326      	adds	r3, #38	@ 0x26
 80033a2:	781b      	ldrb	r3, [r3, #0]
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00b      	beq.n	80033c0 <HCD_HC_IN_IRQHandler+0x862>
 80033a8:	78fa      	ldrb	r2, [r7, #3]
 80033aa:	6879      	ldr	r1, [r7, #4]
 80033ac:	4613      	mov	r3, r2
 80033ae:	011b      	lsls	r3, r3, #4
 80033b0:	1a9b      	subs	r3, r3, r2
 80033b2:	009b      	lsls	r3, r3, #2
 80033b4:	440b      	add	r3, r1
 80033b6:	3326      	adds	r3, #38	@ 0x26
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	f040 8136 	bne.w	800362c <HCD_HC_IN_IRQHandler+0xace>
 80033c0:	78fb      	ldrb	r3, [r7, #3]
 80033c2:	015a      	lsls	r2, r3, #5
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	4413      	add	r3, r2
 80033c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	60fb      	str	r3, [r7, #12]
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80033d6:	60fb      	str	r3, [r7, #12]
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	78fb      	ldrb	r3, [r7, #3]
 80033e2:	015a      	lsls	r2, r3, #5
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	4413      	add	r3, r2
 80033e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033ec:	461a      	mov	r2, r3
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	e11b      	b.n	800362c <HCD_HC_IN_IRQHandler+0xace>
 80033f4:	78fa      	ldrb	r2, [r7, #3]
 80033f6:	6879      	ldr	r1, [r7, #4]
 80033f8:	4613      	mov	r3, r2
 80033fa:	011b      	lsls	r3, r3, #4
 80033fc:	1a9b      	subs	r3, r3, r2
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	334d      	adds	r3, #77	@ 0x4d
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b03      	cmp	r3, #3
 8003408:	f040 8081 	bne.w	800350e <HCD_HC_IN_IRQHandler+0x9b0>
 800340c:	78fa      	ldrb	r2, [r7, #3]
 800340e:	6879      	ldr	r1, [r7, #4]
 8003410:	4613      	mov	r3, r2
 8003412:	011b      	lsls	r3, r3, #4
 8003414:	1a9b      	subs	r3, r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	440b      	add	r3, r1
 800341a:	334d      	adds	r3, #77	@ 0x4d
 800341c:	2202      	movs	r2, #2
 800341e:	701a      	strb	r2, [r3, #0]
 8003420:	78fa      	ldrb	r2, [r7, #3]
 8003422:	6879      	ldr	r1, [r7, #4]
 8003424:	4613      	mov	r3, r2
 8003426:	011b      	lsls	r3, r3, #4
 8003428:	1a9b      	subs	r3, r3, r2
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	331b      	adds	r3, #27
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	2b01      	cmp	r3, #1
 8003434:	f040 80fa 	bne.w	800362c <HCD_HC_IN_IRQHandler+0xace>
 8003438:	78fa      	ldrb	r2, [r7, #3]
 800343a:	6879      	ldr	r1, [r7, #4]
 800343c:	4613      	mov	r3, r2
 800343e:	011b      	lsls	r3, r3, #4
 8003440:	1a9b      	subs	r3, r3, r2
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	440b      	add	r3, r1
 8003446:	334c      	adds	r3, #76	@ 0x4c
 8003448:	2202      	movs	r2, #2
 800344a:	701a      	strb	r2, [r3, #0]
 800344c:	78fb      	ldrb	r3, [r7, #3]
 800344e:	015a      	lsls	r2, r3, #5
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	4413      	add	r3, r2
 8003454:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	78fa      	ldrb	r2, [r7, #3]
 800345c:	0151      	lsls	r1, r2, #5
 800345e:	693a      	ldr	r2, [r7, #16]
 8003460:	440a      	add	r2, r1
 8003462:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003466:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800346a:	6053      	str	r3, [r2, #4]
 800346c:	78fb      	ldrb	r3, [r7, #3]
 800346e:	015a      	lsls	r2, r3, #5
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	4413      	add	r3, r2
 8003474:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003478:	68db      	ldr	r3, [r3, #12]
 800347a:	78fa      	ldrb	r2, [r7, #3]
 800347c:	0151      	lsls	r1, r2, #5
 800347e:	693a      	ldr	r2, [r7, #16]
 8003480:	440a      	add	r2, r1
 8003482:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003486:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800348a:	60d3      	str	r3, [r2, #12]
 800348c:	78fb      	ldrb	r3, [r7, #3]
 800348e:	015a      	lsls	r2, r3, #5
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	4413      	add	r3, r2
 8003494:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	78fa      	ldrb	r2, [r7, #3]
 800349c:	0151      	lsls	r1, r2, #5
 800349e:	693a      	ldr	r2, [r7, #16]
 80034a0:	440a      	add	r2, r1
 80034a2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80034a6:	f023 0320 	bic.w	r3, r3, #32
 80034aa:	60d3      	str	r3, [r2, #12]
 80034ac:	78fa      	ldrb	r2, [r7, #3]
 80034ae:	6879      	ldr	r1, [r7, #4]
 80034b0:	4613      	mov	r3, r2
 80034b2:	011b      	lsls	r3, r3, #4
 80034b4:	1a9b      	subs	r3, r3, r2
 80034b6:	009b      	lsls	r3, r3, #2
 80034b8:	440b      	add	r3, r1
 80034ba:	3326      	adds	r3, #38	@ 0x26
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00b      	beq.n	80034da <HCD_HC_IN_IRQHandler+0x97c>
 80034c2:	78fa      	ldrb	r2, [r7, #3]
 80034c4:	6879      	ldr	r1, [r7, #4]
 80034c6:	4613      	mov	r3, r2
 80034c8:	011b      	lsls	r3, r3, #4
 80034ca:	1a9b      	subs	r3, r3, r2
 80034cc:	009b      	lsls	r3, r3, #2
 80034ce:	440b      	add	r3, r1
 80034d0:	3326      	adds	r3, #38	@ 0x26
 80034d2:	781b      	ldrb	r3, [r3, #0]
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	f040 80a9 	bne.w	800362c <HCD_HC_IN_IRQHandler+0xace>
 80034da:	78fb      	ldrb	r3, [r7, #3]
 80034dc:	015a      	lsls	r2, r3, #5
 80034de:	693b      	ldr	r3, [r7, #16]
 80034e0:	4413      	add	r3, r2
 80034e2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	60fb      	str	r3, [r7, #12]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80034f0:	60fb      	str	r3, [r7, #12]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80034f8:	60fb      	str	r3, [r7, #12]
 80034fa:	78fb      	ldrb	r3, [r7, #3]
 80034fc:	015a      	lsls	r2, r3, #5
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	4413      	add	r3, r2
 8003502:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003506:	461a      	mov	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	6013      	str	r3, [r2, #0]
 800350c:	e08e      	b.n	800362c <HCD_HC_IN_IRQHandler+0xace>
 800350e:	78fa      	ldrb	r2, [r7, #3]
 8003510:	6879      	ldr	r1, [r7, #4]
 8003512:	4613      	mov	r3, r2
 8003514:	011b      	lsls	r3, r3, #4
 8003516:	1a9b      	subs	r3, r3, r2
 8003518:	009b      	lsls	r3, r3, #2
 800351a:	440b      	add	r3, r1
 800351c:	334d      	adds	r3, #77	@ 0x4d
 800351e:	781b      	ldrb	r3, [r3, #0]
 8003520:	2b04      	cmp	r3, #4
 8003522:	d143      	bne.n	80035ac <HCD_HC_IN_IRQHandler+0xa4e>
 8003524:	78fa      	ldrb	r2, [r7, #3]
 8003526:	6879      	ldr	r1, [r7, #4]
 8003528:	4613      	mov	r3, r2
 800352a:	011b      	lsls	r3, r3, #4
 800352c:	1a9b      	subs	r3, r3, r2
 800352e:	009b      	lsls	r3, r3, #2
 8003530:	440b      	add	r3, r1
 8003532:	334d      	adds	r3, #77	@ 0x4d
 8003534:	2202      	movs	r2, #2
 8003536:	701a      	strb	r2, [r3, #0]
 8003538:	78fa      	ldrb	r2, [r7, #3]
 800353a:	6879      	ldr	r1, [r7, #4]
 800353c:	4613      	mov	r3, r2
 800353e:	011b      	lsls	r3, r3, #4
 8003540:	1a9b      	subs	r3, r3, r2
 8003542:	009b      	lsls	r3, r3, #2
 8003544:	440b      	add	r3, r1
 8003546:	334c      	adds	r3, #76	@ 0x4c
 8003548:	2202      	movs	r2, #2
 800354a:	701a      	strb	r2, [r3, #0]
 800354c:	78fa      	ldrb	r2, [r7, #3]
 800354e:	6879      	ldr	r1, [r7, #4]
 8003550:	4613      	mov	r3, r2
 8003552:	011b      	lsls	r3, r3, #4
 8003554:	1a9b      	subs	r3, r3, r2
 8003556:	009b      	lsls	r3, r3, #2
 8003558:	440b      	add	r3, r1
 800355a:	3326      	adds	r3, #38	@ 0x26
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00a      	beq.n	8003578 <HCD_HC_IN_IRQHandler+0xa1a>
 8003562:	78fa      	ldrb	r2, [r7, #3]
 8003564:	6879      	ldr	r1, [r7, #4]
 8003566:	4613      	mov	r3, r2
 8003568:	011b      	lsls	r3, r3, #4
 800356a:	1a9b      	subs	r3, r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	440b      	add	r3, r1
 8003570:	3326      	adds	r3, #38	@ 0x26
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b02      	cmp	r3, #2
 8003576:	d159      	bne.n	800362c <HCD_HC_IN_IRQHandler+0xace>
 8003578:	78fb      	ldrb	r3, [r7, #3]
 800357a:	015a      	lsls	r2, r3, #5
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	4413      	add	r3, r2
 8003580:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800358e:	60fb      	str	r3, [r7, #12]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003596:	60fb      	str	r3, [r7, #12]
 8003598:	78fb      	ldrb	r3, [r7, #3]
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035a4:	461a      	mov	r2, r3
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6013      	str	r3, [r2, #0]
 80035aa:	e03f      	b.n	800362c <HCD_HC_IN_IRQHandler+0xace>
 80035ac:	78fa      	ldrb	r2, [r7, #3]
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	4613      	mov	r3, r2
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	1a9b      	subs	r3, r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	334d      	adds	r3, #77	@ 0x4d
 80035bc:	781b      	ldrb	r3, [r3, #0]
 80035be:	2b08      	cmp	r3, #8
 80035c0:	d126      	bne.n	8003610 <HCD_HC_IN_IRQHandler+0xab2>
 80035c2:	78fa      	ldrb	r2, [r7, #3]
 80035c4:	6879      	ldr	r1, [r7, #4]
 80035c6:	4613      	mov	r3, r2
 80035c8:	011b      	lsls	r3, r3, #4
 80035ca:	1a9b      	subs	r3, r3, r2
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	440b      	add	r3, r1
 80035d0:	334d      	adds	r3, #77	@ 0x4d
 80035d2:	2202      	movs	r2, #2
 80035d4:	701a      	strb	r2, [r3, #0]
 80035d6:	78fa      	ldrb	r2, [r7, #3]
 80035d8:	6879      	ldr	r1, [r7, #4]
 80035da:	4613      	mov	r3, r2
 80035dc:	011b      	lsls	r3, r3, #4
 80035de:	1a9b      	subs	r3, r3, r2
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	440b      	add	r3, r1
 80035e4:	3344      	adds	r3, #68	@ 0x44
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	1c59      	adds	r1, r3, #1
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	4613      	mov	r3, r2
 80035ee:	011b      	lsls	r3, r3, #4
 80035f0:	1a9b      	subs	r3, r3, r2
 80035f2:	009b      	lsls	r3, r3, #2
 80035f4:	4403      	add	r3, r0
 80035f6:	3344      	adds	r3, #68	@ 0x44
 80035f8:	6019      	str	r1, [r3, #0]
 80035fa:	78fa      	ldrb	r2, [r7, #3]
 80035fc:	6879      	ldr	r1, [r7, #4]
 80035fe:	4613      	mov	r3, r2
 8003600:	011b      	lsls	r3, r3, #4
 8003602:	1a9b      	subs	r3, r3, r2
 8003604:	009b      	lsls	r3, r3, #2
 8003606:	440b      	add	r3, r1
 8003608:	334c      	adds	r3, #76	@ 0x4c
 800360a:	2204      	movs	r2, #4
 800360c:	701a      	strb	r2, [r3, #0]
 800360e:	e00d      	b.n	800362c <HCD_HC_IN_IRQHandler+0xace>
 8003610:	78fa      	ldrb	r2, [r7, #3]
 8003612:	6879      	ldr	r1, [r7, #4]
 8003614:	4613      	mov	r3, r2
 8003616:	011b      	lsls	r3, r3, #4
 8003618:	1a9b      	subs	r3, r3, r2
 800361a:	009b      	lsls	r3, r3, #2
 800361c:	440b      	add	r3, r1
 800361e:	334d      	adds	r3, #77	@ 0x4d
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	2b02      	cmp	r3, #2
 8003624:	f000 8100 	beq.w	8003828 <HCD_HC_IN_IRQHandler+0xcca>
 8003628:	e000      	b.n	800362c <HCD_HC_IN_IRQHandler+0xace>
 800362a:	bf00      	nop
 800362c:	78fa      	ldrb	r2, [r7, #3]
 800362e:	6879      	ldr	r1, [r7, #4]
 8003630:	4613      	mov	r3, r2
 8003632:	011b      	lsls	r3, r3, #4
 8003634:	1a9b      	subs	r3, r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	440b      	add	r3, r1
 800363a:	334c      	adds	r3, #76	@ 0x4c
 800363c:	781a      	ldrb	r2, [r3, #0]
 800363e:	78fb      	ldrb	r3, [r7, #3]
 8003640:	4619      	mov	r1, r3
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f007 fcda 	bl	800affc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003648:	e0ef      	b.n	800382a <HCD_HC_IN_IRQHandler+0xccc>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	78fa      	ldrb	r2, [r7, #3]
 8003650:	4611      	mov	r1, r2
 8003652:	4618      	mov	r0, r3
 8003654:	f004 fbd9 	bl	8007e0a <USB_ReadChInterrupts>
 8003658:	4603      	mov	r3, r0
 800365a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800365e:	2b40      	cmp	r3, #64	@ 0x40
 8003660:	d12f      	bne.n	80036c2 <HCD_HC_IN_IRQHandler+0xb64>
 8003662:	78fb      	ldrb	r3, [r7, #3]
 8003664:	015a      	lsls	r2, r3, #5
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	4413      	add	r3, r2
 800366a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800366e:	461a      	mov	r2, r3
 8003670:	2340      	movs	r3, #64	@ 0x40
 8003672:	6093      	str	r3, [r2, #8]
 8003674:	78fa      	ldrb	r2, [r7, #3]
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	4613      	mov	r3, r2
 800367a:	011b      	lsls	r3, r3, #4
 800367c:	1a9b      	subs	r3, r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	334d      	adds	r3, #77	@ 0x4d
 8003684:	2205      	movs	r2, #5
 8003686:	701a      	strb	r2, [r3, #0]
 8003688:	78fa      	ldrb	r2, [r7, #3]
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	4613      	mov	r3, r2
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	1a9b      	subs	r3, r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	331a      	adds	r3, #26
 8003698:	781b      	ldrb	r3, [r3, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d109      	bne.n	80036b2 <HCD_HC_IN_IRQHandler+0xb54>
 800369e:	78fa      	ldrb	r2, [r7, #3]
 80036a0:	6879      	ldr	r1, [r7, #4]
 80036a2:	4613      	mov	r3, r2
 80036a4:	011b      	lsls	r3, r3, #4
 80036a6:	1a9b      	subs	r3, r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	440b      	add	r3, r1
 80036ac:	3344      	adds	r3, #68	@ 0x44
 80036ae:	2200      	movs	r2, #0
 80036b0:	601a      	str	r2, [r3, #0]
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	78fa      	ldrb	r2, [r7, #3]
 80036b8:	4611      	mov	r1, r2
 80036ba:	4618      	mov	r0, r3
 80036bc:	f005 f949 	bl	8008952 <USB_HC_Halt>
 80036c0:	e0b3      	b.n	800382a <HCD_HC_IN_IRQHandler+0xccc>
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	78fa      	ldrb	r2, [r7, #3]
 80036c8:	4611      	mov	r1, r2
 80036ca:	4618      	mov	r0, r3
 80036cc:	f004 fb9d 	bl	8007e0a <USB_ReadChInterrupts>
 80036d0:	4603      	mov	r3, r0
 80036d2:	f003 0310 	and.w	r3, r3, #16
 80036d6:	2b10      	cmp	r3, #16
 80036d8:	f040 80a7 	bne.w	800382a <HCD_HC_IN_IRQHandler+0xccc>
 80036dc:	78fa      	ldrb	r2, [r7, #3]
 80036de:	6879      	ldr	r1, [r7, #4]
 80036e0:	4613      	mov	r3, r2
 80036e2:	011b      	lsls	r3, r3, #4
 80036e4:	1a9b      	subs	r3, r3, r2
 80036e6:	009b      	lsls	r3, r3, #2
 80036e8:	440b      	add	r3, r1
 80036ea:	3326      	adds	r3, #38	@ 0x26
 80036ec:	781b      	ldrb	r3, [r3, #0]
 80036ee:	2b03      	cmp	r3, #3
 80036f0:	d11b      	bne.n	800372a <HCD_HC_IN_IRQHandler+0xbcc>
 80036f2:	78fa      	ldrb	r2, [r7, #3]
 80036f4:	6879      	ldr	r1, [r7, #4]
 80036f6:	4613      	mov	r3, r2
 80036f8:	011b      	lsls	r3, r3, #4
 80036fa:	1a9b      	subs	r3, r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	440b      	add	r3, r1
 8003700:	3344      	adds	r3, #68	@ 0x44
 8003702:	2200      	movs	r2, #0
 8003704:	601a      	str	r2, [r3, #0]
 8003706:	78fa      	ldrb	r2, [r7, #3]
 8003708:	6879      	ldr	r1, [r7, #4]
 800370a:	4613      	mov	r3, r2
 800370c:	011b      	lsls	r3, r3, #4
 800370e:	1a9b      	subs	r3, r3, r2
 8003710:	009b      	lsls	r3, r3, #2
 8003712:	440b      	add	r3, r1
 8003714:	334d      	adds	r3, #77	@ 0x4d
 8003716:	2204      	movs	r2, #4
 8003718:	701a      	strb	r2, [r3, #0]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	78fa      	ldrb	r2, [r7, #3]
 8003720:	4611      	mov	r1, r2
 8003722:	4618      	mov	r0, r3
 8003724:	f005 f915 	bl	8008952 <USB_HC_Halt>
 8003728:	e03f      	b.n	80037aa <HCD_HC_IN_IRQHandler+0xc4c>
 800372a:	78fa      	ldrb	r2, [r7, #3]
 800372c:	6879      	ldr	r1, [r7, #4]
 800372e:	4613      	mov	r3, r2
 8003730:	011b      	lsls	r3, r3, #4
 8003732:	1a9b      	subs	r3, r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	440b      	add	r3, r1
 8003738:	3326      	adds	r3, #38	@ 0x26
 800373a:	781b      	ldrb	r3, [r3, #0]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d00a      	beq.n	8003756 <HCD_HC_IN_IRQHandler+0xbf8>
 8003740:	78fa      	ldrb	r2, [r7, #3]
 8003742:	6879      	ldr	r1, [r7, #4]
 8003744:	4613      	mov	r3, r2
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	1a9b      	subs	r3, r3, r2
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	440b      	add	r3, r1
 800374e:	3326      	adds	r3, #38	@ 0x26
 8003750:	781b      	ldrb	r3, [r3, #0]
 8003752:	2b02      	cmp	r3, #2
 8003754:	d129      	bne.n	80037aa <HCD_HC_IN_IRQHandler+0xc4c>
 8003756:	78fa      	ldrb	r2, [r7, #3]
 8003758:	6879      	ldr	r1, [r7, #4]
 800375a:	4613      	mov	r3, r2
 800375c:	011b      	lsls	r3, r3, #4
 800375e:	1a9b      	subs	r3, r3, r2
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	440b      	add	r3, r1
 8003764:	3344      	adds	r3, #68	@ 0x44
 8003766:	2200      	movs	r2, #0
 8003768:	601a      	str	r2, [r3, #0]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	799b      	ldrb	r3, [r3, #6]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d00a      	beq.n	8003788 <HCD_HC_IN_IRQHandler+0xc2a>
 8003772:	78fa      	ldrb	r2, [r7, #3]
 8003774:	6879      	ldr	r1, [r7, #4]
 8003776:	4613      	mov	r3, r2
 8003778:	011b      	lsls	r3, r3, #4
 800377a:	1a9b      	subs	r3, r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	440b      	add	r3, r1
 8003780:	331b      	adds	r3, #27
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d110      	bne.n	80037aa <HCD_HC_IN_IRQHandler+0xc4c>
 8003788:	78fa      	ldrb	r2, [r7, #3]
 800378a:	6879      	ldr	r1, [r7, #4]
 800378c:	4613      	mov	r3, r2
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	1a9b      	subs	r3, r3, r2
 8003792:	009b      	lsls	r3, r3, #2
 8003794:	440b      	add	r3, r1
 8003796:	334d      	adds	r3, #77	@ 0x4d
 8003798:	2204      	movs	r2, #4
 800379a:	701a      	strb	r2, [r3, #0]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	78fa      	ldrb	r2, [r7, #3]
 80037a2:	4611      	mov	r1, r2
 80037a4:	4618      	mov	r0, r3
 80037a6:	f005 f8d4 	bl	8008952 <USB_HC_Halt>
 80037aa:	78fa      	ldrb	r2, [r7, #3]
 80037ac:	6879      	ldr	r1, [r7, #4]
 80037ae:	4613      	mov	r3, r2
 80037b0:	011b      	lsls	r3, r3, #4
 80037b2:	1a9b      	subs	r3, r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	440b      	add	r3, r1
 80037b8:	331b      	adds	r3, #27
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d129      	bne.n	8003814 <HCD_HC_IN_IRQHandler+0xcb6>
 80037c0:	78fa      	ldrb	r2, [r7, #3]
 80037c2:	6879      	ldr	r1, [r7, #4]
 80037c4:	4613      	mov	r3, r2
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	1a9b      	subs	r3, r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	331b      	adds	r3, #27
 80037d0:	2200      	movs	r2, #0
 80037d2:	701a      	strb	r2, [r3, #0]
 80037d4:	78fb      	ldrb	r3, [r7, #3]
 80037d6:	015a      	lsls	r2, r3, #5
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	4413      	add	r3, r2
 80037dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	78fa      	ldrb	r2, [r7, #3]
 80037e4:	0151      	lsls	r1, r2, #5
 80037e6:	693a      	ldr	r2, [r7, #16]
 80037e8:	440a      	add	r2, r1
 80037ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80037ee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037f2:	6053      	str	r3, [r2, #4]
 80037f4:	78fb      	ldrb	r3, [r7, #3]
 80037f6:	015a      	lsls	r2, r3, #5
 80037f8:	693b      	ldr	r3, [r7, #16]
 80037fa:	4413      	add	r3, r2
 80037fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	78fa      	ldrb	r2, [r7, #3]
 8003804:	0151      	lsls	r1, r2, #5
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	440a      	add	r2, r1
 800380a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800380e:	f043 0320 	orr.w	r3, r3, #32
 8003812:	60d3      	str	r3, [r2, #12]
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	015a      	lsls	r2, r3, #5
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	4413      	add	r3, r2
 800381c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003820:	461a      	mov	r2, r3
 8003822:	2310      	movs	r3, #16
 8003824:	6093      	str	r3, [r2, #8]
 8003826:	e000      	b.n	800382a <HCD_HC_IN_IRQHandler+0xccc>
 8003828:	bf00      	nop
 800382a:	3718      	adds	r7, #24
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}

08003830 <HCD_HC_OUT_IRQHandler>:
 8003830:	b580      	push	{r7, lr}
 8003832:	b086      	sub	sp, #24
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	460b      	mov	r3, r1
 800383a:	70fb      	strb	r3, [r7, #3]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	617b      	str	r3, [r7, #20]
 8003842:	697b      	ldr	r3, [r7, #20]
 8003844:	613b      	str	r3, [r7, #16]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	78fa      	ldrb	r2, [r7, #3]
 800384c:	4611      	mov	r1, r2
 800384e:	4618      	mov	r0, r3
 8003850:	f004 fadb 	bl	8007e0a <USB_ReadChInterrupts>
 8003854:	4603      	mov	r3, r0
 8003856:	f003 0304 	and.w	r3, r3, #4
 800385a:	2b04      	cmp	r3, #4
 800385c:	d11b      	bne.n	8003896 <HCD_HC_OUT_IRQHandler+0x66>
 800385e:	78fb      	ldrb	r3, [r7, #3]
 8003860:	015a      	lsls	r2, r3, #5
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	4413      	add	r3, r2
 8003866:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800386a:	461a      	mov	r2, r3
 800386c:	2304      	movs	r3, #4
 800386e:	6093      	str	r3, [r2, #8]
 8003870:	78fa      	ldrb	r2, [r7, #3]
 8003872:	6879      	ldr	r1, [r7, #4]
 8003874:	4613      	mov	r3, r2
 8003876:	011b      	lsls	r3, r3, #4
 8003878:	1a9b      	subs	r3, r3, r2
 800387a:	009b      	lsls	r3, r3, #2
 800387c:	440b      	add	r3, r1
 800387e:	334d      	adds	r3, #77	@ 0x4d
 8003880:	2207      	movs	r2, #7
 8003882:	701a      	strb	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	78fa      	ldrb	r2, [r7, #3]
 800388a:	4611      	mov	r1, r2
 800388c:	4618      	mov	r0, r3
 800388e:	f005 f860 	bl	8008952 <USB_HC_Halt>
 8003892:	f000 bc89 	b.w	80041a8 <HCD_HC_OUT_IRQHandler+0x978>
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	78fa      	ldrb	r2, [r7, #3]
 800389c:	4611      	mov	r1, r2
 800389e:	4618      	mov	r0, r3
 80038a0:	f004 fab3 	bl	8007e0a <USB_ReadChInterrupts>
 80038a4:	4603      	mov	r3, r0
 80038a6:	f003 0320 	and.w	r3, r3, #32
 80038aa:	2b20      	cmp	r3, #32
 80038ac:	f040 8082 	bne.w	80039b4 <HCD_HC_OUT_IRQHandler+0x184>
 80038b0:	78fb      	ldrb	r3, [r7, #3]
 80038b2:	015a      	lsls	r2, r3, #5
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	4413      	add	r3, r2
 80038b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038bc:	461a      	mov	r2, r3
 80038be:	2320      	movs	r3, #32
 80038c0:	6093      	str	r3, [r2, #8]
 80038c2:	78fa      	ldrb	r2, [r7, #3]
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	4613      	mov	r3, r2
 80038c8:	011b      	lsls	r3, r3, #4
 80038ca:	1a9b      	subs	r3, r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	440b      	add	r3, r1
 80038d0:	3319      	adds	r3, #25
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b01      	cmp	r3, #1
 80038d6:	d124      	bne.n	8003922 <HCD_HC_OUT_IRQHandler+0xf2>
 80038d8:	78fa      	ldrb	r2, [r7, #3]
 80038da:	6879      	ldr	r1, [r7, #4]
 80038dc:	4613      	mov	r3, r2
 80038de:	011b      	lsls	r3, r3, #4
 80038e0:	1a9b      	subs	r3, r3, r2
 80038e2:	009b      	lsls	r3, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	3319      	adds	r3, #25
 80038e8:	2200      	movs	r2, #0
 80038ea:	701a      	strb	r2, [r3, #0]
 80038ec:	78fa      	ldrb	r2, [r7, #3]
 80038ee:	6879      	ldr	r1, [r7, #4]
 80038f0:	4613      	mov	r3, r2
 80038f2:	011b      	lsls	r3, r3, #4
 80038f4:	1a9b      	subs	r3, r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	440b      	add	r3, r1
 80038fa:	334c      	adds	r3, #76	@ 0x4c
 80038fc:	2202      	movs	r2, #2
 80038fe:	701a      	strb	r2, [r3, #0]
 8003900:	78fa      	ldrb	r2, [r7, #3]
 8003902:	6879      	ldr	r1, [r7, #4]
 8003904:	4613      	mov	r3, r2
 8003906:	011b      	lsls	r3, r3, #4
 8003908:	1a9b      	subs	r3, r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	440b      	add	r3, r1
 800390e:	334d      	adds	r3, #77	@ 0x4d
 8003910:	2203      	movs	r2, #3
 8003912:	701a      	strb	r2, [r3, #0]
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	78fa      	ldrb	r2, [r7, #3]
 800391a:	4611      	mov	r1, r2
 800391c:	4618      	mov	r0, r3
 800391e:	f005 f818 	bl	8008952 <USB_HC_Halt>
 8003922:	78fa      	ldrb	r2, [r7, #3]
 8003924:	6879      	ldr	r1, [r7, #4]
 8003926:	4613      	mov	r3, r2
 8003928:	011b      	lsls	r3, r3, #4
 800392a:	1a9b      	subs	r3, r3, r2
 800392c:	009b      	lsls	r3, r3, #2
 800392e:	440b      	add	r3, r1
 8003930:	331a      	adds	r3, #26
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2b01      	cmp	r3, #1
 8003936:	f040 8437 	bne.w	80041a8 <HCD_HC_OUT_IRQHandler+0x978>
 800393a:	78fa      	ldrb	r2, [r7, #3]
 800393c:	6879      	ldr	r1, [r7, #4]
 800393e:	4613      	mov	r3, r2
 8003940:	011b      	lsls	r3, r3, #4
 8003942:	1a9b      	subs	r3, r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	440b      	add	r3, r1
 8003948:	331b      	adds	r3, #27
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	f040 842b 	bne.w	80041a8 <HCD_HC_OUT_IRQHandler+0x978>
 8003952:	78fa      	ldrb	r2, [r7, #3]
 8003954:	6879      	ldr	r1, [r7, #4]
 8003956:	4613      	mov	r3, r2
 8003958:	011b      	lsls	r3, r3, #4
 800395a:	1a9b      	subs	r3, r3, r2
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	440b      	add	r3, r1
 8003960:	3326      	adds	r3, #38	@ 0x26
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d009      	beq.n	800397c <HCD_HC_OUT_IRQHandler+0x14c>
 8003968:	78fa      	ldrb	r2, [r7, #3]
 800396a:	6879      	ldr	r1, [r7, #4]
 800396c:	4613      	mov	r3, r2
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	1a9b      	subs	r3, r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	440b      	add	r3, r1
 8003976:	331b      	adds	r3, #27
 8003978:	2201      	movs	r2, #1
 800397a:	701a      	strb	r2, [r3, #0]
 800397c:	78fa      	ldrb	r2, [r7, #3]
 800397e:	6879      	ldr	r1, [r7, #4]
 8003980:	4613      	mov	r3, r2
 8003982:	011b      	lsls	r3, r3, #4
 8003984:	1a9b      	subs	r3, r3, r2
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	334d      	adds	r3, #77	@ 0x4d
 800398c:	2203      	movs	r2, #3
 800398e:	701a      	strb	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	78fa      	ldrb	r2, [r7, #3]
 8003996:	4611      	mov	r1, r2
 8003998:	4618      	mov	r0, r3
 800399a:	f004 ffda 	bl	8008952 <USB_HC_Halt>
 800399e:	78fa      	ldrb	r2, [r7, #3]
 80039a0:	6879      	ldr	r1, [r7, #4]
 80039a2:	4613      	mov	r3, r2
 80039a4:	011b      	lsls	r3, r3, #4
 80039a6:	1a9b      	subs	r3, r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	440b      	add	r3, r1
 80039ac:	3344      	adds	r3, #68	@ 0x44
 80039ae:	2200      	movs	r2, #0
 80039b0:	601a      	str	r2, [r3, #0]
 80039b2:	e3f9      	b.n	80041a8 <HCD_HC_OUT_IRQHandler+0x978>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	78fa      	ldrb	r2, [r7, #3]
 80039ba:	4611      	mov	r1, r2
 80039bc:	4618      	mov	r0, r3
 80039be:	f004 fa24 	bl	8007e0a <USB_ReadChInterrupts>
 80039c2:	4603      	mov	r3, r0
 80039c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80039c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80039cc:	d111      	bne.n	80039f2 <HCD_HC_OUT_IRQHandler+0x1c2>
 80039ce:	78fb      	ldrb	r3, [r7, #3]
 80039d0:	015a      	lsls	r2, r3, #5
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	4413      	add	r3, r2
 80039d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039da:	461a      	mov	r2, r3
 80039dc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80039e0:	6093      	str	r3, [r2, #8]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	78fa      	ldrb	r2, [r7, #3]
 80039e8:	4611      	mov	r1, r2
 80039ea:	4618      	mov	r0, r3
 80039ec:	f004 ffb1 	bl	8008952 <USB_HC_Halt>
 80039f0:	e3da      	b.n	80041a8 <HCD_HC_OUT_IRQHandler+0x978>
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	78fa      	ldrb	r2, [r7, #3]
 80039f8:	4611      	mov	r1, r2
 80039fa:	4618      	mov	r0, r3
 80039fc:	f004 fa05 	bl	8007e0a <USB_ReadChInterrupts>
 8003a00:	4603      	mov	r3, r0
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d168      	bne.n	8003adc <HCD_HC_OUT_IRQHandler+0x2ac>
 8003a0a:	78fa      	ldrb	r2, [r7, #3]
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	1a9b      	subs	r3, r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	440b      	add	r3, r1
 8003a18:	3344      	adds	r3, #68	@ 0x44
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	78fa      	ldrb	r2, [r7, #3]
 8003a24:	4611      	mov	r1, r2
 8003a26:	4618      	mov	r0, r3
 8003a28:	f004 f9ef 	bl	8007e0a <USB_ReadChInterrupts>
 8003a2c:	4603      	mov	r3, r0
 8003a2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a32:	2b40      	cmp	r3, #64	@ 0x40
 8003a34:	d112      	bne.n	8003a5c <HCD_HC_OUT_IRQHandler+0x22c>
 8003a36:	78fa      	ldrb	r2, [r7, #3]
 8003a38:	6879      	ldr	r1, [r7, #4]
 8003a3a:	4613      	mov	r3, r2
 8003a3c:	011b      	lsls	r3, r3, #4
 8003a3e:	1a9b      	subs	r3, r3, r2
 8003a40:	009b      	lsls	r3, r3, #2
 8003a42:	440b      	add	r3, r1
 8003a44:	3319      	adds	r3, #25
 8003a46:	2201      	movs	r2, #1
 8003a48:	701a      	strb	r2, [r3, #0]
 8003a4a:	78fb      	ldrb	r3, [r7, #3]
 8003a4c:	015a      	lsls	r2, r3, #5
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	4413      	add	r3, r2
 8003a52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a56:	461a      	mov	r2, r3
 8003a58:	2340      	movs	r3, #64	@ 0x40
 8003a5a:	6093      	str	r3, [r2, #8]
 8003a5c:	78fa      	ldrb	r2, [r7, #3]
 8003a5e:	6879      	ldr	r1, [r7, #4]
 8003a60:	4613      	mov	r3, r2
 8003a62:	011b      	lsls	r3, r3, #4
 8003a64:	1a9b      	subs	r3, r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	440b      	add	r3, r1
 8003a6a:	331b      	adds	r3, #27
 8003a6c:	781b      	ldrb	r3, [r3, #0]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d019      	beq.n	8003aa6 <HCD_HC_OUT_IRQHandler+0x276>
 8003a72:	78fa      	ldrb	r2, [r7, #3]
 8003a74:	6879      	ldr	r1, [r7, #4]
 8003a76:	4613      	mov	r3, r2
 8003a78:	011b      	lsls	r3, r3, #4
 8003a7a:	1a9b      	subs	r3, r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	440b      	add	r3, r1
 8003a80:	331b      	adds	r3, #27
 8003a82:	2200      	movs	r2, #0
 8003a84:	701a      	strb	r2, [r3, #0]
 8003a86:	78fb      	ldrb	r3, [r7, #3]
 8003a88:	015a      	lsls	r2, r3, #5
 8003a8a:	693b      	ldr	r3, [r7, #16]
 8003a8c:	4413      	add	r3, r2
 8003a8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	78fa      	ldrb	r2, [r7, #3]
 8003a96:	0151      	lsls	r1, r2, #5
 8003a98:	693a      	ldr	r2, [r7, #16]
 8003a9a:	440a      	add	r2, r1
 8003a9c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003aa0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003aa4:	6053      	str	r3, [r2, #4]
 8003aa6:	78fb      	ldrb	r3, [r7, #3]
 8003aa8:	015a      	lsls	r2, r3, #5
 8003aaa:	693b      	ldr	r3, [r7, #16]
 8003aac:	4413      	add	r3, r2
 8003aae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	6093      	str	r3, [r2, #8]
 8003ab8:	78fa      	ldrb	r2, [r7, #3]
 8003aba:	6879      	ldr	r1, [r7, #4]
 8003abc:	4613      	mov	r3, r2
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	1a9b      	subs	r3, r3, r2
 8003ac2:	009b      	lsls	r3, r3, #2
 8003ac4:	440b      	add	r3, r1
 8003ac6:	334d      	adds	r3, #77	@ 0x4d
 8003ac8:	2201      	movs	r2, #1
 8003aca:	701a      	strb	r2, [r3, #0]
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	78fa      	ldrb	r2, [r7, #3]
 8003ad2:	4611      	mov	r1, r2
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f004 ff3c 	bl	8008952 <USB_HC_Halt>
 8003ada:	e365      	b.n	80041a8 <HCD_HC_OUT_IRQHandler+0x978>
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	78fa      	ldrb	r2, [r7, #3]
 8003ae2:	4611      	mov	r1, r2
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	f004 f990 	bl	8007e0a <USB_ReadChInterrupts>
 8003aea:	4603      	mov	r3, r0
 8003aec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003af0:	2b40      	cmp	r3, #64	@ 0x40
 8003af2:	d139      	bne.n	8003b68 <HCD_HC_OUT_IRQHandler+0x338>
 8003af4:	78fa      	ldrb	r2, [r7, #3]
 8003af6:	6879      	ldr	r1, [r7, #4]
 8003af8:	4613      	mov	r3, r2
 8003afa:	011b      	lsls	r3, r3, #4
 8003afc:	1a9b      	subs	r3, r3, r2
 8003afe:	009b      	lsls	r3, r3, #2
 8003b00:	440b      	add	r3, r1
 8003b02:	334d      	adds	r3, #77	@ 0x4d
 8003b04:	2205      	movs	r2, #5
 8003b06:	701a      	strb	r2, [r3, #0]
 8003b08:	78fa      	ldrb	r2, [r7, #3]
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	4613      	mov	r3, r2
 8003b0e:	011b      	lsls	r3, r3, #4
 8003b10:	1a9b      	subs	r3, r3, r2
 8003b12:	009b      	lsls	r3, r3, #2
 8003b14:	440b      	add	r3, r1
 8003b16:	331a      	adds	r3, #26
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d109      	bne.n	8003b32 <HCD_HC_OUT_IRQHandler+0x302>
 8003b1e:	78fa      	ldrb	r2, [r7, #3]
 8003b20:	6879      	ldr	r1, [r7, #4]
 8003b22:	4613      	mov	r3, r2
 8003b24:	011b      	lsls	r3, r3, #4
 8003b26:	1a9b      	subs	r3, r3, r2
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	440b      	add	r3, r1
 8003b2c:	3319      	adds	r3, #25
 8003b2e:	2201      	movs	r2, #1
 8003b30:	701a      	strb	r2, [r3, #0]
 8003b32:	78fa      	ldrb	r2, [r7, #3]
 8003b34:	6879      	ldr	r1, [r7, #4]
 8003b36:	4613      	mov	r3, r2
 8003b38:	011b      	lsls	r3, r3, #4
 8003b3a:	1a9b      	subs	r3, r3, r2
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	440b      	add	r3, r1
 8003b40:	3344      	adds	r3, #68	@ 0x44
 8003b42:	2200      	movs	r2, #0
 8003b44:	601a      	str	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	78fa      	ldrb	r2, [r7, #3]
 8003b4c:	4611      	mov	r1, r2
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f004 feff 	bl	8008952 <USB_HC_Halt>
 8003b54:	78fb      	ldrb	r3, [r7, #3]
 8003b56:	015a      	lsls	r2, r3, #5
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	4413      	add	r3, r2
 8003b5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b60:	461a      	mov	r2, r3
 8003b62:	2340      	movs	r3, #64	@ 0x40
 8003b64:	6093      	str	r3, [r2, #8]
 8003b66:	e31f      	b.n	80041a8 <HCD_HC_OUT_IRQHandler+0x978>
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	78fa      	ldrb	r2, [r7, #3]
 8003b6e:	4611      	mov	r1, r2
 8003b70:	4618      	mov	r0, r3
 8003b72:	f004 f94a 	bl	8007e0a <USB_ReadChInterrupts>
 8003b76:	4603      	mov	r3, r0
 8003b78:	f003 0308 	and.w	r3, r3, #8
 8003b7c:	2b08      	cmp	r3, #8
 8003b7e:	d11a      	bne.n	8003bb6 <HCD_HC_OUT_IRQHandler+0x386>
 8003b80:	78fb      	ldrb	r3, [r7, #3]
 8003b82:	015a      	lsls	r2, r3, #5
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	4413      	add	r3, r2
 8003b88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	2308      	movs	r3, #8
 8003b90:	6093      	str	r3, [r2, #8]
 8003b92:	78fa      	ldrb	r2, [r7, #3]
 8003b94:	6879      	ldr	r1, [r7, #4]
 8003b96:	4613      	mov	r3, r2
 8003b98:	011b      	lsls	r3, r3, #4
 8003b9a:	1a9b      	subs	r3, r3, r2
 8003b9c:	009b      	lsls	r3, r3, #2
 8003b9e:	440b      	add	r3, r1
 8003ba0:	334d      	adds	r3, #77	@ 0x4d
 8003ba2:	2206      	movs	r2, #6
 8003ba4:	701a      	strb	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	78fa      	ldrb	r2, [r7, #3]
 8003bac:	4611      	mov	r1, r2
 8003bae:	4618      	mov	r0, r3
 8003bb0:	f004 fecf 	bl	8008952 <USB_HC_Halt>
 8003bb4:	e2f8      	b.n	80041a8 <HCD_HC_OUT_IRQHandler+0x978>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	78fa      	ldrb	r2, [r7, #3]
 8003bbc:	4611      	mov	r1, r2
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f004 f923 	bl	8007e0a <USB_ReadChInterrupts>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	f003 0310 	and.w	r3, r3, #16
 8003bca:	2b10      	cmp	r3, #16
 8003bcc:	d144      	bne.n	8003c58 <HCD_HC_OUT_IRQHandler+0x428>
 8003bce:	78fa      	ldrb	r2, [r7, #3]
 8003bd0:	6879      	ldr	r1, [r7, #4]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	1a9b      	subs	r3, r3, r2
 8003bd8:	009b      	lsls	r3, r3, #2
 8003bda:	440b      	add	r3, r1
 8003bdc:	3344      	adds	r3, #68	@ 0x44
 8003bde:	2200      	movs	r2, #0
 8003be0:	601a      	str	r2, [r3, #0]
 8003be2:	78fa      	ldrb	r2, [r7, #3]
 8003be4:	6879      	ldr	r1, [r7, #4]
 8003be6:	4613      	mov	r3, r2
 8003be8:	011b      	lsls	r3, r3, #4
 8003bea:	1a9b      	subs	r3, r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	440b      	add	r3, r1
 8003bf0:	334d      	adds	r3, #77	@ 0x4d
 8003bf2:	2204      	movs	r2, #4
 8003bf4:	701a      	strb	r2, [r3, #0]
 8003bf6:	78fa      	ldrb	r2, [r7, #3]
 8003bf8:	6879      	ldr	r1, [r7, #4]
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	011b      	lsls	r3, r3, #4
 8003bfe:	1a9b      	subs	r3, r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	440b      	add	r3, r1
 8003c04:	3319      	adds	r3, #25
 8003c06:	781b      	ldrb	r3, [r3, #0]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d114      	bne.n	8003c36 <HCD_HC_OUT_IRQHandler+0x406>
 8003c0c:	78fa      	ldrb	r2, [r7, #3]
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	4613      	mov	r3, r2
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	1a9b      	subs	r3, r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	3318      	adds	r3, #24
 8003c1c:	781b      	ldrb	r3, [r3, #0]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d109      	bne.n	8003c36 <HCD_HC_OUT_IRQHandler+0x406>
 8003c22:	78fa      	ldrb	r2, [r7, #3]
 8003c24:	6879      	ldr	r1, [r7, #4]
 8003c26:	4613      	mov	r3, r2
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	1a9b      	subs	r3, r3, r2
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	440b      	add	r3, r1
 8003c30:	3319      	adds	r3, #25
 8003c32:	2201      	movs	r2, #1
 8003c34:	701a      	strb	r2, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	78fa      	ldrb	r2, [r7, #3]
 8003c3c:	4611      	mov	r1, r2
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f004 fe87 	bl	8008952 <USB_HC_Halt>
 8003c44:	78fb      	ldrb	r3, [r7, #3]
 8003c46:	015a      	lsls	r2, r3, #5
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003c50:	461a      	mov	r2, r3
 8003c52:	2310      	movs	r3, #16
 8003c54:	6093      	str	r3, [r2, #8]
 8003c56:	e2a7      	b.n	80041a8 <HCD_HC_OUT_IRQHandler+0x978>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	78fa      	ldrb	r2, [r7, #3]
 8003c5e:	4611      	mov	r1, r2
 8003c60:	4618      	mov	r0, r3
 8003c62:	f004 f8d2 	bl	8007e0a <USB_ReadChInterrupts>
 8003c66:	4603      	mov	r3, r0
 8003c68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c6c:	2b80      	cmp	r3, #128	@ 0x80
 8003c6e:	f040 8083 	bne.w	8003d78 <HCD_HC_OUT_IRQHandler+0x548>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	799b      	ldrb	r3, [r3, #6]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d111      	bne.n	8003c9e <HCD_HC_OUT_IRQHandler+0x46e>
 8003c7a:	78fa      	ldrb	r2, [r7, #3]
 8003c7c:	6879      	ldr	r1, [r7, #4]
 8003c7e:	4613      	mov	r3, r2
 8003c80:	011b      	lsls	r3, r3, #4
 8003c82:	1a9b      	subs	r3, r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	440b      	add	r3, r1
 8003c88:	334d      	adds	r3, #77	@ 0x4d
 8003c8a:	2207      	movs	r2, #7
 8003c8c:	701a      	strb	r2, [r3, #0]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	78fa      	ldrb	r2, [r7, #3]
 8003c94:	4611      	mov	r1, r2
 8003c96:	4618      	mov	r0, r3
 8003c98:	f004 fe5b 	bl	8008952 <USB_HC_Halt>
 8003c9c:	e062      	b.n	8003d64 <HCD_HC_OUT_IRQHandler+0x534>
 8003c9e:	78fa      	ldrb	r2, [r7, #3]
 8003ca0:	6879      	ldr	r1, [r7, #4]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	011b      	lsls	r3, r3, #4
 8003ca6:	1a9b      	subs	r3, r3, r2
 8003ca8:	009b      	lsls	r3, r3, #2
 8003caa:	440b      	add	r3, r1
 8003cac:	3344      	adds	r3, #68	@ 0x44
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	1c59      	adds	r1, r3, #1
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	4613      	mov	r3, r2
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	1a9b      	subs	r3, r3, r2
 8003cba:	009b      	lsls	r3, r3, #2
 8003cbc:	4403      	add	r3, r0
 8003cbe:	3344      	adds	r3, #68	@ 0x44
 8003cc0:	6019      	str	r1, [r3, #0]
 8003cc2:	78fa      	ldrb	r2, [r7, #3]
 8003cc4:	6879      	ldr	r1, [r7, #4]
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	011b      	lsls	r3, r3, #4
 8003cca:	1a9b      	subs	r3, r3, r2
 8003ccc:	009b      	lsls	r3, r3, #2
 8003cce:	440b      	add	r3, r1
 8003cd0:	3344      	adds	r3, #68	@ 0x44
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	2b02      	cmp	r3, #2
 8003cd6:	d922      	bls.n	8003d1e <HCD_HC_OUT_IRQHandler+0x4ee>
 8003cd8:	78fa      	ldrb	r2, [r7, #3]
 8003cda:	6879      	ldr	r1, [r7, #4]
 8003cdc:	4613      	mov	r3, r2
 8003cde:	011b      	lsls	r3, r3, #4
 8003ce0:	1a9b      	subs	r3, r3, r2
 8003ce2:	009b      	lsls	r3, r3, #2
 8003ce4:	440b      	add	r3, r1
 8003ce6:	3344      	adds	r3, #68	@ 0x44
 8003ce8:	2200      	movs	r2, #0
 8003cea:	601a      	str	r2, [r3, #0]
 8003cec:	78fa      	ldrb	r2, [r7, #3]
 8003cee:	6879      	ldr	r1, [r7, #4]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	011b      	lsls	r3, r3, #4
 8003cf4:	1a9b      	subs	r3, r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	334c      	adds	r3, #76	@ 0x4c
 8003cfc:	2204      	movs	r2, #4
 8003cfe:	701a      	strb	r2, [r3, #0]
 8003d00:	78fa      	ldrb	r2, [r7, #3]
 8003d02:	6879      	ldr	r1, [r7, #4]
 8003d04:	4613      	mov	r3, r2
 8003d06:	011b      	lsls	r3, r3, #4
 8003d08:	1a9b      	subs	r3, r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	334c      	adds	r3, #76	@ 0x4c
 8003d10:	781a      	ldrb	r2, [r3, #0]
 8003d12:	78fb      	ldrb	r3, [r7, #3]
 8003d14:	4619      	mov	r1, r3
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f007 f970 	bl	800affc <HAL_HCD_HC_NotifyURBChange_Callback>
 8003d1c:	e022      	b.n	8003d64 <HCD_HC_OUT_IRQHandler+0x534>
 8003d1e:	78fa      	ldrb	r2, [r7, #3]
 8003d20:	6879      	ldr	r1, [r7, #4]
 8003d22:	4613      	mov	r3, r2
 8003d24:	011b      	lsls	r3, r3, #4
 8003d26:	1a9b      	subs	r3, r3, r2
 8003d28:	009b      	lsls	r3, r3, #2
 8003d2a:	440b      	add	r3, r1
 8003d2c:	334c      	adds	r3, #76	@ 0x4c
 8003d2e:	2202      	movs	r2, #2
 8003d30:	701a      	strb	r2, [r3, #0]
 8003d32:	78fb      	ldrb	r3, [r7, #3]
 8003d34:	015a      	lsls	r2, r3, #5
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	4413      	add	r3, r2
 8003d3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	60fb      	str	r3, [r7, #12]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d48:	60fb      	str	r3, [r7, #12]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003d50:	60fb      	str	r3, [r7, #12]
 8003d52:	78fb      	ldrb	r3, [r7, #3]
 8003d54:	015a      	lsls	r2, r3, #5
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	4413      	add	r3, r2
 8003d5a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d5e:	461a      	mov	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6013      	str	r3, [r2, #0]
 8003d64:	78fb      	ldrb	r3, [r7, #3]
 8003d66:	015a      	lsls	r2, r3, #5
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	4413      	add	r3, r2
 8003d6c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d70:	461a      	mov	r2, r3
 8003d72:	2380      	movs	r3, #128	@ 0x80
 8003d74:	6093      	str	r3, [r2, #8]
 8003d76:	e217      	b.n	80041a8 <HCD_HC_OUT_IRQHandler+0x978>
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	78fa      	ldrb	r2, [r7, #3]
 8003d7e:	4611      	mov	r1, r2
 8003d80:	4618      	mov	r0, r3
 8003d82:	f004 f842 	bl	8007e0a <USB_ReadChInterrupts>
 8003d86:	4603      	mov	r3, r0
 8003d88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d90:	d11b      	bne.n	8003dca <HCD_HC_OUT_IRQHandler+0x59a>
 8003d92:	78fa      	ldrb	r2, [r7, #3]
 8003d94:	6879      	ldr	r1, [r7, #4]
 8003d96:	4613      	mov	r3, r2
 8003d98:	011b      	lsls	r3, r3, #4
 8003d9a:	1a9b      	subs	r3, r3, r2
 8003d9c:	009b      	lsls	r3, r3, #2
 8003d9e:	440b      	add	r3, r1
 8003da0:	334d      	adds	r3, #77	@ 0x4d
 8003da2:	2209      	movs	r2, #9
 8003da4:	701a      	strb	r2, [r3, #0]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	78fa      	ldrb	r2, [r7, #3]
 8003dac:	4611      	mov	r1, r2
 8003dae:	4618      	mov	r0, r3
 8003db0:	f004 fdcf 	bl	8008952 <USB_HC_Halt>
 8003db4:	78fb      	ldrb	r3, [r7, #3]
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003dc0:	461a      	mov	r2, r3
 8003dc2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003dc6:	6093      	str	r3, [r2, #8]
 8003dc8:	e1ee      	b.n	80041a8 <HCD_HC_OUT_IRQHandler+0x978>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	78fa      	ldrb	r2, [r7, #3]
 8003dd0:	4611      	mov	r1, r2
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	f004 f819 	bl	8007e0a <USB_ReadChInterrupts>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	f003 0302 	and.w	r3, r3, #2
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	f040 81df 	bne.w	80041a2 <HCD_HC_OUT_IRQHandler+0x972>
 8003de4:	78fb      	ldrb	r3, [r7, #3]
 8003de6:	015a      	lsls	r2, r3, #5
 8003de8:	693b      	ldr	r3, [r7, #16]
 8003dea:	4413      	add	r3, r2
 8003dec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003df0:	461a      	mov	r2, r3
 8003df2:	2302      	movs	r3, #2
 8003df4:	6093      	str	r3, [r2, #8]
 8003df6:	78fa      	ldrb	r2, [r7, #3]
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	1a9b      	subs	r3, r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	440b      	add	r3, r1
 8003e04:	334d      	adds	r3, #77	@ 0x4d
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	f040 8093 	bne.w	8003f34 <HCD_HC_OUT_IRQHandler+0x704>
 8003e0e:	78fa      	ldrb	r2, [r7, #3]
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	4613      	mov	r3, r2
 8003e14:	011b      	lsls	r3, r3, #4
 8003e16:	1a9b      	subs	r3, r3, r2
 8003e18:	009b      	lsls	r3, r3, #2
 8003e1a:	440b      	add	r3, r1
 8003e1c:	334d      	adds	r3, #77	@ 0x4d
 8003e1e:	2202      	movs	r2, #2
 8003e20:	701a      	strb	r2, [r3, #0]
 8003e22:	78fa      	ldrb	r2, [r7, #3]
 8003e24:	6879      	ldr	r1, [r7, #4]
 8003e26:	4613      	mov	r3, r2
 8003e28:	011b      	lsls	r3, r3, #4
 8003e2a:	1a9b      	subs	r3, r3, r2
 8003e2c:	009b      	lsls	r3, r3, #2
 8003e2e:	440b      	add	r3, r1
 8003e30:	334c      	adds	r3, #76	@ 0x4c
 8003e32:	2201      	movs	r2, #1
 8003e34:	701a      	strb	r2, [r3, #0]
 8003e36:	78fa      	ldrb	r2, [r7, #3]
 8003e38:	6879      	ldr	r1, [r7, #4]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	1a9b      	subs	r3, r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	440b      	add	r3, r1
 8003e44:	3326      	adds	r3, #38	@ 0x26
 8003e46:	781b      	ldrb	r3, [r3, #0]
 8003e48:	2b02      	cmp	r3, #2
 8003e4a:	d00b      	beq.n	8003e64 <HCD_HC_OUT_IRQHandler+0x634>
 8003e4c:	78fa      	ldrb	r2, [r7, #3]
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	4613      	mov	r3, r2
 8003e52:	011b      	lsls	r3, r3, #4
 8003e54:	1a9b      	subs	r3, r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	3326      	adds	r3, #38	@ 0x26
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	2b03      	cmp	r3, #3
 8003e60:	f040 8190 	bne.w	8004184 <HCD_HC_OUT_IRQHandler+0x954>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	799b      	ldrb	r3, [r3, #6]
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d115      	bne.n	8003e98 <HCD_HC_OUT_IRQHandler+0x668>
 8003e6c:	78fa      	ldrb	r2, [r7, #3]
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	4613      	mov	r3, r2
 8003e72:	011b      	lsls	r3, r3, #4
 8003e74:	1a9b      	subs	r3, r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	333d      	adds	r3, #61	@ 0x3d
 8003e7c:	781b      	ldrb	r3, [r3, #0]
 8003e7e:	78fa      	ldrb	r2, [r7, #3]
 8003e80:	f083 0301 	eor.w	r3, r3, #1
 8003e84:	b2d8      	uxtb	r0, r3
 8003e86:	6879      	ldr	r1, [r7, #4]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	011b      	lsls	r3, r3, #4
 8003e8c:	1a9b      	subs	r3, r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	440b      	add	r3, r1
 8003e92:	333d      	adds	r3, #61	@ 0x3d
 8003e94:	4602      	mov	r2, r0
 8003e96:	701a      	strb	r2, [r3, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	799b      	ldrb	r3, [r3, #6]
 8003e9c:	2b01      	cmp	r3, #1
 8003e9e:	f040 8171 	bne.w	8004184 <HCD_HC_OUT_IRQHandler+0x954>
 8003ea2:	78fa      	ldrb	r2, [r7, #3]
 8003ea4:	6879      	ldr	r1, [r7, #4]
 8003ea6:	4613      	mov	r3, r2
 8003ea8:	011b      	lsls	r3, r3, #4
 8003eaa:	1a9b      	subs	r3, r3, r2
 8003eac:	009b      	lsls	r3, r3, #2
 8003eae:	440b      	add	r3, r1
 8003eb0:	3334      	adds	r3, #52	@ 0x34
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	f000 8165 	beq.w	8004184 <HCD_HC_OUT_IRQHandler+0x954>
 8003eba:	78fa      	ldrb	r2, [r7, #3]
 8003ebc:	6879      	ldr	r1, [r7, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	011b      	lsls	r3, r3, #4
 8003ec2:	1a9b      	subs	r3, r3, r2
 8003ec4:	009b      	lsls	r3, r3, #2
 8003ec6:	440b      	add	r3, r1
 8003ec8:	3334      	adds	r3, #52	@ 0x34
 8003eca:	6819      	ldr	r1, [r3, #0]
 8003ecc:	78fa      	ldrb	r2, [r7, #3]
 8003ece:	6878      	ldr	r0, [r7, #4]
 8003ed0:	4613      	mov	r3, r2
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	1a9b      	subs	r3, r3, r2
 8003ed6:	009b      	lsls	r3, r3, #2
 8003ed8:	4403      	add	r3, r0
 8003eda:	3328      	adds	r3, #40	@ 0x28
 8003edc:	881b      	ldrh	r3, [r3, #0]
 8003ede:	440b      	add	r3, r1
 8003ee0:	1e59      	subs	r1, r3, #1
 8003ee2:	78fa      	ldrb	r2, [r7, #3]
 8003ee4:	6878      	ldr	r0, [r7, #4]
 8003ee6:	4613      	mov	r3, r2
 8003ee8:	011b      	lsls	r3, r3, #4
 8003eea:	1a9b      	subs	r3, r3, r2
 8003eec:	009b      	lsls	r3, r3, #2
 8003eee:	4403      	add	r3, r0
 8003ef0:	3328      	adds	r3, #40	@ 0x28
 8003ef2:	881b      	ldrh	r3, [r3, #0]
 8003ef4:	fbb1 f3f3 	udiv	r3, r1, r3
 8003ef8:	60bb      	str	r3, [r7, #8]
 8003efa:	68bb      	ldr	r3, [r7, #8]
 8003efc:	f003 0301 	and.w	r3, r3, #1
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	f000 813f 	beq.w	8004184 <HCD_HC_OUT_IRQHandler+0x954>
 8003f06:	78fa      	ldrb	r2, [r7, #3]
 8003f08:	6879      	ldr	r1, [r7, #4]
 8003f0a:	4613      	mov	r3, r2
 8003f0c:	011b      	lsls	r3, r3, #4
 8003f0e:	1a9b      	subs	r3, r3, r2
 8003f10:	009b      	lsls	r3, r3, #2
 8003f12:	440b      	add	r3, r1
 8003f14:	333d      	adds	r3, #61	@ 0x3d
 8003f16:	781b      	ldrb	r3, [r3, #0]
 8003f18:	78fa      	ldrb	r2, [r7, #3]
 8003f1a:	f083 0301 	eor.w	r3, r3, #1
 8003f1e:	b2d8      	uxtb	r0, r3
 8003f20:	6879      	ldr	r1, [r7, #4]
 8003f22:	4613      	mov	r3, r2
 8003f24:	011b      	lsls	r3, r3, #4
 8003f26:	1a9b      	subs	r3, r3, r2
 8003f28:	009b      	lsls	r3, r3, #2
 8003f2a:	440b      	add	r3, r1
 8003f2c:	333d      	adds	r3, #61	@ 0x3d
 8003f2e:	4602      	mov	r2, r0
 8003f30:	701a      	strb	r2, [r3, #0]
 8003f32:	e127      	b.n	8004184 <HCD_HC_OUT_IRQHandler+0x954>
 8003f34:	78fa      	ldrb	r2, [r7, #3]
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	4613      	mov	r3, r2
 8003f3a:	011b      	lsls	r3, r3, #4
 8003f3c:	1a9b      	subs	r3, r3, r2
 8003f3e:	009b      	lsls	r3, r3, #2
 8003f40:	440b      	add	r3, r1
 8003f42:	334d      	adds	r3, #77	@ 0x4d
 8003f44:	781b      	ldrb	r3, [r3, #0]
 8003f46:	2b03      	cmp	r3, #3
 8003f48:	d120      	bne.n	8003f8c <HCD_HC_OUT_IRQHandler+0x75c>
 8003f4a:	78fa      	ldrb	r2, [r7, #3]
 8003f4c:	6879      	ldr	r1, [r7, #4]
 8003f4e:	4613      	mov	r3, r2
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	1a9b      	subs	r3, r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	440b      	add	r3, r1
 8003f58:	334d      	adds	r3, #77	@ 0x4d
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	701a      	strb	r2, [r3, #0]
 8003f5e:	78fa      	ldrb	r2, [r7, #3]
 8003f60:	6879      	ldr	r1, [r7, #4]
 8003f62:	4613      	mov	r3, r2
 8003f64:	011b      	lsls	r3, r3, #4
 8003f66:	1a9b      	subs	r3, r3, r2
 8003f68:	009b      	lsls	r3, r3, #2
 8003f6a:	440b      	add	r3, r1
 8003f6c:	331b      	adds	r3, #27
 8003f6e:	781b      	ldrb	r3, [r3, #0]
 8003f70:	2b01      	cmp	r3, #1
 8003f72:	f040 8107 	bne.w	8004184 <HCD_HC_OUT_IRQHandler+0x954>
 8003f76:	78fa      	ldrb	r2, [r7, #3]
 8003f78:	6879      	ldr	r1, [r7, #4]
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	011b      	lsls	r3, r3, #4
 8003f7e:	1a9b      	subs	r3, r3, r2
 8003f80:	009b      	lsls	r3, r3, #2
 8003f82:	440b      	add	r3, r1
 8003f84:	334c      	adds	r3, #76	@ 0x4c
 8003f86:	2202      	movs	r2, #2
 8003f88:	701a      	strb	r2, [r3, #0]
 8003f8a:	e0fb      	b.n	8004184 <HCD_HC_OUT_IRQHandler+0x954>
 8003f8c:	78fa      	ldrb	r2, [r7, #3]
 8003f8e:	6879      	ldr	r1, [r7, #4]
 8003f90:	4613      	mov	r3, r2
 8003f92:	011b      	lsls	r3, r3, #4
 8003f94:	1a9b      	subs	r3, r3, r2
 8003f96:	009b      	lsls	r3, r3, #2
 8003f98:	440b      	add	r3, r1
 8003f9a:	334d      	adds	r3, #77	@ 0x4d
 8003f9c:	781b      	ldrb	r3, [r3, #0]
 8003f9e:	2b04      	cmp	r3, #4
 8003fa0:	d13a      	bne.n	8004018 <HCD_HC_OUT_IRQHandler+0x7e8>
 8003fa2:	78fa      	ldrb	r2, [r7, #3]
 8003fa4:	6879      	ldr	r1, [r7, #4]
 8003fa6:	4613      	mov	r3, r2
 8003fa8:	011b      	lsls	r3, r3, #4
 8003faa:	1a9b      	subs	r3, r3, r2
 8003fac:	009b      	lsls	r3, r3, #2
 8003fae:	440b      	add	r3, r1
 8003fb0:	334d      	adds	r3, #77	@ 0x4d
 8003fb2:	2202      	movs	r2, #2
 8003fb4:	701a      	strb	r2, [r3, #0]
 8003fb6:	78fa      	ldrb	r2, [r7, #3]
 8003fb8:	6879      	ldr	r1, [r7, #4]
 8003fba:	4613      	mov	r3, r2
 8003fbc:	011b      	lsls	r3, r3, #4
 8003fbe:	1a9b      	subs	r3, r3, r2
 8003fc0:	009b      	lsls	r3, r3, #2
 8003fc2:	440b      	add	r3, r1
 8003fc4:	334c      	adds	r3, #76	@ 0x4c
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	701a      	strb	r2, [r3, #0]
 8003fca:	78fa      	ldrb	r2, [r7, #3]
 8003fcc:	6879      	ldr	r1, [r7, #4]
 8003fce:	4613      	mov	r3, r2
 8003fd0:	011b      	lsls	r3, r3, #4
 8003fd2:	1a9b      	subs	r3, r3, r2
 8003fd4:	009b      	lsls	r3, r3, #2
 8003fd6:	440b      	add	r3, r1
 8003fd8:	331b      	adds	r3, #27
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	f040 80d1 	bne.w	8004184 <HCD_HC_OUT_IRQHandler+0x954>
 8003fe2:	78fa      	ldrb	r2, [r7, #3]
 8003fe4:	6879      	ldr	r1, [r7, #4]
 8003fe6:	4613      	mov	r3, r2
 8003fe8:	011b      	lsls	r3, r3, #4
 8003fea:	1a9b      	subs	r3, r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	440b      	add	r3, r1
 8003ff0:	331b      	adds	r3, #27
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	701a      	strb	r2, [r3, #0]
 8003ff6:	78fb      	ldrb	r3, [r7, #3]
 8003ff8:	015a      	lsls	r2, r3, #5
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	4413      	add	r3, r2
 8003ffe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	78fa      	ldrb	r2, [r7, #3]
 8004006:	0151      	lsls	r1, r2, #5
 8004008:	693a      	ldr	r2, [r7, #16]
 800400a:	440a      	add	r2, r1
 800400c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8004010:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004014:	6053      	str	r3, [r2, #4]
 8004016:	e0b5      	b.n	8004184 <HCD_HC_OUT_IRQHandler+0x954>
 8004018:	78fa      	ldrb	r2, [r7, #3]
 800401a:	6879      	ldr	r1, [r7, #4]
 800401c:	4613      	mov	r3, r2
 800401e:	011b      	lsls	r3, r3, #4
 8004020:	1a9b      	subs	r3, r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	440b      	add	r3, r1
 8004026:	334d      	adds	r3, #77	@ 0x4d
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	2b05      	cmp	r3, #5
 800402c:	d114      	bne.n	8004058 <HCD_HC_OUT_IRQHandler+0x828>
 800402e:	78fa      	ldrb	r2, [r7, #3]
 8004030:	6879      	ldr	r1, [r7, #4]
 8004032:	4613      	mov	r3, r2
 8004034:	011b      	lsls	r3, r3, #4
 8004036:	1a9b      	subs	r3, r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	440b      	add	r3, r1
 800403c:	334d      	adds	r3, #77	@ 0x4d
 800403e:	2202      	movs	r2, #2
 8004040:	701a      	strb	r2, [r3, #0]
 8004042:	78fa      	ldrb	r2, [r7, #3]
 8004044:	6879      	ldr	r1, [r7, #4]
 8004046:	4613      	mov	r3, r2
 8004048:	011b      	lsls	r3, r3, #4
 800404a:	1a9b      	subs	r3, r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	440b      	add	r3, r1
 8004050:	334c      	adds	r3, #76	@ 0x4c
 8004052:	2202      	movs	r2, #2
 8004054:	701a      	strb	r2, [r3, #0]
 8004056:	e095      	b.n	8004184 <HCD_HC_OUT_IRQHandler+0x954>
 8004058:	78fa      	ldrb	r2, [r7, #3]
 800405a:	6879      	ldr	r1, [r7, #4]
 800405c:	4613      	mov	r3, r2
 800405e:	011b      	lsls	r3, r3, #4
 8004060:	1a9b      	subs	r3, r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	440b      	add	r3, r1
 8004066:	334d      	adds	r3, #77	@ 0x4d
 8004068:	781b      	ldrb	r3, [r3, #0]
 800406a:	2b06      	cmp	r3, #6
 800406c:	d114      	bne.n	8004098 <HCD_HC_OUT_IRQHandler+0x868>
 800406e:	78fa      	ldrb	r2, [r7, #3]
 8004070:	6879      	ldr	r1, [r7, #4]
 8004072:	4613      	mov	r3, r2
 8004074:	011b      	lsls	r3, r3, #4
 8004076:	1a9b      	subs	r3, r3, r2
 8004078:	009b      	lsls	r3, r3, #2
 800407a:	440b      	add	r3, r1
 800407c:	334d      	adds	r3, #77	@ 0x4d
 800407e:	2202      	movs	r2, #2
 8004080:	701a      	strb	r2, [r3, #0]
 8004082:	78fa      	ldrb	r2, [r7, #3]
 8004084:	6879      	ldr	r1, [r7, #4]
 8004086:	4613      	mov	r3, r2
 8004088:	011b      	lsls	r3, r3, #4
 800408a:	1a9b      	subs	r3, r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	440b      	add	r3, r1
 8004090:	334c      	adds	r3, #76	@ 0x4c
 8004092:	2205      	movs	r2, #5
 8004094:	701a      	strb	r2, [r3, #0]
 8004096:	e075      	b.n	8004184 <HCD_HC_OUT_IRQHandler+0x954>
 8004098:	78fa      	ldrb	r2, [r7, #3]
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	4613      	mov	r3, r2
 800409e:	011b      	lsls	r3, r3, #4
 80040a0:	1a9b      	subs	r3, r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	334d      	adds	r3, #77	@ 0x4d
 80040a8:	781b      	ldrb	r3, [r3, #0]
 80040aa:	2b07      	cmp	r3, #7
 80040ac:	d00a      	beq.n	80040c4 <HCD_HC_OUT_IRQHandler+0x894>
 80040ae:	78fa      	ldrb	r2, [r7, #3]
 80040b0:	6879      	ldr	r1, [r7, #4]
 80040b2:	4613      	mov	r3, r2
 80040b4:	011b      	lsls	r3, r3, #4
 80040b6:	1a9b      	subs	r3, r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	440b      	add	r3, r1
 80040bc:	334d      	adds	r3, #77	@ 0x4d
 80040be:	781b      	ldrb	r3, [r3, #0]
 80040c0:	2b09      	cmp	r3, #9
 80040c2:	d170      	bne.n	80041a6 <HCD_HC_OUT_IRQHandler+0x976>
 80040c4:	78fa      	ldrb	r2, [r7, #3]
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	4613      	mov	r3, r2
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	1a9b      	subs	r3, r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	334d      	adds	r3, #77	@ 0x4d
 80040d4:	2202      	movs	r2, #2
 80040d6:	701a      	strb	r2, [r3, #0]
 80040d8:	78fa      	ldrb	r2, [r7, #3]
 80040da:	6879      	ldr	r1, [r7, #4]
 80040dc:	4613      	mov	r3, r2
 80040de:	011b      	lsls	r3, r3, #4
 80040e0:	1a9b      	subs	r3, r3, r2
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	440b      	add	r3, r1
 80040e6:	3344      	adds	r3, #68	@ 0x44
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	1c59      	adds	r1, r3, #1
 80040ec:	6878      	ldr	r0, [r7, #4]
 80040ee:	4613      	mov	r3, r2
 80040f0:	011b      	lsls	r3, r3, #4
 80040f2:	1a9b      	subs	r3, r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4403      	add	r3, r0
 80040f8:	3344      	adds	r3, #68	@ 0x44
 80040fa:	6019      	str	r1, [r3, #0]
 80040fc:	78fa      	ldrb	r2, [r7, #3]
 80040fe:	6879      	ldr	r1, [r7, #4]
 8004100:	4613      	mov	r3, r2
 8004102:	011b      	lsls	r3, r3, #4
 8004104:	1a9b      	subs	r3, r3, r2
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	440b      	add	r3, r1
 800410a:	3344      	adds	r3, #68	@ 0x44
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2b02      	cmp	r3, #2
 8004110:	d914      	bls.n	800413c <HCD_HC_OUT_IRQHandler+0x90c>
 8004112:	78fa      	ldrb	r2, [r7, #3]
 8004114:	6879      	ldr	r1, [r7, #4]
 8004116:	4613      	mov	r3, r2
 8004118:	011b      	lsls	r3, r3, #4
 800411a:	1a9b      	subs	r3, r3, r2
 800411c:	009b      	lsls	r3, r3, #2
 800411e:	440b      	add	r3, r1
 8004120:	3344      	adds	r3, #68	@ 0x44
 8004122:	2200      	movs	r2, #0
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	78fa      	ldrb	r2, [r7, #3]
 8004128:	6879      	ldr	r1, [r7, #4]
 800412a:	4613      	mov	r3, r2
 800412c:	011b      	lsls	r3, r3, #4
 800412e:	1a9b      	subs	r3, r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	440b      	add	r3, r1
 8004134:	334c      	adds	r3, #76	@ 0x4c
 8004136:	2204      	movs	r2, #4
 8004138:	701a      	strb	r2, [r3, #0]
 800413a:	e022      	b.n	8004182 <HCD_HC_OUT_IRQHandler+0x952>
 800413c:	78fa      	ldrb	r2, [r7, #3]
 800413e:	6879      	ldr	r1, [r7, #4]
 8004140:	4613      	mov	r3, r2
 8004142:	011b      	lsls	r3, r3, #4
 8004144:	1a9b      	subs	r3, r3, r2
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	440b      	add	r3, r1
 800414a:	334c      	adds	r3, #76	@ 0x4c
 800414c:	2202      	movs	r2, #2
 800414e:	701a      	strb	r2, [r3, #0]
 8004150:	78fb      	ldrb	r3, [r7, #3]
 8004152:	015a      	lsls	r2, r3, #5
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	4413      	add	r3, r2
 8004158:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	60fb      	str	r3, [r7, #12]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004166:	60fb      	str	r3, [r7, #12]
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	78fb      	ldrb	r3, [r7, #3]
 8004172:	015a      	lsls	r2, r3, #5
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	4413      	add	r3, r2
 8004178:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800417c:	461a      	mov	r2, r3
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	6013      	str	r3, [r2, #0]
 8004182:	bf00      	nop
 8004184:	78fa      	ldrb	r2, [r7, #3]
 8004186:	6879      	ldr	r1, [r7, #4]
 8004188:	4613      	mov	r3, r2
 800418a:	011b      	lsls	r3, r3, #4
 800418c:	1a9b      	subs	r3, r3, r2
 800418e:	009b      	lsls	r3, r3, #2
 8004190:	440b      	add	r3, r1
 8004192:	334c      	adds	r3, #76	@ 0x4c
 8004194:	781a      	ldrb	r2, [r3, #0]
 8004196:	78fb      	ldrb	r3, [r7, #3]
 8004198:	4619      	mov	r1, r3
 800419a:	6878      	ldr	r0, [r7, #4]
 800419c:	f006 ff2e 	bl	800affc <HAL_HCD_HC_NotifyURBChange_Callback>
 80041a0:	e002      	b.n	80041a8 <HCD_HC_OUT_IRQHandler+0x978>
 80041a2:	bf00      	nop
 80041a4:	e000      	b.n	80041a8 <HCD_HC_OUT_IRQHandler+0x978>
 80041a6:	bf00      	nop
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <HCD_RXQLVL_IRQHandler>:
 80041ae:	b580      	push	{r7, lr}
 80041b0:	b08a      	sub	sp, #40	@ 0x28
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	627b      	str	r3, [r7, #36]	@ 0x24
 80041bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041be:	623b      	str	r3, [r7, #32]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	61fb      	str	r3, [r7, #28]
 80041c8:	69fb      	ldr	r3, [r7, #28]
 80041ca:	f003 030f 	and.w	r3, r3, #15
 80041ce:	61bb      	str	r3, [r7, #24]
 80041d0:	69fb      	ldr	r3, [r7, #28]
 80041d2:	0c5b      	lsrs	r3, r3, #17
 80041d4:	f003 030f 	and.w	r3, r3, #15
 80041d8:	617b      	str	r3, [r7, #20]
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	091b      	lsrs	r3, r3, #4
 80041de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80041e2:	613b      	str	r3, [r7, #16]
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d004      	beq.n	80041f4 <HCD_RXQLVL_IRQHandler+0x46>
 80041ea:	697b      	ldr	r3, [r7, #20]
 80041ec:	2b05      	cmp	r3, #5
 80041ee:	f000 80b6 	beq.w	800435e <HCD_RXQLVL_IRQHandler+0x1b0>
 80041f2:	e0b7      	b.n	8004364 <HCD_RXQLVL_IRQHandler+0x1b6>
 80041f4:	693b      	ldr	r3, [r7, #16]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 80b3 	beq.w	8004362 <HCD_RXQLVL_IRQHandler+0x1b4>
 80041fc:	6879      	ldr	r1, [r7, #4]
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	4613      	mov	r3, r2
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	1a9b      	subs	r3, r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	440b      	add	r3, r1
 800420a:	332c      	adds	r3, #44	@ 0x2c
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	2b00      	cmp	r3, #0
 8004210:	f000 80a7 	beq.w	8004362 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004214:	6879      	ldr	r1, [r7, #4]
 8004216:	69ba      	ldr	r2, [r7, #24]
 8004218:	4613      	mov	r3, r2
 800421a:	011b      	lsls	r3, r3, #4
 800421c:	1a9b      	subs	r3, r3, r2
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	440b      	add	r3, r1
 8004222:	3338      	adds	r3, #56	@ 0x38
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	18d1      	adds	r1, r2, r3
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	69ba      	ldr	r2, [r7, #24]
 800422e:	4613      	mov	r3, r2
 8004230:	011b      	lsls	r3, r3, #4
 8004232:	1a9b      	subs	r3, r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4403      	add	r3, r0
 8004238:	3334      	adds	r3, #52	@ 0x34
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4299      	cmp	r1, r3
 800423e:	f200 8083 	bhi.w	8004348 <HCD_RXQLVL_IRQHandler+0x19a>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6818      	ldr	r0, [r3, #0]
 8004246:	6879      	ldr	r1, [r7, #4]
 8004248:	69ba      	ldr	r2, [r7, #24]
 800424a:	4613      	mov	r3, r2
 800424c:	011b      	lsls	r3, r3, #4
 800424e:	1a9b      	subs	r3, r3, r2
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	440b      	add	r3, r1
 8004254:	332c      	adds	r3, #44	@ 0x2c
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	b292      	uxth	r2, r2
 800425c:	4619      	mov	r1, r3
 800425e:	f003 fd69 	bl	8007d34 <USB_ReadPacket>
 8004262:	6879      	ldr	r1, [r7, #4]
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	4613      	mov	r3, r2
 8004268:	011b      	lsls	r3, r3, #4
 800426a:	1a9b      	subs	r3, r3, r2
 800426c:	009b      	lsls	r3, r3, #2
 800426e:	440b      	add	r3, r1
 8004270:	332c      	adds	r3, #44	@ 0x2c
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	18d1      	adds	r1, r2, r3
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	69ba      	ldr	r2, [r7, #24]
 800427c:	4613      	mov	r3, r2
 800427e:	011b      	lsls	r3, r3, #4
 8004280:	1a9b      	subs	r3, r3, r2
 8004282:	009b      	lsls	r3, r3, #2
 8004284:	4403      	add	r3, r0
 8004286:	332c      	adds	r3, #44	@ 0x2c
 8004288:	6019      	str	r1, [r3, #0]
 800428a:	6879      	ldr	r1, [r7, #4]
 800428c:	69ba      	ldr	r2, [r7, #24]
 800428e:	4613      	mov	r3, r2
 8004290:	011b      	lsls	r3, r3, #4
 8004292:	1a9b      	subs	r3, r3, r2
 8004294:	009b      	lsls	r3, r3, #2
 8004296:	440b      	add	r3, r1
 8004298:	3338      	adds	r3, #56	@ 0x38
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	18d1      	adds	r1, r2, r3
 80042a0:	6878      	ldr	r0, [r7, #4]
 80042a2:	69ba      	ldr	r2, [r7, #24]
 80042a4:	4613      	mov	r3, r2
 80042a6:	011b      	lsls	r3, r3, #4
 80042a8:	1a9b      	subs	r3, r3, r2
 80042aa:	009b      	lsls	r3, r3, #2
 80042ac:	4403      	add	r3, r0
 80042ae:	3338      	adds	r3, #56	@ 0x38
 80042b0:	6019      	str	r1, [r3, #0]
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	015a      	lsls	r2, r3, #5
 80042b6:	6a3b      	ldr	r3, [r7, #32]
 80042b8:	4413      	add	r3, r2
 80042ba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042be:	691b      	ldr	r3, [r3, #16]
 80042c0:	0cdb      	lsrs	r3, r3, #19
 80042c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80042c6:	60fb      	str	r3, [r7, #12]
 80042c8:	6879      	ldr	r1, [r7, #4]
 80042ca:	69ba      	ldr	r2, [r7, #24]
 80042cc:	4613      	mov	r3, r2
 80042ce:	011b      	lsls	r3, r3, #4
 80042d0:	1a9b      	subs	r3, r3, r2
 80042d2:	009b      	lsls	r3, r3, #2
 80042d4:	440b      	add	r3, r1
 80042d6:	3328      	adds	r3, #40	@ 0x28
 80042d8:	881b      	ldrh	r3, [r3, #0]
 80042da:	461a      	mov	r2, r3
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	4293      	cmp	r3, r2
 80042e0:	d13f      	bne.n	8004362 <HCD_RXQLVL_IRQHandler+0x1b4>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d03c      	beq.n	8004362 <HCD_RXQLVL_IRQHandler+0x1b4>
 80042e8:	69bb      	ldr	r3, [r7, #24]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	6a3b      	ldr	r3, [r7, #32]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	60bb      	str	r3, [r7, #8]
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80042fe:	60bb      	str	r3, [r7, #8]
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8004306:	60bb      	str	r3, [r7, #8]
 8004308:	69bb      	ldr	r3, [r7, #24]
 800430a:	015a      	lsls	r2, r3, #5
 800430c:	6a3b      	ldr	r3, [r7, #32]
 800430e:	4413      	add	r3, r2
 8004310:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004314:	461a      	mov	r2, r3
 8004316:	68bb      	ldr	r3, [r7, #8]
 8004318:	6013      	str	r3, [r2, #0]
 800431a:	6879      	ldr	r1, [r7, #4]
 800431c:	69ba      	ldr	r2, [r7, #24]
 800431e:	4613      	mov	r3, r2
 8004320:	011b      	lsls	r3, r3, #4
 8004322:	1a9b      	subs	r3, r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	440b      	add	r3, r1
 8004328:	333c      	adds	r3, #60	@ 0x3c
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	f083 0301 	eor.w	r3, r3, #1
 8004330:	b2d8      	uxtb	r0, r3
 8004332:	6879      	ldr	r1, [r7, #4]
 8004334:	69ba      	ldr	r2, [r7, #24]
 8004336:	4613      	mov	r3, r2
 8004338:	011b      	lsls	r3, r3, #4
 800433a:	1a9b      	subs	r3, r3, r2
 800433c:	009b      	lsls	r3, r3, #2
 800433e:	440b      	add	r3, r1
 8004340:	333c      	adds	r3, #60	@ 0x3c
 8004342:	4602      	mov	r2, r0
 8004344:	701a      	strb	r2, [r3, #0]
 8004346:	e00c      	b.n	8004362 <HCD_RXQLVL_IRQHandler+0x1b4>
 8004348:	6879      	ldr	r1, [r7, #4]
 800434a:	69ba      	ldr	r2, [r7, #24]
 800434c:	4613      	mov	r3, r2
 800434e:	011b      	lsls	r3, r3, #4
 8004350:	1a9b      	subs	r3, r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	334c      	adds	r3, #76	@ 0x4c
 8004358:	2204      	movs	r2, #4
 800435a:	701a      	strb	r2, [r3, #0]
 800435c:	e001      	b.n	8004362 <HCD_RXQLVL_IRQHandler+0x1b4>
 800435e:	bf00      	nop
 8004360:	e000      	b.n	8004364 <HCD_RXQLVL_IRQHandler+0x1b6>
 8004362:	bf00      	nop
 8004364:	bf00      	nop
 8004366:	3728      	adds	r7, #40	@ 0x28
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <HCD_Port_IRQHandler>:
 800436c:	b580      	push	{r7, lr}
 800436e:	b086      	sub	sp, #24
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	613b      	str	r3, [r7, #16]
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	60fb      	str	r3, [r7, #12]
 8004388:	693b      	ldr	r3, [r7, #16]
 800438a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	60bb      	str	r3, [r7, #8]
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004398:	60bb      	str	r3, [r7, #8]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d10b      	bne.n	80043bc <HCD_Port_IRQHandler+0x50>
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	f003 0301 	and.w	r3, r3, #1
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d102      	bne.n	80043b4 <HCD_Port_IRQHandler+0x48>
 80043ae:	6878      	ldr	r0, [r7, #4]
 80043b0:	f006 fe08 	bl	800afc4 <HAL_HCD_Connect_Callback>
 80043b4:	68bb      	ldr	r3, [r7, #8]
 80043b6:	f043 0302 	orr.w	r3, r3, #2
 80043ba:	60bb      	str	r3, [r7, #8]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f003 0308 	and.w	r3, r3, #8
 80043c2:	2b08      	cmp	r3, #8
 80043c4:	d132      	bne.n	800442c <HCD_Port_IRQHandler+0xc0>
 80043c6:	68bb      	ldr	r3, [r7, #8]
 80043c8:	f043 0308 	orr.w	r3, r3, #8
 80043cc:	60bb      	str	r3, [r7, #8]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	f003 0304 	and.w	r3, r3, #4
 80043d4:	2b04      	cmp	r3, #4
 80043d6:	d126      	bne.n	8004426 <HCD_Port_IRQHandler+0xba>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	7a5b      	ldrb	r3, [r3, #9]
 80043dc:	2b02      	cmp	r3, #2
 80043de:	d113      	bne.n	8004408 <HCD_Port_IRQHandler+0x9c>
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 80043e6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80043ea:	d106      	bne.n	80043fa <HCD_Port_IRQHandler+0x8e>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2102      	movs	r1, #2
 80043f2:	4618      	mov	r0, r3
 80043f4:	f003 fe2e 	bl	8008054 <USB_InitFSLSPClkSel>
 80043f8:	e011      	b.n	800441e <HCD_Port_IRQHandler+0xb2>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	2101      	movs	r1, #1
 8004400:	4618      	mov	r0, r3
 8004402:	f003 fe27 	bl	8008054 <USB_InitFSLSPClkSel>
 8004406:	e00a      	b.n	800441e <HCD_Port_IRQHandler+0xb2>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	79db      	ldrb	r3, [r3, #7]
 800440c:	2b01      	cmp	r3, #1
 800440e:	d106      	bne.n	800441e <HCD_Port_IRQHandler+0xb2>
 8004410:	693b      	ldr	r3, [r7, #16]
 8004412:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004416:	461a      	mov	r2, r3
 8004418:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800441c:	6053      	str	r3, [r2, #4]
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f006 fdfa 	bl	800b018 <HAL_HCD_PortEnabled_Callback>
 8004424:	e002      	b.n	800442c <HCD_Port_IRQHandler+0xc0>
 8004426:	6878      	ldr	r0, [r7, #4]
 8004428:	f006 fe04 	bl	800b034 <HAL_HCD_PortDisabled_Callback>
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f003 0320 	and.w	r3, r3, #32
 8004432:	2b20      	cmp	r3, #32
 8004434:	d103      	bne.n	800443e <HCD_Port_IRQHandler+0xd2>
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	f043 0320 	orr.w	r3, r3, #32
 800443c:	60bb      	str	r3, [r7, #8]
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004444:	461a      	mov	r2, r3
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	6013      	str	r3, [r2, #0]
 800444a:	bf00      	nop
 800444c:	3718      	adds	r7, #24
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
	...

08004454 <HAL_I2C_Init>:
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_I2C_Init+0x12>
 8004462:	2301      	movs	r3, #1
 8004464:	e12b      	b.n	80046be <HAL_I2C_Init+0x26a>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d106      	bne.n	8004480 <HAL_I2C_Init+0x2c>
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7fc fd72 	bl	8000f64 <HAL_I2C_MspInit>
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2224      	movs	r2, #36	@ 0x24
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 0201 	bic.w	r2, r2, #1
 8004496:	601a      	str	r2, [r3, #0]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80044a6:	601a      	str	r2, [r3, #0]
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80044b6:	601a      	str	r2, [r3, #0]
 80044b8:	f001 f964 	bl	8005784 <HAL_RCC_GetPCLK1Freq>
 80044bc:	60f8      	str	r0, [r7, #12]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	4a81      	ldr	r2, [pc, #516]	@ (80046c8 <HAL_I2C_Init+0x274>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d807      	bhi.n	80044d8 <HAL_I2C_Init+0x84>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4a80      	ldr	r2, [pc, #512]	@ (80046cc <HAL_I2C_Init+0x278>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	bf94      	ite	ls
 80044d0:	2301      	movls	r3, #1
 80044d2:	2300      	movhi	r3, #0
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	e006      	b.n	80044e6 <HAL_I2C_Init+0x92>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4a7d      	ldr	r2, [pc, #500]	@ (80046d0 <HAL_I2C_Init+0x27c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	bf94      	ite	ls
 80044e0:	2301      	movls	r3, #1
 80044e2:	2300      	movhi	r3, #0
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <HAL_I2C_Init+0x9a>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e0e7      	b.n	80046be <HAL_I2C_Init+0x26a>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4a78      	ldr	r2, [pc, #480]	@ (80046d4 <HAL_I2C_Init+0x280>)
 80044f2:	fba2 2303 	umull	r2, r3, r2, r3
 80044f6:	0c9b      	lsrs	r3, r3, #18
 80044f8:	60bb      	str	r3, [r7, #8]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	430a      	orrs	r2, r1
 800450c:	605a      	str	r2, [r3, #4]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	4a6a      	ldr	r2, [pc, #424]	@ (80046c8 <HAL_I2C_Init+0x274>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d802      	bhi.n	8004528 <HAL_I2C_Init+0xd4>
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	3301      	adds	r3, #1
 8004526:	e009      	b.n	800453c <HAL_I2C_Init+0xe8>
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800452e:	fb02 f303 	mul.w	r3, r2, r3
 8004532:	4a69      	ldr	r2, [pc, #420]	@ (80046d8 <HAL_I2C_Init+0x284>)
 8004534:	fba2 2303 	umull	r2, r3, r2, r3
 8004538:	099b      	lsrs	r3, r3, #6
 800453a:	3301      	adds	r3, #1
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6812      	ldr	r2, [r2, #0]
 8004540:	430b      	orrs	r3, r1
 8004542:	6213      	str	r3, [r2, #32]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800454e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	495c      	ldr	r1, [pc, #368]	@ (80046c8 <HAL_I2C_Init+0x274>)
 8004558:	428b      	cmp	r3, r1
 800455a:	d819      	bhi.n	8004590 <HAL_I2C_Init+0x13c>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	1e59      	subs	r1, r3, #1
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	fbb1 f3f3 	udiv	r3, r1, r3
 800456a:	1c59      	adds	r1, r3, #1
 800456c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004570:	400b      	ands	r3, r1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <HAL_I2C_Init+0x138>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	1e59      	subs	r1, r3, #1
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	fbb1 f3f3 	udiv	r3, r1, r3
 8004584:	3301      	adds	r3, #1
 8004586:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800458a:	e051      	b.n	8004630 <HAL_I2C_Init+0x1dc>
 800458c:	2304      	movs	r3, #4
 800458e:	e04f      	b.n	8004630 <HAL_I2C_Init+0x1dc>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d111      	bne.n	80045bc <HAL_I2C_Init+0x168>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	1e58      	subs	r0, r3, #1
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6859      	ldr	r1, [r3, #4]
 80045a0:	460b      	mov	r3, r1
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	440b      	add	r3, r1
 80045a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80045aa:	3301      	adds	r3, #1
 80045ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	bf0c      	ite	eq
 80045b4:	2301      	moveq	r3, #1
 80045b6:	2300      	movne	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	e012      	b.n	80045e2 <HAL_I2C_Init+0x18e>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	1e58      	subs	r0, r3, #1
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6859      	ldr	r1, [r3, #4]
 80045c4:	460b      	mov	r3, r1
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	440b      	add	r3, r1
 80045ca:	0099      	lsls	r1, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80045d2:	3301      	adds	r3, #1
 80045d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045d8:	2b00      	cmp	r3, #0
 80045da:	bf0c      	ite	eq
 80045dc:	2301      	moveq	r3, #1
 80045de:	2300      	movne	r3, #0
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <HAL_I2C_Init+0x196>
 80045e6:	2301      	movs	r3, #1
 80045e8:	e022      	b.n	8004630 <HAL_I2C_Init+0x1dc>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10e      	bne.n	8004610 <HAL_I2C_Init+0x1bc>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	1e58      	subs	r0, r3, #1
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6859      	ldr	r1, [r3, #4]
 80045fa:	460b      	mov	r3, r1
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	440b      	add	r3, r1
 8004600:	fbb0 f3f3 	udiv	r3, r0, r3
 8004604:	3301      	adds	r3, #1
 8004606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800460a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800460e:	e00f      	b.n	8004630 <HAL_I2C_Init+0x1dc>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	1e58      	subs	r0, r3, #1
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6859      	ldr	r1, [r3, #4]
 8004618:	460b      	mov	r3, r1
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	0099      	lsls	r1, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	fbb0 f3f3 	udiv	r3, r0, r3
 8004626:	3301      	adds	r3, #1
 8004628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800462c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	6809      	ldr	r1, [r1, #0]
 8004634:	4313      	orrs	r3, r2
 8004636:	61cb      	str	r3, [r1, #28]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69da      	ldr	r2, [r3, #28]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	601a      	str	r2, [r3, #0]
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800465e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6911      	ldr	r1, [r2, #16]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	68d2      	ldr	r2, [r2, #12]
 800466a:	4311      	orrs	r1, r2
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6812      	ldr	r2, [r2, #0]
 8004670:	430b      	orrs	r3, r1
 8004672:	6093      	str	r3, [r2, #8]
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	695a      	ldr	r2, [r3, #20]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	431a      	orrs	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	430a      	orrs	r2, r1
 800468e:	60da      	str	r2, [r3, #12]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0201 	orr.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	631a      	str	r2, [r3, #48]	@ 0x30
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80046bc:	2300      	movs	r3, #0
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	000186a0 	.word	0x000186a0
 80046cc:	001e847f 	.word	0x001e847f
 80046d0:	003d08ff 	.word	0x003d08ff
 80046d4:	431bde83 	.word	0x431bde83
 80046d8:	10624dd3 	.word	0x10624dd3

080046dc <HAL_I2CEx_ConfigAnalogFilter>:
 80046dc:	b480      	push	{r7}
 80046de:	b083      	sub	sp, #12
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046ec:	b2db      	uxtb	r3, r3
 80046ee:	2b20      	cmp	r3, #32
 80046f0:	d129      	bne.n	8004746 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2224      	movs	r2, #36	@ 0x24
 80046f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f022 0201 	bic.w	r2, r2, #1
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f022 0210 	bic.w	r2, r2, #16
 8004718:	625a      	str	r2, [r3, #36]	@ 0x24
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	683a      	ldr	r2, [r7, #0]
 8004726:	430a      	orrs	r2, r1
 8004728:	625a      	str	r2, [r3, #36]	@ 0x24
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f042 0201 	orr.w	r2, r2, #1
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2220      	movs	r2, #32
 800473e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004742:	2300      	movs	r3, #0
 8004744:	e000      	b.n	8004748 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
 8004746:	2302      	movs	r3, #2
 8004748:	4618      	mov	r0, r3
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <HAL_I2CEx_ConfigDigitalFilter>:
 8004754:	b480      	push	{r7}
 8004756:	b085      	sub	sp, #20
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
 800475c:	6039      	str	r1, [r7, #0]
 800475e:	2300      	movs	r3, #0
 8004760:	81fb      	strh	r3, [r7, #14]
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004768:	b2db      	uxtb	r3, r3
 800476a:	2b20      	cmp	r3, #32
 800476c:	d12a      	bne.n	80047c4 <HAL_I2CEx_ConfigDigitalFilter+0x70>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2224      	movs	r2, #36	@ 0x24
 8004772:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f022 0201 	bic.w	r2, r2, #1
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800478c:	81fb      	strh	r3, [r7, #14]
 800478e:	89fb      	ldrh	r3, [r7, #14]
 8004790:	f023 030f 	bic.w	r3, r3, #15
 8004794:	81fb      	strh	r3, [r7, #14]
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	b29a      	uxth	r2, r3
 800479a:	89fb      	ldrh	r3, [r7, #14]
 800479c:	4313      	orrs	r3, r2
 800479e:	81fb      	strh	r3, [r7, #14]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	89fa      	ldrh	r2, [r7, #14]
 80047a6:	625a      	str	r2, [r3, #36]	@ 0x24
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681a      	ldr	r2, [r3, #0]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f042 0201 	orr.w	r2, r2, #1
 80047b6:	601a      	str	r2, [r3, #0]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2220      	movs	r2, #32
 80047bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80047c0:	2300      	movs	r3, #0
 80047c2:	e000      	b.n	80047c6 <HAL_I2CEx_ConfigDigitalFilter+0x72>
 80047c4:	2302      	movs	r3, #2
 80047c6:	4618      	mov	r0, r3
 80047c8:	3714      	adds	r7, #20
 80047ca:	46bd      	mov	sp, r7
 80047cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d0:	4770      	bx	lr
	...

080047d4 <HAL_LTDC_Init>:
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_LTDC_Init+0x12>
 80047e2:	2301      	movs	r3, #1
 80047e4:	e0bf      	b.n	8004966 <HAL_LTDC_Init+0x192>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d106      	bne.n	8004800 <HAL_LTDC_Init+0x2c>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7fc fc1c 	bl	8001038 <HAL_LTDC_MspInit>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	699a      	ldr	r2, [r3, #24]
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8004816:	619a      	str	r2, [r3, #24]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	6999      	ldr	r1, [r3, #24]
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	685a      	ldr	r2, [r3, #4]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	689b      	ldr	r3, [r3, #8]
 8004826:	431a      	orrs	r2, r3
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	431a      	orrs	r2, r3
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	431a      	orrs	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	430a      	orrs	r2, r1
 800483a:	619a      	str	r2, [r3, #24]
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	6899      	ldr	r1, [r3, #8]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681a      	ldr	r2, [r3, #0]
 8004846:	4b4a      	ldr	r3, [pc, #296]	@ (8004970 <HAL_LTDC_Init+0x19c>)
 8004848:	400b      	ands	r3, r1
 800484a:	6093      	str	r3, [r2, #8]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	041b      	lsls	r3, r3, #16
 8004852:	60fb      	str	r3, [r7, #12]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	6899      	ldr	r1, [r3, #8]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	699a      	ldr	r2, [r3, #24]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	431a      	orrs	r2, r3
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	430a      	orrs	r2, r1
 8004868:	609a      	str	r2, [r3, #8]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	68d9      	ldr	r1, [r3, #12]
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681a      	ldr	r2, [r3, #0]
 8004874:	4b3e      	ldr	r3, [pc, #248]	@ (8004970 <HAL_LTDC_Init+0x19c>)
 8004876:	400b      	ands	r3, r1
 8004878:	60d3      	str	r3, [r2, #12]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	69db      	ldr	r3, [r3, #28]
 800487e:	041b      	lsls	r3, r3, #16
 8004880:	60fb      	str	r3, [r7, #12]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68d9      	ldr	r1, [r3, #12]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	6a1a      	ldr	r2, [r3, #32]
 800488c:	68fb      	ldr	r3, [r7, #12]
 800488e:	431a      	orrs	r2, r3
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	430a      	orrs	r2, r1
 8004896:	60da      	str	r2, [r3, #12]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	6919      	ldr	r1, [r3, #16]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	4b33      	ldr	r3, [pc, #204]	@ (8004970 <HAL_LTDC_Init+0x19c>)
 80048a4:	400b      	ands	r3, r1
 80048a6:	6113      	str	r3, [r2, #16]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ac:	041b      	lsls	r3, r3, #16
 80048ae:	60fb      	str	r3, [r7, #12]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	6919      	ldr	r1, [r3, #16]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	431a      	orrs	r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	430a      	orrs	r2, r1
 80048c4:	611a      	str	r2, [r3, #16]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6959      	ldr	r1, [r3, #20]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	4b27      	ldr	r3, [pc, #156]	@ (8004970 <HAL_LTDC_Init+0x19c>)
 80048d2:	400b      	ands	r3, r1
 80048d4:	6153      	str	r3, [r2, #20]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048da:	041b      	lsls	r3, r3, #16
 80048dc:	60fb      	str	r3, [r7, #12]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6959      	ldr	r1, [r3, #20]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	431a      	orrs	r2, r3
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	615a      	str	r2, [r3, #20]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80048fa:	021b      	lsls	r3, r3, #8
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8004904:	041b      	lsls	r3, r3, #16
 8004906:	60bb      	str	r3, [r7, #8]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8004916:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800491e:	68ba      	ldr	r2, [r7, #8]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	4313      	orrs	r3, r2
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	430a      	orrs	r2, r1
 8004932:	62da      	str	r2, [r3, #44]	@ 0x2c
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f042 0206 	orr.w	r2, r2, #6
 8004942:	635a      	str	r2, [r3, #52]	@ 0x34
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	699a      	ldr	r2, [r3, #24]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f042 0201 	orr.w	r2, r2, #1
 8004952:	619a      	str	r2, [r3, #24]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2200      	movs	r2, #0
 8004958:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2201      	movs	r2, #1
 8004960:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 8004964:	2300      	movs	r3, #0
 8004966:	4618      	mov	r0, r3
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	f000f800 	.word	0xf000f800

08004974 <HAL_LTDC_IRQHandler>:
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004982:	60fb      	str	r3, [r7, #12]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800498a:	60bb      	str	r3, [r7, #8]
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f003 0304 	and.w	r3, r3, #4
 8004992:	2b00      	cmp	r3, #0
 8004994:	d023      	beq.n	80049de <HAL_LTDC_IRQHandler+0x6a>
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	2b00      	cmp	r3, #0
 800499e:	d01e      	beq.n	80049de <HAL_LTDC_IRQHandler+0x6a>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f022 0204 	bic.w	r2, r2, #4
 80049ae:	635a      	str	r2, [r3, #52]	@ 0x34
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	2204      	movs	r2, #4
 80049b6:	63da      	str	r2, [r3, #60]	@ 0x3c
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80049be:	f043 0201 	orr.w	r2, r3, #1
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2204      	movs	r2, #4
 80049cc:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f000 f86f 	bl	8004abc <HAL_LTDC_ErrorCallback>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d023      	beq.n	8004a30 <HAL_LTDC_IRQHandler+0xbc>
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	f003 0302 	and.w	r3, r3, #2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d01e      	beq.n	8004a30 <HAL_LTDC_IRQHandler+0xbc>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f022 0202 	bic.w	r2, r2, #2
 8004a00:	635a      	str	r2, [r3, #52]	@ 0x34
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2202      	movs	r2, #2
 8004a08:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8004a10:	f043 0202 	orr.w	r2, r3, #2
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2204      	movs	r2, #4
 8004a1e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f846 	bl	8004abc <HAL_LTDC_ErrorCallback>
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f003 0301 	and.w	r3, r3, #1
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d01b      	beq.n	8004a72 <HAL_LTDC_IRQHandler+0xfe>
 8004a3a:	68bb      	ldr	r3, [r7, #8]
 8004a3c:	f003 0301 	and.w	r3, r3, #1
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d016      	beq.n	8004a72 <HAL_LTDC_IRQHandler+0xfe>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f022 0201 	bic.w	r2, r2, #1
 8004a52:	635a      	str	r2, [r3, #52]	@ 0x34
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	2201      	movs	r2, #1
 8004a5a:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2201      	movs	r2, #1
 8004a60:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 8004a6c:	6878      	ldr	r0, [r7, #4]
 8004a6e:	f000 f82f 	bl	8004ad0 <HAL_LTDC_LineEventCallback>
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f003 0308 	and.w	r3, r3, #8
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d01b      	beq.n	8004ab4 <HAL_LTDC_IRQHandler+0x140>
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d016      	beq.n	8004ab4 <HAL_LTDC_IRQHandler+0x140>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f022 0208 	bic.w	r2, r2, #8
 8004a94:	635a      	str	r2, [r3, #52]	@ 0x34
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	2208      	movs	r2, #8
 8004a9c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2200      	movs	r2, #0
 8004aaa:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f000 f818 	bl	8004ae4 <HAL_LTDC_ReloadEventCallback>
 8004ab4:	bf00      	nop
 8004ab6:	3710      	adds	r7, #16
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}

08004abc <HAL_LTDC_ErrorCallback>:
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	bf00      	nop
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr

08004ad0 <HAL_LTDC_LineEventCallback>:
 8004ad0:	b480      	push	{r7}
 8004ad2:	b083      	sub	sp, #12
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	bf00      	nop
 8004ada:	370c      	adds	r7, #12
 8004adc:	46bd      	mov	sp, r7
 8004ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae2:	4770      	bx	lr

08004ae4 <HAL_LTDC_ReloadEventCallback>:
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <HAL_LTDC_ConfigLayer>:
 8004af8:	b5b0      	push	{r4, r5, r7, lr}
 8004afa:	b084      	sub	sp, #16
 8004afc:	af00      	add	r7, sp, #0
 8004afe:	60f8      	str	r0, [r7, #12]
 8004b00:	60b9      	str	r1, [r7, #8]
 8004b02:	607a      	str	r2, [r7, #4]
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8004b0a:	2b01      	cmp	r3, #1
 8004b0c:	d101      	bne.n	8004b12 <HAL_LTDC_ConfigLayer+0x1a>
 8004b0e:	2302      	movs	r3, #2
 8004b10:	e02c      	b.n	8004b6c <HAL_LTDC_ConfigLayer+0x74>
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2201      	movs	r2, #1
 8004b16:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2202      	movs	r2, #2
 8004b1e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2134      	movs	r1, #52	@ 0x34
 8004b28:	fb01 f303 	mul.w	r3, r1, r3
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	4614      	mov	r4, r2
 8004b36:	461d      	mov	r5, r3
 8004b38:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b3a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b3c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b3e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004b42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004b44:	682b      	ldr	r3, [r5, #0]
 8004b46:	6023      	str	r3, [r4, #0]
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	68b9      	ldr	r1, [r7, #8]
 8004b4c:	68f8      	ldr	r0, [r7, #12]
 8004b4e:	f000 f811 	bl	8004b74 <LTDC_SetConfig>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	2201      	movs	r2, #1
 8004b58:	625a      	str	r2, [r3, #36]	@ 0x24
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	2200      	movs	r2, #0
 8004b66:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bdb0      	pop	{r4, r5, r7, pc}

08004b74 <LTDC_SetConfig>:
 8004b74:	b480      	push	{r7}
 8004b76:	b089      	sub	sp, #36	@ 0x24
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	685a      	ldr	r2, [r3, #4]
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	0c1b      	lsrs	r3, r3, #16
 8004b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b90:	4413      	add	r3, r2
 8004b92:	041b      	lsls	r3, r3, #16
 8004b94:	61fb      	str	r3, [r7, #28]
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	461a      	mov	r2, r3
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	01db      	lsls	r3, r3, #7
 8004ba0:	4413      	add	r3, r2
 8004ba2:	3384      	adds	r3, #132	@ 0x84
 8004ba4:	685b      	ldr	r3, [r3, #4]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	6812      	ldr	r2, [r2, #0]
 8004baa:	4611      	mov	r1, r2
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	01d2      	lsls	r2, r2, #7
 8004bb0:	440a      	add	r2, r1
 8004bb2:	3284      	adds	r2, #132	@ 0x84
 8004bb4:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004bb8:	6053      	str	r3, [r2, #4]
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68db      	ldr	r3, [r3, #12]
 8004bc4:	0c1b      	lsrs	r3, r3, #16
 8004bc6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bca:	4413      	add	r3, r2
 8004bcc:	1c5a      	adds	r2, r3, #1
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4619      	mov	r1, r3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	01db      	lsls	r3, r3, #7
 8004bd8:	440b      	add	r3, r1
 8004bda:	3384      	adds	r3, #132	@ 0x84
 8004bdc:	4619      	mov	r1, r3
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	4313      	orrs	r3, r2
 8004be2:	604b      	str	r3, [r1, #4]
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	68da      	ldr	r2, [r3, #12]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004bf2:	4413      	add	r3, r2
 8004bf4:	041b      	lsls	r3, r3, #16
 8004bf6:	61fb      	str	r3, [r7, #28]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	01db      	lsls	r3, r3, #7
 8004c02:	4413      	add	r3, r2
 8004c04:	3384      	adds	r3, #132	@ 0x84
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	68fa      	ldr	r2, [r7, #12]
 8004c0a:	6812      	ldr	r2, [r2, #0]
 8004c0c:	4611      	mov	r1, r2
 8004c0e:	687a      	ldr	r2, [r7, #4]
 8004c10:	01d2      	lsls	r2, r2, #7
 8004c12:	440a      	add	r2, r1
 8004c14:	3284      	adds	r2, #132	@ 0x84
 8004c16:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8004c1a:	6093      	str	r3, [r2, #8]
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	689a      	ldr	r2, [r3, #8]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	68db      	ldr	r3, [r3, #12]
 8004c26:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004c2a:	4413      	add	r3, r2
 8004c2c:	1c5a      	adds	r2, r3, #1
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	4619      	mov	r1, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	01db      	lsls	r3, r3, #7
 8004c38:	440b      	add	r3, r1
 8004c3a:	3384      	adds	r3, #132	@ 0x84
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	4313      	orrs	r3, r2
 8004c42:	608b      	str	r3, [r1, #8]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	461a      	mov	r2, r3
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	01db      	lsls	r3, r3, #7
 8004c4e:	4413      	add	r3, r2
 8004c50:	3384      	adds	r3, #132	@ 0x84
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	68fa      	ldr	r2, [r7, #12]
 8004c56:	6812      	ldr	r2, [r2, #0]
 8004c58:	4611      	mov	r1, r2
 8004c5a:	687a      	ldr	r2, [r7, #4]
 8004c5c:	01d2      	lsls	r2, r2, #7
 8004c5e:	440a      	add	r2, r1
 8004c60:	3284      	adds	r2, #132	@ 0x84
 8004c62:	f023 0307 	bic.w	r3, r3, #7
 8004c66:	6113      	str	r3, [r2, #16]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	461a      	mov	r2, r3
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	01db      	lsls	r3, r3, #7
 8004c72:	4413      	add	r3, r2
 8004c74:	3384      	adds	r3, #132	@ 0x84
 8004c76:	461a      	mov	r2, r3
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	691b      	ldr	r3, [r3, #16]
 8004c7c:	6113      	str	r3, [r2, #16]
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8004c84:	021b      	lsls	r3, r3, #8
 8004c86:	61fb      	str	r3, [r7, #28]
 8004c88:	68bb      	ldr	r3, [r7, #8]
 8004c8a:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8004c8e:	041b      	lsls	r3, r3, #16
 8004c90:	61bb      	str	r3, [r7, #24]
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	061b      	lsls	r3, r3, #24
 8004c98:	617b      	str	r3, [r7, #20]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	01db      	lsls	r3, r3, #7
 8004ca4:	4413      	add	r3, r2
 8004ca6:	3384      	adds	r3, #132	@ 0x84
 8004ca8:	699b      	ldr	r3, [r3, #24]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	01db      	lsls	r3, r3, #7
 8004cb4:	4413      	add	r3, r2
 8004cb6:	3384      	adds	r3, #132	@ 0x84
 8004cb8:	461a      	mov	r2, r3
 8004cba:	2300      	movs	r3, #0
 8004cbc:	6193      	str	r3, [r2, #24]
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	69fb      	ldr	r3, [r7, #28]
 8004cc8:	431a      	orrs	r2, r3
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	431a      	orrs	r2, r3
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4619      	mov	r1, r3
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	01db      	lsls	r3, r3, #7
 8004cd8:	440b      	add	r3, r1
 8004cda:	3384      	adds	r3, #132	@ 0x84
 8004cdc:	4619      	mov	r1, r3
 8004cde:	697b      	ldr	r3, [r7, #20]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	618b      	str	r3, [r1, #24]
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	461a      	mov	r2, r3
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	01db      	lsls	r3, r3, #7
 8004cee:	4413      	add	r3, r2
 8004cf0:	3384      	adds	r3, #132	@ 0x84
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	68fa      	ldr	r2, [r7, #12]
 8004cf6:	6812      	ldr	r2, [r2, #0]
 8004cf8:	4611      	mov	r1, r2
 8004cfa:	687a      	ldr	r2, [r7, #4]
 8004cfc:	01d2      	lsls	r2, r2, #7
 8004cfe:	440a      	add	r2, r1
 8004d00:	3284      	adds	r2, #132	@ 0x84
 8004d02:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004d06:	6153      	str	r3, [r2, #20]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	461a      	mov	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	01db      	lsls	r3, r3, #7
 8004d12:	4413      	add	r3, r2
 8004d14:	3384      	adds	r3, #132	@ 0x84
 8004d16:	461a      	mov	r2, r3
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	695b      	ldr	r3, [r3, #20]
 8004d1c:	6153      	str	r3, [r2, #20]
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	461a      	mov	r2, r3
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	01db      	lsls	r3, r3, #7
 8004d28:	4413      	add	r3, r2
 8004d2a:	3384      	adds	r3, #132	@ 0x84
 8004d2c:	69db      	ldr	r3, [r3, #28]
 8004d2e:	68fa      	ldr	r2, [r7, #12]
 8004d30:	6812      	ldr	r2, [r2, #0]
 8004d32:	4611      	mov	r1, r2
 8004d34:	687a      	ldr	r2, [r7, #4]
 8004d36:	01d2      	lsls	r2, r2, #7
 8004d38:	440a      	add	r2, r1
 8004d3a:	3284      	adds	r2, #132	@ 0x84
 8004d3c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8004d40:	f023 0307 	bic.w	r3, r3, #7
 8004d44:	61d3      	str	r3, [r2, #28]
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	69da      	ldr	r2, [r3, #28]
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	6a1b      	ldr	r3, [r3, #32]
 8004d4e:	68f9      	ldr	r1, [r7, #12]
 8004d50:	6809      	ldr	r1, [r1, #0]
 8004d52:	4608      	mov	r0, r1
 8004d54:	6879      	ldr	r1, [r7, #4]
 8004d56:	01c9      	lsls	r1, r1, #7
 8004d58:	4401      	add	r1, r0
 8004d5a:	3184      	adds	r1, #132	@ 0x84
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	61cb      	str	r3, [r1, #28]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	461a      	mov	r2, r3
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	01db      	lsls	r3, r3, #7
 8004d6a:	4413      	add	r3, r2
 8004d6c:	3384      	adds	r3, #132	@ 0x84
 8004d6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	461a      	mov	r2, r3
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	01db      	lsls	r3, r3, #7
 8004d7a:	4413      	add	r3, r2
 8004d7c:	3384      	adds	r3, #132	@ 0x84
 8004d7e:	461a      	mov	r2, r3
 8004d80:	2300      	movs	r3, #0
 8004d82:	6293      	str	r3, [r2, #40]	@ 0x28
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	461a      	mov	r2, r3
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	01db      	lsls	r3, r3, #7
 8004d8e:	4413      	add	r3, r2
 8004d90:	3384      	adds	r3, #132	@ 0x84
 8004d92:	461a      	mov	r2, r3
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d98:	6293      	str	r3, [r2, #40]	@ 0x28
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	691b      	ldr	r3, [r3, #16]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d102      	bne.n	8004da8 <LTDC_SetConfig+0x234>
 8004da2:	2304      	movs	r3, #4
 8004da4:	61fb      	str	r3, [r7, #28]
 8004da6:	e01b      	b.n	8004de0 <LTDC_SetConfig+0x26c>
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	691b      	ldr	r3, [r3, #16]
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d102      	bne.n	8004db6 <LTDC_SetConfig+0x242>
 8004db0:	2303      	movs	r3, #3
 8004db2:	61fb      	str	r3, [r7, #28]
 8004db4:	e014      	b.n	8004de0 <LTDC_SetConfig+0x26c>
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	2b04      	cmp	r3, #4
 8004dbc:	d00b      	beq.n	8004dd6 <LTDC_SetConfig+0x262>
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	691b      	ldr	r3, [r3, #16]
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d007      	beq.n	8004dd6 <LTDC_SetConfig+0x262>
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	2b03      	cmp	r3, #3
 8004dcc:	d003      	beq.n	8004dd6 <LTDC_SetConfig+0x262>
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	691b      	ldr	r3, [r3, #16]
 8004dd2:	2b07      	cmp	r3, #7
 8004dd4:	d102      	bne.n	8004ddc <LTDC_SetConfig+0x268>
 8004dd6:	2302      	movs	r3, #2
 8004dd8:	61fb      	str	r3, [r7, #28]
 8004dda:	e001      	b.n	8004de0 <LTDC_SetConfig+0x26c>
 8004ddc:	2301      	movs	r3, #1
 8004dde:	61fb      	str	r3, [r7, #28]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	461a      	mov	r2, r3
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	01db      	lsls	r3, r3, #7
 8004dea:	4413      	add	r3, r2
 8004dec:	3384      	adds	r3, #132	@ 0x84
 8004dee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	6812      	ldr	r2, [r2, #0]
 8004df4:	4611      	mov	r1, r2
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	01d2      	lsls	r2, r2, #7
 8004dfa:	440a      	add	r2, r1
 8004dfc:	3284      	adds	r2, #132	@ 0x84
 8004dfe:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8004e02:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e08:	69fa      	ldr	r2, [r7, #28]
 8004e0a:	fb02 f303 	mul.w	r3, r2, r3
 8004e0e:	041a      	lsls	r2, r3, #16
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	6859      	ldr	r1, [r3, #4]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	1acb      	subs	r3, r1, r3
 8004e1a:	69f9      	ldr	r1, [r7, #28]
 8004e1c:	fb01 f303 	mul.w	r3, r1, r3
 8004e20:	3303      	adds	r3, #3
 8004e22:	68f9      	ldr	r1, [r7, #12]
 8004e24:	6809      	ldr	r1, [r1, #0]
 8004e26:	4608      	mov	r0, r1
 8004e28:	6879      	ldr	r1, [r7, #4]
 8004e2a:	01c9      	lsls	r1, r1, #7
 8004e2c:	4401      	add	r1, r0
 8004e2e:	3184      	adds	r1, #132	@ 0x84
 8004e30:	4313      	orrs	r3, r2
 8004e32:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	461a      	mov	r2, r3
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	01db      	lsls	r3, r3, #7
 8004e3e:	4413      	add	r3, r2
 8004e40:	3384      	adds	r3, #132	@ 0x84
 8004e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	6812      	ldr	r2, [r2, #0]
 8004e48:	4611      	mov	r1, r2
 8004e4a:	687a      	ldr	r2, [r7, #4]
 8004e4c:	01d2      	lsls	r2, r2, #7
 8004e4e:	440a      	add	r2, r1
 8004e50:	3284      	adds	r2, #132	@ 0x84
 8004e52:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004e56:	f023 0307 	bic.w	r3, r3, #7
 8004e5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	461a      	mov	r2, r3
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	01db      	lsls	r3, r3, #7
 8004e66:	4413      	add	r3, r2
 8004e68:	3384      	adds	r3, #132	@ 0x84
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	68bb      	ldr	r3, [r7, #8]
 8004e6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e70:	6313      	str	r3, [r2, #48]	@ 0x30
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	461a      	mov	r2, r3
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	01db      	lsls	r3, r3, #7
 8004e7c:	4413      	add	r3, r2
 8004e7e:	3384      	adds	r3, #132	@ 0x84
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68fa      	ldr	r2, [r7, #12]
 8004e84:	6812      	ldr	r2, [r2, #0]
 8004e86:	4611      	mov	r1, r2
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	01d2      	lsls	r2, r2, #7
 8004e8c:	440a      	add	r2, r1
 8004e8e:	3284      	adds	r2, #132	@ 0x84
 8004e90:	f043 0301 	orr.w	r3, r3, #1
 8004e94:	6013      	str	r3, [r2, #0]
 8004e96:	bf00      	nop
 8004e98:	3724      	adds	r7, #36	@ 0x24
 8004e9a:	46bd      	mov	sp, r7
 8004e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea0:	4770      	bx	lr
	...

08004ea4 <HAL_RCC_OscConfig>:
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b086      	sub	sp, #24
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x12>
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e267      	b.n	8005386 <HAL_RCC_OscConfig+0x4e2>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d075      	beq.n	8004fae <HAL_RCC_OscConfig+0x10a>
 8004ec2:	4b88      	ldr	r3, [pc, #544]	@ (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f003 030c 	and.w	r3, r3, #12
 8004eca:	2b04      	cmp	r3, #4
 8004ecc:	d00c      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x44>
 8004ece:	4b85      	ldr	r3, [pc, #532]	@ (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004ed0:	689b      	ldr	r3, [r3, #8]
 8004ed2:	f003 030c 	and.w	r3, r3, #12
 8004ed6:	2b08      	cmp	r3, #8
 8004ed8:	d112      	bne.n	8004f00 <HAL_RCC_OscConfig+0x5c>
 8004eda:	4b82      	ldr	r3, [pc, #520]	@ (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ee2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004ee6:	d10b      	bne.n	8004f00 <HAL_RCC_OscConfig+0x5c>
 8004ee8:	4b7e      	ldr	r3, [pc, #504]	@ (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d05b      	beq.n	8004fac <HAL_RCC_OscConfig+0x108>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d157      	bne.n	8004fac <HAL_RCC_OscConfig+0x108>
 8004efc:	2301      	movs	r3, #1
 8004efe:	e242      	b.n	8005386 <HAL_RCC_OscConfig+0x4e2>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f08:	d106      	bne.n	8004f18 <HAL_RCC_OscConfig+0x74>
 8004f0a:	4b76      	ldr	r3, [pc, #472]	@ (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a75      	ldr	r2, [pc, #468]	@ (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004f10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	e01d      	b.n	8004f54 <HAL_RCC_OscConfig+0xb0>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004f20:	d10c      	bne.n	8004f3c <HAL_RCC_OscConfig+0x98>
 8004f22:	4b70      	ldr	r3, [pc, #448]	@ (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a6f      	ldr	r2, [pc, #444]	@ (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004f28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004f2c:	6013      	str	r3, [r2, #0]
 8004f2e:	4b6d      	ldr	r3, [pc, #436]	@ (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a6c      	ldr	r2, [pc, #432]	@ (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004f34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004f38:	6013      	str	r3, [r2, #0]
 8004f3a:	e00b      	b.n	8004f54 <HAL_RCC_OscConfig+0xb0>
 8004f3c:	4b69      	ldr	r3, [pc, #420]	@ (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a68      	ldr	r2, [pc, #416]	@ (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004f42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004f46:	6013      	str	r3, [r2, #0]
 8004f48:	4b66      	ldr	r3, [pc, #408]	@ (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a65      	ldr	r2, [pc, #404]	@ (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004f4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004f52:	6013      	str	r3, [r2, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d013      	beq.n	8004f84 <HAL_RCC_OscConfig+0xe0>
 8004f5c:	f7fc fc66 	bl	800182c <HAL_GetTick>
 8004f60:	6138      	str	r0, [r7, #16]
 8004f62:	e008      	b.n	8004f76 <HAL_RCC_OscConfig+0xd2>
 8004f64:	f7fc fc62 	bl	800182c <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b64      	cmp	r3, #100	@ 0x64
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0xd2>
 8004f72:	2303      	movs	r3, #3
 8004f74:	e207      	b.n	8005386 <HAL_RCC_OscConfig+0x4e2>
 8004f76:	4b5b      	ldr	r3, [pc, #364]	@ (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d0f0      	beq.n	8004f64 <HAL_RCC_OscConfig+0xc0>
 8004f82:	e014      	b.n	8004fae <HAL_RCC_OscConfig+0x10a>
 8004f84:	f7fc fc52 	bl	800182c <HAL_GetTick>
 8004f88:	6138      	str	r0, [r7, #16]
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_OscConfig+0xfa>
 8004f8c:	f7fc fc4e 	bl	800182c <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b64      	cmp	r3, #100	@ 0x64
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0xfa>
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e1f3      	b.n	8005386 <HAL_RCC_OscConfig+0x4e2>
 8004f9e:	4b51      	ldr	r3, [pc, #324]	@ (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1f0      	bne.n	8004f8c <HAL_RCC_OscConfig+0xe8>
 8004faa:	e000      	b.n	8004fae <HAL_RCC_OscConfig+0x10a>
 8004fac:	bf00      	nop
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d063      	beq.n	8005082 <HAL_RCC_OscConfig+0x1de>
 8004fba:	4b4a      	ldr	r3, [pc, #296]	@ (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f003 030c 	and.w	r3, r3, #12
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d00b      	beq.n	8004fde <HAL_RCC_OscConfig+0x13a>
 8004fc6:	4b47      	ldr	r3, [pc, #284]	@ (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004fc8:	689b      	ldr	r3, [r3, #8]
 8004fca:	f003 030c 	and.w	r3, r3, #12
 8004fce:	2b08      	cmp	r3, #8
 8004fd0:	d11c      	bne.n	800500c <HAL_RCC_OscConfig+0x168>
 8004fd2:	4b44      	ldr	r3, [pc, #272]	@ (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d116      	bne.n	800500c <HAL_RCC_OscConfig+0x168>
 8004fde:	4b41      	ldr	r3, [pc, #260]	@ (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d005      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x152>
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	68db      	ldr	r3, [r3, #12]
 8004fee:	2b01      	cmp	r3, #1
 8004ff0:	d001      	beq.n	8004ff6 <HAL_RCC_OscConfig+0x152>
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	e1c7      	b.n	8005386 <HAL_RCC_OscConfig+0x4e2>
 8004ff6:	4b3b      	ldr	r3, [pc, #236]	@ (80050e4 <HAL_RCC_OscConfig+0x240>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	691b      	ldr	r3, [r3, #16]
 8005002:	00db      	lsls	r3, r3, #3
 8005004:	4937      	ldr	r1, [pc, #220]	@ (80050e4 <HAL_RCC_OscConfig+0x240>)
 8005006:	4313      	orrs	r3, r2
 8005008:	600b      	str	r3, [r1, #0]
 800500a:	e03a      	b.n	8005082 <HAL_RCC_OscConfig+0x1de>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d020      	beq.n	8005056 <HAL_RCC_OscConfig+0x1b2>
 8005014:	4b34      	ldr	r3, [pc, #208]	@ (80050e8 <HAL_RCC_OscConfig+0x244>)
 8005016:	2201      	movs	r2, #1
 8005018:	601a      	str	r2, [r3, #0]
 800501a:	f7fc fc07 	bl	800182c <HAL_GetTick>
 800501e:	6138      	str	r0, [r7, #16]
 8005020:	e008      	b.n	8005034 <HAL_RCC_OscConfig+0x190>
 8005022:	f7fc fc03 	bl	800182c <HAL_GetTick>
 8005026:	4602      	mov	r2, r0
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	1ad3      	subs	r3, r2, r3
 800502c:	2b02      	cmp	r3, #2
 800502e:	d901      	bls.n	8005034 <HAL_RCC_OscConfig+0x190>
 8005030:	2303      	movs	r3, #3
 8005032:	e1a8      	b.n	8005386 <HAL_RCC_OscConfig+0x4e2>
 8005034:	4b2b      	ldr	r3, [pc, #172]	@ (80050e4 <HAL_RCC_OscConfig+0x240>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d0f0      	beq.n	8005022 <HAL_RCC_OscConfig+0x17e>
 8005040:	4b28      	ldr	r3, [pc, #160]	@ (80050e4 <HAL_RCC_OscConfig+0x240>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	691b      	ldr	r3, [r3, #16]
 800504c:	00db      	lsls	r3, r3, #3
 800504e:	4925      	ldr	r1, [pc, #148]	@ (80050e4 <HAL_RCC_OscConfig+0x240>)
 8005050:	4313      	orrs	r3, r2
 8005052:	600b      	str	r3, [r1, #0]
 8005054:	e015      	b.n	8005082 <HAL_RCC_OscConfig+0x1de>
 8005056:	4b24      	ldr	r3, [pc, #144]	@ (80050e8 <HAL_RCC_OscConfig+0x244>)
 8005058:	2200      	movs	r2, #0
 800505a:	601a      	str	r2, [r3, #0]
 800505c:	f7fc fbe6 	bl	800182c <HAL_GetTick>
 8005060:	6138      	str	r0, [r7, #16]
 8005062:	e008      	b.n	8005076 <HAL_RCC_OscConfig+0x1d2>
 8005064:	f7fc fbe2 	bl	800182c <HAL_GetTick>
 8005068:	4602      	mov	r2, r0
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	1ad3      	subs	r3, r2, r3
 800506e:	2b02      	cmp	r3, #2
 8005070:	d901      	bls.n	8005076 <HAL_RCC_OscConfig+0x1d2>
 8005072:	2303      	movs	r3, #3
 8005074:	e187      	b.n	8005386 <HAL_RCC_OscConfig+0x4e2>
 8005076:	4b1b      	ldr	r3, [pc, #108]	@ (80050e4 <HAL_RCC_OscConfig+0x240>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b00      	cmp	r3, #0
 8005080:	d1f0      	bne.n	8005064 <HAL_RCC_OscConfig+0x1c0>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f003 0308 	and.w	r3, r3, #8
 800508a:	2b00      	cmp	r3, #0
 800508c:	d036      	beq.n	80050fc <HAL_RCC_OscConfig+0x258>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	695b      	ldr	r3, [r3, #20]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d016      	beq.n	80050c4 <HAL_RCC_OscConfig+0x220>
 8005096:	4b15      	ldr	r3, [pc, #84]	@ (80050ec <HAL_RCC_OscConfig+0x248>)
 8005098:	2201      	movs	r2, #1
 800509a:	601a      	str	r2, [r3, #0]
 800509c:	f7fc fbc6 	bl	800182c <HAL_GetTick>
 80050a0:	6138      	str	r0, [r7, #16]
 80050a2:	e008      	b.n	80050b6 <HAL_RCC_OscConfig+0x212>
 80050a4:	f7fc fbc2 	bl	800182c <HAL_GetTick>
 80050a8:	4602      	mov	r2, r0
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	1ad3      	subs	r3, r2, r3
 80050ae:	2b02      	cmp	r3, #2
 80050b0:	d901      	bls.n	80050b6 <HAL_RCC_OscConfig+0x212>
 80050b2:	2303      	movs	r3, #3
 80050b4:	e167      	b.n	8005386 <HAL_RCC_OscConfig+0x4e2>
 80050b6:	4b0b      	ldr	r3, [pc, #44]	@ (80050e4 <HAL_RCC_OscConfig+0x240>)
 80050b8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050ba:	f003 0302 	and.w	r3, r3, #2
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d0f0      	beq.n	80050a4 <HAL_RCC_OscConfig+0x200>
 80050c2:	e01b      	b.n	80050fc <HAL_RCC_OscConfig+0x258>
 80050c4:	4b09      	ldr	r3, [pc, #36]	@ (80050ec <HAL_RCC_OscConfig+0x248>)
 80050c6:	2200      	movs	r2, #0
 80050c8:	601a      	str	r2, [r3, #0]
 80050ca:	f7fc fbaf 	bl	800182c <HAL_GetTick>
 80050ce:	6138      	str	r0, [r7, #16]
 80050d0:	e00e      	b.n	80050f0 <HAL_RCC_OscConfig+0x24c>
 80050d2:	f7fc fbab 	bl	800182c <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d907      	bls.n	80050f0 <HAL_RCC_OscConfig+0x24c>
 80050e0:	2303      	movs	r3, #3
 80050e2:	e150      	b.n	8005386 <HAL_RCC_OscConfig+0x4e2>
 80050e4:	40023800 	.word	0x40023800
 80050e8:	42470000 	.word	0x42470000
 80050ec:	42470e80 	.word	0x42470e80
 80050f0:	4b88      	ldr	r3, [pc, #544]	@ (8005314 <HAL_RCC_OscConfig+0x470>)
 80050f2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80050f4:	f003 0302 	and.w	r3, r3, #2
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1ea      	bne.n	80050d2 <HAL_RCC_OscConfig+0x22e>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0304 	and.w	r3, r3, #4
 8005104:	2b00      	cmp	r3, #0
 8005106:	f000 8097 	beq.w	8005238 <HAL_RCC_OscConfig+0x394>
 800510a:	2300      	movs	r3, #0
 800510c:	75fb      	strb	r3, [r7, #23]
 800510e:	4b81      	ldr	r3, [pc, #516]	@ (8005314 <HAL_RCC_OscConfig+0x470>)
 8005110:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005112:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d10f      	bne.n	800513a <HAL_RCC_OscConfig+0x296>
 800511a:	2300      	movs	r3, #0
 800511c:	60bb      	str	r3, [r7, #8]
 800511e:	4b7d      	ldr	r3, [pc, #500]	@ (8005314 <HAL_RCC_OscConfig+0x470>)
 8005120:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005122:	4a7c      	ldr	r2, [pc, #496]	@ (8005314 <HAL_RCC_OscConfig+0x470>)
 8005124:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005128:	6413      	str	r3, [r2, #64]	@ 0x40
 800512a:	4b7a      	ldr	r3, [pc, #488]	@ (8005314 <HAL_RCC_OscConfig+0x470>)
 800512c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005132:	60bb      	str	r3, [r7, #8]
 8005134:	68bb      	ldr	r3, [r7, #8]
 8005136:	2301      	movs	r3, #1
 8005138:	75fb      	strb	r3, [r7, #23]
 800513a:	4b77      	ldr	r3, [pc, #476]	@ (8005318 <HAL_RCC_OscConfig+0x474>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005142:	2b00      	cmp	r3, #0
 8005144:	d118      	bne.n	8005178 <HAL_RCC_OscConfig+0x2d4>
 8005146:	4b74      	ldr	r3, [pc, #464]	@ (8005318 <HAL_RCC_OscConfig+0x474>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a73      	ldr	r2, [pc, #460]	@ (8005318 <HAL_RCC_OscConfig+0x474>)
 800514c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005150:	6013      	str	r3, [r2, #0]
 8005152:	f7fc fb6b 	bl	800182c <HAL_GetTick>
 8005156:	6138      	str	r0, [r7, #16]
 8005158:	e008      	b.n	800516c <HAL_RCC_OscConfig+0x2c8>
 800515a:	f7fc fb67 	bl	800182c <HAL_GetTick>
 800515e:	4602      	mov	r2, r0
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	1ad3      	subs	r3, r2, r3
 8005164:	2b02      	cmp	r3, #2
 8005166:	d901      	bls.n	800516c <HAL_RCC_OscConfig+0x2c8>
 8005168:	2303      	movs	r3, #3
 800516a:	e10c      	b.n	8005386 <HAL_RCC_OscConfig+0x4e2>
 800516c:	4b6a      	ldr	r3, [pc, #424]	@ (8005318 <HAL_RCC_OscConfig+0x474>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005174:	2b00      	cmp	r3, #0
 8005176:	d0f0      	beq.n	800515a <HAL_RCC_OscConfig+0x2b6>
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d106      	bne.n	800518e <HAL_RCC_OscConfig+0x2ea>
 8005180:	4b64      	ldr	r3, [pc, #400]	@ (8005314 <HAL_RCC_OscConfig+0x470>)
 8005182:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005184:	4a63      	ldr	r2, [pc, #396]	@ (8005314 <HAL_RCC_OscConfig+0x470>)
 8005186:	f043 0301 	orr.w	r3, r3, #1
 800518a:	6713      	str	r3, [r2, #112]	@ 0x70
 800518c:	e01c      	b.n	80051c8 <HAL_RCC_OscConfig+0x324>
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	2b05      	cmp	r3, #5
 8005194:	d10c      	bne.n	80051b0 <HAL_RCC_OscConfig+0x30c>
 8005196:	4b5f      	ldr	r3, [pc, #380]	@ (8005314 <HAL_RCC_OscConfig+0x470>)
 8005198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800519a:	4a5e      	ldr	r2, [pc, #376]	@ (8005314 <HAL_RCC_OscConfig+0x470>)
 800519c:	f043 0304 	orr.w	r3, r3, #4
 80051a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80051a2:	4b5c      	ldr	r3, [pc, #368]	@ (8005314 <HAL_RCC_OscConfig+0x470>)
 80051a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051a6:	4a5b      	ldr	r2, [pc, #364]	@ (8005314 <HAL_RCC_OscConfig+0x470>)
 80051a8:	f043 0301 	orr.w	r3, r3, #1
 80051ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80051ae:	e00b      	b.n	80051c8 <HAL_RCC_OscConfig+0x324>
 80051b0:	4b58      	ldr	r3, [pc, #352]	@ (8005314 <HAL_RCC_OscConfig+0x470>)
 80051b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051b4:	4a57      	ldr	r2, [pc, #348]	@ (8005314 <HAL_RCC_OscConfig+0x470>)
 80051b6:	f023 0301 	bic.w	r3, r3, #1
 80051ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80051bc:	4b55      	ldr	r3, [pc, #340]	@ (8005314 <HAL_RCC_OscConfig+0x470>)
 80051be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051c0:	4a54      	ldr	r2, [pc, #336]	@ (8005314 <HAL_RCC_OscConfig+0x470>)
 80051c2:	f023 0304 	bic.w	r3, r3, #4
 80051c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	689b      	ldr	r3, [r3, #8]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d015      	beq.n	80051fc <HAL_RCC_OscConfig+0x358>
 80051d0:	f7fc fb2c 	bl	800182c <HAL_GetTick>
 80051d4:	6138      	str	r0, [r7, #16]
 80051d6:	e00a      	b.n	80051ee <HAL_RCC_OscConfig+0x34a>
 80051d8:	f7fc fb28 	bl	800182c <HAL_GetTick>
 80051dc:	4602      	mov	r2, r0
 80051de:	693b      	ldr	r3, [r7, #16]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d901      	bls.n	80051ee <HAL_RCC_OscConfig+0x34a>
 80051ea:	2303      	movs	r3, #3
 80051ec:	e0cb      	b.n	8005386 <HAL_RCC_OscConfig+0x4e2>
 80051ee:	4b49      	ldr	r3, [pc, #292]	@ (8005314 <HAL_RCC_OscConfig+0x470>)
 80051f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d0ee      	beq.n	80051d8 <HAL_RCC_OscConfig+0x334>
 80051fa:	e014      	b.n	8005226 <HAL_RCC_OscConfig+0x382>
 80051fc:	f7fc fb16 	bl	800182c <HAL_GetTick>
 8005200:	6138      	str	r0, [r7, #16]
 8005202:	e00a      	b.n	800521a <HAL_RCC_OscConfig+0x376>
 8005204:	f7fc fb12 	bl	800182c <HAL_GetTick>
 8005208:	4602      	mov	r2, r0
 800520a:	693b      	ldr	r3, [r7, #16]
 800520c:	1ad3      	subs	r3, r2, r3
 800520e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005212:	4293      	cmp	r3, r2
 8005214:	d901      	bls.n	800521a <HAL_RCC_OscConfig+0x376>
 8005216:	2303      	movs	r3, #3
 8005218:	e0b5      	b.n	8005386 <HAL_RCC_OscConfig+0x4e2>
 800521a:	4b3e      	ldr	r3, [pc, #248]	@ (8005314 <HAL_RCC_OscConfig+0x470>)
 800521c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800521e:	f003 0302 	and.w	r3, r3, #2
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1ee      	bne.n	8005204 <HAL_RCC_OscConfig+0x360>
 8005226:	7dfb      	ldrb	r3, [r7, #23]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d105      	bne.n	8005238 <HAL_RCC_OscConfig+0x394>
 800522c:	4b39      	ldr	r3, [pc, #228]	@ (8005314 <HAL_RCC_OscConfig+0x470>)
 800522e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005230:	4a38      	ldr	r2, [pc, #224]	@ (8005314 <HAL_RCC_OscConfig+0x470>)
 8005232:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005236:	6413      	str	r3, [r2, #64]	@ 0x40
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	699b      	ldr	r3, [r3, #24]
 800523c:	2b00      	cmp	r3, #0
 800523e:	f000 80a1 	beq.w	8005384 <HAL_RCC_OscConfig+0x4e0>
 8005242:	4b34      	ldr	r3, [pc, #208]	@ (8005314 <HAL_RCC_OscConfig+0x470>)
 8005244:	689b      	ldr	r3, [r3, #8]
 8005246:	f003 030c 	and.w	r3, r3, #12
 800524a:	2b08      	cmp	r3, #8
 800524c:	d05c      	beq.n	8005308 <HAL_RCC_OscConfig+0x464>
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	699b      	ldr	r3, [r3, #24]
 8005252:	2b02      	cmp	r3, #2
 8005254:	d141      	bne.n	80052da <HAL_RCC_OscConfig+0x436>
 8005256:	4b31      	ldr	r3, [pc, #196]	@ (800531c <HAL_RCC_OscConfig+0x478>)
 8005258:	2200      	movs	r2, #0
 800525a:	601a      	str	r2, [r3, #0]
 800525c:	f7fc fae6 	bl	800182c <HAL_GetTick>
 8005260:	6138      	str	r0, [r7, #16]
 8005262:	e008      	b.n	8005276 <HAL_RCC_OscConfig+0x3d2>
 8005264:	f7fc fae2 	bl	800182c <HAL_GetTick>
 8005268:	4602      	mov	r2, r0
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	1ad3      	subs	r3, r2, r3
 800526e:	2b02      	cmp	r3, #2
 8005270:	d901      	bls.n	8005276 <HAL_RCC_OscConfig+0x3d2>
 8005272:	2303      	movs	r3, #3
 8005274:	e087      	b.n	8005386 <HAL_RCC_OscConfig+0x4e2>
 8005276:	4b27      	ldr	r3, [pc, #156]	@ (8005314 <HAL_RCC_OscConfig+0x470>)
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d1f0      	bne.n	8005264 <HAL_RCC_OscConfig+0x3c0>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	69da      	ldr	r2, [r3, #28]
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6a1b      	ldr	r3, [r3, #32]
 800528a:	431a      	orrs	r2, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005290:	019b      	lsls	r3, r3, #6
 8005292:	431a      	orrs	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005298:	085b      	lsrs	r3, r3, #1
 800529a:	3b01      	subs	r3, #1
 800529c:	041b      	lsls	r3, r3, #16
 800529e:	431a      	orrs	r2, r3
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a4:	061b      	lsls	r3, r3, #24
 80052a6:	491b      	ldr	r1, [pc, #108]	@ (8005314 <HAL_RCC_OscConfig+0x470>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	604b      	str	r3, [r1, #4]
 80052ac:	4b1b      	ldr	r3, [pc, #108]	@ (800531c <HAL_RCC_OscConfig+0x478>)
 80052ae:	2201      	movs	r2, #1
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	f7fc fabb 	bl	800182c <HAL_GetTick>
 80052b6:	6138      	str	r0, [r7, #16]
 80052b8:	e008      	b.n	80052cc <HAL_RCC_OscConfig+0x428>
 80052ba:	f7fc fab7 	bl	800182c <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	2b02      	cmp	r3, #2
 80052c6:	d901      	bls.n	80052cc <HAL_RCC_OscConfig+0x428>
 80052c8:	2303      	movs	r3, #3
 80052ca:	e05c      	b.n	8005386 <HAL_RCC_OscConfig+0x4e2>
 80052cc:	4b11      	ldr	r3, [pc, #68]	@ (8005314 <HAL_RCC_OscConfig+0x470>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d0f0      	beq.n	80052ba <HAL_RCC_OscConfig+0x416>
 80052d8:	e054      	b.n	8005384 <HAL_RCC_OscConfig+0x4e0>
 80052da:	4b10      	ldr	r3, [pc, #64]	@ (800531c <HAL_RCC_OscConfig+0x478>)
 80052dc:	2200      	movs	r2, #0
 80052de:	601a      	str	r2, [r3, #0]
 80052e0:	f7fc faa4 	bl	800182c <HAL_GetTick>
 80052e4:	6138      	str	r0, [r7, #16]
 80052e6:	e008      	b.n	80052fa <HAL_RCC_OscConfig+0x456>
 80052e8:	f7fc faa0 	bl	800182c <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b02      	cmp	r3, #2
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_OscConfig+0x456>
 80052f6:	2303      	movs	r3, #3
 80052f8:	e045      	b.n	8005386 <HAL_RCC_OscConfig+0x4e2>
 80052fa:	4b06      	ldr	r3, [pc, #24]	@ (8005314 <HAL_RCC_OscConfig+0x470>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1f0      	bne.n	80052e8 <HAL_RCC_OscConfig+0x444>
 8005306:	e03d      	b.n	8005384 <HAL_RCC_OscConfig+0x4e0>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	699b      	ldr	r3, [r3, #24]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d107      	bne.n	8005320 <HAL_RCC_OscConfig+0x47c>
 8005310:	2301      	movs	r3, #1
 8005312:	e038      	b.n	8005386 <HAL_RCC_OscConfig+0x4e2>
 8005314:	40023800 	.word	0x40023800
 8005318:	40007000 	.word	0x40007000
 800531c:	42470060 	.word	0x42470060
 8005320:	4b1b      	ldr	r3, [pc, #108]	@ (8005390 <HAL_RCC_OscConfig+0x4ec>)
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	60fb      	str	r3, [r7, #12]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	2b01      	cmp	r3, #1
 800532c:	d028      	beq.n	8005380 <HAL_RCC_OscConfig+0x4dc>
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	69db      	ldr	r3, [r3, #28]
 8005338:	429a      	cmp	r2, r3
 800533a:	d121      	bne.n	8005380 <HAL_RCC_OscConfig+0x4dc>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6a1b      	ldr	r3, [r3, #32]
 8005346:	429a      	cmp	r2, r3
 8005348:	d11a      	bne.n	8005380 <HAL_RCC_OscConfig+0x4dc>
 800534a:	68fa      	ldr	r2, [r7, #12]
 800534c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005350:	4013      	ands	r3, r2
 8005352:	687a      	ldr	r2, [r7, #4]
 8005354:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005356:	0192      	lsls	r2, r2, #6
 8005358:	4293      	cmp	r3, r2
 800535a:	d111      	bne.n	8005380 <HAL_RCC_OscConfig+0x4dc>
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005366:	085b      	lsrs	r3, r3, #1
 8005368:	3b01      	subs	r3, #1
 800536a:	041b      	lsls	r3, r3, #16
 800536c:	429a      	cmp	r2, r3
 800536e:	d107      	bne.n	8005380 <HAL_RCC_OscConfig+0x4dc>
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800537a:	061b      	lsls	r3, r3, #24
 800537c:	429a      	cmp	r2, r3
 800537e:	d001      	beq.n	8005384 <HAL_RCC_OscConfig+0x4e0>
 8005380:	2301      	movs	r3, #1
 8005382:	e000      	b.n	8005386 <HAL_RCC_OscConfig+0x4e2>
 8005384:	2300      	movs	r3, #0
 8005386:	4618      	mov	r0, r3
 8005388:	3718      	adds	r7, #24
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	40023800 	.word	0x40023800

08005394 <HAL_RCC_ClockConfig>:
 8005394:	b580      	push	{r7, lr}
 8005396:	b084      	sub	sp, #16
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
 800539c:	6039      	str	r1, [r7, #0]
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d101      	bne.n	80053a8 <HAL_RCC_ClockConfig+0x14>
 80053a4:	2301      	movs	r3, #1
 80053a6:	e0cc      	b.n	8005542 <HAL_RCC_ClockConfig+0x1ae>
 80053a8:	4b68      	ldr	r3, [pc, #416]	@ (800554c <HAL_RCC_ClockConfig+0x1b8>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f003 030f 	and.w	r3, r3, #15
 80053b0:	683a      	ldr	r2, [r7, #0]
 80053b2:	429a      	cmp	r2, r3
 80053b4:	d90c      	bls.n	80053d0 <HAL_RCC_ClockConfig+0x3c>
 80053b6:	4b65      	ldr	r3, [pc, #404]	@ (800554c <HAL_RCC_ClockConfig+0x1b8>)
 80053b8:	683a      	ldr	r2, [r7, #0]
 80053ba:	b2d2      	uxtb	r2, r2
 80053bc:	701a      	strb	r2, [r3, #0]
 80053be:	4b63      	ldr	r3, [pc, #396]	@ (800554c <HAL_RCC_ClockConfig+0x1b8>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f003 030f 	and.w	r3, r3, #15
 80053c6:	683a      	ldr	r2, [r7, #0]
 80053c8:	429a      	cmp	r2, r3
 80053ca:	d001      	beq.n	80053d0 <HAL_RCC_ClockConfig+0x3c>
 80053cc:	2301      	movs	r3, #1
 80053ce:	e0b8      	b.n	8005542 <HAL_RCC_ClockConfig+0x1ae>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 0302 	and.w	r3, r3, #2
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d020      	beq.n	800541e <HAL_RCC_ClockConfig+0x8a>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0304 	and.w	r3, r3, #4
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d005      	beq.n	80053f4 <HAL_RCC_ClockConfig+0x60>
 80053e8:	4b59      	ldr	r3, [pc, #356]	@ (8005550 <HAL_RCC_ClockConfig+0x1bc>)
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	4a58      	ldr	r2, [pc, #352]	@ (8005550 <HAL_RCC_ClockConfig+0x1bc>)
 80053ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80053f2:	6093      	str	r3, [r2, #8]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0308 	and.w	r3, r3, #8
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d005      	beq.n	800540c <HAL_RCC_ClockConfig+0x78>
 8005400:	4b53      	ldr	r3, [pc, #332]	@ (8005550 <HAL_RCC_ClockConfig+0x1bc>)
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	4a52      	ldr	r2, [pc, #328]	@ (8005550 <HAL_RCC_ClockConfig+0x1bc>)
 8005406:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800540a:	6093      	str	r3, [r2, #8]
 800540c:	4b50      	ldr	r3, [pc, #320]	@ (8005550 <HAL_RCC_ClockConfig+0x1bc>)
 800540e:	689b      	ldr	r3, [r3, #8]
 8005410:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	689b      	ldr	r3, [r3, #8]
 8005418:	494d      	ldr	r1, [pc, #308]	@ (8005550 <HAL_RCC_ClockConfig+0x1bc>)
 800541a:	4313      	orrs	r3, r2
 800541c:	608b      	str	r3, [r1, #8]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f003 0301 	and.w	r3, r3, #1
 8005426:	2b00      	cmp	r3, #0
 8005428:	d044      	beq.n	80054b4 <HAL_RCC_ClockConfig+0x120>
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2b01      	cmp	r3, #1
 8005430:	d107      	bne.n	8005442 <HAL_RCC_ClockConfig+0xae>
 8005432:	4b47      	ldr	r3, [pc, #284]	@ (8005550 <HAL_RCC_ClockConfig+0x1bc>)
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800543a:	2b00      	cmp	r3, #0
 800543c:	d119      	bne.n	8005472 <HAL_RCC_ClockConfig+0xde>
 800543e:	2301      	movs	r3, #1
 8005440:	e07f      	b.n	8005542 <HAL_RCC_ClockConfig+0x1ae>
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	685b      	ldr	r3, [r3, #4]
 8005446:	2b02      	cmp	r3, #2
 8005448:	d003      	beq.n	8005452 <HAL_RCC_ClockConfig+0xbe>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	685b      	ldr	r3, [r3, #4]
 800544e:	2b03      	cmp	r3, #3
 8005450:	d107      	bne.n	8005462 <HAL_RCC_ClockConfig+0xce>
 8005452:	4b3f      	ldr	r3, [pc, #252]	@ (8005550 <HAL_RCC_ClockConfig+0x1bc>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d109      	bne.n	8005472 <HAL_RCC_ClockConfig+0xde>
 800545e:	2301      	movs	r3, #1
 8005460:	e06f      	b.n	8005542 <HAL_RCC_ClockConfig+0x1ae>
 8005462:	4b3b      	ldr	r3, [pc, #236]	@ (8005550 <HAL_RCC_ClockConfig+0x1bc>)
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	f003 0302 	and.w	r3, r3, #2
 800546a:	2b00      	cmp	r3, #0
 800546c:	d101      	bne.n	8005472 <HAL_RCC_ClockConfig+0xde>
 800546e:	2301      	movs	r3, #1
 8005470:	e067      	b.n	8005542 <HAL_RCC_ClockConfig+0x1ae>
 8005472:	4b37      	ldr	r3, [pc, #220]	@ (8005550 <HAL_RCC_ClockConfig+0x1bc>)
 8005474:	689b      	ldr	r3, [r3, #8]
 8005476:	f023 0203 	bic.w	r2, r3, #3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	4934      	ldr	r1, [pc, #208]	@ (8005550 <HAL_RCC_ClockConfig+0x1bc>)
 8005480:	4313      	orrs	r3, r2
 8005482:	608b      	str	r3, [r1, #8]
 8005484:	f7fc f9d2 	bl	800182c <HAL_GetTick>
 8005488:	60f8      	str	r0, [r7, #12]
 800548a:	e00a      	b.n	80054a2 <HAL_RCC_ClockConfig+0x10e>
 800548c:	f7fc f9ce 	bl	800182c <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	f241 3288 	movw	r2, #5000	@ 0x1388
 800549a:	4293      	cmp	r3, r2
 800549c:	d901      	bls.n	80054a2 <HAL_RCC_ClockConfig+0x10e>
 800549e:	2303      	movs	r3, #3
 80054a0:	e04f      	b.n	8005542 <HAL_RCC_ClockConfig+0x1ae>
 80054a2:	4b2b      	ldr	r3, [pc, #172]	@ (8005550 <HAL_RCC_ClockConfig+0x1bc>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f003 020c 	and.w	r2, r3, #12
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d1eb      	bne.n	800548c <HAL_RCC_ClockConfig+0xf8>
 80054b4:	4b25      	ldr	r3, [pc, #148]	@ (800554c <HAL_RCC_ClockConfig+0x1b8>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f003 030f 	and.w	r3, r3, #15
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d20c      	bcs.n	80054dc <HAL_RCC_ClockConfig+0x148>
 80054c2:	4b22      	ldr	r3, [pc, #136]	@ (800554c <HAL_RCC_ClockConfig+0x1b8>)
 80054c4:	683a      	ldr	r2, [r7, #0]
 80054c6:	b2d2      	uxtb	r2, r2
 80054c8:	701a      	strb	r2, [r3, #0]
 80054ca:	4b20      	ldr	r3, [pc, #128]	@ (800554c <HAL_RCC_ClockConfig+0x1b8>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f003 030f 	and.w	r3, r3, #15
 80054d2:	683a      	ldr	r2, [r7, #0]
 80054d4:	429a      	cmp	r2, r3
 80054d6:	d001      	beq.n	80054dc <HAL_RCC_ClockConfig+0x148>
 80054d8:	2301      	movs	r3, #1
 80054da:	e032      	b.n	8005542 <HAL_RCC_ClockConfig+0x1ae>
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d008      	beq.n	80054fa <HAL_RCC_ClockConfig+0x166>
 80054e8:	4b19      	ldr	r3, [pc, #100]	@ (8005550 <HAL_RCC_ClockConfig+0x1bc>)
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	4916      	ldr	r1, [pc, #88]	@ (8005550 <HAL_RCC_ClockConfig+0x1bc>)
 80054f6:	4313      	orrs	r3, r2
 80054f8:	608b      	str	r3, [r1, #8]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0308 	and.w	r3, r3, #8
 8005502:	2b00      	cmp	r3, #0
 8005504:	d009      	beq.n	800551a <HAL_RCC_ClockConfig+0x186>
 8005506:	4b12      	ldr	r3, [pc, #72]	@ (8005550 <HAL_RCC_ClockConfig+0x1bc>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	691b      	ldr	r3, [r3, #16]
 8005512:	00db      	lsls	r3, r3, #3
 8005514:	490e      	ldr	r1, [pc, #56]	@ (8005550 <HAL_RCC_ClockConfig+0x1bc>)
 8005516:	4313      	orrs	r3, r2
 8005518:	608b      	str	r3, [r1, #8]
 800551a:	f000 f821 	bl	8005560 <HAL_RCC_GetSysClockFreq>
 800551e:	4602      	mov	r2, r0
 8005520:	4b0b      	ldr	r3, [pc, #44]	@ (8005550 <HAL_RCC_ClockConfig+0x1bc>)
 8005522:	689b      	ldr	r3, [r3, #8]
 8005524:	091b      	lsrs	r3, r3, #4
 8005526:	f003 030f 	and.w	r3, r3, #15
 800552a:	490a      	ldr	r1, [pc, #40]	@ (8005554 <HAL_RCC_ClockConfig+0x1c0>)
 800552c:	5ccb      	ldrb	r3, [r1, r3]
 800552e:	fa22 f303 	lsr.w	r3, r2, r3
 8005532:	4a09      	ldr	r2, [pc, #36]	@ (8005558 <HAL_RCC_ClockConfig+0x1c4>)
 8005534:	6013      	str	r3, [r2, #0]
 8005536:	4b09      	ldr	r3, [pc, #36]	@ (800555c <HAL_RCC_ClockConfig+0x1c8>)
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	4618      	mov	r0, r3
 800553c:	f7fb fffa 	bl	8001534 <HAL_InitTick>
 8005540:	2300      	movs	r3, #0
 8005542:	4618      	mov	r0, r3
 8005544:	3710      	adds	r7, #16
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	40023c00 	.word	0x40023c00
 8005550:	40023800 	.word	0x40023800
 8005554:	0800be34 	.word	0x0800be34
 8005558:	20000000 	.word	0x20000000
 800555c:	20000004 	.word	0x20000004

08005560 <HAL_RCC_GetSysClockFreq>:
 8005560:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005564:	b094      	sub	sp, #80	@ 0x50
 8005566:	af00      	add	r7, sp, #0
 8005568:	2300      	movs	r3, #0
 800556a:	647b      	str	r3, [r7, #68]	@ 0x44
 800556c:	2300      	movs	r3, #0
 800556e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005570:	2300      	movs	r3, #0
 8005572:	643b      	str	r3, [r7, #64]	@ 0x40
 8005574:	2300      	movs	r3, #0
 8005576:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005578:	4b79      	ldr	r3, [pc, #484]	@ (8005760 <HAL_RCC_GetSysClockFreq+0x200>)
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f003 030c 	and.w	r3, r3, #12
 8005580:	2b08      	cmp	r3, #8
 8005582:	d00d      	beq.n	80055a0 <HAL_RCC_GetSysClockFreq+0x40>
 8005584:	2b08      	cmp	r3, #8
 8005586:	f200 80e1 	bhi.w	800574c <HAL_RCC_GetSysClockFreq+0x1ec>
 800558a:	2b00      	cmp	r3, #0
 800558c:	d002      	beq.n	8005594 <HAL_RCC_GetSysClockFreq+0x34>
 800558e:	2b04      	cmp	r3, #4
 8005590:	d003      	beq.n	800559a <HAL_RCC_GetSysClockFreq+0x3a>
 8005592:	e0db      	b.n	800574c <HAL_RCC_GetSysClockFreq+0x1ec>
 8005594:	4b73      	ldr	r3, [pc, #460]	@ (8005764 <HAL_RCC_GetSysClockFreq+0x204>)
 8005596:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005598:	e0db      	b.n	8005752 <HAL_RCC_GetSysClockFreq+0x1f2>
 800559a:	4b73      	ldr	r3, [pc, #460]	@ (8005768 <HAL_RCC_GetSysClockFreq+0x208>)
 800559c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800559e:	e0d8      	b.n	8005752 <HAL_RCC_GetSysClockFreq+0x1f2>
 80055a0:	4b6f      	ldr	r3, [pc, #444]	@ (8005760 <HAL_RCC_GetSysClockFreq+0x200>)
 80055a2:	685b      	ldr	r3, [r3, #4]
 80055a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80055a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80055aa:	4b6d      	ldr	r3, [pc, #436]	@ (8005760 <HAL_RCC_GetSysClockFreq+0x200>)
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d063      	beq.n	800567e <HAL_RCC_GetSysClockFreq+0x11e>
 80055b6:	4b6a      	ldr	r3, [pc, #424]	@ (8005760 <HAL_RCC_GetSysClockFreq+0x200>)
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	099b      	lsrs	r3, r3, #6
 80055bc:	2200      	movs	r2, #0
 80055be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80055c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80055c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80055c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80055ca:	2300      	movs	r3, #0
 80055cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80055ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80055d2:	4622      	mov	r2, r4
 80055d4:	462b      	mov	r3, r5
 80055d6:	f04f 0000 	mov.w	r0, #0
 80055da:	f04f 0100 	mov.w	r1, #0
 80055de:	0159      	lsls	r1, r3, #5
 80055e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055e4:	0150      	lsls	r0, r2, #5
 80055e6:	4602      	mov	r2, r0
 80055e8:	460b      	mov	r3, r1
 80055ea:	4621      	mov	r1, r4
 80055ec:	1a51      	subs	r1, r2, r1
 80055ee:	6139      	str	r1, [r7, #16]
 80055f0:	4629      	mov	r1, r5
 80055f2:	eb63 0301 	sbc.w	r3, r3, r1
 80055f6:	617b      	str	r3, [r7, #20]
 80055f8:	f04f 0200 	mov.w	r2, #0
 80055fc:	f04f 0300 	mov.w	r3, #0
 8005600:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005604:	4659      	mov	r1, fp
 8005606:	018b      	lsls	r3, r1, #6
 8005608:	4651      	mov	r1, sl
 800560a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800560e:	4651      	mov	r1, sl
 8005610:	018a      	lsls	r2, r1, #6
 8005612:	4651      	mov	r1, sl
 8005614:	ebb2 0801 	subs.w	r8, r2, r1
 8005618:	4659      	mov	r1, fp
 800561a:	eb63 0901 	sbc.w	r9, r3, r1
 800561e:	f04f 0200 	mov.w	r2, #0
 8005622:	f04f 0300 	mov.w	r3, #0
 8005626:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800562a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800562e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005632:	4690      	mov	r8, r2
 8005634:	4699      	mov	r9, r3
 8005636:	4623      	mov	r3, r4
 8005638:	eb18 0303 	adds.w	r3, r8, r3
 800563c:	60bb      	str	r3, [r7, #8]
 800563e:	462b      	mov	r3, r5
 8005640:	eb49 0303 	adc.w	r3, r9, r3
 8005644:	60fb      	str	r3, [r7, #12]
 8005646:	f04f 0200 	mov.w	r2, #0
 800564a:	f04f 0300 	mov.w	r3, #0
 800564e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005652:	4629      	mov	r1, r5
 8005654:	024b      	lsls	r3, r1, #9
 8005656:	4621      	mov	r1, r4
 8005658:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800565c:	4621      	mov	r1, r4
 800565e:	024a      	lsls	r2, r1, #9
 8005660:	4610      	mov	r0, r2
 8005662:	4619      	mov	r1, r3
 8005664:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005666:	2200      	movs	r2, #0
 8005668:	62bb      	str	r3, [r7, #40]	@ 0x28
 800566a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800566c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005670:	f7fa fe16 	bl	80002a0 <__aeabi_uldivmod>
 8005674:	4602      	mov	r2, r0
 8005676:	460b      	mov	r3, r1
 8005678:	4613      	mov	r3, r2
 800567a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800567c:	e058      	b.n	8005730 <HAL_RCC_GetSysClockFreq+0x1d0>
 800567e:	4b38      	ldr	r3, [pc, #224]	@ (8005760 <HAL_RCC_GetSysClockFreq+0x200>)
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	099b      	lsrs	r3, r3, #6
 8005684:	2200      	movs	r2, #0
 8005686:	4618      	mov	r0, r3
 8005688:	4611      	mov	r1, r2
 800568a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800568e:	623b      	str	r3, [r7, #32]
 8005690:	2300      	movs	r3, #0
 8005692:	627b      	str	r3, [r7, #36]	@ 0x24
 8005694:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005698:	4642      	mov	r2, r8
 800569a:	464b      	mov	r3, r9
 800569c:	f04f 0000 	mov.w	r0, #0
 80056a0:	f04f 0100 	mov.w	r1, #0
 80056a4:	0159      	lsls	r1, r3, #5
 80056a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80056aa:	0150      	lsls	r0, r2, #5
 80056ac:	4602      	mov	r2, r0
 80056ae:	460b      	mov	r3, r1
 80056b0:	4641      	mov	r1, r8
 80056b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80056b6:	4649      	mov	r1, r9
 80056b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80056bc:	f04f 0200 	mov.w	r2, #0
 80056c0:	f04f 0300 	mov.w	r3, #0
 80056c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80056c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80056cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80056d0:	ebb2 040a 	subs.w	r4, r2, sl
 80056d4:	eb63 050b 	sbc.w	r5, r3, fp
 80056d8:	f04f 0200 	mov.w	r2, #0
 80056dc:	f04f 0300 	mov.w	r3, #0
 80056e0:	00eb      	lsls	r3, r5, #3
 80056e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80056e6:	00e2      	lsls	r2, r4, #3
 80056e8:	4614      	mov	r4, r2
 80056ea:	461d      	mov	r5, r3
 80056ec:	4643      	mov	r3, r8
 80056ee:	18e3      	adds	r3, r4, r3
 80056f0:	603b      	str	r3, [r7, #0]
 80056f2:	464b      	mov	r3, r9
 80056f4:	eb45 0303 	adc.w	r3, r5, r3
 80056f8:	607b      	str	r3, [r7, #4]
 80056fa:	f04f 0200 	mov.w	r2, #0
 80056fe:	f04f 0300 	mov.w	r3, #0
 8005702:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005706:	4629      	mov	r1, r5
 8005708:	028b      	lsls	r3, r1, #10
 800570a:	4621      	mov	r1, r4
 800570c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005710:	4621      	mov	r1, r4
 8005712:	028a      	lsls	r2, r1, #10
 8005714:	4610      	mov	r0, r2
 8005716:	4619      	mov	r1, r3
 8005718:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800571a:	2200      	movs	r2, #0
 800571c:	61bb      	str	r3, [r7, #24]
 800571e:	61fa      	str	r2, [r7, #28]
 8005720:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005724:	f7fa fdbc 	bl	80002a0 <__aeabi_uldivmod>
 8005728:	4602      	mov	r2, r0
 800572a:	460b      	mov	r3, r1
 800572c:	4613      	mov	r3, r2
 800572e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005730:	4b0b      	ldr	r3, [pc, #44]	@ (8005760 <HAL_RCC_GetSysClockFreq+0x200>)
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	0c1b      	lsrs	r3, r3, #16
 8005736:	f003 0303 	and.w	r3, r3, #3
 800573a:	3301      	adds	r3, #1
 800573c:	005b      	lsls	r3, r3, #1
 800573e:	643b      	str	r3, [r7, #64]	@ 0x40
 8005740:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005742:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005744:	fbb2 f3f3 	udiv	r3, r2, r3
 8005748:	64bb      	str	r3, [r7, #72]	@ 0x48
 800574a:	e002      	b.n	8005752 <HAL_RCC_GetSysClockFreq+0x1f2>
 800574c:	4b05      	ldr	r3, [pc, #20]	@ (8005764 <HAL_RCC_GetSysClockFreq+0x204>)
 800574e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005750:	bf00      	nop
 8005752:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005754:	4618      	mov	r0, r3
 8005756:	3750      	adds	r7, #80	@ 0x50
 8005758:	46bd      	mov	sp, r7
 800575a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800575e:	bf00      	nop
 8005760:	40023800 	.word	0x40023800
 8005764:	00f42400 	.word	0x00f42400
 8005768:	007a1200 	.word	0x007a1200

0800576c <HAL_RCC_GetHCLKFreq>:
 800576c:	b480      	push	{r7}
 800576e:	af00      	add	r7, sp, #0
 8005770:	4b03      	ldr	r3, [pc, #12]	@ (8005780 <HAL_RCC_GetHCLKFreq+0x14>)
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4618      	mov	r0, r3
 8005776:	46bd      	mov	sp, r7
 8005778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop
 8005780:	20000000 	.word	0x20000000

08005784 <HAL_RCC_GetPCLK1Freq>:
 8005784:	b580      	push	{r7, lr}
 8005786:	af00      	add	r7, sp, #0
 8005788:	f7ff fff0 	bl	800576c <HAL_RCC_GetHCLKFreq>
 800578c:	4602      	mov	r2, r0
 800578e:	4b05      	ldr	r3, [pc, #20]	@ (80057a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	0a9b      	lsrs	r3, r3, #10
 8005794:	f003 0307 	and.w	r3, r3, #7
 8005798:	4903      	ldr	r1, [pc, #12]	@ (80057a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800579a:	5ccb      	ldrb	r3, [r1, r3]
 800579c:	fa22 f303 	lsr.w	r3, r2, r3
 80057a0:	4618      	mov	r0, r3
 80057a2:	bd80      	pop	{r7, pc}
 80057a4:	40023800 	.word	0x40023800
 80057a8:	0800be44 	.word	0x0800be44

080057ac <HAL_RCC_GetPCLK2Freq>:
 80057ac:	b580      	push	{r7, lr}
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	f7ff ffdc 	bl	800576c <HAL_RCC_GetHCLKFreq>
 80057b4:	4602      	mov	r2, r0
 80057b6:	4b05      	ldr	r3, [pc, #20]	@ (80057cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	0b5b      	lsrs	r3, r3, #13
 80057bc:	f003 0307 	and.w	r3, r3, #7
 80057c0:	4903      	ldr	r1, [pc, #12]	@ (80057d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80057c2:	5ccb      	ldrb	r3, [r1, r3]
 80057c4:	fa22 f303 	lsr.w	r3, r2, r3
 80057c8:	4618      	mov	r0, r3
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	40023800 	.word	0x40023800
 80057d0:	0800be44 	.word	0x0800be44

080057d4 <HAL_RCC_GetClockConfig>:
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]
 80057dc:	6039      	str	r1, [r7, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	220f      	movs	r2, #15
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	4b12      	ldr	r3, [pc, #72]	@ (8005830 <HAL_RCC_GetClockConfig+0x5c>)
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	f003 0203 	and.w	r2, r3, #3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	605a      	str	r2, [r3, #4]
 80057f0:	4b0f      	ldr	r3, [pc, #60]	@ (8005830 <HAL_RCC_GetClockConfig+0x5c>)
 80057f2:	689b      	ldr	r3, [r3, #8]
 80057f4:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	609a      	str	r2, [r3, #8]
 80057fc:	4b0c      	ldr	r3, [pc, #48]	@ (8005830 <HAL_RCC_GetClockConfig+0x5c>)
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	60da      	str	r2, [r3, #12]
 8005808:	4b09      	ldr	r3, [pc, #36]	@ (8005830 <HAL_RCC_GetClockConfig+0x5c>)
 800580a:	689b      	ldr	r3, [r3, #8]
 800580c:	08db      	lsrs	r3, r3, #3
 800580e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	611a      	str	r2, [r3, #16]
 8005816:	4b07      	ldr	r3, [pc, #28]	@ (8005834 <HAL_RCC_GetClockConfig+0x60>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f003 020f 	and.w	r2, r3, #15
 800581e:	683b      	ldr	r3, [r7, #0]
 8005820:	601a      	str	r2, [r3, #0]
 8005822:	bf00      	nop
 8005824:	370c      	adds	r7, #12
 8005826:	46bd      	mov	sp, r7
 8005828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582c:	4770      	bx	lr
 800582e:	bf00      	nop
 8005830:	40023800 	.word	0x40023800
 8005834:	40023c00 	.word	0x40023c00

08005838 <HAL_RCCEx_PeriphCLKConfig>:
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	2300      	movs	r3, #0
 8005842:	617b      	str	r3, [r7, #20]
 8005844:	2300      	movs	r3, #0
 8005846:	613b      	str	r3, [r7, #16]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f003 0301 	and.w	r3, r3, #1
 8005850:	2b00      	cmp	r3, #0
 8005852:	d10b      	bne.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x34>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f003 0302 	and.w	r3, r3, #2
 800585c:	2b00      	cmp	r3, #0
 800585e:	d105      	bne.n	800586c <HAL_RCCEx_PeriphCLKConfig+0x34>
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005868:	2b00      	cmp	r3, #0
 800586a:	d075      	beq.n	8005958 <HAL_RCCEx_PeriphCLKConfig+0x120>
 800586c:	4b91      	ldr	r3, [pc, #580]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800586e:	2200      	movs	r2, #0
 8005870:	601a      	str	r2, [r3, #0]
 8005872:	f7fb ffdb 	bl	800182c <HAL_GetTick>
 8005876:	6178      	str	r0, [r7, #20]
 8005878:	e008      	b.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x54>
 800587a:	f7fb ffd7 	bl	800182c <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	697b      	ldr	r3, [r7, #20]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	2b02      	cmp	r3, #2
 8005886:	d901      	bls.n	800588c <HAL_RCCEx_PeriphCLKConfig+0x54>
 8005888:	2303      	movs	r3, #3
 800588a:	e189      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800588c:	4b8a      	ldr	r3, [pc, #552]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005894:	2b00      	cmp	r3, #0
 8005896:	d1f0      	bne.n	800587a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f003 0301 	and.w	r3, r3, #1
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d009      	beq.n	80058b8 <HAL_RCCEx_PeriphCLKConfig+0x80>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	019a      	lsls	r2, r3, #6
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	689b      	ldr	r3, [r3, #8]
 80058ae:	071b      	lsls	r3, r3, #28
 80058b0:	4981      	ldr	r1, [pc, #516]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058b2:	4313      	orrs	r3, r2
 80058b4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0302 	and.w	r3, r3, #2
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d01f      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80058c4:	4b7c      	ldr	r3, [pc, #496]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058ca:	0f1b      	lsrs	r3, r3, #28
 80058cc:	f003 0307 	and.w	r3, r3, #7
 80058d0:	613b      	str	r3, [r7, #16]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	019a      	lsls	r2, r3, #6
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	061b      	lsls	r3, r3, #24
 80058de:	431a      	orrs	r2, r3
 80058e0:	693b      	ldr	r3, [r7, #16]
 80058e2:	071b      	lsls	r3, r3, #28
 80058e4:	4974      	ldr	r1, [pc, #464]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058e6:	4313      	orrs	r3, r2
 80058e8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 80058ec:	4b72      	ldr	r3, [pc, #456]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80058f2:	f023 021f 	bic.w	r2, r3, #31
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	69db      	ldr	r3, [r3, #28]
 80058fa:	3b01      	subs	r3, #1
 80058fc:	496e      	ldr	r1, [pc, #440]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00d      	beq.n	800592c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	685b      	ldr	r3, [r3, #4]
 8005914:	019a      	lsls	r2, r3, #6
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	061b      	lsls	r3, r3, #24
 800591c:	431a      	orrs	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	071b      	lsls	r3, r3, #28
 8005924:	4964      	ldr	r1, [pc, #400]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005926:	4313      	orrs	r3, r2
 8005928:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
 800592c:	4b61      	ldr	r3, [pc, #388]	@ (8005ab4 <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 800592e:	2201      	movs	r2, #1
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	f7fb ff7b 	bl	800182c <HAL_GetTick>
 8005936:	6178      	str	r0, [r7, #20]
 8005938:	e008      	b.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x114>
 800593a:	f7fb ff77 	bl	800182c <HAL_GetTick>
 800593e:	4602      	mov	r2, r0
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	1ad3      	subs	r3, r2, r3
 8005944:	2b02      	cmp	r3, #2
 8005946:	d901      	bls.n	800594c <HAL_RCCEx_PeriphCLKConfig+0x114>
 8005948:	2303      	movs	r3, #3
 800594a:	e129      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 800594c:	4b5a      	ldr	r3, [pc, #360]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d0f0      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x102>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f003 0304 	and.w	r3, r3, #4
 8005960:	2b00      	cmp	r3, #0
 8005962:	d105      	bne.n	8005970 <HAL_RCCEx_PeriphCLKConfig+0x138>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0308 	and.w	r3, r3, #8
 800596c:	2b00      	cmp	r3, #0
 800596e:	d079      	beq.n	8005a64 <HAL_RCCEx_PeriphCLKConfig+0x22c>
 8005970:	4b52      	ldr	r3, [pc, #328]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005972:	2200      	movs	r2, #0
 8005974:	601a      	str	r2, [r3, #0]
 8005976:	f7fb ff59 	bl	800182c <HAL_GetTick>
 800597a:	6178      	str	r0, [r7, #20]
 800597c:	e008      	b.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x158>
 800597e:	f7fb ff55 	bl	800182c <HAL_GetTick>
 8005982:	4602      	mov	r2, r0
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	1ad3      	subs	r3, r2, r3
 8005988:	2b02      	cmp	r3, #2
 800598a:	d901      	bls.n	8005990 <HAL_RCCEx_PeriphCLKConfig+0x158>
 800598c:	2303      	movs	r3, #3
 800598e:	e107      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005990:	4b49      	ldr	r3, [pc, #292]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005998:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800599c:	d0ef      	beq.n	800597e <HAL_RCCEx_PeriphCLKConfig+0x146>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 0304 	and.w	r3, r3, #4
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d020      	beq.n	80059ec <HAL_RCCEx_PeriphCLKConfig+0x1b4>
 80059aa:	4b43      	ldr	r3, [pc, #268]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059b0:	0f1b      	lsrs	r3, r3, #28
 80059b2:	f003 0307 	and.w	r3, r3, #7
 80059b6:	613b      	str	r3, [r7, #16]
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	019a      	lsls	r2, r3, #6
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	061b      	lsls	r3, r3, #24
 80059c4:	431a      	orrs	r2, r3
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	071b      	lsls	r3, r3, #28
 80059ca:	493b      	ldr	r1, [pc, #236]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80059d2:	4b39      	ldr	r3, [pc, #228]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80059d8:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	3b01      	subs	r3, #1
 80059e2:	021b      	lsls	r3, r3, #8
 80059e4:	4934      	ldr	r1, [pc, #208]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059e6:	4313      	orrs	r3, r2
 80059e8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 0308 	and.w	r3, r3, #8
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d01e      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 80059f8:	4b2f      	ldr	r3, [pc, #188]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80059fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80059fe:	0e1b      	lsrs	r3, r3, #24
 8005a00:	f003 030f 	and.w	r3, r3, #15
 8005a04:	613b      	str	r3, [r7, #16]
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	019a      	lsls	r2, r3, #6
 8005a0c:	693b      	ldr	r3, [r7, #16]
 8005a0e:	061b      	lsls	r3, r3, #24
 8005a10:	431a      	orrs	r2, r3
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	699b      	ldr	r3, [r3, #24]
 8005a16:	071b      	lsls	r3, r3, #28
 8005a18:	4927      	ldr	r1, [pc, #156]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8005a20:	4b25      	ldr	r3, [pc, #148]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a22:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005a26:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a2e:	4922      	ldr	r1, [pc, #136]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
 8005a36:	4b21      	ldr	r3, [pc, #132]	@ (8005abc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8005a38:	2201      	movs	r2, #1
 8005a3a:	601a      	str	r2, [r3, #0]
 8005a3c:	f7fb fef6 	bl	800182c <HAL_GetTick>
 8005a40:	6178      	str	r0, [r7, #20]
 8005a42:	e008      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005a44:	f7fb fef2 	bl	800182c <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b02      	cmp	r3, #2
 8005a50:	d901      	bls.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x21e>
 8005a52:	2303      	movs	r3, #3
 8005a54:	e0a4      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005a56:	4b18      	ldr	r3, [pc, #96]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8005a5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8005a62:	d1ef      	bne.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x20c>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f003 0320 	and.w	r3, r3, #32
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	f000 808b 	beq.w	8005b88 <HAL_RCCEx_PeriphCLKConfig+0x350>
 8005a72:	2300      	movs	r3, #0
 8005a74:	60fb      	str	r3, [r7, #12]
 8005a76:	4b10      	ldr	r3, [pc, #64]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a7a:	4a0f      	ldr	r2, [pc, #60]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a80:	6413      	str	r3, [r2, #64]	@ 0x40
 8005a82:	4b0d      	ldr	r3, [pc, #52]	@ (8005ab8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8005a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005a8a:	60fb      	str	r3, [r7, #12]
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a0b      	ldr	r2, [pc, #44]	@ (8005ac0 <HAL_RCCEx_PeriphCLKConfig+0x288>)
 8005a94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a98:	6013      	str	r3, [r2, #0]
 8005a9a:	f7fb fec7 	bl	800182c <HAL_GetTick>
 8005a9e:	6178      	str	r0, [r7, #20]
 8005aa0:	e010      	b.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8005aa2:	f7fb fec3 	bl	800182c <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d909      	bls.n	8005ac4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e075      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005ab4:	42470068 	.word	0x42470068
 8005ab8:	40023800 	.word	0x40023800
 8005abc:	42470070 	.word	0x42470070
 8005ac0:	40007000 	.word	0x40007000
 8005ac4:	4b38      	ldr	r3, [pc, #224]	@ (8005ba8 <HAL_RCCEx_PeriphCLKConfig+0x370>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d0e8      	beq.n	8005aa2 <HAL_RCCEx_PeriphCLKConfig+0x26a>
 8005ad0:	4b36      	ldr	r3, [pc, #216]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005ad2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ad4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ad8:	613b      	str	r3, [r7, #16]
 8005ada:	693b      	ldr	r3, [r7, #16]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d02f      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ae4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005ae8:	693a      	ldr	r2, [r7, #16]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d028      	beq.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005aee:	4b2f      	ldr	r3, [pc, #188]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005af0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005af2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005af6:	613b      	str	r3, [r7, #16]
 8005af8:	4b2d      	ldr	r3, [pc, #180]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005afa:	2201      	movs	r2, #1
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	4b2c      	ldr	r3, [pc, #176]	@ (8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x378>)
 8005b00:	2200      	movs	r2, #0
 8005b02:	601a      	str	r2, [r3, #0]
 8005b04:	4a29      	ldr	r2, [pc, #164]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	6713      	str	r3, [r2, #112]	@ 0x70
 8005b0a:	4b28      	ldr	r3, [pc, #160]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b0e:	f003 0301 	and.w	r3, r3, #1
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d114      	bne.n	8005b40 <HAL_RCCEx_PeriphCLKConfig+0x308>
 8005b16:	f7fb fe89 	bl	800182c <HAL_GetTick>
 8005b1a:	6178      	str	r0, [r7, #20]
 8005b1c:	e00a      	b.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005b1e:	f7fb fe85 	bl	800182c <HAL_GetTick>
 8005b22:	4602      	mov	r2, r0
 8005b24:	697b      	ldr	r3, [r7, #20]
 8005b26:	1ad3      	subs	r3, r2, r3
 8005b28:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b2c:	4293      	cmp	r3, r2
 8005b2e:	d901      	bls.n	8005b34 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8005b30:	2303      	movs	r3, #3
 8005b32:	e035      	b.n	8005ba0 <HAL_RCCEx_PeriphCLKConfig+0x368>
 8005b34:	4b1d      	ldr	r3, [pc, #116]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b36:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b38:	f003 0302 	and.w	r3, r3, #2
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d0ee      	beq.n	8005b1e <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b44:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005b48:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005b4c:	d10d      	bne.n	8005b6a <HAL_RCCEx_PeriphCLKConfig+0x332>
 8005b4e:	4b17      	ldr	r3, [pc, #92]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b5a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005b5e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005b62:	4912      	ldr	r1, [pc, #72]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b64:	4313      	orrs	r3, r2
 8005b66:	608b      	str	r3, [r1, #8]
 8005b68:	e005      	b.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x33e>
 8005b6a:	4b10      	ldr	r3, [pc, #64]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	4a0f      	ldr	r2, [pc, #60]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b70:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005b74:	6093      	str	r3, [r2, #8]
 8005b76:	4b0d      	ldr	r3, [pc, #52]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b78:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b7e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b82:	490a      	ldr	r1, [pc, #40]	@ (8005bac <HAL_RCCEx_PeriphCLKConfig+0x374>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	670b      	str	r3, [r1, #112]	@ 0x70
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f003 0310 	and.w	r3, r3, #16
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d004      	beq.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x366>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f893 202c 	ldrb.w	r2, [r3, #44]	@ 0x2c
 8005b9a:	4b06      	ldr	r3, [pc, #24]	@ (8005bb4 <HAL_RCCEx_PeriphCLKConfig+0x37c>)
 8005b9c:	601a      	str	r2, [r3, #0]
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	4618      	mov	r0, r3
 8005ba2:	3718      	adds	r7, #24
 8005ba4:	46bd      	mov	sp, r7
 8005ba6:	bd80      	pop	{r7, pc}
 8005ba8:	40007000 	.word	0x40007000
 8005bac:	40023800 	.word	0x40023800
 8005bb0:	42470e40 	.word	0x42470e40
 8005bb4:	424711e0 	.word	0x424711e0

08005bb8 <HAL_SDRAM_Init>:
 8005bb8:	b580      	push	{r7, lr}
 8005bba:	b082      	sub	sp, #8
 8005bbc:	af00      	add	r7, sp, #0
 8005bbe:	6078      	str	r0, [r7, #4]
 8005bc0:	6039      	str	r1, [r7, #0]
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d101      	bne.n	8005bcc <HAL_SDRAM_Init+0x14>
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e025      	b.n	8005c18 <HAL_SDRAM_Init+0x60>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d106      	bne.n	8005be6 <HAL_SDRAM_Init+0x2e>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f7fb fc9d 	bl	8001520 <HAL_SDRAM_MspInit>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2202      	movs	r2, #2
 8005bea:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681a      	ldr	r2, [r3, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	3304      	adds	r3, #4
 8005bf6:	4619      	mov	r1, r3
 8005bf8:	4610      	mov	r0, r2
 8005bfa:	f001 fe65 	bl	80078c8 <FMC_SDRAM_Init>
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6818      	ldr	r0, [r3, #0]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	461a      	mov	r2, r3
 8005c08:	6839      	ldr	r1, [r7, #0]
 8005c0a:	f001 feba 	bl	8007982 <FMC_SDRAM_Timing_Init>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2201      	movs	r2, #1
 8005c12:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
 8005c16:	2300      	movs	r3, #0
 8005c18:	4618      	mov	r0, r3
 8005c1a:	3708      	adds	r7, #8
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd80      	pop	{r7, pc}

08005c20 <HAL_SPI_Init>:
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b082      	sub	sp, #8
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d101      	bne.n	8005c32 <HAL_SPI_Init+0x12>
 8005c2e:	2301      	movs	r3, #1
 8005c30:	e07b      	b.n	8005d2a <HAL_SPI_Init+0x10a>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d108      	bne.n	8005c4c <HAL_SPI_Init+0x2c>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005c42:	d009      	beq.n	8005c58 <HAL_SPI_Init+0x38>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2200      	movs	r2, #0
 8005c48:	61da      	str	r2, [r3, #28]
 8005c4a:	e005      	b.n	8005c58 <HAL_SPI_Init+0x38>
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2200      	movs	r2, #0
 8005c50:	611a      	str	r2, [r3, #16]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2200      	movs	r2, #0
 8005c56:	615a      	str	r2, [r3, #20]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	629a      	str	r2, [r3, #40]	@ 0x28
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005c64:	b2db      	uxtb	r3, r3
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d106      	bne.n	8005c78 <HAL_SPI_Init+0x58>
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005c72:	6878      	ldr	r0, [r7, #4]
 8005c74:	f7fb fb10 	bl	8001298 <HAL_SPI_MspInit>
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2202      	movs	r2, #2
 8005c7c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681a      	ldr	r2, [r3, #0]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005c8e:	601a      	str	r2, [r3, #0]
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	685b      	ldr	r3, [r3, #4]
 8005c94:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005ca0:	431a      	orrs	r2, r3
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005caa:	431a      	orrs	r2, r3
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	f003 0302 	and.w	r3, r3, #2
 8005cb4:	431a      	orrs	r2, r3
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	695b      	ldr	r3, [r3, #20]
 8005cba:	f003 0301 	and.w	r3, r3, #1
 8005cbe:	431a      	orrs	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005cc8:	431a      	orrs	r2, r3
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	69db      	ldr	r3, [r3, #28]
 8005cce:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005cd2:	431a      	orrs	r2, r3
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6a1b      	ldr	r3, [r3, #32]
 8005cd8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cdc:	ea42 0103 	orr.w	r1, r2, r3
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005ce4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	430a      	orrs	r2, r1
 8005cee:	601a      	str	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	0c1b      	lsrs	r3, r3, #16
 8005cf6:	f003 0104 	and.w	r1, r3, #4
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cfe:	f003 0210 	and.w	r2, r3, #16
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	430a      	orrs	r2, r1
 8005d08:	605a      	str	r2, [r3, #4]
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	69da      	ldr	r2, [r3, #28]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d18:	61da      	str	r2, [r3, #28]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	655a      	str	r2, [r3, #84]	@ 0x54
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005d28:	2300      	movs	r3, #0
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3708      	adds	r7, #8
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}

08005d32 <HAL_SPI_Transmit>:
 8005d32:	b580      	push	{r7, lr}
 8005d34:	b088      	sub	sp, #32
 8005d36:	af00      	add	r7, sp, #0
 8005d38:	60f8      	str	r0, [r7, #12]
 8005d3a:	60b9      	str	r1, [r7, #8]
 8005d3c:	603b      	str	r3, [r7, #0]
 8005d3e:	4613      	mov	r3, r2
 8005d40:	80fb      	strh	r3, [r7, #6]
 8005d42:	f7fb fd73 	bl	800182c <HAL_GetTick>
 8005d46:	61f8      	str	r0, [r7, #28]
 8005d48:	88fb      	ldrh	r3, [r7, #6]
 8005d4a:	837b      	strh	r3, [r7, #26]
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005d52:	b2db      	uxtb	r3, r3
 8005d54:	2b01      	cmp	r3, #1
 8005d56:	d001      	beq.n	8005d5c <HAL_SPI_Transmit+0x2a>
 8005d58:	2302      	movs	r3, #2
 8005d5a:	e12a      	b.n	8005fb2 <HAL_SPI_Transmit+0x280>
 8005d5c:	68bb      	ldr	r3, [r7, #8]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d002      	beq.n	8005d68 <HAL_SPI_Transmit+0x36>
 8005d62:	88fb      	ldrh	r3, [r7, #6]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d101      	bne.n	8005d6c <HAL_SPI_Transmit+0x3a>
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e122      	b.n	8005fb2 <HAL_SPI_Transmit+0x280>
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d101      	bne.n	8005d7a <HAL_SPI_Transmit+0x48>
 8005d76:	2302      	movs	r3, #2
 8005d78:	e11b      	b.n	8005fb2 <HAL_SPI_Transmit+0x280>
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	2201      	movs	r2, #1
 8005d7e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2203      	movs	r2, #3
 8005d86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	655a      	str	r2, [r3, #84]	@ 0x54
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	68ba      	ldr	r2, [r7, #8]
 8005d94:	631a      	str	r2, [r3, #48]	@ 0x30
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	88fa      	ldrh	r2, [r7, #6]
 8005d9a:	869a      	strh	r2, [r3, #52]	@ 0x34
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	88fa      	ldrh	r2, [r7, #6]
 8005da0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	2200      	movs	r2, #0
 8005da6:	639a      	str	r2, [r3, #56]	@ 0x38
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2200      	movs	r2, #0
 8005dac:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	2200      	movs	r2, #0
 8005db2:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	2200      	movs	r2, #0
 8005db8:	645a      	str	r2, [r3, #68]	@ 0x44
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	641a      	str	r2, [r3, #64]	@ 0x40
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005dc8:	d10f      	bne.n	8005dea <HAL_SPI_Transmit+0xb8>
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	681a      	ldr	r2, [r3, #0]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005dd8:	601a      	str	r2, [r3, #0]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005de8:	601a      	str	r2, [r3, #0]
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005df4:	2b40      	cmp	r3, #64	@ 0x40
 8005df6:	d007      	beq.n	8005e08 <HAL_SPI_Transmit+0xd6>
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	681a      	ldr	r2, [r3, #0]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e06:	601a      	str	r2, [r3, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005e10:	d152      	bne.n	8005eb8 <HAL_SPI_Transmit+0x186>
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	685b      	ldr	r3, [r3, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d002      	beq.n	8005e20 <HAL_SPI_Transmit+0xee>
 8005e1a:	8b7b      	ldrh	r3, [r7, #26]
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d145      	bne.n	8005eac <HAL_SPI_Transmit+0x17a>
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e24:	881a      	ldrh	r2, [r3, #0]
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	60da      	str	r2, [r3, #12]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e30:	1c9a      	adds	r2, r3, #2
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e3a:	b29b      	uxth	r3, r3
 8005e3c:	3b01      	subs	r3, #1
 8005e3e:	b29a      	uxth	r2, r3
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005e44:	e032      	b.n	8005eac <HAL_SPI_Transmit+0x17a>
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	689b      	ldr	r3, [r3, #8]
 8005e4c:	f003 0302 	and.w	r3, r3, #2
 8005e50:	2b02      	cmp	r3, #2
 8005e52:	d112      	bne.n	8005e7a <HAL_SPI_Transmit+0x148>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e58:	881a      	ldrh	r2, [r3, #0]
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	60da      	str	r2, [r3, #12]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e64:	1c9a      	adds	r2, r3, #2
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	631a      	str	r2, [r3, #48]	@ 0x30
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	3b01      	subs	r3, #1
 8005e72:	b29a      	uxth	r2, r3
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005e78:	e018      	b.n	8005eac <HAL_SPI_Transmit+0x17a>
 8005e7a:	f7fb fcd7 	bl	800182c <HAL_GetTick>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	69fb      	ldr	r3, [r7, #28]
 8005e82:	1ad3      	subs	r3, r2, r3
 8005e84:	683a      	ldr	r2, [r7, #0]
 8005e86:	429a      	cmp	r2, r3
 8005e88:	d803      	bhi.n	8005e92 <HAL_SPI_Transmit+0x160>
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e90:	d102      	bne.n	8005e98 <HAL_SPI_Transmit+0x166>
 8005e92:	683b      	ldr	r3, [r7, #0]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d109      	bne.n	8005eac <HAL_SPI_Transmit+0x17a>
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005ea8:	2303      	movs	r3, #3
 8005eaa:	e082      	b.n	8005fb2 <HAL_SPI_Transmit+0x280>
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005eb0:	b29b      	uxth	r3, r3
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d1c7      	bne.n	8005e46 <HAL_SPI_Transmit+0x114>
 8005eb6:	e053      	b.n	8005f60 <HAL_SPI_Transmit+0x22e>
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d002      	beq.n	8005ec6 <HAL_SPI_Transmit+0x194>
 8005ec0:	8b7b      	ldrh	r3, [r7, #26]
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d147      	bne.n	8005f56 <HAL_SPI_Transmit+0x224>
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	330c      	adds	r3, #12
 8005ed0:	7812      	ldrb	r2, [r2, #0]
 8005ed2:	701a      	strb	r2, [r3, #0]
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ed8:	1c5a      	adds	r2, r3, #1
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005eec:	e033      	b.n	8005f56 <HAL_SPI_Transmit+0x224>
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	f003 0302 	and.w	r3, r3, #2
 8005ef8:	2b02      	cmp	r3, #2
 8005efa:	d113      	bne.n	8005f24 <HAL_SPI_Transmit+0x1f2>
 8005efc:	68fb      	ldr	r3, [r7, #12]
 8005efe:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	330c      	adds	r3, #12
 8005f06:	7812      	ldrb	r2, [r2, #0]
 8005f08:	701a      	strb	r2, [r3, #0]
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f0e:	1c5a      	adds	r2, r3, #1
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	631a      	str	r2, [r3, #48]	@ 0x30
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f18:	b29b      	uxth	r3, r3
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	b29a      	uxth	r2, r3
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005f22:	e018      	b.n	8005f56 <HAL_SPI_Transmit+0x224>
 8005f24:	f7fb fc82 	bl	800182c <HAL_GetTick>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	69fb      	ldr	r3, [r7, #28]
 8005f2c:	1ad3      	subs	r3, r2, r3
 8005f2e:	683a      	ldr	r2, [r7, #0]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d803      	bhi.n	8005f3c <HAL_SPI_Transmit+0x20a>
 8005f34:	683b      	ldr	r3, [r7, #0]
 8005f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3a:	d102      	bne.n	8005f42 <HAL_SPI_Transmit+0x210>
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d109      	bne.n	8005f56 <HAL_SPI_Transmit+0x224>
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	2201      	movs	r2, #1
 8005f46:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005f52:	2303      	movs	r3, #3
 8005f54:	e02d      	b.n	8005fb2 <HAL_SPI_Transmit+0x280>
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005f5a:	b29b      	uxth	r3, r3
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1c6      	bne.n	8005eee <HAL_SPI_Transmit+0x1bc>
 8005f60:	69fa      	ldr	r2, [r7, #28]
 8005f62:	6839      	ldr	r1, [r7, #0]
 8005f64:	68f8      	ldr	r0, [r7, #12]
 8005f66:	f000 fbd9 	bl	800671c <SPI_EndRxTxTransaction>
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d002      	beq.n	8005f76 <HAL_SPI_Transmit+0x244>
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2220      	movs	r2, #32
 8005f74:	655a      	str	r2, [r3, #84]	@ 0x54
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d10a      	bne.n	8005f94 <HAL_SPI_Transmit+0x262>
 8005f7e:	2300      	movs	r3, #0
 8005f80:	617b      	str	r3, [r7, #20]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	617b      	str	r3, [r7, #20]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	689b      	ldr	r3, [r3, #8]
 8005f90:	617b      	str	r3, [r7, #20]
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d001      	beq.n	8005fb0 <HAL_SPI_Transmit+0x27e>
 8005fac:	2301      	movs	r3, #1
 8005fae:	e000      	b.n	8005fb2 <HAL_SPI_Transmit+0x280>
 8005fb0:	2300      	movs	r3, #0
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	3720      	adds	r7, #32
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}

08005fba <HAL_SPI_Receive>:
 8005fba:	b580      	push	{r7, lr}
 8005fbc:	b088      	sub	sp, #32
 8005fbe:	af02      	add	r7, sp, #8
 8005fc0:	60f8      	str	r0, [r7, #12]
 8005fc2:	60b9      	str	r1, [r7, #8]
 8005fc4:	603b      	str	r3, [r7, #0]
 8005fc6:	4613      	mov	r3, r2
 8005fc8:	80fb      	strh	r3, [r7, #6]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b01      	cmp	r3, #1
 8005fd4:	d001      	beq.n	8005fda <HAL_SPI_Receive+0x20>
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	e104      	b.n	80061e4 <HAL_SPI_Receive+0x22a>
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005fe2:	d112      	bne.n	800600a <HAL_SPI_Receive+0x50>
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d10e      	bne.n	800600a <HAL_SPI_Receive+0x50>
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2204      	movs	r2, #4
 8005ff0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8005ff4:	88fa      	ldrh	r2, [r7, #6]
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	4613      	mov	r3, r2
 8005ffc:	68ba      	ldr	r2, [r7, #8]
 8005ffe:	68b9      	ldr	r1, [r7, #8]
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f000 f8f3 	bl	80061ec <HAL_SPI_TransmitReceive>
 8006006:	4603      	mov	r3, r0
 8006008:	e0ec      	b.n	80061e4 <HAL_SPI_Receive+0x22a>
 800600a:	f7fb fc0f 	bl	800182c <HAL_GetTick>
 800600e:	6178      	str	r0, [r7, #20]
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d002      	beq.n	800601c <HAL_SPI_Receive+0x62>
 8006016:	88fb      	ldrh	r3, [r7, #6]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d101      	bne.n	8006020 <HAL_SPI_Receive+0x66>
 800601c:	2301      	movs	r3, #1
 800601e:	e0e1      	b.n	80061e4 <HAL_SPI_Receive+0x22a>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006026:	2b01      	cmp	r3, #1
 8006028:	d101      	bne.n	800602e <HAL_SPI_Receive+0x74>
 800602a:	2302      	movs	r3, #2
 800602c:	e0da      	b.n	80061e4 <HAL_SPI_Receive+0x22a>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	2201      	movs	r2, #1
 8006032:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	2204      	movs	r2, #4
 800603a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	2200      	movs	r2, #0
 8006042:	655a      	str	r2, [r3, #84]	@ 0x54
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	639a      	str	r2, [r3, #56]	@ 0x38
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	88fa      	ldrh	r2, [r7, #6]
 800604e:	879a      	strh	r2, [r3, #60]	@ 0x3c
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	88fa      	ldrh	r2, [r7, #6]
 8006054:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	2200      	movs	r2, #0
 800605a:	631a      	str	r2, [r3, #48]	@ 0x30
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	2200      	movs	r2, #0
 8006060:	869a      	strh	r2, [r3, #52]	@ 0x34
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	2200      	movs	r2, #0
 8006066:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	2200      	movs	r2, #0
 800606c:	641a      	str	r2, [r3, #64]	@ 0x40
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2200      	movs	r2, #0
 8006072:	645a      	str	r2, [r3, #68]	@ 0x44
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800607c:	d10f      	bne.n	800609e <HAL_SPI_Receive+0xe4>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800608c:	601a      	str	r2, [r3, #0]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800609c:	601a      	str	r2, [r3, #0]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80060a8:	2b40      	cmp	r3, #64	@ 0x40
 80060aa:	d007      	beq.n	80060bc <HAL_SPI_Receive+0x102>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	681a      	ldr	r2, [r3, #0]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80060ba:	601a      	str	r2, [r3, #0]
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d170      	bne.n	80061a6 <HAL_SPI_Receive+0x1ec>
 80060c4:	e035      	b.n	8006132 <HAL_SPI_Receive+0x178>
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	f003 0301 	and.w	r3, r3, #1
 80060d0:	2b01      	cmp	r3, #1
 80060d2:	d115      	bne.n	8006100 <HAL_SPI_Receive+0x146>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f103 020c 	add.w	r2, r3, #12
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060e0:	7812      	ldrb	r2, [r2, #0]
 80060e2:	b2d2      	uxtb	r2, r2
 80060e4:	701a      	strb	r2, [r3, #0]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060ea:	1c5a      	adds	r2, r3, #1
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	639a      	str	r2, [r3, #56]	@ 0x38
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	3b01      	subs	r3, #1
 80060f8:	b29a      	uxth	r2, r3
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80060fe:	e018      	b.n	8006132 <HAL_SPI_Receive+0x178>
 8006100:	f7fb fb94 	bl	800182c <HAL_GetTick>
 8006104:	4602      	mov	r2, r0
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	1ad3      	subs	r3, r2, r3
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	429a      	cmp	r2, r3
 800610e:	d803      	bhi.n	8006118 <HAL_SPI_Receive+0x15e>
 8006110:	683b      	ldr	r3, [r7, #0]
 8006112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006116:	d102      	bne.n	800611e <HAL_SPI_Receive+0x164>
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d109      	bne.n	8006132 <HAL_SPI_Receive+0x178>
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	2201      	movs	r2, #1
 8006122:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	2200      	movs	r2, #0
 800612a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800612e:	2303      	movs	r3, #3
 8006130:	e058      	b.n	80061e4 <HAL_SPI_Receive+0x22a>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006136:	b29b      	uxth	r3, r3
 8006138:	2b00      	cmp	r3, #0
 800613a:	d1c4      	bne.n	80060c6 <HAL_SPI_Receive+0x10c>
 800613c:	e038      	b.n	80061b0 <HAL_SPI_Receive+0x1f6>
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	689b      	ldr	r3, [r3, #8]
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	2b01      	cmp	r3, #1
 800614a:	d113      	bne.n	8006174 <HAL_SPI_Receive+0x1ba>
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68da      	ldr	r2, [r3, #12]
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006156:	b292      	uxth	r2, r2
 8006158:	801a      	strh	r2, [r3, #0]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800615e:	1c9a      	adds	r2, r3, #2
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	639a      	str	r2, [r3, #56]	@ 0x38
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006168:	b29b      	uxth	r3, r3
 800616a:	3b01      	subs	r3, #1
 800616c:	b29a      	uxth	r2, r3
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006172:	e018      	b.n	80061a6 <HAL_SPI_Receive+0x1ec>
 8006174:	f7fb fb5a 	bl	800182c <HAL_GetTick>
 8006178:	4602      	mov	r2, r0
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	1ad3      	subs	r3, r2, r3
 800617e:	683a      	ldr	r2, [r7, #0]
 8006180:	429a      	cmp	r2, r3
 8006182:	d803      	bhi.n	800618c <HAL_SPI_Receive+0x1d2>
 8006184:	683b      	ldr	r3, [r7, #0]
 8006186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800618a:	d102      	bne.n	8006192 <HAL_SPI_Receive+0x1d8>
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	2b00      	cmp	r3, #0
 8006190:	d109      	bne.n	80061a6 <HAL_SPI_Receive+0x1ec>
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2201      	movs	r2, #1
 8006196:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	2200      	movs	r2, #0
 800619e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80061a2:	2303      	movs	r3, #3
 80061a4:	e01e      	b.n	80061e4 <HAL_SPI_Receive+0x22a>
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80061aa:	b29b      	uxth	r3, r3
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d1c6      	bne.n	800613e <HAL_SPI_Receive+0x184>
 80061b0:	697a      	ldr	r2, [r7, #20]
 80061b2:	6839      	ldr	r1, [r7, #0]
 80061b4:	68f8      	ldr	r0, [r7, #12]
 80061b6:	f000 fa4b 	bl	8006650 <SPI_EndRxTransaction>
 80061ba:	4603      	mov	r3, r0
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d002      	beq.n	80061c6 <HAL_SPI_Receive+0x20c>
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	2220      	movs	r2, #32
 80061c4:	655a      	str	r2, [r3, #84]	@ 0x54
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	2200      	movs	r2, #0
 80061d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d001      	beq.n	80061e2 <HAL_SPI_Receive+0x228>
 80061de:	2301      	movs	r3, #1
 80061e0:	e000      	b.n	80061e4 <HAL_SPI_Receive+0x22a>
 80061e2:	2300      	movs	r3, #0
 80061e4:	4618      	mov	r0, r3
 80061e6:	3718      	adds	r7, #24
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <HAL_SPI_TransmitReceive>:
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b08a      	sub	sp, #40	@ 0x28
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
 80061f8:	807b      	strh	r3, [r7, #2]
 80061fa:	2301      	movs	r3, #1
 80061fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80061fe:	f7fb fb15 	bl	800182c <HAL_GetTick>
 8006202:	6238      	str	r0, [r7, #32]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800620a:	77fb      	strb	r3, [r7, #31]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	61bb      	str	r3, [r7, #24]
 8006212:	887b      	ldrh	r3, [r7, #2]
 8006214:	82fb      	strh	r3, [r7, #22]
 8006216:	7ffb      	ldrb	r3, [r7, #31]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d00c      	beq.n	8006236 <HAL_SPI_TransmitReceive+0x4a>
 800621c:	69bb      	ldr	r3, [r7, #24]
 800621e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006222:	d106      	bne.n	8006232 <HAL_SPI_TransmitReceive+0x46>
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d102      	bne.n	8006232 <HAL_SPI_TransmitReceive+0x46>
 800622c:	7ffb      	ldrb	r3, [r7, #31]
 800622e:	2b04      	cmp	r3, #4
 8006230:	d001      	beq.n	8006236 <HAL_SPI_TransmitReceive+0x4a>
 8006232:	2302      	movs	r3, #2
 8006234:	e17f      	b.n	8006536 <HAL_SPI_TransmitReceive+0x34a>
 8006236:	68bb      	ldr	r3, [r7, #8]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d005      	beq.n	8006248 <HAL_SPI_TransmitReceive+0x5c>
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2b00      	cmp	r3, #0
 8006240:	d002      	beq.n	8006248 <HAL_SPI_TransmitReceive+0x5c>
 8006242:	887b      	ldrh	r3, [r7, #2]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <HAL_SPI_TransmitReceive+0x60>
 8006248:	2301      	movs	r3, #1
 800624a:	e174      	b.n	8006536 <HAL_SPI_TransmitReceive+0x34a>
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006252:	2b01      	cmp	r3, #1
 8006254:	d101      	bne.n	800625a <HAL_SPI_TransmitReceive+0x6e>
 8006256:	2302      	movs	r3, #2
 8006258:	e16d      	b.n	8006536 <HAL_SPI_TransmitReceive+0x34a>
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2201      	movs	r2, #1
 800625e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006268:	b2db      	uxtb	r3, r3
 800626a:	2b04      	cmp	r3, #4
 800626c:	d003      	beq.n	8006276 <HAL_SPI_TransmitReceive+0x8a>
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	2205      	movs	r2, #5
 8006272:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	2200      	movs	r2, #0
 800627a:	655a      	str	r2, [r3, #84]	@ 0x54
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	687a      	ldr	r2, [r7, #4]
 8006280:	639a      	str	r2, [r3, #56]	@ 0x38
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	887a      	ldrh	r2, [r7, #2]
 8006286:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	887a      	ldrh	r2, [r7, #2]
 800628c:	879a      	strh	r2, [r3, #60]	@ 0x3c
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	68ba      	ldr	r2, [r7, #8]
 8006292:	631a      	str	r2, [r3, #48]	@ 0x30
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	887a      	ldrh	r2, [r7, #2]
 8006298:	86da      	strh	r2, [r3, #54]	@ 0x36
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	887a      	ldrh	r2, [r7, #2]
 800629e:	869a      	strh	r2, [r3, #52]	@ 0x34
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	2200      	movs	r2, #0
 80062a4:	641a      	str	r2, [r3, #64]	@ 0x40
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	2200      	movs	r2, #0
 80062aa:	645a      	str	r2, [r3, #68]	@ 0x44
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062b6:	2b40      	cmp	r3, #64	@ 0x40
 80062b8:	d007      	beq.n	80062ca <HAL_SPI_TransmitReceive+0xde>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	681a      	ldr	r2, [r3, #0]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80062c8:	601a      	str	r2, [r3, #0]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	68db      	ldr	r3, [r3, #12]
 80062ce:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80062d2:	d17e      	bne.n	80063d2 <HAL_SPI_TransmitReceive+0x1e6>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	685b      	ldr	r3, [r3, #4]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d002      	beq.n	80062e2 <HAL_SPI_TransmitReceive+0xf6>
 80062dc:	8afb      	ldrh	r3, [r7, #22]
 80062de:	2b01      	cmp	r3, #1
 80062e0:	d16c      	bne.n	80063bc <HAL_SPI_TransmitReceive+0x1d0>
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062e6:	881a      	ldrh	r2, [r3, #0]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	60da      	str	r2, [r3, #12]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062f2:	1c9a      	adds	r2, r3, #2
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	3b01      	subs	r3, #1
 8006300:	b29a      	uxth	r2, r3
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006306:	e059      	b.n	80063bc <HAL_SPI_TransmitReceive+0x1d0>
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f003 0302 	and.w	r3, r3, #2
 8006312:	2b02      	cmp	r3, #2
 8006314:	d11b      	bne.n	800634e <HAL_SPI_TransmitReceive+0x162>
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800631a:	b29b      	uxth	r3, r3
 800631c:	2b00      	cmp	r3, #0
 800631e:	d016      	beq.n	800634e <HAL_SPI_TransmitReceive+0x162>
 8006320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006322:	2b01      	cmp	r3, #1
 8006324:	d113      	bne.n	800634e <HAL_SPI_TransmitReceive+0x162>
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800632a:	881a      	ldrh	r2, [r3, #0]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	60da      	str	r2, [r3, #12]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006336:	1c9a      	adds	r2, r3, #2
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	631a      	str	r2, [r3, #48]	@ 0x30
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006340:	b29b      	uxth	r3, r3
 8006342:	3b01      	subs	r3, #1
 8006344:	b29a      	uxth	r2, r3
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	86da      	strh	r2, [r3, #54]	@ 0x36
 800634a:	2300      	movs	r3, #0
 800634c:	627b      	str	r3, [r7, #36]	@ 0x24
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	f003 0301 	and.w	r3, r3, #1
 8006358:	2b01      	cmp	r3, #1
 800635a:	d119      	bne.n	8006390 <HAL_SPI_TransmitReceive+0x1a4>
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006360:	b29b      	uxth	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d014      	beq.n	8006390 <HAL_SPI_TransmitReceive+0x1a4>
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68da      	ldr	r2, [r3, #12]
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006370:	b292      	uxth	r2, r2
 8006372:	801a      	strh	r2, [r3, #0]
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006378:	1c9a      	adds	r2, r3, #2
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	639a      	str	r2, [r3, #56]	@ 0x38
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006382:	b29b      	uxth	r3, r3
 8006384:	3b01      	subs	r3, #1
 8006386:	b29a      	uxth	r2, r3
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800638c:	2301      	movs	r3, #1
 800638e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006390:	f7fb fa4c 	bl	800182c <HAL_GetTick>
 8006394:	4602      	mov	r2, r0
 8006396:	6a3b      	ldr	r3, [r7, #32]
 8006398:	1ad3      	subs	r3, r2, r3
 800639a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800639c:	429a      	cmp	r2, r3
 800639e:	d80d      	bhi.n	80063bc <HAL_SPI_TransmitReceive+0x1d0>
 80063a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063a6:	d009      	beq.n	80063bc <HAL_SPI_TransmitReceive+0x1d0>
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80063b8:	2303      	movs	r3, #3
 80063ba:	e0bc      	b.n	8006536 <HAL_SPI_TransmitReceive+0x34a>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063c0:	b29b      	uxth	r3, r3
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d1a0      	bne.n	8006308 <HAL_SPI_TransmitReceive+0x11c>
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80063ca:	b29b      	uxth	r3, r3
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d19b      	bne.n	8006308 <HAL_SPI_TransmitReceive+0x11c>
 80063d0:	e082      	b.n	80064d8 <HAL_SPI_TransmitReceive+0x2ec>
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d002      	beq.n	80063e0 <HAL_SPI_TransmitReceive+0x1f4>
 80063da:	8afb      	ldrh	r3, [r7, #22]
 80063dc:	2b01      	cmp	r3, #1
 80063de:	d171      	bne.n	80064c4 <HAL_SPI_TransmitReceive+0x2d8>
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	330c      	adds	r3, #12
 80063ea:	7812      	ldrb	r2, [r2, #0]
 80063ec:	701a      	strb	r2, [r3, #0]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80063f2:	1c5a      	adds	r2, r3, #1
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80063fc:	b29b      	uxth	r3, r3
 80063fe:	3b01      	subs	r3, #1
 8006400:	b29a      	uxth	r2, r3
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006406:	e05d      	b.n	80064c4 <HAL_SPI_TransmitReceive+0x2d8>
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f003 0302 	and.w	r3, r3, #2
 8006412:	2b02      	cmp	r3, #2
 8006414:	d11c      	bne.n	8006450 <HAL_SPI_TransmitReceive+0x264>
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800641a:	b29b      	uxth	r3, r3
 800641c:	2b00      	cmp	r3, #0
 800641e:	d017      	beq.n	8006450 <HAL_SPI_TransmitReceive+0x264>
 8006420:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006422:	2b01      	cmp	r3, #1
 8006424:	d114      	bne.n	8006450 <HAL_SPI_TransmitReceive+0x264>
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	330c      	adds	r3, #12
 8006430:	7812      	ldrb	r2, [r2, #0]
 8006432:	701a      	strb	r2, [r3, #0]
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006438:	1c5a      	adds	r2, r3, #1
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	631a      	str	r2, [r3, #48]	@ 0x30
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006442:	b29b      	uxth	r3, r3
 8006444:	3b01      	subs	r3, #1
 8006446:	b29a      	uxth	r2, r3
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	86da      	strh	r2, [r3, #54]	@ 0x36
 800644c:	2300      	movs	r3, #0
 800644e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	689b      	ldr	r3, [r3, #8]
 8006456:	f003 0301 	and.w	r3, r3, #1
 800645a:	2b01      	cmp	r3, #1
 800645c:	d119      	bne.n	8006492 <HAL_SPI_TransmitReceive+0x2a6>
 800645e:	68fb      	ldr	r3, [r7, #12]
 8006460:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006462:	b29b      	uxth	r3, r3
 8006464:	2b00      	cmp	r3, #0
 8006466:	d014      	beq.n	8006492 <HAL_SPI_TransmitReceive+0x2a6>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	68da      	ldr	r2, [r3, #12]
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006472:	b2d2      	uxtb	r2, r2
 8006474:	701a      	strb	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800647a:	1c5a      	adds	r2, r3, #1
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	639a      	str	r2, [r3, #56]	@ 0x38
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006484:	b29b      	uxth	r3, r3
 8006486:	3b01      	subs	r3, #1
 8006488:	b29a      	uxth	r2, r3
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800648e:	2301      	movs	r3, #1
 8006490:	627b      	str	r3, [r7, #36]	@ 0x24
 8006492:	f7fb f9cb 	bl	800182c <HAL_GetTick>
 8006496:	4602      	mov	r2, r0
 8006498:	6a3b      	ldr	r3, [r7, #32]
 800649a:	1ad3      	subs	r3, r2, r3
 800649c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800649e:	429a      	cmp	r2, r3
 80064a0:	d803      	bhi.n	80064aa <HAL_SPI_TransmitReceive+0x2be>
 80064a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064a8:	d102      	bne.n	80064b0 <HAL_SPI_TransmitReceive+0x2c4>
 80064aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d109      	bne.n	80064c4 <HAL_SPI_TransmitReceive+0x2d8>
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80064c0:	2303      	movs	r3, #3
 80064c2:	e038      	b.n	8006536 <HAL_SPI_TransmitReceive+0x34a>
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80064c8:	b29b      	uxth	r3, r3
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d19c      	bne.n	8006408 <HAL_SPI_TransmitReceive+0x21c>
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80064d2:	b29b      	uxth	r3, r3
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d197      	bne.n	8006408 <HAL_SPI_TransmitReceive+0x21c>
 80064d8:	6a3a      	ldr	r2, [r7, #32]
 80064da:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f000 f91d 	bl	800671c <SPI_EndRxTxTransaction>
 80064e2:	4603      	mov	r3, r0
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d008      	beq.n	80064fa <HAL_SPI_TransmitReceive+0x30e>
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	2220      	movs	r2, #32
 80064ec:	655a      	str	r2, [r3, #84]	@ 0x54
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2200      	movs	r2, #0
 80064f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 80064f6:	2301      	movs	r3, #1
 80064f8:	e01d      	b.n	8006536 <HAL_SPI_TransmitReceive+0x34a>
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	689b      	ldr	r3, [r3, #8]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d10a      	bne.n	8006518 <HAL_SPI_TransmitReceive+0x32c>
 8006502:	2300      	movs	r3, #0
 8006504:	613b      	str	r3, [r7, #16]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	613b      	str	r3, [r7, #16]
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	613b      	str	r3, [r7, #16]
 8006516:	693b      	ldr	r3, [r7, #16]
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2201      	movs	r2, #1
 800651c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	2200      	movs	r2, #0
 8006524:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800652c:	2b00      	cmp	r3, #0
 800652e:	d001      	beq.n	8006534 <HAL_SPI_TransmitReceive+0x348>
 8006530:	2301      	movs	r3, #1
 8006532:	e000      	b.n	8006536 <HAL_SPI_TransmitReceive+0x34a>
 8006534:	2300      	movs	r3, #0
 8006536:	4618      	mov	r0, r3
 8006538:	3728      	adds	r7, #40	@ 0x28
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
	...

08006540 <SPI_WaitFlagStateUntilTimeout>:
 8006540:	b580      	push	{r7, lr}
 8006542:	b088      	sub	sp, #32
 8006544:	af00      	add	r7, sp, #0
 8006546:	60f8      	str	r0, [r7, #12]
 8006548:	60b9      	str	r1, [r7, #8]
 800654a:	603b      	str	r3, [r7, #0]
 800654c:	4613      	mov	r3, r2
 800654e:	71fb      	strb	r3, [r7, #7]
 8006550:	f7fb f96c 	bl	800182c <HAL_GetTick>
 8006554:	4602      	mov	r2, r0
 8006556:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006558:	1a9b      	subs	r3, r3, r2
 800655a:	683a      	ldr	r2, [r7, #0]
 800655c:	4413      	add	r3, r2
 800655e:	61fb      	str	r3, [r7, #28]
 8006560:	f7fb f964 	bl	800182c <HAL_GetTick>
 8006564:	61b8      	str	r0, [r7, #24]
 8006566:	4b39      	ldr	r3, [pc, #228]	@ (800664c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	015b      	lsls	r3, r3, #5
 800656c:	0d1b      	lsrs	r3, r3, #20
 800656e:	69fa      	ldr	r2, [r7, #28]
 8006570:	fb02 f303 	mul.w	r3, r2, r3
 8006574:	617b      	str	r3, [r7, #20]
 8006576:	e054      	b.n	8006622 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800657e:	d050      	beq.n	8006622 <SPI_WaitFlagStateUntilTimeout+0xe2>
 8006580:	f7fb f954 	bl	800182c <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	69bb      	ldr	r3, [r7, #24]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	69fa      	ldr	r2, [r7, #28]
 800658c:	429a      	cmp	r2, r3
 800658e:	d902      	bls.n	8006596 <SPI_WaitFlagStateUntilTimeout+0x56>
 8006590:	69fb      	ldr	r3, [r7, #28]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d13d      	bne.n	8006612 <SPI_WaitFlagStateUntilTimeout+0xd2>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	685a      	ldr	r2, [r3, #4]
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80065a4:	605a      	str	r2, [r3, #4]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80065ae:	d111      	bne.n	80065d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065b8:	d004      	beq.n	80065c4 <SPI_WaitFlagStateUntilTimeout+0x84>
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	689b      	ldr	r3, [r3, #8]
 80065be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065c2:	d107      	bne.n	80065d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	681a      	ldr	r2, [r3, #0]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80065d2:	601a      	str	r2, [r3, #0]
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80065d8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80065dc:	d10f      	bne.n	80065fe <SPI_WaitFlagStateUntilTimeout+0xbe>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	681a      	ldr	r2, [r3, #0]
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80065ec:	601a      	str	r2, [r3, #0]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681a      	ldr	r2, [r3, #0]
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80065fc:	601a      	str	r2, [r3, #0]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2201      	movs	r2, #1
 8006602:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2200      	movs	r2, #0
 800660a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
 800660e:	2303      	movs	r3, #3
 8006610:	e017      	b.n	8006642 <SPI_WaitFlagStateUntilTimeout+0x102>
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d101      	bne.n	800661c <SPI_WaitFlagStateUntilTimeout+0xdc>
 8006618:	2300      	movs	r3, #0
 800661a:	61fb      	str	r3, [r7, #28]
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	3b01      	subs	r3, #1
 8006620:	617b      	str	r3, [r7, #20]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	689a      	ldr	r2, [r3, #8]
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	4013      	ands	r3, r2
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	429a      	cmp	r2, r3
 8006630:	bf0c      	ite	eq
 8006632:	2301      	moveq	r3, #1
 8006634:	2300      	movne	r3, #0
 8006636:	b2db      	uxtb	r3, r3
 8006638:	461a      	mov	r2, r3
 800663a:	79fb      	ldrb	r3, [r7, #7]
 800663c:	429a      	cmp	r2, r3
 800663e:	d19b      	bne.n	8006578 <SPI_WaitFlagStateUntilTimeout+0x38>
 8006640:	2300      	movs	r3, #0
 8006642:	4618      	mov	r0, r3
 8006644:	3720      	adds	r7, #32
 8006646:	46bd      	mov	sp, r7
 8006648:	bd80      	pop	{r7, pc}
 800664a:	bf00      	nop
 800664c:	20000000 	.word	0x20000000

08006650 <SPI_EndRxTransaction>:
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af02      	add	r7, sp, #8
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	607a      	str	r2, [r7, #4]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006664:	d111      	bne.n	800668a <SPI_EndRxTransaction+0x3a>
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	689b      	ldr	r3, [r3, #8]
 800666a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800666e:	d004      	beq.n	800667a <SPI_EndRxTransaction+0x2a>
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	689b      	ldr	r3, [r3, #8]
 8006674:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006678:	d107      	bne.n	800668a <SPI_EndRxTransaction+0x3a>
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006688:	601a      	str	r2, [r3, #0]
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	685b      	ldr	r3, [r3, #4]
 800668e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006692:	d12a      	bne.n	80066ea <SPI_EndRxTransaction+0x9a>
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800669c:	d012      	beq.n	80066c4 <SPI_EndRxTransaction+0x74>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	9300      	str	r3, [sp, #0]
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	2200      	movs	r2, #0
 80066a6:	2180      	movs	r1, #128	@ 0x80
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f7ff ff49 	bl	8006540 <SPI_WaitFlagStateUntilTimeout>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d02d      	beq.n	8006710 <SPI_EndRxTransaction+0xc0>
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066b8:	f043 0220 	orr.w	r2, r3, #32
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	655a      	str	r2, [r3, #84]	@ 0x54
 80066c0:	2303      	movs	r3, #3
 80066c2:	e026      	b.n	8006712 <SPI_EndRxTransaction+0xc2>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	9300      	str	r3, [sp, #0]
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	2200      	movs	r2, #0
 80066cc:	2101      	movs	r1, #1
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f7ff ff36 	bl	8006540 <SPI_WaitFlagStateUntilTimeout>
 80066d4:	4603      	mov	r3, r0
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d01a      	beq.n	8006710 <SPI_EndRxTransaction+0xc0>
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80066de:	f043 0220 	orr.w	r2, r3, #32
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	655a      	str	r2, [r3, #84]	@ 0x54
 80066e6:	2303      	movs	r3, #3
 80066e8:	e013      	b.n	8006712 <SPI_EndRxTransaction+0xc2>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	9300      	str	r3, [sp, #0]
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	2200      	movs	r2, #0
 80066f2:	2101      	movs	r1, #1
 80066f4:	68f8      	ldr	r0, [r7, #12]
 80066f6:	f7ff ff23 	bl	8006540 <SPI_WaitFlagStateUntilTimeout>
 80066fa:	4603      	mov	r3, r0
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d007      	beq.n	8006710 <SPI_EndRxTransaction+0xc0>
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006704:	f043 0220 	orr.w	r2, r3, #32
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	655a      	str	r2, [r3, #84]	@ 0x54
 800670c:	2303      	movs	r3, #3
 800670e:	e000      	b.n	8006712 <SPI_EndRxTransaction+0xc2>
 8006710:	2300      	movs	r3, #0
 8006712:	4618      	mov	r0, r3
 8006714:	3710      	adds	r7, #16
 8006716:	46bd      	mov	sp, r7
 8006718:	bd80      	pop	{r7, pc}
	...

0800671c <SPI_EndRxTxTransaction>:
 800671c:	b580      	push	{r7, lr}
 800671e:	b088      	sub	sp, #32
 8006720:	af02      	add	r7, sp, #8
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	9300      	str	r3, [sp, #0]
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	2201      	movs	r2, #1
 8006730:	2102      	movs	r1, #2
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f7ff ff04 	bl	8006540 <SPI_WaitFlagStateUntilTimeout>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d007      	beq.n	800674e <SPI_EndRxTxTransaction+0x32>
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006742:	f043 0220 	orr.w	r2, r3, #32
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	655a      	str	r2, [r3, #84]	@ 0x54
 800674a:	2303      	movs	r3, #3
 800674c:	e032      	b.n	80067b4 <SPI_EndRxTxTransaction+0x98>
 800674e:	4b1b      	ldr	r3, [pc, #108]	@ (80067bc <SPI_EndRxTxTransaction+0xa0>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a1b      	ldr	r2, [pc, #108]	@ (80067c0 <SPI_EndRxTxTransaction+0xa4>)
 8006754:	fba2 2303 	umull	r2, r3, r2, r3
 8006758:	0d5b      	lsrs	r3, r3, #21
 800675a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800675e:	fb02 f303 	mul.w	r3, r2, r3
 8006762:	617b      	str	r3, [r7, #20]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800676c:	d112      	bne.n	8006794 <SPI_EndRxTxTransaction+0x78>
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	9300      	str	r3, [sp, #0]
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	2200      	movs	r2, #0
 8006776:	2180      	movs	r1, #128	@ 0x80
 8006778:	68f8      	ldr	r0, [r7, #12]
 800677a:	f7ff fee1 	bl	8006540 <SPI_WaitFlagStateUntilTimeout>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d016      	beq.n	80067b2 <SPI_EndRxTxTransaction+0x96>
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006788:	f043 0220 	orr.w	r2, r3, #32
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	655a      	str	r2, [r3, #84]	@ 0x54
 8006790:	2303      	movs	r3, #3
 8006792:	e00f      	b.n	80067b4 <SPI_EndRxTxTransaction+0x98>
 8006794:	697b      	ldr	r3, [r7, #20]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d00a      	beq.n	80067b0 <SPI_EndRxTxTransaction+0x94>
 800679a:	697b      	ldr	r3, [r7, #20]
 800679c:	3b01      	subs	r3, #1
 800679e:	617b      	str	r3, [r7, #20]
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80067aa:	2b80      	cmp	r3, #128	@ 0x80
 80067ac:	d0f2      	beq.n	8006794 <SPI_EndRxTxTransaction+0x78>
 80067ae:	e000      	b.n	80067b2 <SPI_EndRxTxTransaction+0x96>
 80067b0:	bf00      	nop
 80067b2:	2300      	movs	r3, #0
 80067b4:	4618      	mov	r0, r3
 80067b6:	3718      	adds	r7, #24
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}
 80067bc:	20000000 	.word	0x20000000
 80067c0:	165e9f81 	.word	0x165e9f81

080067c4 <HAL_TIM_Base_Init>:
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d101      	bne.n	80067d6 <HAL_TIM_Base_Init+0x12>
 80067d2:	2301      	movs	r3, #1
 80067d4:	e041      	b.n	800685a <HAL_TIM_Base_Init+0x96>
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067dc:	b2db      	uxtb	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d106      	bne.n	80067f0 <HAL_TIM_Base_Init+0x2c>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f7fa fd9c 	bl	8001328 <HAL_TIM_Base_MspInit>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	2202      	movs	r2, #2
 80067f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	3304      	adds	r3, #4
 8006800:	4619      	mov	r1, r3
 8006802:	4610      	mov	r0, r2
 8006804:	f000 fa7e 	bl	8006d04 <TIM_Base_SetConfig>
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	2201      	movs	r2, #1
 800680c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	2201      	movs	r2, #1
 8006814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2201      	movs	r2, #1
 8006824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2201      	movs	r2, #1
 8006834:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2201      	movs	r2, #1
 800683c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2201      	movs	r2, #1
 8006844:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2201      	movs	r2, #1
 800684c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006858:	2300      	movs	r3, #0
 800685a:	4618      	mov	r0, r3
 800685c:	3708      	adds	r7, #8
 800685e:	46bd      	mov	sp, r7
 8006860:	bd80      	pop	{r7, pc}
	...

08006864 <HAL_TIM_Base_Start_IT>:
 8006864:	b480      	push	{r7}
 8006866:	b085      	sub	sp, #20
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006872:	b2db      	uxtb	r3, r3
 8006874:	2b01      	cmp	r3, #1
 8006876:	d001      	beq.n	800687c <HAL_TIM_Base_Start_IT+0x18>
 8006878:	2301      	movs	r3, #1
 800687a:	e04e      	b.n	800691a <HAL_TIM_Base_Start_IT+0xb6>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2202      	movs	r2, #2
 8006880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68da      	ldr	r2, [r3, #12]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f042 0201 	orr.w	r2, r2, #1
 8006892:	60da      	str	r2, [r3, #12]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	4a23      	ldr	r2, [pc, #140]	@ (8006928 <HAL_TIM_Base_Start_IT+0xc4>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d022      	beq.n	80068e4 <HAL_TIM_Base_Start_IT+0x80>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80068a6:	d01d      	beq.n	80068e4 <HAL_TIM_Base_Start_IT+0x80>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a1f      	ldr	r2, [pc, #124]	@ (800692c <HAL_TIM_Base_Start_IT+0xc8>)
 80068ae:	4293      	cmp	r3, r2
 80068b0:	d018      	beq.n	80068e4 <HAL_TIM_Base_Start_IT+0x80>
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	4a1e      	ldr	r2, [pc, #120]	@ (8006930 <HAL_TIM_Base_Start_IT+0xcc>)
 80068b8:	4293      	cmp	r3, r2
 80068ba:	d013      	beq.n	80068e4 <HAL_TIM_Base_Start_IT+0x80>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	4a1c      	ldr	r2, [pc, #112]	@ (8006934 <HAL_TIM_Base_Start_IT+0xd0>)
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d00e      	beq.n	80068e4 <HAL_TIM_Base_Start_IT+0x80>
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	4a1b      	ldr	r2, [pc, #108]	@ (8006938 <HAL_TIM_Base_Start_IT+0xd4>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d009      	beq.n	80068e4 <HAL_TIM_Base_Start_IT+0x80>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4a19      	ldr	r2, [pc, #100]	@ (800693c <HAL_TIM_Base_Start_IT+0xd8>)
 80068d6:	4293      	cmp	r3, r2
 80068d8:	d004      	beq.n	80068e4 <HAL_TIM_Base_Start_IT+0x80>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	4a18      	ldr	r2, [pc, #96]	@ (8006940 <HAL_TIM_Base_Start_IT+0xdc>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d111      	bne.n	8006908 <HAL_TIM_Base_Start_IT+0xa4>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f003 0307 	and.w	r3, r3, #7
 80068ee:	60fb      	str	r3, [r7, #12]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2b06      	cmp	r3, #6
 80068f4:	d010      	beq.n	8006918 <HAL_TIM_Base_Start_IT+0xb4>
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	681a      	ldr	r2, [r3, #0]
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	f042 0201 	orr.w	r2, r2, #1
 8006904:	601a      	str	r2, [r3, #0]
 8006906:	e007      	b.n	8006918 <HAL_TIM_Base_Start_IT+0xb4>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	681a      	ldr	r2, [r3, #0]
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f042 0201 	orr.w	r2, r2, #1
 8006916:	601a      	str	r2, [r3, #0]
 8006918:	2300      	movs	r3, #0
 800691a:	4618      	mov	r0, r3
 800691c:	3714      	adds	r7, #20
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr
 8006926:	bf00      	nop
 8006928:	40010000 	.word	0x40010000
 800692c:	40000400 	.word	0x40000400
 8006930:	40000800 	.word	0x40000800
 8006934:	40000c00 	.word	0x40000c00
 8006938:	40010400 	.word	0x40010400
 800693c:	40014000 	.word	0x40014000
 8006940:	40001800 	.word	0x40001800

08006944 <HAL_TIM_IRQHandler>:
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	60fb      	str	r3, [r7, #12]
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	691b      	ldr	r3, [r3, #16]
 800695a:	60bb      	str	r3, [r7, #8]
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	f003 0302 	and.w	r3, r3, #2
 8006962:	2b00      	cmp	r3, #0
 8006964:	d020      	beq.n	80069a8 <HAL_TIM_IRQHandler+0x64>
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f003 0302 	and.w	r3, r3, #2
 800696c:	2b00      	cmp	r3, #0
 800696e:	d01b      	beq.n	80069a8 <HAL_TIM_IRQHandler+0x64>
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f06f 0202 	mvn.w	r2, #2
 8006978:	611a      	str	r2, [r3, #16]
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2201      	movs	r2, #1
 800697e:	771a      	strb	r2, [r3, #28]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	699b      	ldr	r3, [r3, #24]
 8006986:	f003 0303 	and.w	r3, r3, #3
 800698a:	2b00      	cmp	r3, #0
 800698c:	d003      	beq.n	8006996 <HAL_TIM_IRQHandler+0x52>
 800698e:	6878      	ldr	r0, [r7, #4]
 8006990:	f000 f999 	bl	8006cc6 <HAL_TIM_IC_CaptureCallback>
 8006994:	e005      	b.n	80069a2 <HAL_TIM_IRQHandler+0x5e>
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 f98b 	bl	8006cb2 <HAL_TIM_OC_DelayElapsedCallback>
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f000 f99c 	bl	8006cda <HAL_TIM_PWM_PulseFinishedCallback>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	771a      	strb	r2, [r3, #28]
 80069a8:	68bb      	ldr	r3, [r7, #8]
 80069aa:	f003 0304 	and.w	r3, r3, #4
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d020      	beq.n	80069f4 <HAL_TIM_IRQHandler+0xb0>
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f003 0304 	and.w	r3, r3, #4
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d01b      	beq.n	80069f4 <HAL_TIM_IRQHandler+0xb0>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f06f 0204 	mvn.w	r2, #4
 80069c4:	611a      	str	r2, [r3, #16]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2202      	movs	r2, #2
 80069ca:	771a      	strb	r2, [r3, #28]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	699b      	ldr	r3, [r3, #24]
 80069d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d003      	beq.n	80069e2 <HAL_TIM_IRQHandler+0x9e>
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f000 f973 	bl	8006cc6 <HAL_TIM_IC_CaptureCallback>
 80069e0:	e005      	b.n	80069ee <HAL_TIM_IRQHandler+0xaa>
 80069e2:	6878      	ldr	r0, [r7, #4]
 80069e4:	f000 f965 	bl	8006cb2 <HAL_TIM_OC_DelayElapsedCallback>
 80069e8:	6878      	ldr	r0, [r7, #4]
 80069ea:	f000 f976 	bl	8006cda <HAL_TIM_PWM_PulseFinishedCallback>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	2200      	movs	r2, #0
 80069f2:	771a      	strb	r2, [r3, #28]
 80069f4:	68bb      	ldr	r3, [r7, #8]
 80069f6:	f003 0308 	and.w	r3, r3, #8
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d020      	beq.n	8006a40 <HAL_TIM_IRQHandler+0xfc>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f003 0308 	and.w	r3, r3, #8
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d01b      	beq.n	8006a40 <HAL_TIM_IRQHandler+0xfc>
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	f06f 0208 	mvn.w	r2, #8
 8006a10:	611a      	str	r2, [r3, #16]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2204      	movs	r2, #4
 8006a16:	771a      	strb	r2, [r3, #28]
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	69db      	ldr	r3, [r3, #28]
 8006a1e:	f003 0303 	and.w	r3, r3, #3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d003      	beq.n	8006a2e <HAL_TIM_IRQHandler+0xea>
 8006a26:	6878      	ldr	r0, [r7, #4]
 8006a28:	f000 f94d 	bl	8006cc6 <HAL_TIM_IC_CaptureCallback>
 8006a2c:	e005      	b.n	8006a3a <HAL_TIM_IRQHandler+0xf6>
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 f93f 	bl	8006cb2 <HAL_TIM_OC_DelayElapsedCallback>
 8006a34:	6878      	ldr	r0, [r7, #4]
 8006a36:	f000 f950 	bl	8006cda <HAL_TIM_PWM_PulseFinishedCallback>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	771a      	strb	r2, [r3, #28]
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	f003 0310 	and.w	r3, r3, #16
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d020      	beq.n	8006a8c <HAL_TIM_IRQHandler+0x148>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	f003 0310 	and.w	r3, r3, #16
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d01b      	beq.n	8006a8c <HAL_TIM_IRQHandler+0x148>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	f06f 0210 	mvn.w	r2, #16
 8006a5c:	611a      	str	r2, [r3, #16]
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	2208      	movs	r2, #8
 8006a62:	771a      	strb	r2, [r3, #28]
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	69db      	ldr	r3, [r3, #28]
 8006a6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d003      	beq.n	8006a7a <HAL_TIM_IRQHandler+0x136>
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f927 	bl	8006cc6 <HAL_TIM_IC_CaptureCallback>
 8006a78:	e005      	b.n	8006a86 <HAL_TIM_IRQHandler+0x142>
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 f919 	bl	8006cb2 <HAL_TIM_OC_DelayElapsedCallback>
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f000 f92a 	bl	8006cda <HAL_TIM_PWM_PulseFinishedCallback>
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	771a      	strb	r2, [r3, #28]
 8006a8c:	68bb      	ldr	r3, [r7, #8]
 8006a8e:	f003 0301 	and.w	r3, r3, #1
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d00c      	beq.n	8006ab0 <HAL_TIM_IRQHandler+0x16c>
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	f003 0301 	and.w	r3, r3, #1
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d007      	beq.n	8006ab0 <HAL_TIM_IRQHandler+0x16c>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f06f 0201 	mvn.w	r2, #1
 8006aa8:	611a      	str	r2, [r3, #16]
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f7fa f9d0 	bl	8000e50 <HAL_TIM_PeriodElapsedCallback>
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d00c      	beq.n	8006ad4 <HAL_TIM_IRQHandler+0x190>
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d007      	beq.n	8006ad4 <HAL_TIM_IRQHandler+0x190>
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006acc:	611a      	str	r2, [r3, #16]
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 fae4 	bl	800709c <HAL_TIMEx_BreakCallback>
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00c      	beq.n	8006af8 <HAL_TIM_IRQHandler+0x1b4>
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d007      	beq.n	8006af8 <HAL_TIM_IRQHandler+0x1b4>
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006af0:	611a      	str	r2, [r3, #16]
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f000 f8fb 	bl	8006cee <HAL_TIM_TriggerCallback>
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	f003 0320 	and.w	r3, r3, #32
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d00c      	beq.n	8006b1c <HAL_TIM_IRQHandler+0x1d8>
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f003 0320 	and.w	r3, r3, #32
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d007      	beq.n	8006b1c <HAL_TIM_IRQHandler+0x1d8>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f06f 0220 	mvn.w	r2, #32
 8006b14:	611a      	str	r2, [r3, #16]
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f000 fab6 	bl	8007088 <HAL_TIMEx_CommutCallback>
 8006b1c:	bf00      	nop
 8006b1e:	3710      	adds	r7, #16
 8006b20:	46bd      	mov	sp, r7
 8006b22:	bd80      	pop	{r7, pc}

08006b24 <HAL_TIM_ConfigClockSource>:
 8006b24:	b580      	push	{r7, lr}
 8006b26:	b084      	sub	sp, #16
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
 8006b2e:	2300      	movs	r3, #0
 8006b30:	73fb      	strb	r3, [r7, #15]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006b38:	2b01      	cmp	r3, #1
 8006b3a:	d101      	bne.n	8006b40 <HAL_TIM_ConfigClockSource+0x1c>
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	e0b4      	b.n	8006caa <HAL_TIM_ConfigClockSource+0x186>
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2201      	movs	r2, #1
 8006b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	2202      	movs	r2, #2
 8006b4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	60bb      	str	r3, [r7, #8]
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006b5e:	60bb      	str	r3, [r7, #8]
 8006b60:	68bb      	ldr	r3, [r7, #8]
 8006b62:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006b66:	60bb      	str	r3, [r7, #8]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	609a      	str	r2, [r3, #8]
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b78:	d03e      	beq.n	8006bf8 <HAL_TIM_ConfigClockSource+0xd4>
 8006b7a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b7e:	f200 8087 	bhi.w	8006c90 <HAL_TIM_ConfigClockSource+0x16c>
 8006b82:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b86:	f000 8086 	beq.w	8006c96 <HAL_TIM_ConfigClockSource+0x172>
 8006b8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006b8e:	d87f      	bhi.n	8006c90 <HAL_TIM_ConfigClockSource+0x16c>
 8006b90:	2b70      	cmp	r3, #112	@ 0x70
 8006b92:	d01a      	beq.n	8006bca <HAL_TIM_ConfigClockSource+0xa6>
 8006b94:	2b70      	cmp	r3, #112	@ 0x70
 8006b96:	d87b      	bhi.n	8006c90 <HAL_TIM_ConfigClockSource+0x16c>
 8006b98:	2b60      	cmp	r3, #96	@ 0x60
 8006b9a:	d050      	beq.n	8006c3e <HAL_TIM_ConfigClockSource+0x11a>
 8006b9c:	2b60      	cmp	r3, #96	@ 0x60
 8006b9e:	d877      	bhi.n	8006c90 <HAL_TIM_ConfigClockSource+0x16c>
 8006ba0:	2b50      	cmp	r3, #80	@ 0x50
 8006ba2:	d03c      	beq.n	8006c1e <HAL_TIM_ConfigClockSource+0xfa>
 8006ba4:	2b50      	cmp	r3, #80	@ 0x50
 8006ba6:	d873      	bhi.n	8006c90 <HAL_TIM_ConfigClockSource+0x16c>
 8006ba8:	2b40      	cmp	r3, #64	@ 0x40
 8006baa:	d058      	beq.n	8006c5e <HAL_TIM_ConfigClockSource+0x13a>
 8006bac:	2b40      	cmp	r3, #64	@ 0x40
 8006bae:	d86f      	bhi.n	8006c90 <HAL_TIM_ConfigClockSource+0x16c>
 8006bb0:	2b30      	cmp	r3, #48	@ 0x30
 8006bb2:	d064      	beq.n	8006c7e <HAL_TIM_ConfigClockSource+0x15a>
 8006bb4:	2b30      	cmp	r3, #48	@ 0x30
 8006bb6:	d86b      	bhi.n	8006c90 <HAL_TIM_ConfigClockSource+0x16c>
 8006bb8:	2b20      	cmp	r3, #32
 8006bba:	d060      	beq.n	8006c7e <HAL_TIM_ConfigClockSource+0x15a>
 8006bbc:	2b20      	cmp	r3, #32
 8006bbe:	d867      	bhi.n	8006c90 <HAL_TIM_ConfigClockSource+0x16c>
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d05c      	beq.n	8006c7e <HAL_TIM_ConfigClockSource+0x15a>
 8006bc4:	2b10      	cmp	r3, #16
 8006bc6:	d05a      	beq.n	8006c7e <HAL_TIM_ConfigClockSource+0x15a>
 8006bc8:	e062      	b.n	8006c90 <HAL_TIM_ConfigClockSource+0x16c>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6818      	ldr	r0, [r3, #0]
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	6899      	ldr	r1, [r3, #8]
 8006bd2:	683b      	ldr	r3, [r7, #0]
 8006bd4:	685a      	ldr	r2, [r3, #4]
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	68db      	ldr	r3, [r3, #12]
 8006bda:	f000 f9b9 	bl	8006f50 <TIM_ETR_SetConfig>
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	60bb      	str	r3, [r7, #8]
 8006be6:	68bb      	ldr	r3, [r7, #8]
 8006be8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006bec:	60bb      	str	r3, [r7, #8]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	68ba      	ldr	r2, [r7, #8]
 8006bf4:	609a      	str	r2, [r3, #8]
 8006bf6:	e04f      	b.n	8006c98 <HAL_TIM_ConfigClockSource+0x174>
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6818      	ldr	r0, [r3, #0]
 8006bfc:	683b      	ldr	r3, [r7, #0]
 8006bfe:	6899      	ldr	r1, [r3, #8]
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	685a      	ldr	r2, [r3, #4]
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	68db      	ldr	r3, [r3, #12]
 8006c08:	f000 f9a2 	bl	8006f50 <TIM_ETR_SetConfig>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	689a      	ldr	r2, [r3, #8]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006c1a:	609a      	str	r2, [r3, #8]
 8006c1c:	e03c      	b.n	8006c98 <HAL_TIM_ConfigClockSource+0x174>
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6818      	ldr	r0, [r3, #0]
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	6859      	ldr	r1, [r3, #4]
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	68db      	ldr	r3, [r3, #12]
 8006c2a:	461a      	mov	r2, r3
 8006c2c:	f000 f916 	bl	8006e5c <TIM_TI1_ConfigInputStage>
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	2150      	movs	r1, #80	@ 0x50
 8006c36:	4618      	mov	r0, r3
 8006c38:	f000 f96f 	bl	8006f1a <TIM_ITRx_SetConfig>
 8006c3c:	e02c      	b.n	8006c98 <HAL_TIM_ConfigClockSource+0x174>
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6818      	ldr	r0, [r3, #0]
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	6859      	ldr	r1, [r3, #4]
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	461a      	mov	r2, r3
 8006c4c:	f000 f935 	bl	8006eba <TIM_TI2_ConfigInputStage>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2160      	movs	r1, #96	@ 0x60
 8006c56:	4618      	mov	r0, r3
 8006c58:	f000 f95f 	bl	8006f1a <TIM_ITRx_SetConfig>
 8006c5c:	e01c      	b.n	8006c98 <HAL_TIM_ConfigClockSource+0x174>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6818      	ldr	r0, [r3, #0]
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	6859      	ldr	r1, [r3, #4]
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	68db      	ldr	r3, [r3, #12]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	f000 f8f6 	bl	8006e5c <TIM_TI1_ConfigInputStage>
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	2140      	movs	r1, #64	@ 0x40
 8006c76:	4618      	mov	r0, r3
 8006c78:	f000 f94f 	bl	8006f1a <TIM_ITRx_SetConfig>
 8006c7c:	e00c      	b.n	8006c98 <HAL_TIM_ConfigClockSource+0x174>
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	4619      	mov	r1, r3
 8006c88:	4610      	mov	r0, r2
 8006c8a:	f000 f946 	bl	8006f1a <TIM_ITRx_SetConfig>
 8006c8e:	e003      	b.n	8006c98 <HAL_TIM_ConfigClockSource+0x174>
 8006c90:	2301      	movs	r3, #1
 8006c92:	73fb      	strb	r3, [r7, #15]
 8006c94:	e000      	b.n	8006c98 <HAL_TIM_ConfigClockSource+0x174>
 8006c96:	bf00      	nop
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
 8006caa:	4618      	mov	r0, r3
 8006cac:	3710      	adds	r7, #16
 8006cae:	46bd      	mov	sp, r7
 8006cb0:	bd80      	pop	{r7, pc}

08006cb2 <HAL_TIM_OC_DelayElapsedCallback>:
 8006cb2:	b480      	push	{r7}
 8006cb4:	b083      	sub	sp, #12
 8006cb6:	af00      	add	r7, sp, #0
 8006cb8:	6078      	str	r0, [r7, #4]
 8006cba:	bf00      	nop
 8006cbc:	370c      	adds	r7, #12
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc4:	4770      	bx	lr

08006cc6 <HAL_TIM_IC_CaptureCallback>:
 8006cc6:	b480      	push	{r7}
 8006cc8:	b083      	sub	sp, #12
 8006cca:	af00      	add	r7, sp, #0
 8006ccc:	6078      	str	r0, [r7, #4]
 8006cce:	bf00      	nop
 8006cd0:	370c      	adds	r7, #12
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr

08006cda <HAL_TIM_PWM_PulseFinishedCallback>:
 8006cda:	b480      	push	{r7}
 8006cdc:	b083      	sub	sp, #12
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	6078      	str	r0, [r7, #4]
 8006ce2:	bf00      	nop
 8006ce4:	370c      	adds	r7, #12
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr

08006cee <HAL_TIM_TriggerCallback>:
 8006cee:	b480      	push	{r7}
 8006cf0:	b083      	sub	sp, #12
 8006cf2:	af00      	add	r7, sp, #0
 8006cf4:	6078      	str	r0, [r7, #4]
 8006cf6:	bf00      	nop
 8006cf8:	370c      	adds	r7, #12
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
	...

08006d04 <TIM_Base_SetConfig>:
 8006d04:	b480      	push	{r7}
 8006d06:	b085      	sub	sp, #20
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	60fb      	str	r3, [r7, #12]
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a46      	ldr	r2, [pc, #280]	@ (8006e30 <TIM_Base_SetConfig+0x12c>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d013      	beq.n	8006d44 <TIM_Base_SetConfig+0x40>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d22:	d00f      	beq.n	8006d44 <TIM_Base_SetConfig+0x40>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	4a43      	ldr	r2, [pc, #268]	@ (8006e34 <TIM_Base_SetConfig+0x130>)
 8006d28:	4293      	cmp	r3, r2
 8006d2a:	d00b      	beq.n	8006d44 <TIM_Base_SetConfig+0x40>
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	4a42      	ldr	r2, [pc, #264]	@ (8006e38 <TIM_Base_SetConfig+0x134>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d007      	beq.n	8006d44 <TIM_Base_SetConfig+0x40>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	4a41      	ldr	r2, [pc, #260]	@ (8006e3c <TIM_Base_SetConfig+0x138>)
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d003      	beq.n	8006d44 <TIM_Base_SetConfig+0x40>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a40      	ldr	r2, [pc, #256]	@ (8006e40 <TIM_Base_SetConfig+0x13c>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d108      	bne.n	8006d56 <TIM_Base_SetConfig+0x52>
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006d4a:	60fb      	str	r3, [r7, #12]
 8006d4c:	683b      	ldr	r3, [r7, #0]
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	4313      	orrs	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	4a35      	ldr	r2, [pc, #212]	@ (8006e30 <TIM_Base_SetConfig+0x12c>)
 8006d5a:	4293      	cmp	r3, r2
 8006d5c:	d02b      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d64:	d027      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a32      	ldr	r2, [pc, #200]	@ (8006e34 <TIM_Base_SetConfig+0x130>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d023      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a31      	ldr	r2, [pc, #196]	@ (8006e38 <TIM_Base_SetConfig+0x134>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d01f      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	4a30      	ldr	r2, [pc, #192]	@ (8006e3c <TIM_Base_SetConfig+0x138>)
 8006d7a:	4293      	cmp	r3, r2
 8006d7c:	d01b      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	4a2f      	ldr	r2, [pc, #188]	@ (8006e40 <TIM_Base_SetConfig+0x13c>)
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d017      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	4a2e      	ldr	r2, [pc, #184]	@ (8006e44 <TIM_Base_SetConfig+0x140>)
 8006d8a:	4293      	cmp	r3, r2
 8006d8c:	d013      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	4a2d      	ldr	r2, [pc, #180]	@ (8006e48 <TIM_Base_SetConfig+0x144>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d00f      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a2c      	ldr	r2, [pc, #176]	@ (8006e4c <TIM_Base_SetConfig+0x148>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d00b      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a2b      	ldr	r2, [pc, #172]	@ (8006e50 <TIM_Base_SetConfig+0x14c>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d007      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	4a2a      	ldr	r2, [pc, #168]	@ (8006e54 <TIM_Base_SetConfig+0x150>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d003      	beq.n	8006db6 <TIM_Base_SetConfig+0xb2>
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	4a29      	ldr	r2, [pc, #164]	@ (8006e58 <TIM_Base_SetConfig+0x154>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d108      	bne.n	8006dc8 <TIM_Base_SetConfig+0xc4>
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006dbc:	60fb      	str	r3, [r7, #12]
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	68db      	ldr	r3, [r3, #12]
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	4313      	orrs	r3, r2
 8006dc6:	60fb      	str	r3, [r7, #12]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	695b      	ldr	r3, [r3, #20]
 8006dd2:	4313      	orrs	r3, r2
 8006dd4:	60fb      	str	r3, [r7, #12]
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	68fa      	ldr	r2, [r7, #12]
 8006dda:	601a      	str	r2, [r3, #0]
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	689a      	ldr	r2, [r3, #8]
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	629a      	str	r2, [r3, #40]	@ 0x28
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a10      	ldr	r2, [pc, #64]	@ (8006e30 <TIM_Base_SetConfig+0x12c>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d003      	beq.n	8006dfc <TIM_Base_SetConfig+0xf8>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a12      	ldr	r2, [pc, #72]	@ (8006e40 <TIM_Base_SetConfig+0x13c>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d103      	bne.n	8006e04 <TIM_Base_SetConfig+0x100>
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	691a      	ldr	r2, [r3, #16]
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	631a      	str	r2, [r3, #48]	@ 0x30
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	2201      	movs	r2, #1
 8006e08:	615a      	str	r2, [r3, #20]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	f003 0301 	and.w	r3, r3, #1
 8006e12:	2b01      	cmp	r3, #1
 8006e14:	d105      	bne.n	8006e22 <TIM_Base_SetConfig+0x11e>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	691b      	ldr	r3, [r3, #16]
 8006e1a:	f023 0201 	bic.w	r2, r3, #1
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	611a      	str	r2, [r3, #16]
 8006e22:	bf00      	nop
 8006e24:	3714      	adds	r7, #20
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr
 8006e2e:	bf00      	nop
 8006e30:	40010000 	.word	0x40010000
 8006e34:	40000400 	.word	0x40000400
 8006e38:	40000800 	.word	0x40000800
 8006e3c:	40000c00 	.word	0x40000c00
 8006e40:	40010400 	.word	0x40010400
 8006e44:	40014000 	.word	0x40014000
 8006e48:	40014400 	.word	0x40014400
 8006e4c:	40014800 	.word	0x40014800
 8006e50:	40001800 	.word	0x40001800
 8006e54:	40001c00 	.word	0x40001c00
 8006e58:	40002000 	.word	0x40002000

08006e5c <TIM_TI1_ConfigInputStage>:
 8006e5c:	b480      	push	{r7}
 8006e5e:	b087      	sub	sp, #28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	6a1b      	ldr	r3, [r3, #32]
 8006e6c:	617b      	str	r3, [r7, #20]
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	6a1b      	ldr	r3, [r3, #32]
 8006e72:	f023 0201 	bic.w	r2, r3, #1
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	621a      	str	r2, [r3, #32]
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	699b      	ldr	r3, [r3, #24]
 8006e7e:	613b      	str	r3, [r7, #16]
 8006e80:	693b      	ldr	r3, [r7, #16]
 8006e82:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006e86:	613b      	str	r3, [r7, #16]
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	011b      	lsls	r3, r3, #4
 8006e8c:	693a      	ldr	r2, [r7, #16]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	613b      	str	r3, [r7, #16]
 8006e92:	697b      	ldr	r3, [r7, #20]
 8006e94:	f023 030a 	bic.w	r3, r3, #10
 8006e98:	617b      	str	r3, [r7, #20]
 8006e9a:	697a      	ldr	r2, [r7, #20]
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	4313      	orrs	r3, r2
 8006ea0:	617b      	str	r3, [r7, #20]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	693a      	ldr	r2, [r7, #16]
 8006ea6:	619a      	str	r2, [r3, #24]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	697a      	ldr	r2, [r7, #20]
 8006eac:	621a      	str	r2, [r3, #32]
 8006eae:	bf00      	nop
 8006eb0:	371c      	adds	r7, #28
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb8:	4770      	bx	lr

08006eba <TIM_TI2_ConfigInputStage>:
 8006eba:	b480      	push	{r7}
 8006ebc:	b087      	sub	sp, #28
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	60f8      	str	r0, [r7, #12]
 8006ec2:	60b9      	str	r1, [r7, #8]
 8006ec4:	607a      	str	r2, [r7, #4]
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	617b      	str	r3, [r7, #20]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	6a1b      	ldr	r3, [r3, #32]
 8006ed0:	f023 0210 	bic.w	r2, r3, #16
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	621a      	str	r2, [r3, #32]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	699b      	ldr	r3, [r3, #24]
 8006edc:	613b      	str	r3, [r7, #16]
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006ee4:	613b      	str	r3, [r7, #16]
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	031b      	lsls	r3, r3, #12
 8006eea:	693a      	ldr	r2, [r7, #16]
 8006eec:	4313      	orrs	r3, r2
 8006eee:	613b      	str	r3, [r7, #16]
 8006ef0:	697b      	ldr	r3, [r7, #20]
 8006ef2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8006ef6:	617b      	str	r3, [r7, #20]
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	011b      	lsls	r3, r3, #4
 8006efc:	697a      	ldr	r2, [r7, #20]
 8006efe:	4313      	orrs	r3, r2
 8006f00:	617b      	str	r3, [r7, #20]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	693a      	ldr	r2, [r7, #16]
 8006f06:	619a      	str	r2, [r3, #24]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	621a      	str	r2, [r3, #32]
 8006f0e:	bf00      	nop
 8006f10:	371c      	adds	r7, #28
 8006f12:	46bd      	mov	sp, r7
 8006f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f18:	4770      	bx	lr

08006f1a <TIM_ITRx_SetConfig>:
 8006f1a:	b480      	push	{r7}
 8006f1c:	b085      	sub	sp, #20
 8006f1e:	af00      	add	r7, sp, #0
 8006f20:	6078      	str	r0, [r7, #4]
 8006f22:	6039      	str	r1, [r7, #0]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	689b      	ldr	r3, [r3, #8]
 8006f28:	60fb      	str	r3, [r7, #12]
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006f30:	60fb      	str	r3, [r7, #12]
 8006f32:	683a      	ldr	r2, [r7, #0]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	f043 0307 	orr.w	r3, r3, #7
 8006f3c:	60fb      	str	r3, [r7, #12]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	68fa      	ldr	r2, [r7, #12]
 8006f42:	609a      	str	r2, [r3, #8]
 8006f44:	bf00      	nop
 8006f46:	3714      	adds	r7, #20
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4e:	4770      	bx	lr

08006f50 <TIM_ETR_SetConfig>:
 8006f50:	b480      	push	{r7}
 8006f52:	b087      	sub	sp, #28
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	60f8      	str	r0, [r7, #12]
 8006f58:	60b9      	str	r1, [r7, #8]
 8006f5a:	607a      	str	r2, [r7, #4]
 8006f5c:	603b      	str	r3, [r7, #0]
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	617b      	str	r3, [r7, #20]
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006f6a:	617b      	str	r3, [r7, #20]
 8006f6c:	683b      	ldr	r3, [r7, #0]
 8006f6e:	021a      	lsls	r2, r3, #8
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	431a      	orrs	r2, r3
 8006f74:	68bb      	ldr	r3, [r7, #8]
 8006f76:	4313      	orrs	r3, r2
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	617b      	str	r3, [r7, #20]
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	697a      	ldr	r2, [r7, #20]
 8006f82:	609a      	str	r2, [r3, #8]
 8006f84:	bf00      	nop
 8006f86:	371c      	adds	r7, #28
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <HAL_TIMEx_MasterConfigSynchronization>:
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d101      	bne.n	8006fa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	e05a      	b.n	800705e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2202      	movs	r2, #2
 8006fb4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	60fb      	str	r3, [r7, #12]
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	60bb      	str	r3, [r7, #8]
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006fce:	60fb      	str	r3, [r7, #12]
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	60fb      	str	r3, [r7, #12]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	605a      	str	r2, [r3, #4]
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a21      	ldr	r2, [pc, #132]	@ (800706c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d022      	beq.n	8007032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ff4:	d01d      	beq.n	8007032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a1d      	ldr	r2, [pc, #116]	@ (8007070 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d018      	beq.n	8007032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a1b      	ldr	r2, [pc, #108]	@ (8007074 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d013      	beq.n	8007032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a1a      	ldr	r2, [pc, #104]	@ (8007078 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d00e      	beq.n	8007032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a18      	ldr	r2, [pc, #96]	@ (800707c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d009      	beq.n	8007032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	4a17      	ldr	r2, [pc, #92]	@ (8007080 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8007024:	4293      	cmp	r3, r2
 8007026:	d004      	beq.n	8007032 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	4a15      	ldr	r2, [pc, #84]	@ (8007084 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d10c      	bne.n	800704c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007038:	60bb      	str	r3, [r7, #8]
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	685b      	ldr	r3, [r3, #4]
 800703e:	68ba      	ldr	r2, [r7, #8]
 8007040:	4313      	orrs	r3, r2
 8007042:	60bb      	str	r3, [r7, #8]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	68ba      	ldr	r2, [r7, #8]
 800704a:	609a      	str	r2, [r3, #8]
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 800705c:	2300      	movs	r3, #0
 800705e:	4618      	mov	r0, r3
 8007060:	3714      	adds	r7, #20
 8007062:	46bd      	mov	sp, r7
 8007064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007068:	4770      	bx	lr
 800706a:	bf00      	nop
 800706c:	40010000 	.word	0x40010000
 8007070:	40000400 	.word	0x40000400
 8007074:	40000800 	.word	0x40000800
 8007078:	40000c00 	.word	0x40000c00
 800707c:	40010400 	.word	0x40010400
 8007080:	40014000 	.word	0x40014000
 8007084:	40001800 	.word	0x40001800

08007088 <HAL_TIMEx_CommutCallback>:
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <HAL_TIMEx_BreakCallback>:
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <HAL_UART_Init>:
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d101      	bne.n	80070c2 <HAL_UART_Init+0x12>
 80070be:	2301      	movs	r3, #1
 80070c0:	e042      	b.n	8007148 <HAL_UART_Init+0x98>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d106      	bne.n	80070dc <HAL_UART_Init+0x2c>
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f7fa f948 	bl	800136c <HAL_UART_MspInit>
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2224      	movs	r2, #36	@ 0x24
 80070e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68da      	ldr	r2, [r3, #12]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80070f2:	60da      	str	r2, [r3, #12]
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 f973 	bl	80073e0 <UART_SetConfig>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	691a      	ldr	r2, [r3, #16]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007108:	611a      	str	r2, [r3, #16]
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	695a      	ldr	r2, [r3, #20]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007118:	615a      	str	r2, [r3, #20]
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68da      	ldr	r2, [r3, #12]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007128:	60da      	str	r2, [r3, #12]
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	645a      	str	r2, [r3, #68]	@ 0x44
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2220      	movs	r2, #32
 8007134:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2220      	movs	r2, #32
 800713c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	635a      	str	r2, [r3, #52]	@ 0x34
 8007146:	2300      	movs	r3, #0
 8007148:	4618      	mov	r0, r3
 800714a:	3708      	adds	r7, #8
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <HAL_UART_Transmit>:
 8007150:	b580      	push	{r7, lr}
 8007152:	b08a      	sub	sp, #40	@ 0x28
 8007154:	af02      	add	r7, sp, #8
 8007156:	60f8      	str	r0, [r7, #12]
 8007158:	60b9      	str	r1, [r7, #8]
 800715a:	603b      	str	r3, [r7, #0]
 800715c:	4613      	mov	r3, r2
 800715e:	80fb      	strh	r3, [r7, #6]
 8007160:	2300      	movs	r3, #0
 8007162:	617b      	str	r3, [r7, #20]
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b20      	cmp	r3, #32
 800716e:	d175      	bne.n	800725c <HAL_UART_Transmit+0x10c>
 8007170:	68bb      	ldr	r3, [r7, #8]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d002      	beq.n	800717c <HAL_UART_Transmit+0x2c>
 8007176:	88fb      	ldrh	r3, [r7, #6]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d101      	bne.n	8007180 <HAL_UART_Transmit+0x30>
 800717c:	2301      	movs	r3, #1
 800717e:	e06e      	b.n	800725e <HAL_UART_Transmit+0x10e>
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	2200      	movs	r2, #0
 8007184:	645a      	str	r2, [r3, #68]	@ 0x44
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	2221      	movs	r2, #33	@ 0x21
 800718a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800718e:	f7fa fb4d 	bl	800182c <HAL_GetTick>
 8007192:	6178      	str	r0, [r7, #20]
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	88fa      	ldrh	r2, [r7, #6]
 8007198:	849a      	strh	r2, [r3, #36]	@ 0x24
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	88fa      	ldrh	r2, [r7, #6]
 800719e:	84da      	strh	r2, [r3, #38]	@ 0x26
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	689b      	ldr	r3, [r3, #8]
 80071a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071a8:	d108      	bne.n	80071bc <HAL_UART_Transmit+0x6c>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d104      	bne.n	80071bc <HAL_UART_Transmit+0x6c>
 80071b2:	2300      	movs	r3, #0
 80071b4:	61fb      	str	r3, [r7, #28]
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	61bb      	str	r3, [r7, #24]
 80071ba:	e003      	b.n	80071c4 <HAL_UART_Transmit+0x74>
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	61fb      	str	r3, [r7, #28]
 80071c0:	2300      	movs	r3, #0
 80071c2:	61bb      	str	r3, [r7, #24]
 80071c4:	e02e      	b.n	8007224 <HAL_UART_Transmit+0xd4>
 80071c6:	683b      	ldr	r3, [r7, #0]
 80071c8:	9300      	str	r3, [sp, #0]
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	2200      	movs	r2, #0
 80071ce:	2180      	movs	r1, #128	@ 0x80
 80071d0:	68f8      	ldr	r0, [r7, #12]
 80071d2:	f000 f848 	bl	8007266 <UART_WaitOnFlagUntilTimeout>
 80071d6:	4603      	mov	r3, r0
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d005      	beq.n	80071e8 <HAL_UART_Transmit+0x98>
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	2220      	movs	r2, #32
 80071e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80071e4:	2303      	movs	r3, #3
 80071e6:	e03a      	b.n	800725e <HAL_UART_Transmit+0x10e>
 80071e8:	69fb      	ldr	r3, [r7, #28]
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d10b      	bne.n	8007206 <HAL_UART_Transmit+0xb6>
 80071ee:	69bb      	ldr	r3, [r7, #24]
 80071f0:	881b      	ldrh	r3, [r3, #0]
 80071f2:	461a      	mov	r2, r3
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80071fc:	605a      	str	r2, [r3, #4]
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	3302      	adds	r3, #2
 8007202:	61bb      	str	r3, [r7, #24]
 8007204:	e007      	b.n	8007216 <HAL_UART_Transmit+0xc6>
 8007206:	69fb      	ldr	r3, [r7, #28]
 8007208:	781a      	ldrb	r2, [r3, #0]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	605a      	str	r2, [r3, #4]
 8007210:	69fb      	ldr	r3, [r7, #28]
 8007212:	3301      	adds	r3, #1
 8007214:	61fb      	str	r3, [r7, #28]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800721a:	b29b      	uxth	r3, r3
 800721c:	3b01      	subs	r3, #1
 800721e:	b29a      	uxth	r2, r3
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	84da      	strh	r2, [r3, #38]	@ 0x26
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007228:	b29b      	uxth	r3, r3
 800722a:	2b00      	cmp	r3, #0
 800722c:	d1cb      	bne.n	80071c6 <HAL_UART_Transmit+0x76>
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	9300      	str	r3, [sp, #0]
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	2200      	movs	r2, #0
 8007236:	2140      	movs	r1, #64	@ 0x40
 8007238:	68f8      	ldr	r0, [r7, #12]
 800723a:	f000 f814 	bl	8007266 <UART_WaitOnFlagUntilTimeout>
 800723e:	4603      	mov	r3, r0
 8007240:	2b00      	cmp	r3, #0
 8007242:	d005      	beq.n	8007250 <HAL_UART_Transmit+0x100>
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	2220      	movs	r2, #32
 8007248:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 800724c:	2303      	movs	r3, #3
 800724e:	e006      	b.n	800725e <HAL_UART_Transmit+0x10e>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2220      	movs	r2, #32
 8007254:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8007258:	2300      	movs	r3, #0
 800725a:	e000      	b.n	800725e <HAL_UART_Transmit+0x10e>
 800725c:	2302      	movs	r3, #2
 800725e:	4618      	mov	r0, r3
 8007260:	3720      	adds	r7, #32
 8007262:	46bd      	mov	sp, r7
 8007264:	bd80      	pop	{r7, pc}

08007266 <UART_WaitOnFlagUntilTimeout>:
 8007266:	b580      	push	{r7, lr}
 8007268:	b086      	sub	sp, #24
 800726a:	af00      	add	r7, sp, #0
 800726c:	60f8      	str	r0, [r7, #12]
 800726e:	60b9      	str	r1, [r7, #8]
 8007270:	603b      	str	r3, [r7, #0]
 8007272:	4613      	mov	r3, r2
 8007274:	71fb      	strb	r3, [r7, #7]
 8007276:	e03b      	b.n	80072f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007278:	6a3b      	ldr	r3, [r7, #32]
 800727a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800727e:	d037      	beq.n	80072f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007280:	f7fa fad4 	bl	800182c <HAL_GetTick>
 8007284:	4602      	mov	r2, r0
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	1ad3      	subs	r3, r2, r3
 800728a:	6a3a      	ldr	r2, [r7, #32]
 800728c:	429a      	cmp	r2, r3
 800728e:	d302      	bcc.n	8007296 <UART_WaitOnFlagUntilTimeout+0x30>
 8007290:	6a3b      	ldr	r3, [r7, #32]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d101      	bne.n	800729a <UART_WaitOnFlagUntilTimeout+0x34>
 8007296:	2303      	movs	r3, #3
 8007298:	e03a      	b.n	8007310 <UART_WaitOnFlagUntilTimeout+0xaa>
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	f003 0304 	and.w	r3, r3, #4
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d023      	beq.n	80072f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	2b80      	cmp	r3, #128	@ 0x80
 80072ac:	d020      	beq.n	80072f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	2b40      	cmp	r3, #64	@ 0x40
 80072b2:	d01d      	beq.n	80072f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f003 0308 	and.w	r3, r3, #8
 80072be:	2b08      	cmp	r3, #8
 80072c0:	d116      	bne.n	80072f0 <UART_WaitOnFlagUntilTimeout+0x8a>
 80072c2:	2300      	movs	r3, #0
 80072c4:	617b      	str	r3, [r7, #20]
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	617b      	str	r3, [r7, #20]
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	685b      	ldr	r3, [r3, #4]
 80072d4:	617b      	str	r3, [r7, #20]
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f000 f81d 	bl	8007318 <UART_EndRxTransfer>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2208      	movs	r2, #8
 80072e2:	645a      	str	r2, [r3, #68]	@ 0x44
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2200      	movs	r2, #0
 80072e8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80072ec:	2301      	movs	r3, #1
 80072ee:	e00f      	b.n	8007310 <UART_WaitOnFlagUntilTimeout+0xaa>
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	681a      	ldr	r2, [r3, #0]
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	4013      	ands	r3, r2
 80072fa:	68ba      	ldr	r2, [r7, #8]
 80072fc:	429a      	cmp	r2, r3
 80072fe:	bf0c      	ite	eq
 8007300:	2301      	moveq	r3, #1
 8007302:	2300      	movne	r3, #0
 8007304:	b2db      	uxtb	r3, r3
 8007306:	461a      	mov	r2, r3
 8007308:	79fb      	ldrb	r3, [r7, #7]
 800730a:	429a      	cmp	r2, r3
 800730c:	d0b4      	beq.n	8007278 <UART_WaitOnFlagUntilTimeout+0x12>
 800730e:	2300      	movs	r3, #0
 8007310:	4618      	mov	r0, r3
 8007312:	3718      	adds	r7, #24
 8007314:	46bd      	mov	sp, r7
 8007316:	bd80      	pop	{r7, pc}

08007318 <UART_EndRxTransfer>:
 8007318:	b480      	push	{r7}
 800731a:	b095      	sub	sp, #84	@ 0x54
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	330c      	adds	r3, #12
 8007326:	637b      	str	r3, [r7, #52]	@ 0x34
 8007328:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800732a:	e853 3f00 	ldrex	r3, [r3]
 800732e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007330:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007332:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007336:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	330c      	adds	r3, #12
 800733e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007340:	643a      	str	r2, [r7, #64]	@ 0x40
 8007342:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007344:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007346:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007348:	e841 2300 	strex	r3, r2, [r1]
 800734c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800734e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1e5      	bne.n	8007320 <UART_EndRxTransfer+0x8>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	3314      	adds	r3, #20
 800735a:	623b      	str	r3, [r7, #32]
 800735c:	6a3b      	ldr	r3, [r7, #32]
 800735e:	e853 3f00 	ldrex	r3, [r3]
 8007362:	61fb      	str	r3, [r7, #28]
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	f023 0301 	bic.w	r3, r3, #1
 800736a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	3314      	adds	r3, #20
 8007372:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007374:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007376:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007378:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800737a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800737c:	e841 2300 	strex	r3, r2, [r1]
 8007380:	627b      	str	r3, [r7, #36]	@ 0x24
 8007382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007384:	2b00      	cmp	r3, #0
 8007386:	d1e5      	bne.n	8007354 <UART_EndRxTransfer+0x3c>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800738c:	2b01      	cmp	r3, #1
 800738e:	d119      	bne.n	80073c4 <UART_EndRxTransfer+0xac>
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	330c      	adds	r3, #12
 8007396:	60fb      	str	r3, [r7, #12]
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	e853 3f00 	ldrex	r3, [r3]
 800739e:	60bb      	str	r3, [r7, #8]
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	f023 0310 	bic.w	r3, r3, #16
 80073a6:	647b      	str	r3, [r7, #68]	@ 0x44
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	330c      	adds	r3, #12
 80073ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80073b0:	61ba      	str	r2, [r7, #24]
 80073b2:	617b      	str	r3, [r7, #20]
 80073b4:	6979      	ldr	r1, [r7, #20]
 80073b6:	69ba      	ldr	r2, [r7, #24]
 80073b8:	e841 2300 	strex	r3, r2, [r1]
 80073bc:	613b      	str	r3, [r7, #16]
 80073be:	693b      	ldr	r3, [r7, #16]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d1e5      	bne.n	8007390 <UART_EndRxTransfer+0x78>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2220      	movs	r2, #32
 80073c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2200      	movs	r2, #0
 80073d0:	631a      	str	r2, [r3, #48]	@ 0x30
 80073d2:	bf00      	nop
 80073d4:	3754      	adds	r7, #84	@ 0x54
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr
	...

080073e0 <UART_SetConfig>:
 80073e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80073e4:	b0c0      	sub	sp, #256	@ 0x100
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
 80073ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	691b      	ldr	r3, [r3, #16]
 80073f4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80073f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80073fc:	68d9      	ldr	r1, [r3, #12]
 80073fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	ea40 0301 	orr.w	r3, r0, r1
 8007408:	6113      	str	r3, [r2, #16]
 800740a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800740e:	689a      	ldr	r2, [r3, #8]
 8007410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	431a      	orrs	r2, r3
 8007418:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800741c:	695b      	ldr	r3, [r3, #20]
 800741e:	431a      	orrs	r2, r3
 8007420:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007424:	69db      	ldr	r3, [r3, #28]
 8007426:	4313      	orrs	r3, r2
 8007428:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800742c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007438:	f021 010c 	bic.w	r1, r1, #12
 800743c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007446:	430b      	orrs	r3, r1
 8007448:	60d3      	str	r3, [r2, #12]
 800744a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	695b      	ldr	r3, [r3, #20]
 8007452:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800745a:	6999      	ldr	r1, [r3, #24]
 800745c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	ea40 0301 	orr.w	r3, r0, r1
 8007466:	6153      	str	r3, [r2, #20]
 8007468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800746c:	681a      	ldr	r2, [r3, #0]
 800746e:	4b8f      	ldr	r3, [pc, #572]	@ (80076ac <UART_SetConfig+0x2cc>)
 8007470:	429a      	cmp	r2, r3
 8007472:	d005      	beq.n	8007480 <UART_SetConfig+0xa0>
 8007474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	4b8d      	ldr	r3, [pc, #564]	@ (80076b0 <UART_SetConfig+0x2d0>)
 800747c:	429a      	cmp	r2, r3
 800747e:	d104      	bne.n	800748a <UART_SetConfig+0xaa>
 8007480:	f7fe f994 	bl	80057ac <HAL_RCC_GetPCLK2Freq>
 8007484:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007488:	e003      	b.n	8007492 <UART_SetConfig+0xb2>
 800748a:	f7fe f97b 	bl	8005784 <HAL_RCC_GetPCLK1Freq>
 800748e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007496:	69db      	ldr	r3, [r3, #28]
 8007498:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800749c:	f040 810c 	bne.w	80076b8 <UART_SetConfig+0x2d8>
 80074a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80074a4:	2200      	movs	r2, #0
 80074a6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80074aa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80074ae:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80074b2:	4622      	mov	r2, r4
 80074b4:	462b      	mov	r3, r5
 80074b6:	1891      	adds	r1, r2, r2
 80074b8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80074ba:	415b      	adcs	r3, r3
 80074bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80074be:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80074c2:	4621      	mov	r1, r4
 80074c4:	eb12 0801 	adds.w	r8, r2, r1
 80074c8:	4629      	mov	r1, r5
 80074ca:	eb43 0901 	adc.w	r9, r3, r1
 80074ce:	f04f 0200 	mov.w	r2, #0
 80074d2:	f04f 0300 	mov.w	r3, #0
 80074d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80074da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80074de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80074e2:	4690      	mov	r8, r2
 80074e4:	4699      	mov	r9, r3
 80074e6:	4623      	mov	r3, r4
 80074e8:	eb18 0303 	adds.w	r3, r8, r3
 80074ec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80074f0:	462b      	mov	r3, r5
 80074f2:	eb49 0303 	adc.w	r3, r9, r3
 80074f6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80074fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80074fe:	685b      	ldr	r3, [r3, #4]
 8007500:	2200      	movs	r2, #0
 8007502:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007506:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800750a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800750e:	460b      	mov	r3, r1
 8007510:	18db      	adds	r3, r3, r3
 8007512:	653b      	str	r3, [r7, #80]	@ 0x50
 8007514:	4613      	mov	r3, r2
 8007516:	eb42 0303 	adc.w	r3, r2, r3
 800751a:	657b      	str	r3, [r7, #84]	@ 0x54
 800751c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007520:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007524:	f7f8 febc 	bl	80002a0 <__aeabi_uldivmod>
 8007528:	4602      	mov	r2, r0
 800752a:	460b      	mov	r3, r1
 800752c:	4b61      	ldr	r3, [pc, #388]	@ (80076b4 <UART_SetConfig+0x2d4>)
 800752e:	fba3 2302 	umull	r2, r3, r3, r2
 8007532:	095b      	lsrs	r3, r3, #5
 8007534:	011c      	lsls	r4, r3, #4
 8007536:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800753a:	2200      	movs	r2, #0
 800753c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007540:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007544:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007548:	4642      	mov	r2, r8
 800754a:	464b      	mov	r3, r9
 800754c:	1891      	adds	r1, r2, r2
 800754e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007550:	415b      	adcs	r3, r3
 8007552:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007554:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007558:	4641      	mov	r1, r8
 800755a:	eb12 0a01 	adds.w	sl, r2, r1
 800755e:	4649      	mov	r1, r9
 8007560:	eb43 0b01 	adc.w	fp, r3, r1
 8007564:	f04f 0200 	mov.w	r2, #0
 8007568:	f04f 0300 	mov.w	r3, #0
 800756c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007570:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007574:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007578:	4692      	mov	sl, r2
 800757a:	469b      	mov	fp, r3
 800757c:	4643      	mov	r3, r8
 800757e:	eb1a 0303 	adds.w	r3, sl, r3
 8007582:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007586:	464b      	mov	r3, r9
 8007588:	eb4b 0303 	adc.w	r3, fp, r3
 800758c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	2200      	movs	r2, #0
 8007598:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800759c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80075a0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80075a4:	460b      	mov	r3, r1
 80075a6:	18db      	adds	r3, r3, r3
 80075a8:	643b      	str	r3, [r7, #64]	@ 0x40
 80075aa:	4613      	mov	r3, r2
 80075ac:	eb42 0303 	adc.w	r3, r2, r3
 80075b0:	647b      	str	r3, [r7, #68]	@ 0x44
 80075b2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80075b6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80075ba:	f7f8 fe71 	bl	80002a0 <__aeabi_uldivmod>
 80075be:	4602      	mov	r2, r0
 80075c0:	460b      	mov	r3, r1
 80075c2:	4611      	mov	r1, r2
 80075c4:	4b3b      	ldr	r3, [pc, #236]	@ (80076b4 <UART_SetConfig+0x2d4>)
 80075c6:	fba3 2301 	umull	r2, r3, r3, r1
 80075ca:	095b      	lsrs	r3, r3, #5
 80075cc:	2264      	movs	r2, #100	@ 0x64
 80075ce:	fb02 f303 	mul.w	r3, r2, r3
 80075d2:	1acb      	subs	r3, r1, r3
 80075d4:	00db      	lsls	r3, r3, #3
 80075d6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80075da:	4b36      	ldr	r3, [pc, #216]	@ (80076b4 <UART_SetConfig+0x2d4>)
 80075dc:	fba3 2302 	umull	r2, r3, r3, r2
 80075e0:	095b      	lsrs	r3, r3, #5
 80075e2:	005b      	lsls	r3, r3, #1
 80075e4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80075e8:	441c      	add	r4, r3
 80075ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80075ee:	2200      	movs	r2, #0
 80075f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80075f4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80075f8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80075fc:	4642      	mov	r2, r8
 80075fe:	464b      	mov	r3, r9
 8007600:	1891      	adds	r1, r2, r2
 8007602:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007604:	415b      	adcs	r3, r3
 8007606:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007608:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800760c:	4641      	mov	r1, r8
 800760e:	1851      	adds	r1, r2, r1
 8007610:	6339      	str	r1, [r7, #48]	@ 0x30
 8007612:	4649      	mov	r1, r9
 8007614:	414b      	adcs	r3, r1
 8007616:	637b      	str	r3, [r7, #52]	@ 0x34
 8007618:	f04f 0200 	mov.w	r2, #0
 800761c:	f04f 0300 	mov.w	r3, #0
 8007620:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007624:	4659      	mov	r1, fp
 8007626:	00cb      	lsls	r3, r1, #3
 8007628:	4651      	mov	r1, sl
 800762a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800762e:	4651      	mov	r1, sl
 8007630:	00ca      	lsls	r2, r1, #3
 8007632:	4610      	mov	r0, r2
 8007634:	4619      	mov	r1, r3
 8007636:	4603      	mov	r3, r0
 8007638:	4642      	mov	r2, r8
 800763a:	189b      	adds	r3, r3, r2
 800763c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007640:	464b      	mov	r3, r9
 8007642:	460a      	mov	r2, r1
 8007644:	eb42 0303 	adc.w	r3, r2, r3
 8007648:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800764c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	2200      	movs	r2, #0
 8007654:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007658:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800765c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007660:	460b      	mov	r3, r1
 8007662:	18db      	adds	r3, r3, r3
 8007664:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007666:	4613      	mov	r3, r2
 8007668:	eb42 0303 	adc.w	r3, r2, r3
 800766c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800766e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007672:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007676:	f7f8 fe13 	bl	80002a0 <__aeabi_uldivmod>
 800767a:	4602      	mov	r2, r0
 800767c:	460b      	mov	r3, r1
 800767e:	4b0d      	ldr	r3, [pc, #52]	@ (80076b4 <UART_SetConfig+0x2d4>)
 8007680:	fba3 1302 	umull	r1, r3, r3, r2
 8007684:	095b      	lsrs	r3, r3, #5
 8007686:	2164      	movs	r1, #100	@ 0x64
 8007688:	fb01 f303 	mul.w	r3, r1, r3
 800768c:	1ad3      	subs	r3, r2, r3
 800768e:	00db      	lsls	r3, r3, #3
 8007690:	3332      	adds	r3, #50	@ 0x32
 8007692:	4a08      	ldr	r2, [pc, #32]	@ (80076b4 <UART_SetConfig+0x2d4>)
 8007694:	fba2 2303 	umull	r2, r3, r2, r3
 8007698:	095b      	lsrs	r3, r3, #5
 800769a:	f003 0207 	and.w	r2, r3, #7
 800769e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4422      	add	r2, r4
 80076a6:	609a      	str	r2, [r3, #8]
 80076a8:	e106      	b.n	80078b8 <UART_SetConfig+0x4d8>
 80076aa:	bf00      	nop
 80076ac:	40011000 	.word	0x40011000
 80076b0:	40011400 	.word	0x40011400
 80076b4:	51eb851f 	.word	0x51eb851f
 80076b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80076bc:	2200      	movs	r2, #0
 80076be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80076c2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80076c6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80076ca:	4642      	mov	r2, r8
 80076cc:	464b      	mov	r3, r9
 80076ce:	1891      	adds	r1, r2, r2
 80076d0:	6239      	str	r1, [r7, #32]
 80076d2:	415b      	adcs	r3, r3
 80076d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80076d6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80076da:	4641      	mov	r1, r8
 80076dc:	1854      	adds	r4, r2, r1
 80076de:	4649      	mov	r1, r9
 80076e0:	eb43 0501 	adc.w	r5, r3, r1
 80076e4:	f04f 0200 	mov.w	r2, #0
 80076e8:	f04f 0300 	mov.w	r3, #0
 80076ec:	00eb      	lsls	r3, r5, #3
 80076ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80076f2:	00e2      	lsls	r2, r4, #3
 80076f4:	4614      	mov	r4, r2
 80076f6:	461d      	mov	r5, r3
 80076f8:	4643      	mov	r3, r8
 80076fa:	18e3      	adds	r3, r4, r3
 80076fc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007700:	464b      	mov	r3, r9
 8007702:	eb45 0303 	adc.w	r3, r5, r3
 8007706:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800770a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	2200      	movs	r2, #0
 8007712:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007716:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800771a:	f04f 0200 	mov.w	r2, #0
 800771e:	f04f 0300 	mov.w	r3, #0
 8007722:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007726:	4629      	mov	r1, r5
 8007728:	008b      	lsls	r3, r1, #2
 800772a:	4621      	mov	r1, r4
 800772c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007730:	4621      	mov	r1, r4
 8007732:	008a      	lsls	r2, r1, #2
 8007734:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007738:	f7f8 fdb2 	bl	80002a0 <__aeabi_uldivmod>
 800773c:	4602      	mov	r2, r0
 800773e:	460b      	mov	r3, r1
 8007740:	4b60      	ldr	r3, [pc, #384]	@ (80078c4 <UART_SetConfig+0x4e4>)
 8007742:	fba3 2302 	umull	r2, r3, r3, r2
 8007746:	095b      	lsrs	r3, r3, #5
 8007748:	011c      	lsls	r4, r3, #4
 800774a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800774e:	2200      	movs	r2, #0
 8007750:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007754:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007758:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800775c:	4642      	mov	r2, r8
 800775e:	464b      	mov	r3, r9
 8007760:	1891      	adds	r1, r2, r2
 8007762:	61b9      	str	r1, [r7, #24]
 8007764:	415b      	adcs	r3, r3
 8007766:	61fb      	str	r3, [r7, #28]
 8007768:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800776c:	4641      	mov	r1, r8
 800776e:	1851      	adds	r1, r2, r1
 8007770:	6139      	str	r1, [r7, #16]
 8007772:	4649      	mov	r1, r9
 8007774:	414b      	adcs	r3, r1
 8007776:	617b      	str	r3, [r7, #20]
 8007778:	f04f 0200 	mov.w	r2, #0
 800777c:	f04f 0300 	mov.w	r3, #0
 8007780:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007784:	4659      	mov	r1, fp
 8007786:	00cb      	lsls	r3, r1, #3
 8007788:	4651      	mov	r1, sl
 800778a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800778e:	4651      	mov	r1, sl
 8007790:	00ca      	lsls	r2, r1, #3
 8007792:	4610      	mov	r0, r2
 8007794:	4619      	mov	r1, r3
 8007796:	4603      	mov	r3, r0
 8007798:	4642      	mov	r2, r8
 800779a:	189b      	adds	r3, r3, r2
 800779c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80077a0:	464b      	mov	r3, r9
 80077a2:	460a      	mov	r2, r1
 80077a4:	eb42 0303 	adc.w	r3, r2, r3
 80077a8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80077ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	2200      	movs	r2, #0
 80077b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80077b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80077b8:	f04f 0200 	mov.w	r2, #0
 80077bc:	f04f 0300 	mov.w	r3, #0
 80077c0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80077c4:	4649      	mov	r1, r9
 80077c6:	008b      	lsls	r3, r1, #2
 80077c8:	4641      	mov	r1, r8
 80077ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077ce:	4641      	mov	r1, r8
 80077d0:	008a      	lsls	r2, r1, #2
 80077d2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80077d6:	f7f8 fd63 	bl	80002a0 <__aeabi_uldivmod>
 80077da:	4602      	mov	r2, r0
 80077dc:	460b      	mov	r3, r1
 80077de:	4611      	mov	r1, r2
 80077e0:	4b38      	ldr	r3, [pc, #224]	@ (80078c4 <UART_SetConfig+0x4e4>)
 80077e2:	fba3 2301 	umull	r2, r3, r3, r1
 80077e6:	095b      	lsrs	r3, r3, #5
 80077e8:	2264      	movs	r2, #100	@ 0x64
 80077ea:	fb02 f303 	mul.w	r3, r2, r3
 80077ee:	1acb      	subs	r3, r1, r3
 80077f0:	011b      	lsls	r3, r3, #4
 80077f2:	3332      	adds	r3, #50	@ 0x32
 80077f4:	4a33      	ldr	r2, [pc, #204]	@ (80078c4 <UART_SetConfig+0x4e4>)
 80077f6:	fba2 2303 	umull	r2, r3, r2, r3
 80077fa:	095b      	lsrs	r3, r3, #5
 80077fc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007800:	441c      	add	r4, r3
 8007802:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007806:	2200      	movs	r2, #0
 8007808:	673b      	str	r3, [r7, #112]	@ 0x70
 800780a:	677a      	str	r2, [r7, #116]	@ 0x74
 800780c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007810:	4642      	mov	r2, r8
 8007812:	464b      	mov	r3, r9
 8007814:	1891      	adds	r1, r2, r2
 8007816:	60b9      	str	r1, [r7, #8]
 8007818:	415b      	adcs	r3, r3
 800781a:	60fb      	str	r3, [r7, #12]
 800781c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007820:	4641      	mov	r1, r8
 8007822:	1851      	adds	r1, r2, r1
 8007824:	6039      	str	r1, [r7, #0]
 8007826:	4649      	mov	r1, r9
 8007828:	414b      	adcs	r3, r1
 800782a:	607b      	str	r3, [r7, #4]
 800782c:	f04f 0200 	mov.w	r2, #0
 8007830:	f04f 0300 	mov.w	r3, #0
 8007834:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007838:	4659      	mov	r1, fp
 800783a:	00cb      	lsls	r3, r1, #3
 800783c:	4651      	mov	r1, sl
 800783e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007842:	4651      	mov	r1, sl
 8007844:	00ca      	lsls	r2, r1, #3
 8007846:	4610      	mov	r0, r2
 8007848:	4619      	mov	r1, r3
 800784a:	4603      	mov	r3, r0
 800784c:	4642      	mov	r2, r8
 800784e:	189b      	adds	r3, r3, r2
 8007850:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007852:	464b      	mov	r3, r9
 8007854:	460a      	mov	r2, r1
 8007856:	eb42 0303 	adc.w	r3, r2, r3
 800785a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800785c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007860:	685b      	ldr	r3, [r3, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	663b      	str	r3, [r7, #96]	@ 0x60
 8007866:	667a      	str	r2, [r7, #100]	@ 0x64
 8007868:	f04f 0200 	mov.w	r2, #0
 800786c:	f04f 0300 	mov.w	r3, #0
 8007870:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007874:	4649      	mov	r1, r9
 8007876:	008b      	lsls	r3, r1, #2
 8007878:	4641      	mov	r1, r8
 800787a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800787e:	4641      	mov	r1, r8
 8007880:	008a      	lsls	r2, r1, #2
 8007882:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007886:	f7f8 fd0b 	bl	80002a0 <__aeabi_uldivmod>
 800788a:	4602      	mov	r2, r0
 800788c:	460b      	mov	r3, r1
 800788e:	4b0d      	ldr	r3, [pc, #52]	@ (80078c4 <UART_SetConfig+0x4e4>)
 8007890:	fba3 1302 	umull	r1, r3, r3, r2
 8007894:	095b      	lsrs	r3, r3, #5
 8007896:	2164      	movs	r1, #100	@ 0x64
 8007898:	fb01 f303 	mul.w	r3, r1, r3
 800789c:	1ad3      	subs	r3, r2, r3
 800789e:	011b      	lsls	r3, r3, #4
 80078a0:	3332      	adds	r3, #50	@ 0x32
 80078a2:	4a08      	ldr	r2, [pc, #32]	@ (80078c4 <UART_SetConfig+0x4e4>)
 80078a4:	fba2 2303 	umull	r2, r3, r2, r3
 80078a8:	095b      	lsrs	r3, r3, #5
 80078aa:	f003 020f 	and.w	r2, r3, #15
 80078ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	4422      	add	r2, r4
 80078b6:	609a      	str	r2, [r3, #8]
 80078b8:	bf00      	nop
 80078ba:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80078be:	46bd      	mov	sp, r7
 80078c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078c4:	51eb851f 	.word	0x51eb851f

080078c8 <FMC_SDRAM_Init>:
 80078c8:	b480      	push	{r7}
 80078ca:	b083      	sub	sp, #12
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	6078      	str	r0, [r7, #4]
 80078d0:	6039      	str	r1, [r7, #0]
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d123      	bne.n	8007922 <FMC_SDRAM_Init+0x5a>
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 80078e2:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80078e6:	683a      	ldr	r2, [r7, #0]
 80078e8:	6851      	ldr	r1, [r2, #4]
 80078ea:	683a      	ldr	r2, [r7, #0]
 80078ec:	6892      	ldr	r2, [r2, #8]
 80078ee:	4311      	orrs	r1, r2
 80078f0:	683a      	ldr	r2, [r7, #0]
 80078f2:	68d2      	ldr	r2, [r2, #12]
 80078f4:	4311      	orrs	r1, r2
 80078f6:	683a      	ldr	r2, [r7, #0]
 80078f8:	6912      	ldr	r2, [r2, #16]
 80078fa:	4311      	orrs	r1, r2
 80078fc:	683a      	ldr	r2, [r7, #0]
 80078fe:	6952      	ldr	r2, [r2, #20]
 8007900:	4311      	orrs	r1, r2
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	6992      	ldr	r2, [r2, #24]
 8007906:	4311      	orrs	r1, r2
 8007908:	683a      	ldr	r2, [r7, #0]
 800790a:	69d2      	ldr	r2, [r2, #28]
 800790c:	4311      	orrs	r1, r2
 800790e:	683a      	ldr	r2, [r7, #0]
 8007910:	6a12      	ldr	r2, [r2, #32]
 8007912:	4311      	orrs	r1, r2
 8007914:	683a      	ldr	r2, [r7, #0]
 8007916:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007918:	430a      	orrs	r2, r1
 800791a:	431a      	orrs	r2, r3
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	601a      	str	r2, [r3, #0]
 8007920:	e028      	b.n	8007974 <FMC_SDRAM_Init+0xac>
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	69d9      	ldr	r1, [r3, #28]
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	6a1b      	ldr	r3, [r3, #32]
 8007932:	4319      	orrs	r1, r3
 8007934:	683b      	ldr	r3, [r7, #0]
 8007936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007938:	430b      	orrs	r3, r1
 800793a:	431a      	orrs	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	601a      	str	r2, [r3, #0]
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	685b      	ldr	r3, [r3, #4]
 8007944:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8007948:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800794c:	683a      	ldr	r2, [r7, #0]
 800794e:	6851      	ldr	r1, [r2, #4]
 8007950:	683a      	ldr	r2, [r7, #0]
 8007952:	6892      	ldr	r2, [r2, #8]
 8007954:	4311      	orrs	r1, r2
 8007956:	683a      	ldr	r2, [r7, #0]
 8007958:	68d2      	ldr	r2, [r2, #12]
 800795a:	4311      	orrs	r1, r2
 800795c:	683a      	ldr	r2, [r7, #0]
 800795e:	6912      	ldr	r2, [r2, #16]
 8007960:	4311      	orrs	r1, r2
 8007962:	683a      	ldr	r2, [r7, #0]
 8007964:	6952      	ldr	r2, [r2, #20]
 8007966:	4311      	orrs	r1, r2
 8007968:	683a      	ldr	r2, [r7, #0]
 800796a:	6992      	ldr	r2, [r2, #24]
 800796c:	430a      	orrs	r2, r1
 800796e:	431a      	orrs	r2, r3
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	605a      	str	r2, [r3, #4]
 8007974:	2300      	movs	r3, #0
 8007976:	4618      	mov	r0, r3
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr

08007982 <FMC_SDRAM_Timing_Init>:
 8007982:	b480      	push	{r7}
 8007984:	b085      	sub	sp, #20
 8007986:	af00      	add	r7, sp, #0
 8007988:	60f8      	str	r0, [r7, #12]
 800798a:	60b9      	str	r1, [r7, #8]
 800798c:	607a      	str	r2, [r7, #4]
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d128      	bne.n	80079e6 <FMC_SDRAM_Timing_Init+0x64>
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	689b      	ldr	r3, [r3, #8]
 8007998:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	1e59      	subs	r1, r3, #1
 80079a2:	68bb      	ldr	r3, [r7, #8]
 80079a4:	685b      	ldr	r3, [r3, #4]
 80079a6:	3b01      	subs	r3, #1
 80079a8:	011b      	lsls	r3, r3, #4
 80079aa:	4319      	orrs	r1, r3
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	3b01      	subs	r3, #1
 80079b2:	021b      	lsls	r3, r3, #8
 80079b4:	4319      	orrs	r1, r3
 80079b6:	68bb      	ldr	r3, [r7, #8]
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	3b01      	subs	r3, #1
 80079bc:	031b      	lsls	r3, r3, #12
 80079be:	4319      	orrs	r1, r3
 80079c0:	68bb      	ldr	r3, [r7, #8]
 80079c2:	691b      	ldr	r3, [r3, #16]
 80079c4:	3b01      	subs	r3, #1
 80079c6:	041b      	lsls	r3, r3, #16
 80079c8:	4319      	orrs	r1, r3
 80079ca:	68bb      	ldr	r3, [r7, #8]
 80079cc:	695b      	ldr	r3, [r3, #20]
 80079ce:	3b01      	subs	r3, #1
 80079d0:	051b      	lsls	r3, r3, #20
 80079d2:	4319      	orrs	r1, r3
 80079d4:	68bb      	ldr	r3, [r7, #8]
 80079d6:	699b      	ldr	r3, [r3, #24]
 80079d8:	3b01      	subs	r3, #1
 80079da:	061b      	lsls	r3, r3, #24
 80079dc:	430b      	orrs	r3, r1
 80079de:	431a      	orrs	r2, r3
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	609a      	str	r2, [r3, #8]
 80079e4:	e02f      	b.n	8007a46 <FMC_SDRAM_Timing_Init+0xc4>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	689b      	ldr	r3, [r3, #8]
 80079ea:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 80079ee:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80079f2:	68ba      	ldr	r2, [r7, #8]
 80079f4:	68d2      	ldr	r2, [r2, #12]
 80079f6:	3a01      	subs	r2, #1
 80079f8:	0311      	lsls	r1, r2, #12
 80079fa:	68ba      	ldr	r2, [r7, #8]
 80079fc:	6952      	ldr	r2, [r2, #20]
 80079fe:	3a01      	subs	r2, #1
 8007a00:	0512      	lsls	r2, r2, #20
 8007a02:	430a      	orrs	r2, r1
 8007a04:	431a      	orrs	r2, r3
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	609a      	str	r2, [r3, #8]
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 8007a12:	68bb      	ldr	r3, [r7, #8]
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	1e59      	subs	r1, r3, #1
 8007a18:	68bb      	ldr	r3, [r7, #8]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	3b01      	subs	r3, #1
 8007a1e:	011b      	lsls	r3, r3, #4
 8007a20:	4319      	orrs	r1, r3
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	689b      	ldr	r3, [r3, #8]
 8007a26:	3b01      	subs	r3, #1
 8007a28:	021b      	lsls	r3, r3, #8
 8007a2a:	4319      	orrs	r1, r3
 8007a2c:	68bb      	ldr	r3, [r7, #8]
 8007a2e:	691b      	ldr	r3, [r3, #16]
 8007a30:	3b01      	subs	r3, #1
 8007a32:	041b      	lsls	r3, r3, #16
 8007a34:	4319      	orrs	r1, r3
 8007a36:	68bb      	ldr	r3, [r7, #8]
 8007a38:	699b      	ldr	r3, [r3, #24]
 8007a3a:	3b01      	subs	r3, #1
 8007a3c:	061b      	lsls	r3, r3, #24
 8007a3e:	430b      	orrs	r3, r1
 8007a40:	431a      	orrs	r2, r3
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	60da      	str	r2, [r3, #12]
 8007a46:	2300      	movs	r3, #0
 8007a48:	4618      	mov	r0, r3
 8007a4a:	3714      	adds	r7, #20
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a52:	4770      	bx	lr

08007a54 <USB_CoreInit>:
 8007a54:	b084      	sub	sp, #16
 8007a56:	b580      	push	{r7, lr}
 8007a58:	b084      	sub	sp, #16
 8007a5a:	af00      	add	r7, sp, #0
 8007a5c:	6078      	str	r0, [r7, #4]
 8007a5e:	f107 001c 	add.w	r0, r7, #28
 8007a62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8007a66:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d123      	bne.n	8007ab6 <USB_CoreInit+0x62>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a72:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	639a      	str	r2, [r3, #56]	@ 0x38
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007a82:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	60d3      	str	r3, [r2, #12]
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	68db      	ldr	r3, [r3, #12]
 8007a8e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	60da      	str	r2, [r3, #12]
 8007a96:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d105      	bne.n	8007aaa <USB_CoreInit+0x56>
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	68db      	ldr	r3, [r3, #12]
 8007aa2:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	60da      	str	r2, [r3, #12]
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f000 f9dc 	bl	8007e68 <USB_CoreReset>
 8007ab0:	4603      	mov	r3, r0
 8007ab2:	73fb      	strb	r3, [r7, #15]
 8007ab4:	e01b      	b.n	8007aee <USB_CoreInit+0x9a>
 8007ab6:	687b      	ldr	r3, [r7, #4]
 8007ab8:	68db      	ldr	r3, [r3, #12]
 8007aba:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	60da      	str	r2, [r3, #12]
 8007ac2:	6878      	ldr	r0, [r7, #4]
 8007ac4:	f000 f9d0 	bl	8007e68 <USB_CoreReset>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	73fb      	strb	r3, [r7, #15]
 8007acc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d106      	bne.n	8007ae2 <USB_CoreInit+0x8e>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ad8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	639a      	str	r2, [r3, #56]	@ 0x38
 8007ae0:	e005      	b.n	8007aee <USB_CoreInit+0x9a>
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ae6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	639a      	str	r2, [r3, #56]	@ 0x38
 8007aee:	7fbb      	ldrb	r3, [r7, #30]
 8007af0:	2b01      	cmp	r3, #1
 8007af2:	d10b      	bne.n	8007b0c <USB_CoreInit+0xb8>
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	f043 0206 	orr.w	r2, r3, #6
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	609a      	str	r2, [r3, #8]
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	689b      	ldr	r3, [r3, #8]
 8007b04:	f043 0220 	orr.w	r2, r3, #32
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	609a      	str	r2, [r3, #8]
 8007b0c:	7bfb      	ldrb	r3, [r7, #15]
 8007b0e:	4618      	mov	r0, r3
 8007b10:	3710      	adds	r7, #16
 8007b12:	46bd      	mov	sp, r7
 8007b14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007b18:	b004      	add	sp, #16
 8007b1a:	4770      	bx	lr

08007b1c <USB_EnableGlobalInt>:
 8007b1c:	b480      	push	{r7}
 8007b1e:	b083      	sub	sp, #12
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	689b      	ldr	r3, [r3, #8]
 8007b28:	f043 0201 	orr.w	r2, r3, #1
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	609a      	str	r2, [r3, #8]
 8007b30:	2300      	movs	r3, #0
 8007b32:	4618      	mov	r0, r3
 8007b34:	370c      	adds	r7, #12
 8007b36:	46bd      	mov	sp, r7
 8007b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b3c:	4770      	bx	lr

08007b3e <USB_DisableGlobalInt>:
 8007b3e:	b480      	push	{r7}
 8007b40:	b083      	sub	sp, #12
 8007b42:	af00      	add	r7, sp, #0
 8007b44:	6078      	str	r0, [r7, #4]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	689b      	ldr	r3, [r3, #8]
 8007b4a:	f023 0201 	bic.w	r2, r3, #1
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	609a      	str	r2, [r3, #8]
 8007b52:	2300      	movs	r3, #0
 8007b54:	4618      	mov	r0, r3
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <USB_SetCurrentMode>:
 8007b60:	b580      	push	{r7, lr}
 8007b62:	b084      	sub	sp, #16
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	460b      	mov	r3, r1
 8007b6a:	70fb      	strb	r3, [r7, #3]
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	60fb      	str	r3, [r7, #12]
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	60da      	str	r2, [r3, #12]
 8007b7c:	78fb      	ldrb	r3, [r7, #3]
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d115      	bne.n	8007bae <USB_SetCurrentMode+0x4e>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	60da      	str	r2, [r3, #12]
 8007b8e:	200a      	movs	r0, #10
 8007b90:	f7f9 fe58 	bl	8001844 <HAL_Delay>
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	330a      	adds	r3, #10
 8007b98:	60fb      	str	r3, [r7, #12]
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f956 	bl	8007e4c <USB_GetMode>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d01e      	beq.n	8007be4 <USB_SetCurrentMode+0x84>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2bc7      	cmp	r3, #199	@ 0xc7
 8007baa:	d9f0      	bls.n	8007b8e <USB_SetCurrentMode+0x2e>
 8007bac:	e01a      	b.n	8007be4 <USB_SetCurrentMode+0x84>
 8007bae:	78fb      	ldrb	r3, [r7, #3]
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d115      	bne.n	8007be0 <USB_SetCurrentMode+0x80>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	68db      	ldr	r3, [r3, #12]
 8007bb8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	60da      	str	r2, [r3, #12]
 8007bc0:	200a      	movs	r0, #10
 8007bc2:	f7f9 fe3f 	bl	8001844 <HAL_Delay>
 8007bc6:	68fb      	ldr	r3, [r7, #12]
 8007bc8:	330a      	adds	r3, #10
 8007bca:	60fb      	str	r3, [r7, #12]
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 f93d 	bl	8007e4c <USB_GetMode>
 8007bd2:	4603      	mov	r3, r0
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d005      	beq.n	8007be4 <USB_SetCurrentMode+0x84>
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	2bc7      	cmp	r3, #199	@ 0xc7
 8007bdc:	d9f0      	bls.n	8007bc0 <USB_SetCurrentMode+0x60>
 8007bde:	e001      	b.n	8007be4 <USB_SetCurrentMode+0x84>
 8007be0:	2301      	movs	r3, #1
 8007be2:	e005      	b.n	8007bf0 <USB_SetCurrentMode+0x90>
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	2bc8      	cmp	r3, #200	@ 0xc8
 8007be8:	d101      	bne.n	8007bee <USB_SetCurrentMode+0x8e>
 8007bea:	2301      	movs	r3, #1
 8007bec:	e000      	b.n	8007bf0 <USB_SetCurrentMode+0x90>
 8007bee:	2300      	movs	r3, #0
 8007bf0:	4618      	mov	r0, r3
 8007bf2:	3710      	adds	r7, #16
 8007bf4:	46bd      	mov	sp, r7
 8007bf6:	bd80      	pop	{r7, pc}

08007bf8 <USB_FlushTxFifo>:
 8007bf8:	b480      	push	{r7}
 8007bfa:	b085      	sub	sp, #20
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
 8007c00:	6039      	str	r1, [r7, #0]
 8007c02:	2300      	movs	r3, #0
 8007c04:	60fb      	str	r3, [r7, #12]
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	3301      	adds	r3, #1
 8007c0a:	60fb      	str	r3, [r7, #12]
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c12:	d901      	bls.n	8007c18 <USB_FlushTxFifo+0x20>
 8007c14:	2303      	movs	r3, #3
 8007c16:	e01b      	b.n	8007c50 <USB_FlushTxFifo+0x58>
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	691b      	ldr	r3, [r3, #16]
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	daf2      	bge.n	8007c06 <USB_FlushTxFifo+0xe>
 8007c20:	2300      	movs	r3, #0
 8007c22:	60fb      	str	r3, [r7, #12]
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	019b      	lsls	r3, r3, #6
 8007c28:	f043 0220 	orr.w	r2, r3, #32
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	611a      	str	r2, [r3, #16]
 8007c30:	68fb      	ldr	r3, [r7, #12]
 8007c32:	3301      	adds	r3, #1
 8007c34:	60fb      	str	r3, [r7, #12]
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c3c:	d901      	bls.n	8007c42 <USB_FlushTxFifo+0x4a>
 8007c3e:	2303      	movs	r3, #3
 8007c40:	e006      	b.n	8007c50 <USB_FlushTxFifo+0x58>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	691b      	ldr	r3, [r3, #16]
 8007c46:	f003 0320 	and.w	r3, r3, #32
 8007c4a:	2b20      	cmp	r3, #32
 8007c4c:	d0f0      	beq.n	8007c30 <USB_FlushTxFifo+0x38>
 8007c4e:	2300      	movs	r3, #0
 8007c50:	4618      	mov	r0, r3
 8007c52:	3714      	adds	r7, #20
 8007c54:	46bd      	mov	sp, r7
 8007c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5a:	4770      	bx	lr

08007c5c <USB_FlushRxFifo>:
 8007c5c:	b480      	push	{r7}
 8007c5e:	b085      	sub	sp, #20
 8007c60:	af00      	add	r7, sp, #0
 8007c62:	6078      	str	r0, [r7, #4]
 8007c64:	2300      	movs	r3, #0
 8007c66:	60fb      	str	r3, [r7, #12]
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	3301      	adds	r3, #1
 8007c6c:	60fb      	str	r3, [r7, #12]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c74:	d901      	bls.n	8007c7a <USB_FlushRxFifo+0x1e>
 8007c76:	2303      	movs	r3, #3
 8007c78:	e018      	b.n	8007cac <USB_FlushRxFifo+0x50>
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	daf2      	bge.n	8007c68 <USB_FlushRxFifo+0xc>
 8007c82:	2300      	movs	r3, #0
 8007c84:	60fb      	str	r3, [r7, #12]
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2210      	movs	r2, #16
 8007c8a:	611a      	str	r2, [r3, #16]
 8007c8c:	68fb      	ldr	r3, [r7, #12]
 8007c8e:	3301      	adds	r3, #1
 8007c90:	60fb      	str	r3, [r7, #12]
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007c98:	d901      	bls.n	8007c9e <USB_FlushRxFifo+0x42>
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e006      	b.n	8007cac <USB_FlushRxFifo+0x50>
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	f003 0310 	and.w	r3, r3, #16
 8007ca6:	2b10      	cmp	r3, #16
 8007ca8:	d0f0      	beq.n	8007c8c <USB_FlushRxFifo+0x30>
 8007caa:	2300      	movs	r3, #0
 8007cac:	4618      	mov	r0, r3
 8007cae:	3714      	adds	r7, #20
 8007cb0:	46bd      	mov	sp, r7
 8007cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb6:	4770      	bx	lr

08007cb8 <USB_WritePacket>:
 8007cb8:	b480      	push	{r7}
 8007cba:	b089      	sub	sp, #36	@ 0x24
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	60f8      	str	r0, [r7, #12]
 8007cc0:	60b9      	str	r1, [r7, #8]
 8007cc2:	4611      	mov	r1, r2
 8007cc4:	461a      	mov	r2, r3
 8007cc6:	460b      	mov	r3, r1
 8007cc8:	71fb      	strb	r3, [r7, #7]
 8007cca:	4613      	mov	r3, r2
 8007ccc:	80bb      	strh	r3, [r7, #4]
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	617b      	str	r3, [r7, #20]
 8007cd2:	68bb      	ldr	r3, [r7, #8]
 8007cd4:	61fb      	str	r3, [r7, #28]
 8007cd6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d123      	bne.n	8007d26 <USB_WritePacket+0x6e>
 8007cde:	88bb      	ldrh	r3, [r7, #4]
 8007ce0:	3303      	adds	r3, #3
 8007ce2:	089b      	lsrs	r3, r3, #2
 8007ce4:	613b      	str	r3, [r7, #16]
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	61bb      	str	r3, [r7, #24]
 8007cea:	e018      	b.n	8007d1e <USB_WritePacket+0x66>
 8007cec:	79fb      	ldrb	r3, [r7, #7]
 8007cee:	031a      	lsls	r2, r3, #12
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	4413      	add	r3, r2
 8007cf4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007cf8:	461a      	mov	r2, r3
 8007cfa:	69fb      	ldr	r3, [r7, #28]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	6013      	str	r3, [r2, #0]
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	3301      	adds	r3, #1
 8007d04:	61fb      	str	r3, [r7, #28]
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	3301      	adds	r3, #1
 8007d0a:	61fb      	str	r3, [r7, #28]
 8007d0c:	69fb      	ldr	r3, [r7, #28]
 8007d0e:	3301      	adds	r3, #1
 8007d10:	61fb      	str	r3, [r7, #28]
 8007d12:	69fb      	ldr	r3, [r7, #28]
 8007d14:	3301      	adds	r3, #1
 8007d16:	61fb      	str	r3, [r7, #28]
 8007d18:	69bb      	ldr	r3, [r7, #24]
 8007d1a:	3301      	adds	r3, #1
 8007d1c:	61bb      	str	r3, [r7, #24]
 8007d1e:	69ba      	ldr	r2, [r7, #24]
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	429a      	cmp	r2, r3
 8007d24:	d3e2      	bcc.n	8007cec <USB_WritePacket+0x34>
 8007d26:	2300      	movs	r3, #0
 8007d28:	4618      	mov	r0, r3
 8007d2a:	3724      	adds	r7, #36	@ 0x24
 8007d2c:	46bd      	mov	sp, r7
 8007d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d32:	4770      	bx	lr

08007d34 <USB_ReadPacket>:
 8007d34:	b480      	push	{r7}
 8007d36:	b08b      	sub	sp, #44	@ 0x2c
 8007d38:	af00      	add	r7, sp, #0
 8007d3a:	60f8      	str	r0, [r7, #12]
 8007d3c:	60b9      	str	r1, [r7, #8]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	80fb      	strh	r3, [r7, #6]
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	61bb      	str	r3, [r7, #24]
 8007d46:	68bb      	ldr	r3, [r7, #8]
 8007d48:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d4a:	88fb      	ldrh	r3, [r7, #6]
 8007d4c:	089b      	lsrs	r3, r3, #2
 8007d4e:	b29b      	uxth	r3, r3
 8007d50:	617b      	str	r3, [r7, #20]
 8007d52:	88fb      	ldrh	r3, [r7, #6]
 8007d54:	f003 0303 	and.w	r3, r3, #3
 8007d58:	83fb      	strh	r3, [r7, #30]
 8007d5a:	2300      	movs	r3, #0
 8007d5c:	623b      	str	r3, [r7, #32]
 8007d5e:	e014      	b.n	8007d8a <USB_ReadPacket+0x56>
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007d66:	681a      	ldr	r2, [r3, #0]
 8007d68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d6a:	601a      	str	r2, [r3, #0]
 8007d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d6e:	3301      	adds	r3, #1
 8007d70:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d74:	3301      	adds	r3, #1
 8007d76:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d80:	3301      	adds	r3, #1
 8007d82:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d84:	6a3b      	ldr	r3, [r7, #32]
 8007d86:	3301      	adds	r3, #1
 8007d88:	623b      	str	r3, [r7, #32]
 8007d8a:	6a3a      	ldr	r2, [r7, #32]
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	429a      	cmp	r2, r3
 8007d90:	d3e6      	bcc.n	8007d60 <USB_ReadPacket+0x2c>
 8007d92:	8bfb      	ldrh	r3, [r7, #30]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d01e      	beq.n	8007dd6 <USB_ReadPacket+0xa2>
 8007d98:	2300      	movs	r3, #0
 8007d9a:	623b      	str	r3, [r7, #32]
 8007d9c:	69bb      	ldr	r3, [r7, #24]
 8007d9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007da2:	461a      	mov	r2, r3
 8007da4:	f107 0310 	add.w	r3, r7, #16
 8007da8:	6812      	ldr	r2, [r2, #0]
 8007daa:	601a      	str	r2, [r3, #0]
 8007dac:	693a      	ldr	r2, [r7, #16]
 8007dae:	6a3b      	ldr	r3, [r7, #32]
 8007db0:	b2db      	uxtb	r3, r3
 8007db2:	00db      	lsls	r3, r3, #3
 8007db4:	fa22 f303 	lsr.w	r3, r2, r3
 8007db8:	b2da      	uxtb	r2, r3
 8007dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dbc:	701a      	strb	r2, [r3, #0]
 8007dbe:	6a3b      	ldr	r3, [r7, #32]
 8007dc0:	3301      	adds	r3, #1
 8007dc2:	623b      	str	r3, [r7, #32]
 8007dc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	627b      	str	r3, [r7, #36]	@ 0x24
 8007dca:	8bfb      	ldrh	r3, [r7, #30]
 8007dcc:	3b01      	subs	r3, #1
 8007dce:	83fb      	strh	r3, [r7, #30]
 8007dd0:	8bfb      	ldrh	r3, [r7, #30]
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d1ea      	bne.n	8007dac <USB_ReadPacket+0x78>
 8007dd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007dd8:	4618      	mov	r0, r3
 8007dda:	372c      	adds	r7, #44	@ 0x2c
 8007ddc:	46bd      	mov	sp, r7
 8007dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de2:	4770      	bx	lr

08007de4 <USB_ReadInterrupts>:
 8007de4:	b480      	push	{r7}
 8007de6:	b085      	sub	sp, #20
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	695b      	ldr	r3, [r3, #20]
 8007df0:	60fb      	str	r3, [r7, #12]
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	4013      	ands	r3, r2
 8007dfa:	60fb      	str	r3, [r7, #12]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3714      	adds	r7, #20
 8007e02:	46bd      	mov	sp, r7
 8007e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e08:	4770      	bx	lr

08007e0a <USB_ReadChInterrupts>:
 8007e0a:	b480      	push	{r7}
 8007e0c:	b085      	sub	sp, #20
 8007e0e:	af00      	add	r7, sp, #0
 8007e10:	6078      	str	r0, [r7, #4]
 8007e12:	460b      	mov	r3, r1
 8007e14:	70fb      	strb	r3, [r7, #3]
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	60fb      	str	r3, [r7, #12]
 8007e1a:	78fb      	ldrb	r3, [r7, #3]
 8007e1c:	015a      	lsls	r2, r3, #5
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	4413      	add	r3, r2
 8007e22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e26:	689b      	ldr	r3, [r3, #8]
 8007e28:	60bb      	str	r3, [r7, #8]
 8007e2a:	78fb      	ldrb	r3, [r7, #3]
 8007e2c:	015a      	lsls	r2, r3, #5
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	4413      	add	r3, r2
 8007e32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007e36:	68db      	ldr	r3, [r3, #12]
 8007e38:	68ba      	ldr	r2, [r7, #8]
 8007e3a:	4013      	ands	r3, r2
 8007e3c:	60bb      	str	r3, [r7, #8]
 8007e3e:	68bb      	ldr	r3, [r7, #8]
 8007e40:	4618      	mov	r0, r3
 8007e42:	3714      	adds	r7, #20
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <USB_GetMode>:
 8007e4c:	b480      	push	{r7}
 8007e4e:	b083      	sub	sp, #12
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	695b      	ldr	r3, [r3, #20]
 8007e58:	f003 0301 	and.w	r3, r3, #1
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	370c      	adds	r7, #12
 8007e60:	46bd      	mov	sp, r7
 8007e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e66:	4770      	bx	lr

08007e68 <USB_CoreReset>:
 8007e68:	b480      	push	{r7}
 8007e6a:	b085      	sub	sp, #20
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	6078      	str	r0, [r7, #4]
 8007e70:	2300      	movs	r3, #0
 8007e72:	60fb      	str	r3, [r7, #12]
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	3301      	adds	r3, #1
 8007e78:	60fb      	str	r3, [r7, #12]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007e80:	d901      	bls.n	8007e86 <USB_CoreReset+0x1e>
 8007e82:	2303      	movs	r3, #3
 8007e84:	e01b      	b.n	8007ebe <USB_CoreReset+0x56>
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	691b      	ldr	r3, [r3, #16]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	daf2      	bge.n	8007e74 <USB_CoreReset+0xc>
 8007e8e:	2300      	movs	r3, #0
 8007e90:	60fb      	str	r3, [r7, #12]
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	f043 0201 	orr.w	r2, r3, #1
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	611a      	str	r2, [r3, #16]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	3301      	adds	r3, #1
 8007ea2:	60fb      	str	r3, [r7, #12]
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007eaa:	d901      	bls.n	8007eb0 <USB_CoreReset+0x48>
 8007eac:	2303      	movs	r3, #3
 8007eae:	e006      	b.n	8007ebe <USB_CoreReset+0x56>
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	691b      	ldr	r3, [r3, #16]
 8007eb4:	f003 0301 	and.w	r3, r3, #1
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d0f0      	beq.n	8007e9e <USB_CoreReset+0x36>
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3714      	adds	r7, #20
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec8:	4770      	bx	lr
	...

08007ecc <USB_HostInit>:
 8007ecc:	b084      	sub	sp, #16
 8007ece:	b580      	push	{r7, lr}
 8007ed0:	b086      	sub	sp, #24
 8007ed2:	af00      	add	r7, sp, #0
 8007ed4:	6078      	str	r0, [r7, #4]
 8007ed6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8007eda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8007ede:	2300      	movs	r3, #0
 8007ee0:	75fb      	strb	r3, [r7, #23]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	60fb      	str	r3, [r7, #12]
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007eec:	461a      	mov	r2, r3
 8007eee:	2300      	movs	r3, #0
 8007ef0:	6013      	str	r3, [r2, #0]
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007ef6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	639a      	str	r2, [r3, #56]	@ 0x38
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f02:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	639a      	str	r2, [r3, #56]	@ 0x38
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f0e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	639a      	str	r2, [r3, #56]	@ 0x38
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	68db      	ldr	r3, [r3, #12]
 8007f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d119      	bne.n	8007f56 <USB_HostInit+0x8a>
 8007f22:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d10a      	bne.n	8007f40 <USB_HostInit+0x74>
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007f38:	f043 0304 	orr.w	r3, r3, #4
 8007f3c:	6013      	str	r3, [r2, #0]
 8007f3e:	e014      	b.n	8007f6a <USB_HostInit+0x9e>
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	68fa      	ldr	r2, [r7, #12]
 8007f4a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007f4e:	f023 0304 	bic.w	r3, r3, #4
 8007f52:	6013      	str	r3, [r2, #0]
 8007f54:	e009      	b.n	8007f6a <USB_HostInit+0x9e>
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	68fa      	ldr	r2, [r7, #12]
 8007f60:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007f64:	f023 0304 	bic.w	r3, r3, #4
 8007f68:	6013      	str	r3, [r2, #0]
 8007f6a:	2110      	movs	r1, #16
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f7ff fe43 	bl	8007bf8 <USB_FlushTxFifo>
 8007f72:	4603      	mov	r3, r0
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d001      	beq.n	8007f7c <USB_HostInit+0xb0>
 8007f78:	2301      	movs	r3, #1
 8007f7a:	75fb      	strb	r3, [r7, #23]
 8007f7c:	6878      	ldr	r0, [r7, #4]
 8007f7e:	f7ff fe6d 	bl	8007c5c <USB_FlushRxFifo>
 8007f82:	4603      	mov	r3, r0
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d001      	beq.n	8007f8c <USB_HostInit+0xc0>
 8007f88:	2301      	movs	r3, #1
 8007f8a:	75fb      	strb	r3, [r7, #23]
 8007f8c:	2300      	movs	r3, #0
 8007f8e:	613b      	str	r3, [r7, #16]
 8007f90:	e015      	b.n	8007fbe <USB_HostInit+0xf2>
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	015a      	lsls	r2, r3, #5
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	4413      	add	r3, r2
 8007f9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f9e:	461a      	mov	r2, r3
 8007fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8007fa4:	6093      	str	r3, [r2, #8]
 8007fa6:	693b      	ldr	r3, [r7, #16]
 8007fa8:	015a      	lsls	r2, r3, #5
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	4413      	add	r3, r2
 8007fae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fb2:	461a      	mov	r2, r3
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	60d3      	str	r3, [r2, #12]
 8007fb8:	693b      	ldr	r3, [r7, #16]
 8007fba:	3301      	adds	r3, #1
 8007fbc:	613b      	str	r3, [r7, #16]
 8007fbe:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d3e3      	bcc.n	8007f92 <USB_HostInit+0xc6>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2200      	movs	r2, #0
 8007fce:	619a      	str	r2, [r3, #24]
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8007fd6:	615a      	str	r2, [r3, #20]
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	4a18      	ldr	r2, [pc, #96]	@ (800803c <USB_HostInit+0x170>)
 8007fdc:	4293      	cmp	r3, r2
 8007fde:	d10b      	bne.n	8007ff8 <USB_HostInit+0x12c>
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007fe6:	625a      	str	r2, [r3, #36]	@ 0x24
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a15      	ldr	r2, [pc, #84]	@ (8008040 <USB_HostInit+0x174>)
 8007fec:	629a      	str	r2, [r3, #40]	@ 0x28
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	4a14      	ldr	r2, [pc, #80]	@ (8008044 <USB_HostInit+0x178>)
 8007ff2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8007ff6:	e009      	b.n	800800c <USB_HostInit+0x140>
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	2280      	movs	r2, #128	@ 0x80
 8007ffc:	625a      	str	r2, [r3, #36]	@ 0x24
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	4a11      	ldr	r2, [pc, #68]	@ (8008048 <USB_HostInit+0x17c>)
 8008002:	629a      	str	r2, [r3, #40]	@ 0x28
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	4a11      	ldr	r2, [pc, #68]	@ (800804c <USB_HostInit+0x180>)
 8008008:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800800c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008010:	2b00      	cmp	r3, #0
 8008012:	d105      	bne.n	8008020 <USB_HostInit+0x154>
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	699b      	ldr	r3, [r3, #24]
 8008018:	f043 0210 	orr.w	r2, r3, #16
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	619a      	str	r2, [r3, #24]
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	699a      	ldr	r2, [r3, #24]
 8008024:	4b0a      	ldr	r3, [pc, #40]	@ (8008050 <USB_HostInit+0x184>)
 8008026:	4313      	orrs	r3, r2
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	6193      	str	r3, [r2, #24]
 800802c:	7dfb      	ldrb	r3, [r7, #23]
 800802e:	4618      	mov	r0, r3
 8008030:	3718      	adds	r7, #24
 8008032:	46bd      	mov	sp, r7
 8008034:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008038:	b004      	add	sp, #16
 800803a:	4770      	bx	lr
 800803c:	40040000 	.word	0x40040000
 8008040:	01000200 	.word	0x01000200
 8008044:	00e00300 	.word	0x00e00300
 8008048:	00600080 	.word	0x00600080
 800804c:	004000e0 	.word	0x004000e0
 8008050:	a3200008 	.word	0xa3200008

08008054 <USB_InitFSLSPClkSel>:
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	460b      	mov	r3, r1
 800805e:	70fb      	strb	r3, [r7, #3]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	60fb      	str	r3, [r7, #12]
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	68fa      	ldr	r2, [r7, #12]
 800806e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8008072:	f023 0303 	bic.w	r3, r3, #3
 8008076:	6013      	str	r3, [r2, #0]
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	78fb      	ldrb	r3, [r7, #3]
 8008082:	f003 0303 	and.w	r3, r3, #3
 8008086:	68f9      	ldr	r1, [r7, #12]
 8008088:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800808c:	4313      	orrs	r3, r2
 800808e:	600b      	str	r3, [r1, #0]
 8008090:	78fb      	ldrb	r3, [r7, #3]
 8008092:	2b01      	cmp	r3, #1
 8008094:	d107      	bne.n	80080a6 <USB_InitFSLSPClkSel+0x52>
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800809c:	461a      	mov	r2, r3
 800809e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 80080a2:	6053      	str	r3, [r2, #4]
 80080a4:	e00c      	b.n	80080c0 <USB_InitFSLSPClkSel+0x6c>
 80080a6:	78fb      	ldrb	r3, [r7, #3]
 80080a8:	2b02      	cmp	r3, #2
 80080aa:	d107      	bne.n	80080bc <USB_InitFSLSPClkSel+0x68>
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80080b2:	461a      	mov	r2, r3
 80080b4:	f241 7370 	movw	r3, #6000	@ 0x1770
 80080b8:	6053      	str	r3, [r2, #4]
 80080ba:	e001      	b.n	80080c0 <USB_InitFSLSPClkSel+0x6c>
 80080bc:	2301      	movs	r3, #1
 80080be:	e000      	b.n	80080c2 <USB_InitFSLSPClkSel+0x6e>
 80080c0:	2300      	movs	r3, #0
 80080c2:	4618      	mov	r0, r3
 80080c4:	3714      	adds	r7, #20
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr

080080ce <USB_ResetPort>:
 80080ce:	b580      	push	{r7, lr}
 80080d0:	b084      	sub	sp, #16
 80080d2:	af00      	add	r7, sp, #0
 80080d4:	6078      	str	r0, [r7, #4]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	60fb      	str	r3, [r7, #12]
 80080da:	2300      	movs	r3, #0
 80080dc:	60bb      	str	r3, [r7, #8]
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80080e4:	681b      	ldr	r3, [r3, #0]
 80080e6:	60bb      	str	r3, [r7, #8]
 80080e8:	68bb      	ldr	r3, [r7, #8]
 80080ea:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80080ee:	60bb      	str	r3, [r7, #8]
 80080f0:	68bb      	ldr	r3, [r7, #8]
 80080f2:	68fa      	ldr	r2, [r7, #12]
 80080f4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80080f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80080fc:	6013      	str	r3, [r2, #0]
 80080fe:	2064      	movs	r0, #100	@ 0x64
 8008100:	f7f9 fba0 	bl	8001844 <HAL_Delay>
 8008104:	68bb      	ldr	r3, [r7, #8]
 8008106:	68fa      	ldr	r2, [r7, #12]
 8008108:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800810c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008110:	6013      	str	r3, [r2, #0]
 8008112:	200a      	movs	r0, #10
 8008114:	f7f9 fb96 	bl	8001844 <HAL_Delay>
 8008118:	2300      	movs	r3, #0
 800811a:	4618      	mov	r0, r3
 800811c:	3710      	adds	r7, #16
 800811e:	46bd      	mov	sp, r7
 8008120:	bd80      	pop	{r7, pc}

08008122 <USB_DriveVbus>:
 8008122:	b480      	push	{r7}
 8008124:	b085      	sub	sp, #20
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
 800812a:	460b      	mov	r3, r1
 800812c:	70fb      	strb	r3, [r7, #3]
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	60fb      	str	r3, [r7, #12]
 8008132:	2300      	movs	r3, #0
 8008134:	60bb      	str	r3, [r7, #8]
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	60bb      	str	r3, [r7, #8]
 8008140:	68bb      	ldr	r3, [r7, #8]
 8008142:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8008146:	60bb      	str	r3, [r7, #8]
 8008148:	68bb      	ldr	r3, [r7, #8]
 800814a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800814e:	2b00      	cmp	r3, #0
 8008150:	d109      	bne.n	8008166 <USB_DriveVbus+0x44>
 8008152:	78fb      	ldrb	r3, [r7, #3]
 8008154:	2b01      	cmp	r3, #1
 8008156:	d106      	bne.n	8008166 <USB_DriveVbus+0x44>
 8008158:	68bb      	ldr	r3, [r7, #8]
 800815a:	68fa      	ldr	r2, [r7, #12]
 800815c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008160:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008164:	6013      	str	r3, [r2, #0]
 8008166:	68bb      	ldr	r3, [r7, #8]
 8008168:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800816c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008170:	d109      	bne.n	8008186 <USB_DriveVbus+0x64>
 8008172:	78fb      	ldrb	r3, [r7, #3]
 8008174:	2b00      	cmp	r3, #0
 8008176:	d106      	bne.n	8008186 <USB_DriveVbus+0x64>
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	68fa      	ldr	r2, [r7, #12]
 800817c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8008180:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008184:	6013      	str	r3, [r2, #0]
 8008186:	2300      	movs	r3, #0
 8008188:	4618      	mov	r0, r3
 800818a:	3714      	adds	r7, #20
 800818c:	46bd      	mov	sp, r7
 800818e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008192:	4770      	bx	lr

08008194 <USB_GetHostSpeed>:
 8008194:	b480      	push	{r7}
 8008196:	b085      	sub	sp, #20
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	60fb      	str	r3, [r7, #12]
 80081a0:	2300      	movs	r3, #0
 80081a2:	60bb      	str	r3, [r7, #8]
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	60bb      	str	r3, [r7, #8]
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	0c5b      	lsrs	r3, r3, #17
 80081b2:	f003 0303 	and.w	r3, r3, #3
 80081b6:	4618      	mov	r0, r3
 80081b8:	3714      	adds	r7, #20
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr

080081c2 <USB_GetCurrentFrame>:
 80081c2:	b480      	push	{r7}
 80081c4:	b085      	sub	sp, #20
 80081c6:	af00      	add	r7, sp, #0
 80081c8:	6078      	str	r0, [r7, #4]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	60fb      	str	r3, [r7, #12]
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80081d4:	689b      	ldr	r3, [r3, #8]
 80081d6:	b29b      	uxth	r3, r3
 80081d8:	4618      	mov	r0, r3
 80081da:	3714      	adds	r7, #20
 80081dc:	46bd      	mov	sp, r7
 80081de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e2:	4770      	bx	lr

080081e4 <USB_HC_Init>:
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b088      	sub	sp, #32
 80081e8:	af00      	add	r7, sp, #0
 80081ea:	6078      	str	r0, [r7, #4]
 80081ec:	4608      	mov	r0, r1
 80081ee:	4611      	mov	r1, r2
 80081f0:	461a      	mov	r2, r3
 80081f2:	4603      	mov	r3, r0
 80081f4:	70fb      	strb	r3, [r7, #3]
 80081f6:	460b      	mov	r3, r1
 80081f8:	70bb      	strb	r3, [r7, #2]
 80081fa:	4613      	mov	r3, r2
 80081fc:	707b      	strb	r3, [r7, #1]
 80081fe:	2300      	movs	r3, #0
 8008200:	77fb      	strb	r3, [r7, #31]
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	613b      	str	r3, [r7, #16]
 8008206:	78fb      	ldrb	r3, [r7, #3]
 8008208:	015a      	lsls	r2, r3, #5
 800820a:	693b      	ldr	r3, [r7, #16]
 800820c:	4413      	add	r3, r2
 800820e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008212:	461a      	mov	r2, r3
 8008214:	f04f 33ff 	mov.w	r3, #4294967295
 8008218:	6093      	str	r3, [r2, #8]
 800821a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800821e:	2b03      	cmp	r3, #3
 8008220:	d87c      	bhi.n	800831c <USB_HC_Init+0x138>
 8008222:	a201      	add	r2, pc, #4	@ (adr r2, 8008228 <USB_HC_Init+0x44>)
 8008224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008228:	08008239 	.word	0x08008239
 800822c:	080082df 	.word	0x080082df
 8008230:	08008239 	.word	0x08008239
 8008234:	080082a1 	.word	0x080082a1
 8008238:	78fb      	ldrb	r3, [r7, #3]
 800823a:	015a      	lsls	r2, r3, #5
 800823c:	693b      	ldr	r3, [r7, #16]
 800823e:	4413      	add	r3, r2
 8008240:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008244:	461a      	mov	r2, r3
 8008246:	f240 439d 	movw	r3, #1181	@ 0x49d
 800824a:	60d3      	str	r3, [r2, #12]
 800824c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008250:	2b00      	cmp	r3, #0
 8008252:	da10      	bge.n	8008276 <USB_HC_Init+0x92>
 8008254:	78fb      	ldrb	r3, [r7, #3]
 8008256:	015a      	lsls	r2, r3, #5
 8008258:	693b      	ldr	r3, [r7, #16]
 800825a:	4413      	add	r3, r2
 800825c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	78fa      	ldrb	r2, [r7, #3]
 8008264:	0151      	lsls	r1, r2, #5
 8008266:	693a      	ldr	r2, [r7, #16]
 8008268:	440a      	add	r2, r1
 800826a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800826e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008272:	60d3      	str	r3, [r2, #12]
 8008274:	e055      	b.n	8008322 <USB_HC_Init+0x13e>
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	4a6f      	ldr	r2, [pc, #444]	@ (8008438 <USB_HC_Init+0x254>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d151      	bne.n	8008322 <USB_HC_Init+0x13e>
 800827e:	78fb      	ldrb	r3, [r7, #3]
 8008280:	015a      	lsls	r2, r3, #5
 8008282:	693b      	ldr	r3, [r7, #16]
 8008284:	4413      	add	r3, r2
 8008286:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	78fa      	ldrb	r2, [r7, #3]
 800828e:	0151      	lsls	r1, r2, #5
 8008290:	693a      	ldr	r2, [r7, #16]
 8008292:	440a      	add	r2, r1
 8008294:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008298:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800829c:	60d3      	str	r3, [r2, #12]
 800829e:	e040      	b.n	8008322 <USB_HC_Init+0x13e>
 80082a0:	78fb      	ldrb	r3, [r7, #3]
 80082a2:	015a      	lsls	r2, r3, #5
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	4413      	add	r3, r2
 80082a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082ac:	461a      	mov	r2, r3
 80082ae:	f240 639d 	movw	r3, #1693	@ 0x69d
 80082b2:	60d3      	str	r3, [r2, #12]
 80082b4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80082b8:	2b00      	cmp	r3, #0
 80082ba:	da34      	bge.n	8008326 <USB_HC_Init+0x142>
 80082bc:	78fb      	ldrb	r3, [r7, #3]
 80082be:	015a      	lsls	r2, r3, #5
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	4413      	add	r3, r2
 80082c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	78fa      	ldrb	r2, [r7, #3]
 80082cc:	0151      	lsls	r1, r2, #5
 80082ce:	693a      	ldr	r2, [r7, #16]
 80082d0:	440a      	add	r2, r1
 80082d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80082d6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80082da:	60d3      	str	r3, [r2, #12]
 80082dc:	e023      	b.n	8008326 <USB_HC_Init+0x142>
 80082de:	78fb      	ldrb	r3, [r7, #3]
 80082e0:	015a      	lsls	r2, r3, #5
 80082e2:	693b      	ldr	r3, [r7, #16]
 80082e4:	4413      	add	r3, r2
 80082e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80082ea:	461a      	mov	r2, r3
 80082ec:	f240 2325 	movw	r3, #549	@ 0x225
 80082f0:	60d3      	str	r3, [r2, #12]
 80082f2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	da17      	bge.n	800832a <USB_HC_Init+0x146>
 80082fa:	78fb      	ldrb	r3, [r7, #3]
 80082fc:	015a      	lsls	r2, r3, #5
 80082fe:	693b      	ldr	r3, [r7, #16]
 8008300:	4413      	add	r3, r2
 8008302:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	78fa      	ldrb	r2, [r7, #3]
 800830a:	0151      	lsls	r1, r2, #5
 800830c:	693a      	ldr	r2, [r7, #16]
 800830e:	440a      	add	r2, r1
 8008310:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008314:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8008318:	60d3      	str	r3, [r2, #12]
 800831a:	e006      	b.n	800832a <USB_HC_Init+0x146>
 800831c:	2301      	movs	r3, #1
 800831e:	77fb      	strb	r3, [r7, #31]
 8008320:	e004      	b.n	800832c <USB_HC_Init+0x148>
 8008322:	bf00      	nop
 8008324:	e002      	b.n	800832c <USB_HC_Init+0x148>
 8008326:	bf00      	nop
 8008328:	e000      	b.n	800832c <USB_HC_Init+0x148>
 800832a:	bf00      	nop
 800832c:	78fb      	ldrb	r3, [r7, #3]
 800832e:	015a      	lsls	r2, r3, #5
 8008330:	693b      	ldr	r3, [r7, #16]
 8008332:	4413      	add	r3, r2
 8008334:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008338:	461a      	mov	r2, r3
 800833a:	2300      	movs	r3, #0
 800833c:	6053      	str	r3, [r2, #4]
 800833e:	78fb      	ldrb	r3, [r7, #3]
 8008340:	015a      	lsls	r2, r3, #5
 8008342:	693b      	ldr	r3, [r7, #16]
 8008344:	4413      	add	r3, r2
 8008346:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	78fa      	ldrb	r2, [r7, #3]
 800834e:	0151      	lsls	r1, r2, #5
 8008350:	693a      	ldr	r2, [r7, #16]
 8008352:	440a      	add	r2, r1
 8008354:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008358:	f043 0302 	orr.w	r3, r3, #2
 800835c:	60d3      	str	r3, [r2, #12]
 800835e:	693b      	ldr	r3, [r7, #16]
 8008360:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008364:	699a      	ldr	r2, [r3, #24]
 8008366:	78fb      	ldrb	r3, [r7, #3]
 8008368:	f003 030f 	and.w	r3, r3, #15
 800836c:	2101      	movs	r1, #1
 800836e:	fa01 f303 	lsl.w	r3, r1, r3
 8008372:	6939      	ldr	r1, [r7, #16]
 8008374:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8008378:	4313      	orrs	r3, r2
 800837a:	618b      	str	r3, [r1, #24]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	699b      	ldr	r3, [r3, #24]
 8008380:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	619a      	str	r2, [r3, #24]
 8008388:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800838c:	2b00      	cmp	r3, #0
 800838e:	da03      	bge.n	8008398 <USB_HC_Init+0x1b4>
 8008390:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008394:	61bb      	str	r3, [r7, #24]
 8008396:	e001      	b.n	800839c <USB_HC_Init+0x1b8>
 8008398:	2300      	movs	r3, #0
 800839a:	61bb      	str	r3, [r7, #24]
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f7ff fef9 	bl	8008194 <USB_GetHostSpeed>
 80083a2:	60f8      	str	r0, [r7, #12]
 80083a4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80083a8:	2b02      	cmp	r3, #2
 80083aa:	d106      	bne.n	80083ba <USB_HC_Init+0x1d6>
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2b02      	cmp	r3, #2
 80083b0:	d003      	beq.n	80083ba <USB_HC_Init+0x1d6>
 80083b2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80083b6:	617b      	str	r3, [r7, #20]
 80083b8:	e001      	b.n	80083be <USB_HC_Init+0x1da>
 80083ba:	2300      	movs	r3, #0
 80083bc:	617b      	str	r3, [r7, #20]
 80083be:	787b      	ldrb	r3, [r7, #1]
 80083c0:	059b      	lsls	r3, r3, #22
 80083c2:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
 80083c6:	78bb      	ldrb	r3, [r7, #2]
 80083c8:	02db      	lsls	r3, r3, #11
 80083ca:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
 80083ce:	431a      	orrs	r2, r3
 80083d0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80083d4:	049b      	lsls	r3, r3, #18
 80083d6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80083da:	431a      	orrs	r2, r3
 80083dc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80083de:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80083e2:	431a      	orrs	r2, r3
 80083e4:	69bb      	ldr	r3, [r7, #24]
 80083e6:	431a      	orrs	r2, r3
 80083e8:	697b      	ldr	r3, [r7, #20]
 80083ea:	4313      	orrs	r3, r2
 80083ec:	78fa      	ldrb	r2, [r7, #3]
 80083ee:	0151      	lsls	r1, r2, #5
 80083f0:	693a      	ldr	r2, [r7, #16]
 80083f2:	440a      	add	r2, r1
 80083f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80083f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80083fc:	6013      	str	r3, [r2, #0]
 80083fe:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008402:	2b03      	cmp	r3, #3
 8008404:	d003      	beq.n	800840e <USB_HC_Init+0x22a>
 8008406:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800840a:	2b01      	cmp	r3, #1
 800840c:	d10f      	bne.n	800842e <USB_HC_Init+0x24a>
 800840e:	78fb      	ldrb	r3, [r7, #3]
 8008410:	015a      	lsls	r2, r3, #5
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	4413      	add	r3, r2
 8008416:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	78fa      	ldrb	r2, [r7, #3]
 800841e:	0151      	lsls	r1, r2, #5
 8008420:	693a      	ldr	r2, [r7, #16]
 8008422:	440a      	add	r2, r1
 8008424:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008428:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800842c:	6013      	str	r3, [r2, #0]
 800842e:	7ffb      	ldrb	r3, [r7, #31]
 8008430:	4618      	mov	r0, r3
 8008432:	3720      	adds	r7, #32
 8008434:	46bd      	mov	sp, r7
 8008436:	bd80      	pop	{r7, pc}
 8008438:	40040000 	.word	0x40040000

0800843c <USB_HC_StartXfer>:
 800843c:	b580      	push	{r7, lr}
 800843e:	b08c      	sub	sp, #48	@ 0x30
 8008440:	af02      	add	r7, sp, #8
 8008442:	60f8      	str	r0, [r7, #12]
 8008444:	60b9      	str	r1, [r7, #8]
 8008446:	4613      	mov	r3, r2
 8008448:	71fb      	strb	r3, [r7, #7]
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	623b      	str	r3, [r7, #32]
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	785b      	ldrb	r3, [r3, #1]
 8008452:	61fb      	str	r3, [r7, #28]
 8008454:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008458:	837b      	strh	r3, [r7, #26]
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	4a5d      	ldr	r2, [pc, #372]	@ (80085d4 <USB_HC_StartXfer+0x198>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d12f      	bne.n	80084c2 <USB_HC_StartXfer+0x86>
 8008462:	79fb      	ldrb	r3, [r7, #7]
 8008464:	2b01      	cmp	r3, #1
 8008466:	d11c      	bne.n	80084a2 <USB_HC_StartXfer+0x66>
 8008468:	68bb      	ldr	r3, [r7, #8]
 800846a:	7c9b      	ldrb	r3, [r3, #18]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d003      	beq.n	8008478 <USB_HC_StartXfer+0x3c>
 8008470:	68bb      	ldr	r3, [r7, #8]
 8008472:	7c9b      	ldrb	r3, [r3, #18]
 8008474:	2b02      	cmp	r3, #2
 8008476:	d124      	bne.n	80084c2 <USB_HC_StartXfer+0x86>
 8008478:	68bb      	ldr	r3, [r7, #8]
 800847a:	799b      	ldrb	r3, [r3, #6]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d120      	bne.n	80084c2 <USB_HC_StartXfer+0x86>
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	015a      	lsls	r2, r3, #5
 8008484:	6a3b      	ldr	r3, [r7, #32]
 8008486:	4413      	add	r3, r2
 8008488:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	69fa      	ldr	r2, [r7, #28]
 8008490:	0151      	lsls	r1, r2, #5
 8008492:	6a3a      	ldr	r2, [r7, #32]
 8008494:	440a      	add	r2, r1
 8008496:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800849a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800849e:	60d3      	str	r3, [r2, #12]
 80084a0:	e00f      	b.n	80084c2 <USB_HC_StartXfer+0x86>
 80084a2:	68bb      	ldr	r3, [r7, #8]
 80084a4:	791b      	ldrb	r3, [r3, #4]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d10b      	bne.n	80084c2 <USB_HC_StartXfer+0x86>
 80084aa:	68bb      	ldr	r3, [r7, #8]
 80084ac:	795b      	ldrb	r3, [r3, #5]
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d107      	bne.n	80084c2 <USB_HC_StartXfer+0x86>
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	785b      	ldrb	r3, [r3, #1]
 80084b6:	4619      	mov	r1, r3
 80084b8:	68f8      	ldr	r0, [r7, #12]
 80084ba:	f000 fb6b 	bl	8008b94 <USB_DoPing>
 80084be:	2300      	movs	r3, #0
 80084c0:	e232      	b.n	8008928 <USB_HC_StartXfer+0x4ec>
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	799b      	ldrb	r3, [r3, #6]
 80084c6:	2b01      	cmp	r3, #1
 80084c8:	d158      	bne.n	800857c <USB_HC_StartXfer+0x140>
 80084ca:	2301      	movs	r3, #1
 80084cc:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80084ce:	68bb      	ldr	r3, [r7, #8]
 80084d0:	78db      	ldrb	r3, [r3, #3]
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d007      	beq.n	80084e6 <USB_HC_StartXfer+0xaa>
 80084d6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80084d8:	68ba      	ldr	r2, [r7, #8]
 80084da:	8a92      	ldrh	r2, [r2, #20]
 80084dc:	fb03 f202 	mul.w	r2, r3, r2
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	61da      	str	r2, [r3, #28]
 80084e4:	e07c      	b.n	80085e0 <USB_HC_StartXfer+0x1a4>
 80084e6:	68bb      	ldr	r3, [r7, #8]
 80084e8:	7c9b      	ldrb	r3, [r3, #18]
 80084ea:	2b01      	cmp	r3, #1
 80084ec:	d130      	bne.n	8008550 <USB_HC_StartXfer+0x114>
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	6a1b      	ldr	r3, [r3, #32]
 80084f2:	2bbc      	cmp	r3, #188	@ 0xbc
 80084f4:	d918      	bls.n	8008528 <USB_HC_StartXfer+0xec>
 80084f6:	68bb      	ldr	r3, [r7, #8]
 80084f8:	8a9b      	ldrh	r3, [r3, #20]
 80084fa:	461a      	mov	r2, r3
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	61da      	str	r2, [r3, #28]
 8008500:	68bb      	ldr	r3, [r7, #8]
 8008502:	69da      	ldr	r2, [r3, #28]
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	621a      	str	r2, [r3, #32]
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	68db      	ldr	r3, [r3, #12]
 800850c:	2b01      	cmp	r3, #1
 800850e:	d003      	beq.n	8008518 <USB_HC_StartXfer+0xdc>
 8008510:	68bb      	ldr	r3, [r7, #8]
 8008512:	68db      	ldr	r3, [r3, #12]
 8008514:	2b02      	cmp	r3, #2
 8008516:	d103      	bne.n	8008520 <USB_HC_StartXfer+0xe4>
 8008518:	68bb      	ldr	r3, [r7, #8]
 800851a:	2202      	movs	r2, #2
 800851c:	60da      	str	r2, [r3, #12]
 800851e:	e05f      	b.n	80085e0 <USB_HC_StartXfer+0x1a4>
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	2201      	movs	r2, #1
 8008524:	60da      	str	r2, [r3, #12]
 8008526:	e05b      	b.n	80085e0 <USB_HC_StartXfer+0x1a4>
 8008528:	68bb      	ldr	r3, [r7, #8]
 800852a:	6a1a      	ldr	r2, [r3, #32]
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	61da      	str	r2, [r3, #28]
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	2b01      	cmp	r3, #1
 8008536:	d007      	beq.n	8008548 <USB_HC_StartXfer+0x10c>
 8008538:	68bb      	ldr	r3, [r7, #8]
 800853a:	68db      	ldr	r3, [r3, #12]
 800853c:	2b02      	cmp	r3, #2
 800853e:	d003      	beq.n	8008548 <USB_HC_StartXfer+0x10c>
 8008540:	68bb      	ldr	r3, [r7, #8]
 8008542:	2204      	movs	r2, #4
 8008544:	60da      	str	r2, [r3, #12]
 8008546:	e04b      	b.n	80085e0 <USB_HC_StartXfer+0x1a4>
 8008548:	68bb      	ldr	r3, [r7, #8]
 800854a:	2203      	movs	r2, #3
 800854c:	60da      	str	r2, [r3, #12]
 800854e:	e047      	b.n	80085e0 <USB_HC_StartXfer+0x1a4>
 8008550:	79fb      	ldrb	r3, [r7, #7]
 8008552:	2b01      	cmp	r3, #1
 8008554:	d10d      	bne.n	8008572 <USB_HC_StartXfer+0x136>
 8008556:	68bb      	ldr	r3, [r7, #8]
 8008558:	6a1b      	ldr	r3, [r3, #32]
 800855a:	68ba      	ldr	r2, [r7, #8]
 800855c:	8a92      	ldrh	r2, [r2, #20]
 800855e:	4293      	cmp	r3, r2
 8008560:	d907      	bls.n	8008572 <USB_HC_StartXfer+0x136>
 8008562:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8008564:	68ba      	ldr	r2, [r7, #8]
 8008566:	8a92      	ldrh	r2, [r2, #20]
 8008568:	fb03 f202 	mul.w	r2, r3, r2
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	61da      	str	r2, [r3, #28]
 8008570:	e036      	b.n	80085e0 <USB_HC_StartXfer+0x1a4>
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	6a1a      	ldr	r2, [r3, #32]
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	61da      	str	r2, [r3, #28]
 800857a:	e031      	b.n	80085e0 <USB_HC_StartXfer+0x1a4>
 800857c:	68bb      	ldr	r3, [r7, #8]
 800857e:	6a1b      	ldr	r3, [r3, #32]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d018      	beq.n	80085b6 <USB_HC_StartXfer+0x17a>
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	6a1b      	ldr	r3, [r3, #32]
 8008588:	68ba      	ldr	r2, [r7, #8]
 800858a:	8a92      	ldrh	r2, [r2, #20]
 800858c:	4413      	add	r3, r2
 800858e:	3b01      	subs	r3, #1
 8008590:	68ba      	ldr	r2, [r7, #8]
 8008592:	8a92      	ldrh	r2, [r2, #20]
 8008594:	fbb3 f3f2 	udiv	r3, r3, r2
 8008598:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800859a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800859c:	8b7b      	ldrh	r3, [r7, #26]
 800859e:	429a      	cmp	r2, r3
 80085a0:	d90b      	bls.n	80085ba <USB_HC_StartXfer+0x17e>
 80085a2:	8b7b      	ldrh	r3, [r7, #26]
 80085a4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80085a6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80085a8:	68ba      	ldr	r2, [r7, #8]
 80085aa:	8a92      	ldrh	r2, [r2, #20]
 80085ac:	fb03 f202 	mul.w	r2, r3, r2
 80085b0:	68bb      	ldr	r3, [r7, #8]
 80085b2:	61da      	str	r2, [r3, #28]
 80085b4:	e001      	b.n	80085ba <USB_HC_StartXfer+0x17e>
 80085b6:	2301      	movs	r3, #1
 80085b8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	78db      	ldrb	r3, [r3, #3]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00a      	beq.n	80085d8 <USB_HC_StartXfer+0x19c>
 80085c2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80085c4:	68ba      	ldr	r2, [r7, #8]
 80085c6:	8a92      	ldrh	r2, [r2, #20]
 80085c8:	fb03 f202 	mul.w	r2, r3, r2
 80085cc:	68bb      	ldr	r3, [r7, #8]
 80085ce:	61da      	str	r2, [r3, #28]
 80085d0:	e006      	b.n	80085e0 <USB_HC_StartXfer+0x1a4>
 80085d2:	bf00      	nop
 80085d4:	40040000 	.word	0x40040000
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	6a1a      	ldr	r2, [r3, #32]
 80085dc:	68bb      	ldr	r3, [r7, #8]
 80085de:	61da      	str	r2, [r3, #28]
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	69db      	ldr	r3, [r3, #28]
 80085e4:	f3c3 0212 	ubfx	r2, r3, #0, #19
 80085e8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80085ea:	04d9      	lsls	r1, r3, #19
 80085ec:	4ba3      	ldr	r3, [pc, #652]	@ (800887c <USB_HC_StartXfer+0x440>)
 80085ee:	400b      	ands	r3, r1
 80085f0:	431a      	orrs	r2, r3
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	7d9b      	ldrb	r3, [r3, #22]
 80085f6:	075b      	lsls	r3, r3, #29
 80085f8:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 80085fc:	69f9      	ldr	r1, [r7, #28]
 80085fe:	0148      	lsls	r0, r1, #5
 8008600:	6a39      	ldr	r1, [r7, #32]
 8008602:	4401      	add	r1, r0
 8008604:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8008608:	4313      	orrs	r3, r2
 800860a:	610b      	str	r3, [r1, #16]
 800860c:	79fb      	ldrb	r3, [r7, #7]
 800860e:	2b00      	cmp	r3, #0
 8008610:	d009      	beq.n	8008626 <USB_HC_StartXfer+0x1ea>
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	6999      	ldr	r1, [r3, #24]
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	015a      	lsls	r2, r3, #5
 800861a:	6a3b      	ldr	r3, [r7, #32]
 800861c:	4413      	add	r3, r2
 800861e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008622:	460a      	mov	r2, r1
 8008624:	615a      	str	r2, [r3, #20]
 8008626:	6a3b      	ldr	r3, [r7, #32]
 8008628:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800862c:	689b      	ldr	r3, [r3, #8]
 800862e:	f003 0301 	and.w	r3, r3, #1
 8008632:	2b00      	cmp	r3, #0
 8008634:	bf0c      	ite	eq
 8008636:	2301      	moveq	r3, #1
 8008638:	2300      	movne	r3, #0
 800863a:	b2db      	uxtb	r3, r3
 800863c:	767b      	strb	r3, [r7, #25]
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	015a      	lsls	r2, r3, #5
 8008642:	6a3b      	ldr	r3, [r7, #32]
 8008644:	4413      	add	r3, r2
 8008646:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	69fa      	ldr	r2, [r7, #28]
 800864e:	0151      	lsls	r1, r2, #5
 8008650:	6a3a      	ldr	r2, [r7, #32]
 8008652:	440a      	add	r2, r1
 8008654:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008658:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800865c:	6013      	str	r3, [r2, #0]
 800865e:	69fb      	ldr	r3, [r7, #28]
 8008660:	015a      	lsls	r2, r3, #5
 8008662:	6a3b      	ldr	r3, [r7, #32]
 8008664:	4413      	add	r3, r2
 8008666:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800866a:	681a      	ldr	r2, [r3, #0]
 800866c:	7e7b      	ldrb	r3, [r7, #25]
 800866e:	075b      	lsls	r3, r3, #29
 8008670:	69f9      	ldr	r1, [r7, #28]
 8008672:	0148      	lsls	r0, r1, #5
 8008674:	6a39      	ldr	r1, [r7, #32]
 8008676:	4401      	add	r1, r0
 8008678:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800867c:	4313      	orrs	r3, r2
 800867e:	600b      	str	r3, [r1, #0]
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	799b      	ldrb	r3, [r3, #6]
 8008684:	2b01      	cmp	r3, #1
 8008686:	f040 80c3 	bne.w	8008810 <USB_HC_StartXfer+0x3d4>
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	7c5b      	ldrb	r3, [r3, #17]
 800868e:	01db      	lsls	r3, r3, #7
 8008690:	68ba      	ldr	r2, [r7, #8]
 8008692:	7c12      	ldrb	r2, [r2, #16]
 8008694:	4313      	orrs	r3, r2
 8008696:	69fa      	ldr	r2, [r7, #28]
 8008698:	0151      	lsls	r1, r2, #5
 800869a:	6a3a      	ldr	r2, [r7, #32]
 800869c:	440a      	add	r2, r1
 800869e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80086a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80086a6:	6053      	str	r3, [r2, #4]
 80086a8:	69fb      	ldr	r3, [r7, #28]
 80086aa:	015a      	lsls	r2, r3, #5
 80086ac:	6a3b      	ldr	r3, [r7, #32]
 80086ae:	4413      	add	r3, r2
 80086b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086b4:	68db      	ldr	r3, [r3, #12]
 80086b6:	69fa      	ldr	r2, [r7, #28]
 80086b8:	0151      	lsls	r1, r2, #5
 80086ba:	6a3a      	ldr	r2, [r7, #32]
 80086bc:	440a      	add	r2, r1
 80086be:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80086c2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80086c6:	60d3      	str	r3, [r2, #12]
 80086c8:	68bb      	ldr	r3, [r7, #8]
 80086ca:	79db      	ldrb	r3, [r3, #7]
 80086cc:	2b01      	cmp	r3, #1
 80086ce:	d123      	bne.n	8008718 <USB_HC_StartXfer+0x2dc>
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	78db      	ldrb	r3, [r3, #3]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d11f      	bne.n	8008718 <USB_HC_StartXfer+0x2dc>
 80086d8:	69fb      	ldr	r3, [r7, #28]
 80086da:	015a      	lsls	r2, r3, #5
 80086dc:	6a3b      	ldr	r3, [r7, #32]
 80086de:	4413      	add	r3, r2
 80086e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	69fa      	ldr	r2, [r7, #28]
 80086e8:	0151      	lsls	r1, r2, #5
 80086ea:	6a3a      	ldr	r2, [r7, #32]
 80086ec:	440a      	add	r2, r1
 80086ee:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80086f2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80086f6:	6053      	str	r3, [r2, #4]
 80086f8:	69fb      	ldr	r3, [r7, #28]
 80086fa:	015a      	lsls	r2, r3, #5
 80086fc:	6a3b      	ldr	r3, [r7, #32]
 80086fe:	4413      	add	r3, r2
 8008700:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008704:	68db      	ldr	r3, [r3, #12]
 8008706:	69fa      	ldr	r2, [r7, #28]
 8008708:	0151      	lsls	r1, r2, #5
 800870a:	6a3a      	ldr	r2, [r7, #32]
 800870c:	440a      	add	r2, r1
 800870e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008712:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008716:	60d3      	str	r3, [r2, #12]
 8008718:	68bb      	ldr	r3, [r7, #8]
 800871a:	7c9b      	ldrb	r3, [r3, #18]
 800871c:	2b01      	cmp	r3, #1
 800871e:	d003      	beq.n	8008728 <USB_HC_StartXfer+0x2ec>
 8008720:	68bb      	ldr	r3, [r7, #8]
 8008722:	7c9b      	ldrb	r3, [r3, #18]
 8008724:	2b03      	cmp	r3, #3
 8008726:	d117      	bne.n	8008758 <USB_HC_StartXfer+0x31c>
 8008728:	68bb      	ldr	r3, [r7, #8]
 800872a:	79db      	ldrb	r3, [r3, #7]
 800872c:	2b01      	cmp	r3, #1
 800872e:	d113      	bne.n	8008758 <USB_HC_StartXfer+0x31c>
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	78db      	ldrb	r3, [r3, #3]
 8008734:	2b01      	cmp	r3, #1
 8008736:	d10f      	bne.n	8008758 <USB_HC_StartXfer+0x31c>
 8008738:	69fb      	ldr	r3, [r7, #28]
 800873a:	015a      	lsls	r2, r3, #5
 800873c:	6a3b      	ldr	r3, [r7, #32]
 800873e:	4413      	add	r3, r2
 8008740:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	69fa      	ldr	r2, [r7, #28]
 8008748:	0151      	lsls	r1, r2, #5
 800874a:	6a3a      	ldr	r2, [r7, #32]
 800874c:	440a      	add	r2, r1
 800874e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008752:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008756:	6053      	str	r3, [r2, #4]
 8008758:	68bb      	ldr	r3, [r7, #8]
 800875a:	7c9b      	ldrb	r3, [r3, #18]
 800875c:	2b01      	cmp	r3, #1
 800875e:	d162      	bne.n	8008826 <USB_HC_StartXfer+0x3ea>
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	78db      	ldrb	r3, [r3, #3]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d15e      	bne.n	8008826 <USB_HC_StartXfer+0x3ea>
 8008768:	68bb      	ldr	r3, [r7, #8]
 800876a:	68db      	ldr	r3, [r3, #12]
 800876c:	3b01      	subs	r3, #1
 800876e:	2b03      	cmp	r3, #3
 8008770:	d858      	bhi.n	8008824 <USB_HC_StartXfer+0x3e8>
 8008772:	a201      	add	r2, pc, #4	@ (adr r2, 8008778 <USB_HC_StartXfer+0x33c>)
 8008774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008778:	08008789 	.word	0x08008789
 800877c:	080087ab 	.word	0x080087ab
 8008780:	080087cd 	.word	0x080087cd
 8008784:	080087ef 	.word	0x080087ef
 8008788:	69fb      	ldr	r3, [r7, #28]
 800878a:	015a      	lsls	r2, r3, #5
 800878c:	6a3b      	ldr	r3, [r7, #32]
 800878e:	4413      	add	r3, r2
 8008790:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	69fa      	ldr	r2, [r7, #28]
 8008798:	0151      	lsls	r1, r2, #5
 800879a:	6a3a      	ldr	r2, [r7, #32]
 800879c:	440a      	add	r2, r1
 800879e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80087a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80087a6:	6053      	str	r3, [r2, #4]
 80087a8:	e03d      	b.n	8008826 <USB_HC_StartXfer+0x3ea>
 80087aa:	69fb      	ldr	r3, [r7, #28]
 80087ac:	015a      	lsls	r2, r3, #5
 80087ae:	6a3b      	ldr	r3, [r7, #32]
 80087b0:	4413      	add	r3, r2
 80087b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087b6:	685b      	ldr	r3, [r3, #4]
 80087b8:	69fa      	ldr	r2, [r7, #28]
 80087ba:	0151      	lsls	r1, r2, #5
 80087bc:	6a3a      	ldr	r2, [r7, #32]
 80087be:	440a      	add	r2, r1
 80087c0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80087c4:	f043 030e 	orr.w	r3, r3, #14
 80087c8:	6053      	str	r3, [r2, #4]
 80087ca:	e02c      	b.n	8008826 <USB_HC_StartXfer+0x3ea>
 80087cc:	69fb      	ldr	r3, [r7, #28]
 80087ce:	015a      	lsls	r2, r3, #5
 80087d0:	6a3b      	ldr	r3, [r7, #32]
 80087d2:	4413      	add	r3, r2
 80087d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	69fa      	ldr	r2, [r7, #28]
 80087dc:	0151      	lsls	r1, r2, #5
 80087de:	6a3a      	ldr	r2, [r7, #32]
 80087e0:	440a      	add	r2, r1
 80087e2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80087e6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80087ea:	6053      	str	r3, [r2, #4]
 80087ec:	e01b      	b.n	8008826 <USB_HC_StartXfer+0x3ea>
 80087ee:	69fb      	ldr	r3, [r7, #28]
 80087f0:	015a      	lsls	r2, r3, #5
 80087f2:	6a3b      	ldr	r3, [r7, #32]
 80087f4:	4413      	add	r3, r2
 80087f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	69fa      	ldr	r2, [r7, #28]
 80087fe:	0151      	lsls	r1, r2, #5
 8008800:	6a3a      	ldr	r2, [r7, #32]
 8008802:	440a      	add	r2, r1
 8008804:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008808:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800880c:	6053      	str	r3, [r2, #4]
 800880e:	e00a      	b.n	8008826 <USB_HC_StartXfer+0x3ea>
 8008810:	69fb      	ldr	r3, [r7, #28]
 8008812:	015a      	lsls	r2, r3, #5
 8008814:	6a3b      	ldr	r3, [r7, #32]
 8008816:	4413      	add	r3, r2
 8008818:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800881c:	461a      	mov	r2, r3
 800881e:	2300      	movs	r3, #0
 8008820:	6053      	str	r3, [r2, #4]
 8008822:	e000      	b.n	8008826 <USB_HC_StartXfer+0x3ea>
 8008824:	bf00      	nop
 8008826:	69fb      	ldr	r3, [r7, #28]
 8008828:	015a      	lsls	r2, r3, #5
 800882a:	6a3b      	ldr	r3, [r7, #32]
 800882c:	4413      	add	r3, r2
 800882e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	613b      	str	r3, [r7, #16]
 8008836:	693b      	ldr	r3, [r7, #16]
 8008838:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800883c:	613b      	str	r3, [r7, #16]
 800883e:	68bb      	ldr	r3, [r7, #8]
 8008840:	78db      	ldrb	r3, [r3, #3]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d004      	beq.n	8008850 <USB_HC_StartXfer+0x414>
 8008846:	693b      	ldr	r3, [r7, #16]
 8008848:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800884c:	613b      	str	r3, [r7, #16]
 800884e:	e003      	b.n	8008858 <USB_HC_StartXfer+0x41c>
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008856:	613b      	str	r3, [r7, #16]
 8008858:	693b      	ldr	r3, [r7, #16]
 800885a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800885e:	613b      	str	r3, [r7, #16]
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	015a      	lsls	r2, r3, #5
 8008864:	6a3b      	ldr	r3, [r7, #32]
 8008866:	4413      	add	r3, r2
 8008868:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800886c:	461a      	mov	r2, r3
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	6013      	str	r3, [r2, #0]
 8008872:	79fb      	ldrb	r3, [r7, #7]
 8008874:	2b00      	cmp	r3, #0
 8008876:	d003      	beq.n	8008880 <USB_HC_StartXfer+0x444>
 8008878:	2300      	movs	r3, #0
 800887a:	e055      	b.n	8008928 <USB_HC_StartXfer+0x4ec>
 800887c:	1ff80000 	.word	0x1ff80000
 8008880:	68bb      	ldr	r3, [r7, #8]
 8008882:	78db      	ldrb	r3, [r3, #3]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d14e      	bne.n	8008926 <USB_HC_StartXfer+0x4ea>
 8008888:	68bb      	ldr	r3, [r7, #8]
 800888a:	6a1b      	ldr	r3, [r3, #32]
 800888c:	2b00      	cmp	r3, #0
 800888e:	d04a      	beq.n	8008926 <USB_HC_StartXfer+0x4ea>
 8008890:	68bb      	ldr	r3, [r7, #8]
 8008892:	79db      	ldrb	r3, [r3, #7]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d146      	bne.n	8008926 <USB_HC_StartXfer+0x4ea>
 8008898:	68bb      	ldr	r3, [r7, #8]
 800889a:	7c9b      	ldrb	r3, [r3, #18]
 800889c:	2b03      	cmp	r3, #3
 800889e:	d831      	bhi.n	8008904 <USB_HC_StartXfer+0x4c8>
 80088a0:	a201      	add	r2, pc, #4	@ (adr r2, 80088a8 <USB_HC_StartXfer+0x46c>)
 80088a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088a6:	bf00      	nop
 80088a8:	080088b9 	.word	0x080088b9
 80088ac:	080088dd 	.word	0x080088dd
 80088b0:	080088b9 	.word	0x080088b9
 80088b4:	080088dd 	.word	0x080088dd
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	6a1b      	ldr	r3, [r3, #32]
 80088bc:	3303      	adds	r3, #3
 80088be:	089b      	lsrs	r3, r3, #2
 80088c0:	82fb      	strh	r3, [r7, #22]
 80088c2:	8afa      	ldrh	r2, [r7, #22]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088c8:	b29b      	uxth	r3, r3
 80088ca:	429a      	cmp	r2, r3
 80088cc:	d91c      	bls.n	8008908 <USB_HC_StartXfer+0x4cc>
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	699b      	ldr	r3, [r3, #24]
 80088d2:	f043 0220 	orr.w	r2, r3, #32
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	619a      	str	r2, [r3, #24]
 80088da:	e015      	b.n	8008908 <USB_HC_StartXfer+0x4cc>
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	6a1b      	ldr	r3, [r3, #32]
 80088e0:	3303      	adds	r3, #3
 80088e2:	089b      	lsrs	r3, r3, #2
 80088e4:	82fb      	strh	r3, [r7, #22]
 80088e6:	8afa      	ldrh	r2, [r7, #22]
 80088e8:	6a3b      	ldr	r3, [r7, #32]
 80088ea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80088ee:	691b      	ldr	r3, [r3, #16]
 80088f0:	b29b      	uxth	r3, r3
 80088f2:	429a      	cmp	r2, r3
 80088f4:	d90a      	bls.n	800890c <USB_HC_StartXfer+0x4d0>
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	699b      	ldr	r3, [r3, #24]
 80088fa:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	619a      	str	r2, [r3, #24]
 8008902:	e003      	b.n	800890c <USB_HC_StartXfer+0x4d0>
 8008904:	bf00      	nop
 8008906:	e002      	b.n	800890e <USB_HC_StartXfer+0x4d2>
 8008908:	bf00      	nop
 800890a:	e000      	b.n	800890e <USB_HC_StartXfer+0x4d2>
 800890c:	bf00      	nop
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	6999      	ldr	r1, [r3, #24]
 8008912:	68bb      	ldr	r3, [r7, #8]
 8008914:	785a      	ldrb	r2, [r3, #1]
 8008916:	68bb      	ldr	r3, [r7, #8]
 8008918:	6a1b      	ldr	r3, [r3, #32]
 800891a:	b29b      	uxth	r3, r3
 800891c:	2000      	movs	r0, #0
 800891e:	9000      	str	r0, [sp, #0]
 8008920:	68f8      	ldr	r0, [r7, #12]
 8008922:	f7ff f9c9 	bl	8007cb8 <USB_WritePacket>
 8008926:	2300      	movs	r3, #0
 8008928:	4618      	mov	r0, r3
 800892a:	3728      	adds	r7, #40	@ 0x28
 800892c:	46bd      	mov	sp, r7
 800892e:	bd80      	pop	{r7, pc}

08008930 <USB_HC_ReadInterrupt>:
 8008930:	b480      	push	{r7}
 8008932:	b085      	sub	sp, #20
 8008934:	af00      	add	r7, sp, #0
 8008936:	6078      	str	r0, [r7, #4]
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	60fb      	str	r3, [r7, #12]
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008942:	695b      	ldr	r3, [r3, #20]
 8008944:	b29b      	uxth	r3, r3
 8008946:	4618      	mov	r0, r3
 8008948:	3714      	adds	r7, #20
 800894a:	46bd      	mov	sp, r7
 800894c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008950:	4770      	bx	lr

08008952 <USB_HC_Halt>:
 8008952:	b480      	push	{r7}
 8008954:	b089      	sub	sp, #36	@ 0x24
 8008956:	af00      	add	r7, sp, #0
 8008958:	6078      	str	r0, [r7, #4]
 800895a:	460b      	mov	r3, r1
 800895c:	70fb      	strb	r3, [r7, #3]
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	61fb      	str	r3, [r7, #28]
 8008962:	78fb      	ldrb	r3, [r7, #3]
 8008964:	61bb      	str	r3, [r7, #24]
 8008966:	2300      	movs	r3, #0
 8008968:	60bb      	str	r3, [r7, #8]
 800896a:	69bb      	ldr	r3, [r7, #24]
 800896c:	015a      	lsls	r2, r3, #5
 800896e:	69fb      	ldr	r3, [r7, #28]
 8008970:	4413      	add	r3, r2
 8008972:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	0c9b      	lsrs	r3, r3, #18
 800897a:	f003 0303 	and.w	r3, r3, #3
 800897e:	617b      	str	r3, [r7, #20]
 8008980:	69bb      	ldr	r3, [r7, #24]
 8008982:	015a      	lsls	r2, r3, #5
 8008984:	69fb      	ldr	r3, [r7, #28]
 8008986:	4413      	add	r3, r2
 8008988:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	0fdb      	lsrs	r3, r3, #31
 8008990:	f003 0301 	and.w	r3, r3, #1
 8008994:	613b      	str	r3, [r7, #16]
 8008996:	69bb      	ldr	r3, [r7, #24]
 8008998:	015a      	lsls	r2, r3, #5
 800899a:	69fb      	ldr	r3, [r7, #28]
 800899c:	4413      	add	r3, r2
 800899e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	0fdb      	lsrs	r3, r3, #31
 80089a6:	f003 0301 	and.w	r3, r3, #1
 80089aa:	60fb      	str	r3, [r7, #12]
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	f003 0320 	and.w	r3, r3, #32
 80089b4:	2b20      	cmp	r3, #32
 80089b6:	d10d      	bne.n	80089d4 <USB_HC_Halt+0x82>
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d10a      	bne.n	80089d4 <USB_HC_Halt+0x82>
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d005      	beq.n	80089d0 <USB_HC_Halt+0x7e>
 80089c4:	697b      	ldr	r3, [r7, #20]
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d002      	beq.n	80089d0 <USB_HC_Halt+0x7e>
 80089ca:	697b      	ldr	r3, [r7, #20]
 80089cc:	2b03      	cmp	r3, #3
 80089ce:	d101      	bne.n	80089d4 <USB_HC_Halt+0x82>
 80089d0:	2300      	movs	r3, #0
 80089d2:	e0d8      	b.n	8008b86 <USB_HC_Halt+0x234>
 80089d4:	697b      	ldr	r3, [r7, #20]
 80089d6:	2b00      	cmp	r3, #0
 80089d8:	d002      	beq.n	80089e0 <USB_HC_Halt+0x8e>
 80089da:	697b      	ldr	r3, [r7, #20]
 80089dc:	2b02      	cmp	r3, #2
 80089de:	d173      	bne.n	8008ac8 <USB_HC_Halt+0x176>
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	015a      	lsls	r2, r3, #5
 80089e4:	69fb      	ldr	r3, [r7, #28]
 80089e6:	4413      	add	r3, r2
 80089e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	69ba      	ldr	r2, [r7, #24]
 80089f0:	0151      	lsls	r1, r2, #5
 80089f2:	69fa      	ldr	r2, [r7, #28]
 80089f4:	440a      	add	r2, r1
 80089f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80089fa:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80089fe:	6013      	str	r3, [r2, #0]
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	689b      	ldr	r3, [r3, #8]
 8008a04:	f003 0320 	and.w	r3, r3, #32
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d14a      	bne.n	8008aa2 <USB_HC_Halt+0x150>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a10:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d133      	bne.n	8008a80 <USB_HC_Halt+0x12e>
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	015a      	lsls	r2, r3, #5
 8008a1c:	69fb      	ldr	r3, [r7, #28]
 8008a1e:	4413      	add	r3, r2
 8008a20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	69ba      	ldr	r2, [r7, #24]
 8008a28:	0151      	lsls	r1, r2, #5
 8008a2a:	69fa      	ldr	r2, [r7, #28]
 8008a2c:	440a      	add	r2, r1
 8008a2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a32:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008a36:	6013      	str	r3, [r2, #0]
 8008a38:	69bb      	ldr	r3, [r7, #24]
 8008a3a:	015a      	lsls	r2, r3, #5
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	4413      	add	r3, r2
 8008a40:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	69ba      	ldr	r2, [r7, #24]
 8008a48:	0151      	lsls	r1, r2, #5
 8008a4a:	69fa      	ldr	r2, [r7, #28]
 8008a4c:	440a      	add	r2, r1
 8008a4e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008a56:	6013      	str	r3, [r2, #0]
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	3301      	adds	r3, #1
 8008a5c:	60bb      	str	r3, [r7, #8]
 8008a5e:	68bb      	ldr	r3, [r7, #8]
 8008a60:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008a64:	d82e      	bhi.n	8008ac4 <USB_HC_Halt+0x172>
 8008a66:	69bb      	ldr	r3, [r7, #24]
 8008a68:	015a      	lsls	r2, r3, #5
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	4413      	add	r3, r2
 8008a6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a72:	681b      	ldr	r3, [r3, #0]
 8008a74:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008a78:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008a7c:	d0ec      	beq.n	8008a58 <USB_HC_Halt+0x106>
 8008a7e:	e081      	b.n	8008b84 <USB_HC_Halt+0x232>
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	015a      	lsls	r2, r3, #5
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	4413      	add	r3, r2
 8008a88:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	69ba      	ldr	r2, [r7, #24]
 8008a90:	0151      	lsls	r1, r2, #5
 8008a92:	69fa      	ldr	r2, [r7, #28]
 8008a94:	440a      	add	r2, r1
 8008a96:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008a9a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008a9e:	6013      	str	r3, [r2, #0]
 8008aa0:	e070      	b.n	8008b84 <USB_HC_Halt+0x232>
 8008aa2:	69bb      	ldr	r3, [r7, #24]
 8008aa4:	015a      	lsls	r2, r3, #5
 8008aa6:	69fb      	ldr	r3, [r7, #28]
 8008aa8:	4413      	add	r3, r2
 8008aaa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	69ba      	ldr	r2, [r7, #24]
 8008ab2:	0151      	lsls	r1, r2, #5
 8008ab4:	69fa      	ldr	r2, [r7, #28]
 8008ab6:	440a      	add	r2, r1
 8008ab8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008abc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008ac0:	6013      	str	r3, [r2, #0]
 8008ac2:	e05f      	b.n	8008b84 <USB_HC_Halt+0x232>
 8008ac4:	bf00      	nop
 8008ac6:	e05d      	b.n	8008b84 <USB_HC_Halt+0x232>
 8008ac8:	69bb      	ldr	r3, [r7, #24]
 8008aca:	015a      	lsls	r2, r3, #5
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	4413      	add	r3, r2
 8008ad0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	69ba      	ldr	r2, [r7, #24]
 8008ad8:	0151      	lsls	r1, r2, #5
 8008ada:	69fa      	ldr	r2, [r7, #28]
 8008adc:	440a      	add	r2, r1
 8008ade:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008ae2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008ae6:	6013      	str	r3, [r2, #0]
 8008ae8:	69fb      	ldr	r3, [r7, #28]
 8008aea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008aee:	691b      	ldr	r3, [r3, #16]
 8008af0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d133      	bne.n	8008b60 <USB_HC_Halt+0x20e>
 8008af8:	69bb      	ldr	r3, [r7, #24]
 8008afa:	015a      	lsls	r2, r3, #5
 8008afc:	69fb      	ldr	r3, [r7, #28]
 8008afe:	4413      	add	r3, r2
 8008b00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	69ba      	ldr	r2, [r7, #24]
 8008b08:	0151      	lsls	r1, r2, #5
 8008b0a:	69fa      	ldr	r2, [r7, #28]
 8008b0c:	440a      	add	r2, r1
 8008b0e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b12:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008b16:	6013      	str	r3, [r2, #0]
 8008b18:	69bb      	ldr	r3, [r7, #24]
 8008b1a:	015a      	lsls	r2, r3, #5
 8008b1c:	69fb      	ldr	r3, [r7, #28]
 8008b1e:	4413      	add	r3, r2
 8008b20:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	69ba      	ldr	r2, [r7, #24]
 8008b28:	0151      	lsls	r1, r2, #5
 8008b2a:	69fa      	ldr	r2, [r7, #28]
 8008b2c:	440a      	add	r2, r1
 8008b2e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b32:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008b36:	6013      	str	r3, [r2, #0]
 8008b38:	68bb      	ldr	r3, [r7, #8]
 8008b3a:	3301      	adds	r3, #1
 8008b3c:	60bb      	str	r3, [r7, #8]
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008b44:	d81d      	bhi.n	8008b82 <USB_HC_Halt+0x230>
 8008b46:	69bb      	ldr	r3, [r7, #24]
 8008b48:	015a      	lsls	r2, r3, #5
 8008b4a:	69fb      	ldr	r3, [r7, #28]
 8008b4c:	4413      	add	r3, r2
 8008b4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b58:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b5c:	d0ec      	beq.n	8008b38 <USB_HC_Halt+0x1e6>
 8008b5e:	e011      	b.n	8008b84 <USB_HC_Halt+0x232>
 8008b60:	69bb      	ldr	r3, [r7, #24]
 8008b62:	015a      	lsls	r2, r3, #5
 8008b64:	69fb      	ldr	r3, [r7, #28]
 8008b66:	4413      	add	r3, r2
 8008b68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	69ba      	ldr	r2, [r7, #24]
 8008b70:	0151      	lsls	r1, r2, #5
 8008b72:	69fa      	ldr	r2, [r7, #28]
 8008b74:	440a      	add	r2, r1
 8008b76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008b7a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008b7e:	6013      	str	r3, [r2, #0]
 8008b80:	e000      	b.n	8008b84 <USB_HC_Halt+0x232>
 8008b82:	bf00      	nop
 8008b84:	2300      	movs	r3, #0
 8008b86:	4618      	mov	r0, r3
 8008b88:	3724      	adds	r7, #36	@ 0x24
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr
	...

08008b94 <USB_DoPing>:
 8008b94:	b480      	push	{r7}
 8008b96:	b087      	sub	sp, #28
 8008b98:	af00      	add	r7, sp, #0
 8008b9a:	6078      	str	r0, [r7, #4]
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	70fb      	strb	r3, [r7, #3]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	617b      	str	r3, [r7, #20]
 8008ba4:	78fb      	ldrb	r3, [r7, #3]
 8008ba6:	613b      	str	r3, [r7, #16]
 8008ba8:	2301      	movs	r3, #1
 8008baa:	60fb      	str	r3, [r7, #12]
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	04da      	lsls	r2, r3, #19
 8008bb0:	4b15      	ldr	r3, [pc, #84]	@ (8008c08 <USB_DoPing+0x74>)
 8008bb2:	4013      	ands	r3, r2
 8008bb4:	693a      	ldr	r2, [r7, #16]
 8008bb6:	0151      	lsls	r1, r2, #5
 8008bb8:	697a      	ldr	r2, [r7, #20]
 8008bba:	440a      	add	r2, r1
 8008bbc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008bc0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008bc4:	6113      	str	r3, [r2, #16]
 8008bc6:	693b      	ldr	r3, [r7, #16]
 8008bc8:	015a      	lsls	r2, r3, #5
 8008bca:	697b      	ldr	r3, [r7, #20]
 8008bcc:	4413      	add	r3, r2
 8008bce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	60bb      	str	r3, [r7, #8]
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8008bdc:	60bb      	str	r3, [r7, #8]
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008be4:	60bb      	str	r3, [r7, #8]
 8008be6:	693b      	ldr	r3, [r7, #16]
 8008be8:	015a      	lsls	r2, r3, #5
 8008bea:	697b      	ldr	r3, [r7, #20]
 8008bec:	4413      	add	r3, r2
 8008bee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bf2:	461a      	mov	r2, r3
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	6013      	str	r3, [r2, #0]
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	371c      	adds	r7, #28
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c04:	4770      	bx	lr
 8008c06:	bf00      	nop
 8008c08:	1ff80000 	.word	0x1ff80000

08008c0c <USB_StopHost>:
 8008c0c:	b580      	push	{r7, lr}
 8008c0e:	b088      	sub	sp, #32
 8008c10:	af00      	add	r7, sp, #0
 8008c12:	6078      	str	r0, [r7, #4]
 8008c14:	2300      	movs	r3, #0
 8008c16:	77fb      	strb	r3, [r7, #31]
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	617b      	str	r3, [r7, #20]
 8008c1c:	2300      	movs	r3, #0
 8008c1e:	60fb      	str	r3, [r7, #12]
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f7fe ff8c 	bl	8007b3e <USB_DisableGlobalInt>
 8008c26:	2110      	movs	r1, #16
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f7fe ffe5 	bl	8007bf8 <USB_FlushTxFifo>
 8008c2e:	4603      	mov	r3, r0
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d001      	beq.n	8008c38 <USB_StopHost+0x2c>
 8008c34:	2301      	movs	r3, #1
 8008c36:	77fb      	strb	r3, [r7, #31]
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f7ff f80f 	bl	8007c5c <USB_FlushRxFifo>
 8008c3e:	4603      	mov	r3, r0
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d001      	beq.n	8008c48 <USB_StopHost+0x3c>
 8008c44:	2301      	movs	r3, #1
 8008c46:	77fb      	strb	r3, [r7, #31]
 8008c48:	2300      	movs	r3, #0
 8008c4a:	61bb      	str	r3, [r7, #24]
 8008c4c:	e01f      	b.n	8008c8e <USB_StopHost+0x82>
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	015a      	lsls	r2, r3, #5
 8008c52:	697b      	ldr	r3, [r7, #20]
 8008c54:	4413      	add	r3, r2
 8008c56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	613b      	str	r3, [r7, #16]
 8008c5e:	693b      	ldr	r3, [r7, #16]
 8008c60:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008c64:	613b      	str	r3, [r7, #16]
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008c6c:	613b      	str	r3, [r7, #16]
 8008c6e:	693b      	ldr	r3, [r7, #16]
 8008c70:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008c74:	613b      	str	r3, [r7, #16]
 8008c76:	69bb      	ldr	r3, [r7, #24]
 8008c78:	015a      	lsls	r2, r3, #5
 8008c7a:	697b      	ldr	r3, [r7, #20]
 8008c7c:	4413      	add	r3, r2
 8008c7e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c82:	461a      	mov	r2, r3
 8008c84:	693b      	ldr	r3, [r7, #16]
 8008c86:	6013      	str	r3, [r2, #0]
 8008c88:	69bb      	ldr	r3, [r7, #24]
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	61bb      	str	r3, [r7, #24]
 8008c8e:	69bb      	ldr	r3, [r7, #24]
 8008c90:	2b0f      	cmp	r3, #15
 8008c92:	d9dc      	bls.n	8008c4e <USB_StopHost+0x42>
 8008c94:	2300      	movs	r3, #0
 8008c96:	61bb      	str	r3, [r7, #24]
 8008c98:	e034      	b.n	8008d04 <USB_StopHost+0xf8>
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	015a      	lsls	r2, r3, #5
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	613b      	str	r3, [r7, #16]
 8008caa:	693b      	ldr	r3, [r7, #16]
 8008cac:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008cb0:	613b      	str	r3, [r7, #16]
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008cb8:	613b      	str	r3, [r7, #16]
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008cc0:	613b      	str	r3, [r7, #16]
 8008cc2:	69bb      	ldr	r3, [r7, #24]
 8008cc4:	015a      	lsls	r2, r3, #5
 8008cc6:	697b      	ldr	r3, [r7, #20]
 8008cc8:	4413      	add	r3, r2
 8008cca:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cce:	461a      	mov	r2, r3
 8008cd0:	693b      	ldr	r3, [r7, #16]
 8008cd2:	6013      	str	r3, [r2, #0]
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	3301      	adds	r3, #1
 8008cd8:	60fb      	str	r3, [r7, #12]
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008ce0:	d80c      	bhi.n	8008cfc <USB_StopHost+0xf0>
 8008ce2:	69bb      	ldr	r3, [r7, #24]
 8008ce4:	015a      	lsls	r2, r3, #5
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	4413      	add	r3, r2
 8008cea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008cf4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008cf8:	d0ec      	beq.n	8008cd4 <USB_StopHost+0xc8>
 8008cfa:	e000      	b.n	8008cfe <USB_StopHost+0xf2>
 8008cfc:	bf00      	nop
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	3301      	adds	r3, #1
 8008d02:	61bb      	str	r3, [r7, #24]
 8008d04:	69bb      	ldr	r3, [r7, #24]
 8008d06:	2b0f      	cmp	r3, #15
 8008d08:	d9c7      	bls.n	8008c9a <USB_StopHost+0x8e>
 8008d0a:	697b      	ldr	r3, [r7, #20]
 8008d0c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008d10:	461a      	mov	r2, r3
 8008d12:	f04f 33ff 	mov.w	r3, #4294967295
 8008d16:	6153      	str	r3, [r2, #20]
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	f04f 32ff 	mov.w	r2, #4294967295
 8008d1e:	615a      	str	r2, [r3, #20]
 8008d20:	6878      	ldr	r0, [r7, #4]
 8008d22:	f7fe fefb 	bl	8007b1c <USB_EnableGlobalInt>
 8008d26:	7ffb      	ldrb	r3, [r7, #31]
 8008d28:	4618      	mov	r0, r3
 8008d2a:	3720      	adds	r7, #32
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	bd80      	pop	{r7, pc}

08008d30 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8008d30:	b590      	push	{r4, r7, lr}
 8008d32:	b089      	sub	sp, #36	@ 0x24
 8008d34:	af04      	add	r7, sp, #16
 8008d36:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8008d38:	2301      	movs	r3, #1
 8008d3a:	2202      	movs	r2, #2
 8008d3c:	2102      	movs	r1, #2
 8008d3e:	6878      	ldr	r0, [r7, #4]
 8008d40:	f000 fc85 	bl	800964e <USBH_FindInterface>
 8008d44:	4603      	mov	r3, r0
 8008d46:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008d48:	7bfb      	ldrb	r3, [r7, #15]
 8008d4a:	2bff      	cmp	r3, #255	@ 0xff
 8008d4c:	d002      	beq.n	8008d54 <USBH_CDC_InterfaceInit+0x24>
 8008d4e:	7bfb      	ldrb	r3, [r7, #15]
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d901      	bls.n	8008d58 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008d54:	2302      	movs	r3, #2
 8008d56:	e13d      	b.n	8008fd4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8008d58:	7bfb      	ldrb	r3, [r7, #15]
 8008d5a:	4619      	mov	r1, r3
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fc5a 	bl	8009616 <USBH_SelectInterface>
 8008d62:	4603      	mov	r3, r0
 8008d64:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8008d66:	7bbb      	ldrb	r3, [r7, #14]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d001      	beq.n	8008d70 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8008d6c:	2302      	movs	r3, #2
 8008d6e:	e131      	b.n	8008fd4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8008d76:	2050      	movs	r0, #80	@ 0x50
 8008d78:	f002 fb6a 	bl	800b450 <malloc>
 8008d7c:	4603      	mov	r3, r0
 8008d7e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008d86:	69db      	ldr	r3, [r3, #28]
 8008d88:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	2b00      	cmp	r3, #0
 8008d8e:	d101      	bne.n	8008d94 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008d90:	2302      	movs	r3, #2
 8008d92:	e11f      	b.n	8008fd4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008d94:	2250      	movs	r2, #80	@ 0x50
 8008d96:	2100      	movs	r1, #0
 8008d98:	68b8      	ldr	r0, [r7, #8]
 8008d9a:	f002 fc4d 	bl	800b638 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008d9e:	7bfb      	ldrb	r3, [r7, #15]
 8008da0:	687a      	ldr	r2, [r7, #4]
 8008da2:	211a      	movs	r1, #26
 8008da4:	fb01 f303 	mul.w	r3, r1, r3
 8008da8:	4413      	add	r3, r2
 8008daa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008dae:	781b      	ldrb	r3, [r3, #0]
 8008db0:	b25b      	sxtb	r3, r3
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	da15      	bge.n	8008de2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008db6:	7bfb      	ldrb	r3, [r7, #15]
 8008db8:	687a      	ldr	r2, [r7, #4]
 8008dba:	211a      	movs	r1, #26
 8008dbc:	fb01 f303 	mul.w	r3, r1, r3
 8008dc0:	4413      	add	r3, r2
 8008dc2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008dc6:	781a      	ldrb	r2, [r3, #0]
 8008dc8:	68bb      	ldr	r3, [r7, #8]
 8008dca:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008dcc:	7bfb      	ldrb	r3, [r7, #15]
 8008dce:	687a      	ldr	r2, [r7, #4]
 8008dd0:	211a      	movs	r1, #26
 8008dd2:	fb01 f303 	mul.w	r3, r1, r3
 8008dd6:	4413      	add	r3, r2
 8008dd8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008ddc:	881a      	ldrh	r2, [r3, #0]
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	785b      	ldrb	r3, [r3, #1]
 8008de6:	4619      	mov	r1, r3
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f001 ffbe 	bl	800ad6a <USBH_AllocPipe>
 8008dee:	4603      	mov	r3, r0
 8008df0:	461a      	mov	r2, r3
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008df6:	68bb      	ldr	r3, [r7, #8]
 8008df8:	7819      	ldrb	r1, [r3, #0]
 8008dfa:	68bb      	ldr	r3, [r7, #8]
 8008dfc:	7858      	ldrb	r0, [r3, #1]
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008e0a:	68ba      	ldr	r2, [r7, #8]
 8008e0c:	8952      	ldrh	r2, [r2, #10]
 8008e0e:	9202      	str	r2, [sp, #8]
 8008e10:	2203      	movs	r2, #3
 8008e12:	9201      	str	r2, [sp, #4]
 8008e14:	9300      	str	r3, [sp, #0]
 8008e16:	4623      	mov	r3, r4
 8008e18:	4602      	mov	r2, r0
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f001 ff76 	bl	800ad0c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	781b      	ldrb	r3, [r3, #0]
 8008e24:	2200      	movs	r2, #0
 8008e26:	4619      	mov	r1, r3
 8008e28:	6878      	ldr	r0, [r7, #4]
 8008e2a:	f002 fa8b 	bl	800b344 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8008e2e:	2300      	movs	r3, #0
 8008e30:	2200      	movs	r2, #0
 8008e32:	210a      	movs	r1, #10
 8008e34:	6878      	ldr	r0, [r7, #4]
 8008e36:	f000 fc0a 	bl	800964e <USBH_FindInterface>
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8008e3e:	7bfb      	ldrb	r3, [r7, #15]
 8008e40:	2bff      	cmp	r3, #255	@ 0xff
 8008e42:	d002      	beq.n	8008e4a <USBH_CDC_InterfaceInit+0x11a>
 8008e44:	7bfb      	ldrb	r3, [r7, #15]
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d901      	bls.n	8008e4e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8008e4a:	2302      	movs	r3, #2
 8008e4c:	e0c2      	b.n	8008fd4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8008e4e:	7bfb      	ldrb	r3, [r7, #15]
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	211a      	movs	r1, #26
 8008e54:	fb01 f303 	mul.w	r3, r1, r3
 8008e58:	4413      	add	r3, r2
 8008e5a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008e5e:	781b      	ldrb	r3, [r3, #0]
 8008e60:	b25b      	sxtb	r3, r3
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	da16      	bge.n	8008e94 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
 8008e68:	687a      	ldr	r2, [r7, #4]
 8008e6a:	211a      	movs	r1, #26
 8008e6c:	fb01 f303 	mul.w	r3, r1, r3
 8008e70:	4413      	add	r3, r2
 8008e72:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008e76:	781a      	ldrb	r2, [r3, #0]
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008e7c:	7bfb      	ldrb	r3, [r7, #15]
 8008e7e:	687a      	ldr	r2, [r7, #4]
 8008e80:	211a      	movs	r1, #26
 8008e82:	fb01 f303 	mul.w	r3, r1, r3
 8008e86:	4413      	add	r3, r2
 8008e88:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008e8c:	881a      	ldrh	r2, [r3, #0]
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	835a      	strh	r2, [r3, #26]
 8008e92:	e015      	b.n	8008ec0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008e94:	7bfb      	ldrb	r3, [r7, #15]
 8008e96:	687a      	ldr	r2, [r7, #4]
 8008e98:	211a      	movs	r1, #26
 8008e9a:	fb01 f303 	mul.w	r3, r1, r3
 8008e9e:	4413      	add	r3, r2
 8008ea0:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008ea4:	781a      	ldrb	r2, [r3, #0]
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8008eaa:	7bfb      	ldrb	r3, [r7, #15]
 8008eac:	687a      	ldr	r2, [r7, #4]
 8008eae:	211a      	movs	r1, #26
 8008eb0:	fb01 f303 	mul.w	r3, r1, r3
 8008eb4:	4413      	add	r3, r2
 8008eb6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8008eba:	881a      	ldrh	r2, [r3, #0]
 8008ebc:	68bb      	ldr	r3, [r7, #8]
 8008ebe:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008ec0:	7bfb      	ldrb	r3, [r7, #15]
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	211a      	movs	r1, #26
 8008ec6:	fb01 f303 	mul.w	r3, r1, r3
 8008eca:	4413      	add	r3, r2
 8008ecc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	b25b      	sxtb	r3, r3
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	da16      	bge.n	8008f06 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008ed8:	7bfb      	ldrb	r3, [r7, #15]
 8008eda:	687a      	ldr	r2, [r7, #4]
 8008edc:	211a      	movs	r1, #26
 8008ede:	fb01 f303 	mul.w	r3, r1, r3
 8008ee2:	4413      	add	r3, r2
 8008ee4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008ee8:	781a      	ldrb	r2, [r3, #0]
 8008eea:	68bb      	ldr	r3, [r7, #8]
 8008eec:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008eee:	7bfb      	ldrb	r3, [r7, #15]
 8008ef0:	687a      	ldr	r2, [r7, #4]
 8008ef2:	211a      	movs	r1, #26
 8008ef4:	fb01 f303 	mul.w	r3, r1, r3
 8008ef8:	4413      	add	r3, r2
 8008efa:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008efe:	881a      	ldrh	r2, [r3, #0]
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	835a      	strh	r2, [r3, #26]
 8008f04:	e015      	b.n	8008f32 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008f06:	7bfb      	ldrb	r3, [r7, #15]
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	211a      	movs	r1, #26
 8008f0c:	fb01 f303 	mul.w	r3, r1, r3
 8008f10:	4413      	add	r3, r2
 8008f12:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008f16:	781a      	ldrb	r2, [r3, #0]
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8008f1c:	7bfb      	ldrb	r3, [r7, #15]
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	211a      	movs	r1, #26
 8008f22:	fb01 f303 	mul.w	r3, r1, r3
 8008f26:	4413      	add	r3, r2
 8008f28:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8008f2c:	881a      	ldrh	r2, [r3, #0]
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008f32:	68bb      	ldr	r3, [r7, #8]
 8008f34:	7b9b      	ldrb	r3, [r3, #14]
 8008f36:	4619      	mov	r1, r3
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f001 ff16 	bl	800ad6a <USBH_AllocPipe>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	461a      	mov	r2, r3
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008f46:	68bb      	ldr	r3, [r7, #8]
 8008f48:	7bdb      	ldrb	r3, [r3, #15]
 8008f4a:	4619      	mov	r1, r3
 8008f4c:	6878      	ldr	r0, [r7, #4]
 8008f4e:	f001 ff0c 	bl	800ad6a <USBH_AllocPipe>
 8008f52:	4603      	mov	r3, r0
 8008f54:	461a      	mov	r2, r3
 8008f56:	68bb      	ldr	r3, [r7, #8]
 8008f58:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	7b59      	ldrb	r1, [r3, #13]
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	7b98      	ldrb	r0, [r3, #14]
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008f6e:	68ba      	ldr	r2, [r7, #8]
 8008f70:	8b12      	ldrh	r2, [r2, #24]
 8008f72:	9202      	str	r2, [sp, #8]
 8008f74:	2202      	movs	r2, #2
 8008f76:	9201      	str	r2, [sp, #4]
 8008f78:	9300      	str	r3, [sp, #0]
 8008f7a:	4623      	mov	r3, r4
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	6878      	ldr	r0, [r7, #4]
 8008f80:	f001 fec4 	bl	800ad0c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008f84:	68bb      	ldr	r3, [r7, #8]
 8008f86:	7b19      	ldrb	r1, [r3, #12]
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	7bd8      	ldrb	r0, [r3, #15]
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008f98:	68ba      	ldr	r2, [r7, #8]
 8008f9a:	8b52      	ldrh	r2, [r2, #26]
 8008f9c:	9202      	str	r2, [sp, #8]
 8008f9e:	2202      	movs	r2, #2
 8008fa0:	9201      	str	r2, [sp, #4]
 8008fa2:	9300      	str	r3, [sp, #0]
 8008fa4:	4623      	mov	r3, r4
 8008fa6:	4602      	mov	r2, r0
 8008fa8:	6878      	ldr	r0, [r7, #4]
 8008faa:	f001 feaf 	bl	800ad0c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8008fae:	68bb      	ldr	r3, [r7, #8]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008fb6:	68bb      	ldr	r3, [r7, #8]
 8008fb8:	7b5b      	ldrb	r3, [r3, #13]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	4619      	mov	r1, r3
 8008fbe:	6878      	ldr	r0, [r7, #4]
 8008fc0:	f002 f9c0 	bl	800b344 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008fc4:	68bb      	ldr	r3, [r7, #8]
 8008fc6:	7b1b      	ldrb	r3, [r3, #12]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	4619      	mov	r1, r3
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f002 f9b9 	bl	800b344 <USBH_LL_SetToggle>

  return USBH_OK;
 8008fd2:	2300      	movs	r3, #0
}
 8008fd4:	4618      	mov	r0, r3
 8008fd6:	3714      	adds	r7, #20
 8008fd8:	46bd      	mov	sp, r7
 8008fda:	bd90      	pop	{r4, r7, pc}

08008fdc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b084      	sub	sp, #16
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008fea:	69db      	ldr	r3, [r3, #28]
 8008fec:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d00e      	beq.n	8009014 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	4619      	mov	r1, r3
 8008ffc:	6878      	ldr	r0, [r7, #4]
 8008ffe:	f001 fea4 	bl	800ad4a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	781b      	ldrb	r3, [r3, #0]
 8009006:	4619      	mov	r1, r3
 8009008:	6878      	ldr	r0, [r7, #4]
 800900a:	f001 fecf 	bl	800adac <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800900e:	68fb      	ldr	r3, [r7, #12]
 8009010:	2200      	movs	r2, #0
 8009012:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	7b1b      	ldrb	r3, [r3, #12]
 8009018:	2b00      	cmp	r3, #0
 800901a:	d00e      	beq.n	800903a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	7b1b      	ldrb	r3, [r3, #12]
 8009020:	4619      	mov	r1, r3
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f001 fe91 	bl	800ad4a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	7b1b      	ldrb	r3, [r3, #12]
 800902c:	4619      	mov	r1, r3
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f001 febc 	bl	800adac <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8009034:	68fb      	ldr	r3, [r7, #12]
 8009036:	2200      	movs	r2, #0
 8009038:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	7b5b      	ldrb	r3, [r3, #13]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d00e      	beq.n	8009060 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8009042:	68fb      	ldr	r3, [r7, #12]
 8009044:	7b5b      	ldrb	r3, [r3, #13]
 8009046:	4619      	mov	r1, r3
 8009048:	6878      	ldr	r0, [r7, #4]
 800904a:	f001 fe7e 	bl	800ad4a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	7b5b      	ldrb	r3, [r3, #13]
 8009052:	4619      	mov	r1, r3
 8009054:	6878      	ldr	r0, [r7, #4]
 8009056:	f001 fea9 	bl	800adac <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	2200      	movs	r2, #0
 800905e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009066:	69db      	ldr	r3, [r3, #28]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d00b      	beq.n	8009084 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009072:	69db      	ldr	r3, [r3, #28]
 8009074:	4618      	mov	r0, r3
 8009076:	f002 f9f3 	bl	800b460 <free>
    phost->pActiveClass->pData = 0U;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009080:	2200      	movs	r2, #0
 8009082:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8009084:	2300      	movs	r3, #0
}
 8009086:	4618      	mov	r0, r3
 8009088:	3710      	adds	r7, #16
 800908a:	46bd      	mov	sp, r7
 800908c:	bd80      	pop	{r7, pc}

0800908e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800908e:	b580      	push	{r7, lr}
 8009090:	b084      	sub	sp, #16
 8009092:	af00      	add	r7, sp, #0
 8009094:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800909c:	69db      	ldr	r3, [r3, #28]
 800909e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	3340      	adds	r3, #64	@ 0x40
 80090a4:	4619      	mov	r1, r3
 80090a6:	6878      	ldr	r0, [r7, #4]
 80090a8:	f000 f8b1 	bl	800920e <GetLineCoding>
 80090ac:	4603      	mov	r3, r0
 80090ae:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80090b0:	7afb      	ldrb	r3, [r7, #11]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d105      	bne.n	80090c2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80090bc:	2102      	movs	r1, #2
 80090be:	6878      	ldr	r0, [r7, #4]
 80090c0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80090c2:	7afb      	ldrb	r3, [r7, #11]
}
 80090c4:	4618      	mov	r0, r3
 80090c6:	3710      	adds	r7, #16
 80090c8:	46bd      	mov	sp, r7
 80090ca:	bd80      	pop	{r7, pc}

080090cc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80090cc:	b580      	push	{r7, lr}
 80090ce:	b084      	sub	sp, #16
 80090d0:	af00      	add	r7, sp, #0
 80090d2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80090d4:	2301      	movs	r3, #1
 80090d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80090d8:	2300      	movs	r3, #0
 80090da:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80090e2:	69db      	ldr	r3, [r3, #28]
 80090e4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80090e6:	68bb      	ldr	r3, [r7, #8]
 80090e8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80090ec:	2b04      	cmp	r3, #4
 80090ee:	d877      	bhi.n	80091e0 <USBH_CDC_Process+0x114>
 80090f0:	a201      	add	r2, pc, #4	@ (adr r2, 80090f8 <USBH_CDC_Process+0x2c>)
 80090f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f6:	bf00      	nop
 80090f8:	0800910d 	.word	0x0800910d
 80090fc:	08009113 	.word	0x08009113
 8009100:	08009143 	.word	0x08009143
 8009104:	080091b7 	.word	0x080091b7
 8009108:	080091c5 	.word	0x080091c5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800910c:	2300      	movs	r3, #0
 800910e:	73fb      	strb	r3, [r7, #15]
      break;
 8009110:	e06d      	b.n	80091ee <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009116:	4619      	mov	r1, r3
 8009118:	6878      	ldr	r0, [r7, #4]
 800911a:	f000 f897 	bl	800924c <SetLineCoding>
 800911e:	4603      	mov	r3, r0
 8009120:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009122:	7bbb      	ldrb	r3, [r7, #14]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d104      	bne.n	8009132 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8009128:	68bb      	ldr	r3, [r7, #8]
 800912a:	2202      	movs	r2, #2
 800912c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8009130:	e058      	b.n	80091e4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8009132:	7bbb      	ldrb	r3, [r7, #14]
 8009134:	2b01      	cmp	r3, #1
 8009136:	d055      	beq.n	80091e4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	2204      	movs	r2, #4
 800913c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8009140:	e050      	b.n	80091e4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8009142:	68bb      	ldr	r3, [r7, #8]
 8009144:	3340      	adds	r3, #64	@ 0x40
 8009146:	4619      	mov	r1, r3
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f860 	bl	800920e <GetLineCoding>
 800914e:	4603      	mov	r3, r0
 8009150:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8009152:	7bbb      	ldrb	r3, [r7, #14]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d126      	bne.n	80091a6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8009158:	68bb      	ldr	r3, [r7, #8]
 800915a:	2200      	movs	r2, #0
 800915c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8009160:	68bb      	ldr	r3, [r7, #8]
 8009162:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8009166:	68bb      	ldr	r3, [r7, #8]
 8009168:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800916a:	791b      	ldrb	r3, [r3, #4]
 800916c:	429a      	cmp	r2, r3
 800916e:	d13b      	bne.n	80091e8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8009176:	68bb      	ldr	r3, [r7, #8]
 8009178:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800917a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800917c:	429a      	cmp	r2, r3
 800917e:	d133      	bne.n	80091e8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8009180:	68bb      	ldr	r3, [r7, #8]
 8009182:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800918a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800918c:	429a      	cmp	r2, r3
 800918e:	d12b      	bne.n	80091e8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8009190:	68bb      	ldr	r3, [r7, #8]
 8009192:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8009194:	68bb      	ldr	r3, [r7, #8]
 8009196:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009198:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800919a:	429a      	cmp	r2, r3
 800919c:	d124      	bne.n	80091e8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 f958 	bl	8009454 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80091a4:	e020      	b.n	80091e8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80091a6:	7bbb      	ldrb	r3, [r7, #14]
 80091a8:	2b01      	cmp	r3, #1
 80091aa:	d01d      	beq.n	80091e8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	2204      	movs	r2, #4
 80091b0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80091b4:	e018      	b.n	80091e8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80091b6:	6878      	ldr	r0, [r7, #4]
 80091b8:	f000 f867 	bl	800928a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80091bc:	6878      	ldr	r0, [r7, #4]
 80091be:	f000 f8da 	bl	8009376 <CDC_ProcessReception>
      break;
 80091c2:	e014      	b.n	80091ee <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80091c4:	2100      	movs	r1, #0
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f001 f81a 	bl	800a200 <USBH_ClrFeature>
 80091cc:	4603      	mov	r3, r0
 80091ce:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80091d0:	7bbb      	ldrb	r3, [r7, #14]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d10a      	bne.n	80091ec <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80091d6:	68bb      	ldr	r3, [r7, #8]
 80091d8:	2200      	movs	r2, #0
 80091da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80091de:	e005      	b.n	80091ec <USBH_CDC_Process+0x120>

    default:
      break;
 80091e0:	bf00      	nop
 80091e2:	e004      	b.n	80091ee <USBH_CDC_Process+0x122>
      break;
 80091e4:	bf00      	nop
 80091e6:	e002      	b.n	80091ee <USBH_CDC_Process+0x122>
      break;
 80091e8:	bf00      	nop
 80091ea:	e000      	b.n	80091ee <USBH_CDC_Process+0x122>
      break;
 80091ec:	bf00      	nop

  }

  return status;
 80091ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3710      	adds	r7, #16
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd80      	pop	{r7, pc}

080091f8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80091f8:	b480      	push	{r7}
 80091fa:	b083      	sub	sp, #12
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8009200:	2300      	movs	r3, #0
}
 8009202:	4618      	mov	r0, r3
 8009204:	370c      	adds	r7, #12
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr

0800920e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800920e:	b580      	push	{r7, lr}
 8009210:	b082      	sub	sp, #8
 8009212:	af00      	add	r7, sp, #0
 8009214:	6078      	str	r0, [r7, #4]
 8009216:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	22a1      	movs	r2, #161	@ 0xa1
 800921c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2221      	movs	r2, #33	@ 0x21
 8009222:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	2200      	movs	r2, #0
 8009228:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	2200      	movs	r2, #0
 800922e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2207      	movs	r2, #7
 8009234:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	2207      	movs	r2, #7
 800923a:	4619      	mov	r1, r3
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f001 fb14 	bl	800a86a <USBH_CtlReq>
 8009242:	4603      	mov	r3, r0
}
 8009244:	4618      	mov	r0, r3
 8009246:	3708      	adds	r7, #8
 8009248:	46bd      	mov	sp, r7
 800924a:	bd80      	pop	{r7, pc}

0800924c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800924c:	b580      	push	{r7, lr}
 800924e:	b082      	sub	sp, #8
 8009250:	af00      	add	r7, sp, #0
 8009252:	6078      	str	r0, [r7, #4]
 8009254:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	2221      	movs	r2, #33	@ 0x21
 800925a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2220      	movs	r2, #32
 8009260:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2200      	movs	r2, #0
 8009266:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8009268:	687b      	ldr	r3, [r7, #4]
 800926a:	2200      	movs	r2, #0
 800926c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2207      	movs	r2, #7
 8009272:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8009274:	683b      	ldr	r3, [r7, #0]
 8009276:	2207      	movs	r2, #7
 8009278:	4619      	mov	r1, r3
 800927a:	6878      	ldr	r0, [r7, #4]
 800927c:	f001 faf5 	bl	800a86a <USBH_CtlReq>
 8009280:	4603      	mov	r3, r0
}
 8009282:	4618      	mov	r0, r3
 8009284:	3708      	adds	r7, #8
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}

0800928a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800928a:	b580      	push	{r7, lr}
 800928c:	b086      	sub	sp, #24
 800928e:	af02      	add	r7, sp, #8
 8009290:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009298:	69db      	ldr	r3, [r3, #28]
 800929a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800929c:	2300      	movs	r3, #0
 800929e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d002      	beq.n	80092b0 <CDC_ProcessTransmission+0x26>
 80092aa:	2b02      	cmp	r3, #2
 80092ac:	d023      	beq.n	80092f6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80092ae:	e05e      	b.n	800936e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80092b4:	68fa      	ldr	r2, [r7, #12]
 80092b6:	8b12      	ldrh	r2, [r2, #24]
 80092b8:	4293      	cmp	r3, r2
 80092ba:	d90b      	bls.n	80092d4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	69d9      	ldr	r1, [r3, #28]
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	8b1a      	ldrh	r2, [r3, #24]
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	7b5b      	ldrb	r3, [r3, #13]
 80092c8:	2001      	movs	r0, #1
 80092ca:	9000      	str	r0, [sp, #0]
 80092cc:	6878      	ldr	r0, [r7, #4]
 80092ce:	f001 fcda 	bl	800ac86 <USBH_BulkSendData>
 80092d2:	e00b      	b.n	80092ec <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80092dc:	b29a      	uxth	r2, r3
 80092de:	68fb      	ldr	r3, [r7, #12]
 80092e0:	7b5b      	ldrb	r3, [r3, #13]
 80092e2:	2001      	movs	r0, #1
 80092e4:	9000      	str	r0, [sp, #0]
 80092e6:	6878      	ldr	r0, [r7, #4]
 80092e8:	f001 fccd 	bl	800ac86 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	2202      	movs	r2, #2
 80092f0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80092f4:	e03b      	b.n	800936e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	7b5b      	ldrb	r3, [r3, #13]
 80092fa:	4619      	mov	r1, r3
 80092fc:	6878      	ldr	r0, [r7, #4]
 80092fe:	f001 fff7 	bl	800b2f0 <USBH_LL_GetURBState>
 8009302:	4603      	mov	r3, r0
 8009304:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8009306:	7afb      	ldrb	r3, [r7, #11]
 8009308:	2b01      	cmp	r3, #1
 800930a:	d128      	bne.n	800935e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009310:	68fa      	ldr	r2, [r7, #12]
 8009312:	8b12      	ldrh	r2, [r2, #24]
 8009314:	4293      	cmp	r3, r2
 8009316:	d90e      	bls.n	8009336 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800931c:	68fa      	ldr	r2, [r7, #12]
 800931e:	8b12      	ldrh	r2, [r2, #24]
 8009320:	1a9a      	subs	r2, r3, r2
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	69db      	ldr	r3, [r3, #28]
 800932a:	68fa      	ldr	r2, [r7, #12]
 800932c:	8b12      	ldrh	r2, [r2, #24]
 800932e:	441a      	add	r2, r3
 8009330:	68fb      	ldr	r3, [r7, #12]
 8009332:	61da      	str	r2, [r3, #28]
 8009334:	e002      	b.n	800933c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	2200      	movs	r2, #0
 800933a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009340:	2b00      	cmp	r3, #0
 8009342:	d004      	beq.n	800934e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	2201      	movs	r2, #1
 8009348:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800934c:	e00e      	b.n	800936c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	2200      	movs	r2, #0
 8009352:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8009356:	6878      	ldr	r0, [r7, #4]
 8009358:	f000 f868 	bl	800942c <USBH_CDC_TransmitCallback>
      break;
 800935c:	e006      	b.n	800936c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800935e:	7afb      	ldrb	r3, [r7, #11]
 8009360:	2b02      	cmp	r3, #2
 8009362:	d103      	bne.n	800936c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	2201      	movs	r2, #1
 8009368:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800936c:	bf00      	nop
  }
}
 800936e:	bf00      	nop
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}

08009376 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8009376:	b580      	push	{r7, lr}
 8009378:	b086      	sub	sp, #24
 800937a:	af00      	add	r7, sp, #0
 800937c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009384:	69db      	ldr	r3, [r3, #28]
 8009386:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009388:	2300      	movs	r3, #0
 800938a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8009392:	2b03      	cmp	r3, #3
 8009394:	d002      	beq.n	800939c <CDC_ProcessReception+0x26>
 8009396:	2b04      	cmp	r3, #4
 8009398:	d00e      	beq.n	80093b8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800939a:	e043      	b.n	8009424 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800939c:	697b      	ldr	r3, [r7, #20]
 800939e:	6a19      	ldr	r1, [r3, #32]
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	8b5a      	ldrh	r2, [r3, #26]
 80093a4:	697b      	ldr	r3, [r7, #20]
 80093a6:	7b1b      	ldrb	r3, [r3, #12]
 80093a8:	6878      	ldr	r0, [r7, #4]
 80093aa:	f001 fc91 	bl	800acd0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80093ae:	697b      	ldr	r3, [r7, #20]
 80093b0:	2204      	movs	r2, #4
 80093b2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80093b6:	e035      	b.n	8009424 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80093b8:	697b      	ldr	r3, [r7, #20]
 80093ba:	7b1b      	ldrb	r3, [r3, #12]
 80093bc:	4619      	mov	r1, r3
 80093be:	6878      	ldr	r0, [r7, #4]
 80093c0:	f001 ff96 	bl	800b2f0 <USBH_LL_GetURBState>
 80093c4:	4603      	mov	r3, r0
 80093c6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80093c8:	7cfb      	ldrb	r3, [r7, #19]
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d129      	bne.n	8009422 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80093ce:	697b      	ldr	r3, [r7, #20]
 80093d0:	7b1b      	ldrb	r3, [r3, #12]
 80093d2:	4619      	mov	r1, r3
 80093d4:	6878      	ldr	r0, [r7, #4]
 80093d6:	f001 fef9 	bl	800b1cc <USBH_LL_GetLastXferSize>
 80093da:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80093dc:	697b      	ldr	r3, [r7, #20]
 80093de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80093e0:	68fa      	ldr	r2, [r7, #12]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d016      	beq.n	8009414 <CDC_ProcessReception+0x9e>
 80093e6:	697b      	ldr	r3, [r7, #20]
 80093e8:	8b5b      	ldrh	r3, [r3, #26]
 80093ea:	461a      	mov	r2, r3
 80093ec:	68fb      	ldr	r3, [r7, #12]
 80093ee:	4293      	cmp	r3, r2
 80093f0:	d110      	bne.n	8009414 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80093f2:	697b      	ldr	r3, [r7, #20]
 80093f4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80093f6:	68fb      	ldr	r3, [r7, #12]
 80093f8:	1ad2      	subs	r2, r2, r3
 80093fa:	697b      	ldr	r3, [r7, #20]
 80093fc:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80093fe:	697b      	ldr	r3, [r7, #20]
 8009400:	6a1a      	ldr	r2, [r3, #32]
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	441a      	add	r2, r3
 8009406:	697b      	ldr	r3, [r7, #20]
 8009408:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800940a:	697b      	ldr	r3, [r7, #20]
 800940c:	2203      	movs	r2, #3
 800940e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8009412:	e006      	b.n	8009422 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8009414:	697b      	ldr	r3, [r7, #20]
 8009416:	2200      	movs	r2, #0
 8009418:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	f000 f80f 	bl	8009440 <USBH_CDC_ReceiveCallback>
      break;
 8009422:	bf00      	nop
  }
}
 8009424:	bf00      	nop
 8009426:	3718      	adds	r7, #24
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800942c:	b480      	push	{r7}
 800942e:	b083      	sub	sp, #12
 8009430:	af00      	add	r7, sp, #0
 8009432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009434:	bf00      	nop
 8009436:	370c      	adds	r7, #12
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr

08009440 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8009440:	b480      	push	{r7}
 8009442:	b083      	sub	sp, #12
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8009448:	bf00      	nop
 800944a:	370c      	adds	r7, #12
 800944c:	46bd      	mov	sp, r7
 800944e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009452:	4770      	bx	lr

08009454 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8009454:	b480      	push	{r7}
 8009456:	b083      	sub	sp, #12
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800945c:	bf00      	nop
 800945e:	370c      	adds	r7, #12
 8009460:	46bd      	mov	sp, r7
 8009462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009466:	4770      	bx	lr

08009468 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b084      	sub	sp, #16
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	4613      	mov	r3, r2
 8009474:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2b00      	cmp	r3, #0
 800947a:	d101      	bne.n	8009480 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800947c:	2302      	movs	r3, #2
 800947e:	e029      	b.n	80094d4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	79fa      	ldrb	r2, [r7, #7]
 8009484:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2200      	movs	r2, #0
 800948c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	2200      	movs	r2, #0
 8009494:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8009498:	68f8      	ldr	r0, [r7, #12]
 800949a:	f000 f81f 	bl	80094dc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	2200      	movs	r2, #0
 80094a2:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	2200      	movs	r2, #0
 80094aa:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	2200      	movs	r2, #0
 80094b2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2200      	movs	r2, #0
 80094ba:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	2b00      	cmp	r3, #0
 80094c2:	d003      	beq.n	80094cc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	68ba      	ldr	r2, [r7, #8]
 80094c8:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80094cc:	68f8      	ldr	r0, [r7, #12]
 80094ce:	f001 fdbf 	bl	800b050 <USBH_LL_Init>

  return USBH_OK;
 80094d2:	2300      	movs	r3, #0
}
 80094d4:	4618      	mov	r0, r3
 80094d6:	3710      	adds	r7, #16
 80094d8:	46bd      	mov	sp, r7
 80094da:	bd80      	pop	{r7, pc}

080094dc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80094dc:	b580      	push	{r7, lr}
 80094de:	b084      	sub	sp, #16
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80094e4:	2300      	movs	r3, #0
 80094e6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80094e8:	2300      	movs	r3, #0
 80094ea:	60fb      	str	r3, [r7, #12]
 80094ec:	e009      	b.n	8009502 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80094ee:	687a      	ldr	r2, [r7, #4]
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	33e0      	adds	r3, #224	@ 0xe0
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	4413      	add	r3, r2
 80094f8:	2200      	movs	r2, #0
 80094fa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	3301      	adds	r3, #1
 8009500:	60fb      	str	r3, [r7, #12]
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2b0f      	cmp	r3, #15
 8009506:	d9f2      	bls.n	80094ee <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009508:	2300      	movs	r3, #0
 800950a:	60fb      	str	r3, [r7, #12]
 800950c:	e009      	b.n	8009522 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	4413      	add	r3, r2
 8009514:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009518:	2200      	movs	r2, #0
 800951a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	3301      	adds	r3, #1
 8009520:	60fb      	str	r3, [r7, #12]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009528:	d3f1      	bcc.n	800950e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2200      	movs	r2, #0
 800952e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2200      	movs	r2, #0
 8009534:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2201      	movs	r2, #1
 800953a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2200      	movs	r2, #0
 8009540:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2201      	movs	r2, #1
 8009548:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2240      	movs	r2, #64	@ 0x40
 800954e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2200      	movs	r2, #0
 8009554:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2200      	movs	r2, #0
 800955a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2201      	movs	r2, #1
 8009562:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	2200      	movs	r2, #0
 8009572:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	331c      	adds	r3, #28
 800957a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800957e:	2100      	movs	r1, #0
 8009580:	4618      	mov	r0, r3
 8009582:	f002 f859 	bl	800b638 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800958c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009590:	2100      	movs	r1, #0
 8009592:	4618      	mov	r0, r3
 8009594:	f002 f850 	bl	800b638 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800959e:	2212      	movs	r2, #18
 80095a0:	2100      	movs	r1, #0
 80095a2:	4618      	mov	r0, r3
 80095a4:	f002 f848 	bl	800b638 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80095ae:	223e      	movs	r2, #62	@ 0x3e
 80095b0:	2100      	movs	r1, #0
 80095b2:	4618      	mov	r0, r3
 80095b4:	f002 f840 	bl	800b638 <memset>

  return USBH_OK;
 80095b8:	2300      	movs	r3, #0
}
 80095ba:	4618      	mov	r0, r3
 80095bc:	3710      	adds	r7, #16
 80095be:	46bd      	mov	sp, r7
 80095c0:	bd80      	pop	{r7, pc}

080095c2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80095c2:	b480      	push	{r7}
 80095c4:	b085      	sub	sp, #20
 80095c6:	af00      	add	r7, sp, #0
 80095c8:	6078      	str	r0, [r7, #4]
 80095ca:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80095cc:	2300      	movs	r3, #0
 80095ce:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d016      	beq.n	8009604 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d10e      	bne.n	80095fe <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80095e6:	1c59      	adds	r1, r3, #1
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80095ee:	687a      	ldr	r2, [r7, #4]
 80095f0:	33de      	adds	r3, #222	@ 0xde
 80095f2:	6839      	ldr	r1, [r7, #0]
 80095f4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80095f8:	2300      	movs	r3, #0
 80095fa:	73fb      	strb	r3, [r7, #15]
 80095fc:	e004      	b.n	8009608 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80095fe:	2302      	movs	r3, #2
 8009600:	73fb      	strb	r3, [r7, #15]
 8009602:	e001      	b.n	8009608 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8009604:	2302      	movs	r3, #2
 8009606:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009608:	7bfb      	ldrb	r3, [r7, #15]
}
 800960a:	4618      	mov	r0, r3
 800960c:	3714      	adds	r7, #20
 800960e:	46bd      	mov	sp, r7
 8009610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009614:	4770      	bx	lr

08009616 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8009616:	b480      	push	{r7}
 8009618:	b085      	sub	sp, #20
 800961a:	af00      	add	r7, sp, #0
 800961c:	6078      	str	r0, [r7, #4]
 800961e:	460b      	mov	r3, r1
 8009620:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009622:	2300      	movs	r3, #0
 8009624:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800962c:	78fa      	ldrb	r2, [r7, #3]
 800962e:	429a      	cmp	r2, r3
 8009630:	d204      	bcs.n	800963c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	78fa      	ldrb	r2, [r7, #3]
 8009636:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800963a:	e001      	b.n	8009640 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800963c:	2302      	movs	r3, #2
 800963e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009640:	7bfb      	ldrb	r3, [r7, #15]
}
 8009642:	4618      	mov	r0, r3
 8009644:	3714      	adds	r7, #20
 8009646:	46bd      	mov	sp, r7
 8009648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800964c:	4770      	bx	lr

0800964e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800964e:	b480      	push	{r7}
 8009650:	b087      	sub	sp, #28
 8009652:	af00      	add	r7, sp, #0
 8009654:	6078      	str	r0, [r7, #4]
 8009656:	4608      	mov	r0, r1
 8009658:	4611      	mov	r1, r2
 800965a:	461a      	mov	r2, r3
 800965c:	4603      	mov	r3, r0
 800965e:	70fb      	strb	r3, [r7, #3]
 8009660:	460b      	mov	r3, r1
 8009662:	70bb      	strb	r3, [r7, #2]
 8009664:	4613      	mov	r3, r2
 8009666:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8009668:	2300      	movs	r3, #0
 800966a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800966c:	2300      	movs	r3, #0
 800966e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8009676:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8009678:	e025      	b.n	80096c6 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800967a:	7dfb      	ldrb	r3, [r7, #23]
 800967c:	221a      	movs	r2, #26
 800967e:	fb02 f303 	mul.w	r3, r2, r3
 8009682:	3308      	adds	r3, #8
 8009684:	68fa      	ldr	r2, [r7, #12]
 8009686:	4413      	add	r3, r2
 8009688:	3302      	adds	r3, #2
 800968a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800968c:	693b      	ldr	r3, [r7, #16]
 800968e:	795b      	ldrb	r3, [r3, #5]
 8009690:	78fa      	ldrb	r2, [r7, #3]
 8009692:	429a      	cmp	r2, r3
 8009694:	d002      	beq.n	800969c <USBH_FindInterface+0x4e>
 8009696:	78fb      	ldrb	r3, [r7, #3]
 8009698:	2bff      	cmp	r3, #255	@ 0xff
 800969a:	d111      	bne.n	80096c0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800969c:	693b      	ldr	r3, [r7, #16]
 800969e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80096a0:	78ba      	ldrb	r2, [r7, #2]
 80096a2:	429a      	cmp	r2, r3
 80096a4:	d002      	beq.n	80096ac <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80096a6:	78bb      	ldrb	r3, [r7, #2]
 80096a8:	2bff      	cmp	r3, #255	@ 0xff
 80096aa:	d109      	bne.n	80096c0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80096ac:	693b      	ldr	r3, [r7, #16]
 80096ae:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80096b0:	787a      	ldrb	r2, [r7, #1]
 80096b2:	429a      	cmp	r2, r3
 80096b4:	d002      	beq.n	80096bc <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80096b6:	787b      	ldrb	r3, [r7, #1]
 80096b8:	2bff      	cmp	r3, #255	@ 0xff
 80096ba:	d101      	bne.n	80096c0 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80096bc:	7dfb      	ldrb	r3, [r7, #23]
 80096be:	e006      	b.n	80096ce <USBH_FindInterface+0x80>
    }
    if_ix++;
 80096c0:	7dfb      	ldrb	r3, [r7, #23]
 80096c2:	3301      	adds	r3, #1
 80096c4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80096c6:	7dfb      	ldrb	r3, [r7, #23]
 80096c8:	2b01      	cmp	r3, #1
 80096ca:	d9d6      	bls.n	800967a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80096cc:	23ff      	movs	r3, #255	@ 0xff
}
 80096ce:	4618      	mov	r0, r3
 80096d0:	371c      	adds	r7, #28
 80096d2:	46bd      	mov	sp, r7
 80096d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d8:	4770      	bx	lr

080096da <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80096da:	b580      	push	{r7, lr}
 80096dc:	b082      	sub	sp, #8
 80096de:	af00      	add	r7, sp, #0
 80096e0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f001 fcfa 	bl	800b0dc <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80096e8:	2101      	movs	r1, #1
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f001 fe13 	bl	800b316 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80096f0:	2300      	movs	r3, #0
}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3708      	adds	r7, #8
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}
	...

080096fc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b088      	sub	sp, #32
 8009700:	af04      	add	r7, sp, #16
 8009702:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009704:	2302      	movs	r3, #2
 8009706:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8009708:	2300      	movs	r3, #0
 800970a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8009712:	b2db      	uxtb	r3, r3
 8009714:	2b01      	cmp	r3, #1
 8009716:	d102      	bne.n	800971e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2203      	movs	r2, #3
 800971c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	781b      	ldrb	r3, [r3, #0]
 8009722:	b2db      	uxtb	r3, r3
 8009724:	2b0b      	cmp	r3, #11
 8009726:	f200 81bb 	bhi.w	8009aa0 <USBH_Process+0x3a4>
 800972a:	a201      	add	r2, pc, #4	@ (adr r2, 8009730 <USBH_Process+0x34>)
 800972c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009730:	08009761 	.word	0x08009761
 8009734:	08009793 	.word	0x08009793
 8009738:	080097fb 	.word	0x080097fb
 800973c:	08009a3b 	.word	0x08009a3b
 8009740:	08009aa1 	.word	0x08009aa1
 8009744:	0800989b 	.word	0x0800989b
 8009748:	080099e1 	.word	0x080099e1
 800974c:	080098d1 	.word	0x080098d1
 8009750:	080098f1 	.word	0x080098f1
 8009754:	0800990f 	.word	0x0800990f
 8009758:	08009953 	.word	0x08009953
 800975c:	08009a23 	.word	0x08009a23
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8009766:	b2db      	uxtb	r3, r3
 8009768:	2b00      	cmp	r3, #0
 800976a:	f000 819b 	beq.w	8009aa4 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2201      	movs	r2, #1
 8009772:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8009774:	20c8      	movs	r0, #200	@ 0xc8
 8009776:	f001 fe18 	bl	800b3aa <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800977a:	6878      	ldr	r0, [r7, #4]
 800977c:	f001 fd0b 	bl	800b196 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2200      	movs	r2, #0
 800978c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009790:	e188      	b.n	8009aa4 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8009798:	2b01      	cmp	r3, #1
 800979a:	d107      	bne.n	80097ac <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	2200      	movs	r2, #0
 80097a0:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2202      	movs	r2, #2
 80097a8:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80097aa:	e18a      	b.n	8009ac2 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80097b2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80097b6:	d914      	bls.n	80097e2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80097be:	3301      	adds	r3, #1
 80097c0:	b2da      	uxtb	r2, r3
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80097ce:	2b03      	cmp	r3, #3
 80097d0:	d903      	bls.n	80097da <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	220d      	movs	r2, #13
 80097d6:	701a      	strb	r2, [r3, #0]
      break;
 80097d8:	e173      	b.n	8009ac2 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	2200      	movs	r2, #0
 80097de:	701a      	strb	r2, [r3, #0]
      break;
 80097e0:	e16f      	b.n	8009ac2 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80097e8:	f103 020a 	add.w	r2, r3, #10
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80097f2:	200a      	movs	r0, #10
 80097f4:	f001 fdd9 	bl	800b3aa <USBH_Delay>
      break;
 80097f8:	e163      	b.n	8009ac2 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009800:	2b00      	cmp	r3, #0
 8009802:	d005      	beq.n	8009810 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800980a:	2104      	movs	r1, #4
 800980c:	6878      	ldr	r0, [r7, #4]
 800980e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009810:	2064      	movs	r0, #100	@ 0x64
 8009812:	f001 fdca 	bl	800b3aa <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8009816:	6878      	ldr	r0, [r7, #4]
 8009818:	f001 fc96 	bl	800b148 <USBH_LL_GetSpeed>
 800981c:	4603      	mov	r3, r0
 800981e:	461a      	mov	r2, r3
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	2205      	movs	r2, #5
 800982a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800982c:	2100      	movs	r1, #0
 800982e:	6878      	ldr	r0, [r7, #4]
 8009830:	f001 fa9b 	bl	800ad6a <USBH_AllocPipe>
 8009834:	4603      	mov	r3, r0
 8009836:	461a      	mov	r2, r3
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800983c:	2180      	movs	r1, #128	@ 0x80
 800983e:	6878      	ldr	r0, [r7, #4]
 8009840:	f001 fa93 	bl	800ad6a <USBH_AllocPipe>
 8009844:	4603      	mov	r3, r0
 8009846:	461a      	mov	r2, r3
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	7919      	ldrb	r1, [r3, #4]
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009860:	9202      	str	r2, [sp, #8]
 8009862:	2200      	movs	r2, #0
 8009864:	9201      	str	r2, [sp, #4]
 8009866:	9300      	str	r3, [sp, #0]
 8009868:	4603      	mov	r3, r0
 800986a:	2280      	movs	r2, #128	@ 0x80
 800986c:	6878      	ldr	r0, [r7, #4]
 800986e:	f001 fa4d 	bl	800ad0c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	7959      	ldrb	r1, [r3, #5]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009882:	687a      	ldr	r2, [r7, #4]
 8009884:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8009886:	9202      	str	r2, [sp, #8]
 8009888:	2200      	movs	r2, #0
 800988a:	9201      	str	r2, [sp, #4]
 800988c:	9300      	str	r3, [sp, #0]
 800988e:	4603      	mov	r3, r0
 8009890:	2200      	movs	r2, #0
 8009892:	6878      	ldr	r0, [r7, #4]
 8009894:	f001 fa3a 	bl	800ad0c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009898:	e113      	b.n	8009ac2 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f000 f916 	bl	8009acc <USBH_HandleEnum>
 80098a0:	4603      	mov	r3, r0
 80098a2:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80098a4:	7bbb      	ldrb	r3, [r7, #14]
 80098a6:	b2db      	uxtb	r3, r3
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	f040 80fd 	bne.w	8009aa8 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80098bc:	2b01      	cmp	r3, #1
 80098be:	d103      	bne.n	80098c8 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2208      	movs	r2, #8
 80098c4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80098c6:	e0ef      	b.n	8009aa8 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	2207      	movs	r2, #7
 80098cc:	701a      	strb	r2, [r3, #0]
      break;
 80098ce:	e0eb      	b.n	8009aa8 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	f000 80e8 	beq.w	8009aac <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80098e2:	2101      	movs	r1, #1
 80098e4:	6878      	ldr	r0, [r7, #4]
 80098e6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2208      	movs	r2, #8
 80098ec:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80098ee:	e0dd      	b.n	8009aac <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80098f6:	4619      	mov	r1, r3
 80098f8:	6878      	ldr	r0, [r7, #4]
 80098fa:	f000 fc3a 	bl	800a172 <USBH_SetCfg>
 80098fe:	4603      	mov	r3, r0
 8009900:	2b00      	cmp	r3, #0
 8009902:	f040 80d5 	bne.w	8009ab0 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2209      	movs	r2, #9
 800990a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800990c:	e0d0      	b.n	8009ab0 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8009914:	f003 0320 	and.w	r3, r3, #32
 8009918:	2b00      	cmp	r3, #0
 800991a:	d016      	beq.n	800994a <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800991c:	2101      	movs	r1, #1
 800991e:	6878      	ldr	r0, [r7, #4]
 8009920:	f000 fc4a 	bl	800a1b8 <USBH_SetFeature>
 8009924:	4603      	mov	r3, r0
 8009926:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009928:	7bbb      	ldrb	r3, [r7, #14]
 800992a:	b2db      	uxtb	r3, r3
 800992c:	2b00      	cmp	r3, #0
 800992e:	d103      	bne.n	8009938 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	220a      	movs	r2, #10
 8009934:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009936:	e0bd      	b.n	8009ab4 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8009938:	7bbb      	ldrb	r3, [r7, #14]
 800993a:	b2db      	uxtb	r3, r3
 800993c:	2b03      	cmp	r3, #3
 800993e:	f040 80b9 	bne.w	8009ab4 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	220a      	movs	r2, #10
 8009946:	701a      	strb	r2, [r3, #0]
      break;
 8009948:	e0b4      	b.n	8009ab4 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	220a      	movs	r2, #10
 800994e:	701a      	strb	r2, [r3, #0]
      break;
 8009950:	e0b0      	b.n	8009ab4 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8009958:	2b00      	cmp	r3, #0
 800995a:	f000 80ad 	beq.w	8009ab8 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	2200      	movs	r2, #0
 8009962:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009966:	2300      	movs	r3, #0
 8009968:	73fb      	strb	r3, [r7, #15]
 800996a:	e016      	b.n	800999a <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800996c:	7bfa      	ldrb	r2, [r7, #15]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	32de      	adds	r2, #222	@ 0xde
 8009972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009976:	791a      	ldrb	r2, [r3, #4]
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800997e:	429a      	cmp	r2, r3
 8009980:	d108      	bne.n	8009994 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8009982:	7bfa      	ldrb	r2, [r7, #15]
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	32de      	adds	r2, #222	@ 0xde
 8009988:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8009992:	e005      	b.n	80099a0 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8009994:	7bfb      	ldrb	r3, [r7, #15]
 8009996:	3301      	adds	r3, #1
 8009998:	73fb      	strb	r3, [r7, #15]
 800999a:	7bfb      	ldrb	r3, [r7, #15]
 800999c:	2b00      	cmp	r3, #0
 800999e:	d0e5      	beq.n	800996c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d016      	beq.n	80099d8 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	4798      	blx	r3
 80099b6:	4603      	mov	r3, r0
 80099b8:	2b00      	cmp	r3, #0
 80099ba:	d109      	bne.n	80099d0 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2206      	movs	r2, #6
 80099c0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80099c8:	2103      	movs	r1, #3
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80099ce:	e073      	b.n	8009ab8 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	220d      	movs	r2, #13
 80099d4:	701a      	strb	r2, [r3, #0]
      break;
 80099d6:	e06f      	b.n	8009ab8 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	220d      	movs	r2, #13
 80099dc:	701a      	strb	r2, [r3, #0]
      break;
 80099de:	e06b      	b.n	8009ab8 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 80099e0:	687b      	ldr	r3, [r7, #4]
 80099e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d017      	beq.n	8009a1a <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80099f0:	691b      	ldr	r3, [r3, #16]
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	4798      	blx	r3
 80099f6:	4603      	mov	r3, r0
 80099f8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 80099fa:	7bbb      	ldrb	r3, [r7, #14]
 80099fc:	b2db      	uxtb	r3, r3
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d103      	bne.n	8009a0a <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	220b      	movs	r2, #11
 8009a06:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009a08:	e058      	b.n	8009abc <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8009a0a:	7bbb      	ldrb	r3, [r7, #14]
 8009a0c:	b2db      	uxtb	r3, r3
 8009a0e:	2b02      	cmp	r3, #2
 8009a10:	d154      	bne.n	8009abc <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	220d      	movs	r2, #13
 8009a16:	701a      	strb	r2, [r3, #0]
      break;
 8009a18:	e050      	b.n	8009abc <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8009a1a:	687b      	ldr	r3, [r7, #4]
 8009a1c:	220d      	movs	r2, #13
 8009a1e:	701a      	strb	r2, [r3, #0]
      break;
 8009a20:	e04c      	b.n	8009abc <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d049      	beq.n	8009ac0 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009a32:	695b      	ldr	r3, [r3, #20]
 8009a34:	6878      	ldr	r0, [r7, #4]
 8009a36:	4798      	blx	r3
      }
      break;
 8009a38:	e042      	b.n	8009ac0 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	2200      	movs	r2, #0
 8009a3e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8009a42:	6878      	ldr	r0, [r7, #4]
 8009a44:	f7ff fd4a 	bl	80094dc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d009      	beq.n	8009a66 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009a58:	68db      	ldr	r3, [r3, #12]
 8009a5a:	6878      	ldr	r0, [r7, #4]
 8009a5c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	2200      	movs	r2, #0
 8009a62:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d005      	beq.n	8009a7c <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009a76:	2105      	movs	r1, #5
 8009a78:	6878      	ldr	r0, [r7, #4]
 8009a7a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8009a82:	b2db      	uxtb	r3, r3
 8009a84:	2b01      	cmp	r3, #1
 8009a86:	d107      	bne.n	8009a98 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2200      	movs	r2, #0
 8009a8c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009a90:	6878      	ldr	r0, [r7, #4]
 8009a92:	f7ff fe22 	bl	80096da <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009a96:	e014      	b.n	8009ac2 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8009a98:	6878      	ldr	r0, [r7, #4]
 8009a9a:	f001 fb1f 	bl	800b0dc <USBH_LL_Start>
      break;
 8009a9e:	e010      	b.n	8009ac2 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009aa0:	bf00      	nop
 8009aa2:	e00e      	b.n	8009ac2 <USBH_Process+0x3c6>
      break;
 8009aa4:	bf00      	nop
 8009aa6:	e00c      	b.n	8009ac2 <USBH_Process+0x3c6>
      break;
 8009aa8:	bf00      	nop
 8009aaa:	e00a      	b.n	8009ac2 <USBH_Process+0x3c6>
    break;
 8009aac:	bf00      	nop
 8009aae:	e008      	b.n	8009ac2 <USBH_Process+0x3c6>
      break;
 8009ab0:	bf00      	nop
 8009ab2:	e006      	b.n	8009ac2 <USBH_Process+0x3c6>
      break;
 8009ab4:	bf00      	nop
 8009ab6:	e004      	b.n	8009ac2 <USBH_Process+0x3c6>
      break;
 8009ab8:	bf00      	nop
 8009aba:	e002      	b.n	8009ac2 <USBH_Process+0x3c6>
      break;
 8009abc:	bf00      	nop
 8009abe:	e000      	b.n	8009ac2 <USBH_Process+0x3c6>
      break;
 8009ac0:	bf00      	nop
  }
  return USBH_OK;
 8009ac2:	2300      	movs	r3, #0
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3710      	adds	r7, #16
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}

08009acc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009acc:	b580      	push	{r7, lr}
 8009ace:	b088      	sub	sp, #32
 8009ad0:	af04      	add	r7, sp, #16
 8009ad2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009ad8:	2301      	movs	r3, #1
 8009ada:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	785b      	ldrb	r3, [r3, #1]
 8009ae0:	2b07      	cmp	r3, #7
 8009ae2:	f200 81bd 	bhi.w	8009e60 <USBH_HandleEnum+0x394>
 8009ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8009aec <USBH_HandleEnum+0x20>)
 8009ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009aec:	08009b0d 	.word	0x08009b0d
 8009af0:	08009bc7 	.word	0x08009bc7
 8009af4:	08009c31 	.word	0x08009c31
 8009af8:	08009cbb 	.word	0x08009cbb
 8009afc:	08009d25 	.word	0x08009d25
 8009b00:	08009d95 	.word	0x08009d95
 8009b04:	08009ddb 	.word	0x08009ddb
 8009b08:	08009e21 	.word	0x08009e21
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009b0c:	2108      	movs	r1, #8
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f000 fa4c 	bl	8009fac <USBH_Get_DevDesc>
 8009b14:	4603      	mov	r3, r0
 8009b16:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009b18:	7bbb      	ldrb	r3, [r7, #14]
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d12e      	bne.n	8009b7c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	7919      	ldrb	r1, [r3, #4]
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009b3e:	687a      	ldr	r2, [r7, #4]
 8009b40:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009b42:	9202      	str	r2, [sp, #8]
 8009b44:	2200      	movs	r2, #0
 8009b46:	9201      	str	r2, [sp, #4]
 8009b48:	9300      	str	r3, [sp, #0]
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	2280      	movs	r2, #128	@ 0x80
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f001 f8dc 	bl	800ad0c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	7959      	ldrb	r1, [r3, #5]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009b68:	9202      	str	r2, [sp, #8]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	9201      	str	r2, [sp, #4]
 8009b6e:	9300      	str	r3, [sp, #0]
 8009b70:	4603      	mov	r3, r0
 8009b72:	2200      	movs	r2, #0
 8009b74:	6878      	ldr	r0, [r7, #4]
 8009b76:	f001 f8c9 	bl	800ad0c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009b7a:	e173      	b.n	8009e64 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b7c:	7bbb      	ldrb	r3, [r7, #14]
 8009b7e:	2b03      	cmp	r3, #3
 8009b80:	f040 8170 	bne.w	8009e64 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009b8a:	3301      	adds	r3, #1
 8009b8c:	b2da      	uxtb	r2, r3
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009b9a:	2b03      	cmp	r3, #3
 8009b9c:	d903      	bls.n	8009ba6 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	220d      	movs	r2, #13
 8009ba2:	701a      	strb	r2, [r3, #0]
      break;
 8009ba4:	e15e      	b.n	8009e64 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	795b      	ldrb	r3, [r3, #5]
 8009baa:	4619      	mov	r1, r3
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f001 f8fd 	bl	800adac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	791b      	ldrb	r3, [r3, #4]
 8009bb6:	4619      	mov	r1, r3
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f001 f8f7 	bl	800adac <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	701a      	strb	r2, [r3, #0]
      break;
 8009bc4:	e14e      	b.n	8009e64 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009bc6:	2112      	movs	r1, #18
 8009bc8:	6878      	ldr	r0, [r7, #4]
 8009bca:	f000 f9ef 	bl	8009fac <USBH_Get_DevDesc>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009bd2:	7bbb      	ldrb	r3, [r7, #14]
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d103      	bne.n	8009be0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	2202      	movs	r2, #2
 8009bdc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009bde:	e143      	b.n	8009e68 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009be0:	7bbb      	ldrb	r3, [r7, #14]
 8009be2:	2b03      	cmp	r3, #3
 8009be4:	f040 8140 	bne.w	8009e68 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009bee:	3301      	adds	r3, #1
 8009bf0:	b2da      	uxtb	r2, r3
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009bfe:	2b03      	cmp	r3, #3
 8009c00:	d903      	bls.n	8009c0a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	220d      	movs	r2, #13
 8009c06:	701a      	strb	r2, [r3, #0]
      break;
 8009c08:	e12e      	b.n	8009e68 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	795b      	ldrb	r3, [r3, #5]
 8009c0e:	4619      	mov	r1, r3
 8009c10:	6878      	ldr	r0, [r7, #4]
 8009c12:	f001 f8cb 	bl	800adac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	791b      	ldrb	r3, [r3, #4]
 8009c1a:	4619      	mov	r1, r3
 8009c1c:	6878      	ldr	r0, [r7, #4]
 8009c1e:	f001 f8c5 	bl	800adac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	2200      	movs	r2, #0
 8009c26:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009c28:	687b      	ldr	r3, [r7, #4]
 8009c2a:	2200      	movs	r2, #0
 8009c2c:	701a      	strb	r2, [r3, #0]
      break;
 8009c2e:	e11b      	b.n	8009e68 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009c30:	2101      	movs	r1, #1
 8009c32:	6878      	ldr	r0, [r7, #4]
 8009c34:	f000 fa79 	bl	800a12a <USBH_SetAddress>
 8009c38:	4603      	mov	r3, r0
 8009c3a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009c3c:	7bbb      	ldrb	r3, [r7, #14]
 8009c3e:	2b00      	cmp	r3, #0
 8009c40:	d130      	bne.n	8009ca4 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8009c42:	2002      	movs	r0, #2
 8009c44:	f001 fbb1 	bl	800b3aa <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	2201      	movs	r2, #1
 8009c4c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	2203      	movs	r2, #3
 8009c54:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009c56:	687b      	ldr	r3, [r7, #4]
 8009c58:	7919      	ldrb	r1, [r3, #4]
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009c6a:	9202      	str	r2, [sp, #8]
 8009c6c:	2200      	movs	r2, #0
 8009c6e:	9201      	str	r2, [sp, #4]
 8009c70:	9300      	str	r3, [sp, #0]
 8009c72:	4603      	mov	r3, r0
 8009c74:	2280      	movs	r2, #128	@ 0x80
 8009c76:	6878      	ldr	r0, [r7, #4]
 8009c78:	f001 f848 	bl	800ad0c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	7959      	ldrb	r1, [r3, #5]
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009c90:	9202      	str	r2, [sp, #8]
 8009c92:	2200      	movs	r2, #0
 8009c94:	9201      	str	r2, [sp, #4]
 8009c96:	9300      	str	r3, [sp, #0]
 8009c98:	4603      	mov	r3, r0
 8009c9a:	2200      	movs	r2, #0
 8009c9c:	6878      	ldr	r0, [r7, #4]
 8009c9e:	f001 f835 	bl	800ad0c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009ca2:	e0e3      	b.n	8009e6c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009ca4:	7bbb      	ldrb	r3, [r7, #14]
 8009ca6:	2b03      	cmp	r3, #3
 8009ca8:	f040 80e0 	bne.w	8009e6c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	220d      	movs	r2, #13
 8009cb0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	2200      	movs	r2, #0
 8009cb6:	705a      	strb	r2, [r3, #1]
      break;
 8009cb8:	e0d8      	b.n	8009e6c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009cba:	2109      	movs	r1, #9
 8009cbc:	6878      	ldr	r0, [r7, #4]
 8009cbe:	f000 f9a1 	bl	800a004 <USBH_Get_CfgDesc>
 8009cc2:	4603      	mov	r3, r0
 8009cc4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009cc6:	7bbb      	ldrb	r3, [r7, #14]
 8009cc8:	2b00      	cmp	r3, #0
 8009cca:	d103      	bne.n	8009cd4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	2204      	movs	r2, #4
 8009cd0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009cd2:	e0cd      	b.n	8009e70 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009cd4:	7bbb      	ldrb	r3, [r7, #14]
 8009cd6:	2b03      	cmp	r3, #3
 8009cd8:	f040 80ca 	bne.w	8009e70 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009ce2:	3301      	adds	r3, #1
 8009ce4:	b2da      	uxtb	r2, r3
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009cf2:	2b03      	cmp	r3, #3
 8009cf4:	d903      	bls.n	8009cfe <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	220d      	movs	r2, #13
 8009cfa:	701a      	strb	r2, [r3, #0]
      break;
 8009cfc:	e0b8      	b.n	8009e70 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	795b      	ldrb	r3, [r3, #5]
 8009d02:	4619      	mov	r1, r3
 8009d04:	6878      	ldr	r0, [r7, #4]
 8009d06:	f001 f851 	bl	800adac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	791b      	ldrb	r3, [r3, #4]
 8009d0e:	4619      	mov	r1, r3
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f001 f84b 	bl	800adac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	2200      	movs	r2, #0
 8009d20:	701a      	strb	r2, [r3, #0]
      break;
 8009d22:	e0a5      	b.n	8009e70 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8009d2a:	4619      	mov	r1, r3
 8009d2c:	6878      	ldr	r0, [r7, #4]
 8009d2e:	f000 f969 	bl	800a004 <USBH_Get_CfgDesc>
 8009d32:	4603      	mov	r3, r0
 8009d34:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009d36:	7bbb      	ldrb	r3, [r7, #14]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d103      	bne.n	8009d44 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	2205      	movs	r2, #5
 8009d40:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009d42:	e097      	b.n	8009e74 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d44:	7bbb      	ldrb	r3, [r7, #14]
 8009d46:	2b03      	cmp	r3, #3
 8009d48:	f040 8094 	bne.w	8009e74 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8009d4c:	687b      	ldr	r3, [r7, #4]
 8009d4e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009d52:	3301      	adds	r3, #1
 8009d54:	b2da      	uxtb	r2, r3
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009d62:	2b03      	cmp	r3, #3
 8009d64:	d903      	bls.n	8009d6e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8009d66:	687b      	ldr	r3, [r7, #4]
 8009d68:	220d      	movs	r2, #13
 8009d6a:	701a      	strb	r2, [r3, #0]
      break;
 8009d6c:	e082      	b.n	8009e74 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	795b      	ldrb	r3, [r3, #5]
 8009d72:	4619      	mov	r1, r3
 8009d74:	6878      	ldr	r0, [r7, #4]
 8009d76:	f001 f819 	bl	800adac <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	791b      	ldrb	r3, [r3, #4]
 8009d7e:	4619      	mov	r1, r3
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f001 f813 	bl	800adac <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009d86:	687b      	ldr	r3, [r7, #4]
 8009d88:	2200      	movs	r2, #0
 8009d8a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	2200      	movs	r2, #0
 8009d90:	701a      	strb	r2, [r3, #0]
      break;
 8009d92:	e06f      	b.n	8009e74 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8009d9a:	2b00      	cmp	r3, #0
 8009d9c:	d019      	beq.n	8009dd2 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009daa:	23ff      	movs	r3, #255	@ 0xff
 8009dac:	6878      	ldr	r0, [r7, #4]
 8009dae:	f000 f953 	bl	800a058 <USBH_Get_StringDesc>
 8009db2:	4603      	mov	r3, r0
 8009db4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009db6:	7bbb      	ldrb	r3, [r7, #14]
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d103      	bne.n	8009dc4 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2206      	movs	r2, #6
 8009dc0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009dc2:	e059      	b.n	8009e78 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009dc4:	7bbb      	ldrb	r3, [r7, #14]
 8009dc6:	2b03      	cmp	r3, #3
 8009dc8:	d156      	bne.n	8009e78 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2206      	movs	r2, #6
 8009dce:	705a      	strb	r2, [r3, #1]
      break;
 8009dd0:	e052      	b.n	8009e78 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	2206      	movs	r2, #6
 8009dd6:	705a      	strb	r2, [r3, #1]
      break;
 8009dd8:	e04e      	b.n	8009e78 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	d019      	beq.n	8009e18 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009df0:	23ff      	movs	r3, #255	@ 0xff
 8009df2:	6878      	ldr	r0, [r7, #4]
 8009df4:	f000 f930 	bl	800a058 <USBH_Get_StringDesc>
 8009df8:	4603      	mov	r3, r0
 8009dfa:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009dfc:	7bbb      	ldrb	r3, [r7, #14]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d103      	bne.n	8009e0a <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2207      	movs	r2, #7
 8009e06:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009e08:	e038      	b.n	8009e7c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e0a:	7bbb      	ldrb	r3, [r7, #14]
 8009e0c:	2b03      	cmp	r3, #3
 8009e0e:	d135      	bne.n	8009e7c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	2207      	movs	r2, #7
 8009e14:	705a      	strb	r2, [r3, #1]
      break;
 8009e16:	e031      	b.n	8009e7c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	2207      	movs	r2, #7
 8009e1c:	705a      	strb	r2, [r3, #1]
      break;
 8009e1e:	e02d      	b.n	8009e7c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d017      	beq.n	8009e5a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009e36:	23ff      	movs	r3, #255	@ 0xff
 8009e38:	6878      	ldr	r0, [r7, #4]
 8009e3a:	f000 f90d 	bl	800a058 <USBH_Get_StringDesc>
 8009e3e:	4603      	mov	r3, r0
 8009e40:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009e42:	7bbb      	ldrb	r3, [r7, #14]
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d102      	bne.n	8009e4e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009e48:	2300      	movs	r3, #0
 8009e4a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009e4c:	e018      	b.n	8009e80 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009e4e:	7bbb      	ldrb	r3, [r7, #14]
 8009e50:	2b03      	cmp	r3, #3
 8009e52:	d115      	bne.n	8009e80 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8009e54:	2300      	movs	r3, #0
 8009e56:	73fb      	strb	r3, [r7, #15]
      break;
 8009e58:	e012      	b.n	8009e80 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8009e5a:	2300      	movs	r3, #0
 8009e5c:	73fb      	strb	r3, [r7, #15]
      break;
 8009e5e:	e00f      	b.n	8009e80 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8009e60:	bf00      	nop
 8009e62:	e00e      	b.n	8009e82 <USBH_HandleEnum+0x3b6>
      break;
 8009e64:	bf00      	nop
 8009e66:	e00c      	b.n	8009e82 <USBH_HandleEnum+0x3b6>
      break;
 8009e68:	bf00      	nop
 8009e6a:	e00a      	b.n	8009e82 <USBH_HandleEnum+0x3b6>
      break;
 8009e6c:	bf00      	nop
 8009e6e:	e008      	b.n	8009e82 <USBH_HandleEnum+0x3b6>
      break;
 8009e70:	bf00      	nop
 8009e72:	e006      	b.n	8009e82 <USBH_HandleEnum+0x3b6>
      break;
 8009e74:	bf00      	nop
 8009e76:	e004      	b.n	8009e82 <USBH_HandleEnum+0x3b6>
      break;
 8009e78:	bf00      	nop
 8009e7a:	e002      	b.n	8009e82 <USBH_HandleEnum+0x3b6>
      break;
 8009e7c:	bf00      	nop
 8009e7e:	e000      	b.n	8009e82 <USBH_HandleEnum+0x3b6>
      break;
 8009e80:	bf00      	nop
  }
  return Status;
 8009e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e84:	4618      	mov	r0, r3
 8009e86:	3710      	adds	r7, #16
 8009e88:	46bd      	mov	sp, r7
 8009e8a:	bd80      	pop	{r7, pc}

08009e8c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b083      	sub	sp, #12
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	683a      	ldr	r2, [r7, #0]
 8009e9a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8009e9e:	bf00      	nop
 8009ea0:	370c      	adds	r7, #12
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea8:	4770      	bx	lr

08009eaa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009eaa:	b580      	push	{r7, lr}
 8009eac:	b082      	sub	sp, #8
 8009eae:	af00      	add	r7, sp, #0
 8009eb0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009eb8:	1c5a      	adds	r2, r3, #1
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f000 f804 	bl	8009ece <USBH_HandleSof>
}
 8009ec6:	bf00      	nop
 8009ec8:	3708      	adds	r7, #8
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}

08009ece <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009ece:	b580      	push	{r7, lr}
 8009ed0:	b082      	sub	sp, #8
 8009ed2:	af00      	add	r7, sp, #0
 8009ed4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	781b      	ldrb	r3, [r3, #0]
 8009eda:	b2db      	uxtb	r3, r3
 8009edc:	2b0b      	cmp	r3, #11
 8009ede:	d10a      	bne.n	8009ef6 <USBH_HandleSof+0x28>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d005      	beq.n	8009ef6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009ef0:	699b      	ldr	r3, [r3, #24]
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	4798      	blx	r3
  }
}
 8009ef6:	bf00      	nop
 8009ef8:	3708      	adds	r7, #8
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009efe:	b480      	push	{r7}
 8009f00:	b083      	sub	sp, #12
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	2201      	movs	r2, #1
 8009f0a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009f0e:	bf00      	nop
}
 8009f10:	370c      	adds	r7, #12
 8009f12:	46bd      	mov	sp, r7
 8009f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f18:	4770      	bx	lr

08009f1a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009f1a:	b480      	push	{r7}
 8009f1c:	b083      	sub	sp, #12
 8009f1e:	af00      	add	r7, sp, #0
 8009f20:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2200      	movs	r2, #0
 8009f26:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 8009f2a:	bf00      	nop
}
 8009f2c:	370c      	adds	r7, #12
 8009f2e:	46bd      	mov	sp, r7
 8009f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f34:	4770      	bx	lr

08009f36 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009f36:	b480      	push	{r7}
 8009f38:	b083      	sub	sp, #12
 8009f3a:	af00      	add	r7, sp, #0
 8009f3c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	2201      	movs	r2, #1
 8009f42:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2200      	movs	r2, #0
 8009f4a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	2200      	movs	r2, #0
 8009f52:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009f56:	2300      	movs	r3, #0
}
 8009f58:	4618      	mov	r0, r3
 8009f5a:	370c      	adds	r7, #12
 8009f5c:	46bd      	mov	sp, r7
 8009f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f62:	4770      	bx	lr

08009f64 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009f64:	b580      	push	{r7, lr}
 8009f66:	b082      	sub	sp, #8
 8009f68:	af00      	add	r7, sp, #0
 8009f6a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	2201      	movs	r2, #1
 8009f70:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2200      	movs	r2, #0
 8009f78:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 8009f7c:	687b      	ldr	r3, [r7, #4]
 8009f7e:	2200      	movs	r2, #0
 8009f80:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009f84:	6878      	ldr	r0, [r7, #4]
 8009f86:	f001 f8c4 	bl	800b112 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	791b      	ldrb	r3, [r3, #4]
 8009f8e:	4619      	mov	r1, r3
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 ff0b 	bl	800adac <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	795b      	ldrb	r3, [r3, #5]
 8009f9a:	4619      	mov	r1, r3
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 ff05 	bl	800adac <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009fa2:	2300      	movs	r3, #0
}
 8009fa4:	4618      	mov	r0, r3
 8009fa6:	3708      	adds	r7, #8
 8009fa8:	46bd      	mov	sp, r7
 8009faa:	bd80      	pop	{r7, pc}

08009fac <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009fac:	b580      	push	{r7, lr}
 8009fae:	b086      	sub	sp, #24
 8009fb0:	af02      	add	r7, sp, #8
 8009fb2:	6078      	str	r0, [r7, #4]
 8009fb4:	460b      	mov	r3, r1
 8009fb6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009fb8:	887b      	ldrh	r3, [r7, #2]
 8009fba:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009fbe:	d901      	bls.n	8009fc4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009fc0:	2303      	movs	r3, #3
 8009fc2:	e01b      	b.n	8009ffc <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 8009fca:	887b      	ldrh	r3, [r7, #2]
 8009fcc:	9300      	str	r3, [sp, #0]
 8009fce:	4613      	mov	r3, r2
 8009fd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009fd4:	2100      	movs	r1, #0
 8009fd6:	6878      	ldr	r0, [r7, #4]
 8009fd8:	f000 f872 	bl	800a0c0 <USBH_GetDescriptor>
 8009fdc:	4603      	mov	r3, r0
 8009fde:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009fe0:	7bfb      	ldrb	r3, [r7, #15]
 8009fe2:	2b00      	cmp	r3, #0
 8009fe4:	d109      	bne.n	8009ffa <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8009fec:	887a      	ldrh	r2, [r7, #2]
 8009fee:	4619      	mov	r1, r3
 8009ff0:	6878      	ldr	r0, [r7, #4]
 8009ff2:	f000 f929 	bl	800a248 <USBH_ParseDevDesc>
 8009ff6:	4603      	mov	r3, r0
 8009ff8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ffc:	4618      	mov	r0, r3
 8009ffe:	3710      	adds	r7, #16
 800a000:	46bd      	mov	sp, r7
 800a002:	bd80      	pop	{r7, pc}

0800a004 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800a004:	b580      	push	{r7, lr}
 800a006:	b086      	sub	sp, #24
 800a008:	af02      	add	r7, sp, #8
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	460b      	mov	r3, r1
 800a00e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	331c      	adds	r3, #28
 800a014:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800a016:	887b      	ldrh	r3, [r7, #2]
 800a018:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a01c:	d901      	bls.n	800a022 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a01e:	2303      	movs	r3, #3
 800a020:	e016      	b.n	800a050 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800a022:	887b      	ldrh	r3, [r7, #2]
 800a024:	9300      	str	r3, [sp, #0]
 800a026:	68bb      	ldr	r3, [r7, #8]
 800a028:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800a02c:	2100      	movs	r1, #0
 800a02e:	6878      	ldr	r0, [r7, #4]
 800a030:	f000 f846 	bl	800a0c0 <USBH_GetDescriptor>
 800a034:	4603      	mov	r3, r0
 800a036:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800a038:	7bfb      	ldrb	r3, [r7, #15]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d107      	bne.n	800a04e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800a03e:	887b      	ldrh	r3, [r7, #2]
 800a040:	461a      	mov	r2, r3
 800a042:	68b9      	ldr	r1, [r7, #8]
 800a044:	6878      	ldr	r0, [r7, #4]
 800a046:	f000 f9af 	bl	800a3a8 <USBH_ParseCfgDesc>
 800a04a:	4603      	mov	r3, r0
 800a04c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800a04e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a050:	4618      	mov	r0, r3
 800a052:	3710      	adds	r7, #16
 800a054:	46bd      	mov	sp, r7
 800a056:	bd80      	pop	{r7, pc}

0800a058 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b088      	sub	sp, #32
 800a05c:	af02      	add	r7, sp, #8
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	607a      	str	r2, [r7, #4]
 800a062:	461a      	mov	r2, r3
 800a064:	460b      	mov	r3, r1
 800a066:	72fb      	strb	r3, [r7, #11]
 800a068:	4613      	mov	r3, r2
 800a06a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800a06c:	893b      	ldrh	r3, [r7, #8]
 800a06e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a072:	d802      	bhi.n	800a07a <USBH_Get_StringDesc+0x22>
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	2b00      	cmp	r3, #0
 800a078:	d101      	bne.n	800a07e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800a07a:	2303      	movs	r3, #3
 800a07c:	e01c      	b.n	800a0b8 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800a07e:	7afb      	ldrb	r3, [r7, #11]
 800a080:	b29b      	uxth	r3, r3
 800a082:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800a086:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800a088:	68fb      	ldr	r3, [r7, #12]
 800a08a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800a08e:	893b      	ldrh	r3, [r7, #8]
 800a090:	9300      	str	r3, [sp, #0]
 800a092:	460b      	mov	r3, r1
 800a094:	2100      	movs	r1, #0
 800a096:	68f8      	ldr	r0, [r7, #12]
 800a098:	f000 f812 	bl	800a0c0 <USBH_GetDescriptor>
 800a09c:	4603      	mov	r3, r0
 800a09e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800a0a0:	7dfb      	ldrb	r3, [r7, #23]
 800a0a2:	2b00      	cmp	r3, #0
 800a0a4:	d107      	bne.n	800a0b6 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800a0ac:	893a      	ldrh	r2, [r7, #8]
 800a0ae:	6879      	ldr	r1, [r7, #4]
 800a0b0:	4618      	mov	r0, r3
 800a0b2:	f000 fb8d 	bl	800a7d0 <USBH_ParseStringDesc>
  }

  return status;
 800a0b6:	7dfb      	ldrb	r3, [r7, #23]
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3718      	adds	r7, #24
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800a0c0:	b580      	push	{r7, lr}
 800a0c2:	b084      	sub	sp, #16
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	60f8      	str	r0, [r7, #12]
 800a0c8:	607b      	str	r3, [r7, #4]
 800a0ca:	460b      	mov	r3, r1
 800a0cc:	72fb      	strb	r3, [r7, #11]
 800a0ce:	4613      	mov	r3, r2
 800a0d0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	789b      	ldrb	r3, [r3, #2]
 800a0d6:	2b01      	cmp	r3, #1
 800a0d8:	d11c      	bne.n	800a114 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800a0da:	7afb      	ldrb	r3, [r7, #11]
 800a0dc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a0e0:	b2da      	uxtb	r2, r3
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	2206      	movs	r2, #6
 800a0ea:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
 800a0ee:	893a      	ldrh	r2, [r7, #8]
 800a0f0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a0f2:	893b      	ldrh	r3, [r7, #8]
 800a0f4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a0f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800a0fc:	d104      	bne.n	800a108 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	f240 4209 	movw	r2, #1033	@ 0x409
 800a104:	829a      	strh	r2, [r3, #20]
 800a106:	e002      	b.n	800a10e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	2200      	movs	r2, #0
 800a10c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	8b3a      	ldrh	r2, [r7, #24]
 800a112:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a114:	8b3b      	ldrh	r3, [r7, #24]
 800a116:	461a      	mov	r2, r3
 800a118:	6879      	ldr	r1, [r7, #4]
 800a11a:	68f8      	ldr	r0, [r7, #12]
 800a11c:	f000 fba5 	bl	800a86a <USBH_CtlReq>
 800a120:	4603      	mov	r3, r0
}
 800a122:	4618      	mov	r0, r3
 800a124:	3710      	adds	r7, #16
 800a126:	46bd      	mov	sp, r7
 800a128:	bd80      	pop	{r7, pc}

0800a12a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a12a:	b580      	push	{r7, lr}
 800a12c:	b082      	sub	sp, #8
 800a12e:	af00      	add	r7, sp, #0
 800a130:	6078      	str	r0, [r7, #4]
 800a132:	460b      	mov	r3, r1
 800a134:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	789b      	ldrb	r3, [r3, #2]
 800a13a:	2b01      	cmp	r3, #1
 800a13c:	d10f      	bne.n	800a15e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2200      	movs	r2, #0
 800a142:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	2205      	movs	r2, #5
 800a148:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a14a:	78fb      	ldrb	r3, [r7, #3]
 800a14c:	b29a      	uxth	r2, r3
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	2200      	movs	r2, #0
 800a156:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2200      	movs	r2, #0
 800a15c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a15e:	2200      	movs	r2, #0
 800a160:	2100      	movs	r1, #0
 800a162:	6878      	ldr	r0, [r7, #4]
 800a164:	f000 fb81 	bl	800a86a <USBH_CtlReq>
 800a168:	4603      	mov	r3, r0
}
 800a16a:	4618      	mov	r0, r3
 800a16c:	3708      	adds	r7, #8
 800a16e:	46bd      	mov	sp, r7
 800a170:	bd80      	pop	{r7, pc}

0800a172 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a172:	b580      	push	{r7, lr}
 800a174:	b082      	sub	sp, #8
 800a176:	af00      	add	r7, sp, #0
 800a178:	6078      	str	r0, [r7, #4]
 800a17a:	460b      	mov	r3, r1
 800a17c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	789b      	ldrb	r3, [r3, #2]
 800a182:	2b01      	cmp	r3, #1
 800a184:	d10e      	bne.n	800a1a4 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	2200      	movs	r2, #0
 800a18a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	2209      	movs	r2, #9
 800a190:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	887a      	ldrh	r2, [r7, #2]
 800a196:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	2200      	movs	r2, #0
 800a19c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	2100      	movs	r1, #0
 800a1a8:	6878      	ldr	r0, [r7, #4]
 800a1aa:	f000 fb5e 	bl	800a86a <USBH_CtlReq>
 800a1ae:	4603      	mov	r3, r0
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3708      	adds	r7, #8
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b082      	sub	sp, #8
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
 800a1c0:	460b      	mov	r3, r1
 800a1c2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	789b      	ldrb	r3, [r3, #2]
 800a1c8:	2b01      	cmp	r3, #1
 800a1ca:	d10f      	bne.n	800a1ec <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2200      	movs	r2, #0
 800a1d0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2203      	movs	r2, #3
 800a1d6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a1d8:	78fb      	ldrb	r3, [r7, #3]
 800a1da:	b29a      	uxth	r2, r3
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	2200      	movs	r2, #0
 800a1ea:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	2100      	movs	r1, #0
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 fb3a 	bl	800a86a <USBH_CtlReq>
 800a1f6:	4603      	mov	r3, r0
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	3708      	adds	r7, #8
 800a1fc:	46bd      	mov	sp, r7
 800a1fe:	bd80      	pop	{r7, pc}

0800a200 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a200:	b580      	push	{r7, lr}
 800a202:	b082      	sub	sp, #8
 800a204:	af00      	add	r7, sp, #0
 800a206:	6078      	str	r0, [r7, #4]
 800a208:	460b      	mov	r3, r1
 800a20a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	789b      	ldrb	r3, [r3, #2]
 800a210:	2b01      	cmp	r3, #1
 800a212:	d10f      	bne.n	800a234 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2202      	movs	r2, #2
 800a218:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2201      	movs	r2, #1
 800a21e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	2200      	movs	r2, #0
 800a224:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a226:	78fb      	ldrb	r3, [r7, #3]
 800a228:	b29a      	uxth	r2, r3
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2200      	movs	r2, #0
 800a232:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a234:	2200      	movs	r2, #0
 800a236:	2100      	movs	r1, #0
 800a238:	6878      	ldr	r0, [r7, #4]
 800a23a:	f000 fb16 	bl	800a86a <USBH_CtlReq>
 800a23e:	4603      	mov	r3, r0
}
 800a240:	4618      	mov	r0, r3
 800a242:	3708      	adds	r7, #8
 800a244:	46bd      	mov	sp, r7
 800a246:	bd80      	pop	{r7, pc}

0800a248 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a248:	b480      	push	{r7}
 800a24a:	b087      	sub	sp, #28
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	60f8      	str	r0, [r7, #12]
 800a250:	60b9      	str	r1, [r7, #8]
 800a252:	4613      	mov	r3, r2
 800a254:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800a25c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800a25e:	2300      	movs	r3, #0
 800a260:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	2b00      	cmp	r3, #0
 800a266:	d101      	bne.n	800a26c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800a268:	2302      	movs	r3, #2
 800a26a:	e094      	b.n	800a396 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800a26c:	68bb      	ldr	r3, [r7, #8]
 800a26e:	781a      	ldrb	r2, [r3, #0]
 800a270:	693b      	ldr	r3, [r7, #16]
 800a272:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	785a      	ldrb	r2, [r3, #1]
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800a27c:	68bb      	ldr	r3, [r7, #8]
 800a27e:	3302      	adds	r3, #2
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	461a      	mov	r2, r3
 800a284:	68bb      	ldr	r3, [r7, #8]
 800a286:	3303      	adds	r3, #3
 800a288:	781b      	ldrb	r3, [r3, #0]
 800a28a:	021b      	lsls	r3, r3, #8
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	4313      	orrs	r3, r2
 800a290:	b29a      	uxth	r2, r3
 800a292:	693b      	ldr	r3, [r7, #16]
 800a294:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800a296:	68bb      	ldr	r3, [r7, #8]
 800a298:	791a      	ldrb	r2, [r3, #4]
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	795a      	ldrb	r2, [r3, #5]
 800a2a2:	693b      	ldr	r3, [r7, #16]
 800a2a4:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	799a      	ldrb	r2, [r3, #6]
 800a2aa:	693b      	ldr	r3, [r7, #16]
 800a2ac:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800a2ae:	68bb      	ldr	r3, [r7, #8]
 800a2b0:	79da      	ldrb	r2, [r3, #7]
 800a2b2:	693b      	ldr	r3, [r7, #16]
 800a2b4:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d004      	beq.n	800a2ca <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800a2c6:	2b01      	cmp	r3, #1
 800a2c8:	d11b      	bne.n	800a302 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800a2ca:	693b      	ldr	r3, [r7, #16]
 800a2cc:	79db      	ldrb	r3, [r3, #7]
 800a2ce:	2b20      	cmp	r3, #32
 800a2d0:	dc0f      	bgt.n	800a2f2 <USBH_ParseDevDesc+0xaa>
 800a2d2:	2b08      	cmp	r3, #8
 800a2d4:	db0f      	blt.n	800a2f6 <USBH_ParseDevDesc+0xae>
 800a2d6:	3b08      	subs	r3, #8
 800a2d8:	4a32      	ldr	r2, [pc, #200]	@ (800a3a4 <USBH_ParseDevDesc+0x15c>)
 800a2da:	fa22 f303 	lsr.w	r3, r2, r3
 800a2de:	f003 0301 	and.w	r3, r3, #1
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	bf14      	ite	ne
 800a2e6:	2301      	movne	r3, #1
 800a2e8:	2300      	moveq	r3, #0
 800a2ea:	b2db      	uxtb	r3, r3
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d106      	bne.n	800a2fe <USBH_ParseDevDesc+0xb6>
 800a2f0:	e001      	b.n	800a2f6 <USBH_ParseDevDesc+0xae>
 800a2f2:	2b40      	cmp	r3, #64	@ 0x40
 800a2f4:	d003      	beq.n	800a2fe <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800a2f6:	693b      	ldr	r3, [r7, #16]
 800a2f8:	2208      	movs	r2, #8
 800a2fa:	71da      	strb	r2, [r3, #7]
        break;
 800a2fc:	e000      	b.n	800a300 <USBH_ParseDevDesc+0xb8>
        break;
 800a2fe:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800a300:	e00e      	b.n	800a320 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a308:	2b02      	cmp	r3, #2
 800a30a:	d107      	bne.n	800a31c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800a30c:	693b      	ldr	r3, [r7, #16]
 800a30e:	79db      	ldrb	r3, [r3, #7]
 800a310:	2b08      	cmp	r3, #8
 800a312:	d005      	beq.n	800a320 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800a314:	693b      	ldr	r3, [r7, #16]
 800a316:	2208      	movs	r2, #8
 800a318:	71da      	strb	r2, [r3, #7]
 800a31a:	e001      	b.n	800a320 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a31c:	2303      	movs	r3, #3
 800a31e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800a320:	88fb      	ldrh	r3, [r7, #6]
 800a322:	2b08      	cmp	r3, #8
 800a324:	d936      	bls.n	800a394 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800a326:	68bb      	ldr	r3, [r7, #8]
 800a328:	3308      	adds	r3, #8
 800a32a:	781b      	ldrb	r3, [r3, #0]
 800a32c:	461a      	mov	r2, r3
 800a32e:	68bb      	ldr	r3, [r7, #8]
 800a330:	3309      	adds	r3, #9
 800a332:	781b      	ldrb	r3, [r3, #0]
 800a334:	021b      	lsls	r3, r3, #8
 800a336:	b29b      	uxth	r3, r3
 800a338:	4313      	orrs	r3, r2
 800a33a:	b29a      	uxth	r2, r3
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800a340:	68bb      	ldr	r3, [r7, #8]
 800a342:	330a      	adds	r3, #10
 800a344:	781b      	ldrb	r3, [r3, #0]
 800a346:	461a      	mov	r2, r3
 800a348:	68bb      	ldr	r3, [r7, #8]
 800a34a:	330b      	adds	r3, #11
 800a34c:	781b      	ldrb	r3, [r3, #0]
 800a34e:	021b      	lsls	r3, r3, #8
 800a350:	b29b      	uxth	r3, r3
 800a352:	4313      	orrs	r3, r2
 800a354:	b29a      	uxth	r2, r3
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800a35a:	68bb      	ldr	r3, [r7, #8]
 800a35c:	330c      	adds	r3, #12
 800a35e:	781b      	ldrb	r3, [r3, #0]
 800a360:	461a      	mov	r2, r3
 800a362:	68bb      	ldr	r3, [r7, #8]
 800a364:	330d      	adds	r3, #13
 800a366:	781b      	ldrb	r3, [r3, #0]
 800a368:	021b      	lsls	r3, r3, #8
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	4313      	orrs	r3, r2
 800a36e:	b29a      	uxth	r2, r3
 800a370:	693b      	ldr	r3, [r7, #16]
 800a372:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800a374:	68bb      	ldr	r3, [r7, #8]
 800a376:	7b9a      	ldrb	r2, [r3, #14]
 800a378:	693b      	ldr	r3, [r7, #16]
 800a37a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800a37c:	68bb      	ldr	r3, [r7, #8]
 800a37e:	7bda      	ldrb	r2, [r3, #15]
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800a384:	68bb      	ldr	r3, [r7, #8]
 800a386:	7c1a      	ldrb	r2, [r3, #16]
 800a388:	693b      	ldr	r3, [r7, #16]
 800a38a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800a38c:	68bb      	ldr	r3, [r7, #8]
 800a38e:	7c5a      	ldrb	r2, [r3, #17]
 800a390:	693b      	ldr	r3, [r7, #16]
 800a392:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800a394:	7dfb      	ldrb	r3, [r7, #23]
}
 800a396:	4618      	mov	r0, r3
 800a398:	371c      	adds	r7, #28
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr
 800a3a2:	bf00      	nop
 800a3a4:	01000101 	.word	0x01000101

0800a3a8 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a3a8:	b580      	push	{r7, lr}
 800a3aa:	b08c      	sub	sp, #48	@ 0x30
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	60f8      	str	r0, [r7, #12]
 800a3b0:	60b9      	str	r1, [r7, #8]
 800a3b2:	4613      	mov	r3, r2
 800a3b4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a3b6:	68fb      	ldr	r3, [r7, #12]
 800a3b8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800a3bc:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800a3d0:	68bb      	ldr	r3, [r7, #8]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d101      	bne.n	800a3da <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800a3d6:	2302      	movs	r3, #2
 800a3d8:	e0da      	b.n	800a590 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a3da:	68bb      	ldr	r3, [r7, #8]
 800a3dc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800a3de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3e0:	781b      	ldrb	r3, [r3, #0]
 800a3e2:	2b09      	cmp	r3, #9
 800a3e4:	d002      	beq.n	800a3ec <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a3e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3e8:	2209      	movs	r2, #9
 800a3ea:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800a3ec:	68bb      	ldr	r3, [r7, #8]
 800a3ee:	781a      	ldrb	r2, [r3, #0]
 800a3f0:	6a3b      	ldr	r3, [r7, #32]
 800a3f2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800a3f4:	68bb      	ldr	r3, [r7, #8]
 800a3f6:	785a      	ldrb	r2, [r3, #1]
 800a3f8:	6a3b      	ldr	r3, [r7, #32]
 800a3fa:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	3302      	adds	r3, #2
 800a400:	781b      	ldrb	r3, [r3, #0]
 800a402:	461a      	mov	r2, r3
 800a404:	68bb      	ldr	r3, [r7, #8]
 800a406:	3303      	adds	r3, #3
 800a408:	781b      	ldrb	r3, [r3, #0]
 800a40a:	021b      	lsls	r3, r3, #8
 800a40c:	b29b      	uxth	r3, r3
 800a40e:	4313      	orrs	r3, r2
 800a410:	b29b      	uxth	r3, r3
 800a412:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a416:	bf28      	it	cs
 800a418:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800a41c:	b29a      	uxth	r2, r3
 800a41e:	6a3b      	ldr	r3, [r7, #32]
 800a420:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	791a      	ldrb	r2, [r3, #4]
 800a426:	6a3b      	ldr	r3, [r7, #32]
 800a428:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800a42a:	68bb      	ldr	r3, [r7, #8]
 800a42c:	795a      	ldrb	r2, [r3, #5]
 800a42e:	6a3b      	ldr	r3, [r7, #32]
 800a430:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800a432:	68bb      	ldr	r3, [r7, #8]
 800a434:	799a      	ldrb	r2, [r3, #6]
 800a436:	6a3b      	ldr	r3, [r7, #32]
 800a438:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800a43a:	68bb      	ldr	r3, [r7, #8]
 800a43c:	79da      	ldrb	r2, [r3, #7]
 800a43e:	6a3b      	ldr	r3, [r7, #32]
 800a440:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800a442:	68bb      	ldr	r3, [r7, #8]
 800a444:	7a1a      	ldrb	r2, [r3, #8]
 800a446:	6a3b      	ldr	r3, [r7, #32]
 800a448:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a44a:	88fb      	ldrh	r3, [r7, #6]
 800a44c:	2b09      	cmp	r3, #9
 800a44e:	f240 809d 	bls.w	800a58c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800a452:	2309      	movs	r3, #9
 800a454:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a456:	2300      	movs	r3, #0
 800a458:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a45a:	e081      	b.n	800a560 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a45c:	f107 0316 	add.w	r3, r7, #22
 800a460:	4619      	mov	r1, r3
 800a462:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a464:	f000 f9e7 	bl	800a836 <USBH_GetNextDesc>
 800a468:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a46a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a46c:	785b      	ldrb	r3, [r3, #1]
 800a46e:	2b04      	cmp	r3, #4
 800a470:	d176      	bne.n	800a560 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a474:	781b      	ldrb	r3, [r3, #0]
 800a476:	2b09      	cmp	r3, #9
 800a478:	d002      	beq.n	800a480 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a47c:	2209      	movs	r2, #9
 800a47e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a480:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a484:	221a      	movs	r2, #26
 800a486:	fb02 f303 	mul.w	r3, r2, r3
 800a48a:	3308      	adds	r3, #8
 800a48c:	6a3a      	ldr	r2, [r7, #32]
 800a48e:	4413      	add	r3, r2
 800a490:	3302      	adds	r3, #2
 800a492:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a494:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a496:	69f8      	ldr	r0, [r7, #28]
 800a498:	f000 f87e 	bl	800a598 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a49c:	2300      	movs	r3, #0
 800a49e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a4a2:	2300      	movs	r3, #0
 800a4a4:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a4a6:	e043      	b.n	800a530 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a4a8:	f107 0316 	add.w	r3, r7, #22
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a4b0:	f000 f9c1 	bl	800a836 <USBH_GetNextDesc>
 800a4b4:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a4b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4b8:	785b      	ldrb	r3, [r3, #1]
 800a4ba:	2b05      	cmp	r3, #5
 800a4bc:	d138      	bne.n	800a530 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800a4be:	69fb      	ldr	r3, [r7, #28]
 800a4c0:	795b      	ldrb	r3, [r3, #5]
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d113      	bne.n	800a4ee <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a4c6:	69fb      	ldr	r3, [r7, #28]
 800a4c8:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800a4ca:	2b02      	cmp	r3, #2
 800a4cc:	d003      	beq.n	800a4d6 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800a4ce:	69fb      	ldr	r3, [r7, #28]
 800a4d0:	799b      	ldrb	r3, [r3, #6]
 800a4d2:	2b03      	cmp	r3, #3
 800a4d4:	d10b      	bne.n	800a4ee <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a4d6:	69fb      	ldr	r3, [r7, #28]
 800a4d8:	79db      	ldrb	r3, [r3, #7]
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d10b      	bne.n	800a4f6 <USBH_ParseCfgDesc+0x14e>
 800a4de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4e0:	781b      	ldrb	r3, [r3, #0]
 800a4e2:	2b09      	cmp	r3, #9
 800a4e4:	d007      	beq.n	800a4f6 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800a4e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4e8:	2209      	movs	r2, #9
 800a4ea:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a4ec:	e003      	b.n	800a4f6 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a4ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a4f0:	2207      	movs	r2, #7
 800a4f2:	701a      	strb	r2, [r3, #0]
 800a4f4:	e000      	b.n	800a4f8 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a4f6:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a4f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a4fc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a500:	3201      	adds	r2, #1
 800a502:	00d2      	lsls	r2, r2, #3
 800a504:	211a      	movs	r1, #26
 800a506:	fb01 f303 	mul.w	r3, r1, r3
 800a50a:	4413      	add	r3, r2
 800a50c:	3308      	adds	r3, #8
 800a50e:	6a3a      	ldr	r2, [r7, #32]
 800a510:	4413      	add	r3, r2
 800a512:	3304      	adds	r3, #4
 800a514:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a516:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a518:	69b9      	ldr	r1, [r7, #24]
 800a51a:	68f8      	ldr	r0, [r7, #12]
 800a51c:	f000 f870 	bl	800a600 <USBH_ParseEPDesc>
 800a520:	4603      	mov	r3, r0
 800a522:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800a526:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800a52a:	3301      	adds	r3, #1
 800a52c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a530:	69fb      	ldr	r3, [r7, #28]
 800a532:	791b      	ldrb	r3, [r3, #4]
 800a534:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a538:	429a      	cmp	r2, r3
 800a53a:	d204      	bcs.n	800a546 <USBH_ParseCfgDesc+0x19e>
 800a53c:	6a3b      	ldr	r3, [r7, #32]
 800a53e:	885a      	ldrh	r2, [r3, #2]
 800a540:	8afb      	ldrh	r3, [r7, #22]
 800a542:	429a      	cmp	r2, r3
 800a544:	d8b0      	bhi.n	800a4a8 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a546:	69fb      	ldr	r3, [r7, #28]
 800a548:	791b      	ldrb	r3, [r3, #4]
 800a54a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800a54e:	429a      	cmp	r2, r3
 800a550:	d201      	bcs.n	800a556 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800a552:	2303      	movs	r3, #3
 800a554:	e01c      	b.n	800a590 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800a556:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a55a:	3301      	adds	r3, #1
 800a55c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a560:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a564:	2b01      	cmp	r3, #1
 800a566:	d805      	bhi.n	800a574 <USBH_ParseCfgDesc+0x1cc>
 800a568:	6a3b      	ldr	r3, [r7, #32]
 800a56a:	885a      	ldrh	r2, [r3, #2]
 800a56c:	8afb      	ldrh	r3, [r7, #22]
 800a56e:	429a      	cmp	r2, r3
 800a570:	f63f af74 	bhi.w	800a45c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a574:	6a3b      	ldr	r3, [r7, #32]
 800a576:	791b      	ldrb	r3, [r3, #4]
 800a578:	2b02      	cmp	r3, #2
 800a57a:	bf28      	it	cs
 800a57c:	2302      	movcs	r3, #2
 800a57e:	b2db      	uxtb	r3, r3
 800a580:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800a584:	429a      	cmp	r2, r3
 800a586:	d201      	bcs.n	800a58c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800a588:	2303      	movs	r3, #3
 800a58a:	e001      	b.n	800a590 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800a58c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a590:	4618      	mov	r0, r3
 800a592:	3730      	adds	r7, #48	@ 0x30
 800a594:	46bd      	mov	sp, r7
 800a596:	bd80      	pop	{r7, pc}

0800a598 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800a598:	b480      	push	{r7}
 800a59a:	b083      	sub	sp, #12
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	781a      	ldrb	r2, [r3, #0]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	785a      	ldrb	r2, [r3, #1]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800a5b2:	683b      	ldr	r3, [r7, #0]
 800a5b4:	789a      	ldrb	r2, [r3, #2]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	78da      	ldrb	r2, [r3, #3]
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800a5c2:	683b      	ldr	r3, [r7, #0]
 800a5c4:	3304      	adds	r3, #4
 800a5c6:	781b      	ldrb	r3, [r3, #0]
 800a5c8:	2b02      	cmp	r3, #2
 800a5ca:	bf28      	it	cs
 800a5cc:	2302      	movcs	r3, #2
 800a5ce:	b2da      	uxtb	r2, r3
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	795a      	ldrb	r2, [r3, #5]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800a5dc:	683b      	ldr	r3, [r7, #0]
 800a5de:	799a      	ldrb	r2, [r3, #6]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	79da      	ldrb	r2, [r3, #7]
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800a5ec:	683b      	ldr	r3, [r7, #0]
 800a5ee:	7a1a      	ldrb	r2, [r3, #8]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	721a      	strb	r2, [r3, #8]
}
 800a5f4:	bf00      	nop
 800a5f6:	370c      	adds	r7, #12
 800a5f8:	46bd      	mov	sp, r7
 800a5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5fe:	4770      	bx	lr

0800a600 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800a600:	b480      	push	{r7}
 800a602:	b087      	sub	sp, #28
 800a604:	af00      	add	r7, sp, #0
 800a606:	60f8      	str	r0, [r7, #12]
 800a608:	60b9      	str	r1, [r7, #8]
 800a60a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a60c:	2300      	movs	r3, #0
 800a60e:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	781a      	ldrb	r2, [r3, #0]
 800a614:	68bb      	ldr	r3, [r7, #8]
 800a616:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	785a      	ldrb	r2, [r3, #1]
 800a61c:	68bb      	ldr	r3, [r7, #8]
 800a61e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	789a      	ldrb	r2, [r3, #2]
 800a624:	68bb      	ldr	r3, [r7, #8]
 800a626:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	78da      	ldrb	r2, [r3, #3]
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	3304      	adds	r3, #4
 800a634:	781b      	ldrb	r3, [r3, #0]
 800a636:	461a      	mov	r2, r3
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	3305      	adds	r3, #5
 800a63c:	781b      	ldrb	r3, [r3, #0]
 800a63e:	021b      	lsls	r3, r3, #8
 800a640:	b29b      	uxth	r3, r3
 800a642:	4313      	orrs	r3, r2
 800a644:	b29a      	uxth	r2, r3
 800a646:	68bb      	ldr	r3, [r7, #8]
 800a648:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	799a      	ldrb	r2, [r3, #6]
 800a64e:	68bb      	ldr	r3, [r7, #8]
 800a650:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a652:	68bb      	ldr	r3, [r7, #8]
 800a654:	889b      	ldrh	r3, [r3, #4]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d009      	beq.n	800a66e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a65a:	68bb      	ldr	r3, [r7, #8]
 800a65c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800a65e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a662:	d804      	bhi.n	800a66e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800a664:	68bb      	ldr	r3, [r7, #8]
 800a666:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800a668:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a66c:	d901      	bls.n	800a672 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800a66e:	2303      	movs	r3, #3
 800a670:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a678:	2b00      	cmp	r3, #0
 800a67a:	d136      	bne.n	800a6ea <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	78db      	ldrb	r3, [r3, #3]
 800a680:	f003 0303 	and.w	r3, r3, #3
 800a684:	2b02      	cmp	r3, #2
 800a686:	d108      	bne.n	800a69a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	889b      	ldrh	r3, [r3, #4]
 800a68c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a690:	f240 8097 	bls.w	800a7c2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a694:	2303      	movs	r3, #3
 800a696:	75fb      	strb	r3, [r7, #23]
 800a698:	e093      	b.n	800a7c2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a69a:	68bb      	ldr	r3, [r7, #8]
 800a69c:	78db      	ldrb	r3, [r3, #3]
 800a69e:	f003 0303 	and.w	r3, r3, #3
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d107      	bne.n	800a6b6 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	889b      	ldrh	r3, [r3, #4]
 800a6aa:	2b40      	cmp	r3, #64	@ 0x40
 800a6ac:	f240 8089 	bls.w	800a7c2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a6b0:	2303      	movs	r3, #3
 800a6b2:	75fb      	strb	r3, [r7, #23]
 800a6b4:	e085      	b.n	800a7c2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a6b6:	68bb      	ldr	r3, [r7, #8]
 800a6b8:	78db      	ldrb	r3, [r3, #3]
 800a6ba:	f003 0303 	and.w	r3, r3, #3
 800a6be:	2b01      	cmp	r3, #1
 800a6c0:	d005      	beq.n	800a6ce <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	78db      	ldrb	r3, [r3, #3]
 800a6c6:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a6ca:	2b03      	cmp	r3, #3
 800a6cc:	d10a      	bne.n	800a6e4 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	799b      	ldrb	r3, [r3, #6]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d003      	beq.n	800a6de <USBH_ParseEPDesc+0xde>
 800a6d6:	68bb      	ldr	r3, [r7, #8]
 800a6d8:	799b      	ldrb	r3, [r3, #6]
 800a6da:	2b10      	cmp	r3, #16
 800a6dc:	d970      	bls.n	800a7c0 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800a6de:	2303      	movs	r3, #3
 800a6e0:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a6e2:	e06d      	b.n	800a7c0 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a6e4:	2303      	movs	r3, #3
 800a6e6:	75fb      	strb	r3, [r7, #23]
 800a6e8:	e06b      	b.n	800a7c2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a6f0:	2b01      	cmp	r3, #1
 800a6f2:	d13c      	bne.n	800a76e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	78db      	ldrb	r3, [r3, #3]
 800a6f8:	f003 0303 	and.w	r3, r3, #3
 800a6fc:	2b02      	cmp	r3, #2
 800a6fe:	d005      	beq.n	800a70c <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800a700:	68bb      	ldr	r3, [r7, #8]
 800a702:	78db      	ldrb	r3, [r3, #3]
 800a704:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d106      	bne.n	800a71a <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	889b      	ldrh	r3, [r3, #4]
 800a710:	2b40      	cmp	r3, #64	@ 0x40
 800a712:	d956      	bls.n	800a7c2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a714:	2303      	movs	r3, #3
 800a716:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800a718:	e053      	b.n	800a7c2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a71a:	68bb      	ldr	r3, [r7, #8]
 800a71c:	78db      	ldrb	r3, [r3, #3]
 800a71e:	f003 0303 	and.w	r3, r3, #3
 800a722:	2b01      	cmp	r3, #1
 800a724:	d10e      	bne.n	800a744 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800a726:	68bb      	ldr	r3, [r7, #8]
 800a728:	799b      	ldrb	r3, [r3, #6]
 800a72a:	2b00      	cmp	r3, #0
 800a72c:	d007      	beq.n	800a73e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800a72e:	68bb      	ldr	r3, [r7, #8]
 800a730:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800a732:	2b10      	cmp	r3, #16
 800a734:	d803      	bhi.n	800a73e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800a736:	68bb      	ldr	r3, [r7, #8]
 800a738:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800a73a:	2b40      	cmp	r3, #64	@ 0x40
 800a73c:	d941      	bls.n	800a7c2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a73e:	2303      	movs	r3, #3
 800a740:	75fb      	strb	r3, [r7, #23]
 800a742:	e03e      	b.n	800a7c2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a744:	68bb      	ldr	r3, [r7, #8]
 800a746:	78db      	ldrb	r3, [r3, #3]
 800a748:	f003 0303 	and.w	r3, r3, #3
 800a74c:	2b03      	cmp	r3, #3
 800a74e:	d10b      	bne.n	800a768 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800a750:	68bb      	ldr	r3, [r7, #8]
 800a752:	799b      	ldrb	r3, [r3, #6]
 800a754:	2b00      	cmp	r3, #0
 800a756:	d004      	beq.n	800a762 <USBH_ParseEPDesc+0x162>
 800a758:	68bb      	ldr	r3, [r7, #8]
 800a75a:	889b      	ldrh	r3, [r3, #4]
 800a75c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800a760:	d32f      	bcc.n	800a7c2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a762:	2303      	movs	r3, #3
 800a764:	75fb      	strb	r3, [r7, #23]
 800a766:	e02c      	b.n	800a7c2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a768:	2303      	movs	r3, #3
 800a76a:	75fb      	strb	r3, [r7, #23]
 800a76c:	e029      	b.n	800a7c2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800a76e:	68fb      	ldr	r3, [r7, #12]
 800a770:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a774:	2b02      	cmp	r3, #2
 800a776:	d120      	bne.n	800a7ba <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800a778:	68bb      	ldr	r3, [r7, #8]
 800a77a:	78db      	ldrb	r3, [r3, #3]
 800a77c:	f003 0303 	and.w	r3, r3, #3
 800a780:	2b00      	cmp	r3, #0
 800a782:	d106      	bne.n	800a792 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800a784:	68bb      	ldr	r3, [r7, #8]
 800a786:	889b      	ldrh	r3, [r3, #4]
 800a788:	2b08      	cmp	r3, #8
 800a78a:	d01a      	beq.n	800a7c2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a78c:	2303      	movs	r3, #3
 800a78e:	75fb      	strb	r3, [r7, #23]
 800a790:	e017      	b.n	800a7c2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a792:	68bb      	ldr	r3, [r7, #8]
 800a794:	78db      	ldrb	r3, [r3, #3]
 800a796:	f003 0303 	and.w	r3, r3, #3
 800a79a:	2b03      	cmp	r3, #3
 800a79c:	d10a      	bne.n	800a7b4 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	799b      	ldrb	r3, [r3, #6]
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d003      	beq.n	800a7ae <USBH_ParseEPDesc+0x1ae>
 800a7a6:	68bb      	ldr	r3, [r7, #8]
 800a7a8:	889b      	ldrh	r3, [r3, #4]
 800a7aa:	2b08      	cmp	r3, #8
 800a7ac:	d909      	bls.n	800a7c2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800a7ae:	2303      	movs	r3, #3
 800a7b0:	75fb      	strb	r3, [r7, #23]
 800a7b2:	e006      	b.n	800a7c2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800a7b4:	2303      	movs	r3, #3
 800a7b6:	75fb      	strb	r3, [r7, #23]
 800a7b8:	e003      	b.n	800a7c2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800a7ba:	2303      	movs	r3, #3
 800a7bc:	75fb      	strb	r3, [r7, #23]
 800a7be:	e000      	b.n	800a7c2 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a7c0:	bf00      	nop
  }

  return status;
 800a7c2:	7dfb      	ldrb	r3, [r7, #23]
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	371c      	adds	r7, #28
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr

0800a7d0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	b087      	sub	sp, #28
 800a7d4:	af00      	add	r7, sp, #0
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	60b9      	str	r1, [r7, #8]
 800a7da:	4613      	mov	r3, r2
 800a7dc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	3301      	adds	r3, #1
 800a7e2:	781b      	ldrb	r3, [r3, #0]
 800a7e4:	2b03      	cmp	r3, #3
 800a7e6:	d120      	bne.n	800a82a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	781b      	ldrb	r3, [r3, #0]
 800a7ec:	1e9a      	subs	r2, r3, #2
 800a7ee:	88fb      	ldrh	r3, [r7, #6]
 800a7f0:	4293      	cmp	r3, r2
 800a7f2:	bf28      	it	cs
 800a7f4:	4613      	movcs	r3, r2
 800a7f6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	3302      	adds	r3, #2
 800a7fc:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a7fe:	2300      	movs	r3, #0
 800a800:	82fb      	strh	r3, [r7, #22]
 800a802:	e00b      	b.n	800a81c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a804:	8afb      	ldrh	r3, [r7, #22]
 800a806:	68fa      	ldr	r2, [r7, #12]
 800a808:	4413      	add	r3, r2
 800a80a:	781a      	ldrb	r2, [r3, #0]
 800a80c:	68bb      	ldr	r3, [r7, #8]
 800a80e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a810:	68bb      	ldr	r3, [r7, #8]
 800a812:	3301      	adds	r3, #1
 800a814:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a816:	8afb      	ldrh	r3, [r7, #22]
 800a818:	3302      	adds	r3, #2
 800a81a:	82fb      	strh	r3, [r7, #22]
 800a81c:	8afa      	ldrh	r2, [r7, #22]
 800a81e:	8abb      	ldrh	r3, [r7, #20]
 800a820:	429a      	cmp	r2, r3
 800a822:	d3ef      	bcc.n	800a804 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a824:	68bb      	ldr	r3, [r7, #8]
 800a826:	2200      	movs	r2, #0
 800a828:	701a      	strb	r2, [r3, #0]
  }
}
 800a82a:	bf00      	nop
 800a82c:	371c      	adds	r7, #28
 800a82e:	46bd      	mov	sp, r7
 800a830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a834:	4770      	bx	lr

0800a836 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a836:	b480      	push	{r7}
 800a838:	b085      	sub	sp, #20
 800a83a:	af00      	add	r7, sp, #0
 800a83c:	6078      	str	r0, [r7, #4]
 800a83e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	881b      	ldrh	r3, [r3, #0]
 800a844:	687a      	ldr	r2, [r7, #4]
 800a846:	7812      	ldrb	r2, [r2, #0]
 800a848:	4413      	add	r3, r2
 800a84a:	b29a      	uxth	r2, r3
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	781b      	ldrb	r3, [r3, #0]
 800a854:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	4413      	add	r3, r2
 800a85a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a85c:	68fb      	ldr	r3, [r7, #12]
}
 800a85e:	4618      	mov	r0, r3
 800a860:	3714      	adds	r7, #20
 800a862:	46bd      	mov	sp, r7
 800a864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a868:	4770      	bx	lr

0800a86a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a86a:	b580      	push	{r7, lr}
 800a86c:	b086      	sub	sp, #24
 800a86e:	af00      	add	r7, sp, #0
 800a870:	60f8      	str	r0, [r7, #12]
 800a872:	60b9      	str	r1, [r7, #8]
 800a874:	4613      	mov	r3, r2
 800a876:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a878:	2301      	movs	r3, #1
 800a87a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	789b      	ldrb	r3, [r3, #2]
 800a880:	2b01      	cmp	r3, #1
 800a882:	d002      	beq.n	800a88a <USBH_CtlReq+0x20>
 800a884:	2b02      	cmp	r3, #2
 800a886:	d00f      	beq.n	800a8a8 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a888:	e027      	b.n	800a8da <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	68ba      	ldr	r2, [r7, #8]
 800a88e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a890:	68fb      	ldr	r3, [r7, #12]
 800a892:	88fa      	ldrh	r2, [r7, #6]
 800a894:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	2201      	movs	r2, #1
 800a89a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2202      	movs	r2, #2
 800a8a0:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a8a2:	2301      	movs	r3, #1
 800a8a4:	75fb      	strb	r3, [r7, #23]
      break;
 800a8a6:	e018      	b.n	800a8da <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a8a8:	68f8      	ldr	r0, [r7, #12]
 800a8aa:	f000 f81b 	bl	800a8e4 <USBH_HandleControl>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a8b2:	7dfb      	ldrb	r3, [r7, #23]
 800a8b4:	2b00      	cmp	r3, #0
 800a8b6:	d002      	beq.n	800a8be <USBH_CtlReq+0x54>
 800a8b8:	7dfb      	ldrb	r3, [r7, #23]
 800a8ba:	2b03      	cmp	r3, #3
 800a8bc:	d106      	bne.n	800a8cc <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	2201      	movs	r2, #1
 800a8c2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2200      	movs	r2, #0
 800a8c8:	761a      	strb	r2, [r3, #24]
      break;
 800a8ca:	e005      	b.n	800a8d8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a8cc:	7dfb      	ldrb	r3, [r7, #23]
 800a8ce:	2b02      	cmp	r3, #2
 800a8d0:	d102      	bne.n	800a8d8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	709a      	strb	r2, [r3, #2]
      break;
 800a8d8:	bf00      	nop
  }
  return status;
 800a8da:	7dfb      	ldrb	r3, [r7, #23]
}
 800a8dc:	4618      	mov	r0, r3
 800a8de:	3718      	adds	r7, #24
 800a8e0:	46bd      	mov	sp, r7
 800a8e2:	bd80      	pop	{r7, pc}

0800a8e4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a8e4:	b580      	push	{r7, lr}
 800a8e6:	b086      	sub	sp, #24
 800a8e8:	af02      	add	r7, sp, #8
 800a8ea:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	7e1b      	ldrb	r3, [r3, #24]
 800a8f8:	3b01      	subs	r3, #1
 800a8fa:	2b0a      	cmp	r3, #10
 800a8fc:	f200 8156 	bhi.w	800abac <USBH_HandleControl+0x2c8>
 800a900:	a201      	add	r2, pc, #4	@ (adr r2, 800a908 <USBH_HandleControl+0x24>)
 800a902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a906:	bf00      	nop
 800a908:	0800a935 	.word	0x0800a935
 800a90c:	0800a94f 	.word	0x0800a94f
 800a910:	0800a9b9 	.word	0x0800a9b9
 800a914:	0800a9df 	.word	0x0800a9df
 800a918:	0800aa17 	.word	0x0800aa17
 800a91c:	0800aa41 	.word	0x0800aa41
 800a920:	0800aa93 	.word	0x0800aa93
 800a924:	0800aab5 	.word	0x0800aab5
 800a928:	0800aaf1 	.word	0x0800aaf1
 800a92c:	0800ab17 	.word	0x0800ab17
 800a930:	0800ab55 	.word	0x0800ab55
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f103 0110 	add.w	r1, r3, #16
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	795b      	ldrb	r3, [r3, #5]
 800a93e:	461a      	mov	r2, r3
 800a940:	6878      	ldr	r0, [r7, #4]
 800a942:	f000 f943 	bl	800abcc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	2202      	movs	r2, #2
 800a94a:	761a      	strb	r2, [r3, #24]
      break;
 800a94c:	e139      	b.n	800abc2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	795b      	ldrb	r3, [r3, #5]
 800a952:	4619      	mov	r1, r3
 800a954:	6878      	ldr	r0, [r7, #4]
 800a956:	f000 fccb 	bl	800b2f0 <USBH_LL_GetURBState>
 800a95a:	4603      	mov	r3, r0
 800a95c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a95e:	7bbb      	ldrb	r3, [r7, #14]
 800a960:	2b01      	cmp	r3, #1
 800a962:	d11e      	bne.n	800a9a2 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	7c1b      	ldrb	r3, [r3, #16]
 800a968:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a96c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	8adb      	ldrh	r3, [r3, #22]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d00a      	beq.n	800a98c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a976:	7b7b      	ldrb	r3, [r7, #13]
 800a978:	2b80      	cmp	r3, #128	@ 0x80
 800a97a:	d103      	bne.n	800a984 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2203      	movs	r2, #3
 800a980:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a982:	e115      	b.n	800abb0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2205      	movs	r2, #5
 800a988:	761a      	strb	r2, [r3, #24]
      break;
 800a98a:	e111      	b.n	800abb0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a98c:	7b7b      	ldrb	r3, [r7, #13]
 800a98e:	2b80      	cmp	r3, #128	@ 0x80
 800a990:	d103      	bne.n	800a99a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2209      	movs	r2, #9
 800a996:	761a      	strb	r2, [r3, #24]
      break;
 800a998:	e10a      	b.n	800abb0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	2207      	movs	r2, #7
 800a99e:	761a      	strb	r2, [r3, #24]
      break;
 800a9a0:	e106      	b.n	800abb0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a9a2:	7bbb      	ldrb	r3, [r7, #14]
 800a9a4:	2b04      	cmp	r3, #4
 800a9a6:	d003      	beq.n	800a9b0 <USBH_HandleControl+0xcc>
 800a9a8:	7bbb      	ldrb	r3, [r7, #14]
 800a9aa:	2b02      	cmp	r3, #2
 800a9ac:	f040 8100 	bne.w	800abb0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	220b      	movs	r2, #11
 800a9b4:	761a      	strb	r2, [r3, #24]
      break;
 800a9b6:	e0fb      	b.n	800abb0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a9be:	b29a      	uxth	r2, r3
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6899      	ldr	r1, [r3, #8]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	899a      	ldrh	r2, [r3, #12]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	791b      	ldrb	r3, [r3, #4]
 800a9d0:	6878      	ldr	r0, [r7, #4]
 800a9d2:	f000 f93a 	bl	800ac4a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2204      	movs	r2, #4
 800a9da:	761a      	strb	r2, [r3, #24]
      break;
 800a9dc:	e0f1      	b.n	800abc2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	791b      	ldrb	r3, [r3, #4]
 800a9e2:	4619      	mov	r1, r3
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 fc83 	bl	800b2f0 <USBH_LL_GetURBState>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a9ee:	7bbb      	ldrb	r3, [r7, #14]
 800a9f0:	2b01      	cmp	r3, #1
 800a9f2:	d102      	bne.n	800a9fa <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2209      	movs	r2, #9
 800a9f8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a9fa:	7bbb      	ldrb	r3, [r7, #14]
 800a9fc:	2b05      	cmp	r3, #5
 800a9fe:	d102      	bne.n	800aa06 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800aa00:	2303      	movs	r3, #3
 800aa02:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800aa04:	e0d6      	b.n	800abb4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800aa06:	7bbb      	ldrb	r3, [r7, #14]
 800aa08:	2b04      	cmp	r3, #4
 800aa0a:	f040 80d3 	bne.w	800abb4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	220b      	movs	r2, #11
 800aa12:	761a      	strb	r2, [r3, #24]
      break;
 800aa14:	e0ce      	b.n	800abb4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800aa16:	687b      	ldr	r3, [r7, #4]
 800aa18:	6899      	ldr	r1, [r3, #8]
 800aa1a:	687b      	ldr	r3, [r7, #4]
 800aa1c:	899a      	ldrh	r2, [r3, #12]
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	795b      	ldrb	r3, [r3, #5]
 800aa22:	2001      	movs	r0, #1
 800aa24:	9000      	str	r0, [sp, #0]
 800aa26:	6878      	ldr	r0, [r7, #4]
 800aa28:	f000 f8ea 	bl	800ac00 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800aa2c:	687b      	ldr	r3, [r7, #4]
 800aa2e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800aa32:	b29a      	uxth	r2, r3
 800aa34:	687b      	ldr	r3, [r7, #4]
 800aa36:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	2206      	movs	r2, #6
 800aa3c:	761a      	strb	r2, [r3, #24]
      break;
 800aa3e:	e0c0      	b.n	800abc2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	795b      	ldrb	r3, [r3, #5]
 800aa44:	4619      	mov	r1, r3
 800aa46:	6878      	ldr	r0, [r7, #4]
 800aa48:	f000 fc52 	bl	800b2f0 <USBH_LL_GetURBState>
 800aa4c:	4603      	mov	r3, r0
 800aa4e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800aa50:	7bbb      	ldrb	r3, [r7, #14]
 800aa52:	2b01      	cmp	r3, #1
 800aa54:	d103      	bne.n	800aa5e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2207      	movs	r2, #7
 800aa5a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800aa5c:	e0ac      	b.n	800abb8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800aa5e:	7bbb      	ldrb	r3, [r7, #14]
 800aa60:	2b05      	cmp	r3, #5
 800aa62:	d105      	bne.n	800aa70 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	220c      	movs	r2, #12
 800aa68:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800aa6a:	2303      	movs	r3, #3
 800aa6c:	73fb      	strb	r3, [r7, #15]
      break;
 800aa6e:	e0a3      	b.n	800abb8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800aa70:	7bbb      	ldrb	r3, [r7, #14]
 800aa72:	2b02      	cmp	r3, #2
 800aa74:	d103      	bne.n	800aa7e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	2205      	movs	r2, #5
 800aa7a:	761a      	strb	r2, [r3, #24]
      break;
 800aa7c:	e09c      	b.n	800abb8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800aa7e:	7bbb      	ldrb	r3, [r7, #14]
 800aa80:	2b04      	cmp	r3, #4
 800aa82:	f040 8099 	bne.w	800abb8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	220b      	movs	r2, #11
 800aa8a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800aa8c:	2302      	movs	r3, #2
 800aa8e:	73fb      	strb	r3, [r7, #15]
      break;
 800aa90:	e092      	b.n	800abb8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	791b      	ldrb	r3, [r3, #4]
 800aa96:	2200      	movs	r2, #0
 800aa98:	2100      	movs	r1, #0
 800aa9a:	6878      	ldr	r0, [r7, #4]
 800aa9c:	f000 f8d5 	bl	800ac4a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800aaa6:	b29a      	uxth	r2, r3
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	2208      	movs	r2, #8
 800aab0:	761a      	strb	r2, [r3, #24]

      break;
 800aab2:	e086      	b.n	800abc2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	791b      	ldrb	r3, [r3, #4]
 800aab8:	4619      	mov	r1, r3
 800aaba:	6878      	ldr	r0, [r7, #4]
 800aabc:	f000 fc18 	bl	800b2f0 <USBH_LL_GetURBState>
 800aac0:	4603      	mov	r3, r0
 800aac2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800aac4:	7bbb      	ldrb	r3, [r7, #14]
 800aac6:	2b01      	cmp	r3, #1
 800aac8:	d105      	bne.n	800aad6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	220d      	movs	r2, #13
 800aace:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800aad0:	2300      	movs	r3, #0
 800aad2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800aad4:	e072      	b.n	800abbc <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800aad6:	7bbb      	ldrb	r3, [r7, #14]
 800aad8:	2b04      	cmp	r3, #4
 800aada:	d103      	bne.n	800aae4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	220b      	movs	r2, #11
 800aae0:	761a      	strb	r2, [r3, #24]
      break;
 800aae2:	e06b      	b.n	800abbc <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800aae4:	7bbb      	ldrb	r3, [r7, #14]
 800aae6:	2b05      	cmp	r3, #5
 800aae8:	d168      	bne.n	800abbc <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800aaea:	2303      	movs	r3, #3
 800aaec:	73fb      	strb	r3, [r7, #15]
      break;
 800aaee:	e065      	b.n	800abbc <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	795b      	ldrb	r3, [r3, #5]
 800aaf4:	2201      	movs	r2, #1
 800aaf6:	9200      	str	r2, [sp, #0]
 800aaf8:	2200      	movs	r2, #0
 800aafa:	2100      	movs	r1, #0
 800aafc:	6878      	ldr	r0, [r7, #4]
 800aafe:	f000 f87f 	bl	800ac00 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ab08:	b29a      	uxth	r2, r3
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	220a      	movs	r2, #10
 800ab12:	761a      	strb	r2, [r3, #24]
      break;
 800ab14:	e055      	b.n	800abc2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	795b      	ldrb	r3, [r3, #5]
 800ab1a:	4619      	mov	r1, r3
 800ab1c:	6878      	ldr	r0, [r7, #4]
 800ab1e:	f000 fbe7 	bl	800b2f0 <USBH_LL_GetURBState>
 800ab22:	4603      	mov	r3, r0
 800ab24:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ab26:	7bbb      	ldrb	r3, [r7, #14]
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	d105      	bne.n	800ab38 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	220d      	movs	r2, #13
 800ab34:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ab36:	e043      	b.n	800abc0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ab38:	7bbb      	ldrb	r3, [r7, #14]
 800ab3a:	2b02      	cmp	r3, #2
 800ab3c:	d103      	bne.n	800ab46 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	2209      	movs	r2, #9
 800ab42:	761a      	strb	r2, [r3, #24]
      break;
 800ab44:	e03c      	b.n	800abc0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800ab46:	7bbb      	ldrb	r3, [r7, #14]
 800ab48:	2b04      	cmp	r3, #4
 800ab4a:	d139      	bne.n	800abc0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	220b      	movs	r2, #11
 800ab50:	761a      	strb	r2, [r3, #24]
      break;
 800ab52:	e035      	b.n	800abc0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	7e5b      	ldrb	r3, [r3, #25]
 800ab58:	3301      	adds	r3, #1
 800ab5a:	b2da      	uxtb	r2, r3
 800ab5c:	687b      	ldr	r3, [r7, #4]
 800ab5e:	765a      	strb	r2, [r3, #25]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	7e5b      	ldrb	r3, [r3, #25]
 800ab64:	2b02      	cmp	r3, #2
 800ab66:	d806      	bhi.n	800ab76 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	2201      	movs	r2, #1
 800ab72:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800ab74:	e025      	b.n	800abc2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ab7c:	2106      	movs	r1, #6
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	2200      	movs	r2, #0
 800ab86:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	795b      	ldrb	r3, [r3, #5]
 800ab8c:	4619      	mov	r1, r3
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f000 f90c 	bl	800adac <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	791b      	ldrb	r3, [r3, #4]
 800ab98:	4619      	mov	r1, r3
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	f000 f906 	bl	800adac <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2200      	movs	r2, #0
 800aba4:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800aba6:	2302      	movs	r3, #2
 800aba8:	73fb      	strb	r3, [r7, #15]
      break;
 800abaa:	e00a      	b.n	800abc2 <USBH_HandleControl+0x2de>

    default:
      break;
 800abac:	bf00      	nop
 800abae:	e008      	b.n	800abc2 <USBH_HandleControl+0x2de>
      break;
 800abb0:	bf00      	nop
 800abb2:	e006      	b.n	800abc2 <USBH_HandleControl+0x2de>
      break;
 800abb4:	bf00      	nop
 800abb6:	e004      	b.n	800abc2 <USBH_HandleControl+0x2de>
      break;
 800abb8:	bf00      	nop
 800abba:	e002      	b.n	800abc2 <USBH_HandleControl+0x2de>
      break;
 800abbc:	bf00      	nop
 800abbe:	e000      	b.n	800abc2 <USBH_HandleControl+0x2de>
      break;
 800abc0:	bf00      	nop
  }

  return status;
 800abc2:	7bfb      	ldrb	r3, [r7, #15]
}
 800abc4:	4618      	mov	r0, r3
 800abc6:	3710      	adds	r7, #16
 800abc8:	46bd      	mov	sp, r7
 800abca:	bd80      	pop	{r7, pc}

0800abcc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b088      	sub	sp, #32
 800abd0:	af04      	add	r7, sp, #16
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	60b9      	str	r1, [r7, #8]
 800abd6:	4613      	mov	r3, r2
 800abd8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800abda:	79f9      	ldrb	r1, [r7, #7]
 800abdc:	2300      	movs	r3, #0
 800abde:	9303      	str	r3, [sp, #12]
 800abe0:	2308      	movs	r3, #8
 800abe2:	9302      	str	r3, [sp, #8]
 800abe4:	68bb      	ldr	r3, [r7, #8]
 800abe6:	9301      	str	r3, [sp, #4]
 800abe8:	2300      	movs	r3, #0
 800abea:	9300      	str	r3, [sp, #0]
 800abec:	2300      	movs	r3, #0
 800abee:	2200      	movs	r2, #0
 800abf0:	68f8      	ldr	r0, [r7, #12]
 800abf2:	f000 fb4c 	bl	800b28e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800abf6:	2300      	movs	r3, #0
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3710      	adds	r7, #16
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b088      	sub	sp, #32
 800ac04:	af04      	add	r7, sp, #16
 800ac06:	60f8      	str	r0, [r7, #12]
 800ac08:	60b9      	str	r1, [r7, #8]
 800ac0a:	4611      	mov	r1, r2
 800ac0c:	461a      	mov	r2, r3
 800ac0e:	460b      	mov	r3, r1
 800ac10:	80fb      	strh	r3, [r7, #6]
 800ac12:	4613      	mov	r3, r2
 800ac14:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ac16:	68fb      	ldr	r3, [r7, #12]
 800ac18:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d001      	beq.n	800ac24 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800ac20:	2300      	movs	r3, #0
 800ac22:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ac24:	7979      	ldrb	r1, [r7, #5]
 800ac26:	7e3b      	ldrb	r3, [r7, #24]
 800ac28:	9303      	str	r3, [sp, #12]
 800ac2a:	88fb      	ldrh	r3, [r7, #6]
 800ac2c:	9302      	str	r3, [sp, #8]
 800ac2e:	68bb      	ldr	r3, [r7, #8]
 800ac30:	9301      	str	r3, [sp, #4]
 800ac32:	2301      	movs	r3, #1
 800ac34:	9300      	str	r3, [sp, #0]
 800ac36:	2300      	movs	r3, #0
 800ac38:	2200      	movs	r2, #0
 800ac3a:	68f8      	ldr	r0, [r7, #12]
 800ac3c:	f000 fb27 	bl	800b28e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800ac40:	2300      	movs	r3, #0
}
 800ac42:	4618      	mov	r0, r3
 800ac44:	3710      	adds	r7, #16
 800ac46:	46bd      	mov	sp, r7
 800ac48:	bd80      	pop	{r7, pc}

0800ac4a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800ac4a:	b580      	push	{r7, lr}
 800ac4c:	b088      	sub	sp, #32
 800ac4e:	af04      	add	r7, sp, #16
 800ac50:	60f8      	str	r0, [r7, #12]
 800ac52:	60b9      	str	r1, [r7, #8]
 800ac54:	4611      	mov	r1, r2
 800ac56:	461a      	mov	r2, r3
 800ac58:	460b      	mov	r3, r1
 800ac5a:	80fb      	strh	r3, [r7, #6]
 800ac5c:	4613      	mov	r3, r2
 800ac5e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ac60:	7979      	ldrb	r1, [r7, #5]
 800ac62:	2300      	movs	r3, #0
 800ac64:	9303      	str	r3, [sp, #12]
 800ac66:	88fb      	ldrh	r3, [r7, #6]
 800ac68:	9302      	str	r3, [sp, #8]
 800ac6a:	68bb      	ldr	r3, [r7, #8]
 800ac6c:	9301      	str	r3, [sp, #4]
 800ac6e:	2301      	movs	r3, #1
 800ac70:	9300      	str	r3, [sp, #0]
 800ac72:	2300      	movs	r3, #0
 800ac74:	2201      	movs	r2, #1
 800ac76:	68f8      	ldr	r0, [r7, #12]
 800ac78:	f000 fb09 	bl	800b28e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ac7c:	2300      	movs	r3, #0

}
 800ac7e:	4618      	mov	r0, r3
 800ac80:	3710      	adds	r7, #16
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}

0800ac86 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ac86:	b580      	push	{r7, lr}
 800ac88:	b088      	sub	sp, #32
 800ac8a:	af04      	add	r7, sp, #16
 800ac8c:	60f8      	str	r0, [r7, #12]
 800ac8e:	60b9      	str	r1, [r7, #8]
 800ac90:	4611      	mov	r1, r2
 800ac92:	461a      	mov	r2, r3
 800ac94:	460b      	mov	r3, r1
 800ac96:	80fb      	strh	r3, [r7, #6]
 800ac98:	4613      	mov	r3, r2
 800ac9a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ac9c:	68fb      	ldr	r3, [r7, #12]
 800ac9e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d001      	beq.n	800acaa <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800aca6:	2300      	movs	r3, #0
 800aca8:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800acaa:	7979      	ldrb	r1, [r7, #5]
 800acac:	7e3b      	ldrb	r3, [r7, #24]
 800acae:	9303      	str	r3, [sp, #12]
 800acb0:	88fb      	ldrh	r3, [r7, #6]
 800acb2:	9302      	str	r3, [sp, #8]
 800acb4:	68bb      	ldr	r3, [r7, #8]
 800acb6:	9301      	str	r3, [sp, #4]
 800acb8:	2301      	movs	r3, #1
 800acba:	9300      	str	r3, [sp, #0]
 800acbc:	2302      	movs	r3, #2
 800acbe:	2200      	movs	r2, #0
 800acc0:	68f8      	ldr	r0, [r7, #12]
 800acc2:	f000 fae4 	bl	800b28e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800acc6:	2300      	movs	r3, #0
}
 800acc8:	4618      	mov	r0, r3
 800acca:	3710      	adds	r7, #16
 800accc:	46bd      	mov	sp, r7
 800acce:	bd80      	pop	{r7, pc}

0800acd0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	b088      	sub	sp, #32
 800acd4:	af04      	add	r7, sp, #16
 800acd6:	60f8      	str	r0, [r7, #12]
 800acd8:	60b9      	str	r1, [r7, #8]
 800acda:	4611      	mov	r1, r2
 800acdc:	461a      	mov	r2, r3
 800acde:	460b      	mov	r3, r1
 800ace0:	80fb      	strh	r3, [r7, #6]
 800ace2:	4613      	mov	r3, r2
 800ace4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ace6:	7979      	ldrb	r1, [r7, #5]
 800ace8:	2300      	movs	r3, #0
 800acea:	9303      	str	r3, [sp, #12]
 800acec:	88fb      	ldrh	r3, [r7, #6]
 800acee:	9302      	str	r3, [sp, #8]
 800acf0:	68bb      	ldr	r3, [r7, #8]
 800acf2:	9301      	str	r3, [sp, #4]
 800acf4:	2301      	movs	r3, #1
 800acf6:	9300      	str	r3, [sp, #0]
 800acf8:	2302      	movs	r3, #2
 800acfa:	2201      	movs	r2, #1
 800acfc:	68f8      	ldr	r0, [r7, #12]
 800acfe:	f000 fac6 	bl	800b28e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ad02:	2300      	movs	r3, #0
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3710      	adds	r7, #16
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b086      	sub	sp, #24
 800ad10:	af04      	add	r7, sp, #16
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	4608      	mov	r0, r1
 800ad16:	4611      	mov	r1, r2
 800ad18:	461a      	mov	r2, r3
 800ad1a:	4603      	mov	r3, r0
 800ad1c:	70fb      	strb	r3, [r7, #3]
 800ad1e:	460b      	mov	r3, r1
 800ad20:	70bb      	strb	r3, [r7, #2]
 800ad22:	4613      	mov	r3, r2
 800ad24:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ad26:	7878      	ldrb	r0, [r7, #1]
 800ad28:	78ba      	ldrb	r2, [r7, #2]
 800ad2a:	78f9      	ldrb	r1, [r7, #3]
 800ad2c:	8b3b      	ldrh	r3, [r7, #24]
 800ad2e:	9302      	str	r3, [sp, #8]
 800ad30:	7d3b      	ldrb	r3, [r7, #20]
 800ad32:	9301      	str	r3, [sp, #4]
 800ad34:	7c3b      	ldrb	r3, [r7, #16]
 800ad36:	9300      	str	r3, [sp, #0]
 800ad38:	4603      	mov	r3, r0
 800ad3a:	6878      	ldr	r0, [r7, #4]
 800ad3c:	f000 fa59 	bl	800b1f2 <USBH_LL_OpenPipe>

  return USBH_OK;
 800ad40:	2300      	movs	r3, #0
}
 800ad42:	4618      	mov	r0, r3
 800ad44:	3708      	adds	r7, #8
 800ad46:	46bd      	mov	sp, r7
 800ad48:	bd80      	pop	{r7, pc}

0800ad4a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ad4a:	b580      	push	{r7, lr}
 800ad4c:	b082      	sub	sp, #8
 800ad4e:	af00      	add	r7, sp, #0
 800ad50:	6078      	str	r0, [r7, #4]
 800ad52:	460b      	mov	r3, r1
 800ad54:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800ad56:	78fb      	ldrb	r3, [r7, #3]
 800ad58:	4619      	mov	r1, r3
 800ad5a:	6878      	ldr	r0, [r7, #4]
 800ad5c:	f000 fa78 	bl	800b250 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ad60:	2300      	movs	r3, #0
}
 800ad62:	4618      	mov	r0, r3
 800ad64:	3708      	adds	r7, #8
 800ad66:	46bd      	mov	sp, r7
 800ad68:	bd80      	pop	{r7, pc}

0800ad6a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800ad6a:	b580      	push	{r7, lr}
 800ad6c:	b084      	sub	sp, #16
 800ad6e:	af00      	add	r7, sp, #0
 800ad70:	6078      	str	r0, [r7, #4]
 800ad72:	460b      	mov	r3, r1
 800ad74:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ad76:	6878      	ldr	r0, [r7, #4]
 800ad78:	f000 f836 	bl	800ade8 <USBH_GetFreePipe>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ad80:	89fb      	ldrh	r3, [r7, #14]
 800ad82:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ad86:	4293      	cmp	r3, r2
 800ad88:	d00a      	beq.n	800ada0 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ad8a:	78fa      	ldrb	r2, [r7, #3]
 800ad8c:	89fb      	ldrh	r3, [r7, #14]
 800ad8e:	f003 030f 	and.w	r3, r3, #15
 800ad92:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ad96:	6879      	ldr	r1, [r7, #4]
 800ad98:	33e0      	adds	r3, #224	@ 0xe0
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	440b      	add	r3, r1
 800ad9e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ada0:	89fb      	ldrh	r3, [r7, #14]
 800ada2:	b2db      	uxtb	r3, r3
}
 800ada4:	4618      	mov	r0, r3
 800ada6:	3710      	adds	r7, #16
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}

0800adac <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800adac:	b480      	push	{r7}
 800adae:	b083      	sub	sp, #12
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
 800adb4:	460b      	mov	r3, r1
 800adb6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800adb8:	78fb      	ldrb	r3, [r7, #3]
 800adba:	2b0f      	cmp	r3, #15
 800adbc:	d80d      	bhi.n	800adda <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800adbe:	78fb      	ldrb	r3, [r7, #3]
 800adc0:	687a      	ldr	r2, [r7, #4]
 800adc2:	33e0      	adds	r3, #224	@ 0xe0
 800adc4:	009b      	lsls	r3, r3, #2
 800adc6:	4413      	add	r3, r2
 800adc8:	685a      	ldr	r2, [r3, #4]
 800adca:	78fb      	ldrb	r3, [r7, #3]
 800adcc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800add0:	6879      	ldr	r1, [r7, #4]
 800add2:	33e0      	adds	r3, #224	@ 0xe0
 800add4:	009b      	lsls	r3, r3, #2
 800add6:	440b      	add	r3, r1
 800add8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800adda:	2300      	movs	r3, #0
}
 800addc:	4618      	mov	r0, r3
 800adde:	370c      	adds	r7, #12
 800ade0:	46bd      	mov	sp, r7
 800ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade6:	4770      	bx	lr

0800ade8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ade8:	b480      	push	{r7}
 800adea:	b085      	sub	sp, #20
 800adec:	af00      	add	r7, sp, #0
 800adee:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800adf0:	2300      	movs	r3, #0
 800adf2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800adf4:	2300      	movs	r3, #0
 800adf6:	73fb      	strb	r3, [r7, #15]
 800adf8:	e00f      	b.n	800ae1a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800adfa:	7bfb      	ldrb	r3, [r7, #15]
 800adfc:	687a      	ldr	r2, [r7, #4]
 800adfe:	33e0      	adds	r3, #224	@ 0xe0
 800ae00:	009b      	lsls	r3, r3, #2
 800ae02:	4413      	add	r3, r2
 800ae04:	685b      	ldr	r3, [r3, #4]
 800ae06:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d102      	bne.n	800ae14 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ae0e:	7bfb      	ldrb	r3, [r7, #15]
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	e007      	b.n	800ae24 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ae14:	7bfb      	ldrb	r3, [r7, #15]
 800ae16:	3301      	adds	r3, #1
 800ae18:	73fb      	strb	r3, [r7, #15]
 800ae1a:	7bfb      	ldrb	r3, [r7, #15]
 800ae1c:	2b0f      	cmp	r3, #15
 800ae1e:	d9ec      	bls.n	800adfa <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ae20:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800ae24:	4618      	mov	r0, r3
 800ae26:	3714      	adds	r7, #20
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostHS, USBH_UserProcess, HOST_HS) != USBH_OK)
 800ae34:	2200      	movs	r2, #0
 800ae36:	490e      	ldr	r1, [pc, #56]	@ (800ae70 <MX_USB_HOST_Init+0x40>)
 800ae38:	480e      	ldr	r0, [pc, #56]	@ (800ae74 <MX_USB_HOST_Init+0x44>)
 800ae3a:	f7fe fb15 	bl	8009468 <USBH_Init>
 800ae3e:	4603      	mov	r3, r0
 800ae40:	2b00      	cmp	r3, #0
 800ae42:	d001      	beq.n	800ae48 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ae44:	f7f6 f816 	bl	8000e74 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostHS, USBH_CDC_CLASS) != USBH_OK)
 800ae48:	490b      	ldr	r1, [pc, #44]	@ (800ae78 <MX_USB_HOST_Init+0x48>)
 800ae4a:	480a      	ldr	r0, [pc, #40]	@ (800ae74 <MX_USB_HOST_Init+0x44>)
 800ae4c:	f7fe fbb9 	bl	80095c2 <USBH_RegisterClass>
 800ae50:	4603      	mov	r3, r0
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d001      	beq.n	800ae5a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ae56:	f7f6 f80d 	bl	8000e74 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostHS) != USBH_OK)
 800ae5a:	4806      	ldr	r0, [pc, #24]	@ (800ae74 <MX_USB_HOST_Init+0x44>)
 800ae5c:	f7fe fc3d 	bl	80096da <USBH_Start>
 800ae60:	4603      	mov	r3, r0
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d001      	beq.n	800ae6a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800ae66:	f7f6 f805 	bl	8000e74 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800ae6a:	bf00      	nop
 800ae6c:	bd80      	pop	{r7, pc}
 800ae6e:	bf00      	nop
 800ae70:	0800ae91 	.word	0x0800ae91
 800ae74:	2000034c 	.word	0x2000034c
 800ae78:	2000000c 	.word	0x2000000c

0800ae7c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostHS);
 800ae80:	4802      	ldr	r0, [pc, #8]	@ (800ae8c <MX_USB_HOST_Process+0x10>)
 800ae82:	f7fe fc3b 	bl	80096fc <USBH_Process>
}
 800ae86:	bf00      	nop
 800ae88:	bd80      	pop	{r7, pc}
 800ae8a:	bf00      	nop
 800ae8c:	2000034c 	.word	0x2000034c

0800ae90 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ae90:	b480      	push	{r7}
 800ae92:	b083      	sub	sp, #12
 800ae94:	af00      	add	r7, sp, #0
 800ae96:	6078      	str	r0, [r7, #4]
 800ae98:	460b      	mov	r3, r1
 800ae9a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ae9c:	78fb      	ldrb	r3, [r7, #3]
 800ae9e:	3b01      	subs	r3, #1
 800aea0:	2b04      	cmp	r3, #4
 800aea2:	d819      	bhi.n	800aed8 <USBH_UserProcess+0x48>
 800aea4:	a201      	add	r2, pc, #4	@ (adr r2, 800aeac <USBH_UserProcess+0x1c>)
 800aea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeaa:	bf00      	nop
 800aeac:	0800aed9 	.word	0x0800aed9
 800aeb0:	0800aec9 	.word	0x0800aec9
 800aeb4:	0800aed9 	.word	0x0800aed9
 800aeb8:	0800aed1 	.word	0x0800aed1
 800aebc:	0800aec1 	.word	0x0800aec1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800aec0:	4b09      	ldr	r3, [pc, #36]	@ (800aee8 <USBH_UserProcess+0x58>)
 800aec2:	2203      	movs	r2, #3
 800aec4:	701a      	strb	r2, [r3, #0]
  break;
 800aec6:	e008      	b.n	800aeda <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800aec8:	4b07      	ldr	r3, [pc, #28]	@ (800aee8 <USBH_UserProcess+0x58>)
 800aeca:	2202      	movs	r2, #2
 800aecc:	701a      	strb	r2, [r3, #0]
  break;
 800aece:	e004      	b.n	800aeda <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800aed0:	4b05      	ldr	r3, [pc, #20]	@ (800aee8 <USBH_UserProcess+0x58>)
 800aed2:	2201      	movs	r2, #1
 800aed4:	701a      	strb	r2, [r3, #0]
  break;
 800aed6:	e000      	b.n	800aeda <USBH_UserProcess+0x4a>

  default:
  break;
 800aed8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800aeda:	bf00      	nop
 800aedc:	370c      	adds	r7, #12
 800aede:	46bd      	mov	sp, r7
 800aee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aee4:	4770      	bx	lr
 800aee6:	bf00      	nop
 800aee8:	20000724 	.word	0x20000724

0800aeec <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b08a      	sub	sp, #40	@ 0x28
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800aef4:	f107 0314 	add.w	r3, r7, #20
 800aef8:	2200      	movs	r2, #0
 800aefa:	601a      	str	r2, [r3, #0]
 800aefc:	605a      	str	r2, [r3, #4]
 800aefe:	609a      	str	r2, [r3, #8]
 800af00:	60da      	str	r2, [r3, #12]
 800af02:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_HS)
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	4a24      	ldr	r2, [pc, #144]	@ (800af9c <HAL_HCD_MspInit+0xb0>)
 800af0a:	4293      	cmp	r3, r2
 800af0c:	d141      	bne.n	800af92 <HAL_HCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800af0e:	2300      	movs	r3, #0
 800af10:	613b      	str	r3, [r7, #16]
 800af12:	4b23      	ldr	r3, [pc, #140]	@ (800afa0 <HAL_HCD_MspInit+0xb4>)
 800af14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af16:	4a22      	ldr	r2, [pc, #136]	@ (800afa0 <HAL_HCD_MspInit+0xb4>)
 800af18:	f043 0302 	orr.w	r3, r3, #2
 800af1c:	6313      	str	r3, [r2, #48]	@ 0x30
 800af1e:	4b20      	ldr	r3, [pc, #128]	@ (800afa0 <HAL_HCD_MspInit+0xb4>)
 800af20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af22:	f003 0302 	and.w	r3, r3, #2
 800af26:	613b      	str	r3, [r7, #16]
 800af28:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 800af2a:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 800af2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800af30:	2302      	movs	r3, #2
 800af32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af34:	2300      	movs	r3, #0
 800af36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800af38:	2300      	movs	r3, #0
 800af3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 800af3c:	230c      	movs	r3, #12
 800af3e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800af40:	f107 0314 	add.w	r3, r7, #20
 800af44:	4619      	mov	r1, r3
 800af46:	4817      	ldr	r0, [pc, #92]	@ (800afa4 <HAL_HCD_MspInit+0xb8>)
 800af48:	f7f6 ff8a 	bl	8001e60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_HS_Pin;
 800af4c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800af50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800af52:	2300      	movs	r3, #0
 800af54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800af56:	2300      	movs	r3, #0
 800af58:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 800af5a:	f107 0314 	add.w	r3, r7, #20
 800af5e:	4619      	mov	r1, r3
 800af60:	4810      	ldr	r0, [pc, #64]	@ (800afa4 <HAL_HCD_MspInit+0xb8>)
 800af62:	f7f6 ff7d 	bl	8001e60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 800af66:	2300      	movs	r3, #0
 800af68:	60fb      	str	r3, [r7, #12]
 800af6a:	4b0d      	ldr	r3, [pc, #52]	@ (800afa0 <HAL_HCD_MspInit+0xb4>)
 800af6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af6e:	4a0c      	ldr	r2, [pc, #48]	@ (800afa0 <HAL_HCD_MspInit+0xb4>)
 800af70:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800af74:	6313      	str	r3, [r2, #48]	@ 0x30
 800af76:	4b0a      	ldr	r3, [pc, #40]	@ (800afa0 <HAL_HCD_MspInit+0xb4>)
 800af78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800af7a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800af7e:	60fb      	str	r3, [r7, #12]
 800af80:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 800af82:	2200      	movs	r2, #0
 800af84:	2100      	movs	r1, #0
 800af86:	204d      	movs	r0, #77	@ 0x4d
 800af88:	f7f6 fd38 	bl	80019fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 800af8c:	204d      	movs	r0, #77	@ 0x4d
 800af8e:	f7f6 fd51 	bl	8001a34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 800af92:	bf00      	nop
 800af94:	3728      	adds	r7, #40	@ 0x28
 800af96:	46bd      	mov	sp, r7
 800af98:	bd80      	pop	{r7, pc}
 800af9a:	bf00      	nop
 800af9c:	40040000 	.word	0x40040000
 800afa0:	40023800 	.word	0x40023800
 800afa4:	40020400 	.word	0x40020400

0800afa8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b082      	sub	sp, #8
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800afb6:	4618      	mov	r0, r3
 800afb8:	f7fe ff77 	bl	8009eaa <USBH_LL_IncTimer>
}
 800afbc:	bf00      	nop
 800afbe:	3708      	adds	r7, #8
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b082      	sub	sp, #8
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7fe ffaf 	bl	8009f36 <USBH_LL_Connect>
}
 800afd8:	bf00      	nop
 800afda:	3708      	adds	r7, #8
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b082      	sub	sp, #8
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800afe8:	687b      	ldr	r3, [r7, #4]
 800afea:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800afee:	4618      	mov	r0, r3
 800aff0:	f7fe ffb8 	bl	8009f64 <USBH_LL_Disconnect>
}
 800aff4:	bf00      	nop
 800aff6:	3708      	adds	r7, #8
 800aff8:	46bd      	mov	sp, r7
 800affa:	bd80      	pop	{r7, pc}

0800affc <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800affc:	b480      	push	{r7}
 800affe:	b083      	sub	sp, #12
 800b000:	af00      	add	r7, sp, #0
 800b002:	6078      	str	r0, [r7, #4]
 800b004:	460b      	mov	r3, r1
 800b006:	70fb      	strb	r3, [r7, #3]
 800b008:	4613      	mov	r3, r2
 800b00a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800b00c:	bf00      	nop
 800b00e:	370c      	adds	r7, #12
 800b010:	46bd      	mov	sp, r7
 800b012:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b016:	4770      	bx	lr

0800b018 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b082      	sub	sp, #8
 800b01c:	af00      	add	r7, sp, #0
 800b01e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b026:	4618      	mov	r0, r3
 800b028:	f7fe ff69 	bl	8009efe <USBH_LL_PortEnabled>
}
 800b02c:	bf00      	nop
 800b02e:	3708      	adds	r7, #8
 800b030:	46bd      	mov	sp, r7
 800b032:	bd80      	pop	{r7, pc}

0800b034 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800b034:	b580      	push	{r7, lr}
 800b036:	b082      	sub	sp, #8
 800b038:	af00      	add	r7, sp, #0
 800b03a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800b042:	4618      	mov	r0, r3
 800b044:	f7fe ff69 	bl	8009f1a <USBH_LL_PortDisabled>
}
 800b048:	bf00      	nop
 800b04a:	3708      	adds	r7, #8
 800b04c:	46bd      	mov	sp, r7
 800b04e:	bd80      	pop	{r7, pc}

0800b050 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b082      	sub	sp, #8
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_HS) {
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b05e:	2b00      	cmp	r3, #0
 800b060:	d132      	bne.n	800b0c8 <USBH_LL_Init+0x78>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_HS.pData = phost;
 800b062:	4a1c      	ldr	r2, [pc, #112]	@ (800b0d4 <USBH_LL_Init+0x84>)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_HS;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	4a19      	ldr	r2, [pc, #100]	@ (800b0d4 <USBH_LL_Init+0x84>)
 800b06e:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_HS.Instance = USB_OTG_HS;
 800b072:	4b18      	ldr	r3, [pc, #96]	@ (800b0d4 <USBH_LL_Init+0x84>)
 800b074:	4a18      	ldr	r2, [pc, #96]	@ (800b0d8 <USBH_LL_Init+0x88>)
 800b076:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_HS.Init.Host_channels = 12;
 800b078:	4b16      	ldr	r3, [pc, #88]	@ (800b0d4 <USBH_LL_Init+0x84>)
 800b07a:	220c      	movs	r2, #12
 800b07c:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_HS.Init.speed = HCD_SPEED_FULL;
 800b07e:	4b15      	ldr	r3, [pc, #84]	@ (800b0d4 <USBH_LL_Init+0x84>)
 800b080:	2201      	movs	r2, #1
 800b082:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 800b084:	4b13      	ldr	r3, [pc, #76]	@ (800b0d4 <USBH_LL_Init+0x84>)
 800b086:	2200      	movs	r2, #0
 800b088:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 800b08a:	4b12      	ldr	r3, [pc, #72]	@ (800b0d4 <USBH_LL_Init+0x84>)
 800b08c:	2202      	movs	r2, #2
 800b08e:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 800b090:	4b10      	ldr	r3, [pc, #64]	@ (800b0d4 <USBH_LL_Init+0x84>)
 800b092:	2200      	movs	r2, #0
 800b094:	729a      	strb	r2, [r3, #10]
  hhcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 800b096:	4b0f      	ldr	r3, [pc, #60]	@ (800b0d4 <USBH_LL_Init+0x84>)
 800b098:	2200      	movs	r2, #0
 800b09a:	72da      	strb	r2, [r3, #11]
  hhcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 800b09c:	4b0d      	ldr	r3, [pc, #52]	@ (800b0d4 <USBH_LL_Init+0x84>)
 800b09e:	2200      	movs	r2, #0
 800b0a0:	739a      	strb	r2, [r3, #14]
  hhcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 800b0a2:	4b0c      	ldr	r3, [pc, #48]	@ (800b0d4 <USBH_LL_Init+0x84>)
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	741a      	strb	r2, [r3, #16]
  if (HAL_HCD_Init(&hhcd_USB_OTG_HS) != HAL_OK)
 800b0a8:	480a      	ldr	r0, [pc, #40]	@ (800b0d4 <USBH_LL_Init+0x84>)
 800b0aa:	f7f7 f89e 	bl	80021ea <HAL_HCD_Init>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d001      	beq.n	800b0b8 <USBH_LL_Init+0x68>
  {
    Error_Handler( );
 800b0b4:	f7f5 fede 	bl	8000e74 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_HS));
 800b0b8:	4806      	ldr	r0, [pc, #24]	@ (800b0d4 <USBH_LL_Init+0x84>)
 800b0ba:	f7f7 fcff 	bl	8002abc <HAL_HCD_GetCurrentFrame>
 800b0be:	4603      	mov	r3, r0
 800b0c0:	4619      	mov	r1, r3
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f7fe fee2 	bl	8009e8c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800b0c8:	2300      	movs	r3, #0
}
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	3708      	adds	r7, #8
 800b0ce:	46bd      	mov	sp, r7
 800b0d0:	bd80      	pop	{r7, pc}
 800b0d2:	bf00      	nop
 800b0d4:	20000728 	.word	0x20000728
 800b0d8:	40040000 	.word	0x40040000

0800b0dc <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800b0dc:	b580      	push	{r7, lr}
 800b0de:	b084      	sub	sp, #16
 800b0e0:	af00      	add	r7, sp, #0
 800b0e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b0e4:	2300      	movs	r3, #0
 800b0e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b0e8:	2300      	movs	r3, #0
 800b0ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f7f7 fc6a 	bl	80029cc <HAL_HCD_Start>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b0fc:	7bfb      	ldrb	r3, [r7, #15]
 800b0fe:	4618      	mov	r0, r3
 800b100:	f000 f95e 	bl	800b3c0 <USBH_Get_USB_Status>
 800b104:	4603      	mov	r3, r0
 800b106:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b108:	7bbb      	ldrb	r3, [r7, #14]
}
 800b10a:	4618      	mov	r0, r3
 800b10c:	3710      	adds	r7, #16
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}

0800b112 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800b112:	b580      	push	{r7, lr}
 800b114:	b084      	sub	sp, #16
 800b116:	af00      	add	r7, sp, #0
 800b118:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b11a:	2300      	movs	r3, #0
 800b11c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b11e:	2300      	movs	r3, #0
 800b120:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b128:	4618      	mov	r0, r3
 800b12a:	f7f7 fc72 	bl	8002a12 <HAL_HCD_Stop>
 800b12e:	4603      	mov	r3, r0
 800b130:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b132:	7bfb      	ldrb	r3, [r7, #15]
 800b134:	4618      	mov	r0, r3
 800b136:	f000 f943 	bl	800b3c0 <USBH_Get_USB_Status>
 800b13a:	4603      	mov	r3, r0
 800b13c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b13e:	7bbb      	ldrb	r3, [r7, #14]
}
 800b140:	4618      	mov	r0, r3
 800b142:	3710      	adds	r7, #16
 800b144:	46bd      	mov	sp, r7
 800b146:	bd80      	pop	{r7, pc}

0800b148 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800b148:	b580      	push	{r7, lr}
 800b14a:	b084      	sub	sp, #16
 800b14c:	af00      	add	r7, sp, #0
 800b14e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800b150:	2301      	movs	r3, #1
 800b152:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b15a:	4618      	mov	r0, r3
 800b15c:	f7f7 fcbc 	bl	8002ad8 <HAL_HCD_GetCurrentSpeed>
 800b160:	4603      	mov	r3, r0
 800b162:	2b02      	cmp	r3, #2
 800b164:	d00c      	beq.n	800b180 <USBH_LL_GetSpeed+0x38>
 800b166:	2b02      	cmp	r3, #2
 800b168:	d80d      	bhi.n	800b186 <USBH_LL_GetSpeed+0x3e>
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d002      	beq.n	800b174 <USBH_LL_GetSpeed+0x2c>
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d003      	beq.n	800b17a <USBH_LL_GetSpeed+0x32>
 800b172:	e008      	b.n	800b186 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800b174:	2300      	movs	r3, #0
 800b176:	73fb      	strb	r3, [r7, #15]
    break;
 800b178:	e008      	b.n	800b18c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800b17a:	2301      	movs	r3, #1
 800b17c:	73fb      	strb	r3, [r7, #15]
    break;
 800b17e:	e005      	b.n	800b18c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800b180:	2302      	movs	r3, #2
 800b182:	73fb      	strb	r3, [r7, #15]
    break;
 800b184:	e002      	b.n	800b18c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800b186:	2301      	movs	r3, #1
 800b188:	73fb      	strb	r3, [r7, #15]
    break;
 800b18a:	bf00      	nop
  }
  return  speed;
 800b18c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b18e:	4618      	mov	r0, r3
 800b190:	3710      	adds	r7, #16
 800b192:	46bd      	mov	sp, r7
 800b194:	bd80      	pop	{r7, pc}

0800b196 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800b196:	b580      	push	{r7, lr}
 800b198:	b084      	sub	sp, #16
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b1ac:	4618      	mov	r0, r3
 800b1ae:	f7f7 fc4d 	bl	8002a4c <HAL_HCD_ResetPort>
 800b1b2:	4603      	mov	r3, r0
 800b1b4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b1b6:	7bfb      	ldrb	r3, [r7, #15]
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f000 f901 	bl	800b3c0 <USBH_Get_USB_Status>
 800b1be:	4603      	mov	r3, r0
 800b1c0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b1c2:	7bbb      	ldrb	r3, [r7, #14]
}
 800b1c4:	4618      	mov	r0, r3
 800b1c6:	3710      	adds	r7, #16
 800b1c8:	46bd      	mov	sp, r7
 800b1ca:	bd80      	pop	{r7, pc}

0800b1cc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
 800b1d4:	460b      	mov	r3, r1
 800b1d6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b1de:	78fa      	ldrb	r2, [r7, #3]
 800b1e0:	4611      	mov	r1, r2
 800b1e2:	4618      	mov	r0, r3
 800b1e4:	f7f7 fc55 	bl	8002a92 <HAL_HCD_HC_GetXferCount>
 800b1e8:	4603      	mov	r3, r0
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3708      	adds	r7, #8
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}

0800b1f2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800b1f2:	b590      	push	{r4, r7, lr}
 800b1f4:	b089      	sub	sp, #36	@ 0x24
 800b1f6:	af04      	add	r7, sp, #16
 800b1f8:	6078      	str	r0, [r7, #4]
 800b1fa:	4608      	mov	r0, r1
 800b1fc:	4611      	mov	r1, r2
 800b1fe:	461a      	mov	r2, r3
 800b200:	4603      	mov	r3, r0
 800b202:	70fb      	strb	r3, [r7, #3]
 800b204:	460b      	mov	r3, r1
 800b206:	70bb      	strb	r3, [r7, #2]
 800b208:	4613      	mov	r3, r2
 800b20a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b20c:	2300      	movs	r3, #0
 800b20e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b210:	2300      	movs	r3, #0
 800b212:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b21a:	787c      	ldrb	r4, [r7, #1]
 800b21c:	78ba      	ldrb	r2, [r7, #2]
 800b21e:	78f9      	ldrb	r1, [r7, #3]
 800b220:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b222:	9302      	str	r3, [sp, #8]
 800b224:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800b228:	9301      	str	r3, [sp, #4]
 800b22a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b22e:	9300      	str	r3, [sp, #0]
 800b230:	4623      	mov	r3, r4
 800b232:	f7f7 f841 	bl	80022b8 <HAL_HCD_HC_Init>
 800b236:	4603      	mov	r3, r0
 800b238:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800b23a:	7bfb      	ldrb	r3, [r7, #15]
 800b23c:	4618      	mov	r0, r3
 800b23e:	f000 f8bf 	bl	800b3c0 <USBH_Get_USB_Status>
 800b242:	4603      	mov	r3, r0
 800b244:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b246:	7bbb      	ldrb	r3, [r7, #14]
}
 800b248:	4618      	mov	r0, r3
 800b24a:	3714      	adds	r7, #20
 800b24c:	46bd      	mov	sp, r7
 800b24e:	bd90      	pop	{r4, r7, pc}

0800b250 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	460b      	mov	r3, r1
 800b25a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b25c:	2300      	movs	r3, #0
 800b25e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b260:	2300      	movs	r3, #0
 800b262:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b26a:	78fa      	ldrb	r2, [r7, #3]
 800b26c:	4611      	mov	r1, r2
 800b26e:	4618      	mov	r0, r3
 800b270:	f7f7 f8da 	bl	8002428 <HAL_HCD_HC_Halt>
 800b274:	4603      	mov	r3, r0
 800b276:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800b278:	7bfb      	ldrb	r3, [r7, #15]
 800b27a:	4618      	mov	r0, r3
 800b27c:	f000 f8a0 	bl	800b3c0 <USBH_Get_USB_Status>
 800b280:	4603      	mov	r3, r0
 800b282:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b284:	7bbb      	ldrb	r3, [r7, #14]
}
 800b286:	4618      	mov	r0, r3
 800b288:	3710      	adds	r7, #16
 800b28a:	46bd      	mov	sp, r7
 800b28c:	bd80      	pop	{r7, pc}

0800b28e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800b28e:	b590      	push	{r4, r7, lr}
 800b290:	b089      	sub	sp, #36	@ 0x24
 800b292:	af04      	add	r7, sp, #16
 800b294:	6078      	str	r0, [r7, #4]
 800b296:	4608      	mov	r0, r1
 800b298:	4611      	mov	r1, r2
 800b29a:	461a      	mov	r2, r3
 800b29c:	4603      	mov	r3, r0
 800b29e:	70fb      	strb	r3, [r7, #3]
 800b2a0:	460b      	mov	r3, r1
 800b2a2:	70bb      	strb	r3, [r7, #2]
 800b2a4:	4613      	mov	r3, r2
 800b2a6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800b2b6:	787c      	ldrb	r4, [r7, #1]
 800b2b8:	78ba      	ldrb	r2, [r7, #2]
 800b2ba:	78f9      	ldrb	r1, [r7, #3]
 800b2bc:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800b2c0:	9303      	str	r3, [sp, #12]
 800b2c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800b2c4:	9302      	str	r3, [sp, #8]
 800b2c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2c8:	9301      	str	r3, [sp, #4]
 800b2ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b2ce:	9300      	str	r3, [sp, #0]
 800b2d0:	4623      	mov	r3, r4
 800b2d2:	f7f7 f8cd 	bl	8002470 <HAL_HCD_HC_SubmitRequest>
 800b2d6:	4603      	mov	r3, r0
 800b2d8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800b2da:	7bfb      	ldrb	r3, [r7, #15]
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f000 f86f 	bl	800b3c0 <USBH_Get_USB_Status>
 800b2e2:	4603      	mov	r3, r0
 800b2e4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b2e6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b2e8:	4618      	mov	r0, r3
 800b2ea:	3714      	adds	r7, #20
 800b2ec:	46bd      	mov	sp, r7
 800b2ee:	bd90      	pop	{r4, r7, pc}

0800b2f0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b082      	sub	sp, #8
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
 800b2f8:	460b      	mov	r3, r1
 800b2fa:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b302:	78fa      	ldrb	r2, [r7, #3]
 800b304:	4611      	mov	r1, r2
 800b306:	4618      	mov	r0, r3
 800b308:	f7f7 fbae 	bl	8002a68 <HAL_HCD_HC_GetURBState>
 800b30c:	4603      	mov	r3, r0
}
 800b30e:	4618      	mov	r0, r3
 800b310:	3708      	adds	r7, #8
 800b312:	46bd      	mov	sp, r7
 800b314:	bd80      	pop	{r7, pc}

0800b316 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800b316:	b580      	push	{r7, lr}
 800b318:	b082      	sub	sp, #8
 800b31a:	af00      	add	r7, sp, #0
 800b31c:	6078      	str	r0, [r7, #4]
 800b31e:	460b      	mov	r3, r1
 800b320:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_HS) {
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800b328:	2b00      	cmp	r3, #0
 800b32a:	d103      	bne.n	800b334 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusHS(state);
 800b32c:	78fb      	ldrb	r3, [r7, #3]
 800b32e:	4618      	mov	r0, r3
 800b330:	f000 f872 	bl	800b418 <MX_DriverVbusHS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800b334:	20c8      	movs	r0, #200	@ 0xc8
 800b336:	f7f6 fa85 	bl	8001844 <HAL_Delay>
  return USBH_OK;
 800b33a:	2300      	movs	r3, #0
}
 800b33c:	4618      	mov	r0, r3
 800b33e:	3708      	adds	r7, #8
 800b340:	46bd      	mov	sp, r7
 800b342:	bd80      	pop	{r7, pc}

0800b344 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800b344:	b480      	push	{r7}
 800b346:	b085      	sub	sp, #20
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]
 800b34c:	460b      	mov	r3, r1
 800b34e:	70fb      	strb	r3, [r7, #3]
 800b350:	4613      	mov	r3, r2
 800b352:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800b35a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800b35c:	78fa      	ldrb	r2, [r7, #3]
 800b35e:	68f9      	ldr	r1, [r7, #12]
 800b360:	4613      	mov	r3, r2
 800b362:	011b      	lsls	r3, r3, #4
 800b364:	1a9b      	subs	r3, r3, r2
 800b366:	009b      	lsls	r3, r3, #2
 800b368:	440b      	add	r3, r1
 800b36a:	3317      	adds	r3, #23
 800b36c:	781b      	ldrb	r3, [r3, #0]
 800b36e:	2b00      	cmp	r3, #0
 800b370:	d00a      	beq.n	800b388 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800b372:	78fa      	ldrb	r2, [r7, #3]
 800b374:	68f9      	ldr	r1, [r7, #12]
 800b376:	4613      	mov	r3, r2
 800b378:	011b      	lsls	r3, r3, #4
 800b37a:	1a9b      	subs	r3, r3, r2
 800b37c:	009b      	lsls	r3, r3, #2
 800b37e:	440b      	add	r3, r1
 800b380:	333c      	adds	r3, #60	@ 0x3c
 800b382:	78ba      	ldrb	r2, [r7, #2]
 800b384:	701a      	strb	r2, [r3, #0]
 800b386:	e009      	b.n	800b39c <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800b388:	78fa      	ldrb	r2, [r7, #3]
 800b38a:	68f9      	ldr	r1, [r7, #12]
 800b38c:	4613      	mov	r3, r2
 800b38e:	011b      	lsls	r3, r3, #4
 800b390:	1a9b      	subs	r3, r3, r2
 800b392:	009b      	lsls	r3, r3, #2
 800b394:	440b      	add	r3, r1
 800b396:	333d      	adds	r3, #61	@ 0x3d
 800b398:	78ba      	ldrb	r2, [r7, #2]
 800b39a:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800b39c:	2300      	movs	r3, #0
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3714      	adds	r7, #20
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a8:	4770      	bx	lr

0800b3aa <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800b3aa:	b580      	push	{r7, lr}
 800b3ac:	b082      	sub	sp, #8
 800b3ae:	af00      	add	r7, sp, #0
 800b3b0:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f7f6 fa46 	bl	8001844 <HAL_Delay>
}
 800b3b8:	bf00      	nop
 800b3ba:	3708      	adds	r7, #8
 800b3bc:	46bd      	mov	sp, r7
 800b3be:	bd80      	pop	{r7, pc}

0800b3c0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800b3c0:	b480      	push	{r7}
 800b3c2:	b085      	sub	sp, #20
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	4603      	mov	r3, r0
 800b3c8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800b3ce:	79fb      	ldrb	r3, [r7, #7]
 800b3d0:	2b03      	cmp	r3, #3
 800b3d2:	d817      	bhi.n	800b404 <USBH_Get_USB_Status+0x44>
 800b3d4:	a201      	add	r2, pc, #4	@ (adr r2, 800b3dc <USBH_Get_USB_Status+0x1c>)
 800b3d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b3da:	bf00      	nop
 800b3dc:	0800b3ed 	.word	0x0800b3ed
 800b3e0:	0800b3f3 	.word	0x0800b3f3
 800b3e4:	0800b3f9 	.word	0x0800b3f9
 800b3e8:	0800b3ff 	.word	0x0800b3ff
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800b3ec:	2300      	movs	r3, #0
 800b3ee:	73fb      	strb	r3, [r7, #15]
    break;
 800b3f0:	e00b      	b.n	800b40a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800b3f2:	2302      	movs	r3, #2
 800b3f4:	73fb      	strb	r3, [r7, #15]
    break;
 800b3f6:	e008      	b.n	800b40a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800b3f8:	2301      	movs	r3, #1
 800b3fa:	73fb      	strb	r3, [r7, #15]
    break;
 800b3fc:	e005      	b.n	800b40a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800b3fe:	2302      	movs	r3, #2
 800b400:	73fb      	strb	r3, [r7, #15]
    break;
 800b402:	e002      	b.n	800b40a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800b404:	2302      	movs	r3, #2
 800b406:	73fb      	strb	r3, [r7, #15]
    break;
 800b408:	bf00      	nop
  }
  return usb_status;
 800b40a:	7bfb      	ldrb	r3, [r7, #15]
}
 800b40c:	4618      	mov	r0, r3
 800b40e:	3714      	adds	r7, #20
 800b410:	46bd      	mov	sp, r7
 800b412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b416:	4770      	bx	lr

0800b418 <MX_DriverVbusHS>:
 800b418:	b580      	push	{r7, lr}
 800b41a:	b084      	sub	sp, #16
 800b41c:	af00      	add	r7, sp, #0
 800b41e:	4603      	mov	r3, r0
 800b420:	71fb      	strb	r3, [r7, #7]
 800b422:	79fb      	ldrb	r3, [r7, #7]
 800b424:	73fb      	strb	r3, [r7, #15]
 800b426:	79fb      	ldrb	r3, [r7, #7]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d102      	bne.n	800b432 <MX_DriverVbusHS+0x1a>
 800b42c:	2301      	movs	r3, #1
 800b42e:	73fb      	strb	r3, [r7, #15]
 800b430:	e001      	b.n	800b436 <MX_DriverVbusHS+0x1e>
 800b432:	2300      	movs	r3, #0
 800b434:	73fb      	strb	r3, [r7, #15]
 800b436:	7bfb      	ldrb	r3, [r7, #15]
 800b438:	461a      	mov	r2, r3
 800b43a:	2110      	movs	r1, #16
 800b43c:	4803      	ldr	r0, [pc, #12]	@ (800b44c <MX_DriverVbusHS+0x34>)
 800b43e:	f7f6 febb 	bl	80021b8 <HAL_GPIO_WritePin>
 800b442:	bf00      	nop
 800b444:	3710      	adds	r7, #16
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}
 800b44a:	bf00      	nop
 800b44c:	40020800 	.word	0x40020800

0800b450 <malloc>:
 800b450:	4b02      	ldr	r3, [pc, #8]	@ (800b45c <malloc+0xc>)
 800b452:	4601      	mov	r1, r0
 800b454:	6818      	ldr	r0, [r3, #0]
 800b456:	f000 b82d 	b.w	800b4b4 <_malloc_r>
 800b45a:	bf00      	nop
 800b45c:	2000002c 	.word	0x2000002c

0800b460 <free>:
 800b460:	4b02      	ldr	r3, [pc, #8]	@ (800b46c <free+0xc>)
 800b462:	4601      	mov	r1, r0
 800b464:	6818      	ldr	r0, [r3, #0]
 800b466:	f000 b92b 	b.w	800b6c0 <_free_r>
 800b46a:	bf00      	nop
 800b46c:	2000002c 	.word	0x2000002c

0800b470 <sbrk_aligned>:
 800b470:	b570      	push	{r4, r5, r6, lr}
 800b472:	4e0f      	ldr	r6, [pc, #60]	@ (800b4b0 <sbrk_aligned+0x40>)
 800b474:	460c      	mov	r4, r1
 800b476:	6831      	ldr	r1, [r6, #0]
 800b478:	4605      	mov	r5, r0
 800b47a:	b911      	cbnz	r1, 800b482 <sbrk_aligned+0x12>
 800b47c:	f000 f8e4 	bl	800b648 <_sbrk_r>
 800b480:	6030      	str	r0, [r6, #0]
 800b482:	4621      	mov	r1, r4
 800b484:	4628      	mov	r0, r5
 800b486:	f000 f8df 	bl	800b648 <_sbrk_r>
 800b48a:	1c43      	adds	r3, r0, #1
 800b48c:	d103      	bne.n	800b496 <sbrk_aligned+0x26>
 800b48e:	f04f 34ff 	mov.w	r4, #4294967295
 800b492:	4620      	mov	r0, r4
 800b494:	bd70      	pop	{r4, r5, r6, pc}
 800b496:	1cc4      	adds	r4, r0, #3
 800b498:	f024 0403 	bic.w	r4, r4, #3
 800b49c:	42a0      	cmp	r0, r4
 800b49e:	d0f8      	beq.n	800b492 <sbrk_aligned+0x22>
 800b4a0:	1a21      	subs	r1, r4, r0
 800b4a2:	4628      	mov	r0, r5
 800b4a4:	f000 f8d0 	bl	800b648 <_sbrk_r>
 800b4a8:	3001      	adds	r0, #1
 800b4aa:	d1f2      	bne.n	800b492 <sbrk_aligned+0x22>
 800b4ac:	e7ef      	b.n	800b48e <sbrk_aligned+0x1e>
 800b4ae:	bf00      	nop
 800b4b0:	20000b08 	.word	0x20000b08

0800b4b4 <_malloc_r>:
 800b4b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b4b8:	1ccd      	adds	r5, r1, #3
 800b4ba:	f025 0503 	bic.w	r5, r5, #3
 800b4be:	3508      	adds	r5, #8
 800b4c0:	2d0c      	cmp	r5, #12
 800b4c2:	bf38      	it	cc
 800b4c4:	250c      	movcc	r5, #12
 800b4c6:	2d00      	cmp	r5, #0
 800b4c8:	4606      	mov	r6, r0
 800b4ca:	db01      	blt.n	800b4d0 <_malloc_r+0x1c>
 800b4cc:	42a9      	cmp	r1, r5
 800b4ce:	d904      	bls.n	800b4da <_malloc_r+0x26>
 800b4d0:	230c      	movs	r3, #12
 800b4d2:	6033      	str	r3, [r6, #0]
 800b4d4:	2000      	movs	r0, #0
 800b4d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b4da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b5b0 <_malloc_r+0xfc>
 800b4de:	f000 f869 	bl	800b5b4 <__malloc_lock>
 800b4e2:	f8d8 3000 	ldr.w	r3, [r8]
 800b4e6:	461c      	mov	r4, r3
 800b4e8:	bb44      	cbnz	r4, 800b53c <_malloc_r+0x88>
 800b4ea:	4629      	mov	r1, r5
 800b4ec:	4630      	mov	r0, r6
 800b4ee:	f7ff ffbf 	bl	800b470 <sbrk_aligned>
 800b4f2:	1c43      	adds	r3, r0, #1
 800b4f4:	4604      	mov	r4, r0
 800b4f6:	d158      	bne.n	800b5aa <_malloc_r+0xf6>
 800b4f8:	f8d8 4000 	ldr.w	r4, [r8]
 800b4fc:	4627      	mov	r7, r4
 800b4fe:	2f00      	cmp	r7, #0
 800b500:	d143      	bne.n	800b58a <_malloc_r+0xd6>
 800b502:	2c00      	cmp	r4, #0
 800b504:	d04b      	beq.n	800b59e <_malloc_r+0xea>
 800b506:	6823      	ldr	r3, [r4, #0]
 800b508:	4639      	mov	r1, r7
 800b50a:	4630      	mov	r0, r6
 800b50c:	eb04 0903 	add.w	r9, r4, r3
 800b510:	f000 f89a 	bl	800b648 <_sbrk_r>
 800b514:	4581      	cmp	r9, r0
 800b516:	d142      	bne.n	800b59e <_malloc_r+0xea>
 800b518:	6821      	ldr	r1, [r4, #0]
 800b51a:	1a6d      	subs	r5, r5, r1
 800b51c:	4629      	mov	r1, r5
 800b51e:	4630      	mov	r0, r6
 800b520:	f7ff ffa6 	bl	800b470 <sbrk_aligned>
 800b524:	3001      	adds	r0, #1
 800b526:	d03a      	beq.n	800b59e <_malloc_r+0xea>
 800b528:	6823      	ldr	r3, [r4, #0]
 800b52a:	442b      	add	r3, r5
 800b52c:	6023      	str	r3, [r4, #0]
 800b52e:	f8d8 3000 	ldr.w	r3, [r8]
 800b532:	685a      	ldr	r2, [r3, #4]
 800b534:	bb62      	cbnz	r2, 800b590 <_malloc_r+0xdc>
 800b536:	f8c8 7000 	str.w	r7, [r8]
 800b53a:	e00f      	b.n	800b55c <_malloc_r+0xa8>
 800b53c:	6822      	ldr	r2, [r4, #0]
 800b53e:	1b52      	subs	r2, r2, r5
 800b540:	d420      	bmi.n	800b584 <_malloc_r+0xd0>
 800b542:	2a0b      	cmp	r2, #11
 800b544:	d917      	bls.n	800b576 <_malloc_r+0xc2>
 800b546:	1961      	adds	r1, r4, r5
 800b548:	42a3      	cmp	r3, r4
 800b54a:	6025      	str	r5, [r4, #0]
 800b54c:	bf18      	it	ne
 800b54e:	6059      	strne	r1, [r3, #4]
 800b550:	6863      	ldr	r3, [r4, #4]
 800b552:	bf08      	it	eq
 800b554:	f8c8 1000 	streq.w	r1, [r8]
 800b558:	5162      	str	r2, [r4, r5]
 800b55a:	604b      	str	r3, [r1, #4]
 800b55c:	4630      	mov	r0, r6
 800b55e:	f000 f82f 	bl	800b5c0 <__malloc_unlock>
 800b562:	f104 000b 	add.w	r0, r4, #11
 800b566:	1d23      	adds	r3, r4, #4
 800b568:	f020 0007 	bic.w	r0, r0, #7
 800b56c:	1ac2      	subs	r2, r0, r3
 800b56e:	bf1c      	itt	ne
 800b570:	1a1b      	subne	r3, r3, r0
 800b572:	50a3      	strne	r3, [r4, r2]
 800b574:	e7af      	b.n	800b4d6 <_malloc_r+0x22>
 800b576:	6862      	ldr	r2, [r4, #4]
 800b578:	42a3      	cmp	r3, r4
 800b57a:	bf0c      	ite	eq
 800b57c:	f8c8 2000 	streq.w	r2, [r8]
 800b580:	605a      	strne	r2, [r3, #4]
 800b582:	e7eb      	b.n	800b55c <_malloc_r+0xa8>
 800b584:	4623      	mov	r3, r4
 800b586:	6864      	ldr	r4, [r4, #4]
 800b588:	e7ae      	b.n	800b4e8 <_malloc_r+0x34>
 800b58a:	463c      	mov	r4, r7
 800b58c:	687f      	ldr	r7, [r7, #4]
 800b58e:	e7b6      	b.n	800b4fe <_malloc_r+0x4a>
 800b590:	461a      	mov	r2, r3
 800b592:	685b      	ldr	r3, [r3, #4]
 800b594:	42a3      	cmp	r3, r4
 800b596:	d1fb      	bne.n	800b590 <_malloc_r+0xdc>
 800b598:	2300      	movs	r3, #0
 800b59a:	6053      	str	r3, [r2, #4]
 800b59c:	e7de      	b.n	800b55c <_malloc_r+0xa8>
 800b59e:	230c      	movs	r3, #12
 800b5a0:	6033      	str	r3, [r6, #0]
 800b5a2:	4630      	mov	r0, r6
 800b5a4:	f000 f80c 	bl	800b5c0 <__malloc_unlock>
 800b5a8:	e794      	b.n	800b4d4 <_malloc_r+0x20>
 800b5aa:	6005      	str	r5, [r0, #0]
 800b5ac:	e7d6      	b.n	800b55c <_malloc_r+0xa8>
 800b5ae:	bf00      	nop
 800b5b0:	20000b0c 	.word	0x20000b0c

0800b5b4 <__malloc_lock>:
 800b5b4:	4801      	ldr	r0, [pc, #4]	@ (800b5bc <__malloc_lock+0x8>)
 800b5b6:	f000 b881 	b.w	800b6bc <__retarget_lock_acquire_recursive>
 800b5ba:	bf00      	nop
 800b5bc:	20000c4c 	.word	0x20000c4c

0800b5c0 <__malloc_unlock>:
 800b5c0:	4801      	ldr	r0, [pc, #4]	@ (800b5c8 <__malloc_unlock+0x8>)
 800b5c2:	f000 b87c 	b.w	800b6be <__retarget_lock_release_recursive>
 800b5c6:	bf00      	nop
 800b5c8:	20000c4c 	.word	0x20000c4c

0800b5cc <sniprintf>:
 800b5cc:	b40c      	push	{r2, r3}
 800b5ce:	b530      	push	{r4, r5, lr}
 800b5d0:	4b18      	ldr	r3, [pc, #96]	@ (800b634 <sniprintf+0x68>)
 800b5d2:	1e0c      	subs	r4, r1, #0
 800b5d4:	681d      	ldr	r5, [r3, #0]
 800b5d6:	b09d      	sub	sp, #116	@ 0x74
 800b5d8:	da08      	bge.n	800b5ec <sniprintf+0x20>
 800b5da:	238b      	movs	r3, #139	@ 0x8b
 800b5dc:	602b      	str	r3, [r5, #0]
 800b5de:	f04f 30ff 	mov.w	r0, #4294967295
 800b5e2:	b01d      	add	sp, #116	@ 0x74
 800b5e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b5e8:	b002      	add	sp, #8
 800b5ea:	4770      	bx	lr
 800b5ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b5f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b5f4:	f04f 0300 	mov.w	r3, #0
 800b5f8:	931b      	str	r3, [sp, #108]	@ 0x6c
 800b5fa:	bf14      	ite	ne
 800b5fc:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b600:	4623      	moveq	r3, r4
 800b602:	9304      	str	r3, [sp, #16]
 800b604:	9307      	str	r3, [sp, #28]
 800b606:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b60a:	9002      	str	r0, [sp, #8]
 800b60c:	9006      	str	r0, [sp, #24]
 800b60e:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b612:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b614:	ab21      	add	r3, sp, #132	@ 0x84
 800b616:	a902      	add	r1, sp, #8
 800b618:	4628      	mov	r0, r5
 800b61a:	9301      	str	r3, [sp, #4]
 800b61c:	f000 f8f6 	bl	800b80c <_svfiprintf_r>
 800b620:	1c43      	adds	r3, r0, #1
 800b622:	bfbc      	itt	lt
 800b624:	238b      	movlt	r3, #139	@ 0x8b
 800b626:	602b      	strlt	r3, [r5, #0]
 800b628:	2c00      	cmp	r4, #0
 800b62a:	d0da      	beq.n	800b5e2 <sniprintf+0x16>
 800b62c:	9b02      	ldr	r3, [sp, #8]
 800b62e:	2200      	movs	r2, #0
 800b630:	701a      	strb	r2, [r3, #0]
 800b632:	e7d6      	b.n	800b5e2 <sniprintf+0x16>
 800b634:	2000002c 	.word	0x2000002c

0800b638 <memset>:
 800b638:	4402      	add	r2, r0
 800b63a:	4603      	mov	r3, r0
 800b63c:	4293      	cmp	r3, r2
 800b63e:	d100      	bne.n	800b642 <memset+0xa>
 800b640:	4770      	bx	lr
 800b642:	f803 1b01 	strb.w	r1, [r3], #1
 800b646:	e7f9      	b.n	800b63c <memset+0x4>

0800b648 <_sbrk_r>:
 800b648:	b538      	push	{r3, r4, r5, lr}
 800b64a:	4d06      	ldr	r5, [pc, #24]	@ (800b664 <_sbrk_r+0x1c>)
 800b64c:	2300      	movs	r3, #0
 800b64e:	4604      	mov	r4, r0
 800b650:	4608      	mov	r0, r1
 800b652:	602b      	str	r3, [r5, #0]
 800b654:	f7f6 f842 	bl	80016dc <_sbrk>
 800b658:	1c43      	adds	r3, r0, #1
 800b65a:	d102      	bne.n	800b662 <_sbrk_r+0x1a>
 800b65c:	682b      	ldr	r3, [r5, #0]
 800b65e:	b103      	cbz	r3, 800b662 <_sbrk_r+0x1a>
 800b660:	6023      	str	r3, [r4, #0]
 800b662:	bd38      	pop	{r3, r4, r5, pc}
 800b664:	20000c48 	.word	0x20000c48

0800b668 <__errno>:
 800b668:	4b01      	ldr	r3, [pc, #4]	@ (800b670 <__errno+0x8>)
 800b66a:	6818      	ldr	r0, [r3, #0]
 800b66c:	4770      	bx	lr
 800b66e:	bf00      	nop
 800b670:	2000002c 	.word	0x2000002c

0800b674 <__libc_init_array>:
 800b674:	b570      	push	{r4, r5, r6, lr}
 800b676:	4d0d      	ldr	r5, [pc, #52]	@ (800b6ac <__libc_init_array+0x38>)
 800b678:	4c0d      	ldr	r4, [pc, #52]	@ (800b6b0 <__libc_init_array+0x3c>)
 800b67a:	1b64      	subs	r4, r4, r5
 800b67c:	10a4      	asrs	r4, r4, #2
 800b67e:	2600      	movs	r6, #0
 800b680:	42a6      	cmp	r6, r4
 800b682:	d109      	bne.n	800b698 <__libc_init_array+0x24>
 800b684:	4d0b      	ldr	r5, [pc, #44]	@ (800b6b4 <__libc_init_array+0x40>)
 800b686:	4c0c      	ldr	r4, [pc, #48]	@ (800b6b8 <__libc_init_array+0x44>)
 800b688:	f000 fba6 	bl	800bdd8 <_init>
 800b68c:	1b64      	subs	r4, r4, r5
 800b68e:	10a4      	asrs	r4, r4, #2
 800b690:	2600      	movs	r6, #0
 800b692:	42a6      	cmp	r6, r4
 800b694:	d105      	bne.n	800b6a2 <__libc_init_array+0x2e>
 800b696:	bd70      	pop	{r4, r5, r6, pc}
 800b698:	f855 3b04 	ldr.w	r3, [r5], #4
 800b69c:	4798      	blx	r3
 800b69e:	3601      	adds	r6, #1
 800b6a0:	e7ee      	b.n	800b680 <__libc_init_array+0xc>
 800b6a2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b6a6:	4798      	blx	r3
 800b6a8:	3601      	adds	r6, #1
 800b6aa:	e7f2      	b.n	800b692 <__libc_init_array+0x1e>
 800b6ac:	0800be88 	.word	0x0800be88
 800b6b0:	0800be88 	.word	0x0800be88
 800b6b4:	0800be88 	.word	0x0800be88
 800b6b8:	0800be8c 	.word	0x0800be8c

0800b6bc <__retarget_lock_acquire_recursive>:
 800b6bc:	4770      	bx	lr

0800b6be <__retarget_lock_release_recursive>:
 800b6be:	4770      	bx	lr

0800b6c0 <_free_r>:
 800b6c0:	b538      	push	{r3, r4, r5, lr}
 800b6c2:	4605      	mov	r5, r0
 800b6c4:	2900      	cmp	r1, #0
 800b6c6:	d041      	beq.n	800b74c <_free_r+0x8c>
 800b6c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b6cc:	1f0c      	subs	r4, r1, #4
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	bfb8      	it	lt
 800b6d2:	18e4      	addlt	r4, r4, r3
 800b6d4:	f7ff ff6e 	bl	800b5b4 <__malloc_lock>
 800b6d8:	4a1d      	ldr	r2, [pc, #116]	@ (800b750 <_free_r+0x90>)
 800b6da:	6813      	ldr	r3, [r2, #0]
 800b6dc:	b933      	cbnz	r3, 800b6ec <_free_r+0x2c>
 800b6de:	6063      	str	r3, [r4, #4]
 800b6e0:	6014      	str	r4, [r2, #0]
 800b6e2:	4628      	mov	r0, r5
 800b6e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b6e8:	f7ff bf6a 	b.w	800b5c0 <__malloc_unlock>
 800b6ec:	42a3      	cmp	r3, r4
 800b6ee:	d908      	bls.n	800b702 <_free_r+0x42>
 800b6f0:	6820      	ldr	r0, [r4, #0]
 800b6f2:	1821      	adds	r1, r4, r0
 800b6f4:	428b      	cmp	r3, r1
 800b6f6:	bf01      	itttt	eq
 800b6f8:	6819      	ldreq	r1, [r3, #0]
 800b6fa:	685b      	ldreq	r3, [r3, #4]
 800b6fc:	1809      	addeq	r1, r1, r0
 800b6fe:	6021      	streq	r1, [r4, #0]
 800b700:	e7ed      	b.n	800b6de <_free_r+0x1e>
 800b702:	461a      	mov	r2, r3
 800b704:	685b      	ldr	r3, [r3, #4]
 800b706:	b10b      	cbz	r3, 800b70c <_free_r+0x4c>
 800b708:	42a3      	cmp	r3, r4
 800b70a:	d9fa      	bls.n	800b702 <_free_r+0x42>
 800b70c:	6811      	ldr	r1, [r2, #0]
 800b70e:	1850      	adds	r0, r2, r1
 800b710:	42a0      	cmp	r0, r4
 800b712:	d10b      	bne.n	800b72c <_free_r+0x6c>
 800b714:	6820      	ldr	r0, [r4, #0]
 800b716:	4401      	add	r1, r0
 800b718:	1850      	adds	r0, r2, r1
 800b71a:	4283      	cmp	r3, r0
 800b71c:	6011      	str	r1, [r2, #0]
 800b71e:	d1e0      	bne.n	800b6e2 <_free_r+0x22>
 800b720:	6818      	ldr	r0, [r3, #0]
 800b722:	685b      	ldr	r3, [r3, #4]
 800b724:	6053      	str	r3, [r2, #4]
 800b726:	4408      	add	r0, r1
 800b728:	6010      	str	r0, [r2, #0]
 800b72a:	e7da      	b.n	800b6e2 <_free_r+0x22>
 800b72c:	d902      	bls.n	800b734 <_free_r+0x74>
 800b72e:	230c      	movs	r3, #12
 800b730:	602b      	str	r3, [r5, #0]
 800b732:	e7d6      	b.n	800b6e2 <_free_r+0x22>
 800b734:	6820      	ldr	r0, [r4, #0]
 800b736:	1821      	adds	r1, r4, r0
 800b738:	428b      	cmp	r3, r1
 800b73a:	bf04      	itt	eq
 800b73c:	6819      	ldreq	r1, [r3, #0]
 800b73e:	685b      	ldreq	r3, [r3, #4]
 800b740:	6063      	str	r3, [r4, #4]
 800b742:	bf04      	itt	eq
 800b744:	1809      	addeq	r1, r1, r0
 800b746:	6021      	streq	r1, [r4, #0]
 800b748:	6054      	str	r4, [r2, #4]
 800b74a:	e7ca      	b.n	800b6e2 <_free_r+0x22>
 800b74c:	bd38      	pop	{r3, r4, r5, pc}
 800b74e:	bf00      	nop
 800b750:	20000b0c 	.word	0x20000b0c

0800b754 <__ssputs_r>:
 800b754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b758:	688e      	ldr	r6, [r1, #8]
 800b75a:	461f      	mov	r7, r3
 800b75c:	42be      	cmp	r6, r7
 800b75e:	680b      	ldr	r3, [r1, #0]
 800b760:	4682      	mov	sl, r0
 800b762:	460c      	mov	r4, r1
 800b764:	4690      	mov	r8, r2
 800b766:	d82d      	bhi.n	800b7c4 <__ssputs_r+0x70>
 800b768:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800b76c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800b770:	d026      	beq.n	800b7c0 <__ssputs_r+0x6c>
 800b772:	6965      	ldr	r5, [r4, #20]
 800b774:	6909      	ldr	r1, [r1, #16]
 800b776:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b77a:	eba3 0901 	sub.w	r9, r3, r1
 800b77e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b782:	1c7b      	adds	r3, r7, #1
 800b784:	444b      	add	r3, r9
 800b786:	106d      	asrs	r5, r5, #1
 800b788:	429d      	cmp	r5, r3
 800b78a:	bf38      	it	cc
 800b78c:	461d      	movcc	r5, r3
 800b78e:	0553      	lsls	r3, r2, #21
 800b790:	d527      	bpl.n	800b7e2 <__ssputs_r+0x8e>
 800b792:	4629      	mov	r1, r5
 800b794:	f7ff fe8e 	bl	800b4b4 <_malloc_r>
 800b798:	4606      	mov	r6, r0
 800b79a:	b360      	cbz	r0, 800b7f6 <__ssputs_r+0xa2>
 800b79c:	6921      	ldr	r1, [r4, #16]
 800b79e:	464a      	mov	r2, r9
 800b7a0:	f000 fad6 	bl	800bd50 <memcpy>
 800b7a4:	89a3      	ldrh	r3, [r4, #12]
 800b7a6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800b7aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b7ae:	81a3      	strh	r3, [r4, #12]
 800b7b0:	6126      	str	r6, [r4, #16]
 800b7b2:	6165      	str	r5, [r4, #20]
 800b7b4:	444e      	add	r6, r9
 800b7b6:	eba5 0509 	sub.w	r5, r5, r9
 800b7ba:	6026      	str	r6, [r4, #0]
 800b7bc:	60a5      	str	r5, [r4, #8]
 800b7be:	463e      	mov	r6, r7
 800b7c0:	42be      	cmp	r6, r7
 800b7c2:	d900      	bls.n	800b7c6 <__ssputs_r+0x72>
 800b7c4:	463e      	mov	r6, r7
 800b7c6:	6820      	ldr	r0, [r4, #0]
 800b7c8:	4632      	mov	r2, r6
 800b7ca:	4641      	mov	r1, r8
 800b7cc:	f000 faa6 	bl	800bd1c <memmove>
 800b7d0:	68a3      	ldr	r3, [r4, #8]
 800b7d2:	1b9b      	subs	r3, r3, r6
 800b7d4:	60a3      	str	r3, [r4, #8]
 800b7d6:	6823      	ldr	r3, [r4, #0]
 800b7d8:	4433      	add	r3, r6
 800b7da:	6023      	str	r3, [r4, #0]
 800b7dc:	2000      	movs	r0, #0
 800b7de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b7e2:	462a      	mov	r2, r5
 800b7e4:	f000 fac2 	bl	800bd6c <_realloc_r>
 800b7e8:	4606      	mov	r6, r0
 800b7ea:	2800      	cmp	r0, #0
 800b7ec:	d1e0      	bne.n	800b7b0 <__ssputs_r+0x5c>
 800b7ee:	6921      	ldr	r1, [r4, #16]
 800b7f0:	4650      	mov	r0, sl
 800b7f2:	f7ff ff65 	bl	800b6c0 <_free_r>
 800b7f6:	230c      	movs	r3, #12
 800b7f8:	f8ca 3000 	str.w	r3, [sl]
 800b7fc:	89a3      	ldrh	r3, [r4, #12]
 800b7fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b802:	81a3      	strh	r3, [r4, #12]
 800b804:	f04f 30ff 	mov.w	r0, #4294967295
 800b808:	e7e9      	b.n	800b7de <__ssputs_r+0x8a>
	...

0800b80c <_svfiprintf_r>:
 800b80c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b810:	4698      	mov	r8, r3
 800b812:	898b      	ldrh	r3, [r1, #12]
 800b814:	061b      	lsls	r3, r3, #24
 800b816:	b09d      	sub	sp, #116	@ 0x74
 800b818:	4607      	mov	r7, r0
 800b81a:	460d      	mov	r5, r1
 800b81c:	4614      	mov	r4, r2
 800b81e:	d510      	bpl.n	800b842 <_svfiprintf_r+0x36>
 800b820:	690b      	ldr	r3, [r1, #16]
 800b822:	b973      	cbnz	r3, 800b842 <_svfiprintf_r+0x36>
 800b824:	2140      	movs	r1, #64	@ 0x40
 800b826:	f7ff fe45 	bl	800b4b4 <_malloc_r>
 800b82a:	6028      	str	r0, [r5, #0]
 800b82c:	6128      	str	r0, [r5, #16]
 800b82e:	b930      	cbnz	r0, 800b83e <_svfiprintf_r+0x32>
 800b830:	230c      	movs	r3, #12
 800b832:	603b      	str	r3, [r7, #0]
 800b834:	f04f 30ff 	mov.w	r0, #4294967295
 800b838:	b01d      	add	sp, #116	@ 0x74
 800b83a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b83e:	2340      	movs	r3, #64	@ 0x40
 800b840:	616b      	str	r3, [r5, #20]
 800b842:	2300      	movs	r3, #0
 800b844:	9309      	str	r3, [sp, #36]	@ 0x24
 800b846:	2320      	movs	r3, #32
 800b848:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b84c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b850:	2330      	movs	r3, #48	@ 0x30
 800b852:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800b9f0 <_svfiprintf_r+0x1e4>
 800b856:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b85a:	f04f 0901 	mov.w	r9, #1
 800b85e:	4623      	mov	r3, r4
 800b860:	469a      	mov	sl, r3
 800b862:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b866:	b10a      	cbz	r2, 800b86c <_svfiprintf_r+0x60>
 800b868:	2a25      	cmp	r2, #37	@ 0x25
 800b86a:	d1f9      	bne.n	800b860 <_svfiprintf_r+0x54>
 800b86c:	ebba 0b04 	subs.w	fp, sl, r4
 800b870:	d00b      	beq.n	800b88a <_svfiprintf_r+0x7e>
 800b872:	465b      	mov	r3, fp
 800b874:	4622      	mov	r2, r4
 800b876:	4629      	mov	r1, r5
 800b878:	4638      	mov	r0, r7
 800b87a:	f7ff ff6b 	bl	800b754 <__ssputs_r>
 800b87e:	3001      	adds	r0, #1
 800b880:	f000 80a7 	beq.w	800b9d2 <_svfiprintf_r+0x1c6>
 800b884:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b886:	445a      	add	r2, fp
 800b888:	9209      	str	r2, [sp, #36]	@ 0x24
 800b88a:	f89a 3000 	ldrb.w	r3, [sl]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	f000 809f 	beq.w	800b9d2 <_svfiprintf_r+0x1c6>
 800b894:	2300      	movs	r3, #0
 800b896:	f04f 32ff 	mov.w	r2, #4294967295
 800b89a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b89e:	f10a 0a01 	add.w	sl, sl, #1
 800b8a2:	9304      	str	r3, [sp, #16]
 800b8a4:	9307      	str	r3, [sp, #28]
 800b8a6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b8aa:	931a      	str	r3, [sp, #104]	@ 0x68
 800b8ac:	4654      	mov	r4, sl
 800b8ae:	2205      	movs	r2, #5
 800b8b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b8b4:	484e      	ldr	r0, [pc, #312]	@ (800b9f0 <_svfiprintf_r+0x1e4>)
 800b8b6:	f7f4 fca3 	bl	8000200 <memchr>
 800b8ba:	9a04      	ldr	r2, [sp, #16]
 800b8bc:	b9d8      	cbnz	r0, 800b8f6 <_svfiprintf_r+0xea>
 800b8be:	06d0      	lsls	r0, r2, #27
 800b8c0:	bf44      	itt	mi
 800b8c2:	2320      	movmi	r3, #32
 800b8c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8c8:	0711      	lsls	r1, r2, #28
 800b8ca:	bf44      	itt	mi
 800b8cc:	232b      	movmi	r3, #43	@ 0x2b
 800b8ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b8d2:	f89a 3000 	ldrb.w	r3, [sl]
 800b8d6:	2b2a      	cmp	r3, #42	@ 0x2a
 800b8d8:	d015      	beq.n	800b906 <_svfiprintf_r+0xfa>
 800b8da:	9a07      	ldr	r2, [sp, #28]
 800b8dc:	4654      	mov	r4, sl
 800b8de:	2000      	movs	r0, #0
 800b8e0:	f04f 0c0a 	mov.w	ip, #10
 800b8e4:	4621      	mov	r1, r4
 800b8e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b8ea:	3b30      	subs	r3, #48	@ 0x30
 800b8ec:	2b09      	cmp	r3, #9
 800b8ee:	d94b      	bls.n	800b988 <_svfiprintf_r+0x17c>
 800b8f0:	b1b0      	cbz	r0, 800b920 <_svfiprintf_r+0x114>
 800b8f2:	9207      	str	r2, [sp, #28]
 800b8f4:	e014      	b.n	800b920 <_svfiprintf_r+0x114>
 800b8f6:	eba0 0308 	sub.w	r3, r0, r8
 800b8fa:	fa09 f303 	lsl.w	r3, r9, r3
 800b8fe:	4313      	orrs	r3, r2
 800b900:	9304      	str	r3, [sp, #16]
 800b902:	46a2      	mov	sl, r4
 800b904:	e7d2      	b.n	800b8ac <_svfiprintf_r+0xa0>
 800b906:	9b03      	ldr	r3, [sp, #12]
 800b908:	1d19      	adds	r1, r3, #4
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	9103      	str	r1, [sp, #12]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	bfbb      	ittet	lt
 800b912:	425b      	neglt	r3, r3
 800b914:	f042 0202 	orrlt.w	r2, r2, #2
 800b918:	9307      	strge	r3, [sp, #28]
 800b91a:	9307      	strlt	r3, [sp, #28]
 800b91c:	bfb8      	it	lt
 800b91e:	9204      	strlt	r2, [sp, #16]
 800b920:	7823      	ldrb	r3, [r4, #0]
 800b922:	2b2e      	cmp	r3, #46	@ 0x2e
 800b924:	d10a      	bne.n	800b93c <_svfiprintf_r+0x130>
 800b926:	7863      	ldrb	r3, [r4, #1]
 800b928:	2b2a      	cmp	r3, #42	@ 0x2a
 800b92a:	d132      	bne.n	800b992 <_svfiprintf_r+0x186>
 800b92c:	9b03      	ldr	r3, [sp, #12]
 800b92e:	1d1a      	adds	r2, r3, #4
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	9203      	str	r2, [sp, #12]
 800b934:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b938:	3402      	adds	r4, #2
 800b93a:	9305      	str	r3, [sp, #20]
 800b93c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ba00 <_svfiprintf_r+0x1f4>
 800b940:	7821      	ldrb	r1, [r4, #0]
 800b942:	2203      	movs	r2, #3
 800b944:	4650      	mov	r0, sl
 800b946:	f7f4 fc5b 	bl	8000200 <memchr>
 800b94a:	b138      	cbz	r0, 800b95c <_svfiprintf_r+0x150>
 800b94c:	9b04      	ldr	r3, [sp, #16]
 800b94e:	eba0 000a 	sub.w	r0, r0, sl
 800b952:	2240      	movs	r2, #64	@ 0x40
 800b954:	4082      	lsls	r2, r0
 800b956:	4313      	orrs	r3, r2
 800b958:	3401      	adds	r4, #1
 800b95a:	9304      	str	r3, [sp, #16]
 800b95c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b960:	4824      	ldr	r0, [pc, #144]	@ (800b9f4 <_svfiprintf_r+0x1e8>)
 800b962:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b966:	2206      	movs	r2, #6
 800b968:	f7f4 fc4a 	bl	8000200 <memchr>
 800b96c:	2800      	cmp	r0, #0
 800b96e:	d036      	beq.n	800b9de <_svfiprintf_r+0x1d2>
 800b970:	4b21      	ldr	r3, [pc, #132]	@ (800b9f8 <_svfiprintf_r+0x1ec>)
 800b972:	bb1b      	cbnz	r3, 800b9bc <_svfiprintf_r+0x1b0>
 800b974:	9b03      	ldr	r3, [sp, #12]
 800b976:	3307      	adds	r3, #7
 800b978:	f023 0307 	bic.w	r3, r3, #7
 800b97c:	3308      	adds	r3, #8
 800b97e:	9303      	str	r3, [sp, #12]
 800b980:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b982:	4433      	add	r3, r6
 800b984:	9309      	str	r3, [sp, #36]	@ 0x24
 800b986:	e76a      	b.n	800b85e <_svfiprintf_r+0x52>
 800b988:	fb0c 3202 	mla	r2, ip, r2, r3
 800b98c:	460c      	mov	r4, r1
 800b98e:	2001      	movs	r0, #1
 800b990:	e7a8      	b.n	800b8e4 <_svfiprintf_r+0xd8>
 800b992:	2300      	movs	r3, #0
 800b994:	3401      	adds	r4, #1
 800b996:	9305      	str	r3, [sp, #20]
 800b998:	4619      	mov	r1, r3
 800b99a:	f04f 0c0a 	mov.w	ip, #10
 800b99e:	4620      	mov	r0, r4
 800b9a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b9a4:	3a30      	subs	r2, #48	@ 0x30
 800b9a6:	2a09      	cmp	r2, #9
 800b9a8:	d903      	bls.n	800b9b2 <_svfiprintf_r+0x1a6>
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d0c6      	beq.n	800b93c <_svfiprintf_r+0x130>
 800b9ae:	9105      	str	r1, [sp, #20]
 800b9b0:	e7c4      	b.n	800b93c <_svfiprintf_r+0x130>
 800b9b2:	fb0c 2101 	mla	r1, ip, r1, r2
 800b9b6:	4604      	mov	r4, r0
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	e7f0      	b.n	800b99e <_svfiprintf_r+0x192>
 800b9bc:	ab03      	add	r3, sp, #12
 800b9be:	9300      	str	r3, [sp, #0]
 800b9c0:	462a      	mov	r2, r5
 800b9c2:	4b0e      	ldr	r3, [pc, #56]	@ (800b9fc <_svfiprintf_r+0x1f0>)
 800b9c4:	a904      	add	r1, sp, #16
 800b9c6:	4638      	mov	r0, r7
 800b9c8:	f3af 8000 	nop.w
 800b9cc:	1c42      	adds	r2, r0, #1
 800b9ce:	4606      	mov	r6, r0
 800b9d0:	d1d6      	bne.n	800b980 <_svfiprintf_r+0x174>
 800b9d2:	89ab      	ldrh	r3, [r5, #12]
 800b9d4:	065b      	lsls	r3, r3, #25
 800b9d6:	f53f af2d 	bmi.w	800b834 <_svfiprintf_r+0x28>
 800b9da:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b9dc:	e72c      	b.n	800b838 <_svfiprintf_r+0x2c>
 800b9de:	ab03      	add	r3, sp, #12
 800b9e0:	9300      	str	r3, [sp, #0]
 800b9e2:	462a      	mov	r2, r5
 800b9e4:	4b05      	ldr	r3, [pc, #20]	@ (800b9fc <_svfiprintf_r+0x1f0>)
 800b9e6:	a904      	add	r1, sp, #16
 800b9e8:	4638      	mov	r0, r7
 800b9ea:	f000 f879 	bl	800bae0 <_printf_i>
 800b9ee:	e7ed      	b.n	800b9cc <_svfiprintf_r+0x1c0>
 800b9f0:	0800be4c 	.word	0x0800be4c
 800b9f4:	0800be56 	.word	0x0800be56
 800b9f8:	00000000 	.word	0x00000000
 800b9fc:	0800b755 	.word	0x0800b755
 800ba00:	0800be52 	.word	0x0800be52

0800ba04 <_printf_common>:
 800ba04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba08:	4616      	mov	r6, r2
 800ba0a:	4698      	mov	r8, r3
 800ba0c:	688a      	ldr	r2, [r1, #8]
 800ba0e:	690b      	ldr	r3, [r1, #16]
 800ba10:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800ba14:	4293      	cmp	r3, r2
 800ba16:	bfb8      	it	lt
 800ba18:	4613      	movlt	r3, r2
 800ba1a:	6033      	str	r3, [r6, #0]
 800ba1c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800ba20:	4607      	mov	r7, r0
 800ba22:	460c      	mov	r4, r1
 800ba24:	b10a      	cbz	r2, 800ba2a <_printf_common+0x26>
 800ba26:	3301      	adds	r3, #1
 800ba28:	6033      	str	r3, [r6, #0]
 800ba2a:	6823      	ldr	r3, [r4, #0]
 800ba2c:	0699      	lsls	r1, r3, #26
 800ba2e:	bf42      	ittt	mi
 800ba30:	6833      	ldrmi	r3, [r6, #0]
 800ba32:	3302      	addmi	r3, #2
 800ba34:	6033      	strmi	r3, [r6, #0]
 800ba36:	6825      	ldr	r5, [r4, #0]
 800ba38:	f015 0506 	ands.w	r5, r5, #6
 800ba3c:	d106      	bne.n	800ba4c <_printf_common+0x48>
 800ba3e:	f104 0a19 	add.w	sl, r4, #25
 800ba42:	68e3      	ldr	r3, [r4, #12]
 800ba44:	6832      	ldr	r2, [r6, #0]
 800ba46:	1a9b      	subs	r3, r3, r2
 800ba48:	42ab      	cmp	r3, r5
 800ba4a:	dc26      	bgt.n	800ba9a <_printf_common+0x96>
 800ba4c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ba50:	6822      	ldr	r2, [r4, #0]
 800ba52:	3b00      	subs	r3, #0
 800ba54:	bf18      	it	ne
 800ba56:	2301      	movne	r3, #1
 800ba58:	0692      	lsls	r2, r2, #26
 800ba5a:	d42b      	bmi.n	800bab4 <_printf_common+0xb0>
 800ba5c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ba60:	4641      	mov	r1, r8
 800ba62:	4638      	mov	r0, r7
 800ba64:	47c8      	blx	r9
 800ba66:	3001      	adds	r0, #1
 800ba68:	d01e      	beq.n	800baa8 <_printf_common+0xa4>
 800ba6a:	6823      	ldr	r3, [r4, #0]
 800ba6c:	6922      	ldr	r2, [r4, #16]
 800ba6e:	f003 0306 	and.w	r3, r3, #6
 800ba72:	2b04      	cmp	r3, #4
 800ba74:	bf02      	ittt	eq
 800ba76:	68e5      	ldreq	r5, [r4, #12]
 800ba78:	6833      	ldreq	r3, [r6, #0]
 800ba7a:	1aed      	subeq	r5, r5, r3
 800ba7c:	68a3      	ldr	r3, [r4, #8]
 800ba7e:	bf0c      	ite	eq
 800ba80:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ba84:	2500      	movne	r5, #0
 800ba86:	4293      	cmp	r3, r2
 800ba88:	bfc4      	itt	gt
 800ba8a:	1a9b      	subgt	r3, r3, r2
 800ba8c:	18ed      	addgt	r5, r5, r3
 800ba8e:	2600      	movs	r6, #0
 800ba90:	341a      	adds	r4, #26
 800ba92:	42b5      	cmp	r5, r6
 800ba94:	d11a      	bne.n	800bacc <_printf_common+0xc8>
 800ba96:	2000      	movs	r0, #0
 800ba98:	e008      	b.n	800baac <_printf_common+0xa8>
 800ba9a:	2301      	movs	r3, #1
 800ba9c:	4652      	mov	r2, sl
 800ba9e:	4641      	mov	r1, r8
 800baa0:	4638      	mov	r0, r7
 800baa2:	47c8      	blx	r9
 800baa4:	3001      	adds	r0, #1
 800baa6:	d103      	bne.n	800bab0 <_printf_common+0xac>
 800baa8:	f04f 30ff 	mov.w	r0, #4294967295
 800baac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bab0:	3501      	adds	r5, #1
 800bab2:	e7c6      	b.n	800ba42 <_printf_common+0x3e>
 800bab4:	18e1      	adds	r1, r4, r3
 800bab6:	1c5a      	adds	r2, r3, #1
 800bab8:	2030      	movs	r0, #48	@ 0x30
 800baba:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800babe:	4422      	add	r2, r4
 800bac0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800bac4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800bac8:	3302      	adds	r3, #2
 800baca:	e7c7      	b.n	800ba5c <_printf_common+0x58>
 800bacc:	2301      	movs	r3, #1
 800bace:	4622      	mov	r2, r4
 800bad0:	4641      	mov	r1, r8
 800bad2:	4638      	mov	r0, r7
 800bad4:	47c8      	blx	r9
 800bad6:	3001      	adds	r0, #1
 800bad8:	d0e6      	beq.n	800baa8 <_printf_common+0xa4>
 800bada:	3601      	adds	r6, #1
 800badc:	e7d9      	b.n	800ba92 <_printf_common+0x8e>
	...

0800bae0 <_printf_i>:
 800bae0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bae4:	7e0f      	ldrb	r7, [r1, #24]
 800bae6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800bae8:	2f78      	cmp	r7, #120	@ 0x78
 800baea:	4691      	mov	r9, r2
 800baec:	4680      	mov	r8, r0
 800baee:	460c      	mov	r4, r1
 800baf0:	469a      	mov	sl, r3
 800baf2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800baf6:	d807      	bhi.n	800bb08 <_printf_i+0x28>
 800baf8:	2f62      	cmp	r7, #98	@ 0x62
 800bafa:	d80a      	bhi.n	800bb12 <_printf_i+0x32>
 800bafc:	2f00      	cmp	r7, #0
 800bafe:	f000 80d1 	beq.w	800bca4 <_printf_i+0x1c4>
 800bb02:	2f58      	cmp	r7, #88	@ 0x58
 800bb04:	f000 80b8 	beq.w	800bc78 <_printf_i+0x198>
 800bb08:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb0c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800bb10:	e03a      	b.n	800bb88 <_printf_i+0xa8>
 800bb12:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800bb16:	2b15      	cmp	r3, #21
 800bb18:	d8f6      	bhi.n	800bb08 <_printf_i+0x28>
 800bb1a:	a101      	add	r1, pc, #4	@ (adr r1, 800bb20 <_printf_i+0x40>)
 800bb1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800bb20:	0800bb79 	.word	0x0800bb79
 800bb24:	0800bb8d 	.word	0x0800bb8d
 800bb28:	0800bb09 	.word	0x0800bb09
 800bb2c:	0800bb09 	.word	0x0800bb09
 800bb30:	0800bb09 	.word	0x0800bb09
 800bb34:	0800bb09 	.word	0x0800bb09
 800bb38:	0800bb8d 	.word	0x0800bb8d
 800bb3c:	0800bb09 	.word	0x0800bb09
 800bb40:	0800bb09 	.word	0x0800bb09
 800bb44:	0800bb09 	.word	0x0800bb09
 800bb48:	0800bb09 	.word	0x0800bb09
 800bb4c:	0800bc8b 	.word	0x0800bc8b
 800bb50:	0800bbb7 	.word	0x0800bbb7
 800bb54:	0800bc45 	.word	0x0800bc45
 800bb58:	0800bb09 	.word	0x0800bb09
 800bb5c:	0800bb09 	.word	0x0800bb09
 800bb60:	0800bcad 	.word	0x0800bcad
 800bb64:	0800bb09 	.word	0x0800bb09
 800bb68:	0800bbb7 	.word	0x0800bbb7
 800bb6c:	0800bb09 	.word	0x0800bb09
 800bb70:	0800bb09 	.word	0x0800bb09
 800bb74:	0800bc4d 	.word	0x0800bc4d
 800bb78:	6833      	ldr	r3, [r6, #0]
 800bb7a:	1d1a      	adds	r2, r3, #4
 800bb7c:	681b      	ldr	r3, [r3, #0]
 800bb7e:	6032      	str	r2, [r6, #0]
 800bb80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800bb84:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bb88:	2301      	movs	r3, #1
 800bb8a:	e09c      	b.n	800bcc6 <_printf_i+0x1e6>
 800bb8c:	6833      	ldr	r3, [r6, #0]
 800bb8e:	6820      	ldr	r0, [r4, #0]
 800bb90:	1d19      	adds	r1, r3, #4
 800bb92:	6031      	str	r1, [r6, #0]
 800bb94:	0606      	lsls	r6, r0, #24
 800bb96:	d501      	bpl.n	800bb9c <_printf_i+0xbc>
 800bb98:	681d      	ldr	r5, [r3, #0]
 800bb9a:	e003      	b.n	800bba4 <_printf_i+0xc4>
 800bb9c:	0645      	lsls	r5, r0, #25
 800bb9e:	d5fb      	bpl.n	800bb98 <_printf_i+0xb8>
 800bba0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800bba4:	2d00      	cmp	r5, #0
 800bba6:	da03      	bge.n	800bbb0 <_printf_i+0xd0>
 800bba8:	232d      	movs	r3, #45	@ 0x2d
 800bbaa:	426d      	negs	r5, r5
 800bbac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bbb0:	4858      	ldr	r0, [pc, #352]	@ (800bd14 <_printf_i+0x234>)
 800bbb2:	230a      	movs	r3, #10
 800bbb4:	e011      	b.n	800bbda <_printf_i+0xfa>
 800bbb6:	6821      	ldr	r1, [r4, #0]
 800bbb8:	6833      	ldr	r3, [r6, #0]
 800bbba:	0608      	lsls	r0, r1, #24
 800bbbc:	f853 5b04 	ldr.w	r5, [r3], #4
 800bbc0:	d402      	bmi.n	800bbc8 <_printf_i+0xe8>
 800bbc2:	0649      	lsls	r1, r1, #25
 800bbc4:	bf48      	it	mi
 800bbc6:	b2ad      	uxthmi	r5, r5
 800bbc8:	2f6f      	cmp	r7, #111	@ 0x6f
 800bbca:	4852      	ldr	r0, [pc, #328]	@ (800bd14 <_printf_i+0x234>)
 800bbcc:	6033      	str	r3, [r6, #0]
 800bbce:	bf14      	ite	ne
 800bbd0:	230a      	movne	r3, #10
 800bbd2:	2308      	moveq	r3, #8
 800bbd4:	2100      	movs	r1, #0
 800bbd6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800bbda:	6866      	ldr	r6, [r4, #4]
 800bbdc:	60a6      	str	r6, [r4, #8]
 800bbde:	2e00      	cmp	r6, #0
 800bbe0:	db05      	blt.n	800bbee <_printf_i+0x10e>
 800bbe2:	6821      	ldr	r1, [r4, #0]
 800bbe4:	432e      	orrs	r6, r5
 800bbe6:	f021 0104 	bic.w	r1, r1, #4
 800bbea:	6021      	str	r1, [r4, #0]
 800bbec:	d04b      	beq.n	800bc86 <_printf_i+0x1a6>
 800bbee:	4616      	mov	r6, r2
 800bbf0:	fbb5 f1f3 	udiv	r1, r5, r3
 800bbf4:	fb03 5711 	mls	r7, r3, r1, r5
 800bbf8:	5dc7      	ldrb	r7, [r0, r7]
 800bbfa:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800bbfe:	462f      	mov	r7, r5
 800bc00:	42bb      	cmp	r3, r7
 800bc02:	460d      	mov	r5, r1
 800bc04:	d9f4      	bls.n	800bbf0 <_printf_i+0x110>
 800bc06:	2b08      	cmp	r3, #8
 800bc08:	d10b      	bne.n	800bc22 <_printf_i+0x142>
 800bc0a:	6823      	ldr	r3, [r4, #0]
 800bc0c:	07df      	lsls	r7, r3, #31
 800bc0e:	d508      	bpl.n	800bc22 <_printf_i+0x142>
 800bc10:	6923      	ldr	r3, [r4, #16]
 800bc12:	6861      	ldr	r1, [r4, #4]
 800bc14:	4299      	cmp	r1, r3
 800bc16:	bfde      	ittt	le
 800bc18:	2330      	movle	r3, #48	@ 0x30
 800bc1a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800bc1e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800bc22:	1b92      	subs	r2, r2, r6
 800bc24:	6122      	str	r2, [r4, #16]
 800bc26:	f8cd a000 	str.w	sl, [sp]
 800bc2a:	464b      	mov	r3, r9
 800bc2c:	aa03      	add	r2, sp, #12
 800bc2e:	4621      	mov	r1, r4
 800bc30:	4640      	mov	r0, r8
 800bc32:	f7ff fee7 	bl	800ba04 <_printf_common>
 800bc36:	3001      	adds	r0, #1
 800bc38:	d14a      	bne.n	800bcd0 <_printf_i+0x1f0>
 800bc3a:	f04f 30ff 	mov.w	r0, #4294967295
 800bc3e:	b004      	add	sp, #16
 800bc40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bc44:	6823      	ldr	r3, [r4, #0]
 800bc46:	f043 0320 	orr.w	r3, r3, #32
 800bc4a:	6023      	str	r3, [r4, #0]
 800bc4c:	4832      	ldr	r0, [pc, #200]	@ (800bd18 <_printf_i+0x238>)
 800bc4e:	2778      	movs	r7, #120	@ 0x78
 800bc50:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800bc54:	6823      	ldr	r3, [r4, #0]
 800bc56:	6831      	ldr	r1, [r6, #0]
 800bc58:	061f      	lsls	r7, r3, #24
 800bc5a:	f851 5b04 	ldr.w	r5, [r1], #4
 800bc5e:	d402      	bmi.n	800bc66 <_printf_i+0x186>
 800bc60:	065f      	lsls	r7, r3, #25
 800bc62:	bf48      	it	mi
 800bc64:	b2ad      	uxthmi	r5, r5
 800bc66:	6031      	str	r1, [r6, #0]
 800bc68:	07d9      	lsls	r1, r3, #31
 800bc6a:	bf44      	itt	mi
 800bc6c:	f043 0320 	orrmi.w	r3, r3, #32
 800bc70:	6023      	strmi	r3, [r4, #0]
 800bc72:	b11d      	cbz	r5, 800bc7c <_printf_i+0x19c>
 800bc74:	2310      	movs	r3, #16
 800bc76:	e7ad      	b.n	800bbd4 <_printf_i+0xf4>
 800bc78:	4826      	ldr	r0, [pc, #152]	@ (800bd14 <_printf_i+0x234>)
 800bc7a:	e7e9      	b.n	800bc50 <_printf_i+0x170>
 800bc7c:	6823      	ldr	r3, [r4, #0]
 800bc7e:	f023 0320 	bic.w	r3, r3, #32
 800bc82:	6023      	str	r3, [r4, #0]
 800bc84:	e7f6      	b.n	800bc74 <_printf_i+0x194>
 800bc86:	4616      	mov	r6, r2
 800bc88:	e7bd      	b.n	800bc06 <_printf_i+0x126>
 800bc8a:	6833      	ldr	r3, [r6, #0]
 800bc8c:	6825      	ldr	r5, [r4, #0]
 800bc8e:	6961      	ldr	r1, [r4, #20]
 800bc90:	1d18      	adds	r0, r3, #4
 800bc92:	6030      	str	r0, [r6, #0]
 800bc94:	062e      	lsls	r6, r5, #24
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	d501      	bpl.n	800bc9e <_printf_i+0x1be>
 800bc9a:	6019      	str	r1, [r3, #0]
 800bc9c:	e002      	b.n	800bca4 <_printf_i+0x1c4>
 800bc9e:	0668      	lsls	r0, r5, #25
 800bca0:	d5fb      	bpl.n	800bc9a <_printf_i+0x1ba>
 800bca2:	8019      	strh	r1, [r3, #0]
 800bca4:	2300      	movs	r3, #0
 800bca6:	6123      	str	r3, [r4, #16]
 800bca8:	4616      	mov	r6, r2
 800bcaa:	e7bc      	b.n	800bc26 <_printf_i+0x146>
 800bcac:	6833      	ldr	r3, [r6, #0]
 800bcae:	1d1a      	adds	r2, r3, #4
 800bcb0:	6032      	str	r2, [r6, #0]
 800bcb2:	681e      	ldr	r6, [r3, #0]
 800bcb4:	6862      	ldr	r2, [r4, #4]
 800bcb6:	2100      	movs	r1, #0
 800bcb8:	4630      	mov	r0, r6
 800bcba:	f7f4 faa1 	bl	8000200 <memchr>
 800bcbe:	b108      	cbz	r0, 800bcc4 <_printf_i+0x1e4>
 800bcc0:	1b80      	subs	r0, r0, r6
 800bcc2:	6060      	str	r0, [r4, #4]
 800bcc4:	6863      	ldr	r3, [r4, #4]
 800bcc6:	6123      	str	r3, [r4, #16]
 800bcc8:	2300      	movs	r3, #0
 800bcca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bcce:	e7aa      	b.n	800bc26 <_printf_i+0x146>
 800bcd0:	6923      	ldr	r3, [r4, #16]
 800bcd2:	4632      	mov	r2, r6
 800bcd4:	4649      	mov	r1, r9
 800bcd6:	4640      	mov	r0, r8
 800bcd8:	47d0      	blx	sl
 800bcda:	3001      	adds	r0, #1
 800bcdc:	d0ad      	beq.n	800bc3a <_printf_i+0x15a>
 800bcde:	6823      	ldr	r3, [r4, #0]
 800bce0:	079b      	lsls	r3, r3, #30
 800bce2:	d413      	bmi.n	800bd0c <_printf_i+0x22c>
 800bce4:	68e0      	ldr	r0, [r4, #12]
 800bce6:	9b03      	ldr	r3, [sp, #12]
 800bce8:	4298      	cmp	r0, r3
 800bcea:	bfb8      	it	lt
 800bcec:	4618      	movlt	r0, r3
 800bcee:	e7a6      	b.n	800bc3e <_printf_i+0x15e>
 800bcf0:	2301      	movs	r3, #1
 800bcf2:	4632      	mov	r2, r6
 800bcf4:	4649      	mov	r1, r9
 800bcf6:	4640      	mov	r0, r8
 800bcf8:	47d0      	blx	sl
 800bcfa:	3001      	adds	r0, #1
 800bcfc:	d09d      	beq.n	800bc3a <_printf_i+0x15a>
 800bcfe:	3501      	adds	r5, #1
 800bd00:	68e3      	ldr	r3, [r4, #12]
 800bd02:	9903      	ldr	r1, [sp, #12]
 800bd04:	1a5b      	subs	r3, r3, r1
 800bd06:	42ab      	cmp	r3, r5
 800bd08:	dcf2      	bgt.n	800bcf0 <_printf_i+0x210>
 800bd0a:	e7eb      	b.n	800bce4 <_printf_i+0x204>
 800bd0c:	2500      	movs	r5, #0
 800bd0e:	f104 0619 	add.w	r6, r4, #25
 800bd12:	e7f5      	b.n	800bd00 <_printf_i+0x220>
 800bd14:	0800be5d 	.word	0x0800be5d
 800bd18:	0800be6e 	.word	0x0800be6e

0800bd1c <memmove>:
 800bd1c:	4288      	cmp	r0, r1
 800bd1e:	b510      	push	{r4, lr}
 800bd20:	eb01 0402 	add.w	r4, r1, r2
 800bd24:	d902      	bls.n	800bd2c <memmove+0x10>
 800bd26:	4284      	cmp	r4, r0
 800bd28:	4623      	mov	r3, r4
 800bd2a:	d807      	bhi.n	800bd3c <memmove+0x20>
 800bd2c:	1e43      	subs	r3, r0, #1
 800bd2e:	42a1      	cmp	r1, r4
 800bd30:	d008      	beq.n	800bd44 <memmove+0x28>
 800bd32:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd36:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd3a:	e7f8      	b.n	800bd2e <memmove+0x12>
 800bd3c:	4402      	add	r2, r0
 800bd3e:	4601      	mov	r1, r0
 800bd40:	428a      	cmp	r2, r1
 800bd42:	d100      	bne.n	800bd46 <memmove+0x2a>
 800bd44:	bd10      	pop	{r4, pc}
 800bd46:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bd4a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bd4e:	e7f7      	b.n	800bd40 <memmove+0x24>

0800bd50 <memcpy>:
 800bd50:	440a      	add	r2, r1
 800bd52:	4291      	cmp	r1, r2
 800bd54:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd58:	d100      	bne.n	800bd5c <memcpy+0xc>
 800bd5a:	4770      	bx	lr
 800bd5c:	b510      	push	{r4, lr}
 800bd5e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd62:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd66:	4291      	cmp	r1, r2
 800bd68:	d1f9      	bne.n	800bd5e <memcpy+0xe>
 800bd6a:	bd10      	pop	{r4, pc}

0800bd6c <_realloc_r>:
 800bd6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd70:	4607      	mov	r7, r0
 800bd72:	4614      	mov	r4, r2
 800bd74:	460d      	mov	r5, r1
 800bd76:	b921      	cbnz	r1, 800bd82 <_realloc_r+0x16>
 800bd78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bd7c:	4611      	mov	r1, r2
 800bd7e:	f7ff bb99 	b.w	800b4b4 <_malloc_r>
 800bd82:	b92a      	cbnz	r2, 800bd90 <_realloc_r+0x24>
 800bd84:	f7ff fc9c 	bl	800b6c0 <_free_r>
 800bd88:	4625      	mov	r5, r4
 800bd8a:	4628      	mov	r0, r5
 800bd8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bd90:	f000 f81a 	bl	800bdc8 <_malloc_usable_size_r>
 800bd94:	4284      	cmp	r4, r0
 800bd96:	4606      	mov	r6, r0
 800bd98:	d802      	bhi.n	800bda0 <_realloc_r+0x34>
 800bd9a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bd9e:	d8f4      	bhi.n	800bd8a <_realloc_r+0x1e>
 800bda0:	4621      	mov	r1, r4
 800bda2:	4638      	mov	r0, r7
 800bda4:	f7ff fb86 	bl	800b4b4 <_malloc_r>
 800bda8:	4680      	mov	r8, r0
 800bdaa:	b908      	cbnz	r0, 800bdb0 <_realloc_r+0x44>
 800bdac:	4645      	mov	r5, r8
 800bdae:	e7ec      	b.n	800bd8a <_realloc_r+0x1e>
 800bdb0:	42b4      	cmp	r4, r6
 800bdb2:	4622      	mov	r2, r4
 800bdb4:	4629      	mov	r1, r5
 800bdb6:	bf28      	it	cs
 800bdb8:	4632      	movcs	r2, r6
 800bdba:	f7ff ffc9 	bl	800bd50 <memcpy>
 800bdbe:	4629      	mov	r1, r5
 800bdc0:	4638      	mov	r0, r7
 800bdc2:	f7ff fc7d 	bl	800b6c0 <_free_r>
 800bdc6:	e7f1      	b.n	800bdac <_realloc_r+0x40>

0800bdc8 <_malloc_usable_size_r>:
 800bdc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bdcc:	1f18      	subs	r0, r3, #4
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	bfbc      	itt	lt
 800bdd2:	580b      	ldrlt	r3, [r1, r0]
 800bdd4:	18c0      	addlt	r0, r0, r3
 800bdd6:	4770      	bx	lr

0800bdd8 <_init>:
 800bdd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdda:	bf00      	nop
 800bddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdde:	bc08      	pop	{r3}
 800bde0:	469e      	mov	lr, r3
 800bde2:	4770      	bx	lr

0800bde4 <_fini>:
 800bde4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bde6:	bf00      	nop
 800bde8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdea:	bc08      	pop	{r3}
 800bdec:	469e      	mov	lr, r3
 800bdee:	4770      	bx	lr
